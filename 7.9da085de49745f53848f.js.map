{"version":3,"file":"7.9da085de49745f53848f.js","mappings":"itCA6MA,SAASA,EAAYC,EAAsDC,GACzE,MAAMC,EAAQC,SAASC,cAAc,OACrCF,EAAMG,UAAUC,IAAI,SAEpB,MAAMC,EAAM,IAAIC,MAYhB,GAVsB,iBAAXR,EACTO,EAAIE,IAAMT,EACDA,aAAkBU,iBAC3BH,EAAIE,IAAMT,EAAOW,OAEjBJ,EAAIE,IAAMT,EAAOS,IAGnBP,EAAMU,YAAYL,GAEdN,IAAWY,EAAAA,GAAAA,eAAmCZ,IAAWY,EAAAA,GAAAA,eAAkC,CAC7FX,EAAMG,UAAUC,IAAI,eAChBL,IAAWY,EAAAA,GAAAA,gBACbX,EAAMG,UAAUC,IAAI,QAEtB,MAAMQ,EAAcX,SAASY,cAC3Bd,IAAWY,EAAAA,GAAAA,cACP,kCACA,gCAEFC,GACFZ,EAAMU,YAAYE,EAAYE,WAAU,IAI5C,OAAOd,EAoCT,SAASe,EAA2BC,EAAwBC,GAC1D,MAAMC,EAAqBjB,SAASY,cAA8B,0BAClE,IAAIM,EAAeH,EAAUI,UAAYH,EAAQI,QAAwB,4BAA6BD,UAKtG,OAJIJ,EAAUM,GAAGC,SAAS,kBACxBJ,GAAgBH,EAAUQ,cAAeJ,UAAYJ,EAAUK,QAAwB,YAAaD,WAG/FD,EAAeD,EAAmBO,WACpCN,EAAeF,EAAQS,aAAeR,EAAmBO,UAAYP,EAAmBQ,aAa/F,SAASC,EAAYC,EAAsBC,GACzCC,OAAOC,OAAOH,EAAQI,MAAOH,GAG/B,SAASI,EAASlC,EAA2BmC,GAC3C,IAAIC,EACAC,EAEJ,OAAQrC,GACN,KAAKY,EAAAA,GAAAA,MACL,KAAKA,EAAAA,GAAAA,eACHwB,EAAqB,uCAAsCD,EAASZ,KACpEc,EAAgB,cAChB,MAEF,KAAKzB,EAAAA,GAAAA,YACHwB,EAAqB,gBAAeD,EAASZ,KAC7Cc,EAAgB,MAChB,MAEF,KAAKzB,EAAAA,GAAAA,aACHwB,EAAqB,gBAAeD,EAASZ,KAC7Cc,EAAgB,MAChB,MAEF,KAAKzB,EAAAA,GAAAA,mBACHwB,EAAoB,kCACpBC,EAAgB,mBAChB,MAEF,KAAKzB,EAAAA,GAAAA,eACHwB,EAAoB,+CACpBC,EAAgB,mBAChB,MAEF,KAAKzB,EAAAA,GAAAA,cACHwB,EAAoB,kDACpBC,EAAgB,mBAChB,MAEF,KAAKzB,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,OACL,QACEwB,EAAqB,kCAAiCD,EAASZ,KAC/Dc,EAAgB,4DAGpB,MAAMpB,EAAYf,SAASY,cAA2BsB,GAChDE,EAAWrB,GAAaA,EAAUsB,iBAAsDF,GAE9F,MAAO,CACLpB,UAAAA,EACAuB,QAASF,MAAAA,OAAF,EAAEA,EAAWA,EAASG,OAAS,IAI1C,SAASC,EAAWzC,EAAuBD,GACzC,OAAQA,GACN,KAAKY,EAAAA,GAAAA,MACL,KAAKA,EAAAA,GAAAA,eACL,KAAKA,EAAAA,GAAAA,OACL,KAAKA,EAAAA,GAAAA,gBACHX,EAAMG,UAAUC,IAAI,mBACpB,MAEF,KAAKO,EAAAA,GAAAA,YACL,KAAKA,EAAAA,GAAAA,eACL,KAAKA,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,aACFX,EAAM0C,WAA2BV,MAAMW,UAAY,QACpD,MAEF,KAAKhC,EAAAA,GAAAA,mBACHX,EAAMG,UAAUC,IAAI,W,0FC3U1B,MA2CA,GAAewC,EAAAA,EAAAA,KACb,CAACC,GAAUC,OAAAA,EAAQC,UAAAA,EAAWC,SAAAA,MAC5B,GAAIA,GAAYF,EACd,MAAO,CACLG,QAAQC,EAAAA,EAAAA,IAASJ,IAAUK,EAAAA,EAAAA,IAAWN,EAAQC,IAAUM,EAAAA,EAAAA,IAAWP,EAAQC,IAI/E,IAAKC,IAAcD,EACjB,MAAO,GAGT,MAAMZ,GAAUmB,EAAAA,EAAAA,IAAkBR,EAAQC,EAAQC,GAElD,MAAO,CACLb,QAAAA,EACAe,OAAQf,IAAWoB,EAAAA,EAAAA,IAAaT,EAAQX,OAG5C,CAACqB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,mBAAoB,kBAnB5E,EA3C8D,EAC5DV,OAAAA,EACAC,UAAAA,EACAE,OAAAA,EACAD,SAAAA,EACAd,QAAAA,EACAwB,iBAAAA,EACAC,aAAAA,MAEA,MAAMC,GAAqBC,EAAAA,EAAAA,KAAY,KACrCH,IACAC,EAAa,CAAEb,OAAAA,EAAQC,UAAAA,MACtB,CAACD,EAAQa,EAAcZ,EAAWW,IAE/BI,GAAOC,EAAAA,EAAAA,KAEb,IAAKd,IAAYf,IAAYc,EAC3B,OAGF,MAAMgB,GAAcC,EAAAA,EAAAA,IAAeH,EAAMb,GAEzC,OACE,0BAAKiB,UAAU,aAAaC,QAASP,IAClCV,EAAAA,EAAAA,IAASD,EAAO3B,IACf,mBAAC8C,EAAA,EAAD,CAAQC,IAAKpB,EAAO3B,GAAIgD,KAAK,SAASC,KAAMtB,IAE5C,mBAACmB,EAAA,EAAD,CAAQC,IAAKpB,EAAO3B,GAAIgD,KAAK,SAASE,KAAMvB,IAE9C,0BAAKiB,UAAU,QACb,0BAAKA,UAAU,QAAQO,IAAI,QACxBT,IAAeU,EAAAA,EAAAA,GAAWV,IAE7B,0BAAKE,UAAU,OAAOO,IAAI,QACvBzB,EACGc,EAAK,gCACLa,EAAAA,EAAAA,IAAoBb,EAAsB,IAAhB5B,EAAS0C,MAAa,S,kCC5B9D,MAgJA,GAAeC,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUX,QAAAA,MAGF,CACL4C,gBAHoB5C,IAAU6C,EAAAA,EAAAA,IAAoBlC,EAAQX,OAM9D,CAACqB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,uBACA,gCAVgBZ,EAhJkD,EACpEoC,UAAAA,EACAC,QAAAA,EACAC,SAAAA,EACAhD,QAAAA,EACAiD,SAAAA,EACAnC,SAAAA,EACA8B,cAAAA,EACAM,mBAAAA,EACAC,UAAAA,EACAC,aAAAA,EACAC,qBAAAA,EACAC,2BAAAA,MAEA,MAAQC,aAAcC,IAAqBC,EAAAA,EAAAA,GACzCzD,IAAW0D,EAAAA,EAAAA,IAAoB1D,EAAS,aACvC4C,GAGGe,GAAsBhC,EAAAA,EAAAA,KAAY,KAClCiB,EACFU,EAA2B,CAAEtD,QAAAA,IAE7BqD,EAAqB,CAAErD,QAAAA,MAExB,CAACsD,EAA4BD,EAAsBT,EAAe5C,IAE/D4B,GAAOC,EAAAA,EAAAA,KAEP+B,GAA8DC,EAAAA,EAAAA,KAAQ,IACnE,EAAGC,UAAAA,EAAWC,OAAAA,KACnB,mBAACC,EAAA,EAAD,CACEC,OAAK,EACL7B,KAAK,UACL8B,MAAM,cACNlC,UAAW+B,EAAS,cAAWI,EAC/BlC,QAAS6B,EACTM,UAAU,gBAEV,wBAAGpC,UAAU,gBAGhB,IAEH,OAAIqC,EAAAA,GAEA,0BAAKrC,UAAU,6BACb,mBAACsC,EAAA,EAAD,CACEC,QAASX,EACTY,UAAU,UAER1D,GACA,mBAAC2D,EAAA,EAAD,CACEC,KAAK,UACLzC,QAASkB,GAERvB,EAAK,YAGTmB,EACC,mBAAC0B,EAAA,EAAD,CACEC,KAAM9B,EAAgB,QAAU,WAChCX,QAAS0B,GAERf,EAAiB,GAAE+B,KAAKV,MAAyB,IAAnBT,qBAA4C,YAG7E,mBAACiB,EAAA,EAAD,CACEC,KAAK,WACLE,KAAM9B,EACN+B,SAAU5B,GAETrB,EAAK,uBAIXgB,GAAiB,mBAACkC,EAAA,EAAD,CAAiBC,SAAUvB,EAAkBpB,KAAK,IAAI4C,SAAO,KAMnF,0BAAKhD,UAAU,uBACXlB,GACA,sCACE,mBAACkD,EAAA,EAAD,CACEC,OAAK,EACL7B,KAAK,UACL8B,MAAM,oBACNE,UAAWxC,EAAK,WAChBK,QAASkB,GAET,wBAAGnB,UAAU,mBAIlBe,EACC,mBAACiB,EAAA,EAAD,CACEC,OAAK,EACL7B,KAAK,UACL8B,MAAM,oBACNE,UAAWxC,EAAK,qBAChBK,QAAS0B,GAERf,EACC,mBAACkC,EAAA,EAAD,CAAiBC,SAAUvB,EAAkBpB,KAAK,IAAIH,QAAS0B,IAE/D,wBAAG3B,UAAU,mBAIjB,mBAACgC,EAAA,EAAD,CACEY,KAAM9B,EACN+B,SAAU5B,EACVgB,OAAK,EACL7B,KAAK,UACL8B,MAAM,oBACNE,UAAWxC,EAAK,sBAEhB,wBAAGI,UAAU,mBAGjB,mBAACgC,EAAA,EAAD,CACEC,OAAK,EACL7B,KAAK,UACL8B,MAAM,oBACNE,UAAWpB,EAAW,WAAa,UACnCf,QAASmB,GAET,wBAAGpB,UAAWgB,EAAW,gBAAkB,kBAE7C,mBAACgB,EAAA,EAAD,CACEC,OAAK,EACL7B,KAAK,UACL8B,MAAM,oBACNE,UAAWxC,EAAK,SAChBK,QAASiB,GAET,wBAAGlB,UAAU,qB,wBC3KrB,MAyDA,EAhDwC,EACtCiD,KAAAA,EAAO,GAAIC,SAAAA,EAAUC,WAAAA,EAAYlD,QAAAA,MAEjC,MAAOmD,EAAaC,IAAkBC,EAAAA,EAAAA,KAAS,IAC/CC,EAAAA,EAAAA,KAAU,KACR,MAAMC,EAAgBzH,SAASY,cAAc,kCAEvC8G,EAAmB,KACvB,MAAMC,EAASF,EAAgBA,EAAcG,aAAe,EAE5DN,EAAeK,EAAe,EAANE,EAAAA,KAI1BH,IAEA,MAAMI,GAAeC,EAAAA,EAAAA,IAASL,EAzBP,KAyB6C,GAIpE,OAFAM,OAAOC,iBAAiB,SAAUH,GAAc,GAEzC,KACLE,OAAOE,oBAAoB,SAAUJ,GAAc,MAEpD,IAQH,MAAMK,GAAaC,EAAAA,EAAAA,GACjB,oBACAhB,GAAc,eACdD,GAAY,aAGd,OACE,0BAAKlD,UAAWkE,EAAYjE,QAb9B,SAAmBmE,GACbnB,GACFmB,EAAEC,oBAYDpB,GACC,0BAAKjD,UAAU,8BAA8BC,QAAUoC,EAAAA,QAAoCF,EAAVlC,GAC/E,wBAAGD,UAAY,6BAA2BoD,EAAc,YAAc,IAAM7C,IAAI,QAAQ0C,M,wBClDlG,MAAMqB,OA+EsC,IAA/BvI,SAASwI,kBACX,yBAC2C,IAAlCxI,SAASyI,qBAClB,4BAC8C,IAArCzI,SAAS0I,wBAClB,0BAGF,G,wBCjGT,MAAMC,EAAQ,CAAC,QAAS,KAAM,KAAM,KAAM,KAAM,MAEhD,EAAgBC,IACd,MAAMC,EAAmB,IAAVD,EAAc,EAAIhC,KAAKkC,MAAMlC,KAAKmC,IAAIH,GAAShC,KAAKmC,IAAI,OAEvE,MAAQ,IAAGH,EAAQ,MAAQhC,KAAKkC,MAAMD,IAASG,QAAQ,MAAML,EAAME,MCwB/DI,EAAaZ,IACjBA,EAAEC,mBAmKJ,GA9JwC,EACtCY,iBAAAA,EACAC,YAAAA,EACAC,SAAAA,EACAC,SAAAA,EACAC,eAAAA,EACAC,qBAAAA,EACAC,SAAAA,EACAC,sBAAAA,EACAC,aAAAA,EACAC,mBAAAA,EACAC,YAAAA,EACAC,OAAAA,MAEA,MAAOC,EAAWC,IAAiBxC,EAAAA,EAAAA,KAAS,GAEtCyC,GAAYC,EAAAA,EAAAA,IAAuB,MACnCC,GAAYD,EAAAA,EAAAA,KAAgB,IAElCzC,EAAAA,EAAAA,KAAU,KACJ8B,GACFS,EAAcT,KAEf,CAACA,KAEJ9B,EAAAA,EAAAA,KAAU,KACR,IAAI2C,EAYJ,OAVKb,IACChD,EAAAA,GACFyD,GAAc,GAEdI,EAAUnC,OAAOoC,YAAW,KAC1BL,GAAc,KAnCS,MAwCtB,KACDI,GACFnC,OAAOqC,aAAaF,MAGvB,CAACb,KAEJ9B,EAAAA,EAAAA,KAAU,MACJsC,GAAaR,IACftJ,SAASsK,KAAKpK,UAAUC,IAAI,0BAGvB,KACLH,SAASsK,KAAKpK,UAAUqK,OAAO,6BAEhC,CAACjB,EAAgBQ,IAEpB,MAAMjG,GAAOC,EAAAA,EAAAA,KAEP0G,GAAa5G,EAAAA,EAAAA,KAAayE,IAC9B,GAAI6B,EAAUO,SAAWT,EAAUS,QAAS,CAC1C,MAAM,MAAEC,EAAF,KAASC,GAASX,EAAUS,QAAQG,wBACpCC,EAAUxC,aAAayC,WAAazC,EAAEwC,QAAUxC,EAAE0C,cAAc,GAAGF,QACzEhB,EAAOjD,KAAKoE,IAAIpE,KAAKqE,IAAI7B,IAAayB,EAAUF,GAAQD,GAAQtB,GAAW,OAE5E,CAACA,EAAUS,IAERqB,GAAkBtH,EAAAA,EAAAA,KAAayE,IACnC6B,EAAUO,SAAU,EACpBD,EAAWnC,KACV,CAACmC,IAEEW,GAAiBvH,EAAAA,EAAAA,KAAY,KACjCsG,EAAUO,SAAU,IACnB,IAsDL,IAAwBW,EAAuBC,EA1C7C,IAVA7D,EAAAA,EAAAA,KAAU,KACR,GAAKwC,EAAUS,SAAYX,EAC3B,OAAOwB,EAAAA,EAAAA,GAActB,EAAUS,QAAS,CACtCc,UAAWL,EACXM,UAAWL,EACXjH,QAASiH,EACTM,OAAQjB,MAET,CAACV,EAAWoB,EAAiBV,EAAYW,IAEvCrB,GAAcR,EAInB,OACE,0BAAKrF,UAAY,wBAAsBsF,EAAuB,SAAW,IAAMrF,QAAS+E,GA6C5F,SACEE,EAAqBC,EAAkBF,EAA0Bc,GAEjE,MAAM0B,EAAoBvC,EAAcC,EAAY,IAC9CuC,EAAwC,IAAnBzC,EAE3B,OACE,0BAAKjF,UAAU,kBAAkB2H,IAAK5B,GACpC,0BAAK/F,UAAU,yBACb,0BACEA,UAAU,2BAEVlC,MAAQ,UAAS4J,GAAsB,OAEzC,0BACE1H,UAAU,yBAEVlC,MAAQ,UAAS2J,GAAoB,SA7DxCG,CAAe1C,EAAaC,EAAUF,EAAkBc,GACzD,mBAAC/D,EAAA,EAAD,CACEI,UAAWxC,EAAK,iBAChBQ,KAAK,OACLyH,QAASxF,EAAAA,GACTH,MAAM,oBACNlC,UAAU,OACVC,QAAS0F,GAET,wBAAG3F,UAAWuF,EAAW,aAAe,eAmBhD,SAAoBL,EAAqBC,GACvC,OACE,0BAAKnF,UAAU,eACX,IAAE8H,EAAAA,EAAAA,IAAoB5C,SAAkB4C,EAAAA,EAAAA,IAAoB3C,MApB7D4C,CAAW7C,EAAaC,GACxBF,EAAmB,IAwBFkC,EAxBsBlC,EAwBCmC,EAxBiBhC,EA0B5D,0BAAKpF,UAAU,oBACX,GAAEgI,EAAeZ,EAAYD,QAAoBa,EAAeZ,OA1BjE5B,GACC,mBAACxD,EAAA,EAAD,CACEI,UAAU,aACVhC,KAAK,OACL8B,MAAM,oBACNlC,UAAU,aACVC,QAASyF,GAET,wBAAG1F,UAAcyF,EAAe,mBAAqB,uB,iNCnH/D,MAiMA,IAAe9E,EAAAA,EAAAA,KA/LmB,EAChCsH,IAAAA,EACAC,MAAAA,EACAC,WAAAA,EACAC,WAAAA,EACA7G,aAAAA,EACA6D,SAAAA,EACAiD,kBAAAA,EACAC,OAAAA,EACAC,QAAAA,MAGA,MAAMC,GAAWxC,EAAAA,EAAAA,IAAyB,OACnCT,EAAUkD,IAAenF,EAAAA,EAAAA,KAAUoF,EAAAA,KAAiBC,EAAAA,KACpDzD,EAAa0D,IAAkBtF,EAAAA,EAAAA,IAAS,IACxCuF,EAAmBC,IAAwBxF,EAAAA,EAAAA,KAAS,IAEpDmC,EAAcsD,EAAeC,GHtCvB,SAA6BC,EAAgBR,GAC1D,MAAOhD,EAAcyD,IAAmB5F,EAAAA,EAAAA,IAAS6F,QAAQ7E,GAAQvI,SAASuI,KAoE1E,OA9BA8E,EAAAA,EAAAA,KAAgB,KACd,MAAMC,EAAW,KAAQH,EAAgBC,QAAQ7E,GAAQvI,SAASuI,MAC5DgF,EAAgB,KAAQJ,GAAgB,IACxCK,EAAe,KACnBL,GAAgB,GAChBT,GAAY,IAERe,EAAQP,EAAMzC,QAWpB,OATAzK,SAASiI,iBAAiB,mBAAoBqF,GAAU,GACxDtN,SAASiI,iBAAiB,yBAA0BqF,GAAU,GAC9DtN,SAASiI,iBAAiB,sBAAuBqF,GAAU,GAEvDG,IACFA,EAAMxF,iBAAiB,wBAAyBsF,GAAe,GAC/DE,EAAMxF,iBAAiB,sBAAuBuF,GAAc,IAGvD,KACLxN,SAASkI,oBAAoB,mBAAoBoF,GAAU,GAC3DtN,SAASkI,oBAAoB,yBAA0BoF,GAAU,GACjEtN,SAASkI,oBAAoB,sBAAuBoF,GAAU,GAC1DG,IACFA,EAAMvF,oBAAoB,wBAAyBqF,GAAe,GAClEE,EAAMvF,oBAAoB,sBAAuBsF,GAAc,OAIlE,IAEEjF,GAAyB,QAAjBmF,EAAAA,GAIN,CAAChE,EAtEc,KACfwD,EAAMzC,UAAalC,GAAyB,QAAjBmF,EAAAA,MAI5BR,EAAMzC,QAAQkD,kBAChBT,EAAMzC,QAAQkD,oBACLT,EAAMzC,QAAQmD,wBACvBV,EAAMzC,QAAQmD,0BACLV,EAAMzC,QAAQoD,sBACvBX,EAAMzC,QAAQoD,wBACLX,EAAMzC,QAAQqD,sBACvBZ,EAAMzC,QAAQqD,uBAGhBX,GAAgB,KAGK,KAChBD,EAAMzC,UAIPzK,SAASiN,eACXjN,SAASiN,iBACAjN,SAAS+N,oBAClB/N,SAAS+N,sBACA/N,SAASgO,uBAClBhO,SAASgO,yBACAhO,SAASiO,sBAClBjO,SAASiO,uBAGXd,GAAgB,MAkCT,EAAC,GGhC4Ce,CAAoBzB,EAAUC,IAE9E,WAAEyB,EAAF,iBAAcjF,EAAd,kBAAgCkF,IAAsBC,EAAAA,EAAAA,MAE1DC,aAAcC,EACdC,qBAAsBC,IACpBC,EAAAA,EAAAA,IAAmBP,OAAY/H,OAAWA,EAAW,SAEvDkI,aAAcK,EACdH,qBAAsBI,IACpBF,EAAAA,EAAAA,GAAkB9B,EAAAA,KAAWpD,IAAa+E,OAAqBnI,OAAWA,EAAW,SAEzFoB,EAAAA,EAAAA,KAAU,KACJ+E,IAAWD,EACbG,EAAShC,QAASoE,QACT3C,IAAQS,EAAAA,KAIjBmC,EAAAA,EAAAA,GAASrC,EAAShC,WAEnB,CAAC8B,EAAQD,EAAmBJ,KAE/B1E,EAAAA,EAAAA,KAAU,KACJiF,EAAShC,QAAStB,cAAgBsD,EAAShC,QAASrB,UACtDyD,EAAe,GACfH,GAAY,IAEZG,EAAeJ,EAAShC,QAAStB,eAElC,CAACA,IAEJ,MAAM4F,GAAkBnL,EAAAA,EAAAA,KAAayE,IACnCA,EAAEC,kBACEkB,GACFiD,EAAShC,QAASoE,QAClBnC,GAAY,MAEZoC,EAAAA,EAAAA,GAASrC,EAAShC,SAClBiC,GAAY,GACRpG,EAAAA,IACFyG,GAAqB,MAGxB,CAACvD,KAEJwF,EAAAA,EAAAA,GAAgBvC,EAAU,IAE1B,MAAMwC,GAAkBrL,EAAAA,EAAAA,KAAY,KAClCmJ,GAAqB,KACpB,IAEGmC,GAAiBtL,EAAAA,EAAAA,KAAY,KACjCmJ,GAAqB,KACpB,IAEGoC,GAAmBvL,EAAAA,EAAAA,KAAayE,IACpCwE,EAAexE,EAAE+G,cAAcjG,eAC9B,IAEGkG,GAAczL,EAAAA,EAAAA,KAAY,KAC9BiJ,EAAe,GACfH,GAAY,GACZK,GAAqB,KACpB,IAEGuC,GAAyB1L,EAAAA,EAAAA,KAAY,KACrC8F,GAAgBuD,EAClBA,KACUvD,GAAgBsD,GAC1BA,MAED,CAACC,EAAgBvD,EAAcsD,IAE5BxC,GAAa5G,EAAAA,EAAAA,KAAa2L,IAC9B9C,EAAShC,QAAStB,YAAcoG,IAC/B,IAEGC,GAAiB5L,EAAAA,EAAAA,KAAayE,IAClCA,EAAEC,kBACFyE,GAAsBD,GACjBA,IACHL,EAAShC,QAASoE,QAClBnC,GAAY,MAEb,CAACI,KAEJtF,EAAAA,EAAAA,KAAU,KACR,MAAMiI,EAA4BpH,IAClB,UAAVA,EAAEjE,KAA6B,MAAViE,EAAEjE,MACzBiE,EAAEqH,iBACFX,EAAgB1G,KAMpB,OAFArI,SAASiI,iBAAiB,UAAWwH,GAA0B,GAExD,KACLzP,SAASkI,oBAAoB,UAAWuH,GAA0B,MAEnE,CAACV,IAEJ,MAAMY,EAAetD,GAAe,UAASA,EAAW3B,oBAAoB2B,EAAW1E,WACjFiI,EAAc,yBAAwBxD,KAE5C,OACE,0BACEnI,UAAU,cACVC,SAAUiI,GAAS7F,EAAAA,GAA0BkJ,OAAiBpJ,EAC9DyJ,YAAc1D,GAAUQ,EAAAA,QAAiCvG,EAAlB6I,EACvCa,WAAa3D,GAAUQ,EAAAA,QAAgCvG,EAAjB8I,GAEtC,0BAEEnN,MAAO4N,GAGP,+BACE/D,IAAKa,EACLsD,SAAUpD,EAAAA,GACVqD,aAAW,EACXC,KAAM9D,EAEN+D,MAAO/D,EACP9K,GAAG,qBAEHU,MAAO6N,EACPO,OAAQvD,EAAAA,GAAS,IAAMF,GAAY,QAAQtG,EAC3CgK,QAASf,EACTnL,QAAUoC,EAAAA,QAA4CF,EAAlB2I,EACpCsB,cAAef,GAEXlB,EAfN,CAgBEkC,aAAcnB,IAEbjD,GAAO,6BAAQ5L,IAAK4L,MAGxByC,GACC,mBAAC1I,EAAA,EAAD,CAAQC,OAAK,EAACjC,UAAY,eAAc2K,IAAwB1K,QAAS6K,GACvE,wBAAG9K,UAAU,eAGhBsK,GACC,0BAAKtK,UAAW,CAAC,oBAAqBwK,GAAmB8B,KAAK,OAC1DpC,GAAc,0BAAKlK,UAAU,aAAf,gBAChB,mBAAC8C,EAAA,EAAD,CACE1C,KAAK,KACL2C,SAAUmH,EAAa,EAAI3I,EAC3BgL,QAAM,EACNtM,QAASsI,MAIbL,IAAUoC,GACV,mBAAC,GAAD,CACE/E,SAAUA,EACVN,iBAAkBA,EAClBC,YAAaA,EACbM,sBAAuB2D,QAAQJ,GAC/BtD,aAAcA,EACdL,SAAUA,EACVD,SAAUqD,EAAShC,QAAUgC,EAAShC,QAAQrB,SAAW,EACzDE,eAAgBwD,EAChBvD,qBAAsB8C,GAAcA,EAAW3B,MAvLpB,IAwL3Bb,OAAQW,EACRb,mBAAoB2F,EACpB1F,YAAamF,QC5FvB,IAAenK,EAAAA,EAAAA,KArGoB,EAAG6L,QAAAA,EAASC,aAAAA,MAC7C,MAAM,qBAAElC,IAAyBE,EAAAA,EAAAA,GAAkB+B,GAC7CE,GAAcC,EAAAA,EAAAA,GAAqBH,GAEnCI,GAAW5G,EAAAA,EAAAA,IAAyB,OACnC6G,EAAWC,IAAgBxJ,EAAAA,EAAAA,IAAS,GACrC2C,GAAYD,EAAAA,EAAAA,KAAgB,IAElCzC,EAAAA,EAAAA,KAAU,KACJiJ,IAAYE,GACdI,EAZmB,OAcpB,CAACN,EAASE,IAEb,MAYMzF,GAAkBtH,EAAAA,EAAAA,KAAY,KAClCsG,EAAUO,SAAU,IACnB,IAEGU,GAAiBvH,EAAAA,EAAAA,KAAY,KACjCsG,EAAUO,SAAU,EACF,IAAdqG,GACFJ,EAAaI,GAAY5G,EAAUO,WAEpC,CAACiG,EAAcI,KAMlBtJ,EAAAA,EAAAA,KAAU,KACRkJ,EAAaI,GAAY5G,EAAUO,WAClC,CAACqG,EAAWJ,IAEf,MAAM7M,GAAOC,EAAAA,EAAAA,KAEPG,GAAYmE,EAAAA,EAAAA,GAChB,eACAoG,GAGF,OACE,0BAAKvK,UAAWA,GACd,mBAACgC,EAAA,EAAD,CACE+K,SA3DsB,IA2DZF,EACVzM,KAAK,OACL8B,MAAM,oBACNE,UAAWxC,EAAK,WAChBI,UAAU,WACV6H,QAASxF,EAAAA,GACTpC,QA/CgB,KAChB2M,EAASpG,SACXsG,EAAanK,KAAKoE,IApBM,EAoBc8F,EAAY,OA+ChD,wBAAG7M,UAAU,mBAEf,mBAACgC,EAAA,EAAD,CACE+K,SAvEsB,IAuEZF,EACVzM,KAAK,OACL8B,MAAM,oBACNE,UAAU,UACVpC,UAAU,UACV6H,QAASxF,EAAAA,GACTpC,QApDe,KACf2M,EAASpG,SACXsG,EAAanK,KAAKqE,IA3BM,EA2Bc6F,EAAY,OAoDhD,wBAAG7M,UAAU,kBAEf,0BAAKA,UAAU,YACb,0BAAKA,UAAU,kBACb,0BACEA,UAAU,kBAEVlC,MAAQ,UApFK,IAoFK+O,EAAY,QAEhC,4BACElF,IAAKiF,EACL5F,IAzFkB,EA0FlBD,IA3FkB,EA4FlBiG,KAAK,MACLC,MAAOJ,EACPK,KAAK,QACLlN,UAAU,iBACVmN,SAtDoB/I,IAC5B0I,EAAanK,KAAKqE,IA3CQ,EA2CYrE,KAAKoE,IAAIqG,OAAOhJ,EAAEiJ,OAAOJ,OA1CrC,MAgGlBK,YAAarG,EACbsG,UAAWrG,UCrFjBsG,GAAiB,CACrB,EAAG,EAAG,EAAG,EAAG,EAAG,GAGXC,GAAe,CACnB,EAAG,EACH,IAAK,IACL,EAAG,IACH,IAAK,IACL,EAAG,KAGCC,GAAiB,IAsKvB,IAAe/M,EAAAA,EAAAA,KA1Ie,EAC5BgN,SAAAA,EACA3N,UAAAA,EACA4N,OAAAA,EACAC,OAAAA,EACAhB,UAAAA,EACAiB,UAAAA,EACAC,UAAAA,EACAC,MAAAA,MAEA,MAAMC,EAAiBR,GAAaZ,IAA2CA,GACxEqB,EAAYC,IAAiB7K,EAAAA,EAAAA,KAAkB,IAC/C8K,EAAUC,IAAe/K,EAAAA,EAAAA,IAAoB,CAClDgL,GAAIR,EAAWS,GAAIR,EAAWS,EAAG,EAAGC,EAAG,KAGlCC,EAAYC,IAAiBrL,EAAAA,EAAAA,IAAmBkK,IAGjDoB,GAAgB5I,EAAAA,EAAAA,IAAuB,MAGvC6I,GAAkB7I,EAAAA,EAAAA,IAAuB,MA8F/C,OA5FAzC,EAAAA,EAAAA,KAAU,KACR,MAAMuL,EAAeb,GAAkBS,EAAW,GAC5CK,EAAWjB,GAAaY,EAAW,GACnCM,EAAWjB,GAAaW,EAAW,GAEnCO,EAAgB,IAAIP,GACtBA,EAAW,KAAOI,IACpBG,EAAc,GAAKH,GAAgBG,EAAc,GACjDA,EAAc,GAAKH,GAAgBG,EAAc,IAE/CP,EAAW,KAAOK,IACpBE,EAAc,GAAKF,GAEjBL,EAAW,KAAOM,IACpBC,EAAc,GAAKD,IAGhBE,EAAAA,EAAAA,IAAqBR,EAAYO,IACpCN,EApEN,SAAiCQ,EAAkBT,EAAsBU,GACvE,MAAMC,EAAQD,GAAWA,EAAQzS,cAAc,eAC/C,IAAKyS,IAAYC,EACf,OAAOX,EAET,MAAMY,EAAcF,EAAQzI,wBACtB4I,EAAYF,EAAM1I,wBAElB6I,EAAeD,EAAU9I,MAAQ0I,EAAYT,EAAW,GACxDe,EAAgBF,EAAU7L,OAASyL,EAAYT,EAAW,GAC1DgB,GAAWJ,EAAY7I,MAAQ+I,GAAe,EAAId,EAAW,GAC7DiB,GAAWL,EAAY5L,OAAS+L,GAAgB,EAAIf,EAAW,GAYrE,OAXIY,EAAY7I,OAAS6I,EAAY7I,MAAQiH,GAAiBgC,EAC5DhB,EAAW,IAAMgB,EAAUJ,EAAY7I,MAAQiH,GACtC8B,GAAeA,EAAcE,EAAUhC,KAChDgB,EAAW,IAAMc,EAAcE,EAAUhC,IAEvC4B,EAAY5L,QAAU4L,EAAY5L,OAASgK,GAAiBiC,EAC9DjB,EAAW,IAAMiB,EAAUL,EAAY5L,OAASgK,GACvC+B,GAAgBA,EAAeE,EAAUjC,KAClDgB,EAAW,IAAMe,EAAeE,EAAUjC,IAGrCgB,EA6CWkB,CAAwBlB,EAAW,GAAIO,EAAeL,EAAcpI,YAGnF,CAACsH,EAAWC,EAAWE,KAE1B1K,EAAAA,EAAAA,KAAU,KACHsK,GACHc,EAAcnB,MAEf,CAACK,KAEJtK,EAAAA,EAAAA,KAAU,KACJsL,EAAgBrI,UAClBqI,EAAgBrI,QAAQ1I,MAAM+R,UAAa,UAASnB,EAAWoB,iBAEhE,CAAClC,EAAQc,IA2DRd,EACKD,EAIP,0BACEhG,IAAKiH,EACL5O,UAAY,eAAcA,GAAa,KACvCsN,YAjEqBlJ,IACvB,IAAKyJ,EACH,OAGFzJ,EAAEC,kBACFD,EAAEqH,iBAEF,MAEMsE,EAAyB,CAC7BzB,GAHcI,EAAW,GAIzBH,GAHcG,EAAW,GAIzBF,EAAGpK,EAAE4L,MACLvB,EAAGrK,EAAE6L,OAEP5B,EAAY0B,GACZ5B,GAAc,GAEVS,EAAcpI,SAChBoI,EAAcpI,QAAQvK,UAAUC,IAAI,SA8CpCqR,UA1CkB,KACpBY,GAAc,GAEVS,EAAcpI,SAChBoI,EAAcpI,QAAQvK,UAAUqK,OAAO,QAGrC0H,GACFA,EAAMU,EAAW,GAAIA,EAAW,KAmChCwB,YArBqB9L,IACvB,GAAI8J,EAAY,CACd,MAAMe,EAZV,SAA0BT,EAAWC,GACnC,MAAMQ,EAAgB,IAAIP,GACpByB,EAAS/B,EAASI,EAAIA,EACtB4B,EAAShC,EAASK,EAAIA,EAI5B,OAHAQ,EAAc,GAAKb,EAASE,GAAK6B,EACjClB,EAAc,GAAKb,EAASG,GAAK6B,EAE1BnB,EAKiBoB,CAAiBjM,EAAE4L,MAAO5L,EAAE6L,OAClDtB,EAAcM,GAEVJ,EAAgBrI,UAClBqI,EAAgBrI,QAAQ1I,MAAM+R,UAAa,UAASnB,EAAWoB,kBAiBjE,0BACEnI,IAAKkH,EACL7O,UAAU,iBAET2N,OCjHH2C,GAAqB,IAkgB3B,SAASC,GAAYC,EAAkBC,EAA2BC,GAChE,OAAOF,EAEH,0BACEnU,IAAKmU,EACLG,IAAI,GAEJ7S,MAAO2S,EAAa,UAASA,EAAUhK,UAAY,GACnDmK,UAAWzH,QAAQuH,KAIrB,0BACE1Q,UAAU,kBAEVlC,MAAO2S,EAAa,UAASA,EAAUhK,UAAY,IAEnD,mBAACoK,EAAA,EAAD,CAAS3O,MAAM,WAKvB,UAAevB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAM,OACJC,EADI,SACIkS,EADJ,UACcjS,EADd,cACyBkS,EADzB,kBACwCC,EADxC,OAC2DnV,GAC7D8C,EAAOsS,aACL,eACJC,GACEvS,EAAOwS,SAASC,MAEpB,GAAIvV,IAAWY,EAAAA,GAAAA,aAAgC,CAC7C,IAAMmC,IAAUC,EACd,MAAO,CAAEqS,eAAAA,GAGX,MAAMlT,GAAUmB,EAAAA,EAAAA,IAAkBR,EAAQC,EAAQC,GAClD,OAAKb,EAIE,CACLY,OAAAA,EACAC,UAAAA,EACAwS,SAAUrT,EAAQqT,SAClBxV,OAAAA,EACAmC,QAAAA,EACAkT,eAAAA,GATO,CAAEA,eAAAA,GAab,GAAIH,EAGF,MAAO,CACLlS,WAAY,EACZwS,SAAUN,EACVO,aALarS,EAAAA,EAAAA,IAAWN,EAAQoS,KAAkB7R,EAAAA,EAAAA,IAAWP,EAAQoS,GAMrEC,kBAAmBA,GAAqB,EACxCE,eAAAA,EACArV,OAAAA,GAIJ,KAAM+C,GAAUkS,GAAYjS,GAC1B,MAAO,CAAEqS,eAAAA,GAGX,IAAIlT,EAWAuT,EAOAC,EAXJ,GALExT,EADEnC,GAAU,CAACY,EAAAA,GAAAA,eAAkCA,EAAAA,GAAAA,iBAAmCY,SAASxB,IACjF4V,EAAAA,EAAAA,IAAuB9S,EAAQC,EAAQC,IAEvCM,EAAAA,EAAAA,IAAkBR,EAAQC,EAAQC,IAGzCb,EACH,MAAO,CAAEkT,eAAAA,GAYX,GANEK,EADE1V,GAAU,CAACY,EAAAA,GAAAA,eAAkCA,EAAAA,GAAAA,iBAAmCY,SAASxB,IAC5E6V,EAAAA,EAAAA,IAAwB/S,EAAQC,IAEhC+S,EAAAA,EAAAA,IAAmBhT,EAAQC,GAIxC/C,IAAWY,EAAAA,GAAAA,QAA4BZ,IAAWY,EAAAA,GAAAA,MACpD+U,GAAgBI,EAAAA,EAAAA,IAAkBjT,EAAQC,EAAQkS,KAAae,EAAAA,EAAAA,IAAgBlT,EAAQC,EAAQkS,QAC1F,GAAIjV,IAAWY,EAAAA,GAAAA,YAA+B,CACnD,MAAMqV,GAAgBC,EAAAA,EAAAA,IAAyBpT,IACzC,SAAEqT,GAAcF,GAAiBA,EAAcG,eAAiBH,EAAcG,cAAcC,OAAU,GAC5GV,EAAgBQ,EAGlB,MAAO,CACLpT,OAAAA,EACAkS,SAAAA,EACAjS,UAAAA,EACAwS,SAAUrT,EAAQqT,SAClBxV,OAAAA,EACAmC,QAAAA,EACAuT,aAAAA,EACAC,cAAAA,EACAN,eAAAA,MAGJ,CAAC7R,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,kBAAmB,mBAAoB,kBAAmB,kBAvF1CZ,EAthBgC,EAClDE,OAAAA,EACAkS,SAAAA,EACAjS,UAAAA,EACAwS,SAAAA,EACAxV,OAAAA,EACAyV,YAAAA,EACAN,kBAAAA,EACAhT,QAAAA,EACAuT,aAAAA,EACAC,cAAAA,EACAW,gBAAAA,EACA3S,iBAAAA,EACA4S,gBAAAA,EACA3S,aAAAA,EACAyR,eAAAA,MAEA,MAAMnP,EAASoH,QAAQmI,GAAezS,GAEhCwT,EAAoBxW,IAAWY,EAAAA,GAAAA,YAC/B6V,EAAezW,IAAWY,EAAAA,GAAAA,aAG1B8V,EAAQvU,GAAUwU,EAAAA,EAAAA,IAAgBxU,QAAWmE,EAC7CqH,EAAQxL,GAAUyU,EAAAA,EAAAA,IAAgBzU,QAAWmE,EAC7CuQ,EAAe1U,GAAU2U,EAAAA,EAAAA,IAAuB3U,QAAWmE,EAC3DyQ,EAAe5U,GAAU6U,EAAAA,EAAAA,IAAuB7U,QAAWmE,EAC3D2Q,IAAkB9U,IAAU+U,EAAAA,EAAAA,IAAuB/U,GACnDgV,KAAkBhV,IAAUiV,EAAAA,EAAAA,IAAuBjV,GACnD+C,GAAUoI,QAAQK,GAASoJ,GAAgBI,IAC3CE,GAAU/J,SAASpI,KAAYwR,GAASG,GAAgBI,KACxD,MAAE5K,IAAUsB,GAASoJ,GAAgB,GACrC9T,GAAWqK,QAAQmI,GAGnB6B,GAAgBhK,QAAQuJ,GAAgBE,GACxCQ,IAAavR,EAAAA,EAAAA,KAAQ,IAClBsR,IAAiBtU,EACpB,CAACA,IACDwU,EAAAA,EAAAA,IAAuB9B,GAAgB,GAAIC,GAAiB,GAAIa,IACnE,CAACc,GAAetU,EAAW0S,EAAcC,EAAea,IAErDiB,GAA4BzU,EAAYuU,GAAWG,QAAQ1U,IAAc,EACzE2U,GAAwC,IAA9BF,KAAkE,IAA/BA,GAC7CG,GAASH,KAA8BF,GAAW9U,OAAS,IAAoC,IAA/BgV,GAGhEI,IAAe1N,EAAAA,EAAAA,MACf2N,IAAehH,EAAAA,EAAAA,GAAgC0E,IACjDtP,GAAY4R,IAAgBA,KAAiBtC,GAAaqC,GAAalN,UACzEkN,GAAalN,QAAU8M,IAEzB,MAAMM,GAAiB1C,GAAkB,EAAI,WAAa,OACpD2C,GAAqC,IAAnB3C,EAAuB,aAAe,OACxD4C,GAAsC,IAAnB5C,GAGlB6C,GAAgBC,KAAqB1Q,EAAAA,EAAAA,KAAkB,IACvD2Q,GAAgBC,KAAqB5Q,EAAAA,EAAAA,KAAS,IAC9CtC,GAAUmT,KAAe7Q,EAAAA,EAAAA,KAAkB,IAC3CuJ,GAAWC,KAAgBxJ,EAAAA,EAAAA,IAAiB,IAC5C8Q,GAAUC,KAAe/Q,EAAAA,EAAAA,IAAS,CAAEkL,EAAG,EAAGC,EAAG,IAGpD,SAAS6F,GAAaC,GACpB,GAAIzV,SAAkCqD,IAAtB6O,EAAiC,CAC/C,MAAM,OAAEwD,GAAWlD,EACnB,OAAOkD,GAAUA,EAAOxD,GACnB,QAAOwD,EAAOxD,GAAmB5T,aAClCqX,EAAAA,EAAAA,IAAkBnD,EAAciD,EAAS,MAAQ,UAGvD,OAAOvW,IAAW0D,EAAAA,EAAAA,IAAoB1D,EAASuW,EAAS,aAAe,iBAGzE,MAAMG,IAAmBC,EAAAA,EAAAA,GACvB3W,IAAYqU,GAAqBC,KAAiB5Q,EAAAA,EAAAA,IAAoB1D,EAAS,kBAC/EmE,EACAyS,EAAAA,GAAAA,aACAzS,EACA2R,IAAoBxD,IAEhBuE,GAAmBP,KACnBQ,IAAiBH,EAAAA,EAAAA,GACrBE,QACA1S,EACAyS,EAAAA,GAAAA,aACAzS,EACA2R,IAAoBxD,KAEdxP,UAAWiU,GAAb,aAA+BxT,KAAiBE,EAAAA,EAAAA,GACpD6S,IAAa,QACbnS,EACAnE,IAAWgX,EAAAA,EAAAA,IAAsBhX,EAAS,mBAC1CmE,EACA2R,IAAoBxD,IAGhB2E,GAAgB1C,GAAS/I,GAAU+I,GAAS/I,GAAQgH,aAAUrO,EACpE,IAAI+S,IAAkBnU,KAAYkU,IAAgBF,KAAsBD,IAAkBJ,GAC1F,MAAMS,IAAeC,EAAAA,EAAAA,IAAaF,IAAiBlX,IAAWqX,EAAAA,EAAAA,IAA4BrX,IACrFkX,IAAiBrZ,IAAWY,EAAAA,GAAAA,eAC/ByY,GAAgBC,IAGlB,MAAMG,GAAYtX,GAAUuX,EAAAA,EAAAA,IAAmBvX,QAAWmE,EACpDlB,GAAWjD,GACbwX,EAAAA,EAAAA,IAAmBxX,GACnBc,GACG,SAAQwS,EAAalU,MAAM4T,aAC5B7O,EAEN,IAAIsT,GACAzX,EACE8U,GAAmBE,GACrByC,IAAaC,EAAAA,EAAAA,IAAmB1X,GAAU2X,UACjCpD,GAASG,EAClB+C,IAAaG,EAAAA,EAAAA,IAAwBrD,GAASG,IACrClJ,GAASoJ,KAClB6C,IAAaI,EAAAA,EAAAA,IAAoBrM,GAASoJ,IAG5C6C,GAAaK,EAAAA,IAGfvS,EAAAA,EAAAA,KAAU,KACHlB,EAAAA,IAILtG,SAASsK,KAAKpK,UAAU8Z,OAAO,uBAAwBhU,KACtD,CAACA,IAEJ,MAAMiU,IAAcC,EAAAA,EAAAA,MACpB1S,EAAAA,EAAAA,KAAU,KACR,MAAM2S,EAAMnS,OAAOoS,WAAWC,EAAAA,IAO9B,MANoC,mBAAzBF,EAAIlS,iBACbkS,EAAIlS,iBAAiB,SAAUgS,IACK,mBAApBE,EAAIG,aACpBH,EAAIG,YAAYL,IAGX,KACkC,mBAA5BE,EAAIjS,oBACbiS,EAAIjS,oBAAoB,SAAU+R,IACK,mBAAvBE,EAAII,gBACpBJ,EAAII,eAAeN,OAGtB,CAACA,KAEJ,MAAMO,IAAc5J,EAAAA,EAAAA,GAAoC3O,GAClDwY,IAAa7J,EAAAA,EAAAA,GAAY9Q,GACzB4a,IAAkB9J,EAAAA,EAAAA,GAA2C2E,GAC7DoF,IAAoB/J,EAAAA,EAAAA,GAAYuI,KACtC3R,EAAAA,EAAAA,KAAU,KACR,GAAIuQ,IAAoB/R,IAAWwU,KAAgBE,GAAiB,EAClEE,EAAAA,EAAAA,IAA4BrG,GAAqBsG,EAAAA,IACjD,MAAMC,EAAY7Y,GAAU8Y,EAAAA,EAAAA,GAAkB9Y,QAAWmE,GV5OxD,SACL4U,EACAlb,EACAqZ,EACAO,EACA1U,EACA/C,GAEA,MAAQK,QAAS2Y,GAAcjZ,EAASlC,EAAQmC,GAChD,IAAKgZ,EACH,OAGF,MAAQvQ,MAAOwQ,GAAgBC,EAAAA,EAAAA,OAE7BzQ,MAAO0Q,EAAgBzT,OAAQ0T,IAC7BC,EAAAA,EAAAA,IAAkCN,EAAWhW,IACzC0F,MAAO6Q,EAAS5T,OAAQ6T,IAAaC,EAAAA,EAAAA,IAC3CL,EAAgBC,EAAiB3B,EAAWhP,MAAOgP,EAAW/R,QAE1D+T,GAAUR,EAAcK,GAAW,EACnCI,EAuPR,SAAsBX,GACpB,MAAMb,EAAMnS,OAAOoS,WAAWC,EAAAA,IAC9B,IAAIuB,EAAe,MAKnB,OAJIZ,IACFY,GAAgBzB,EAAI0B,QAAU,KAAQ,OAGjCD,EAAe/T,EAAAA,GA9PRiU,CAAad,IAAcK,EAAkBG,GAAY,EAEvE,IACEO,IAAKC,EAASrR,KAAMsR,EAAUvR,MAAOwR,EAAWvU,OAAQwU,GACtDlB,EAAUrQ,wBAEd,GAAI,CACFlK,EAAAA,GAAAA,YACAA,EAAAA,GAAAA,MACAA,EAAAA,GAAAA,eACAA,EAAAA,GAAAA,cACAY,SAASxB,GAAS,CAClB,MAAMsc,EA+LV,SAAiBC,EAAmBC,EAAoBP,EAAapR,EAAcD,EAAe/C,GAChG,GAAI0U,IAAcC,EAAY,CAC5B,MAAMjY,EAAOuC,KAAKoE,IAAIN,EAAO/C,IAAW0U,EAAYC,GACpD3R,IAAStG,EAAOqG,GAAS,EACzBqR,IAAQ1X,EAAOsD,GAAU,EACzB+C,EAAQrG,EACRsD,EAAStD,OACJ,GAAIgY,EAAYC,EAAY,CACjC,MAAMC,EAAW7R,EAEjBC,KADAD,EAAQ/C,GAAU0U,EAAYC,IACbC,GAAY,OACxB,GAAID,EAAaD,EAAW,CACjC,MAAMG,EAAY7U,EAElBoU,KADApU,EAAS+C,GAAS4R,EAAaD,IACdG,GAAa,EAGhC,MAAO,CACLT,IAAAA,EAAKpR,KAAAA,EAAMD,MAAAA,EAAO/C,OAAAA,GAjNA8U,CAAQlB,EAASC,EAAUQ,EAASC,EAAUC,EAAWC,GAC3EH,EAAUI,EAAUL,IACpBE,EAAWG,EAAUzR,KACrBuR,EAAYE,EAAU1R,MACtByR,EAAaC,EAAUzU,OAGzB,MAAM+U,EAAkBT,EAAWC,EAAY,GAAMR,EAASH,EAAU,GAClEoB,EAAkBX,EAAUG,EAAa,GAAMR,EAAQH,EAAW,GAClEoB,EAAaV,EAAYX,EACzBsB,EAAaV,EAAaX,EAE1Bzb,EAAQH,EAAYuZ,GAAiB8B,GAC3CvZ,EAAY3B,EAAO,CACjBgc,IAAM,GAAEJ,MACRhR,KAAO,GAAE+Q,MACThR,MAAQ,GAAE6Q,MACV5T,OAAS,GAAE6T,MACX1H,UAAY,eAAc4I,QAAqBC,iBAA8BC,MAAeC,OAE9Fra,EAAWzC,EAAOD,GAElBE,SAASsK,KAAKpK,UAAUC,IAAI,mBAE5B2c,uBAAsB,KACpB9c,SAASsK,KAAK7J,YAAYV,GAE1B+c,uBAAsB,KACpB/c,EAAMgC,MAAM+R,UAAY,GAuS9B,SAAoB/T,GACjBA,EAAM0C,WAA2BV,MAAMW,UAAY,UACpD3C,EAAMG,UAAUqK,OAAO,kBAAmB,UAxStCwS,CAAWhd,GAEXqK,YAAW,KACT0S,uBAAsB,KAChB9c,SAASsK,KAAK0S,SAASjd,IACzBC,SAASsK,KAAK2S,YAAYld,GAE5BC,SAASsK,KAAKpK,UAAUqK,OAAO,wBAvEd,IAyEGsQ,EAAAA,UUuKxBqC,CADkB9P,QAAQ0N,GACAhb,EAASqZ,GAAgBO,GAAY1U,GAAS/C,GAGtE8V,KAAqB/R,IAAWwU,IAAeE,OACjDE,EAAAA,EAAAA,IAA4BrG,GAAqBsG,EAAAA,IVtKhD,SAAwB/a,EAA2BqZ,EAAuBlX,GAC/E,MAAM,UAAElB,EAAWuB,QAAS6a,GAAYnb,EAASlC,EAAQmC,GACzD,IAAKkb,EACH,OAGF,MAAMlC,EAAYjb,SAASod,eAAe,eAAgBxc,cACxD,0EAEF,IAAKqa,IAAckC,EACjB,OAGF,MACEpB,IAAKC,EAASrR,KAAMsR,EAAUvR,MAAOwR,EAAWvU,OAAQwU,GACtDlB,EAAUrQ,yBAEZmR,IAAKsB,EAAW1S,KAAM+Q,EAAQhR,MAAO6Q,EAAS5T,OAAQ6T,GACpD2B,EAAQvS,wBAEZ,IAAI+Q,EAAQ0B,EACZ,IAqJF,SAA6BC,GAC3B,GAAyB,SAArBA,EAAGvb,MAAMwb,QACX,OAAO,EAGT,MAAMC,EAAOF,EAAG1S,yBACRjD,OAAQ8V,GAAiBtC,EAAAA,EAAAA,MAEjC,OAAQqC,EAAKzB,KAAO0B,GAAmBD,EAAKzB,IAAMyB,EAAK7V,QAAW,EA7J7D+V,CAAoB3c,GAAY,CACnC,MAAQ4G,OAAQ8V,GAAiBtC,EAAAA,EAAAA,MACjCQ,EAAQ0B,EAAYrB,GAAWR,EAAWiC,EAG5C,MAAMf,EAAkBT,EAAWC,EAAY,GAAMR,EAASH,EAAU,GAClEoB,EAAkBX,EAAUG,EAAa,GAAMR,EAAQH,EAAW,GACxE,IAAIoB,EAAaV,EAAYX,EACzBsB,EAAaV,EAAaX,EAE9B,MAAMmC,EACJ,CAACjd,EAAAA,GAAAA,OAA0BA,EAAAA,GAAAA,iBAAmCY,SAASxB,KACnEgB,EAA2BC,EAAWoc,IAE1C,CAACzc,EAAAA,GAAAA,MAAyBA,EAAAA,GAAAA,gBAAkCY,SAASxB,KACjEgB,EAA2BC,EAAWoc,GAGxC,CACFzc,EAAAA,GAAAA,YACAA,EAAAA,GAAAA,MACAA,EAAAA,GAAAA,eACAA,EAAAA,GAAAA,cACAY,SAASxB,KACL8c,EAAaC,EACfD,EAAaC,EACJA,EAAaD,IACtBC,EAAaD,IAIjB,MAAMgB,EAAgB5d,SAAS6d,uBAAuB,SAAS,GAEzD9d,EAAQ6d,GAAiBhe,EAAYuZ,GAAiBgE,EAASrd,GAChE8d,GACHlc,EAAY3B,EAAO,CACjBgc,IAAM,GAAEJ,MACRhR,KAAO,GAAE+Q,MACThR,MAAQ,GAAE6Q,MACV5T,OAAS,GAAE6T,MACX1H,UAAY,eAAc4I,QAAqBC,iBAA8BC,MAAeC,OAIhGC,uBAAsB,KACpB,GAAIc,EAAe,CACjB,MAAM,IACJ7B,EADI,KAEJpR,EAFI,MAGJD,EAHI,OAIJ/C,GACEiW,EAAchT,wBAIlBlJ,EAAY3B,EAAO,CACjB+d,WAAY,OACZ/B,IAAM,GAAEJ,MACRhR,KAAO,GAAE+Q,MACTqC,gBAAiB,WACjBjK,UAAY,eAAcnJ,EAAO+Q,QAAaK,EAAMJ,iBARvCjR,EAAQ6Q,MACR5T,EAAS6T,KAQtB9Q,MAAQ,GAAE6Q,MACV5T,OAAS,GAAE6T,QAGfxb,SAASsK,KAAKpK,UAAUC,IAAI,mBACvByd,GAAe5d,SAASsK,KAAK7J,YAAYV,GAE9C+c,uBAAsB,KAChBc,IACFA,EAAc7b,MAAM+b,WAAa,IAGnC/d,EAAMgC,MAAM+R,UAAY,GAEpB6J,IACF5d,EAAMgC,MAAMic,QAAU,KAGxBxb,EAAWzC,EAAOD,GAElBsK,YAAW,KACT0S,uBAAsB,KAChB9c,SAASsK,KAAK0S,SAASjd,IACzBC,SAASsK,KAAK2S,YAAYld,GAE5BC,SAASsK,KAAKpK,UAAUqK,OAAO,wBAzLd,IA2LGsQ,EAAAA,UU0DxBoD,CAAexD,GAAaE,GAAoBH,SAAepU,MAEhE,CACD2R,GAAkB/R,EAAQlG,EAAQ2a,GAAYxY,EAASuY,GAAaE,GACpEvB,GAAewB,GAAmBjB,GAAY1U,MAGhDwC,EAAAA,EAAAA,KAAU,KACR,IAAI0W,EAUJ,OARIjZ,GACFkT,IAAkB,GAElB+F,EAAQlW,OAAOoC,YAAW,KACxB+N,IAAkB,KACjB5D,IAGE,KACD2J,GACFlW,OAAOqC,aAAa6T,MAGvB,CAACjZ,KAEJ,MAAMkZ,GAAY,KAChB/F,IAAY,GACZrH,GAAa,GACbuH,GAAY,CAAE7F,EAAG,EAAGC,EAAG,KAGnB0L,IAAmBxa,EAAAA,EAAAA,KAAY,KACnCwU,IAAanT,IACb8L,GAAc9L,GAAiB,EAAN,KACrBA,IACFqT,GAAY,CAAE7F,EAAG,EAAGC,EAAG,MAExB,CAACzN,KAEEoZ,IAAkBza,EAAAA,EAAAA,KAAY,CAAC0a,EAAeC,GAAe,KACjExN,GAAauN,GACC,IAAVA,GAAeC,GACjBJ,OAED,IAEGK,IAAQ5a,EAAAA,EAAAA,KAAY,KACxBH,IACA0a,OACC,CAAC1a,IAEEgb,IAAoB7a,EAAAA,EAAAA,KAAY,KACpC4a,KACA9a,EAAa,CAAEb,OAAAA,EAAQkS,SAAAA,EAAUjS,UAAAA,MAChC,CAAC0b,GAAO3b,EAAQkS,EAAUrR,EAAcZ,IAErC4b,IAAgB9a,EAAAA,EAAAA,KAAY,KAChCyS,EAAgB,CAAEsI,WAAY9b,EAAQwU,WAAY,CAACvU,KACnDqb,OACC,CAAC9H,EAAiBxT,EAAQC,KAE7B0E,EAAAA,EAAAA,KAAU,IAAOxB,GAAS4Y,EAAAA,EAAAA,IAAsB,KAC1C3Z,GACFkZ,KAEAK,aAECpY,GAAY,CAACoY,GAAOxY,EAAQf,MAEjCuC,EAAAA,EAAAA,KAAU,KACJxC,KAAYmH,KACd0S,EAAAA,EAAAA,QAED,CAAC1S,GAAOnH,MAGXwC,EAAAA,EAAAA,KAAU,KACR,GAAKxB,EAML,OAFAmV,EAAAA,EAAAA,iBAEO,KACLA,EAAAA,EAAAA,mBAED,CAACnV,IAEJ,MAAM8Y,IAAelb,EAAAA,EAAAA,KAAY,CAACmb,EAAgBC,KAChD,IAAIC,EAAQ5H,GAAWG,QAAQuH,GAK/B,QAJoB,IAAfC,GAAoBC,EAAQ,GAAqB,IAAdD,GAAmBC,EAAQ5H,GAAW9U,OAAS,KACrF0c,GAASD,GAGJ3H,GAAW4H,KACjB,CAAC5H,KAEE6H,IAAsBtb,EAAAA,EAAAA,KAAY,KAClC6T,IAIJrB,EAAgB,CACdvT,OAAAA,EACAkS,SAAAA,EACAjS,UAAWA,EAAYgc,GAAahc,GAAY,QAAKsD,EACrDtG,OAAAA,MAED,CAAC+C,EAAQkS,EAAU+J,GAAcrH,GAAS3U,EAAWsT,EAAiBtW,IAEnEqf,IAAkBvb,EAAAA,EAAAA,KAAY,KAC9B8T,IAIJtB,EAAgB,CACdvT,OAAAA,EACAkS,SAAAA,EACAjS,UAAWA,EAAYgc,GAAahc,EAAW,QAAKsD,EACpDtG,OAAAA,MAED,CAAC+C,EAAQkS,EAAU+J,GAAcpH,GAAQ5U,EAAWsT,EAAiBtW,KAExE0H,EAAAA,EAAAA,KAAU,KACR,MAAM4X,EAAiB/W,IACrB,OAAQA,EAAEjE,KACR,IAAK,OACL,IAAK,YACH8a,KACA,MAEF,IAAK,QACL,IAAK,aACHC,OAON,OAFAnf,SAASiI,iBAAiB,UAAWmX,GAAe,GAE7C,KACLpf,SAASkI,oBAAoB,UAAWkX,GAAe,QAK3D5X,EAAAA,EAAAA,KAAU,KACR,MAAM7F,EAAU3B,SAASY,cAA8B,sDACvD,IAAKe,EACH,OAGF,MAAM0d,EAAqBlT,KAAUS,EAAAA,GAErC,OAAOtB,EAAAA,EAAAA,GAAc3J,EAAS,CAE5B2d,wBAA0B,oEAAmED,EAAwC,GAAnB,kBAClHnb,QAAS,KACFe,IAAa0H,EAAAA,IAChB6R,MAGJe,QAAS5S,EAAAA,GAAe,CAACtE,EAAG2W,KACtBA,IAAcQ,EAAAA,EAAAA,MAChBN,KACSF,IAAcQ,EAAAA,EAAAA,KACvBL,KACW9W,EAAEiJ,QAAWjJ,EAAEiJ,OAAuBlQ,QAAQ,uBACzDod,MAGK,QACLpY,MAEL,CAACoY,GAAOxG,GAAgB7L,GAAOgL,GAASlS,GAAUka,GAAiBD,KAEtE,MAAMO,IAAY7b,EAAAA,EAAAA,KAAY,CAAC6O,EAAWC,KACxC4F,GAAY,CAAE7F,EAAAA,EAAGC,EAAAA,MAChB,IAEGgN,IAA+B9b,EAAAA,EAAAA,KAAY,KAC3C+I,EAAAA,KAAiBwK,IAAWhL,KAC9B8L,IAAmBD,MAEpB,CAACA,GAAgB7L,GAAOgL,KAErBtT,IAAOC,EAAAA,EAAAA,KAUb,SAAS6b,GAAYC,GACnB,GAAI7c,GACF,OACE,0BAAKqB,IAAKvB,EAAQoB,UAAU,wBACzBuQ,GACCwE,IAAoBD,IACpB8G,EAAAA,EAAAA,IAA+B9F,EAAAA,IAAwB,IACtDzT,EAAAA,KAA4BrB,KAI9B,GAAIhD,EAAS,CAClB,MAAM6Y,GAAYC,EAAAA,EAAAA,GAAkB9Y,GAC9B+Y,EAAY5N,QAAQ0N,GAE1B,OACE,0BACE1W,IAAKtB,EACLmB,UAAY,yBAAuB+W,EAAY,aAAe,IAC9D9W,QAASwb,IAERvI,IAAW3C,GACV0E,IAAgBF,IAAoBD,IAAkBJ,GACtD1W,IAAW4d,EAAAA,EAAAA,IAA+BnG,GAAasB,IACtD1U,EAAAA,KAA4BrB,IAE9BD,IACC,mBAAC,GAAD,CACEZ,IAAKtB,EACLoJ,IAAKgN,IAAgBF,GACrB7M,MAAOA,GACPC,WAAY+M,GACZ9M,WAAYpK,IAAW4d,EAAAA,EAAAA,IAA+BnG,GAAasB,GAAW,GAC9ExV,aAAcA,GACd6D,SAAUkQ,GACVjN,kBAAmBtG,EACnBuG,QAASqT,EACTpT,QAASgS,KAGZ1D,GACC,mBAAC,EAAD,CACE5T,KAAM4T,EACN5W,QAASua,GACTtX,SAAU6Q,MAAoBhT,IAAWmH,IACzC/E,WAAYpC,KAAYmH,OAUpC,SAAS2T,KACP,OAAO/c,GACL,mBAAC,EAAD,CACEqB,IAAKmR,EAAalU,GAClBwB,OAAQ0S,EAAalU,GACrB0B,UAAQ,IAGV,mBAAC,EAAD,CACEqB,IAAKtB,EACLD,OAAQA,EACRC,UAAWA,IAKjB,OA/EAid,EAAAA,EAAAA,IAAe/Z,EAAQvC,EAAkB2S,EAAiB,CACxDvT,OAAAA,EACAkS,SAAAA,EACAjS,UAAAA,EACAhD,OAAAA,EACAkV,cAAeO,GAAeA,EAAYlU,KA2E1C,mBAAC2e,EAAA,EAAD,CACE3e,GAAG,cACH4C,UAAWgB,GAAW,SAAW,GACjCe,OAAQA,IAEP,IACC,sCACE,0BAAK/B,UAAU,oBAAoBO,IAAKX,GAAKoc,MAAQ,WAAQ7Z,GAC1DE,EAAAA,IACC,mBAACL,EAAA,EAAD,CACEhC,UAAU,qBACViC,OAAK,EACL7B,KAAK,UACL8B,MAAM,oBACNE,UAAWxC,GAAK,SAChBK,QAASsa,IAET,wBAAGva,UAAU,gBAGjB,mBAACic,EAAA,EAAD,CAAYC,UAAWxI,GAAalN,QAAU2V,KAAMtI,IACjDgI,IAEH,mBAAC,EAAD,CACE/a,UAAWiU,IAAoBD,GAC/B/T,QAASA,GACTC,SAAUA,GACVhD,QAASA,EACTiD,SAAUA,GACVC,mBAAoBqZ,GACpBpZ,UAAWsZ,GACXrZ,aAAc+Y,GACdrb,SAAUA,MAGd,mBAAC,GAAD,CACE8O,QAASqG,GACTpG,OAAQ7M,GACR8M,UAAWsG,GAAS5F,EACpBT,UAAWqG,GAAS3F,EACpB5B,UAAWA,GACXmB,MAAOwN,IAEP,mBAACS,EAAA,EAAD,CACEjc,UAAU,kBACVkc,UAAW5I,GACX6I,KAAMvI,IAEL8H,MAGHlI,IACA,6BACEtG,KAAK,SACLlN,UAAY,mBAAkBe,KAAYmH,IAAS,WACnD,aAAYtI,GAAK,oBACjBW,IAAKX,GAAKoc,MAAQ,WAAQ7Z,EAC1BlC,QAASgb,MAGXxH,IACA,6BACEvG,KAAK,SACLlN,UAAY,mBAAkBe,KAAYmH,IAAS,WACnD,aAAYtI,GAAK,QACjBW,IAAKX,GAAKoc,MAAQ,WAAQ7Z,EAC1BlC,QAASib,KAGb,mBAAC,GAAD,CACE1O,QAASxL,GACTyL,aAAc2N,Y,6HCljB1B,MAwFA,IAAezZ,EAAAA,EAAAA,KAxFwB,EACrCoB,OAAAA,EACAqa,cAAAA,EACAC,cAAAA,EACAC,UAAAA,EACAC,OAAAA,EACAC,kBAAAA,EACAC,eAAAA,EACAlU,QAAAA,EACAmU,SAAAA,EACAC,mBAAAA,MAEA,MAAM/c,GAAOC,EAAAA,EAAAA,MACN+c,EAAaC,IAAWC,EAAAA,GAAAA,GAAkBJ,EAAUL,EAAelT,QAAQoT,KAElFQ,EAAAA,GAAAA,GAAoBT,EAAWva,GAAQ,KAAQ0a,EAAe,OAG9D,MAAMO,GAAehX,EAAAA,EAAAA,IAAuB,MACtCiX,GAAqBtd,EAAAA,EAAAA,KAAayE,IACtCqY,EAAerY,EAAE+G,cAAc8B,SAC9B,CAACwP,IACEtB,GAAgB+B,EAAAA,GAAAA,GAA0BF,EAAcjb,GAASiZ,IACjE4B,GAAeA,EAAYte,OAAS,GACtCqe,EAAmBC,GAAuB,IAAX5B,EAAe,EAAIA,MAEnD,oBAAoB,GAEjBmC,EACJ,0BAAKnd,UAAU,eAAeO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GACtD,mBAACH,EAAA,EAAD,CACEC,OAAK,EACLC,MAAM,cACN9B,KAAK,UACLgC,UAAWxC,EAAK,SAChBK,QAASsI,GAET,wBAAGvI,UAAU,gBAEf,mBAACod,GAAA,EAAD,CACEzV,IAAK2U,EACLrP,MAAOsP,EACPpP,SAAU8P,EACVI,UAAWlC,EACXmC,YAAad,KAKnB,OACE,mBAACe,GAAA,EAAD,CACExb,OAAQA,EACRwG,QAASA,EACTvI,UAAU,mBACVwd,OAAQL,GAEPP,MAAAA,GAAAA,EAAate,OACZ,mBAACmf,GAAA,EAAD,CACEzd,UAAU,4BACV0d,MAAOd,EACPe,WAAYd,EACZe,gBAAiBzU,QAAQoT,GACzB5U,IAAKqV,EACLK,UAAWlC,GAEVyB,EAAYiB,KAAKzgB,GAChB,mBAAC0gB,GAAA,EAAD,CACE3d,IAAK/C,EACL4C,UAAU,4CACVC,QAAS,IAAM0c,EAAmBvf,KAEjC4B,EAAAA,EAAAA,IAAS5B,GACR,mBAAC2gB,GAAA,EAAD,CAAiBC,OAAQ5gB,IAAOgf,EAAgBxc,EAAK,0BAAuBuC,EAAW8b,OAAQ7gB,IAE/F,mBAAC8gB,GAAA,EAAD,CAAetf,OAAQxB,QAK7Bwf,IAAgBA,EAAYte,OAC9B,wBAAG0B,UAAU,cAAcJ,EAAK,+BAEhC,mBAACue,GAAA,EAAD,UCpBR,IAAexd,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MACEyf,OACEC,KAAMC,EADD,QAELC,EAFK,iBAGLC,GAJE,cAMJpC,GACEzd,EAEJ,MAAO,CACL2f,UAAAA,EACAG,UAAWD,EAAiBE,OAC5BC,cAAeJ,EAAQG,OACvBE,gBAAiBL,EAAQM,SACzBzC,cAAAA,MAGJ,CAAC/c,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,mBAAoB,kBAAmB,mBAnB3EZ,EAnE6C,EAC/D4f,UAAAA,EACAG,UAAAA,EACAE,cAAAA,EACAC,gBAAAA,EACAxC,cAAAA,EACAra,OAAAA,EACA+c,iBAAAA,EACAC,gBAAAA,EACAC,cAAAA,MAEA,MAAMpf,GAAOC,EAAAA,EAAAA,MACN0c,EAAQ0C,IAAa3b,EAAAA,EAAAA,IAAS,IAE/BgZ,GAAYtW,EAAAA,EAAAA,IAAyB,MAErCkZ,GAAUrd,EAAAA,EAAAA,KAAQ,KACtB,MAAM0c,EAAU,IACVI,GAAiB,MACjBC,GAAmB,IAGzB,IAAIO,EAAcV,GAAa,GAK/B,OAJIrC,IACF+C,GAAcC,EAAAA,EAAAA,IAAO,CAAChD,KAAkB+C,MAGnCE,EAAAA,EAAAA,IAAY,IACdd,EAAQhC,QAAQnf,IACjB,MAAMkD,EAAOge,EAAUlhB,GACvB,OAAKkD,MAIAgf,EAAAA,EAAAA,IAAiBhf,EAAMif,EAAAA,OAIvBhD,IAIEiD,EAAAA,GAAAA,IAAYC,EAAAA,EAAAA,GAAa7f,EAAM0e,EAAUlhB,QAAK+E,EAAW/E,IAAOgf,GAAgBG,QAExF+B,OAAWnc,EAAWgd,KACxB,CAACR,EAAeC,EAAiBN,EAAWlC,EAAeG,EAAQ3c,EAAM6e,IAEtEiB,GAAmB/f,EAAAA,EAAAA,KAAase,IACpCa,EAAiB,CAAE1hB,GAAI6gB,MACtB,CAACa,IAEJ,OACE,mBAAC,GAAD,CACE1C,cAAeA,EACfra,OAAQA,EACRsa,cAAe6C,EACf5C,UAAWA,EACXE,kBAAmB5c,EAAK,aACxB2c,OAAQA,EACRE,eAAgBwC,EAChBvC,SAAUsC,EACVrC,mBAAoB+C,EACpBnX,QAASwW,Q,eCAf,SAASY,GAAeC,GACtB,OAAIA,EAAMC,WACD,mBAGJD,EAAME,YAIJ,uBAHE,WAMX,UAAenf,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IAAuBY,EAAAA,EAAAA,IAAKZ,EAAQ,CAAC,cACtC,CAACU,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,gBAAiB,8BAFrDZ,EAlF4B,EAAGqhB,QAAAA,EAASC,cAAAA,EAAeC,yBAAAA,MACzE,MAAMrgB,GAAOC,EAAAA,EAAAA,KAEb,GAAKkgB,EAAQzhB,OA4Db,OACE,0BAAKlB,GAAG,WACL2iB,EAAQlC,KAVSqC,IACpB,MAAI,SAAUA,EAjDMC,CAAAA,IACpB,MAAM,KACJC,EADI,MACEC,EADF,kBACSC,EADT,UAC4BC,GAC9BJ,EASEK,EACF5gB,EADqB2gB,EAChB,cACA,UADeD,EAAmB,KAGrCG,EAAuB7gB,EAAZ2gB,EAAiB,cAAsB,aAExD,OACE,mBAAChD,GAAA,EAAD,CACExb,QAAM,EACNwG,QAASyX,EACThgB,UAAU,QACVqgB,MAAOA,QAEgBle,IAAtBme,GAAmC,4BAAIE,GACxC,mBAACxe,EAAA,EAAD,CAAQ0e,QAAM,EAAC1gB,UAAU,wBAAwBC,QArB7B,KACtBggB,EAAyB,CACvBG,KAAAA,IAEFJ,MAiB8ES,GAC5E,mBAACze,EAAA,EAAD,CAAQ0e,QAAM,EAAC1gB,UAAU,wBAAwBC,QAAS+f,GAAgBpgB,EAAK,aAuB1E+gB,CAAaT,IAlBHN,EAqBAM,EAnBjB,mBAAC3C,GAAA,EAAD,CACExb,QAAM,EACNwG,QAASyX,EACThgB,UAAU,QACVqgB,MAAOV,GAAeC,IAErBA,EAAME,aAAcc,EAAAA,GAAAA,IAAqBhB,IAASpf,EAAAA,EAAAA,GAAWof,EAAM5hB,QAAU,CAAC,QAAS,OACxF,8BACE,mBAACgE,EAAA,EAAD,CAAQ0e,QAAM,EAACzgB,QAAS+f,GAAgBpgB,EAAK,UAVhCggB,IAAAA,U,eC5CvB,MAiBA,IAAejf,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IAAuBY,EAAAA,EAAAA,IAAKZ,EAAQ,CAAC,oBACtC,CAACU,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,yBAFpCZ,EAjBkC,EAAGmiB,cAAAA,EAAeC,oBAAAA,MACtE,GAAKD,EAAcviB,OAInB,OACE,0BAAKlB,GAAG,iBACLyjB,EAAchD,KAAI,EAAG7f,QAAAA,EAAS+iB,QAAAA,KAC7B,mBAACC,GAAA,EAAD,CACEhjB,SAASwC,EAAAA,EAAAA,GAAWxC,EAAS,CAAC,QAAS,KAAM,QAAS,oBACtDijB,UAAW,IAAMH,EAAoB,CAAEC,QAAAA,a,0BCTjD,MA0BA,IAAepgB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,SAClByD,GACA,CAAC9C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,yBAFpCZ,EA1BgC,EAAGuJ,IAAAA,EAAKiZ,oBAAAA,MAC1D,MAAMthB,GAAOC,EAAAA,EAAAA,KAEPshB,GAAaxhB,EAAAA,EAAAA,KAAY,KAC7BoE,OAAOqd,KAAKnZ,GACZiZ,EAAoB,CAAEjZ,SAAK9F,MAC1B,CAAC+e,EAAqBjZ,IAEnBoZ,GAAgB1hB,EAAAA,EAAAA,KAAY,KAChCuhB,EAAoB,CAAEjZ,SAAK9F,MAC1B,CAAC+e,IAEEI,GAAeC,EAAAA,GAAAA,GAAiBtZ,GAEtC,OACE,mBAACuZ,GAAA,EAAD,CACEzf,OAAQoH,QAAQlB,GAChBM,QAAS8Y,EACThB,MAAOzgB,EAAK,gBACZiX,WAAWrW,EAAAA,EAAAA,GAAWZ,EAAK,gBAAiB0hB,GAAe,CAAC,UAC5DG,aAAc7hB,EAAK,gBACnB8hB,eAAgBP,Q,cCVtB,MAAMQ,GAAkB,CACtB,eACA,eACA,eACA,eACA,eACA,eACA,gBA+RF,SAASC,GAAcC,EAAcC,EAAeC,EAAaC,EAAgBC,GAC/E,MAAMC,EAAc,IAAIC,KAAKN,EAAMC,EAAOC,EAAK,EAAG,EAAG,EAAG,GAClDK,EAAeJ,GAAW,IAAIG,KAAKH,EAAQK,cAAeL,EAAQM,WAAYN,EAAQO,UAAW,EAAG,EAAG,EAAG,GAC1GC,EAAeP,GAAW,IAAIE,KAAKF,EAAQI,cAAeJ,EAAQK,WAAYL,EAAQM,UAAW,EAAG,EAAG,EAAG,GAEhH,SAAIC,GAAgBN,EAAcM,OAEvBJ,GAAgBF,EAAcE,GAO3C,SAASK,GAAgBxV,GACvB,OAAOyV,OAAOzV,GAAO0V,SAAS,EAAG,KAGnC,SAASC,GAAUf,EAAcC,EAAeC,GAC9C,MAAQ,GAAEF,KAAQC,EAAQ,KAAKC,IAcjC,UAAephB,EAAAA,EAAAA,KA7TqB,EAClCkiB,WAAAA,EACAC,MAAAA,EACAC,aAAAA,EACAC,WAAAA,EACAjhB,OAAAA,EACAkhB,eAAAA,EACAC,kBAAAA,EACAC,kBAAAA,EACA5a,QAAAA,EACA6a,SAAAA,EACAC,oBAAAA,MAEA,MAAMzjB,GAAOC,EAAAA,EAAAA,KACPyjB,EAAM,IAAInB,KACVoB,GAAsB1hB,EAAAA,EAAAA,KAAQ,IAAOghB,EAAa,IAAIV,KAAKU,GAAc,IAAIV,MAAS,CAACU,IACvFZ,EAAUa,EAAQ,IAAIX,KAAKW,QAAS3gB,EACpCqhB,GAAa7W,EAAAA,EAAAA,GAAY5K,IACxB0hB,EAAoBC,EAAwBC,IAA4BC,EAAAA,GAAAA,IAAQ,IAEhFC,EAAcC,IAAmBxgB,EAAAA,EAAAA,IAAeigB,IAChDQ,EAAqBC,IAA0B1gB,EAAAA,EAAAA,IACpD,IAAI6e,KAAK0B,EAAaxB,cAAewB,EAAavB,WAAY,KAEzD2B,EAAeC,IAAoB5gB,EAAAA,EAAAA,IACxCmf,GAAgBc,EAAoBY,cAE/BC,EAAiBC,IAAsB/gB,EAAAA,EAAAA,IAC5Cmf,GAAgBc,EAAoBe,eAGhCpC,EAAcU,GAAUiB,EAAaxB,cAAewB,EAAavB,WAAYuB,EAAatB,WAC1FgC,EAAcR,EAAoB1B,cAClCmC,EAAeT,EAAoBzB,YAEzC/e,EAAAA,EAAAA,KAAU,MACHigB,GAAczhB,IACjB+hB,EAAgBP,GAChBS,EAAuB,IAAI7B,KAAKoB,EAAoBlB,cAAekB,EAAoBjB,WAAY,OAEpG,CAACiB,EAAqBxhB,EAAQyhB,KAEjCjgB,EAAAA,EAAAA,KAAU,KACJwf,IAAiBU,GAAsBI,EAAaY,UAAYlB,EAAoBkB,YACtFX,EAAgBP,GAChBW,EAAiBzB,GAAgBc,EAAoBY,aACrDE,EAAmB5B,GAAgBc,EAAoBe,kBAExD,CAACf,EAAqBE,EAAoBV,EAAcc,IAE3D,MAAMa,EAA0B1B,GAAcuB,GAAejB,EAAIjB,eAAiBmC,GAAgBlB,EAAIhB,YAChGL,GAAWsC,GAAetC,EAAQI,eAAiBmC,GAAgBvC,EAAQK,WAC3EqC,EAAyB5B,GAAgBwB,GAAejB,EAAIjB,eAAiBmC,GAAgBlB,EAAIhB,YAEjG,cAAEsC,EAAF,iBAAiBC,EAAjB,cAAmCC,IAAkBjjB,EAAAA,EAAAA,KAAQ,IAsMrE,SAA2BggB,EAAcC,GACvC,MAAM8C,EAA0B,GAC1BC,EAA6B,GAC7BC,EAA0B,GAE1BpkB,EAAO,IAAIyhB,KACjBzhB,EAAKqkB,QAAQ,GACbrkB,EAAKskB,SAASlD,GACdphB,EAAKukB,YAAYpD,GACjB,MAAMqD,EAAWxkB,EAAKykB,SAChBC,EAAuB,IAAIjD,KAAKN,EAAMC,EAAO,GAAGS,UAEtD,IAAK,IAAI8C,EAAI,EAAGA,EAAIH,EAAUG,IAC5BT,EAAcU,KAAKF,EAAuBF,EAAWG,EAAI,GAG3D,KAAO3kB,EAAK4hB,aAAeR,GAAO,CAChC,MAAMyD,EAAW7kB,EAAK6hB,UACtBsC,EAAiBS,KAAKC,GACtB7kB,EAAKqkB,QAAQQ,EAAW,GAG1B,MAAMC,GAAoBX,EAAiBvmB,OAASsmB,EAActmB,QAAU,EAC5E,GAAIknB,EAAmB,EACrB,IAAK,IAAIH,EAAI,EAAGA,GAAK,EAAIG,EAAkBH,IACzCP,EAAcQ,KAAKD,GAIvB,MAAO,CAAET,cAAAA,EAAeC,iBAAAA,EAAkBC,cAAAA,GAlOxCW,CAAkBlB,EAAaC,IAC9B,CAACA,EAAcD,IAmCZmB,GAAoB/lB,EAAAA,EAAAA,KAAayE,IACrC,MAAM6I,EAAQ7I,EAAEiJ,OAAOJ,MAAM0Y,QAAQ,UAAW,IAChD,IAAK1Y,EAAM3O,OAGT,OAFA4lB,EAAiB,SACjB9f,EAAEiJ,OAAOJ,MAAQ,IAInB,MAAM2Y,EAAQjjB,KAAKoE,IAAI,EAAGpE,KAAKqE,IAAIoG,OAAOH,GAAQ,KAE5CvM,EAAO,IAAIyhB,KAAK0B,EAAaY,WACnC/jB,EAAKmlB,SAASD,GACd9B,EAAgBpjB,GAEhB,MAAMolB,EAAWrD,GAAgBmD,GACjC1B,EAAiB4B,GACjB1hB,EAAEiJ,OAAOJ,MAAQ6Y,IAChB,CAACjC,IAEEkC,GAAsBpmB,EAAAA,EAAAA,KAAayE,IACvC,MAAM6I,EAAQ7I,EAAEiJ,OAAOJ,MAAM0Y,QAAQ,UAAW,IAChD,IAAK1Y,EAAM3O,OAGT,OAFA+lB,EAAmB,SACnBjgB,EAAEiJ,OAAOJ,MAAQ,IAInB,MAAM+Y,EAAUrjB,KAAKoE,IAAI,EAAGpE,KAAKqE,IAAIoG,OAAOH,GAAQ,KAE9CvM,EAAO,IAAIyhB,KAAK0B,EAAaY,WACnC/jB,EAAKulB,WAAWD,GAChBlC,EAAgBpjB,GAEhB,MAAMwlB,EAAazD,GAAgBuD,GACnC3B,EAAmB6B,GACnB9hB,EAAEiJ,OAAOJ,MAAQiZ,IAChB,CAACrC,IA4BJ,OACE,mBAACtG,GAAA,EAAD,CACExb,OAAQA,EACRwG,QAASA,EACTvI,UAAU,iBAEV,0BAAKA,UAAU,aACb,0BAAKA,UAAU,kBACb,mBAACgC,EAAA,EAAD,CACEC,OAAK,EACL7B,KAAK,UACL8B,MAAM,cACNjC,QAASsI,GAET,wBAAGvI,UAAU,gBAGf,6BACGJ,EAAM,YAAW4kB,EAAe,KAChC,IACAD,GAGH,mBAACviB,EAAA,EAAD,CACEC,OAAK,EACL7B,KAAK,UACL8B,MAAM,cACN6K,SAAU4X,EACV1kB,QAAU0kB,OAA2CxiB,EA7H/D,WACE6hB,GAAwBmC,IACtB,MAAMC,EAAW,IAAIjE,KAAKgE,GAG1B,OAFAC,EAASpB,SAASoB,EAAS9D,WAAa,GAEjC8D,OA0HD,wBAAGpmB,UAAU,mBAGf,mBAACgC,EAAA,EAAD,CACEC,OAAK,EACL7B,KAAK,UACL8B,MAAM,cACN6K,SAAU2X,EACVzkB,QAAUykB,OAA2CviB,EA9H/D,WACE6hB,GAAwBmC,IACtB,MAAMC,EAAW,IAAIjE,KAAKgE,GAG1B,OAFAC,EAASpB,SAASoB,EAAS9D,WAAa,GAEjC8D,OA2HD,wBAAGpmB,UAAU,iBAKnB,0BAAKA,UAAU,oBACb,0BAAKA,UAAU,iBACZ2hB,GAAgB9D,KAAKkE,GACpB,0BAAK/hB,UAAU,4BACb,+BAAOJ,EAAKmiB,OAGf6C,EAAc/G,KAAK0H,GAClB,0BAAKvlB,UAAU,uBAAsB,+BAAOulB,MAE7CV,EAAiBhH,KAAK0H,GACrB,0BACEc,KAAK,SACLC,SAAU,EACVrmB,QAAS,KAAMsmB,OA1ID7lB,EA0IkB6kB,OAzI1CzB,GAAiBqC,IACf,MAAMC,EAAW,IAAIjE,KAAKgE,GAK1B,OAJAC,EAASrB,QAAQrkB,GACjB0lB,EAASpB,SAASR,GAClB4B,EAASnB,YAAYV,GAEd6B,KAPX,IAA0B1lB,GA2IdV,WAAWmE,EAAAA,EAAAA,GACT,aACAyd,GACE2C,EAAaC,EAAce,EAAUxC,EAAeO,OAAMnhB,EAAW6gB,EAAaM,EAAMrB,GAEtF,WACGsD,EAAW,YAAc,GAChCrD,IAAgBU,GAAU2B,EAAaC,EAAce,IAAa,eAGjEA,GACD,+BAAOA,MAIZT,EAAcjH,KAAK0H,GAClB,0BAAKvlB,UAAU,uBAAsB,+BAAOulB,QAKjDtC,GAzGD,0BAAKjjB,UAAU,cACb,4BACEkN,KAAK,OACLlN,UAAU,eACVwmB,UAAU,UACVvZ,MAAOgX,EACP9W,SAAUuY,EACVe,QAAS/C,EACTgD,OAAQ/C,IARZ,IAWE,4BACEzW,KAAK,OACLlN,UAAU,eACVwmB,UAAU,UACVvZ,MAAOmX,EACPjX,SAAU4Y,EACVU,QAAS/C,EACTgD,OAAQ/C,KAyFZ,0BAAK3jB,UAAU,UACb,mBAACgC,EAAA,EAAD,CAAQ/B,QAxJd,WACEmjB,EAASS,KAwJFZ,EAkEX,SAA2BrjB,EAAcc,GACvC,MAAMqhB,GAAM4E,EAAAA,EAAAA,IAAmBjmB,EAAMd,EAAKgnB,MAG1C,OAAI7E,KAFU4E,EAAAA,EAAAA,IAAmB,IAAIxE,KAAQviB,EAAKgnB,MAGzChnB,EAAK,0CAA0CinB,EAAAA,EAAAA,IAAWnmB,EAAMd,IAGlEA,EAAK,sCAAuC,CAACmiB,GAAK8E,EAAAA,EAAAA,IAAWnmB,EAAMd,KA1EhDknB,CAAkBlnB,EAAMikB,GAAgBX,GAE3DC,GACC,mBAACnhB,EAAA,EAAD,CAAQ/B,QAASojB,EAAqB3C,QAAM,GACzCyC,QCjPb,IAAexiB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACQ,CAAEkkB,WAAYlkB,EAAOooB,8BAE9B,CAAC1nB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,uBAAwB,0BALRZ,EAtB+C,EACjEqD,OAAAA,EAAQ8gB,WAAAA,EAAYmE,qBAAAA,EAAsBC,qBAAAA,MAE1C,MAAMC,GAAmBvnB,EAAAA,EAAAA,KAAae,IACpCsmB,EAAqB,CAAEG,UAAWzmB,EAAK0mB,UAAY,MACnDH,MACC,CAACA,EAAsBD,IAEpBpnB,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAAC,GAAD,CACEkC,OAAQA,EACR8gB,WAAYA,EACZG,YAAU,EACVE,kBAAmBtjB,EAAK,cACxB2I,QAAS0e,EACT7D,SAAU8D,QC2EhB,IAAevmB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUX,QAAAA,EAASqpB,WAAAA,MAClB,MAAM,SAAEvW,IAAawW,EAAAA,EAAAA,IAAyB3oB,IAAW,IACnD,gBAAE4oB,GAAqBzW,IAAY0W,EAAAA,EAAAA,IAA4B7oB,EAAQX,EAAS8S,IAAc,GAC9FxQ,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQX,EAAQY,QAQxC,MAAO,CACL2oB,iBAAkBF,GAAcE,EAChCE,YATkBnnB,IAAQtB,EAAAA,EAAAA,IAASsB,EAAKlD,KACtCsqB,EAAAA,EAAAA,KAAuBzoB,EAAAA,EAAAA,IAAWN,GAAQgpB,EAAAA,EAAAA,IAAqBrnB,UAC/D6B,EAQFylB,6BANmCtnB,IAAQunB,EAAAA,EAAAA,IAAiBvnB,KAAUinB,EAOtEO,iBANuBxnB,IAAQynB,EAAAA,EAAAA,IAAiBznB,OASpD,CAACjB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,iBAAkB,6BApBFZ,EAnEkD,EACpEqD,OAAAA,EACAslB,WAAAA,EACArpB,QAAAA,EACAgqB,MAAAA,EACAT,gBAAAA,EACAE,YAAAA,EACAG,6BAAAA,EACAE,iBAAAA,EACAvf,QAAAA,EACA0f,eAAAA,EACAC,wBAAAA,MAEA,MAAMC,GAA4BxoB,EAAAA,EAAAA,KAAY,KAC5C,MAAMyT,EAAa4U,MAAAA,GAAAA,EAAOI,SACtBJ,EAAMI,SAASvK,KAAI,EAAGzgB,GAAAA,KAASA,IAC/B,CAACY,EAAQZ,IACb6qB,EAAe,CAAE7U,WAAAA,EAAYiV,oBAAoB,IACjD9f,MACC,CAAC0f,EAAgBjqB,EAAQZ,GAAImL,EAASyf,IAEnCM,GAA6B3oB,EAAAA,EAAAA,KAAY,KAC7C,MAAMyT,EAAa4U,MAAAA,GAAAA,EAAOI,SACtBJ,EAAMI,SAASvK,KAAI,EAAGzgB,GAAAA,KAASA,IAC/B,CAACY,EAAQZ,IACTiqB,EACFa,EAAwB,CAAE9U,WAAAA,IAE1B6U,EAAe,CACb7U,WAAAA,EACAiV,oBAAoB,IAGxB9f,MACC,CAACyf,EAAOhqB,EAAQZ,GAAIiqB,EAAY9e,EAAS2f,EAAyBD,IAE/DroB,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAAC0d,GAAA,EAAD,CACExb,OAAQA,EACRwG,QAASA,EACTggB,QAASxmB,IAAWwlB,EAAkBe,OAA6BnmB,EACnEnC,UAAU,SACVqgB,MAAOzgB,EAAK,8BAEZ,4BAAIA,EAAK,kCACRgoB,GACC,4BAAIhoB,EAAK,8BAA+B,EAAG,MAE5CkoB,GACC,4BAAIloB,EAAK,+BAAgC,EAAG,MAE7C2nB,GACC,mBAACvlB,EAAA,EAAD,CAAQE,MAAM,SAASlC,UAAU,wBAAwB0gB,QAAM,EAACzgB,QAASkoB,GACtEV,IAAejnB,EAAAA,EAAAA,GAAWZ,EAAK,iCAAkC6nB,KAChEA,GAAe7nB,EAAK,2CAG1B,mBAACoC,EAAA,EAAD,CAAQE,MAAM,SAASlC,UAAU,wBAAwB0gB,QAAM,EAACzgB,QAASqoB,GACtE1oB,EAAK2nB,EAAkB,gCAAkC,WAE5D,mBAACvlB,EAAA,EAAD,CAAQhC,UAAU,wBAAwB0gB,QAAM,EAACzgB,QAASsI,GAAU3I,EAAK,gBCJ/E,IAAee,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MACT,MAAM4pB,GAAgBxpB,EAAAA,EAAAA,IAASJ,GACzB6pB,GAAiBC,EAAAA,EAAAA,IAAqB/pB,EAAQC,GAC9C0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,GAC1B2hB,IAAcjgB,IAAQqoB,EAAAA,EAAAA,IAAcroB,GACpCsoB,IAAYtoB,IAAQunB,EAAAA,EAAAA,IAAiBvnB,GACrCuoB,IAAiBvoB,IAAQynB,EAAAA,EAAAA,IAAiBznB,GAMhD,MAAO,CACLkoB,cAAAA,EACAC,eAAAA,EACAlI,UAAAA,EACAqI,QAAAA,EACAC,aAAAA,EACAC,aAXoBN,IAAkBC,GAAmBI,GAAgBD,EAYzEnB,YAXkBnnB,IAAQtB,EAAAA,EAAAA,IAASsB,EAAKlD,KACtCsqB,EAAAA,EAAAA,KAAuBzoB,EAAAA,EAAAA,IAAWN,GAAQgpB,EAAAA,EAAAA,IAAqBrnB,UAC/D6B,MAYN,CAAC9C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,gBAvBpCZ,EA/D+C,EACjEqD,OAAAA,EACAlD,UAAAA,EACAD,OAAAA,EACA2hB,UAAAA,EACAqI,QAAAA,EACAC,aAAAA,EACAC,aAAAA,EACArB,YAAAA,EACAlf,QAAAA,EACAwgB,WAAAA,MAEA,MAAMC,GAAyBrpB,EAAAA,EAAAA,KAAY,KACzCopB,EAAW,CACTnqB,OAAAA,EAAQC,UAAAA,EAAWoqB,SAAS,IAE9B1gB,MACC,CAACwgB,EAAYnqB,EAAQC,EAAW0J,IAE7B2gB,GAAmBvpB,EAAAA,EAAAA,KAAY,KACnCopB,EAAW,CACTnqB,OAAAA,EAAQC,UAAAA,EAAWoqB,SAAS,EAAOE,WAAW,EAAMC,UAAU,IAEhE7gB,MACC,CAAC3J,EAAQC,EAAW0J,EAASwgB,IAE1BnpB,GAAOC,EAAAA,EAAAA,KAcb,OACE,mBAAC0d,GAAA,EAAD,CACExb,OAAQA,EACRwG,QAASA,EACTvI,UAAU,MACVqgB,MAAOzgB,EAAK,yBAEZ,4BAjBOA,EADL2gB,EACU,yBAGVqI,GAAWC,EACD,kBAGF,wBAWV,mBAAC7mB,EAAA,EAAD,CAAQhC,UAAU,wBAAwB0gB,QAAM,EAACzgB,QAASipB,GACvDtpB,EAAK,cAEPkpB,GACC,mBAAC9mB,EAAA,EAAD,CAAQhC,UAAU,wBAAwB0gB,QAAM,EAACzgB,QAAS+oB,GACvDvB,GACGjnB,EAAAA,EAAAA,GAAWZ,EAAK,8BAA+B6nB,IAC/C7nB,EAAK,qDAGb,mBAACoC,EAAA,EAAD,CAAQhC,UAAU,wBAAwB0gB,QAAM,EAACzgB,QAASsI,GAAU3I,EAAK,gBC3D/E,IAAee,EAAAA,EAAAA,KAxB6B,EAC1CoB,OAAAA,EACAsnB,oBAAAA,EAAsB,EACtB9gB,QAAAA,EACA+gB,QAAAA,MAEA,MAAM1pB,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAAC0d,GAAA,EAAD,CACExb,OAAQA,EACRwG,QAASA,EACTvI,UAAU,YACVqgB,MAAOzgB,EAAK,+BAEZ,4BAAIA,EAAK,oCAAqCypB,EAAqB,MACnE,mBAACrnB,EAAA,EAAD,CAAQhC,UAAU,wBAAwB0gB,QAAM,EAACzgB,QAASqpB,GACvD1pB,EAAK,gBAER,mBAACoC,EAAA,EAAD,CAAQhC,UAAU,wBAAwB0gB,QAAM,EAACzgB,QAASsI,GAAU3I,EAAK,e,cCK/E,MAyEA,IAAee,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAU0oB,WAAAA,MACT,MAAQjU,WAAYmW,GAAuB5qB,EAAO6qB,kBAAoB,IAChE,gBAAEjC,IAAoBkC,EAAAA,EAAAA,IAAgC9qB,GACtD2B,GAAOopB,EAAAA,EAAAA,IAAkB/qB,GAQ/B,MAAO,CACL4qB,mBAAAA,EACAhC,iBAAkBF,GAAcE,EAChCE,YAVkBnnB,IAAQtB,EAAAA,EAAAA,IAASsB,EAAKlD,KACtCsqB,EAAAA,EAAAA,KAAuBzoB,EAAAA,EAAAA,IAAWN,GAAQgpB,EAAAA,EAAAA,IAAqBrnB,UAC/D6B,EASFylB,6BAPmCtnB,IAAQunB,EAAAA,EAAAA,IAAiBvnB,KAAUinB,EAQtEO,iBAPuBxnB,IAAQynB,EAAAA,EAAAA,IAAiBznB,OAUpD,CAACjB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,iBACA,0BACA,2BAvBgBZ,EAzE0D,EAC5EqD,OAAAA,EACAslB,WAAAA,EACAkC,mBAAAA,EACAhC,gBAAAA,EACAE,YAAAA,EACAG,6BAAAA,EACAE,iBAAAA,EACAvf,QAAAA,EACA0f,eAAAA,EACAC,wBAAAA,EACAyB,sBAAAA,MAEA,MAAMnG,GAAa7W,EAAAA,EAAAA,GAAY5K,GAEzBomB,GAA4BxoB,EAAAA,EAAAA,KAAY,KAC5C4I,IACA0f,EAAe,CAAE7U,WAAYmW,EAAoBlB,oBAAoB,MACpE,CAACJ,EAAgBsB,EAAoBhhB,IAElC+f,GAA6B3oB,EAAAA,EAAAA,KAAY,KACzC0nB,EACFa,EAAwB,CAAE9U,WAAYmW,IAEtCtB,EAAe,CAAE7U,WAAYmW,EAAoBlB,oBAAoB,IAGvE9f,MACC,CAAC8e,EAAY9e,EAAS2f,EAAyBqB,EAAoBtB,IAEhEroB,GAAOC,EAAAA,EAAAA,KASb,IANA0D,EAAAA,EAAAA,KAAU,MACHxB,GAAUyhB,GACbmG,MAED,CAACA,EAAuB5nB,EAAQyhB,IAE9B+F,EAIL,OACE,mBAAChM,GAAA,EAAD,CACExb,OAAQA,EACRwG,QAASA,EACTggB,QAAShB,OAAkBplB,EAAYmmB,EACvCtoB,UAAU,SACVqgB,MAAOzgB,EAAK,oCAEZ,4BAAIA,EAAK,gCACRgoB,GACC,2GAEDE,GACC,gFAEDP,GACC,mBAACvlB,EAAA,EAAD,CAAQE,MAAM,SAASlC,UAAU,wBAAwB0gB,QAAM,EAACzgB,QAASkoB,GACtEV,GACGjnB,EAAAA,EAAAA,GAAWZ,EAAK,6BAA8B6nB,IAC9C7nB,EAAK,2CAGb,mBAACoC,EAAA,EAAD,CAAQE,MAAM,SAASlC,UAAU,wBAAwB0gB,QAAM,EAACzgB,QAASqoB,GACtE1oB,EAAK2nB,EAAkB,gCAAkC,WAE5D,mBAACvlB,EAAA,EAAD,CAAQhC,UAAU,wBAAwB0gB,QAAM,EAACzgB,QAASsI,GAAU3I,EAAK,gB,eChF/E,MAkEA,IAAee,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,SAClByD,GAAW,CAAC9C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAC9D,iBAAkB,2BAFFZ,EAlEqC,EACvDqD,OAAAA,EACAqR,WAAAA,EACAwW,eAAAA,EACAD,sBAAAA,EACAphB,QAAAA,MAEA,MAAOshB,EAAgBC,IAAqBxmB,EAAAA,EAAAA,IAA0B,SAC/DymB,EAAaC,IAAkB1mB,EAAAA,EAAAA,IAAS,IAEzC2mB,EAAe,KACnBL,EAAe,CAAExW,WAAAA,EAAY8W,OAAQL,EAAgBE,YAAAA,IACrDJ,IACAphB,KAGI4hB,GAAqBxqB,EAAAA,EAAAA,KAAasN,IACtC6c,EAAkB7c,KACjB,IAEGmd,GAA0BzqB,EAAAA,EAAAA,KAAayE,IAC3C4lB,EAAe5lB,EAAEiJ,OAAOJ,SACvB,IAEGrN,GAAOC,EAAAA,EAAAA,KAEPwqB,EAA8D,CAClE,CAAEpd,MAAO,OAAQqd,MAAO1qB,EAAK,2BAC7B,CAAEqN,MAAO,WAAYqd,MAAO1qB,EAAK,+BACjC,CAAEqN,MAAO,cAAeqd,MAAO1qB,EAAK,kCACpC,CAAEqN,MAAO,aAAcqd,MAAO1qB,EAAK,kCACnC,CAAEqN,MAAO,YAAaqd,MAAO1qB,EAAK,+BAClC,CAAEqN,MAAO,QAASqd,MAAO1qB,EAAK,6BAGhC,GAAKwT,EAIL,OACE,mBAACmK,GAAA,EAAD,CACExb,OAAQA,EACRwG,QAASA,EACTggB,QAASxmB,EAASkoB,OAAe9nB,EACjCnC,UAAU,SACVqgB,MAAOzgB,EAAK,6BAEZ,mBAAC2qB,GAAA,EAAD,CACEpO,KAAK,iBACLqO,QAASH,EACTld,SAAUgd,EACVM,SAAUZ,IAEZ,mBAACzM,GAAA,EAAD,CACEkN,MAAO1qB,EAAK,iCACZqN,MAAO8c,EACP5c,SAAUid,IAEZ,mBAACpoB,EAAA,EAAD,CAAQE,MAAM,SAASlC,UAAU,wBAAwB0gB,QAAM,EAACzgB,QAASgqB,GACtErqB,EAAK,sBAER,mBAACoC,EAAA,EAAD,CAAQhC,UAAU,wBAAwB0gB,QAAM,EAACzgB,QAASsI,GAAU3I,EAAK,gBCoE/E,IAAee,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAQuO,KAAMwd,IAAoBpD,EAAAA,EAAAA,IAAyB3oB,IAAW,IAChE,UAAEgsB,IAAclB,EAAAA,EAAAA,IAAgC9qB,GAChDisB,GAAYC,EAAAA,EAAAA,IAAgClsB,GAC5CmsB,GAAcC,EAAAA,EAAAA,IAAkCpsB,IAC9CyU,WAAYmW,GAAuB5qB,EAAO6qB,kBAAoB,GAEtE,MAAO,CACLnC,WAAgC,cAApBqD,EACZM,uBAAuBC,EAAAA,EAAAA,IAA4BtsB,GACnDusB,kBAAmBP,EACnBQ,kBAAmBP,EACnBQ,oBAAqBN,EACrBvB,mBAAAA,MAGJ,CAAClqB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,wBAAyB,qCAAsC,8BAlB/CZ,EA7GoD,EACtE2sB,QAAAA,EACA1P,SAAAA,EACA+O,gBAAAA,EACArD,WAAAA,EACA2D,sBAAAA,EACAE,kBAAAA,EACAC,kBAAAA,EACAC,oBAAAA,EACA7B,mBAAAA,EACAI,sBAAAA,EACA2B,mCAAAA,EACAC,yBAAAA,MAEA,MAAOC,EAAmBC,EAAiBC,IAAoB9H,EAAAA,GAAAA,MACxD+H,EAAmBC,EAAiBC,IAAoBjI,EAAAA,GAAAA,MAE/DrgB,EAAAA,EAAAA,KAAU,KACDoY,GAAa6P,GAAsBG,OAMtCxpB,GALA2pB,EAAAA,GAAAA,GAAyB,CACzBC,YAAaN,EACbO,SAAUP,EACVQ,MAAOtC,KAGV,CAAChO,EAAU6P,EAAmBG,EAAmBF,EAAiB9B,IAErE,MAAMuC,GAAiBvsB,EAAAA,EAAAA,KAAY,KACjC4rB,IACA5B,MACC,CAAC4B,EAA0B5B,IAExBwC,GAA4Bxf,EAAAA,EAAAA,GAAYqe,QAAyB7oB,GAAW,GAC5EiqB,EAAiCzQ,EAAWqP,EAAwBmB,EAEpEvsB,GAAOC,EAAAA,EAAAA,KAEPwsB,EAAyBzsB,EAAK,kCAAmCwsB,EAAgC,KAEjGpsB,GAAYmE,EAAAA,EAAAA,GAChB,uBACAknB,GAAW,gBACX1P,GAAY,SAGR2Q,EAAe,CACnB5pB,EAAc4nB,EAAerqB,EAA4B8M,EAAoBwf,IAG3E,0BACElG,KAAK,SACLC,SAAU,EACVtmB,WAAWmE,EAAAA,EAAAA,GACT,OACA4I,GAAY,WACZwf,GAAe,eAEjBtsB,QAAU8M,OAAqB5K,EAAVlC,EACrBogB,MAAOiK,GAEP,wBAAGtqB,UAAY,QAAO0C,OAK5B,OACE,0BAAK1C,UAAWA,GACd,0BAAKA,UAAU,8BACb,mBAACgC,EAAA,EAAD,CACEE,MAAM,cACND,OAAK,EACLhC,QAAS0pB,EACTvnB,UAAU,oBAEV,wBAAGpC,UAAU,gBAEf,2BAAMA,UAAU,6BAA6BqgB,MAAOgM,GACjDA,KAGArB,GACD,0BAAKhrB,UAAU,gCACQ,cAApB0qB,GACC4B,EAAa,UAAW1sB,EAAK,4BAA6B0rB,GAE3DH,GACCmB,EAAa,OAAQ1sB,EAAK,+BAAgCgsB,GAE3DR,GACCkB,EAAa,WAAY1sB,EAAK,sBAAuBssB,GAEtDI,EAAa,SAAU1sB,EAAK,gCAAiC6rB,GAAkBP,GAAmB,KAIzG,mBAAC,GAAD,CACEnpB,OAAQypB,EACRnE,WAAYA,EACZ9e,QAASmjB,IAEX,mBAAC,GAAD,CACE3pB,OAAQ4pB,EACRpjB,QAASsjB,EACTzY,WAAYmW,S,oCCpJpB,SACEiD,IAGA,MAAMC,GAAYzmB,EAAAA,EAAAA,IAAuB,MAEnCmV,GAAgBxb,EAAAA,EAAAA,KAAayE,IACnB,UAAVA,EAAEjE,KACYssB,EAAUjmB,UAAYzK,SAAS2wB,eAG/CF,MAED,CAACA,IAQJ,OANAjpB,EAAAA,EAAAA,KAAU,KACRQ,OAAOC,iBAAiB,UAAWmX,GAAe,GAE3C,IAAMpX,OAAOE,oBAAoB,UAAWkX,KAClD,CAACA,IAEGsR,G,wBCWT,MAyDA,IAAe9rB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MACT,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,GAC1B+tB,EAAoBrsB,IAAQqnB,EAAAA,EAAAA,IAAqBrnB,GAOvD,MAAO,CACLA,KAAAA,EACAssB,gBARsBD,GAAoB1tB,EAAAA,EAAAA,IAAWN,EAAQguB,QAAqBxqB,EASlF0qB,UAReC,EAAAA,EAAAA,IAAmBnuB,EAAQC,GAS1CmuB,QARczsB,GACZ0sB,EAAAA,EAAAA,IAAkB1sB,GAAM2sB,EAAAA,EAAAA,IAAqBtuB,IAASuuB,EAAAA,EAAAA,IAAuBvuB,SAC7EwD,KARYzD,EAzDoC,EACtDE,OAAAA,EACA0B,KAAAA,EACAssB,gBAAAA,EACAC,SAAAA,EACAE,QAAAA,EACAI,aAAAA,EACAltB,QAAAA,MAEA,MAAOurB,EAAmBC,EAAiBC,IAAoB9H,EAAAA,GAAAA,MACxDwJ,EAAuBC,EAAqBC,IAAwB1J,EAAAA,GAAAA,KAErE2J,GAAiBC,EAAAA,GAAAA,GAAsB,CAC3CltB,KAAAA,EACAssB,gBAAAA,EACAC,SAAAA,EACAE,QAAAA,EACAU,aAAchC,EACdiC,uBAAwBL,IACvB,GAEGM,EAAc,KAClB1tB,EAAQrB,IAGJ6tB,EAAYmB,GAAmBD,GAErC,GAAKrtB,EAIL,OACE,mBAACwd,GAAA,EAAD,CACE9d,UAAU,oCACVC,QAAS0tB,EACTJ,eAAgBA,EAChBd,UAAWA,IAEVztB,EAAAA,EAAAA,IAASJ,GACR,mBAACmf,GAAA,EAAD,CAAiBE,OAAQrf,EAAQuuB,aAAcA,EAAcU,WAAW,UAExE,mBAAC3P,GAAA,EAAD,CAAetf,OAAQA,EAAQuuB,aAAcA,EAAcU,WAAW,UAExE,mBAACC,GAAA,EAAD,CACE/rB,OAAQypB,EACRjjB,QAASmjB,EACTprB,KAAMA,IAER,mBAAC,KAAD,CACEyB,OAAQqrB,EACR7kB,QAAS+kB,EACT1uB,OAAQA,S,eClDhB,MAGMmvB,IAAejqB,EAAAA,EAAAA,KAAUkqB,GAAOA,KAAM,KAAO,GA0EnD,IAAertB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAQsvB,QAASC,GAAevvB,EAAOwvB,SACjCC,EAAYzvB,EAAO0vB,MAAMhQ,MACzB,qBAAEiQ,GAAyB3vB,EAAO4vB,aAExC,MAAO,CACLL,WAAAA,EACAE,UAAAA,EACAE,qBAAAA,MAGJ,CAACjvB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,eACA,kBACA,WACA,yBACA,6BAjBgBZ,EAxE8C,EAChEwvB,WAAAA,EAAYE,UAAAA,EAAWE,qBAAAA,EACvBE,QAAAA,EAASC,aAAAA,EAAcC,gBAAAA,EAAiBC,SAAAA,EACxCC,uBAAAA,EAAwBC,wBAAAA,MAGxB,MAAMC,GAAc9oB,EAAAA,EAAAA,IAAuB,OAI3CzC,EAAAA,EAAAA,KAAU,KACRwqB,IAAa,KACXU,IAEAC,SAED,CAACD,EAAcC,KAElBK,EAAAA,GAAAA,GAAoBD,EAAYtoB,SAAU0nB,GAE1C,MAAMP,GAAchuB,EAAAA,EAAAA,KAAavC,IAC/BuxB,EAAS,CAAEvxB,GAAAA,EAAI4xB,sBAAsB,IACrCR,IACAroB,YAAW,KACTyoB,EAAuB,CAAExxB,GAAAA,MA7BC,OA+B3B,CAACuxB,EAAUC,EAAwBJ,IAEhC5uB,GAAOC,EAAAA,EAAAA,KAEb,OACE,0BAAKG,UAAU,gCACZkuB,GACC,0BAAKluB,UAAU,oBAAoBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAC3D,0BAAKwF,IAAKmnB,EAAa9uB,UAAU,0BAC9BkuB,EAAWrQ,KAAKI,GACf,0BAAKje,UAAU,gBAAgBC,QAAS,IAAM0tB,EAAY1P,GAAS1d,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAC3F,mBAACjC,EAAA,EAAD,CAAQG,KAAM+tB,EAAUnQ,KACxB,0BAAKje,UAAU,kBAAiBQ,EAAAA,EAAAA,IAAWknB,EAAAA,EAAAA,IAAuB0G,EAAUnQ,KA1C/E,WAgDNqQ,GACC,0BAAKtuB,UAAU,uBACb,yBAAIA,UAAU,2CAA2CO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAChFvC,EAAK,UAEN,mBAACoC,EAAA,EAAD,CACEC,OAAK,EACL7B,KAAK,UACL8B,MAAM,cACNE,UAAU,qBACVnC,QAAS4uB,EACT7S,MAAOpc,EAAKoc,OAEZ,wBAAGhc,UAAU,iBAGhBsuB,EAAqBzQ,KAAKzgB,GACzB,mBAAC,GAAD,CACEwB,OAAQxB,EACR6C,QAAS0tB,Y,0BCyBvB,UAAehtB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MACT,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,GAChC,IAAK0B,EACH,MAAO,GAGT,MAAMqsB,GAAoBhF,EAAAA,EAAAA,IAAqBrnB,GAE/C,MAAO,CACLA,KAAAA,EACA2uB,aAActwB,EAAOswB,gBACjBtC,GAAqB,CAAEC,iBAAiB3tB,EAAAA,EAAAA,IAAWN,EAAQguB,QAGnE,CAACttB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,kBAhBgBZ,EA9E2C,EAC7DV,QAAAA,EACAkxB,YAAAA,EACAtwB,OAAAA,EACA0B,KAAAA,EACAssB,gBAAAA,EACAntB,aAAAA,EACAwvB,aAAAA,MAEA,MAAME,GAAiB9Z,EAAAA,EAAAA,IAA4BrX,GAC7CoxB,GAAeza,EAAAA,EAAAA,IAASjT,EAAAA,EAAAA,IAAoB1D,EAAS,UACrDqxB,EAAelmB,SAAQmmB,EAAAA,EAAAA,IAAqBtxB,IAE5C2vB,GAAchuB,EAAAA,EAAAA,KAAY,KAC9BF,EAAa,CAAEb,OAAAA,EAAQC,UAAWb,EAAQZ,OACzC,CAACwB,EAAQa,EAAczB,EAAQZ,KAE5BwC,GAAOC,EAAAA,EAAAA,KAEP4sB,EAAYmB,GAAmBD,GAErC,GAAKrtB,EAIL,OACE,mBAACwd,GAAA,EAAD,CACE9d,UAAU,kCACV6H,QAASxF,EAAAA,GACTpC,QAAS0tB,EACTlB,UAAWA,GAEX,mBAACvsB,EAAA,EAAD,CACEI,KAAMA,EACND,KAAMusB,EACN2C,kBAAgB,EAChBC,gBAAiB5C,MAAAA,OAAF,EAAEA,EAAiB6C,OAClCR,aAAcA,IAEhB,0BAAKjvB,UAAU,QACb,0BAAKA,UAAU,YACb,0BAAKA,UAAU,SACb,yBAAIO,IAAI,SAAQC,EAAAA,EAAAA,IAAWif,EAAAA,EAAAA,GAAa7f,EAAMU,EAAMssB,KACnDtsB,EAAKovB,YAAc,mBAACC,GAAA,EAAD,OAEtB,0BAAK3vB,UAAU,gBACb,mBAAC4vB,GAAA,EAAD,CAAM5vB,UAAU,SACb6vB,EAAAA,EAAAA,IAAoBjwB,EAAqB,IAAf5B,EAAQ0C,SAKzC,0BAAKV,UAAU,YACb,0BAAKA,UAAU,UAAUO,IAAI,QASvC,SACEX,EAAc5B,EAAqBwS,EAAkB0e,EAAsBG,GAE3E,OAAK7e,EAKH,2BAAMxQ,UAAU,iBACd,0BAAK3D,IAAKmU,EAASG,IAAI,GAAG3Q,UAAWqvB,EAAe,aAAUltB,KAC7DsQ,EAAAA,EAAAA,IAAgBzU,IAAY,wBAAGgC,UAAU,eACzCQ,EAAAA,EAAAA,IAAWsvB,EAAAA,EAAAA,IAAsBlwB,EAAM5B,GAAS,GAAO,CAAC,QAAS,aAAc,CAAE+xB,UAAWb,MAPxF1uB,EAAAA,EAAAA,IAAWsvB,EAAAA,EAAAA,IAAsBlwB,EAAM5B,IAZrCgyB,CAAqBpwB,EAAM5B,EAASoxB,GAAgBD,EAAgBD,EAAaG,WChD9F,IAAe1uB,EAAAA,EAAAA,KA5CmB,EAChCsvB,WAAAA,EAAYzD,SAAAA,MAEZ,MAAM0D,GAAcruB,EAAAA,EAAAA,KAAQ,IAmB9B,SAAgCouB,GAE9B,GADgBA,EAAWE,MAAM,0BACpB,CACX,MAAMzvB,EAAO,IAAIyhB,KAAK8N,GACtB,MAAO,CAAC,CAAEvvB,KAAAA,EAAMuC,MAAM0jB,EAAAA,EAAAA,IAAmBjmB,KAG3C,MAAM0vB,EAAa,GACbC,EAAc,IAAIlO,KAClBoC,EAAc8L,EAAYhO,cAC1BiO,EAAaD,EAAY5L,UAAa,IAAItC,KAAM,GAAEoC,KAAe0L,KAAexL,UAClFF,EACAA,EAAc,EAElB,IAAK,IAAIc,EAAI,EAAGA,EA3CO,EA2CeA,IAAK,CACzC,MAAM3kB,EAAO,IAAIyhB,KAAM,GAAEmO,EAAajL,KAAK4K,KAC3CG,EAAW9K,KAAK,CAAE5kB,KAAAA,EAAMuC,MAAM0jB,EAAAA,EAAAA,IAAmBjmB,KAGnD,OAAO0vB,EAtC2BG,CAAuBN,IAAa,CAACA,IACvE,OACE,8BAASjwB,UAAU,6CAChBkwB,EAAYrS,KAAI,EAAGnd,KAAAA,EAAMuC,KAAAA,KAEtB,0BACEhD,QAAS,IAAMusB,EAAS9rB,GACxBV,UAAU,YACVG,IAAK8C,GAEL,wBAAGjD,UAAU,kBACb,+BAAOiD,U,0BC2BnB,MAGM8qB,IAAejqB,EAAAA,EAAAA,KAAUkqB,GAAOA,KAAM,KAAK,GA6NjD,IAAertB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IAAuB,MACtB,MAAQ0f,KAAMC,GAAc3f,EAAOyf,OAC3BC,KAAM+P,GAAczvB,EAAO0vB,OAE3BJ,QAASuC,GAAoB7xB,EAAO8xB,aAAe,GAE3D,IAAKD,EACH,MAAO,CACLlS,UAAAA,EACA8P,UAAAA,GAIJ,MAAM,cACJhS,EADI,SACWgM,EADX,aACqB6G,GACvBtwB,GACE,eACJ+xB,EADI,cACYC,EADZ,aAC2BC,EAD3B,cACyC3e,GAC3CtT,EAAO4vB,cACHrP,QAAS2R,EAAe5C,QAAS6C,GAAkBH,GAAiB,IACpEzR,QAAS6R,EAAc9C,QAAS+C,GAAiBJ,GAAgB,IACjEK,SAAUC,GAA2B9I,EAG7C,MAAO,CACLhM,cAAAA,EACAoU,gBAAAA,EACAO,aAAAA,EACAC,aAAAA,EACAH,cAAAA,EACAC,cAAAA,EACA9e,SATeC,MAAAA,GAAH,UAAGA,EAAehP,YAAlB,aAAG,EAAqB+O,SAUpCkf,uBAAAA,EACA5S,UAAAA,EACA8P,UAAAA,EACAsC,eAAAA,EACAzB,aAAAA,MAGJ,CAAC5vB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,WACA,yBACA,uBACA,2BA5CgBZ,EA3N2C,EAC7DwwB,YAAAA,EAAae,WAAAA,EAAYkB,gBAAAA,EAAiB/U,cAAAA,EAC1CoU,gBAAAA,EAAiBO,aAAAA,EAAcC,aAAAA,EAAcH,cAAAA,EAAeC,cAAAA,EAC5D9e,SAAAA,EAAUkf,uBAAAA,EAAwB5S,UAAAA,EAAW8P,UAAAA,EAAWsC,eAAAA,EAAgBzB,aAAAA,EACxET,QAAAA,EAAS4C,mBAAAA,EAAoBzC,SAAAA,EAAUC,uBAAAA,EAAwByC,qBAAAA,EAAsBC,sBAAAA,MAErF,MAAM1xB,GAAOC,EAAAA,EAAAA,MAEN0xB,EAAqBC,IAA0BluB,EAAAA,EAAAA,KAAkB,IACjEmuB,EAAsBC,IAA2BpuB,EAAAA,EAAAA,KAAkB,GAEpEquB,GAAiBhyB,EAAAA,EAAAA,KAAY,EAAGob,UAAAA,MAChCkU,GAAgBlU,IAAc6W,EAAAA,GAAAA,WAChC7D,IAAa,KACXsD,EAAqB,CACnBnkB,KAAM,OACN2kB,MAAO3C,SAIZ,CAACD,EAAcoC,EAAsBnC,IAElC4C,GAAkBnyB,EAAAA,EAAAA,KACrBvC,IACCuxB,EAAS,CAAEvxB,GAAAA,EAAI4xB,sBAAsB,IAEjC5xB,IAAOgf,GACTwS,EAAuB,CAAExxB,GAAAA,IAGtBiF,EAAAA,IACHmsB,MAGJ,CAACpS,EAAeuS,EAAUC,EAAwBJ,IAG9CuD,GAAwBpyB,EAAAA,EAAAA,KAAavC,IACzCk0B,EAAsB,CAAEl0B,GAAAA,MACvB,CAACk0B,IAEEV,GAAe/uB,EAAAA,EAAAA,KAAQ,KAC3B,IAAKqtB,GAAgBA,EAAY8C,WAAW,MAAQ9C,EAAY5wB,OAAS,EACvE,OAAO2zB,GAAAA,EAGT,MAAMC,EAAkB1B,EACpBA,EAAgBjU,QAAQnf,IACxB,MAAMiD,EAAO+tB,EAAUhxB,GACvB,IAAKiD,EACH,OAAO,EAGT,MAAM8xB,GAAWC,EAAAA,EAAAA,IAAgB/xB,GACjC,OAAQ8xB,IAAY3S,EAAAA,GAAAA,GAAY2S,EAAUjD,KAAiB1P,EAAAA,GAAAA,GAAYnf,EAAKgyB,SAAUnD,MAEtF,GAEJ,MAAO,IACD9S,IAAiBoD,EAAAA,GAAAA,GAAY5f,EAAK,iBAAkBsvB,GAAe,CAAC9S,GAAiB,OACtFiD,EAAAA,EAAAA,KAAYD,EAAAA,EAAAA,IAAO,IACjB8S,KACCnB,GAAgB,MAChBC,GAAgB,KAClB1S,MAEL,CACD4Q,EAAasB,EAAiBpU,EAAexc,EAAMmxB,EAAcC,EAAc1S,EAAW8P,IAGtFuC,GAAgB9uB,EAAAA,EAAAA,KAAQ,KACvBqtB,GAAeA,EAAY5wB,OA5EO,IA4EyCuyB,IAAkBC,EACzFmB,GAAAA,GAGF5S,EAAAA,EAAAA,KAAYD,EAAAA,EAAAA,IAAO,IAAIyR,KAAkBC,IAC9CxS,GAAW,IACZ,CAACA,EAAWuS,EAAeC,EAAe5B,IAEvCoD,GAAgBzwB,EAAAA,EAAAA,KAAQ,KACtBqtB,GAAgBe,IAAgBje,GAAgC,IAApBA,EAAS1T,OAIpD0T,EACJ6L,KAAKzgB,IAAO,MACX,MAAOwB,EAAQC,GAAazB,EAAGm1B,MAAM,KAErC,OAAOrB,MAAAA,GAAP,UAAOA,EAAyBtyB,UAAhC,aAAO,EAAkCyf,KAAKjR,OAAOvO,OAEtD0d,OAAmBpT,SACnBqpB,MAAK,CAACC,EAAGC,IAAMA,EAAEhyB,KAAO+xB,EAAE/xB,OAVpBuxB,GAAAA,GAWR,CAACjgB,EAAUkf,EAAwBhC,EAAae,IAE7C0C,GAA2BhzB,EAAAA,EAAAA,KAAY,KAC3C6xB,GAAwBD,KACvB,CAACA,IAEEqB,GAA4BjzB,EAAAA,EAAAA,KAAY,KAC5C+xB,GAAyBD,KACxB,CAACA,IAmBEoB,EAAenC,IAAmBA,EAAetS,QAAUsS,EAAetI,WAC1EwI,EAAatyB,SAAWqyB,EAAcryB,SAAWg0B,EAAch0B,OAErE,OAAK4wB,GAAgBe,EAKnB,mBAACxS,GAAA,EAAD,CACEzd,UAAU,2BACV0d,MAAO4U,EACP3U,WAAYgU,EAEZmB,sBAAoB,EACpBC,YAAU,GAET5B,GACC,0BAAKnxB,UAAU,4CACb,mBAAC,GAAD,CACEiwB,WAAYkB,EACZ3E,SAAU4E,KAIfyB,GACC,mBAACG,GAAA,EAAD,CACE/vB,KAAMrD,EAAK,6BACXmqB,YAAanqB,EAAK,4CAGnBgxB,EAAatyB,QACd,0BAAK0B,UAAU,2CAA2CO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GACjFyuB,EAAa/S,KAAKzgB,GACjB,mBAAC61B,GAAA,EAAD,CACEC,aAAc91B,EACd6C,QAAS8xB,EACToB,SAAU/1B,SAKfwzB,EAAatyB,QACd,0BAAK0B,UAAU,kBACb,yBAAIA,UAAU,kBAAkBO,IAAKX,EAAKoc,MAAQ,YAAS7Z,GACxDyuB,EAAatyB,OAvKK,GAwKjB,mBAACsxB,GAAA,EAAD,CAAM3vB,QAAS0yB,GACZ/yB,EAAK2xB,EAAsB,2BAA6B,6BAG5D3xB,EAAK,oCAEPgxB,EAAa/S,KAAI,CAACzgB,EAAI4d,KACrB,GAAKuW,KAAuBvW,GA/KT,GAmLnB,OACE,mBAAC,GAAD,CACEpc,OAAQxB,EACR6C,QAAS6xB,UAMhBnB,EAAcryB,QACf,0BAAK0B,UAAU,kBACb,yBAAIA,UAAU,kBAAkBO,IAAKX,EAAKoc,MAAQ,YAAS7Z,GACxDwuB,EAAcryB,OA/LI,GAgMjB,mBAACsxB,GAAA,EAAD,CAAM3vB,QAAS2yB,GACZhzB,EAAK6xB,EAAuB,2BAA6B,6BAG7D7xB,EAAK,mCAEP+wB,EAAc9S,KAAI,CAACzgB,EAAI4d,KACtB,GAAKyW,KAAwBzW,GAvMV,GA2MnB,OACE,mBAAC,GAAD,CACEpc,OAAQxB,EACR+vB,cAAY,EACZltB,QAAS6xB,UAMhBQ,EAAch0B,QACf,0BAAK0B,UAAU,kBACb,yBAAIA,UAAU,kBAAkBO,IAAKX,EAAKoc,MAAQ,YAAS7Z,GAAYvC,EAAK,mBAC3E0yB,EAAczU,KA9GvB,SAA4B7f,GAC1B,MAAMiF,GAAO6sB,EAAAA,EAAAA,IAAsBlwB,EAAM5B,GACnCsC,EAAOge,EAAUtgB,EAAQY,QAE/B,GAAKqE,GAAS3C,EAId,OACE,mBAAC,GAAD,CACE1B,OAAQZ,EAAQY,OAChBZ,QAASA,EACTkxB,YAAaA,SASV,mBAAC,GAAD,CAAgBV,QAASA,QC/I9BT,IAAejqB,EAAAA,EAAAA,KAAUkqB,GAAOA,KAAM,KAAK,GAyFjD,IAAertB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAQ0f,KAAMC,GAAc3f,EAAOyf,OAC7B,cAAEhC,EAAegM,UAAY6I,SAAUC,GAAvC,aAAiEjC,GAAiBtwB,GAClF,eAAE+xB,EAAF,cAAkBze,GAAkBtT,EAAO4vB,cAE3C,SAAEvc,IAAcC,MAAAA,OAAD,EAACA,EAAehP,OAAS,GAE9C,MAAO,CACLmZ,cAAAA,EACApK,SAAAA,EACAkf,uBAAAA,EACA5S,UAAAA,EACAoS,eAAAA,EACAzB,aAAAA,MAGJ,CAAC5vB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,0BAjBpCZ,EAvFkD,EACpEwwB,YAAAA,EACA9S,cAAAA,EACA+U,gBAAAA,EACAnf,SAAAA,EACAkf,uBAAAA,EACA5S,UAAAA,EACAoS,eAAAA,EACAzB,aAAAA,EACAoC,qBAAAA,EACAD,mBAAAA,MAEA,MAAMxxB,GAAOC,EAAAA,EAAAA,KACP8xB,GAAiBhyB,EAAAA,EAAAA,KAAY,EAAGob,UAAAA,MAChCkU,GAAgBlU,IAAc6W,EAAAA,GAAAA,WAChC7D,IAAa,KACXsD,EAAqB,CACnBnkB,KAAM,OACN2kB,MAAO3C,EACPtwB,OAAQwd,SAIb,CAACA,EAAe6S,EAAcoC,EAAsBnC,IAEjDoD,GAAgBzwB,EAAAA,EAAAA,KAAQ,IACvBmQ,GAAgC,IAApBA,EAAS1T,OAInB0T,EACJ6L,KAAKzgB,IAAO,MACX,MAAOwB,EAAQC,GAAazB,EAAGm1B,MAAM,KAErC,OAAOrB,MAAAA,GAAP,UAAOA,EAAyBtyB,UAAhC,aAAO,EAAkCyf,KAAKjR,OAAOvO,OAEtD0d,OAAmBpT,SACnBqpB,MAAK,CAACC,EAAGC,IAAMA,EAAEhyB,KAAO+xB,EAAE/xB,OAVpBuxB,GAAAA,GAWR,CAACjgB,EAAUkf,IAmBR2B,EAAenC,IAAmBA,EAAetS,QAAUsS,EAAetI,WAAakK,EAAch0B,OAE3G,OACE,0BAAK0B,UAAU,cACb,mBAACyd,GAAA,EAAD,CACEzd,UAAU,yCACV0d,MAAO4U,EACP3U,WAAYgU,EACZoB,YAAU,GAET5B,GACC,0BAAKnxB,UAAU,4CACb,mBAAC,GAAD,CACEiwB,WAAYkB,EACZ3E,SAAU4E,KAIfyB,GACC,mBAACG,GAAA,EAAD,CACE/vB,KAAMrD,EAAK,6BACXmqB,YAAanqB,EAAK,4CAGnB0yB,EAAch0B,QAAUg0B,EAAczU,KAzC/C,SAA4B7f,GAC1B,MAAMiF,GAAO6sB,EAAAA,EAAAA,IAAsBlwB,EAAM5B,GACnCsC,EAAOge,EAAUtgB,EAAQY,QAE/B,GAAKqE,GAAS3C,EAId,OACE,mBAAC,GAAD,CACE1B,OAAQZ,EAAQY,OAChBZ,QAASA,EACTkxB,YAAaA,aCxEd,SAASkE,GAAsBlmB,GACpC,MAAO,CAACvO,EAAqB00B,KAAe,MAC1C,MAAQhV,KAAMC,GAAc3f,EAAOyf,OAC3BC,KAAM+P,GAAczvB,EAAO0vB,OAC7B,eACJqC,EADI,cACYze,EADZ,OAC2BrT,GAC7BD,EAAO4vB,aAKL+E,EAAuB,UAATpmB,EAAmBA,EAAQmmB,MAAAA,GAAAA,EAAOE,QAAU,QAAU,SAElEtC,SAAUC,GAA2BvyB,EAAOypB,SAC9CpW,EAAWC,MAAAA,GAAH,UAAGA,EAAgBqhB,UAAnB,aAAG,EAA8BthB,SAEzCwhB,EAAkB70B,EAAO60B,gBAAgBvC,SAE/C,MAAO,CACLwC,OAAOC,EAAAA,EAAAA,IAAY/0B,GACnBg1B,eAAwBxxB,IAAb6P,KACL0e,GAAiBvnB,QAAQunB,EAAetS,OAASsS,EAAetI,UACtE9J,UAAAA,EACA8P,UAAAA,EACA8C,uBAAAA,EACAlf,SAAAA,EACA4hB,aAAch1B,EACd40B,gBAAAA,EACAvE,aAActwB,EAAOswB,e,0BCnB3B,MAAM4E,GAAe,QACf9F,IAAejqB,EAAAA,EAAAA,KAAUkqB,GAAOA,KAAM,KAAK,GAuGjD,IAAertB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,IAClB00B,GAAsBS,KACtB,CAACx0B,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,uBACA,qBAJgBZ,EArG4C,EAC9DwwB,YAAAA,EACA0E,aAAAA,EACAD,UAAAA,EACAzC,uBAAAA,EACAlf,SAAAA,EACAid,aAAAA,EACAoC,qBAAAA,EACAlf,gBAAAA,MAEA,MAAMvS,GAAOC,EAAAA,EAAAA,KAEP8xB,GAAiBhyB,EAAAA,EAAAA,KAAY,EAAGob,UAAAA,MAChCkU,GAAgBlU,IAAc6W,EAAAA,GAAAA,WAChC7D,IAAa,KACXsD,EAAqB,CACnBnkB,KAAM2mB,GACNhC,MAAO3C,EACPtwB,OAAQg1B,SAIb,CAAC3E,EAAcoC,EAAsBnC,EAAa0E,IAE/CtB,GAAgBzwB,EAAAA,EAAAA,KAAQ,IACvBmQ,GAAakf,EAIXlf,EAAS6L,KAAKzgB,IAAO,MAC1B,MAAOwB,EAAQC,GAAazB,EAAGm1B,MAAM,KAErC,iBAAOrB,EAAuBtyB,UAA9B,aAAO,EAAgCyf,KAAKjR,OAAOvO,OAClD0d,OAAOpT,SAPD8oB,GAAAA,GAQR,CAACf,EAAwBlf,IAEtB8hB,GAAoBn0B,EAAAA,EAAAA,KAAY,CAACd,EAAmBD,KACxDuT,EAAgB,CACdvT,OAAAA,EACAC,UAAAA,EACAhD,OAAQY,EAAAA,GAAAA,iBAET,CAAC0V,IA2BE4hB,GAAoBC,EAAAA,GAAAA,GAAkB,CAAC9E,GAAc+E,EAAAA,KAA+BN,EACpFO,EAAcH,GAAqB/hB,GAAYA,EAAS1T,OAAS,IAAM4wB,EACvEiF,EAAgBJ,GAAqB/hB,GAAYA,EAAS1T,OAAS,GAAK4wB,EAExEhrB,GAAaC,EAAAA,EAAAA,GACjB,+BACAgwB,GAAiB,aAGnB,OACE,0BAAKn0B,UAAU,cACb,mBAACyd,GAAA,EAAD,CACEzd,UAAWkE,EACXwZ,MAAO4U,EACP8B,aAAelF,EAAyB,YAAX,SAC7BvR,WAAYgU,EACZoB,YAAU,IAERgB,GAAqB,mBAAC5V,GAAA,EAAD,MACtB4V,KAAuB/hB,GAAgC,IAApBA,EAAS1T,SAC3C,mBAAC00B,GAAA,EAAD,CACE/vB,KAAMrD,EAAK,6BACXmqB,YAAanqB,EAAK,0CAGrBs0B,GAhDH,0BAAKl0B,UAAU,aAAaO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GACnDmwB,EAAczU,KAAK7f,GAClB,mBAACq2B,GAAA,EAAD,CACEl0B,IAAKnC,EAAQZ,GACbk3B,SAAS,eACTt2B,QAASA,EACTiC,QAAS6zB,OA2CZK,GAnCE7B,EAAczU,KAAK7f,GACxB,mBAAC,GAAD,CACEmC,IAAKnC,EAAQZ,GACbwB,OAAQZ,EAAQY,OAChBZ,QAASA,Y,wBCnEjB,MAAM61B,GAAe,QACf9F,IAAejqB,EAAAA,EAAAA,KAAUkqB,GAAOA,KAAM,KAAK,GA4FjD,IAAertB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,IAClB00B,GAAsBS,KACtB,CAACx0B,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,uBACA,kBAJgBZ,EA1F2C,EAC7DwwB,YAAAA,EACA0E,aAAAA,EACAD,UAAAA,EACArV,UAAAA,EACA8P,UAAAA,EACA8C,uBAAAA,EACAlf,SAAAA,EACAid,aAAAA,EACAoC,qBAAAA,EACA5xB,aAAAA,MAEA,MAAMG,GAAOC,EAAAA,EAAAA,KACP8xB,GAAiBhyB,EAAAA,EAAAA,KAAY,EAAGob,UAAAA,MAChCkU,GAAgBlU,IAAc6W,EAAAA,GAAAA,WAChC7D,IAAa,KACXsD,EAAqB,CACnBnkB,KAAM2mB,GACNhC,MAAO3C,EACPtwB,OAAQg1B,SAIb,CAAC3E,EAAcoC,EAAsBnC,EAAa0E,IAE/CtB,GAAgBzwB,EAAAA,EAAAA,KAAQ,IACvBmQ,GAAakf,EAIXlf,EAAS6L,KAAKzgB,IAAO,MAC1B,MAAOwB,EAAQC,GAAazB,EAAGm1B,MAAM,KAErC,iBAAOrB,EAAuBtyB,UAA9B,aAAO,EAAgCyf,KAAKjR,OAAOvO,OAClD0d,OAAOpT,SAPD8oB,GAAAA,GAQR,CAACf,EAAwBlf,IAEtBuiB,GAAqB50B,EAAAA,EAAAA,KAAY,CAACd,EAAmBD,KACzDa,EAAa,CAAEb,OAAAA,EAAQC,UAAAA,MACtB,CAACY,IA4BEs0B,GAAoBC,EAAAA,GAAAA,GAAkB,CAAC9E,GAAc+E,EAAAA,KAA+BN,EAE1F,OACE,0BAAK3zB,UAAU,cACb,mBAACyd,GAAA,EAAD,CACEzd,UAAU,8CACV0d,MAAO4U,EACP3U,WAAYgU,EACZoB,YAAU,IAERgB,GAAqB,mBAAC5V,GAAA,EAAD,MACtB4V,KAAuB/hB,GAAgC,IAApBA,EAAS1T,SAC3C,mBAAC00B,GAAA,EAAD,CACE/vB,KAAMrD,EAAK,6BACXmqB,YAAanqB,EAAK,0CAGrBm0B,GAAqB/hB,GAAYA,EAAS1T,OAAS,GA1CjDg0B,EAAczU,KAAI,CAAC7f,EAASgd,KACjC,MAAMwZ,EAAkC,IAAVxZ,IACzByZ,EAAAA,EAAAA,IAAYz2B,EAAQ0C,SAAU+zB,EAAAA,EAAAA,IAAYnC,EAActX,EAAQ,GAAGta,MACxE,OACE,0BACEV,UAAU,sBACVO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,EAC1BhC,IAAKnC,EAAQZ,IAEZo3B,GACC,wBAAGx0B,UAAU,kBAAkBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,IACtDuyB,EAAAA,EAAAA,IAAmB90B,EAAM,IAAIuiB,KAAoB,IAAfnkB,EAAQ0C,QAG/C,mBAACi0B,GAAA,EAAD,CACEx0B,IAAKnC,EAAQZ,GACbY,QAASA,EACT8B,aAAa80B,EAAAA,GAAAA,GAAch1B,EAAM5B,EAASsgB,EAAW8P,GACrDyG,eAAgBN,c,eC7D5B,MAAMV,GAAe,YACf9F,IAAejqB,EAAAA,EAAAA,KAAUkqB,GAAOA,KAAM,KAAK,GA+FjD,IAAertB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,IAClB00B,GAAsBS,KACtB,CAACx0B,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,uBACA,kBAJgBZ,EA7F2C,EAC7DwwB,YAAAA,EACA0E,aAAAA,EACAD,UAAAA,EACArV,UAAAA,EACA8P,UAAAA,EACA8C,uBAAAA,EACAlf,SAAAA,EACAwhB,gBAAAA,EACAvE,aAAAA,EACAoC,qBAAAA,EACA5xB,aAAAA,MAEA,MAAMG,GAAOC,EAAAA,EAAAA,KACP8xB,GAAiBhyB,EAAAA,EAAAA,KAAY,EAAGob,UAAAA,MAChCkU,GAAgBlU,IAAc6W,EAAAA,GAAAA,WAChC7D,IAAa,KACXsD,EAAqB,CACnBnkB,KAAM2mB,GACNhC,MAAO3C,EACPtwB,OAAQg1B,SAIb,CAAC3E,EAAcoC,EAAsBnC,EAAa0E,IAE/CtB,GAAgBzwB,EAAAA,EAAAA,KAAQ,IACvBmQ,GAAakf,EAIXlf,EAAS6L,KAAKzgB,IAAO,MAC1B,MAAOwB,EAAQC,GAAazB,EAAGm1B,MAAM,KAC/Bv0B,EAAO,UAAGkzB,EAAuBtyB,UAA1B,aAAG,EAAgCyf,KAAKjR,OAAOvO,IAE5D,OAAOb,IAAW0X,EAAAA,EAAAA,IAAmB1X,GAAWA,OAAUmE,KACzDoa,OAAOpT,SARD8oB,GAAAA,GASR,CAACf,EAAwBlf,IAEtBuiB,GAAqB50B,EAAAA,EAAAA,KAAY,CAACd,EAAmBD,KACzDa,EAAa,CAAEb,OAAAA,EAAQC,UAAAA,MACtB,CAACY,IA6BEs0B,GAAoBC,EAAAA,GAAAA,GAAkB,CAAC9E,GAAc+E,EAAAA,KAA+BN,EAE1F,OACE,0BAAK3zB,UAAU,cACb,mBAACyd,GAAA,EAAD,CACEzd,UAAU,8CACV0d,MAAO4U,EACP3U,WAAYgU,EACZoB,YAAU,IAERgB,GAAqB,mBAAC5V,GAAA,EAAD,MACtB4V,KAAuB/hB,GAAgC,IAApBA,EAAS1T,SAC3C,mBAAC00B,GAAA,EAAD,CACE/vB,KAAMrD,EAAK,6BACXmqB,YAAanqB,EAAK,0CAGrBm0B,GAAqB/hB,GAAYA,EAAS1T,OAAS,GA3CjDg0B,EAAczU,KAAI,CAAC7f,EAASgd,KAAU,MAC3C,MAAMwZ,EAAkC,IAAVxZ,IACzByZ,EAAAA,EAAAA,IAAYz2B,EAAQ0C,SAAU+zB,EAAAA,EAAAA,IAAYnC,EAActX,EAAQ,GAAGta,MACxE,OACE,0BACEV,UAAU,sBACVG,IAAKnC,EAAQZ,IAEZo3B,GACC,wBAAGx0B,UAAU,oBAAmB00B,EAAAA,EAAAA,IAAmB90B,EAAM,IAAIuiB,KAAoB,IAAfnkB,EAAQ0C,QAE5E,mBAACo0B,GAAA,EAAD,CACE92B,QAASA,EACT+2B,UAAQ,EACRC,SAAUh3B,EAAQ0C,KAClBu0B,SAAO,EACPl2B,QAAQ61B,EAAAA,GAAAA,GAAch1B,EAAM5B,EAASsgB,EAAW8P,GAChDpuB,UAAU,cACVk1B,YAAaX,EACb3zB,cAAa,UAAE4yB,EAAgBx1B,EAAQY,eAA1B,aAAE,EAAiCvB,SAASW,EAAQZ,gB,eCnE7E,MAAM2wB,IAAejqB,EAAAA,EAAAA,KAAUkqB,GAAOA,KAAM,KAAK,GA2GjD,IAAertB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,IAClB00B,GAAsB,UACtB,CAAC/zB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,uBACA,eACA,qBALgBZ,EAzG4C,EAC9D+0B,MAAAA,EACAF,QAAAA,EACArE,YAAAA,EACA0E,aAAAA,EACAD,UAAAA,EACArV,UAAAA,EACA8P,UAAAA,EACA8C,uBAAAA,EACAlf,SAAAA,EACAid,aAAAA,EACAuE,gBAAAA,EACAnC,qBAAAA,EACA5xB,aAAAA,EACA01B,gBAAAA,MAEA,MAAMv1B,GAAOC,EAAAA,EAAAA,KACPyzB,EAAcC,EAAU,QAAU,QAClC5B,GAAiBhyB,EAAAA,EAAAA,KAAY,EAAGob,UAAAA,MAChCkU,GAAgBlU,IAAc6W,EAAAA,GAAAA,WAChC7D,IAAa,KACXsD,EAAqB,CACnBnkB,KAAMomB,EACNzB,MAAO3C,EACPtwB,OAAQg1B,SAIb,CAACN,EAAarE,EAAcoC,EAAsBnC,EAAa0E,IAE5DtB,GAAgBzwB,EAAAA,EAAAA,KAAQ,IACvBmQ,GAAakf,EAIXlf,EAAS6L,KAAKzgB,IAAO,MAC1B,MAAOwB,EAAQC,GAAazB,EAAGm1B,MAAM,KAErC,iBAAOrB,EAAuBtyB,UAA9B,aAAO,EAAgCyf,KAAKjR,OAAOvO,OAClD0d,OAAOpT,SAPD8oB,GAAAA,GAQR,CAACf,EAAwBlf,IAEtBuiB,GAAqB50B,EAAAA,EAAAA,KAAY,CAACd,EAAmBD,KACzDa,EAAa,CAAEb,OAAAA,EAAQC,UAAAA,MACtB,CAACY,IAEE21B,GAAkBz1B,EAAAA,EAAAA,KAAY,CAACd,EAAmBD,KACtDu2B,EAAgB,CAAEv2B,OAAAA,EAAQC,UAAAA,EAAWhD,OAAQw5B,EAAAA,GAAAA,WAC5C,CAACF,IAkCEpB,GAAoBC,EAAAA,GAAAA,GAAkB,CAAC9E,GAAc+E,EAAAA,KAA+BN,EAE1F,OACE,0BAAK3zB,UAAU,cACb,mBAACyd,GAAA,EAAD,CACEzd,UAAU,8CACV0d,MAAO4U,EACP3U,WAAYgU,EACZoB,YAAU,IAERgB,GAAqB,mBAAC5V,GAAA,EAAD,MACtB4V,KAAuB/hB,GAAgC,IAApBA,EAAS1T,SAC3C,mBAAC00B,GAAA,EAAD,CACE/vB,KAAMrD,EAAK,6BACXmqB,YAAanqB,EAAK,0CAGrBm0B,GAAqB/hB,GAAYA,EAAS1T,OAAS,GAhDjDg0B,EAAczU,KAAI,CAAC7f,EAASgd,KAAU,MAC3C,MAAMwZ,EAAkC,IAAVxZ,IACzByZ,EAAAA,EAAAA,IAAYz2B,EAAQ0C,SAAU+zB,EAAAA,EAAAA,IAAYnC,EAActX,EAAQ,GAAGta,MACxE,OACE,0BACEV,UAAU,sBACVG,IAAKnC,EAAQZ,IAEZo3B,GACC,wBAAGx0B,UAAU,kBAAkBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,IACtDuyB,EAAAA,EAAAA,IAAmB90B,EAAM,IAAIuiB,KAAoB,IAAfnkB,EAAQ0C,QAG/C,mBAAC40B,GAAA,EAAD,CACEn1B,IAAKnC,EAAQZ,GACbq2B,MAAOA,EACPz1B,QAASA,EACTnC,OAAQw5B,EAAAA,GAAAA,OACRv1B,aAAa80B,EAAAA,GAAAA,GAAch1B,EAAM5B,EAASsgB,EAAW8P,GACrD1tB,KAAM1C,EAAQ0C,KACduuB,aAAcA,EACdjvB,UAAU,cACVkM,OAAQkpB,EACRF,YAAaX,EACb3zB,cAAa,UAAE4yB,EAAgBx1B,EAAQY,eAA1B,aAAE,EAAiCvB,SAASW,EAAQZ,gBCpEvEm4B,GAAO,CACX,CAAEroB,KAAMsoB,EAAAA,GAAAA,SAA8BnV,MAAO,uBAC7C,CAAEnT,KAAMsoB,EAAAA,GAAAA,MAA2BnV,MAAO,mBAC1C,CAAEnT,KAAMsoB,EAAAA,GAAAA,MAA2BnV,MAAO,mBAC1C,CAAEnT,KAAMsoB,EAAAA,GAAAA,MAA2BnV,MAAO,mBAC1C,CAAEnT,KAAMsoB,EAAAA,GAAAA,MAA2BnV,MAAO,mBAC1C,CAAEnT,KAAMsoB,EAAAA,GAAAA,MAA2BnV,MAAO,oBAGtCoV,GAAY,CAChB,CAAEvoB,KAAMsoB,EAAAA,GAAAA,SAA8BnV,MAAO,mBAC1CkV,GAAKG,MAAM,IAGVC,GAA0B/3B,OAAOg4B,KAAKJ,EAAAA,IAAqBl3B,OAAS,EA4F1E,IAAeqC,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAM,eAAEk3B,EAAF,OAAkBj3B,GAAWD,EAAO4vB,aAE1C,MAAO,CAAEsH,eAAAA,EAAgBj3B,OAAAA,MAE3B,CAACS,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,yBAA0B,yBAN9DZ,EA1F0C,EAC5DwwB,YAAAA,EACAe,WAAAA,EACAtU,SAAAA,EACAka,eAAAA,EAAiBL,EAAAA,GAAAA,SACjB52B,OAAAA,EACAk3B,uBAAAA,EACAC,oBAAAA,EACAvH,QAAAA,MAEA,MAAM5uB,GAAOC,EAAAA,EAAAA,MACNm2B,EAAWC,IAAgB3yB,EAAAA,EAAAA,IAASuyB,GACrC1E,GAAkBtvB,EAAAA,EAAAA,KAAQ,KAAMq0B,EAAAA,EAAAA,IAAgBhH,IAAc,CAACA,IAE/DiH,GAAkBx2B,EAAAA,EAAAA,KAAaqb,IACnC,MAAMob,EAAMb,GAAKva,GACjB8a,EAAuB,CAAEO,QAASD,EAAIlpB,OACtC+oB,EAAajb,KACZ,CAAC8a,IAEEQ,GAAyB32B,EAAAA,EAAAA,KAAasN,IAC1C8oB,EAAoB,CAAEr1B,KAAMuM,EAAMwX,UAAY,QAC7C,CAACsR,KAEJja,EAAAA,EAAAA,IAAeH,EAAU6S,OAASrsB,OAAWA,GAAW,GAGxD,MAAM6a,GAAehX,EAAAA,EAAAA,IAAuB,MACtCmV,GAAgB+B,EAAAA,GAAAA,GAA0BF,EAAcrB,OAAUxZ,EAAW,oBAAoB,GAEvG,OACE,0BAAKnC,UAAU,aAAa2H,IAAKqV,EAAcK,UAAWlC,GACxD,mBAACob,GAAA,EAAD,CAASP,UAAWA,EAAWQ,KAAM53B,EAAS62B,GAAYF,GAAMkB,YAAaN,IAC7E,mBAACla,EAAA,EAAD,CACEE,KAAMvc,EAAKoc,MAAQ,iBAAmB,QACtC0a,YAAaf,GACbzZ,UAAW2Z,IAEV,KACC,OAAQA,GACN,KAAKL,EAAAA,GAAAA,SACH,OAAI52B,EAEA,mBAAC,GAAD,CACEswB,YAAaA,EACbiC,gBAAiBA,EACjB3C,QAASA,EACT4C,mBAAoBkF,IAKxB,mBAAC,GAAD,CACEpH,YAAaA,EACbe,WAAYA,EACZkB,gBAAiBA,EACjB3C,QAASA,EACT4C,mBAAoBkF,IAG1B,KAAKd,EAAAA,GAAAA,MACH,OAAO,mBAAC,GAAD,CAActG,YAAaA,IACpC,KAAKsG,EAAAA,GAAAA,MACH,OAAO,mBAAC,GAAD,CAAatG,YAAaA,IACnC,KAAKsG,EAAAA,GAAAA,MACH,OAAO,mBAAC,GAAD,CAAatG,YAAaA,IACnC,KAAKsG,EAAAA,GAAAA,MACH,OACE,mBAAC,GAAD,CACEr1B,IAAI,QACJ+uB,YAAaA,IAGnB,KAAKsG,EAAAA,GAAAA,MACH,OACE,mBAAC,GAAD,CACEr1B,IAAI,QACJozB,SAAO,EACPrE,YAAaA,IAGnB,QACE,gB,eC3Hd,MAAMyH,GAA4B,CAChCC,gBAAiB,GACjBC,SAAU,GACVC,KAAM,GACNC,MAAO,IAGHC,GAAuD,CAC3DC,EACAC,KAEA,OAAQA,EAAOhqB,MACb,IAAK,qBACH,MAAO,IACF+pB,EACHL,gBAAiBM,EAAOC,SAG5B,IAAK,cACH,MAAO,IACFF,EACHJ,SAAUK,EAAOC,SAGrB,IAAK,UACH,MAAO,IACFF,EACHH,KAAMI,EAAOC,SAGjB,IAAK,WACH,MAAO,IACFF,EACHF,MAAOG,EAAOC,SAGlB,IAAK,QACH,OAAOR,GAET,QACE,OAAOM,ICiNb,IAAet2B,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,SAClByD,GACA,CAAC9C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,UAAW,sBAF/CZ,EA5OiC,EACnD04B,cAAAA,EACAC,eAAAA,EACA7I,QAAAA,EACA8I,aAAAA,EACAC,QAAAA,EACAC,iBAAAA,EACAC,eAAAA,MAEA,MAAOC,EAAqBC,IAA0Br0B,EAAAA,EAAAA,KAAS,IACxDs0B,EAA0BC,IAA+Bv0B,EAAAA,EAAAA,KAAS,GAEnEw0B,GAA0Bn4B,EAAAA,EAAAA,KAAY,KAC1Cg4B,GAAuB,KACtB,IAEGI,GAA2Bp4B,EAAAA,EAAAA,KAAY,KAC3Cg4B,GAAuB,KACtB,IAEGK,GAA+Br4B,EAAAA,EAAAA,KAAY,KAC/Ck4B,GAA4B,KAC3B,IAEGI,GAAgCt4B,EAAAA,EAAAA,KAAY,KAChDk4B,GAA4B,KAC3B,IAEGK,GAAuBv4B,EAAAA,EAAAA,KAAY,KACvCo4B,IACAR,MACC,CAACQ,EAA0BR,IAExBY,GAA4Bx4B,EAAAA,EAAAA,KAAY,KAC5Cs4B,IACAT,EAAiB,CAAEp6B,GAAIi6B,IACvB7I,MACC,CAAC6I,EAAgBY,EAA+BT,EAAkBhJ,IAE/D4J,GAAsEv2B,EAAAA,EAAAA,KAAQ,IAC3E,EAAGC,UAAAA,EAAWC,OAAAA,KACnB,mBAACC,EAAA,EAAD,CACEC,OAAK,EACL4F,QAASxF,EAAAA,GACTjC,KAAK,UACL8B,MAAM,cACNlC,UAAW+B,EAAS,SAAW,GAC/B9B,QAAS6B,EACTM,UAAU,gBAEV,wBAAGpC,UAAU,gBAGhB,IAEGJ,GAAOC,EAAAA,EAAAA,KAqJb,OACE,0BAAKG,UAAU,eACb,mBAACgC,EAAA,EAAD,CACEC,OAAK,EACL7B,KAAK,UACL8B,MAAM,cACNjC,QAASuuB,EACTpsB,UAAWxC,EAAK,mBAEhB,wBAAGI,UAAU,qBA5JnB,WACE,OAAQo3B,GACN,KAAKiB,EAAAA,GAAAA,YACH,OAAO,6BAAKz4B,EAAK,6BACnB,KAAKy4B,EAAAA,GAAAA,QACH,OAAO,6BAAKz4B,EAAK,YACnB,KAAKy4B,EAAAA,GAAAA,cACH,OAAO,6BAAKz4B,EAAK,kBACnB,KAAKy4B,EAAAA,GAAAA,QACH,OAAO,6BAAKz4B,EAAK,oBACnB,KAAKy4B,EAAAA,GAAAA,SACH,OAAO,6BAAKz4B,EAAK,aAEnB,KAAKy4B,EAAAA,GAAAA,sBACH,OAAO,6BAAKz4B,EAAK,mBACnB,KAAKy4B,EAAAA,GAAAA,2BACH,OAAO,6BAAKz4B,EAAK,aAEnB,KAAKy4B,EAAAA,GAAAA,mBACH,OAAO,6BAAKz4B,EAAK,iBACnB,KAAKy4B,EAAAA,GAAAA,gBACH,OAAO,6BAAKz4B,EAAK,oBACnB,KAAKy4B,EAAAA,GAAAA,oBACH,OAAO,6BAAKz4B,EAAK,yBACnB,KAAKy4B,EAAAA,GAAAA,kBACH,OAAO,6BAAKz4B,EAAK,oBACnB,KAAKy4B,EAAAA,GAAAA,kBACH,OAAO,6BAAKz4B,EAAK,2BACnB,KAAKy4B,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,iCACH,OAAO,6BAAKz4B,EAAK,oBACnB,KAAKy4B,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,gCACH,OAAO,6BAAKz4B,EAAK,mBAEnB,KAAKy4B,EAAAA,GAAAA,sBACH,OAAO,6BAAKz4B,EAAK,kBACnB,KAAKy4B,EAAAA,GAAAA,oBACH,OAAO,6BAAKz4B,EAAK,iBAEnB,KAAKy4B,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,aACH,OAAO,6BAAKz4B,EAAK,wBACnB,KAAKy4B,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,uBACL,KAAKA,EAAAA,GAAAA,2BACH,OAAO,6BAAKz4B,EAAK,+BACnB,KAAKy4B,EAAAA,GAAAA,wBACH,OAAO,6BAAKz4B,EAAK,0BACnB,KAAKy4B,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,wBACH,OAAO,6BAAKz4B,EAAK,iBACnB,KAAKy4B,EAAAA,GAAAA,sBACL,KAAKA,EAAAA,GAAAA,mBACH,OAAO,6BAAKz4B,EAAK,uBACnB,KAAKy4B,EAAAA,GAAAA,0BACL,KAAKA,EAAAA,GAAAA,uBACH,OAAO,oDACT,KAAKA,EAAAA,GAAAA,qBACH,OAAO,6BAAKz4B,EAAK,mCACnB,KAAKy4B,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,kCACH,OAAO,6BAAKz4B,EAAK,+BAEnB,KAAKy4B,EAAAA,GAAAA,QACH,OAAO,6BAAKz4B,EAAK,YACnB,KAAKy4B,EAAAA,GAAAA,oBACH,OAAO,6BAAKz4B,EAAK,cACnB,KAAKy4B,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,8BACH,OACE,0BAAKr4B,UAAU,wBACb,6BAAKJ,EAAK,eAETy3B,GACC,mBAAC/0B,EAAA,EAAD,CACEtC,UAAU,qBACVuC,QAAS61B,EACT51B,UAAU,SAEV,mBAACC,EAAA,EAAD,CAAUC,KAAK,SAAS6pB,aAAW,EAACtsB,QAAS+3B,GAC1Cp4B,EAAK,aAMlB,KAAKy4B,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACH,OACE,0BAAKr4B,UAAU,wBACXo3B,IAAkBiB,EAAAA,GAAAA,sBACfjB,IAAkBiB,EAAAA,GAAAA,iCACnB,6BAAKz4B,EAAK,kBAEV,6BAAKA,EAAK,kBAGd,mBAACoC,EAAA,EAAD,CACEC,OAAK,EACL7B,KAAK,UACL8B,MAAM,cACNlC,UAAU,gBACVC,QAASq3B,EACTl1B,UAAWxC,EAAK,sBAEhB,wBAAGI,UAAU,iBAKrB,QACE,OACE,0BAAKA,UAAU,wBACb,6BAAKJ,EAAK,aAEV,mBAACoC,EAAA,EAAD,CACEC,OAAK,EACL4F,QAASxF,EAAAA,GACTjC,KAAK,UACL8B,MAAM,cACNjC,QAAS,IAAMw3B,EAAeY,EAAAA,GAAAA,aAC9Bj2B,UAAWxC,EAAK,6BAEhB,wBAAGI,UAAU,eAEf,mBAACsC,EAAA,EAAD,CACEtC,UAAU,qBACVuC,QAAS61B,EACT51B,UAAU,SAEV,mBAACC,EAAA,EAAD,CAAUC,KAAK,SAASzC,QAAS63B,GAA0Bl4B,EAAK,mBAkBvE04B,GACD,mBAAC9W,GAAA,EAAD,CACEzf,OAAQ21B,EACRnvB,QAASwvB,EACT90B,KAAMrD,EAAK,mBACX6hB,aAAc7hB,EAAK,0BACnB8hB,eAAgBwW,EAChBK,sBAAoB,IAEtB,mBAAC/W,GAAA,EAAD,CACEzf,OAAQ61B,EACRrvB,QAAS0vB,EACTh1B,KAAMrD,EAAK,qBACX6hB,aAAc7hB,EAAK,UACnB8hB,eAAgByW,EAChBI,sBAAoB,S,wBCpO5B,MAqEA,IAAe53B,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAM,cAAEyd,EAAF,aAAiB6S,GAAiBtwB,EAExC,MAAO,CACL65B,YAAapc,GAAgBnd,EAAAA,EAAAA,IAAWN,EAAQyd,QAAiBja,EACjE8sB,aAAAA,MAGJ,CAAC5vB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,uBATpCZ,EArE4C,EAC9Did,SAAAA,EACA8b,eAAAA,EACAjJ,QAAAA,EACAiK,kBAAAA,EACAD,YAAAA,EACAvJ,aAAAA,MAEA,MAAMrvB,GAAOC,EAAAA,EAAAA,KACP64B,EAAYF,MAAAA,OAAH,EAAGA,EAAap7B,GAU/B,OARAmG,EAAAA,EAAAA,KAAU,KACJm1B,GAAazJ,GACfwJ,EAAkB,CAAEC,UAAAA,MAErB,CAACzJ,EAAcyJ,EAAWD,KAE7B3c,EAAAA,EAAAA,IAAeH,EAAU6S,EAASiJ,EAAgBY,EAAAA,GAAAA,MAGhD,0BAAKr4B,UAAU,kCACb,0BAAKA,UAAU,sBACZw4B,GACC,mBAACG,GAAA,EAAD,CACE1a,OAAQua,EAAYp7B,GACpBw7B,eAAa,IAGhBJ,GACC,mBAACK,GAAA,EAAD,CACE3F,aAAcsF,EAAYp7B,GAC1Bw7B,eAAa,IAGjB,mBAAC9a,GAAA,EAAD,CACEpb,KAAK,WACLzC,QAAS,IAAMw3B,EAAeY,EAAAA,GAAAA,UAE7Bz4B,EAAK,2CAER,mBAACke,GAAA,EAAD,CACEpb,KAAK,SACLzC,QAAS,IAAMw3B,EAAeY,EAAAA,GAAAA,gBAE7Bz4B,EAAK,kBAER,mBAACke,GAAA,EAAD,CACEpb,KAAK,OACLzC,QAAS,IAAMw3B,EAAeY,EAAAA,GAAAA,UAE7Bz4B,EAAK,oBAER,mBAACke,GAAA,EAAD,CACEpb,KAAK,SACLzC,QAAS,IAAMw3B,EAAeY,EAAAA,GAAAA,UAE7Bz4B,EAAK,YAER,mBAACke,GAAA,EAAD,CACEpb,KAAK,WACLzC,QAAS,IAAMw3B,EAAeY,EAAAA,GAAAA,WAE7Bz4B,EAAK,mB,yBCxEhB,MAEMk5B,GAAc,gBACdC,GAAoB,sBACpBC,GAAiB,oBAEjBC,IAA+BC,EAAAA,EAAAA,KAAUlL,GAAOA,KAAM,KAAK,GAkFjE,IAAertB,EAAAA,EAAAA,KA1E2B,EACxCw4B,gBAAAA,EACAC,OAAAA,EACAzF,UAAAA,EACA0F,oBAAAA,EACAC,cAAAA,EACAnsB,SAAAA,MAEA,MAAOklB,EAAUkH,IAAej2B,EAAAA,EAAAA,IAAS61B,GAAmB,IAEtDv5B,GAAOC,EAAAA,EAAAA,KACP25B,EAAaJ,EAAS,SAAW,WACjC9O,EAAiB1qB,EAATw5B,EAAc,oBAA4B,aAEjDK,EAAiBC,IAAiB73B,EAAAA,EAAAA,KAAQ,IAC1CwwB,EAAS/zB,OAIV+zB,EAAS/zB,OAjCW,EAkCf,MAAC6D,EAAY,GAAEmoB,kBAEpB+H,EAAS/zB,OAnCW,GAoCf,MAAC6D,EAAY,GAAEmoB,iBAEnB0O,GAAeW,KAAKtH,QAIGlwB,IAAxBk3B,EACK,GAIF,CACLA,EAAsBz5B,EAAM,GAAE45B,aAAuB,iBAAcr3B,GAC3C,IAAxBk3B,EAAgCz5B,EAAM,GAAE45B,eAAqBr3B,GAVtD,MAACA,EAAY,GAAEmoB,iCAVf,IAsBR,CAAC+H,EAAUgH,EAAqBz5B,EAAM45B,EAAYlP,KAErD/mB,EAAAA,EAAAA,KAAU,KACRg2B,EAAYJ,GAAmB,MAC9B,CAACC,EAAQD,IAEZ,MAAMS,GAAuBj6B,EAAAA,EAAAA,KAAayE,IACxC,MAAMy1B,EAAcz1B,EAAEiJ,OAAOJ,MAAM6sB,OAAOnU,QAAQoT,GAAmB,IACrEQ,EAAYM,GACZz1B,EAAEiJ,OAAOJ,MAAS,GAAEmsB,EAASN,GAAc,KAAKe,IAEhD,MAAME,EAvDV,SAAyB1H,GACvB,OAAOA,EAAS/zB,QATU,GAUrB+zB,EAAS/zB,QATY,IAUrB06B,GAAeW,KAAKtH,GAoDP2H,CAAgBH,GAE5BE,GACFd,IAA6B,KAC3BK,EAAc,CAAEjH,SAAUwH,OAI1B1sB,GACFA,IAAS4sB,GAAUF,KAEpB,CAACT,EAAQE,EAAensB,IAE3B,OACE,mBAACiQ,GAAA,EAAD,CACEnQ,MAAQ,GAAEmsB,EAASN,GAAc,KAAKzG,IACtCllB,SAAUysB,EACVtP,MAAOA,EACP1K,MAAO8Z,EACPO,QAASR,EACTS,SAAUvG,OCzDV5F,IAAejqB,EAAAA,EAAAA,KAAUkqB,GAAOA,KAAM,KAAO,GAI7CmM,GAA2B,iCAC3BC,GAAqB,wCA8M3B,IAAez5B,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAM,cAAEyd,GAAkBzd,GACpB,SAAEoE,EAAF,oBAAYs2B,GAAwB16B,EAAO07B,aAAe,GAC1D7B,EAAcpc,GAAgBnd,EAAAA,EAAAA,IAAWN,EAAQyd,QAAiBja,EAExE,IAAKq2B,EACH,MAAO,CACLz1B,SAAAA,EACAs2B,oBAAAA,GAIJ,MACEiB,UAAWC,EACXC,SAAUC,EACVpI,SAAU8G,EAHN,SAIJuB,GACElC,GACImC,IAAKC,GAAeF,GAAY,GAGxC,MAAO,CACLG,mBAHwBpmB,EAAAA,EAAAA,IAAkB+jB,GAI1C+B,iBAAAA,EACAE,gBAAAA,EACAG,WAAAA,EACAzB,gBAAAA,EACAp2B,SAAAA,EACAs2B,oBAAAA,MAGJ,CAACh6B,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,kBACA,gBACA,mBAnCgBZ,EA5MmD,EACrEid,SAAAA,EACA8b,eAAAA,EACAjJ,QAAAA,EACAqM,kBAAAA,EACAN,iBAAAA,EACAE,gBAAAA,EACAG,WAAAA,EACAzB,gBAAAA,EACAp2B,SAAAA,EACAs2B,oBAAAA,EACAyB,gBAAAA,EACAC,cAAAA,EACAzB,cAAAA,MAEA,MAAM15B,GAAOC,EAAAA,EAAAA,MAENm7B,EAAmBC,IAAwB33B,EAAAA,EAAAA,KAAS,IACpD43B,EAAwBC,IAA6B73B,EAAAA,EAAAA,KAAS,IAC9Dsc,EAAOwb,IAAY93B,EAAAA,EAAAA,OAEnBiP,EAAO8oB,IAAY/3B,EAAAA,EAAAA,OACnBg3B,EAAWgB,IAAgBh4B,EAAAA,EAAAA,IAASi3B,GAAoB,KACxDC,EAAUe,IAAej4B,EAAAA,EAAAA,IAASm3B,GAAmB,KACrDE,EAAKa,IAAUl4B,EAAAA,EAAAA,IAASs3B,GAAc,KACtCvI,EAAUkH,IAAej2B,EAAAA,EAAAA,IAAyB61B,GAAmB,IAEtEsC,GAAuB9mB,EAAAA,EAAAA,GAASkmB,GAAmB,EAAOjmB,EAAAA,GAAAA,SAE1D+e,EAAY5wB,IAAa24B,EAAAA,GAAAA,WACzBC,GAA+B,IAAbtJ,EAElBuJ,GAAoB/5B,EAAAA,EAAAA,KAAQ,KAC5B85B,IAIGxyB,QAAQoJ,IAAU2oB,IAAkD,IAAxB7B,IAClD,CAAC9mB,EAAO2oB,EAAwBS,EAAiBtC,KAEpDvd,EAAAA,EAAAA,IAAeH,EAAU6S,EAASiJ,EAAgBY,EAAAA,GAAAA,cAIlD90B,EAAAA,EAAAA,KAAU,KACRwqB,IAAa,KACX+M,SAED,CAACA,KAEJv3B,EAAAA,EAAAA,KAAU,KACR83B,OAASl5B,KACR,CAACs5B,KAEJl4B,EAAAA,EAAAA,KAAU,KACR+3B,EAAaf,GAAoB,IACjCgB,EAAYd,GAAmB,IAC/Be,EAAOZ,GAAc,MACpB,CAACL,EAAkBE,EAAiBG,KAEvCr3B,EAAAA,EAAAA,KAAU,KACRg2B,EAAYJ,GAAmB,MAC9B,CAACA,KAEJ51B,EAAAA,EAAAA,KAAU,KACJR,IAAa24B,EAAAA,GAAAA,WACfP,GAA0B,GAC1BF,GAAqB,GACrBG,OAASj5B,MAEV,CAACY,IAEJ,MAAM84B,GAAoBl8B,EAAAA,EAAAA,KAAam8B,IACrCT,EAASS,KACR,IAEGC,GAAwBp8B,EAAAA,EAAAA,KAAayE,IACzCk3B,EAAal3B,EAAEiJ,OAAOJ,OACtBkuB,GAA0B,KACzB,IAEGa,GAAuBr8B,EAAAA,EAAAA,KAAayE,IACxCm3B,EAAYn3B,EAAEiJ,OAAOJ,OACrBkuB,GAA0B,KACzB,IAEGc,GAAkBt8B,EAAAA,EAAAA,KAAayE,IACnCo3B,EAAOp3B,EAAEiJ,OAAOJ,OAChBkuB,GAA0B,KACzB,IAEGvB,GAAuBj6B,EAAAA,EAAAA,KAAasN,IACxCssB,EAAYtsB,GACZguB,GAAqB,KACpB,IAEGiB,GAAoBv8B,EAAAA,EAAAA,KAAY,KACpC,MAAMw8B,EAAmB7B,EAAUR,OAC7BsC,EAAkB5B,EAASV,OAC3BuC,EAAa1B,EAAIb,OAElBqC,EAAiB79B,OAKlB+9B,EAAW/9B,OA/GI,GAgHjB88B,EAAShB,IAIXW,EAAc,CACZxoB,MAAAA,KACI2oB,GAA0B,CAC5BZ,UAAW6B,EACX3B,SAAU4B,EACVzB,IAAK0B,MAEHrB,GAAqB,CACvB3I,SAAAA,KAjBF+I,EAASjB,MAoBV,CACD5nB,EACA+nB,EAAWE,EAAUG,EAAKO,EAC1B7I,EAAU2I,EACVD,IAGF,OACE,0BAAK/6B,UAAU,wBACb,0BAAKA,UAAU,kCACb,0BAAKA,UAAU,yBACb,mBAACs8B,GAAA,EAAD,CACEb,qBAAsBA,EACtBtuB,SAAU0uB,EACVxb,MAAM,0BACNtT,SAAU4mB,IAEZ,mBAACvW,GAAA,EAAD,CACEnQ,MAAOqtB,EACPntB,SAAU4uB,EACVzR,MAAO1qB,EAAK,aACZmN,SAAU4mB,EACV/T,MAAOA,IAAUua,GAA2Bva,OAAQzd,IAEtD,mBAACib,GAAA,EAAD,CACEnQ,MAAOutB,EACPrtB,SAAU6uB,EACV1R,MAAO1qB,EAAK,YACZmN,SAAU4mB,IAEZ,mBAACvW,GAAA,EAAD,CACEnQ,MAAO0tB,EACPxtB,SAAU8uB,EACV3R,MAAO1qB,EAAK,WACZmN,SAAU4mB,EACV/T,MAAOA,IAAUwa,GAAqBxa,OAAQzd,IAGhD,wBAAGnC,UAAU,4BAA4BO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,IAChE3B,EAAAA,EAAAA,GAAWZ,EAAK,0BAA2B,CAAC,KAAM,sBAIvD,0BAAKI,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAAYvC,EAAK,aAEhF,mBAAC28B,GAAD,CACEpD,gBAAiB9G,GAAY,GAC7BsB,UAAWA,EACX0F,oBAAqBA,EACrBC,cAAeA,EACfnsB,SAAUysB,IAGZ,wBAAG55B,UAAU,4BAA4BO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,IAChE3B,EAAAA,EAAAA,GAAWZ,EAAK,gBAAiB,CAAC,KAAM,qBAE1CyyB,GACC,wBAAGryB,UAAU,4BAA4BO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAChEvC,EAAK,qBAAqB,8BAC3B,2BAAMI,UAAU,iBAAhB,gBAA8CqyB,MAMtD,mBAACmK,GAAA,EAAD,CACEhwB,QAASovB,EACT37B,QAASi8B,EACTnvB,SAAU4mB,EACVvxB,UAAU,gBAETuxB,EACC,mBAAC9iB,EAAA,EAAD,CAAS3O,MAAM,UAEf,wBAAGlC,UAAU,qB,0BC9MvB,MAAMy8B,IAAiC34B,EAAAA,EAAAA,KAAUkqB,GAAOA,KAAM,KAAO,GAyLrE,IAAertB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MACEyf,OAASC,KAAMC,GACf+P,OAAShQ,KAAM+P,IACbzvB,GAGF+9B,WAAYC,EACZte,KAAMue,EACNC,YAAaC,GACXn+B,EAAOo+B,YAEX,MAAO,CACLze,UAAAA,EACA8P,UAAAA,EACAuO,iBAAAA,EACAC,YAAAA,EACAE,uBAAAA,EACAE,gBAAgB/P,EAAAA,EAAAA,IAAqBtuB,GACrCs+B,kBAAkB/P,EAAAA,EAAAA,IAAuBvuB,OAG7C,CAACU,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,6BAA8B,gBAAiB,gBAvBnFZ,EArLmD,EACrEw+B,eAAAA,EACAC,aAAAA,EACAxhB,SAAAA,EACA8b,eAAAA,EACAjJ,QAAAA,EACAlQ,UAAAA,EACA8P,UAAAA,EACAuO,iBAAAA,EACAC,YAAAA,EACAE,uBAAAA,EACAE,eAAAA,EACAC,iBAAAA,EACAG,2BAAAA,EACAC,cAAAA,EACAC,WAAAA,MAEA,MAAOC,EAAeC,IAAoBl6B,EAAAA,EAAAA,OACnCm6B,EAAmBC,IAAwBp6B,EAAAA,EAAAA,KAAS,GACrDq6B,GAAsBh+B,EAAAA,EAAAA,KAAY,IAAM+9B,GAAqB,IAAO,KAE1En6B,EAAAA,EAAAA,KAAU,KACHg6B,IACHK,EAAAA,GAAAA,GAAiB,cAAcC,KAAKL,KAErC,CAACD,KAIJh6B,EAAAA,EAAAA,KAAU,KACRk5B,IAA+B,KAC7BW,SAED,CAACA,IAEJ,MAAMU,GAAqBn+B,EAAAA,EAAAA,KAAY,KACjC/B,OAAOg4B,KAAKgH,GAAat+B,QAtCL,GAuCtBg/B,EAAW,CACTS,KAAM,CACJ//B,QAAS,0BACT8hB,aAAa,KAOnBod,MACC,CAACN,EAAaU,EAAYJ,IAEvBt9B,GAAOC,EAAAA,EAAAA,MAEbic,EAAAA,EAAAA,IAAeH,EAAU6S,EAASiJ,EAAgBY,EAAAA,GAAAA,SAElD,MAAM2F,GAAcn8B,EAAAA,EAAAA,KAAQ,KAC1B,IAAK86B,EACH,OAGF,MAAMzd,EAAUthB,OAAOg4B,KAAKtX,GAE5B,OAAOqe,EAAiB9e,KAAKzgB,IAC3B,MAAM6gC,EAASrB,EAAYx/B,GAE3B,MAAO,CACLA,GAAI6gC,EAAO7gC,GACXijB,MAAO4d,EAAO5d,MACd6d,UAAUC,EAAAA,EAAAA,IACRv+B,EAAM0e,EAAW8P,EAAW6P,EAAQ/e,EAAS8d,EAAgBC,SAIlE,CAACN,EAAkBre,EAAWse,EAAaxO,EAAW4O,EAAgBC,EAAkBr9B,IAErFw+B,GAAoCz+B,EAAAA,EAAAA,KAAas+B,IACjDrgC,OAAOg4B,KAAKgH,GAAat+B,QA7EL,GA8EtBg/B,EAAW,CACTS,KAAM,CACJ//B,QAAS,0BACT8hB,aAAa,KAOnBud,EAAc,CAAEY,OAAAA,MACf,CAACrB,EAAaS,EAAeC,IAEhC,OACE,0BAAKt9B,UAAU,kCACb,0BAAKA,UAAU,2BACb,0BAAKA,UAAU,yBACZu9B,GACC,mBAACc,GAAA,EAAD,CACEjhC,GAAG,sBACHgD,KAAMk+B,EAAAA,GACNf,cAAeA,EACfgB,KAAMd,EACNe,QAAM,EACNC,OAAQd,KAKd,wBAAG39B,UAAU,iCAAiCO,IAAI,QAC/CX,EAAK,wBAGR,mBAACoC,EAAA,EAAD,CAEEhC,UAAU,iBACVkC,MAAM,UACN9B,KAAK,UACLs+B,MAAI,EACJC,OAAK,EACL1+B,QAAS69B,EACT9hB,MAAOpc,EAAKoc,OAEZ,wBAAGhc,UAAU,aACZJ,EAAK,qBAIV,0BAAKI,UAAU,sBACb,yBAAIA,UAAU,4BAA4BO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAAYvC,EAAK,YAEpFo+B,MAAAA,GAAAA,EAAa1/B,OAAS0/B,EAAYngB,KAAKogB,GACtC,mBAACngB,GAAA,EAAD,CACE9d,UAAU,eACV4+B,QAAM,EACNC,WAAS,EACT5+B,QAAS,IAAMk9B,EAAaP,EAAYqB,EAAO7gC,MAE/C,2BAAM4C,UAAU,SAASi+B,EAAO5d,OAChC,2BAAMrgB,UAAU,YAAYi+B,EAAOC,aAElCF,IAAgBA,EAAY1/B,OAC/B,wBAAG0B,UAAU,iCAAiCO,IAAI,QAAlD,4BAGE,mBAAC4d,GAAA,EAAD,OAGJ2e,KAA4BA,EAAuBx+B,QACnD,0BAAK0B,UAAU,sBACb,yBAAIA,UAAU,4BAA4BO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GACjEvC,EAAK,sBAGPk9B,EAAuBjf,KAAKogB,GAC3B,mBAACngB,GAAA,EAAD,CACE9d,UAAU,OACV4+B,QAAM,EACN3+B,QAAS,IAAMm+B,EAAkCH,IAEjD,0BAAKj+B,UAAU,qCACb,0BAAKA,UAAU,kBACb,2BAAMA,UAAU,SAASi+B,EAAO5d,OAChC,2BAAMrgB,UAAU,YAAYi+B,EAAOlU,cAGrC,mBAAC/nB,EAAA,EAAD,CACEhC,UAAU,OACVkC,MAAM,UACN9B,KAAK,OACLs+B,MAAI,EACJC,OAAK,EACL3iB,MAAOpc,EAAKoc,OAEXpc,EAAK,kB,eCzMxB,MAyBA,GAzBqC,EACnCk/B,MAAAA,EACAC,SAAAA,EACAC,eAAAA,EACArL,UAAAA,EACA1zB,QAAAA,MAEA,MAAML,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAACmC,EAAA,EAAD,CACEhC,UAAU,iBACVkC,MAAM,cACN9B,KAAK,UACLsgB,QAAM,EACNiT,UAAWA,EACX3X,MAAOpc,EAAKoc,MACZ/b,QAASA,GAET,wBAAGD,UAAU,cATf,QAUQ8+B,EAVR,SAUqBA,EAAQ,EAAIE,GAAmB,GAAED,KAAcA,ICiBlEE,GAAiB,0CACjBC,GAAiB,8BAqQvB,IAAev+B,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAM,QAAE4f,GAAY5f,EAAOyf,MAE3B,MAAO,CACL+gB,oBAAqB5gB,EAAQG,OAC7B0gB,sBAAuB7gB,EAAQM,aAGnC,CAACxf,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,iBAAkB,gBAAiB,mBATvEZ,EAnQmD,EACrEu4B,MAAAA,EACAoI,SAAAA,EACAC,mBAAAA,EACAC,mBAAAA,EACA5jB,SAAAA,EACA8b,eAAAA,EACAjJ,QAAAA,EACAgR,OAAAA,EACAL,oBAAAA,EACAC,sBAAAA,EACAK,eAAAA,EACApC,cAAAA,EACAre,cAAAA,MAEA,MAAOue,EAAeC,IAAoBl6B,EAAAA,EAAAA,OACnCm6B,EAAmBC,IAAwBp6B,EAAAA,EAAAA,KAAS,GACrDq6B,GAAsBh+B,EAAAA,EAAAA,KAAY,IAAM+9B,GAAqB,IAAO,KAEnEgC,EAA6BC,IAAkCr8B,EAAAA,EAAAA,KAAS,IACxEs8B,EAA6BC,IAAkCv8B,EAAAA,EAAAA,KAAS,IAG7Ew8B,gBAAiBC,EACjBC,kBAAmBC,IACjBC,EAAAA,GAAAA,IAAkBjJ,EAAO,aAE3B6I,gBAAiBK,EACjBH,kBAAmBI,IACjBF,EAAAA,GAAAA,IAAkBjJ,EAAO,aAE7B1zB,EAAAA,EAAAA,KAAU,KACHg6B,IACHK,EAAAA,GAAAA,GAAiB,cAAcC,KAAKL,KAErC,CAACD,KAEJh6B,EAAAA,EAAAA,KAAU,KACRo8B,GAA+B,GAC/BE,GAA+B,KAC9B,CAAC5I,EAAMoJ,WAEV,MAAOC,EAAwBC,IAA0B1+B,EAAAA,EAAAA,KAAQ,KAC/D,MAAM2+B,EAAoB,IAAIC,IAAI,IAC5BtB,GAAuB,MACvBC,GAAyB,KAGzBsB,GAAwBC,EAAAA,EAAAA,IAAwBZ,EAAiBS,GACjEI,GAAwBD,EAAAA,EAAAA,IAAwBR,EAAiBK,GAEvE,MAAO,CACLd,EACIgB,EACAA,EAAsBhL,MAAM,EA3DV,EA2DmCuK,EAAkB3hC,QAC3EshC,EACIgB,EACAA,EAAsBlL,MAAM,EA9DV,EA8DmC0K,EAAkB9hC,WAE5E,CACD6hC,EAAiBJ,EAAiBE,EAAmBG,EACrDR,EAA6BF,EAC7BP,EAAqBC,KAGvB77B,EAAAA,EAAAA,KAAU,MAEN+8B,EAAuBhiC,OAASyhC,EAAgBzhC,QAC7CiiC,EAAuBjiC,OAAS6hC,EAAgB7hC,SAEnD0gB,EAAc,CAAE6hB,SAAU,aAE3B,CACD7hB,EACAmhB,EAAgB7hC,OAChByhC,EAAgBzhC,OAChBiiC,EAAuBjiC,OACvBgiC,EAAuBhiC,SAGzB,MAAMsB,GAAOC,EAAAA,EAAAA,KA0Db,SAASihC,EAAYC,GACnB,MAAMf,EAA6B,aAATe,EAAsBd,EAAoBG,EAC9DY,EAA0B,aAATD,EAAsBT,EAAyBC,EAEhEU,EAAsB,aAATF,EAAsBrB,EAA8BE,EAEjEsB,GADsB,aAATH,EAAsBhB,EAAkBI,GACzB7hC,OAAS0hC,EAAkB1hC,OAAS0iC,EAAe1iC,OAC/E6iC,EAAwB,aAATJ,EACjB,IAAMpB,GAA+B,GACrC,IAAME,GAA+B,GAEzC,OACE,sCACGG,EAAkBniB,KAAK1d,GAnC9B,SAAwBA,EAAa4gC,GACnC,MAAMK,EAAoB,aAATL,EACbM,GAAAA,GAAAA,MAAyB,EAAGlhC,IAAKmhC,KAAcA,IAAYnhC,IAC3DohC,GAAAA,GAAAA,MAAyB,EAAGphC,IAAKmhC,KAAcA,IAAYnhC,IAE/D,GAAKihC,EAIL,OACE,mBAACtjB,GAAA,EAAD,CACE3d,IAAKihC,EAASjhC,IACdH,UAAU,kCACV0C,KAAM0+B,EAAS1+B,KACfk8B,QAAM,EACN4C,UAAQ,GAEP5hC,EAAKwhC,EAAS/gB,QAkBiBohB,CAAethC,EAAK4gC,KACnDC,EAAenjB,KAAKzgB,GACnB,mBAAC0gB,GAAA,EAAD,CACE9d,UAAU,kCACV4+B,QAAM,EACN4C,UAAQ,IAEPxiC,EAAAA,EAAAA,IAAS5B,GACR,mBAAC2gB,GAAA,EAAD,CAAiB8P,WAAW,QAAQ5P,OAAQ7gB,IAE5C,mBAAC8gB,GAAA,EAAD,CAAe2P,WAAW,QAAQjvB,OAAQxB,QAI7C6jC,GAAcC,EAAiB,GAChC,mBAAC,GAAD,CACEpC,MAAOoC,EACPnC,SAAS,OACT9+B,QAASkhC,KAOnB,OA9FArlB,EAAAA,EAAAA,IAAeH,EAAU6jB,EAAQ/H,EAA+B,SAAfR,EAAM8J,KACnD1I,EAAAA,GAAAA,kBACAA,EAAAA,GAAAA,qBA6FF,0BAAKr4B,UAAU,wBACb,0BAAKA,UAAU,kCACb,0BAAKA,UAAU,2BACb,0BAAKA,UAAU,yBACZu9B,GACC,mBAACc,GAAA,EAAD,CACEjhC,GAAG,sBACHgD,KAAMk+B,EAAAA,GACNf,cAAeA,EACfgB,KAAMd,GAAqB/a,OAAOuU,EAAMoJ,UACxC7B,QAAM,EACNC,OAAQd,KAKE,WAAf1G,EAAM8J,MACL,wBAAG/gC,UAAU,iCAAiCO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GACrEvC,EAAK,sBAIV,mBAACwd,GAAA,EAAD,CACEpd,UAAU,OACVsqB,MAAO1qB,EAAK,kBACZqN,MAAOgqB,EAAMgH,OAAO5d,MACpBlT,SArHV,SAAsBu0B,GACpB,MAAM,cAAEv2B,GAAkBu2B,EAC1BrC,EAAS,CAAEnyB,KAAM,WAAYiqB,QAAShsB,EAAc8B,MAAM6sB,UAoHlDla,MAAOqX,EAAMrX,OAASqX,EAAMrX,QAAUqf,GAAiBA,QAAiB98B,KAI5E,0BAAKnC,UAAU,gCACZi3B,EAAMrX,OAASqX,EAAMrX,QAAUsf,IAC9B,wBAAGl/B,UAAU,8CAA8CO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAClFvC,EAAKq3B,EAAMrX,QAIhB,yBAAI5f,UAAU,4BAA4BO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAAYvC,EAAK,kBAErF,mBAACke,GAAA,EAAD,CACE9d,UAAU,gDACV0C,KAAK,MACLzC,QAASq/B,GAER1/B,EAAK,mBAGPkhC,EAAY,aAGf,0BAAK9gC,UAAU,gCACb,yBAAIA,UAAU,4BAA4BO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAAYvC,EAAK,kBAErF,mBAACke,GAAA,EAAD,CACE9d,UAAU,gDACV0C,KAAK,MACLzC,QAASs/B,GAER3/B,EAAK,mBAGPkhC,EAAY,cAIjB,mBAACtE,GAAA,EAAD,CACEhwB,UAAWyqB,EAAM0K,UACjB50B,SAAUkqB,EAAMtD,UAChB1zB,QA3JN,WACE,MAAM,MAAEogB,GAAU4W,EAAMgH,OAEnB5d,EAKA0f,EAAgBzhC,QAAWV,OAAOg4B,KAAKqK,GAAmB3hC,QAK/D+gC,EAAS,CAAEnyB,KAAM,eAAgBiqB,SAAS,IACvB,SAAfF,EAAM8J,KACRtB,EAAe,CAAEriC,GAAI65B,EAAMoJ,SAAUuB,aAAc3K,EAAMgH,SAEzDZ,EAAc,CAAEY,OAAQhH,EAAMgH,SAGhC93B,YAAW,KACTqoB,MAvHiB,MA2GjB6Q,EAAS,CAAEnyB,KAAM,WAAYiqB,QAAS+H,KALtCG,EAAS,CAAEnyB,KAAM,WAAYiqB,QAAS8H,MAwJpC78B,UAA0B,SAAf60B,EAAM8J,KAAkB,eAAiB,iBAEnD9J,EAAMtD,UACL,mBAAC9iB,EAAA,EAAD,CAAS3O,MAAM,UAEf,wBAAGlC,UAAU,qB,eC9QvB,MAmLA,IAAeW,EAAAA,EAAAA,KA7KkC,EAC/CogC,KAAAA,EACA7hB,QAAAA,EACA2iB,YAAAA,EACA7B,kBAAAA,EACA8B,YAAAA,EACAC,oBAAAA,EACAC,0BAAAA,EACAvlB,eAAAA,EACAkB,WAAAA,MAGA,MAAM/Q,GAAW5G,EAAAA,EAAAA,IAAyB,MACpCi8B,EAAqB,aAATlB,EAAsBM,GAAAA,GAAsBE,GAAAA,GACxDW,EAAiBL,EAAYvjC,OAAS0hC,EAAkB1hC,OAjBzC,GAkBf6jC,EAAcN,EAAYvjC,QAnBhB,KAqBhBiF,EAAAA,EAAAA,KAAU,KACR4C,YAAW,KACT0S,uBAAsB,KACpBjM,EAASpG,QAAS47B,aA1BH,OA6BlB,IAEH,MAAMC,GAAkB1iC,EAAAA,EAAAA,KAAavC,IACnC,MAAMklC,EAAiB,IAAIT,GACvBS,EAAejlC,SAASD,GAC1BklC,EAAeC,OAAOD,EAAe/uB,QAAQnW,GAAK,GAElDklC,EAAehd,KAAKloB,GAEtB2kC,EAAoBO,KACnB,CAACT,EAAaE,IAEXS,GAAsB7iC,EAAAA,EAAAA,KAAaQ,IACvC,MAAMsiC,EAAuB,IAAIzC,GAC7ByC,EAAqBplC,SAAS8C,GAChCsiC,EAAqBF,OAAOE,EAAqBlvB,QAAQpT,GAAM,GAE/DsiC,EAAqBnd,KAAKnlB,GAE5B6hC,EAA0BS,KACzB,CAACzC,EAAmBgC,IAEjB/kB,GAAqBtd,EAAAA,EAAAA,KAAayE,IACtC,MAAM,MAAE6I,GAAU7I,EAAE+G,cACpBsR,EAAexP,KACd,CAACwP,IAEE7c,GAAOC,EAAAA,EAAAA,MAgEN+c,EAAaC,IAAWC,EAAAA,GAAAA,GAAkBa,EAAYuB,EAAS/V,QAAQ24B,IAE9E,OACE,0BAAK9hC,UAAU,qCACb,0BAAKA,UAAU,+BACZggC,EAAkBniB,KAnEzB,SAAgC1d,GAC9B,MAAMuiC,EAAeT,EAAUU,MAAK,EAAGxiC,IAAKmhC,KAAcnhC,IAAQmhC,IAClE,GAAKoB,EAIL,OACE,mBAACzP,GAAA,EAAD,CACEvwB,KAAMggC,EAAahgC,KACnB2d,MAAOzgB,EAAK8iC,EAAariB,OACzBuiB,YAAaV,EACbW,UAAQ,EACR5iC,QAASuiC,EACTrP,SAAUuP,EAAaviC,SAuDtB0hC,EAAYhkB,KAAI,CAACzgB,EAAIioB,IACpB,mBAAC4N,GAAA,EAAD,CACEC,aAAc91B,EACdwlC,YAAaV,GAAkB7c,EAAIwc,EAAYvjC,OA7H3B,EA8HpBukC,UAAQ,EACR5iC,QAASoiC,EACTlP,SAAU/1B,MAGZ+kC,EAQA,wBAAGniC,UAAU,oBAAoBO,IAAI,QACjC,6CARJ,mBAAC6c,GAAA,EAAD,CACEzV,IAAKiF,EACLK,MAAO60B,EACP30B,SAAU8P,EACVK,YAAa1d,EAAK,aAQxB,mBAAC6d,GAAA,EAAD,CACEzd,UAAU,4BACVo0B,aAAa,aACb1W,MAAOd,EACPe,WAAYd,KAETD,IAAgBA,EAAYte,QAAUse,EAAYvf,SAAS6hB,EAAQ,MACpE,sCACE,yBAAI/e,IAAI,UAAUH,UAAU,uBAAuBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAC1EvC,EAAK,oBAEPqiC,EAAUpkB,KAnFrB,SAAwB3Q,GACtB,OACE,mBAAC4Q,GAAA,EAAD,CACE3d,IAAK+M,EAAK/M,IACVH,UAAU,sDACVC,QAAS,IAAMuiC,EAAoBt1B,EAAK/M,KACxC0H,QAAM,GAEN,wBAAG7H,UAAY,QAAOkN,EAAKxK,SAC3B,yBAAI1C,UAAU,YAAYO,IAAI,QAAQX,EAAKsN,EAAKmT,QAChD,mBAACyiB,GAAA,EAAD,CACExY,MAAM,GACNyY,QAAS/C,EAAkB3iC,SAAS6P,EAAK/M,KACzC8B,OAAK,QAuEH,0BAAK9B,IAAI,UAAUH,UAAU,wBAC7B,yBAAIG,IAAI,UAAUH,UAAU,uBAAuBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAC1EvC,EAAK,iBAKXgd,MAAAA,GAAAA,EAAate,OACZse,EAAYiB,KAzEpB,SAAoBzgB,GAClB,MAAM4lC,EAAanB,EAAYxkC,SAASD,GAExC,OACE,mBAAC0gB,GAAA,EAAD,CACE3d,IAAK/C,EACL4C,UAAU,iDACVC,QAAS,IAAMoiC,EAAgBjlC,GAC/ByK,QAAM,EACNkF,UAAWi2B,GAAcb,IAExBnjC,EAAAA,EAAAA,IAAS5B,GACR,mBAAC2gB,GAAA,EAAD,CAAiBE,OAAQ7gB,IAEzB,mBAAC8gB,GAAA,EAAD,CAAetf,OAAQxB,EAAI6lC,cAAY,IAEzC,mBAACH,GAAA,EAAD,CACExY,MAAM,GACNyY,QAASC,EACT/gC,OAAK,QAuDH2a,IAAgBA,EAAYte,OAC9B,wBAAG0B,UAAU,aAAaG,IAAI,cAA9B,yBAEA,mBAACge,GAAA,EAAD,CAAShe,IAAI,iBC9CvB,IAAeQ,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MACEyf,OACEC,KAAMC,EADD,QAELC,EAFK,iBAGLC,IAEA7f,EAEJ,MAAO,CACL2f,UAAAA,EACAC,QAASA,EAAQG,OACjBF,iBAAkBA,EAAiBE,OACnCwkB,kBAAmB1kB,EAAiBK,SACpCD,gBAAiBL,EAAQM,aAG7B,CAACxf,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,mBAlBpCZ,EAzH0D,EAC5Eid,SAAAA,EACA8b,eAAAA,EACAjJ,QAAAA,EACAuS,KAAAA,EACA9J,MAAAA,EACAoI,SAAAA,EACA/gB,UAAAA,EACAC,QAAAA,EACAC,iBAAAA,EACAI,gBAAAA,EACAskB,kBAAAA,EACAlkB,cAAAA,MAEA,MAAM,WAAEmkB,GAAelM,GACjB,gBAAE6I,EAAF,kBAAmBE,IAAsBE,EAAAA,GAAAA,IAAkBjJ,EAAO8J,GAAM,GAExEnhC,GAAOC,EAAAA,EAAAA,KACPue,GAAQvc,EAAAA,EAAAA,KAAQ,KACpB,MAAMuhC,EAAmB7kB,GACrB8kB,EAAAA,EAAAA,GAAgB/kB,EAAWC,EAASC,EAAkB,YACtDrc,EACEmhC,EAAqB1kB,GACvBykB,EAAAA,EAAAA,GAAgB/kB,EAAWM,EAAiBskB,EAAmB,iBAC/D/gC,EAEJ,GAAKihC,GAAqBE,EAI1B,MAAO,IACDF,EACA,IAAIA,EAAiBG,eAAgBH,EAAiBI,YACtD,MAEAF,EAAqBA,EAAmBE,WAAa,MAE1D,CAACllB,EAAWC,EAASC,EAAkBI,EAAiBskB,IAErDO,GAAe5hC,EAAAA,EAAAA,KAAQ,KAC3B,GAAKuc,EAIL,OAAOA,EACJ7B,QAAQjc,IACN6iC,IACE3jB,EAAAA,GAAAA,IAAYC,EAAAA,EAAAA,GAAa7f,EAAMU,GAAO6iC,IACtCrD,EAAgBziC,SAASiD,EAAKlD,MAElCygB,KAAI,EAAGzgB,GAAAA,KAASA,MAClB,CAACghB,EAAO+kB,EAAYvjC,EAAMkgC,IAEvB7iB,GAAqBtd,EAAAA,EAAAA,KAAa+jC,IACtCrE,EAAS,CACPnyB,KAAM,gBACNiqB,QAASuM,MAEV,CAACrE,IAEEsE,GAA0BhkC,EAAAA,EAAAA,KAAaikC,IAEzCvE,EADW,aAAT0B,EACO,CACP7zB,KAAM,oBACNiqB,QAAS,IAAKF,EAAM4M,eAAgB9D,gBAAiB6D,IAG9C,CACP12B,KAAM,oBACNiqB,QAAS,IAAKF,EAAM6M,eAAgB3D,gBAAiByD,OAGxD,CAAC7C,EAAM9J,EAAOoI,IAEX0E,GAAgCpkC,EAAAA,EAAAA,KAAai2B,IACjD,MAAMoO,EAAsC,GAC5CpO,EAAKqO,SAAS9jC,IACZ6jC,EAAW7jC,IAAO,KAIlBk/B,EADW,aAAT0B,EACO,CACP7zB,KAAM,oBACNiqB,QAAS,CACP4I,gBAAiBD,KACdkE,IAIE,CACP92B,KAAM,oBACNiqB,QAAS,CACPgJ,gBAAiBL,KACdkE,OAIR,CAACjD,EAAMjB,EAAiBT,IAK3B,OAHAvjB,EAAAA,EAAAA,IAAeH,EAAU6S,EAASiJ,EACvB,aAATsJ,EAAsB1I,EAAAA,GAAAA,qBAAuCA,EAAAA,GAAAA,sBAE1DoL,EAKH,mBAAC,GAAD,CACE1C,KAAMA,EACN7hB,QAASukB,EACT5B,YAAa/B,EACbE,kBAAmBA,EACnB8B,YAAaqB,EACbpB,oBAAqB4B,EACrB3B,0BAA2B+B,EAC3BtnB,eAAgBQ,EAChBU,WAAYqB,IAbP,mBAACb,GAAA,EAAD,UCKX,IAAexd,EAAAA,EAAAA,KA9HuB,EACpCy2B,cAAAA,EACA8M,YAAAA,EACAjN,MAAAA,EACAoI,SAAAA,EACA1jB,SAAAA,EACA8b,eAAAA,EACAjJ,QAAAA,MAEA,MAAM2V,GAAcxkC,EAAAA,EAAAA,KAAY,KAE5By3B,IAAkBiB,EAAAA,GAAAA,qBACfjB,IAAkBiB,EAAAA,GAAAA,mBAClBjB,IAAkBiB,EAAAA,GAAAA,+BAErBlyB,YAAW,KACTk5B,EAAS,CAAEnyB,KAAM,YA5BG,KAiCtBkqB,IAAkBiB,EAAAA,GAAAA,sBACfjB,IAAkBiB,EAAAA,GAAAA,qBAUvB7J,IARqB,WAAfyI,EAAM8J,KACRtJ,EAAeY,EAAAA,GAAAA,qBAEfZ,EAAeY,EAAAA,GAAAA,qBAMlB,CACDpB,EAAM8J,KAAM1B,EACZjI,EAAe5I,EAASiJ,IAGpBqG,GAAqBn+B,EAAAA,EAAAA,KAAY,KACrC0/B,EAAS,CAAEnyB,KAAM,UACjBuqB,EAAeY,EAAAA,GAAAA,uBACd,CAACZ,EAAgB4H,IAEd+E,GAAmBzkC,EAAAA,EAAAA,KAAas+B,IACpCoB,EAAS,CAAEnyB,KAAM,aAAciqB,QAAS8G,IACxCxG,EAAeY,EAAAA,GAAAA,qBACd,CAACgH,EAAU5H,IAER4M,GAAyB1kC,EAAAA,EAAAA,KAAY,KACzC0/B,EAAS,CAAEnyB,KAAM,uBACjBuqB,EAAeL,IAAkBiB,EAAAA,GAAAA,8BAC7BA,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,wBACH,CAACjB,EAAeiI,EAAU5H,IAEvB6M,GAAyB3kC,EAAAA,EAAAA,KAAY,KACzC0/B,EAAS,CAAEnyB,KAAM,uBACjBuqB,EAAeL,IAAkBiB,EAAAA,GAAAA,8BAC7BA,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,wBACH,CAACjB,EAAeiI,EAAU5H,IAE7B,OAAQL,GACN,KAAKiB,EAAAA,GAAAA,QACH,OACE,mBAAC,GAAD,CACE6E,eAAgBY,EAChBX,aAAciH,EACd3M,eAAgBA,EAChB9b,SAAUA,GAAY,CACpB0c,EAAAA,GAAAA,oBACAA,EAAAA,GAAAA,kBACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAh7B,SAAS6mC,GACX1V,QAASA,IAGf,KAAK6J,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,8BACH,OACE,mBAAC,GAAD,CACEpB,MAAOA,EACPoI,SAAUA,EACVC,mBAAoB+E,EACpB9E,mBAAoB+E,EACpB9V,QAAS2V,EACT1M,eAAgBA,EAChB9b,SAAUA,GAAY,CACpB0c,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAh7B,SAAS6mC,GACX1E,OAAQhR,IAGd,KAAK6J,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACH,OACE,mBAAC,GAAD,CACE0I,KAAK,WACL9J,MAAOA,EACPoI,SAAUA,EACV7Q,QAAS2V,EACT1M,eAAgBA,EAChB9b,SAAUA,IAGhB,KAAK0c,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACH,OACE,mBAAC,GAAD,CACE0I,KAAK,WACL9J,MAAOA,EACPoI,SAAUA,EACV7Q,QAAS2V,EACT1M,eAAgBA,EAChB9b,SAAUA,IAIhB,QACE,W,yDC/HN,MAmCA,IAAehb,EAAAA,EAAAA,KAnC+B,EAC5CP,KAAAA,EAAOmkC,EAAAA,GACPC,WAAAA,EACAC,oBAAAA,MAGA,MAAM98B,GAAM3B,EAAAA,EAAAA,IAAuB,MAE7B0+B,GAAiBC,EAAAA,GAAAA,IAAkBh9B,EAAK88B,GAExCG,EAAa,aAAYJ,EAAWpnC,KACpCynC,GAAalwB,EAAAA,EAAAA,GAASiwB,GAAYF,EAAgB9vB,EAAAA,GAAAA,QAClDrK,GAAuBu6B,EAAAA,GAAAA,GAAmBD,GAE1CE,GAAeljC,EAAAA,EAAAA,KAAQ,KAC3B,IAAIgjC,EAEJ,OAAOG,EAAAA,GAAAA,IAAgBR,EAAWnkB,MAAO,KACxC,CAACwkB,EAAYL,EAAWnkB,QAE3B,OACE,0BAAK1Y,IAAKA,EAAK3H,UAAU,qBACtB+kC,EACAF,GACC,mBAACxG,GAAA,EAAD,CACEjhC,GAAIwnC,EACJxkC,KAAMA,EACNm9B,cAAesH,EACf7kC,UAAWuK,QCTrB,IAAe5J,EAAAA,EAAAA,KAvBuB,EAAG6jC,WAAAA,EAAYC,oBAAAA,MAEnD,MAAM98B,GAAM3B,EAAAA,EAAAA,IAAuB,MAE7B0+B,GAAiBC,EAAAA,GAAAA,IAAkBh9B,EAAK88B,GAExC3jC,GAAY6T,EAAAA,EAAAA,GAAS6vB,EAAWS,cAAiB,aAAYT,EAAWpnC,MAAOsnC,GAC/En6B,GAAuBu6B,EAAAA,GAAAA,GAAmBhkC,GAE1CikC,GAAeljC,EAAAA,EAAAA,KAAQ,KAC3B,IAAIf,EAEJ,OAAOkkC,EAAAA,GAAAA,IAAgBR,EAAWnkB,MAAO,KACxC,CAACvf,EAAW0jC,EAAWnkB,QAE1B,OACE,0BAAK1Y,IAAKA,EAAK3H,UAAU,qBACtB+kC,EACD,0BAAK1oC,IAAKyE,EAAWd,UAAWuK,EAAsBoG,IAAI,S,eCXhE,MAmEA,IAAehQ,EAAAA,EAAAA,KAnE0B,EACvC6jC,WAAAA,EACAC,oBAAAA,EACAxkC,QAAAA,MACI,MACJ,MAAML,GAAOC,EAAAA,EAAAA,KAEb,IAAK2kC,IAAeA,EAAWU,SAC7B,OAGF,MAAMC,EAAY,UAAGX,EAAWU,gBAAd,aAAG,EAAsB,GAE3C,OAAIV,EAAWS,eAAiBE,EAE5B,mBAACrnB,GAAA,EAAD,CACE8gB,QAAM,EACN5+B,UAAU,qBACVwhC,UAAW2D,EACXllC,QAAS,IAAMklC,GAAgBllC,EAAQklC,IAEvC,mBAACnjC,EAAA,EAAD,CACEI,UAAWoiC,EAAWnkB,MACtBne,MAAM,cACN8Z,MAAOpc,EAAKoc,OAEXwoB,EAAWY,WACV,mBAAC,GAAD,CACEhlC,KAAMilC,EAAAA,GACNb,WAAYA,EACZC,oBAAqBA,IAGvB,mBAAC,GAAD,CACED,WAAYA,EACZC,oBAAqBA,KAI3B,0BAAKzkC,UAAU,uBACb,0BAAKA,UAAU,SAASwkC,EAAWnkB,OACnC,0BAAKrgB,UAAU,YAAYJ,EAAK,2BAA4B4kC,EAAW1F,MAAO,QAMlF,mBAAChhB,GAAA,EAAD,CACE8gB,QAAM,EACN5+B,UAAU,qBACVC,QAAS,IAAMA,EAAQklC,IAEvB,mBAACG,GAAA,EAAD,CACEC,QAASJ,EACT/kC,KAAMilC,EAAAA,GACNhlB,MAAOmkB,EAAWnkB,MAClBokB,oBAAqBA,IAEvB,0BAAKzkC,UAAU,uBACb,0BAAKA,UAAU,SAASwkC,EAAWnkB,OACnC,0BAAKrgB,UAAU,YAAYJ,EAAK,2BAA4B4kC,EAAW1F,MAAO,W,eC/BxF,MAAM0G,GAA0B,CAC9B,mBACA,gBACA,iBAGIC,GAAsC,CAAC,CAC3Cnb,MAAO,UACPrd,MAAO,OACN,CACDqd,MAAO,UACPrd,MAAO,QAkOT,IAAetM,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACQ,KACFY,EAAAA,EAAAA,IAAKZ,EAAOwS,SAASC,MAAO,CAC7B,kBACA,iBACA,sBACA,sCACA,wCACA,kCACA,oCACA,qBACA,uBACA,wBACA,qBACA,qBACA,qBACA,eAEFs0B,cAAe/mC,EAAOumC,SAASS,MAAMC,OACrCC,gBAAiBlnC,EAAOumC,SAASY,aAGrC,CAACzmC,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,mBAAoB,kBAAmB,uBAxBvBZ,EA/N+C,EACjEid,SAAAA,EACA8b,eAAAA,EACAjJ,QAAAA,EACAkX,cAAAA,EACAG,gBAAAA,EACAE,gBAAAA,EACA70B,eAAAA,EACA80B,oBAAAA,EACAC,oCAAAA,EACAC,sCAAAA,EACAC,gCAAAA,EACAC,kCAAAA,EACAC,mBAAAA,EACAC,qBAAAA,EACAC,sBAAAA,EACAC,mBAAAA,EACAC,WAAAA,EACAC,iBAAAA,EACAC,gBAAAA,EACAC,kBAAAA,MAGA,MAAMC,GAAqB7gC,EAAAA,EAAAA,IAAuB,OAC1C8gC,QAASC,IAAiCC,EAAAA,GAAAA,IAAwB,CAAEC,QAASJ,KAC9EK,EAAaC,EAAWC,IAAcxjB,EAAAA,GAAAA,MACtC2hB,EAAS8B,IAAc/jC,EAAAA,EAAAA,MAExB1D,GAAOC,EAAAA,EAAAA,KAEPynC,EAAyB5+B,EAAAA,QAO3BvG,EAP0C,CAC5C,CAAE8K,MAAO,QAASqd,MAAO1qB,EAAK,2BAA4B2nC,SAAU,6BACpE,CACEt6B,MAAO,aACPqd,MAAO1qB,EAAK4nC,EAAAA,GAAY,6BAA+B,+BACvDD,SAAU,uBAIdhkC,EAAAA,EAAAA,KAAU,KACRojC,MACC,CAACA,KAEJpjC,EAAAA,EAAAA,KAAU,KACJmiC,MAAAA,GAAAA,EAAepnC,QACjBsoC,MAED,CAAClB,EAAekB,IAEnB,MAAMa,GAA6B9nC,EAAAA,EAAAA,KAAa+nC,IAC9ClC,GAAwBvB,SAAQ,CAAC0D,EAAGtiB,KAClCtpB,SAASsK,KAAKpK,UAAU8Z,OAAQ,mBAAkBsP,IAAKqiB,IAAariB,MAGtEqhB,EAAiB,CAAEx1B,eAAgBw2B,MAClC,CAAChB,IAEEkB,GAA8BjoC,EAAAA,EAAAA,KAAakoC,IAC/C9rC,SAAS+rC,gBAAgBhqC,MAAMiqC,YAC7B,uBAAyB,GAAEplC,KAAKoE,IAAI8gC,EAASl/B,EAAAA,GAAS,GAAK,SAE7D5M,SAAS+rC,gBAAgBhqC,MAAMiqC,YAAY,wBAA0B,GAAEplC,KAAKkC,MAAgB,OAAVgjC,QAClF9rC,SAAS+rC,gBAAgBhqC,MAAMiqC,YAAY,sBAAwB,GAAEF,OACrE9rC,SAAS+rC,gBAAgBE,aAAa,yBAA0BH,EAAQ/3B,YAExE42B,EAAiB,CAAEX,gBAAiB8B,MACnC,CAACnB,IAEEuB,GAAyBtoC,EAAAA,EAAAA,KAAauoC,IAC1CxB,EAAiB,CAAED,WAAYyB,IAC/BxB,EAAiB,CAAEyB,0BAA0B,KAE7CC,EAAAA,GAAAA,IAAcF,KACb,CAACxB,IAEE2B,GAAwB1oC,EAAAA,EAAAA,KAAasN,IACzCo6B,EAAWp6B,GACXk6B,MACC,CAACA,IAEEmB,EAAc5C,GAAiBA,EAAc7nB,KAAKzgB,IAAe,MACrE,QAAOyoC,MAAAA,GAAA,UAAAA,EAAkBzoC,UAAlB,UAAuBmrC,gBAAgB1C,EAAgBzoC,MAC7Dmf,OAAsBpT,SAIzB,OAFA2S,EAAAA,EAAAA,IAAeH,EAAU6S,EAASiJ,EAAgBY,EAAAA,GAAAA,SAGhD,0BAAKr4B,UAAU,kCACb,0BAAKA,UAAU,sBACb,yBAAIA,UAAU,uBAAuBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAAYvC,EAAK,aAEhF,mBAAC4oC,GAAA,EAAD,CACEle,MAAO1qB,EAAK,YACZoH,IAAK,GACLD,IAAK,GACLkG,MAAO84B,EACP54B,SAAUy6B,IAGZ,mBAAC9pB,GAAA,EAAD,CACEpb,KAAK,QACLzC,QAAS,IAAMw3B,EAAeY,EAAAA,GAAAA,wBAE7Bz4B,EAAK,oBAIV,0BAAKI,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAA/D,eAGA,mBAACooB,GAAA,EAAD,CACEpO,KAAK,aACLqO,QAASib,GACThb,SAAUgc,EACVt5B,SAAU86B,KAId,0BAAKjoC,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAA/D,mBAGA,wBAAGnC,UAAU,4BAA4BO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAAnE,yCAIA,mBAACqmC,GAAA,EAAD,CACEhe,QAASgb,GACTv4B,MAAOiE,EACP/D,SAAUs6B,KAIbH,GACC,0BAAKtnC,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAAYvC,EAAK,uBAEhF,mBAAC2qB,GAAA,EAAD,CACEpO,KAAK,yBACLqO,QAAS8c,EACTn6B,SAAWF,GAAUy5B,EAAiB,CAAEV,oBAAqB/4B,IAC7Dwd,SAAUub,KAKhB,0BAAKhmC,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAAYvC,EAAK,sBAEhF,mBAACkjC,GAAA,EAAD,CACExY,MAAO1qB,EAAK,YACZmjC,QAASkD,EACTwC,QAAUC,GAAchC,EAAiB,CAAET,oCAAqCyC,MAElF,mBAAC5F,GAAA,EAAD,CACExY,MAAO1qB,EAAK,4BACZmjC,QAASmD,EACTuC,QAAUC,GAAchC,EAAiB,CAAER,sCAAuCwC,MAEpF,mBAAC5F,GAAA,EAAD,CACExY,MAAO1qB,EAAK,0BACZmjC,QAASoD,EACTsC,QAAUC,GAAchC,EAAiB,CAAEP,gCAAiCuC,MAE9E,mBAAC5F,GAAA,EAAD,CACExY,MAAO1qB,EAAK,kBACZmjC,QAASqD,EACTqC,QAAUC,GAAchC,EAAiB,CAAEN,kCAAmCsC,OAIlF,0BAAK1oC,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAAYvC,EAAK,kBAEhF,mBAACkjC,GAAA,EAAD,CACExY,MAAO1qB,EAAK,YACZmjC,QAASsD,EACToC,QAAUC,GAAchC,EAAiB,CAAEL,mBAAoBqC,MAEjE,mBAAC5F,GAAA,EAAD,CACExY,MAAO1qB,EAAK,kCACZmjC,QAASuD,EACTmC,QAAUC,GAAchC,EAAiB,CAAEJ,qBAAsBoC,OAIrE,0BAAK1oC,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAAYvC,EAAK,qBAEhF,mBAACkjC,GAAA,EAAD,CACExY,MAAO1qB,EAAK,mBACZmjC,QAASwD,EACTkC,QAAUC,GAAchC,EAAiB,CAAEH,sBAAuBmC,MAEpE,mBAAC5F,GAAA,EAAD,CACExY,MAAO1qB,EAAK,wBACZmjC,QAASyD,EACTiC,QAAUC,GAAchC,EAAiB,CAAEF,mBAAoBkC,MAGjE,0BAAK1oC,UAAU,OAAO2H,IAAKk/B,GACxByB,GAAeA,EAAYzqB,KAAK2mB,GAC/B,mBAAC,GAAD,CACErkC,IAAKqkC,EAAWpnC,GAChBonC,WAAYA,EACZC,oBAAqBsC,EACrB9mC,QAASooC,OAId9C,GACC,mBAAC,KAAD,CACExjC,OAAQmlC,EACRyB,YAAapD,EACbh9B,QAAS6+B,UCzRrB,IAAIwB,GAEG,SAASC,GAAsBC,EAAS,IAAKC,EAA8BC,GAAa,GACxFJ,KACHA,GAAe7sC,SAASC,cAAc,SACtC4sC,GAAaZ,aAAa,OAAQ,SAGpCY,GAAaZ,aAAa,SAAUc,GAEhCE,EACFJ,GAAaK,gBAAgB,YAE7BL,GAAaZ,aAAa,WAAY,YAIxCY,GAAaM,SAAW,KACxBN,GAAa37B,MAAQ,GACrB27B,GAAaM,SAAWH,EAExBH,GAAaO,Q,eCPR,SAASC,GAAQC,GACtB,MAAO,CACLC,SAASD,EAAME,UAAU,EAAG,GAAI,IAChCD,SAASD,EAAME,UAAU,EAAG,GAAI,IAChCD,SAASD,EAAME,UAAU,EAAG,GAAI,KAS7B,SAASC,GAAQH,GACtB,MAAMI,EAAKJ,EAAM,GAAGv5B,SAAS,IACvB45B,EAAKL,EAAM,GAAGv5B,SAAS,IACvB65B,EAAKN,EAAM,GAAGv5B,SAAS,IAC7B,OAAqB,GAAb25B,EAAGnrC,OAAc,IAAMmrC,EAAKA,IAAoB,GAAbC,EAAGprC,OAAc,IAAMorC,EAAKA,IAAoB,GAAbC,EAAGrrC,OAAc,IAAMqrC,EAAKA,GAcrG,SAASC,IAASC,EAAGC,EAAGpX,IAC7BmX,GAAK,IACLC,GAAK,IACLpX,GAAK,IAEL,IACIqX,EAAYC,EADZjjC,EAAMpE,KAAKoE,IAAI8iC,EAAGC,EAAGpX,GAAI1rB,EAAMrE,KAAKqE,IAAI6iC,EAAGC,EAAGpX,GACvBuX,EAAYljC,EAEnCof,EAAIpf,EAAMC,EAGd,GAFAgjC,EAAW,GAAPjjC,EAAW,EAAIof,EAAIpf,EAEnBA,GAAOC,EACT+iC,EAAI,MACC,CACL,OAAQhjC,GACN,KAAK8iC,EACHE,GAAKD,EAAIpX,GAAKvM,GAAK2jB,EAAIpX,EAAI,EAAI,GAC/B,MACF,KAAKoX,EACHC,GAAKrX,EAAImX,GAAK1jB,EAAI,EAClB,MACF,KAAKuM,EACHqX,GAAKF,EAAIC,GAAK3jB,EAAI,EAItB4jB,GAAK,EAGP,MAAO,CAACA,EAAGC,EAAGC,GAcT,SAASC,IAASH,EAAGC,EAAGC,IAC7B,IAAIJ,EAAYC,EAAYpX,EAExBrN,EAAI1iB,KAAKkC,MAAU,EAAJklC,GACfI,EAAQ,EAAJJ,EAAQ1kB,EACZ+kB,EAAIH,GAAK,EAAID,GACbK,EAAIJ,GAAK,EAAIE,EAAIH,GACjBM,EAAIL,GAAK,GAAK,EAAIE,GAAKH,GAE3B,OAAQ3kB,EAAI,GACV,KAAK,EACHwkB,EAAII,EACJH,EAAIQ,EACJ5X,EAAI0X,EACJ,MACF,KAAK,EACHP,EAAIQ,EACJP,EAAIG,EACJvX,EAAI0X,EACJ,MACF,KAAK,EACHP,EAAIO,EACJN,EAAIG,EACJvX,EAAI4X,EACJ,MACF,KAAK,EACHT,EAAIO,EACJN,EAAIO,EACJ3X,EAAIuX,EACJ,MACF,KAAK,EACHJ,EAAIS,EACJR,EAAIM,EACJ1X,EAAIuX,EACJ,MACF,KAAK,EACHJ,EAAII,EACJH,EAAIM,EACJ1X,EAAI2X,EAIR,MAAO,CACL1nC,KAAKV,MAAU,IAAJ4nC,GACXlnC,KAAKV,MAAU,IAAJ6nC,GACXnnC,KAAKV,MAAU,IAAJywB,IAuDR,SAAS6X,GAAgBC,GAC9B,IAAKC,EAAKC,EAAYz9B,GAAS28B,GAAQY,GAOvC,OALAE,EAAa/nC,KAAKqE,IAAI,EAAG0jC,EAAa,IAAO,IAAO,EAAIA,IACxDz9B,EAAQA,EAAQ,GACZtK,KAAKoE,IAAI,EAAW,IAARkG,GACZtK,KAAKoE,IAAI,EAAGpE,KAAKqE,IAAI,EAAG,EAAY,IAARiG,IAExB,QAAa,IAANw9B,MAA2B,IAAbC,OAA8B,IAARz9B,U,0BCzKrD,MAiFA,IAAetM,EAAAA,EAAAA,KAjFqB,EAClCgqC,UAAAA,EACAlX,MAAAA,EACAuP,WAAAA,EACA/iC,QAAAA,MACI,MACJ,MAAM,KAAE2qC,EAAF,SAAQ7uC,GAAa4uC,EACrBE,EAAkB,YAAW9uC,EAASqB,KACtC6X,EAAelZ,EAAS+Y,eACxBA,GAAiBH,EAAAA,EAAAA,GAAU,GAAEk2B,YAC7BC,GAAWC,EAAAA,GAAAA,GAAa,UAAChvC,EAASivC,iBAAV,aAAC,EAAoBC,QAAS9hC,QAAQ2L,IAAiB,IAC/E,qBAAEvK,IAAyBE,EAAAA,EAAAA,GAC/BtB,QAAQ2L,GAAkBG,QAC1B9S,OACAA,EACA,SAEK+oC,EAAeC,IAAoB7nC,EAAAA,EAAAA,KAAS,IAEjDxC,UAAWsqC,EADP,aACkB7pC,IACpBE,EAAAA,EAAAA,GAAyBopC,GAAiBK,GACxCG,GAAiD,KAA/B1+B,EAAAA,EAAAA,GAAYu+B,IAC5B7gC,aAAcC,EAAqBC,qBAAsBC,IAAsBC,EAAAA,EAAAA,GACpFygC,IAAkBE,GAAcR,IAASU,EAAAA,QAC1CnpC,EACAkpC,EACA,QAGIE,GAAcvlC,EAAAA,EAAAA,MACpBulC,EAAY/kC,QAAUitB,EAEtB,MAAM+X,GAAe7rC,EAAAA,EAAAA,KAAY,KAC/B,WACE,MAAM8rC,QAAaC,EAAAA,GAAAA,IAAUN,SACvBO,GAASC,KAAKC,EAAAA,GAAsBN,EAAY/kC,QAAUilC,GAChExrC,EAAQ2qC,IAHV,KAKC,CAACQ,EAAWnrC,EAAS2qC,KAExBrnC,EAAAA,EAAAA,KAAU,KACJ6nC,GACFI,MAED,CAACJ,EAAWI,IAEf,MAAM7d,GAAchuB,EAAAA,EAAAA,KAAY,KAC1ByrC,EACFI,IAEAL,GAAkBW,IAAeA,MAElC,CAACV,EAAWI,IAETxrC,GAAYmE,EAAAA,EAAAA,GAChB,gBACA6+B,GAAc,YAGhB,OACE,0BAAKhjC,UAAWA,EAAWC,QAAS0tB,GAClC,0BAAK3tB,UAAU,eACb,6BACE2H,IAAKmjC,EACL9qC,UAAU,cAEZ,0BACE3D,IAAKyY,GAAkBG,EACvBjV,WAAWmE,EAAAA,EAAAA,GAAe,aAAcoG,GACxCoG,IAAI,KAELrG,GACC,0BAAKtK,WAAWmE,EAAAA,EAAAA,GAAe,oBAAqBqG,IAClD,mBAAC1H,EAAA,EAAD,CAAiBC,SAAUxB,EAActB,QAAS0tB,UCxDxDI,IAAejqB,EAAAA,EAAAA,KAAUkqB,GAAOA,KAAM,KAAO,GA0HnD,IAAertB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAM80B,GAAQC,EAAAA,EAAAA,IAAY/0B,IACpB,WAAEotC,EAAF,UAAcC,GAAcrtC,EAAOwS,SAAS86B,OAAOxY,IAAU,IAC7D,iBAAEyY,GAAqBvtC,EAAOwS,SAEpC,MAAO,CACL46B,WAAAA,EACAC,UAAAA,EACAE,iBAAAA,EACAzY,MAAAA,MAGJ,CAACp0B,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,iBAAkB,kBAAmB,sBAdrBZ,EAxHyD,EAC3Eid,SAAAA,EACA8b,eAAAA,EACAjJ,QAAAA,EACAud,WAAAA,EACAC,UAAAA,EACAE,iBAAAA,EACAzY,MAAAA,EACA0Y,eAAAA,EACAC,gBAAAA,EACAC,iBAAAA,MAEA,MAAMC,GAAWtmC,EAAAA,EAAAA,MACjBsmC,EAAS9lC,QAAUitB,GAGnBlwB,EAAAA,EAAAA,KAAU,KACRwqB,IAAa,KACXoe,SAED,CAACA,IAEJ,MAAMI,GAAmB5sC,EAAAA,EAAAA,KAAayE,IACpC,MAAM,MAAEooC,GAAUpoC,EAAEiJ,OAEhBm/B,GAASA,EAAMluC,OAAS,GAC1B8tC,EAAgBI,EAAM,MAEvB,CAACJ,IAEEK,GAAwB9sC,EAAAA,EAAAA,KAAY,KACxCkpC,GAnCoB,aAmCmB0D,GAAkB,KACxD,CAACA,IAEEG,GAAiB/sC,EAAAA,EAAAA,KAAY,KACjC83B,EAAeY,EAAAA,GAAAA,8BACd,CAACZ,IAEEkV,GAAuBhtC,EAAAA,EAAAA,KAAY,KACvC0sC,EAAiB,CACf5Y,MAAAA,EACAsY,gBAAY5pC,EACZyqC,qBAAiBzqC,EACjB6pC,WAAW,EACXa,aAAwB,SAAVpZ,EAAmBqZ,EAAAA,GAA2BC,EAAAA,MAE7D,CAACV,EAAkB5Y,IAEhBuZ,GAAwBrtC,EAAAA,EAAAA,KAAairC,IACzCyB,EAAiB,CAAE5Y,MAAO6Y,EAAS9lC,QAASulC,WAAYnB,IACxD,MAAMqC,EAAmBf,GAAoBA,EAAiBvJ,MAAMgI,GAAcA,EAAUC,OAASA,IACjGqC,MAAAA,GAAAA,EAAkBlxC,SAASivC,WFwC5BkC,eAA+BjlC,GAEpC,MACMklC,EAAuC,CAAC,EAAG,EAAG,GACpD,IAAIpP,EACAt3B,EACA/C,EAEApF,EADA+mB,GAAK,EAEL+nB,EAAgC,CAAC,EAAG,EAAG,GACvCtO,EAAQ,EAEZ,MAAMuO,EAAStxC,SAASC,cAAc,UAChCsxC,EAAUD,EAAOE,YAAcF,EAAOE,WAAW,MACvD,IAAKD,EACH,OAAOH,EAGT,MAAM99B,QAAcm+B,EAAAA,GAAAA,IAAavlC,GACjCvE,EAAS2L,EAAMo+B,eAAiBp+B,EAAM7R,cAAgB6R,EAAM3L,OAC5D+C,EAAQ4I,EAAMq+B,cAAgBr+B,EAAMs+B,aAAet+B,EAAM5I,MACzD4mC,EAAO3pC,OAASA,EAChB2pC,EAAO5mC,MAAQA,EAEf6mC,EAAQM,UAAUv+B,EAAO,EAAG,GAE5B,IACE0uB,EAAOuP,EAAQO,aAAa,EAAG,EAAGpnC,EAAO/C,GACzC,MAAOU,GACP,OAAO+oC,EAMT,IAHA7uC,EAASy/B,EAAKA,KAAKz/B,QAGX+mB,GAAKyoB,IAAiBxvC,KAC1BwgC,EACFsO,EAAI,IAAMrP,EAAKA,KAAK1Y,GACpB+nB,EAAI,IAAMrP,EAAKA,KAAK1Y,EAAI,GACxB+nB,EAAI,IAAMrP,EAAKA,KAAK1Y,EAAI,GAO1B,OAJA+nB,EAAI,GAAKzqC,KAAKkC,MAAMuoC,EAAI,GAAKtO,GAC7BsO,EAAI,GAAKzqC,KAAKkC,MAAMuoC,EAAI,GAAKtO,GAC7BsO,EAAI,GAAKzqC,KAAKkC,MAAMuoC,EAAI,GAAKtO,GAEtBsO,EErFHW,CAAgBd,EAAiBlxC,SAASivC,UAAUC,SACjDpN,MAAM37B,IACL,MAAM2qC,EAAetC,GAAgBroC,GAC/BsoC,EAAY,IAAGhB,GAAQtnC,KAC7BmqC,EAAiB,CAAE5Y,MAAO6Y,EAAS9lC,QAASomC,gBAAiBpC,EAAUqC,aAAAA,SAG5E,CAACX,EAAkBG,IAEhB2B,GAA4BruC,EAAAA,EAAAA,KAAayE,IAC7CioC,EAAiB,CAAE5Y,MAAO6Y,EAAS9lC,QAASwlC,UAAW5nC,EAAEiJ,OAAO01B,YAC/D,CAACsJ,IAEEzsC,GAAOC,EAAAA,EAAAA,MAEbic,EAAAA,EAAAA,IAAeH,EAAU6S,EAASiJ,EAAgBY,EAAAA,GAAAA,uBAElD,MAAM4V,GAAc/B,MAAAA,OAAA,EAAAA,EAAmB,KAAMA,EAAiB,GAAGtB,OAASU,EAAAA,GAE1E,OACE,0BAAKtrC,UAAU,4DACb,0BAAKA,UAAU,sBACb,mBAAC8d,GAAA,EAAD,CACEpb,KAAK,aACL1C,UAAU,OACV+M,SAAUkhC,EACVhuC,QAASwsC,GAER7sC,EAAK,gBAGR,mBAACke,GAAA,EAAD,CACEpb,KAAK,WACL1C,UAAU,OACVC,QAASysC,GAER9sC,EAAK,aAGR,mBAACke,GAAA,EAAD,CAAUpb,KAAK,WAAWzC,QAAS0sC,GAChC/sC,EAAK,yBAGR,mBAACkjC,GAAA,EAAD,CACExY,MAAO1qB,EAAK,qBACZmjC,QAAS55B,QAAQ6iC,GACjB7+B,SAAU6gC,KAIb9B,EACC,0BAAKlsC,UAAU,uBACZksC,EAAiBruB,KAAK8sB,GACrB,mBAAC,GAAD,CACEA,UAAWA,EACXlX,MAAOA,EACPuP,WAAY+I,IAAepB,EAAUC,KACrC3qC,QAAS+sC,OAKf,mBAAC7uB,GAAA,EAAD,WC/GF+vB,GAActE,GAAQR,GAAQ,WAC9B+E,GAAoB,CACxB,UAAW,UAAW,UAAW,UAAW,UAAW,UACvD,UAAW,UAAW,UAAW,UAAW,UAAW,WA4MzD,SAASC,GAAcC,EAA+BC,GACpD,MAAO,CACLC,cAAe,CACb5rC,KAAKV,MAAOosC,EAAI,IAAOC,EAAME,UAAU/nC,MAAQ,IAC/C9D,KAAKV,OAAO,EAAIosC,EAAI,KAAOC,EAAME,UAAU9qC,OAAS,KAEtD+qC,YAAa9rC,KAAKV,MAAMosC,EAAI,IAAMC,EAAMI,QAAQjoC,MAAQ,KAI5D,SAASkoC,IACP,cAAEJ,EAAF,YAAiBE,GACjBH,GAEA,MAAO,CACLG,GAAeH,EAAMI,QAAQjoC,MAAQ,GACrC8nC,EAAc,IAAMD,EAAME,UAAU/nC,MAAQ,GAC5C,EAAI8nC,EAAc,IAAMD,EAAME,UAAU9qC,OAAS,IA8ErD,UAAe/C,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAM80B,GAAQC,EAAAA,EAAAA,IAAY/0B,IACpB,gBAAEiuC,GAAoBjuC,EAAOwS,SAAS86B,OAAOxY,IAAU,GAC7D,MAAO,CACLmZ,gBAAAA,EACAnZ,MAAAA,MAGJ,CAACp0B,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,sBATpCZ,EAxSyD,EAC3Eid,SAAAA,EACA8b,eAAAA,EACAjJ,QAAAA,EACAiF,MAAAA,EACAmZ,gBAAAA,EACAP,iBAAAA,MAEA,MAAMC,GAAWtmC,EAAAA,EAAAA,MACjBsmC,EAAS9lC,QAAUitB,EAEnB,MAAMzW,GAAehX,EAAAA,EAAAA,IAAuB,MAEtC4oC,GAAiB5oC,EAAAA,EAAAA,IAAuB,MAExC6oC,GAAe7oC,EAAAA,EAAAA,IAAuB,MACtC8oC,GAAgB9oC,EAAAA,EAAAA,KAAO,IAEtBqoC,EAAKU,IAAUzrC,EAAAA,EAAAA,IAiLxB,SAAuBspC,GACrB,OAAOA,GAAmBA,EAAgB5a,WAAW,KACjD4X,GAAQR,GAAQwD,EAAgBjnB,QAAQ,IAAK,MAC7CuoB,GApL2Bc,CAAcpC,IAEvCqC,GAASjpC,EAAAA,EAAAA,IAAOqoC,IACtB9qC,EAAAA,EAAAA,KAAU,KACR0rC,EAAOzoC,QAAU6nC,IAChB,CAACA,IAEJ,MAAOngC,EAAYghC,EAAgBC,IAAoBvrB,EAAAA,GAAAA,MAChDwrB,EAAUC,IAAe/rC,EAAAA,EAAAA,IAAS,KAClCgsC,EAAUC,IAAejsC,EAAAA,EAAAA,IAAS,IAEnCksC,GAAWxpC,EAAAA,EAAAA,MACXypC,GAAczpC,EAAAA,EAAAA,OAGpBzC,EAAAA,EAAAA,KAAU,KAER,MAAMirC,EAAY,CAChBkB,WAAYd,EAAepoC,QAASkpC,eACjCnwC,EAAAA,EAAAA,IAAKqvC,EAAepoC,QAASG,wBAAyB,CAAC,MAAO,QAAS,YAEtE+nC,EAAU,CACdgB,WAAYb,EAAaroC,QAASkpC,eAC/BnwC,EAAAA,EAAAA,IAAKsvC,EAAaroC,QAASG,wBAAyB,CAAC,WAK1D,SAASgpC,EAAgBvrC,GACvB,MAAMmqC,EAAgB,CACpB5rC,KAAKqE,IAAIrE,KAAKoE,IAAI,EAAG3C,EAAE4L,MAASw+B,EAAUkB,YAAalB,EAAU/nC,MAAQ,GACzE9D,KAAKqE,IAAIrE,KAAKoE,IAAI,EAAG3C,EAAE6L,MAASu+B,EAAU12B,IAAMkF,EAAaxW,QAASjJ,WAAYixC,EAAU9qC,OAAS,KAGjG,YAAE+qC,GAAgBL,GAAca,EAAOzoC,QAASgpC,EAAShpC,SAK/D,OAHAuoC,EAAOJ,GAAc,CAAEJ,cAAAA,EAAeE,YAAAA,GAAee,EAAShpC,UAC9D0oC,KAEO,EAYT,SAASU,EAAcxrC,GACrB,MAAM,cAAEmqC,GAAkBH,GAAca,EAAOzoC,QAASgpC,EAAShpC,SAC3DioC,EAAc9rC,KAAKqE,IAAIrE,KAAKoE,IAAI,EAAG3C,EAAE4L,MAAS0+B,EAAQgB,YAAahB,EAAQjoC,MAAQ,GAKzF,OAHAsoC,EAAOJ,GAAc,CAAEJ,cAAAA,EAAeE,YAAAA,GAAee,EAAShpC,UAC9D0oC,KAEO,EAhCTM,EAAShpC,QAAU,CAAEgoC,UAAAA,EAAWE,QAAAA,IAgBhCrnC,EAAAA,EAAAA,GAAcunC,EAAepoC,QAAU,CACrCc,UAAWqoC,EACXnoC,OAAQmoC,EACRpoC,UAAW4nC,EACXlvC,QAASkvC,EACTU,wBAAyB,kCACzBC,YAAY,KAadzoC,EAAAA,EAAAA,GAAcwnC,EAAaroC,QAAU,CACnCc,UAAWsoC,EACXpoC,OAAQooC,EACRroC,UAAW4nC,EACXlvC,QAASkvC,EACTU,wBAAyB,kCACzBC,YAAY,MAEb,CAACZ,EAAgBC,IAEpB,MAAM,cAAEZ,EAAgB,CAAC,EAAG,GAAtB,YAA0BE,EAAc,GAAMe,EAAShpC,QAAU4nC,GAAcC,EAAKmB,EAAShpC,SAAW,GACxGupC,EAAMvG,GAAQU,GAAQmE,IACtB5D,EAAM4D,EAAI,GACV2B,EAASxG,GAAQU,GAAQ,CAACO,EAAK,EAAG,MAGxClnC,EAAAA,EAAAA,KAAU,KACR,MAAM6pC,EAAMlD,GAAQmE,GACdnsC,EAAS,IAAGsnC,GAAQ4D,KAK1B,GAHAiC,EAAYjC,EAAI9gC,KAAK,OACrBijC,EAAYrtC,IAEP4sC,EAActoC,QAAS,CAC1B,MAAMqmC,EAAetC,GAAgB6C,GACrCf,EAAiB,CACf5Y,MAAO6Y,EAAS9lC,QAChBulC,gBAAY5pC,EACZyqC,gBAAiB1qC,EACjB2qC,aAAAA,IAGJiC,EAActoC,SAAU,IACvB,CAAC6nC,EAAKhC,KAGT9oC,EAAAA,EAAAA,KAAU,MA2GZ,SACE8pC,EACA5C,EACAgF,EACAD,GAEA,IAAIS,EACAlG,EACAmG,EAECT,EAAYjpC,SAAYgpC,EAAShpC,SAWpCypC,EAAIT,EAAShpC,QAAQgoC,UAAU/nC,MAC/BsjC,EAAIyF,EAAShpC,QAAQgoC,UAAU9qC,OAC/BwsC,EAAMT,EAAYjpC,UAXlBypC,EAAI5C,EAAOM,YACX5D,EAAIsD,EAAO7vC,aACX0yC,EAAM7C,EAAOE,WAAW,MAExBF,EAAO5mC,MAAQwpC,EACf5C,EAAO3pC,OAASqmC,EAEhB0F,EAAYjpC,QAAU0pC,GAOxB,MAAMC,EAAUD,EAAKE,gBAAgBH,EAAGlG,GAClCsG,EAASF,EAAQpS,KACjBuS,EAAMpG,GAAQ,CAACO,EAAK,EAAG,IAE7B,IAAIzvB,EAAQ,EAEZ,IAAK,IAAIvM,EAAI,EAAGA,EAAIs7B,EAAGt7B,IAAK,CAC1B,MAAM8hC,EAAO,EAAI9hC,GAAKs7B,EAAI,GACpByG,EAAK,CAAC,IAAMD,EAAM,IAAMA,EAAM,IAAMA,GACpCE,EAAK,CAACH,EAAI,GAAKC,EAAMD,EAAI,GAAKC,EAAMD,EAAI,GAAKC,GACnD,IAAK,IAAI/hC,EAAI,EAAGA,EAAIyhC,EAAGzhC,IAAK,CAC1B,MAAMkiC,EAAOliC,GAAKyhC,EAAI,GACtBI,EAAOr1B,KAAWw1B,EAAG,IAAMC,EAAG,GAAKD,EAAG,IAAME,EAC5CL,EAAOr1B,KAAWw1B,EAAG,IAAMC,EAAG,GAAKD,EAAG,IAAME,EAC5CL,EAAOr1B,KAAWw1B,EAAG,IAAMC,EAAG,GAAKD,EAAG,IAAME,EAC5CL,EAAOr1B,KAAW,KAItBk1B,EAAKS,aAAaR,EAAS,EAAG,GAvJ5BS,CAAUhC,EAAepoC,QAAShI,WAAiCisC,EAAKgF,EAAaD,KACpF,CAAC/E,KAGJlnC,EAAAA,EAAAA,KAAU,MAsJZ,SAAiB8pC,GACf,MAAM4C,EAAI5C,EAAOM,YAEjBN,EAAO5mC,MAAQwpC,EACf5C,EAAO3pC,OAFG,EAGV,MAAMwsC,EAAM7C,EAAOE,WAAW,MAExB4C,EAAUD,EAAIE,gBAAgBH,EAL1B,GAMJI,EAASF,EAAQpS,KAEvB,IAAI/iB,EAAQ,EAEZ,IAAK,IAAIxM,EAAI,EAAGA,EAAIyhC,EAAGzhC,IAAK,CAC1B,MACM4+B,EAAMlD,GAAQ,CADR17B,GAAKyhC,EAAI,GACK,EAAG,IAE7BI,EAAOr1B,KAAWoyB,EAAI,GACtBiD,EAAOr1B,KAAWoyB,EAAI,GACtBiD,EAAOr1B,KAAWoyB,EAAI,GAEtBiD,EAAOr1B,KAAW,IAGpBk1B,EAAIS,aAAaR,EAAS,EAAG,GA5K3BU,CAAQhC,EAAaroC,QAAShI,cAC7B,IAEH,MAAMsyC,GAAkBnxC,EAAAA,EAAAA,KAAayE,IACnC,MAAM2sC,EAAW3sC,EAAE+G,cAAc8B,MAAM0Y,QAAQ,WAAY,IAAI+P,MAAM,EAAG,IAExE,GAAIqb,EAAS5gB,MAAM,mCAAoC,CACrD,MAAMid,EAAM2D,EAASxe,MAAM,KAAK1U,KAAKmzB,GAAY5jC,OAAO4jC,EAAQlX,UAChEiV,EAAOnF,GAAQwD,IAGjBhpC,EAAE+G,cAAc8B,MAAQ8jC,IACvB,IAEGE,GAAkBtxC,EAAAA,EAAAA,KAAayE,IACnC,MAAM8sC,EAAW9sC,EAAE+G,cAAc8B,MAAM0Y,QAAQ,gBAAiB,IAAI+P,MAAM,EAAG,GAEzEwb,EAAS/gB,MAAM,uBACjB4e,EAAOnF,GAAQR,GAAQ8H,EAASvrB,QAAQ,IAAK,OAG/CvhB,EAAE+G,cAAc8B,MAAQikC,IACvB,IAEGC,GAA6BxxC,EAAAA,EAAAA,KAAayE,IAC9C2qC,EAAOnF,GAAQR,GAAQhlC,EAAE+G,cAAcimC,QAAQlvC,MAAOyjB,QAAQ,IAAK,SAClE,IAEG3lB,GAAYmE,EAAAA,EAAAA,GAChB,gEACA+J,GAAc,eAKhB,OAFA4N,EAAAA,EAAAA,IAAeH,EAAU6S,EAASiJ,EAAgBY,EAAAA,GAAAA,4BAGhD,0BAAK1wB,IAAKqV,EAAchd,UAAWA,GACjC,0BAAKA,UAAU,sBACb,0BAAK2H,IAAKinC,EAAgB5uC,UAAU,gBAClC,kCACA,0BACEA,UAAU,SAEVlC,MAAQ,wBAAuBywC,EAAc,SAASA,EAAc,6BAA6BwB,QAGrG,0BAAKpoC,IAAKknC,EAAc7uC,UAAU,cAChC,kCACA,0BACEA,UAAU,SAEVlC,MAAQ,yBAAwB2wC,4BAAsCuB,QAG1E,0BAAKhwC,UAAU,SACb,mBAACod,GAAA,EAAD,CAAWnQ,MAAOqiC,EAAUhlB,MAAM,MAAMnd,SAAU8jC,IAClD,mBAAC7zB,GAAA,EAAD,CAAWnQ,MAAOmiC,EAAU9kB,MAAM,MAAMnd,SAAU2jC,MAGtD,0BAAK9wC,UAAU,qBACZmuC,GAAkBtwB,KAAK3b,GACtB,0BACElC,UAAWkC,IAAW,IAAG6tC,IAAQ,cAAW5tC,EAC5C,aAAYD,EAEZpE,MAAQ,qBAAoBoE,KAC5BjC,QAASkxC,YClCrB,IAAexwC,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAAsBC,IACjC,CACL0yC,6BAA8BloC,QAAQxK,EAAOwS,SAASC,MAAMigC,8BAC5DC,8BAA+BnoC,QAAQxK,EAAOwS,SAASC,MAAMkgC,+BAC7DC,sBAAuBpoC,QAAQxK,EAAOwS,SAASC,MAAMmgC,uBACrDC,uBAAwBroC,QAAQxK,EAAOwS,SAASC,MAAMogC,wBACtDC,0BAA2BtoC,QAAQxK,EAAOwS,SAASC,MAAMqgC,2BACzDC,2BAA4BvoC,QAAQxK,EAAOwS,SAASC,MAAMsgC,4BAC1DC,8BAA+BxoC,QAAQxK,EAAOwS,SAASC,MAAMugC,+BAC7DC,oBAAqBjzC,EAAOwS,SAASC,MAAMwgC,oBAC3CC,qBAAsBlzC,EAAOwS,SAASC,MAAMygC,qBAC5CC,wBAAyBnzC,EAAOwS,SAASC,MAAM0gC,4BAGnD,CAACzyC,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,2BACA,kCACA,6BACA,mCAlBkBZ,EAxKqD,EACvEid,SAAAA,EACA8b,eAAAA,EACAjJ,QAAAA,EACA6iB,6BAAAA,EACAC,8BAAAA,EACAC,sBAAAA,EACAC,uBAAAA,EACAC,0BAAAA,EACAC,2BAAAA,EACAC,8BAAAA,EACAE,qBAAAA,EACAD,oBAAAA,EACAE,wBAAAA,EACAC,yBAAAA,EACAC,gCAAAA,EACAC,2BAAAA,EACAC,8BAAAA,OAEA3uC,EAAAA,EAAAA,KAAU,KACRwuC,MACC,CAACA,IAEJ,MAAMI,GAAuBxyC,EAAAA,EAAAA,KAAY,CACvCyE,EACAguC,EACAC,KAEA,MAAMC,EAA+B,YAAbF,GACnBf,IACc,UAAbe,EAAuBb,EAAwBE,GAC/Cc,EAAyC,YAAbH,EAC9Bd,EACc,UAAbc,EAAuBZ,EAAyBE,EAErDO,EAA2B,CACzBG,SAAAA,KACgB,WAAZC,GAAwB,CAAEjpB,UAAWhlB,EAAEiJ,OAAO01B,QAASyP,mBAAoBD,MAC/D,iBAAZF,GAA8B,CAAEG,mBAAoBpuC,EAAEiJ,OAAO01B,QAAS3Z,SAAUkpB,OAErF,CACDZ,EAA4BD,EAC5BD,EAAwBD,EACxBD,EAA+BD,EAC/BY,IAGIQ,GAAkC9yC,EAAAA,EAAAA,KAAayE,IACnD4tC,EAAgC,CAC9B5oB,UAAWhlB,EAAEiJ,OAAO01B,YAErB,CAACiP,IAEEpyC,GAAOC,EAAAA,EAAAA,KAIb,OAFAic,EAAAA,EAAAA,IAAeH,EAAU6S,EAASiJ,EAAgBY,EAAAA,GAAAA,eAGhD,0BAAKr4B,UAAU,kCACb,0BAAKA,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAA/D,qBAGA,mBAAC2gC,GAAA,EAAD,CACExY,MAAM,oBAENid,SAAU3nC,EAAKgyC,EAAsB,gCAAkC,kCACvE7O,QAAS6O,EACTzkC,SAAW/I,IACT8tC,EAA8B,CAAEN,oBAAqBxtC,EAAEiJ,OAAO01B,aAGlE,mBAACD,GAAA,EAAD,CACExY,MAAM,wBACNvd,UAAW6kC,EAEXrK,SAAU3nC,EAAKiyC,EAAuB,gCAAkC,kCACxE9O,QAAS8O,EACT1kC,SAAW/I,IACT8tC,EAA8B,CAAEL,qBAAsBztC,EAAEiJ,OAAO01B,aAGnE,0BAAK/iC,UAAU,wBACb,mBAACwoC,GAAA,EAAD,CACEle,MAAM,QACNvd,UAAW6kC,EACX5qC,IAAK,EACLD,IAAK,GACLkG,MAAO6kC,EACP3kC,SAAWulC,IACTR,EAA8B,CAAEJ,wBAAyBY,SAKjE,0BAAK1yC,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAC5DvC,EAAK,6BAGR,mBAACkjC,GAAA,EAAD,CACExY,MAAO1qB,EAAK,gCAEZ2nC,SAAU3nC,EAAKyxC,EAA+B,gCAAkC,kCAChFtO,QAASsO,EACTlkC,SAAW/I,IAAQ+tC,EAAqB/tC,EAAG,UAAW,aAExD,mBAAC0+B,GAAA,EAAD,CACExY,MAAO1qB,EAAK,kBACZmN,UAAWskC,EAEX9J,SAAU3nC,EAAK0xC,EAAgC,gCAAkC,kCACjFvO,QAASuO,EACTnkC,SAAW/I,IAAQ+tC,EAAqB/tC,EAAG,UAAW,oBAI1D,0BAAKpE,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAAYvC,EAAK,iBAEhF,mBAACkjC,GAAA,EAAD,CACExY,MAAO1qB,EAAK,0BACZ2nC,SAAU3nC,EAAK2xC,EAAwB,gCAAkC,kCACzExO,QAASwO,EACTpkC,SAAW/I,IAAQ+tC,EAAqB/tC,EAAG,QAAS,aAEtD,mBAAC0+B,GAAA,EAAD,CACExY,MAAO1qB,EAAK,kBACZmN,UAAWwkC,EACXhK,SAAU3nC,EAAK4xC,EAAyB,gCAAkC,kCAC1EzO,QAASyO,EACTrkC,SAAW/I,IAAQ+tC,EAAqB/tC,EAAG,QAAS,oBAIxD,0BAAKpE,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAAYvC,EAAK,mBAEhF,mBAACkjC,GAAA,EAAD,CACExY,MAAO1qB,EAAK,4BAEZ2nC,SAAU3nC,EAAK6xC,EAA4B,gCAAkC,kCAC7E1O,QAAS0O,EACTtkC,SAAW/I,IAAQ+tC,EAAqB/tC,EAAG,YAAa,aAE1D,mBAAC0+B,GAAA,EAAD,CACExY,MAAO1qB,EAAK,kBACZmN,UAAW0kC,EAEXlK,SAAU3nC,EAAK8xC,EAA6B,gCAAkC,kCAC9E3O,QAAS2O,EACTvkC,SAAW/I,IAAQ+tC,EAAqB/tC,EAAG,YAAa,oBAI5D,0BAAKpE,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAAYvC,EAAK,eAEhF,mBAACkjC,GAAA,EAAD,CACExY,MAAO1qB,EAAK,iBACZmjC,QAAS4O,EACTxkC,SAAUslC,UCWpB,IAAe9xC,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IAAuB,cACtB,MACEwS,UACEC,OAAO,YAAEuhC,EAAF,mBAAeC,EAAf,mBAAmCC,GADlC,QAERC,GAHE,QAKJC,EALI,eAMJC,GACEr0C,EAEJ,MAAO,CACLg0C,YAAAA,EACAM,aAAcF,EAAQG,WACtBC,cAAeH,EAAe10C,OAC9Bs0C,mBAAAA,EACAC,mBAAAA,EACAO,6BAA4B,UAAEN,EAAQO,mBAAV,aAAE,EAAqBC,WACnDC,0BAAyB,UAAET,EAAQU,gBAAV,aAAE,EAAkBF,WAC7CG,8BAA6B,UAAEX,EAAQY,oBAAV,aAAE,EAAsBJ,WACrDK,4BAA2B,UAAEb,EAAQc,gBAAV,aAAE,EAAkBN,WAC/CO,4BAA2B,UAAEf,EAAQgB,kBAAV,aAAE,EAAoBR,eAGrD,CAACj0C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,sBAAuB,qBAAsB,sBAAuB,sBAAuB,2BAzB3EZ,EAhL+C,EACjEid,SAAAA,EACA8b,eAAAA,EACAjJ,QAAAA,EACAmkB,YAAAA,EACAM,aAAAA,EACAE,cAAAA,EACAP,mBAAAA,EACAC,mBAAAA,EACAO,6BAAAA,EACAG,0BAAAA,EACAE,8BAAAA,EACAE,4BAAAA,EACAE,4BAAAA,EACAE,oBAAAA,EACAC,oBAAAA,EACAC,mBAAAA,EACAC,oBAAAA,EACAC,sBAAAA,OAEA5wC,EAAAA,EAAAA,KAAU,KACRywC,IACAC,IACAF,IACAG,MACC,CAACF,EAAqBC,EAAoBF,EAAqBG,IAElE,MAAMt0C,GAAOC,EAAAA,EAAAA,KAIb,SAASu0C,EAAmBd,GAC1B,OAAQA,GACN,IAAK,YACH,OAAO1zC,EAAK,gBAEd,IAAK,WACH,OAAOA,EAAK,eAEd,IAAK,SACH,OAAOA,EAAK,cAMlB,OAjBAkc,EAAAA,EAAAA,IAAeH,EAAU6S,EAASiJ,EAAgBY,EAAAA,GAAAA,SAkBhD,0BAAKr4B,UAAU,kCACb,0BAAKA,UAAU,sBACb,mBAAC8d,GAAA,EAAD,CACEpb,KAAK,cACLk8B,QAAM,EACN3+B,QAAS,IAAMw3B,EAAeY,EAAAA,GAAAA,sBAE9B,0BAAKr4B,UAAU,uBACb,2BAAMA,UAAU,SAASJ,EAAK,iBAC7BqzC,EAAe,GACd,2BAAMjzC,UAAU,WAAWO,IAAI,QAC5BX,EAAK,QAASqzC,MAKvB,mBAACn1B,GAAA,EAAD,CACEpb,KAAK,OACLk8B,QAAM,EACN3+B,QAAS,IAAMw3B,EACbkb,EAActa,EAAAA,GAAAA,aAA+BA,EAAAA,GAAAA,gBAG/C,0BAAKr4B,UAAU,uBACb,2BAAMA,UAAU,SAASJ,EAAK,wBAC9B,2BAAMI,UAAU,WAAWO,IAAI,QAC5BX,EAAK+yC,EAAc,aAAe,kBAIzC,mBAAC70B,GAAA,EAAD,CACEpb,KAAK,kBACLk8B,QAAM,EACN3+B,QAAS,IAAMw3B,EAAeY,EAAAA,GAAAA,wBAE9B,0BAAKr4B,UAAU,uBACb,2BAAMA,UAAU,SAASJ,EAAK,kBAC7BuzC,EAAgB,GACf,2BAAMnzC,UAAU,WAAWO,IAAI,QACV,IAAlB4yC,EAAsB,YAAe,GAAEA,iBAOlD,0BAAKnzC,UAAU,iBACb,yBAAIA,UAAU,4BAA4BO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAAYvC,EAAK,iBAErF,mBAACke,GAAA,EAAD,CACE8gB,QAAM,EACN5+B,UAAU,UACVC,QAAS,IAAMw3B,EAAeY,EAAAA,GAAAA,qBAE9B,0BAAKr4B,UAAU,uBACb,2BAAMA,UAAU,SAASJ,EAAK,sBAC9B,2BAAMI,UAAU,WAAWO,IAAI,QAC5B6zC,EAAmBhB,MAI1B,mBAACt1B,GAAA,EAAD,CACE8gB,QAAM,EACN5+B,UAAU,UACVC,QAAS,IAAMw3B,EAAeY,EAAAA,GAAAA,kBAE9B,0BAAKr4B,UAAU,uBACb,2BAAMA,UAAU,SAASJ,EAAK,kBAC9B,2BAAMI,UAAU,WAAWO,IAAI,QAC5B6zC,EAAmBb,MAI1B,mBAACz1B,GAAA,EAAD,CACE8gB,QAAM,EACN5+B,UAAU,UACVC,QAAS,IAAMw3B,EAAeY,EAAAA,GAAAA,sBAE9B,0BAAKr4B,UAAU,uBACb,2BAAMA,UAAU,SAASJ,EAAK,6BAC9B,2BAAMI,UAAU,WAAWO,IAAI,QAC5B6zC,EAAmBX,MAI1B,mBAAC31B,GAAA,EAAD,CACE8gB,QAAM,EACN5+B,UAAU,UACVC,QAAS,IAAMw3B,EAAeY,EAAAA,GAAAA,oBAE9B,0BAAKr4B,UAAU,uBACb,2BAAMA,UAAU,SAASJ,EAAK,yBAC9B,2BAAMI,UAAU,WAAWO,IAAI,QAC5B6zC,EAAmBT,MAI1B,mBAAC71B,GAAA,EAAD,CACE8gB,QAAM,EACN5+B,UAAU,UACVC,QAAS,IAAMw3B,EAAeY,EAAAA,GAAAA,oBAE9B,0BAAKr4B,UAAU,uBACb,2BAAMA,UAAU,SAASJ,EAAK,gBAC9B,2BAAMI,UAAU,WAAWO,IAAI,QAC5B6zC,EAAmBP,OAM3BhB,GACC,0BAAK7yC,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAC5DvC,EAAK,iCAER,mBAACkjC,GAAA,EAAD,CACExY,MAAO1qB,EAAK,4CACZ2nC,SAAU3nC,EAAK,gCACfmjC,QAAS55B,QAAQypC,GACjB7lC,UAAW8lC,EACXpK,QAAS0L,UCjHrB,IAAexzC,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACQ,CACL01C,UAAW11C,EAAOwS,SAASC,MAAMijC,UACjCC,SAAU31C,EAAOwS,SAASC,MAAMkjC,aAGpC,CAACj1C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,gBAAiB,sBARDZ,EAhEgD,EAClEid,SAAAA,EACA8b,eAAAA,EACAjJ,QAAAA,EACA6lB,UAAAA,EACAC,SAAAA,EACAC,cAAAA,EACA7N,iBAAAA,MAEA,MAAO8N,EAAkBC,IAAuBnxC,EAAAA,EAAAA,IAAiBgxC,IAC1D3gB,EAAW+gB,EAAeC,IAAmB/wB,EAAAA,GAAAA,MAGpDrgB,EAAAA,EAAAA,KAAU,KACRgxC,MACC,CAACA,IAEJ,MAAMK,GAAej1C,EAAAA,EAAAA,KAAak1C,IAChCJ,EAAoBI,GACpBH,KAEKI,EAAAA,GAAAA,IAAYD,GAAsB,KACrCF,IAEAjO,EAAiB,CAAE4N,SAAUO,SAE9B,CAACH,EAAeC,EAAiBjO,IAE9Blc,GAAU3oB,EAAAA,EAAAA,KAAQ,IACfwyC,EAsBX,SAAsBA,GACpB,MAAMU,GAAmBhxC,OAAOixC,UAAUV,UAAY,MAAMW,cACtDC,EAAgBH,EAAgBI,OAAO,EAAG,GAEhD,OAAOd,EAAUx2B,KAAI,EAAGg3B,SAAAA,EAAUO,WAAAA,EAAYj5B,KAAAA,MAAzB,CACnBlP,MAAO4nC,EACPvqB,MAAO8qB,EACP7N,SAAUprB,MACRqW,MAAMC,IACDsiB,GAAoBtiB,EAAExlB,QAAU8nC,GAAmBtiB,EAAExlB,QAAUioC,EAAsB,GAAJ,IA/BrEG,CAAahB,QAAalyC,GAC5C,CAACkyC,IAIJ,OAFAv4B,EAAAA,EAAAA,IAAeH,EAAU6S,EAASiJ,EAAgBY,EAAAA,GAAAA,UAGhD,0BAAKr4B,UAAU,kEACZwqB,EACC,mBAACD,GAAA,EAAD,CACEpO,KAAK,yBACLqO,QAASA,EACTC,SAAU+pB,EACVc,cAAe3hB,EAAY6gB,OAAmBryC,EAC9CgL,SAAUynC,IAGZ,mBAACz2B,GAAA,EAAD,WCtED,SAASo3B,GAAcC,GAC5B,OAAQA,GACN,KAAKnd,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,iCACH,MAAO,cACT,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,8BACH,MAAO,WACT,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,kCACH,MAAO,eACT,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCACH,MAAO,WACT,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCACH,MAAO,cCQb,MAgLA,IAAe13B,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAU62C,OAAAA,MACT,IAAIC,EAEJ,MACEr3B,OAASC,KAAMC,GACfnN,UAAU,QAAE2hC,IACVn0C,EAEJ,OAAQ62C,GACN,KAAKnd,EAAAA,GAAAA,mBACHod,EAAkB3C,EAAQO,YAC1B,MAEF,KAAKhb,EAAAA,GAAAA,gBACHod,EAAkB3C,EAAQU,SAC1B,MAEF,KAAKnb,EAAAA,GAAAA,oBACHod,EAAkB3C,EAAQY,aAC1B,MAEF,KAAKrb,EAAAA,GAAAA,kBACHod,EAAkB3C,EAAQc,SAC1B,MAEF,KAAKvb,EAAAA,GAAAA,kBACHod,EAAkB3C,EAAQgB,WAI9B,OAAK2B,EAIE,IACFA,EACHn3B,UAAAA,GALO,MAQX,CAACjf,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,0BAxCpCZ,EAhLyD,EAC3E82C,OAAAA,EACA75B,SAAAA,EACA8b,eAAAA,EACAjJ,QAAAA,EACA8kB,WAAAA,EACAoC,aAAAA,EACAC,aAAAA,EACAC,aAAAA,EACAC,aAAAA,EACAv3B,UAAAA,EACAw3B,qBAAAA,MAEA,MAAMl2C,GAAOC,EAAAA,EAAAA,KAEPk2C,GAAoBl0C,EAAAA,EAAAA,KAAQ,KAChC,OAAQ2zC,GACN,KAAKnd,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBACH,MAAO,CACL,CAAEprB,MAAO,YAAaqd,MAAO1qB,EAAK,iBAClC,CAAEqN,MAAO,WAAYqd,MAAO1qB,EAAK,iBAGrC,QACE,MAAO,CACL,CAAEqN,MAAO,YAAaqd,MAAO1qB,EAAK,iBAClC,CAAEqN,MAAO,WAAYqd,MAAO1qB,EAAK,gBACjC,CAAEqN,MAAO,SAAUqd,MAAO1qB,EAAK,kBAGpC,CAACA,EAAM41C,IAEJQ,EAAiB,CACrBC,iBAAiC,WAAf3C,EAClB4C,kBAAkC,cAAf5C,GAGf6C,EAAaZ,GAAcC,GAE3BY,GAAav0C,EAAAA,EAAAA,KAAQ,KACzB,OAAQ2zC,GACN,KAAKnd,EAAAA,GAAAA,mBACH,OAAOz4B,EAAK,qBACd,KAAKy4B,EAAAA,GAAAA,gBACH,OAAOz4B,EAAK,iBACd,KAAKy4B,EAAAA,GAAAA,oBACH,OAAOz4B,EAAK,4BACd,KAAKy4B,EAAAA,GAAAA,kBACH,OAAOz4B,EAAK,wBACd,KAAKy4B,EAAAA,GAAAA,kBACH,OAAOz4B,EAAK,eACd,QACE,UAEH,CAACA,EAAM41C,KAEV15B,EAAAA,EAAAA,IAAeH,EAAU6S,EAASiJ,EAAgB+d,GAElD,MAAMa,GAAkBx0C,EAAAA,EAAAA,KAAQ,KAC9B,OAAQ2zC,GACN,KAAKnd,EAAAA,GAAAA,gBACH,OAAOz4B,EAAK,cACd,QACE,UAEH,CAACA,EAAM41C,IAEJc,EAAwB,MAC5B,OAAQd,GACN,KAAKnd,EAAAA,GAAAA,mBACH,OAAOA,EAAAA,GAAAA,kCACT,KAAKA,EAAAA,GAAAA,gBACH,OAAOA,EAAAA,GAAAA,+BACT,KAAKA,EAAAA,GAAAA,oBACH,OAAOA,EAAAA,GAAAA,mCACT,KAAKA,EAAAA,GAAAA,kBACH,OAAOA,EAAAA,GAAAA,iCACT,QACE,OAAOA,EAAAA,GAAAA,mCAXiB,GAexBke,EAAuB,MAC3B,OAAQf,GACN,KAAKnd,EAAAA,GAAAA,mBACH,OAAOA,EAAAA,GAAAA,iCACT,KAAKA,EAAAA,GAAAA,gBACH,OAAOA,EAAAA,GAAAA,8BACT,KAAKA,EAAAA,GAAAA,oBACH,OAAOA,EAAAA,GAAAA,kCACT,KAAKA,EAAAA,GAAAA,kBACH,OAAOA,EAAAA,GAAAA,gCACT,QACE,OAAOA,EAAAA,GAAAA,kCAXgB,GAevBme,GAAe30C,EAAAA,EAAAA,KAAQ,IACtB6zC,GAAiBC,GAAiBr3B,EAIhCq3B,EAAac,QAAO,CAACC,EAAQ93C,IAC3B83C,GAAUp4B,EAAU1f,GAAU0f,EAAU1f,GAAQ+3C,aAAgB,IACtEjB,EAAap3C,QALP,GAMR,CAACq3C,EAAcD,EAAcp3B,IAE1Bs4B,GAAa/0C,EAAAA,EAAAA,KAAQ,IACpB+zC,GAAiBC,GAAiBv3B,EAIhCu3B,EAAaY,QAAO,CAACC,EAAQ93C,IAC3B83C,GAAUp4B,EAAU1f,GAAU0f,EAAU1f,GAAQ+3C,aAAgB,IACtEf,EAAat3C,QALP,GAMR,CAACu3C,EAAcD,EAAct3B,IAE1Bu4B,GAAyBl3C,EAAAA,EAAAA,KAAasN,IAC1C6oC,EAAqB,CACnBK,WAAAA,EACA7C,WAAYrmC,MAEb,CAACkpC,EAAYL,IAEhB,OACE,0BAAK91C,UAAU,kCACb,0BAAKA,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAAYi0C,GAE3E,mBAAC7rB,GAAA,EAAD,CACEpO,KAAO,cAAag6B,IACpB3rB,QAASurB,EACT5oC,SAAU0pC,EACVpsB,SAAU6oB,IAGX+C,GACC,wBAAGr2C,UAAU,mCAAmCO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAAYk0C,IAI1F,0BAAKr2C,UAAU,iBACb,yBAAIA,UAAU,4BAA4BO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAAYvC,EAAK,sBAEpFo2C,EAAeE,mBACd,mBAACp4B,GAAA,EAAD,CACE8gB,QAAM,EACNl8B,KAAK,WACLzC,QAAS,KAAQw3B,EAAe6e,KAEhC,0BAAKt2C,UAAU,iCACZw2C,EAAe,GAAK,2BAAMx2C,UAAU,OAAOO,IAAI,QAA3B,IAAoCi2C,GACzD,2BAAMx2C,UAAU,SAASJ,EAAK,oBAC9B,2BAAMI,UAAU,YAAYJ,EAAK,wBAItCo2C,EAAeC,kBACd,mBAACn4B,GAAA,EAAD,CACE8gB,QAAM,EACNl8B,KAAK,cACLzC,QAAS,KAAQw3B,EAAe8e,KAEhC,0BAAKv2C,UAAU,iCACZ42C,EAAa,GAAK,2BAAM52C,UAAU,OAAOO,IAAI,QAA3B,IAA0Cq2C,GAC7D,2BAAM52C,UAAU,SAASJ,EAAK,mBAC9B,2BAAMI,UAAU,YAAYJ,EAAK,8BChD/C,SAASk3C,GAAYC,GACnB,MAAO,CAACA,EAAQC,OAAQD,EAAQE,SAAS16B,OAAOpT,SAASmD,KAAK,MAGhE,SAAS4qC,GAAqBH,GAC5B,MAAQ,GAAEA,EAAQI,cAAcJ,EAAQI,YAAc,KAAO,MAAMJ,EAAQK,YAAYL,EAAQM,gBAGjG,UAAe12C,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACQ,CACLq0C,eAAgBr0C,EAAOq0C,mBAG3B,CAAC3zC,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,qBAAsB,yBAA0B,gCAPhCZ,EA9H6D,EAC/Eid,SAAAA,EACA8b,eAAAA,EACAjJ,QAAAA,EACAwkB,eAAAA,EACAiB,mBAAAA,EACAqD,uBAAAA,EACAC,2BAAAA,MAEA,MAAOC,EAAiCC,EAA+BC,IAAkC9zB,EAAAA,GAAAA,MACzGrgB,EAAAA,EAAAA,KAAU,KACR0wC,MACC,CAACA,IAEJ,MAAM0D,GAA8Bh4C,EAAAA,EAAAA,KAAaygB,IAC/Ck3B,EAAuB,CAAEl3B,KAAAA,MACxB,CAACk3B,IAEEM,GAA6Bj4C,EAAAA,EAAAA,KAAY,KAC7C+3C,IACAH,MACC,CAACG,EAAgCH,IAE9BM,GAAiBh2C,EAAAA,EAAAA,KAAQ,IACtBmxC,EAAerQ,MAAMoU,GAAYA,EAAQe,aAC/C,CAAC9E,IAEE+E,GAAgBl2C,EAAAA,EAAAA,KAAQ,IACrBmxC,EAAez2B,QAAQw6B,IAAaA,EAAQe,aAClD,CAAC9E,IAEEpzC,GAAOC,EAAAA,EAAAA,KAqEb,OAnEAic,EAAAA,EAAAA,IAAeH,EAAU6S,EAASiJ,EAAgBY,EAAAA,GAAAA,uBAoEhD,0BAAKr4B,UAAU,kCACZ63C,IAnEyBd,EAmEcc,EAjExC,0BAAK73C,UAAU,iBACb,yBAAIA,UAAU,4BAA4BO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GACjEvC,EAAK,gCAGR,mBAACke,GAAA,EAAD,CAAU8gB,QAAM,EAAC4C,UAAQ,EAACxhC,UAAU,WAClC,0BAAKA,UAAU,sBAAsBO,IAAI,QACvC,2BAAMP,UAAU,QAAQO,IAAI,QAAQw2C,EAAQiB,SAC5C,2BAAMh4C,UAAU,wBAAwBk3C,GAAqBH,IAC7D,2BAAM/2C,UAAU,YAAY+2C,EAAQkB,GAApC,MAA2CnB,GAAYC,MAI3D,mBAACj5B,GAAA,EAAD,CACE9d,UAAU,2BACV0C,KAAK,OACLmF,QAAM,EACN+2B,QAAM,EACN3+B,QAASw3C,GAER73C,EAAK,2BA8CTm4C,IAxCwBG,EAwCaH,EAtCtC,0BAAK/3C,UAAU,iBACb,yBAAIA,UAAU,4BAA4BO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GACjEvC,EAAK,kBAGPs4C,EAASr6B,KAKhB,SAAuBk5B,GACrB,OACE,mBAACj5B,GAAA,EAAD,CACE3d,IAAK42C,EAAQ32B,KACbvY,QAAM,EACN+2B,QAAM,EACNrR,eAAgB,CAAC,CACflN,MAAO,YACP3d,KAAM,OACNy1C,QAAS,KACPR,EAA4BZ,EAAQ32B,SAGxCpgB,UAAU,WAEV,0BAAKA,UAAU,gCAAgCO,IAAI,QACjD,2BAAMP,UAAU,SAAQ6vB,EAAAA,EAAAA,IAAoBjwB,EAA2B,IAArBm3C,EAAQqB,aAC1D,2BAAMp4C,UAAU,SAAS+2C,EAAQiB,SACjC,2BAAMh4C,UAAU,wBAAwBk3C,GAAqBH,IAC7D,2BAAM/2C,UAAU,YAAY+2C,EAAQkB,GAApC,MAA2CnB,GAAYC,WAU1DgB,GACC,mBAACv2B,GAAA,EAAD,CACEzf,OAAQy1C,EACRjvC,QAASmvC,EACTz0C,KAAK,yDACLwe,aAAa,+BACbC,eAAgBk2B,EAChBrf,sBAAoB,KAhD5B,IAA6B2f,EA5BCnB,M,eCrChC,MAsEA,IAAep2C,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MACE0vB,OACEhQ,KAAM+P,GAER2kB,SACEnP,IAAKyU,GALH,YAOJ5nB,EAPI,cAQJrU,GACEzd,EAEJ,MAAO,CACLyvB,UAAAA,EACAiqB,WAAAA,EACAC,WAAY7nB,MAAAA,OAAF,EAAEA,EAAaxC,QACzBuC,gBAAiB7xB,EAAO45C,WAAWvnB,aACnC5U,cAAAA,MAGJ,CAAC/c,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,kBAAmB,qBAAsB,kBAtBzBZ,EAtE8C,EAChE0vB,UAAAA,EACAiqB,WAAAA,EACAC,WAAAA,EACA9nB,gBAAAA,EACApU,cAAAA,EACAra,OAAAA,EACAwG,QAAAA,EACAmmB,gBAAAA,EACA8pB,mBAAAA,EACAC,aAAAA,MAEA,MAAM74C,GAAOC,EAAAA,EAAAA,MACN0c,EAAQ0C,IAAa3b,EAAAA,EAAAA,IAAS,IAE/BgZ,GAAYtW,EAAAA,EAAAA,IAAyB,OAE3CzC,EAAAA,EAAAA,KAAU,KACRi1C,EAAmB,CAAE3mB,MAAOtV,MAC3B,CAACA,EAAQi8B,IAEZ,MAAME,GAAqB72C,EAAAA,EAAAA,KAAQ,KACjC,MAAM82C,GAAuBL,GAAc,IAAIM,OAAOpoB,GAAmB,IAAIjU,QAAQs8B,IAC3ER,EAAWh7C,SAASw7C,IAAcA,IAAcz8B,IAG1D,OAAOgD,EAAAA,EAAAA,IAAOu5B,GAAqBlC,QAAiB,CAACqC,EAAKD,KAAc,MAUtE,QARGt8B,IACG6R,EAAUyqB,KACXr5B,EAAAA,GAAAA,IAAY4S,EAAAA,EAAAA,IAAgBhE,EAAUyqB,KAAe,GAAIt8B,IAF5D,UAGG6R,EAAUyqB,UAHb,OAGG,EAAsBxmB,SAAS4iB,cAAc53C,SAASkf,KAEzDu8B,EAAIxzB,KAAKuzB,GAGJC,IACN,IACAtmB,MAAK,CAACumB,EAASC,KACd,MAAM1e,GAAYlI,EAAAA,EAAAA,IAAgBhE,EAAU2qB,KAAa,GACnDE,GAAa7mB,EAAAA,EAAAA,IAAgBhE,EAAU4qB,KAAc,GAE3D,OAAO1e,EAAU4e,cAAcD,QAElC,CAACZ,EAAYC,EAAYl8B,EAAeG,EAAQiU,EAAiBpC,IAE9D+qB,GAAmBx5C,EAAAA,EAAAA,KAAase,IACpC,MAAQ7gB,GAAIy7C,EAAN,WAAiBO,GAAehrB,EAAUnQ,IAAW,GACtD46B,GAAcO,IAGnBX,EAAa,CAAEI,UAAAA,EAAWO,WAAAA,IAC1B7wC,OACC,CAACkwC,EAAclwC,EAAS6lB,IAE3B,OACE,mBAAC,GAAD,CACErsB,OAAQA,EACRsa,cAAeq8B,EACfp8B,UAAWA,EACXE,kBAAmB5c,EAAK,0BACxB2c,OAAQA,EACRE,eAAgBwC,EAChBvC,SAAUgS,EACV/R,mBAAoBw8B,EACpB5wC,QAASA,QCyCf,IAAe5H,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MACEyf,OACEC,KAAMg7B,GAERhrB,OACEhQ,KAAMi7B,GAERvG,SAAS,IACPnP,GAEF2V,aACEC,WAAYC,IAEZ96C,EAEJ,MAAO,CACL06C,WAAAA,EACAC,WAAAA,EACAjB,WAAYzU,EACZ6V,cAAAA,MAGJ,CAACp6C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,oBAxBpCZ,EA9F2D,EAC7Eid,SAAAA,EACA8b,eAAAA,EACAjJ,QAAAA,EACA6qB,WAAAA,EACAC,WAAAA,EACAjB,WAAAA,EACAoB,cAAAA,EACAC,eAAAA,MAEA,MAAM95C,GAAOC,EAAAA,EAAAA,MACN85C,EAAsBC,EAAoBC,IAAuBj2B,EAAAA,GAAAA,KAClEk2B,GAAqBn6C,EAAAA,EAAAA,KAAak5C,IACtCa,EAAe,CAAEb,UAAAA,MAChB,CAACa,IA2CJ,OAzCA59B,EAAAA,EAAAA,IAAeH,EAAU6S,EAASiJ,EAAgBY,EAAAA,GAAAA,qBA0ChD,0BAAKr4B,UAAU,wBACb,0BAAKA,UAAU,oCACb,0BAAKA,UAAU,iBACb,wBAAGA,UAAU,6CAA6CO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GACjFvC,EAAK,sBAIV,0BAAKI,UAAU,2BACZq4C,MAAAA,GAAAA,EAAY/5C,OACX,0BAAK0B,UAAU,oBACZq4C,EAAYx6B,KAAI,CAACg7B,EAAWxzB,IAnDzC,SAAuBwzB,EAAmBxzB,EAAW00B,GACnD,MAAMC,GAAYh7C,EAAAA,EAAAA,IAAS65C,GACrBx4C,EAAO25C,EAAYV,EAAWT,QAAa12C,EAC3C7B,EAAQ05C,OAAoC73C,EAAxBk3C,EAAWR,GAE/B74C,GAAYmE,EAAAA,EAAAA,GAChB,wDACA61C,EAAY,UAAY,SAG1B,OACE,mBAACl8B,GAAA,EAAD,CACE3d,IAAK04C,EACL74C,UAAWA,EACX6H,QAAM,EACN+2B,QAAM,EACNrR,eAAgB,CAAC,CACflN,MAAO,UACP3d,KAAM,SACNy1C,QAAS,KACP2B,EAAmBjB,MAGvB/6C,MAAQ,SA4B6D,EA5BpCunB,GAAK40B,EAAAA,SAEtC,mBAAC/5C,EAAA,EAAD,CAAQE,KAAK,SAASC,KAAMA,EAAMC,KAAMA,IACxC,0BAAKN,UAAU,eAAeO,IAAI,QAChC,yBAAIA,IAAI,SAAQC,EAAAA,EAAAA,IAAYw5C,GAAY5nB,EAAAA,EAAAA,IAAgB/xB,IAAQof,EAAAA,EAAAA,GAAa7f,EAAMU,KAAW,MAC7FD,MAAAA,OAAA,EAAAA,EAAMgzC,cACL,0BAAKrzC,UAAU,gBAAgBO,IAAI,SAAQ25C,EAAAA,GAAAA,IAA0BT,EAAep5C,EAAKgzC,cAE1FhzC,IAASA,EAAKgzC,aAAehzC,EAAKgyB,UACjC,0BAAKryB,UAAU,mBAAmBO,IAAI,QAAtC,IAA+CF,EAAKgyB,YAmBf8nB,CAActB,EAAWxzB,MAE5DgzB,IAAeA,EAAW/5C,OAC5B,0BAAK0B,UAAU,aAAaO,IAAI,QAAQX,EAAK,cAE7C,mBAACue,GAAA,EAAD,CAAShe,IAAI,cAKnB,mBAACq8B,GAAA,EAAD,CACEhwB,SAAO,EACPvM,QAAS25C,EACTx3C,UAAWxC,EAAK,iBAEhB,wBAAGI,UAAU,cAEf,mBAAC,GAAD,CACE+B,OAAQ43C,EACRpxC,QAASsxC,S,eC1GjB,MAyCA,IAAel5C,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAAsBC,IACjC,CACLy7C,eAAeC,EAAAA,EAAAA,IAAoB17C,EAAQ,SAF3BD,EAzCoC,EACtDid,SAAAA,EAAU6S,QAAAA,EAAS4rB,cAAAA,EAAe3iB,eAAAA,MAElC,MAAM73B,GAAOC,EAAAA,EAAAA,KAIb,OAFAic,EAAAA,EAAAA,IAAeH,EAAU6S,EAASiJ,EAAgBY,EAAAA,GAAAA,cAGhD,0BAAKr4B,UAAU,yCACb,0BAAKA,UAAU,2BACb,mBAACs6C,GAAA,EAAD,CAAe/U,QAAS6U,EAAeh6C,KAAK,UAE5C,wBAAGJ,UAAU,iCAAiCO,IAAI,SAC/CC,EAAAA,EAAAA,GAAWZ,EAAK,uBAAwB,CAAC,SAI9C,0BAAKI,UAAU,gCACb,mBAAC8d,GAAA,EAAD,CACEpb,KAAK,OACLzC,QAAS,IAAMw3B,EAAeY,EAAAA,GAAAA,6BAE7Bz4B,EAAK,mBAER,mBAACke,GAAA,EAAD,CACEpb,KAAK,eACLzC,QAAS,IAAMw3B,EAAeY,EAAAA,GAAAA,eAE7Bz4B,EAAK,oBAER,mBAACke,GAAA,EAAD,CACEpb,KAAK,QACLzC,QAAS,IAAMw3B,EAAeY,EAAAA,GAAAA,oCAE7Bz4B,EAAK,2B,0BC/BhB,MA6DA,IAAee,EAAAA,EAAAA,KA3D6B,EAC1C60C,OAAAA,EACA75B,SAAAA,EACA8b,eAAAA,EACAjJ,QAAAA,EACA5O,MAAAA,EACA+T,UAAAA,EACA4mB,iBAAAA,EACAj9B,YAAAA,EAAc,mBACdwZ,KAAAA,EACA0jB,YAAAA,EACAC,WAAAA,EACAr3B,SAAAA,MAEA,MAAOs3B,EAAiBC,IAAsBr3C,EAAAA,EAAAA,IAAiB,KACxDs3C,EAAoBC,IAAyBv3C,EAAAA,EAAAA,KAAS,GAEvDw3C,GAAen7C,EAAAA,EAAAA,KAAao7C,IAC5BR,GAAoBQ,IAAgBR,EACtCI,EArBuB,6BAuBvBv3B,EAAS23B,KAEV,CAAC33B,EAAUm3B,IAERS,GAAmBr7C,EAAAA,EAAAA,KAAY,KAC/B86C,GACFA,IAEFE,EAAmB,MAClB,CAACF,IAEE76C,GAAOC,EAAAA,EAAAA,KAIb,OAFAic,EAAAA,EAAAA,IAAeH,EAAU6S,EAASiJ,EAAgB+d,GAGhD,0BAAKx1C,UAAU,yCACb,0BAAKA,UAAU,2BACb,mBAACi7C,GAAA,EAAD,CAAgBC,OAAK,EAACC,kBAAmBP,KAG3C,0BAAK56C,UAAU,gCACb,mBAACo7C,GAAA,EAAD,CACEx7B,MAAO86B,GAAmB96B,EAC1BkX,KAAMA,EACNxZ,YAAaA,EACbk9B,YAAaA,GAAe56C,EAAK,QACjC66C,WAAYO,EACZrnB,UAAWA,EACXwnB,kBAAmBP,EACnBS,2BAA4BR,EAC5Bz3B,SAAU03B,SCjCpB,IAAen6C,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAAsBC,IACjC,CACLy7C,eAAeC,EAAAA,EAAAA,IAAoB17C,EAAQ,SAF3BD,EAxBkC,EACpDid,SAAAA,EAAU8b,eAAAA,EAAgBjJ,QAAAA,EAAS4rB,cAAAA,EAAekB,QAAAA,MAElD,MAAM17C,GAAOC,EAAAA,EAAAA,KAIb,OAFAic,EAAAA,EAAAA,IAAeH,EAAU6S,EAASiJ,EAAgBY,EAAAA,GAAAA,eAGhD,0BAAKr4B,UAAU,yCACb,0BAAKA,UAAU,2BACb,mBAACs6C,GAAA,EAAD,CAAe/U,QAAS6U,EAAeh6C,KAAK,UAE5C,wBAAGJ,UAAU,iCAAiCO,IAAI,QAC/CX,EAAK,+BAIV,0BAAKI,UAAU,gCACb,mBAACgC,EAAA,EAAD,CAAQ/B,QAASq7C,GAAU17C,EAAK,uCCHlC27C,GAAyBl5C,EAAAA,GAA0B,IAAM,IA8H/D,IAAe1B,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAAqB,CAACC,GAAU+D,KAAAA,MAC3C,CACL03C,eAAeC,EAAAA,EAAAA,IAAoB17C,EAAiB,UAAT+D,EAAmB,KAAO,SAFrDhE,EA5H0C,EAC5D07C,cAAAA,EACAltC,KAAAA,EAAO,OACPymB,UAAAA,EACA/T,MAAAA,EACAtC,YAAAA,EACAk+B,cAAAA,EACAf,WAAAA,EACAr3B,SAAAA,EACAzH,SAAAA,EACA8b,eAAAA,EACAjJ,QAAAA,EACAgnB,OAAAA,MAGA,MAAM5oC,GAAW5G,EAAAA,EAAAA,IAAyB,OAEnCiH,EAAOwuC,IAAYn4C,EAAAA,EAAAA,IAAiB,KACpCo4C,EAAgBC,EAAoBC,IAAwBh4B,EAAAA,GAAAA,IAAQ,IAE3ErgB,EAAAA,EAAAA,KAAU,KACHmF,EAAAA,IACHvC,YAAW,KACTyG,EAASpG,QAAS47B,UACjBmZ,MAEJ,IAEH,MA2BM37C,GAAOC,EAAAA,EAAAA,KAIb,OAFAic,EAAAA,EAAAA,IAAeH,EAAU6S,EAASiJ,EAAgB+d,GAGhD,0BAAKx1C,UAAU,yCACb,0BAAKA,UAAU,2BACb,mBAACs6C,GAAA,EAAD,CAAe/U,QAAS6U,EAAeh6C,KAAK,WAG9C,0BAAKJ,UAAU,gCACb,2BAAMk3B,OAAO,GAAG9T,SA9BAhf,IACpBA,EAAEqH,iBAEGmB,EAASpG,SAId4c,EAASnW,KAwBH,mBAACmQ,GAAA,EAAD,CACEzV,IAAKiF,EACLK,MAAOA,EACPuZ,UAAWtZ,EACXod,MAAOhN,EACPsC,MAAOA,EACPzS,SA7CiB/I,IACrBwb,GAAS66B,GACXA,IAGFgB,EAASr3C,EAAEiJ,OAAOJ,UA2CXA,EACC,mBAACjL,EAAA,EAAD,CAAQkL,KAAK,SAASymB,UAAWA,EAAW9rB,QAAM,GAAEjI,EAAK,aAEzD,mBAACoC,EAAA,EAAD,CACE0e,QAAM,EACNiT,UAAWA,EACX9rB,QAAM,EACN5H,QAASu7C,EAAgBG,EArClB,KACjBv4B,MAsCWxjB,EAAK,mBAIX47C,GACC,mBAACj+B,GAAA,EAAD,CACEvd,UAAU,SACV+B,OAAQ25C,EACRr7B,MAAOzgB,EAAK,wBACZ2I,QAASqzC,IAERp7C,EAAAA,EAAAA,GAAWZ,EAAK,4BAA6B,CAAC,KAAM,oBACrD,0BAAKI,UAAU,kBACb,mBAACgC,EAAA,EAAD,CACEE,MAAM,SACN2F,QAAM,EACN6Y,QAAM,EACN1gB,UAAU,wBACVC,QArDY,KACxB27C,IACAx4B,MAqDaxjB,EAAK,kBAER,mBAACoC,EAAA,EAAD,CACEE,MAAM,UACN2F,QAAM,EACN6Y,QAAM,EACN1gB,UAAU,wBACVC,QAAS27C,GAERh8C,EAAK,mBCxGtB,IAAee,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAAsBC,IACjC,CACLy7C,eAAeC,EAAAA,EAAAA,IAAoB17C,EAAQ,SAF3BD,EA5B4C,EAC9Did,SAAAA,EAAU6S,QAAAA,EAAS4rB,cAAAA,EAAe3iB,eAAAA,MAElC,MAAM73B,GAAOC,EAAAA,EAAAA,KAQb,OAFAic,EAAAA,EAAAA,IAAeH,EAAU6S,EAASiJ,EAAgBY,EAAAA,GAAAA,sBAGhD,0BAAKr4B,UAAU,yCACb,0BAAKA,UAAU,2BACb,mBAACs6C,GAAA,EAAD,CAAe/U,QAAS6U,EAAeh6C,KAAK,UAE5C,wBAAGJ,UAAU,iCAAiCO,IAAI,QAC/CX,EAAK,wCAIV,0BAAKI,UAAU,gCACb,mBAACgC,EAAA,EAAD,CAAQ/B,QAjBM,KAClBw3B,EAAeY,EAAAA,GAAAA,WAgBoBz4B,EAAK,oDCZtC27C,GAAyBl5C,EAAAA,GAA0B,IAAM,IAmE/D,IAAe1B,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAAsBC,IACjC,CACLy7C,eAAeC,EAAAA,EAAAA,IAAoB17C,EAAQ,MAC3Ck9C,WAAYl9C,EAAOm9C,cAAcC,0BAHjBr9C,EAjEsC,EACxD07C,cAAAA,EACAyB,WAAAA,EACAloB,UAAAA,EACA/T,MAAAA,EACA66B,WAAAA,EACAr3B,SAAAA,EACAzH,SAAAA,EACA8b,eAAAA,EACAjJ,QAAAA,EACAgnB,OAAAA,MAGA,MAAM5oC,GAAW5G,EAAAA,EAAAA,IAAyB,OAEnCiH,EAAOwuC,IAAYn4C,EAAAA,EAAAA,IAAiB,KAE3CC,EAAAA,EAAAA,KAAU,KACHmF,EAAAA,IACHvC,YAAW,KACTyG,EAASpG,QAAS47B,UACjBmZ,MAEJ,IAEH,MAAM37C,GAAOC,EAAAA,EAAAA,KAmBb,OAjBAic,EAAAA,EAAAA,IAAeH,EAAU6S,EAASiJ,EAAgB+d,GAkBhD,0BAAKx1C,UAAU,yCACb,0BAAKA,UAAU,2BACb,mBAACs6C,GAAA,EAAD,CAAe/U,QAAS6U,EAAeh6C,KAAK,WAG9C,0BAAKJ,UAAU,gCACb,mBAACod,GAAA,EAAD,CACEnQ,MAAOA,EACPtF,IAAKiF,EACL4Z,UAAU,UACV8D,MAAO1qB,EAAK,iBACZggB,MAAOA,EACPzS,SA5BmB/I,IACrBwb,GAAS66B,GACXA,IAGF,MAAMuB,EAAW53C,EAAEiJ,OAAOJ,MAAMyoB,MAAM,EAAGmmB,GAErCG,EAAS19C,SAAWu9C,GACtBz4B,EAAS44B,GAGXP,EAASO,GACT53C,EAAEiJ,OAAOJ,MAAQ+uC,KAkBZroB,GAAa,mBAACxV,GAAA,EAAD,YCqVtB,IAAexd,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IAAD,IAA8BA,EAAOm9C,kBACrC,CAACz8C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,iBAAkB,sBAAuB,gBAAiB,wBAC1D,gBAAiB,qBAJDZ,EA/Y6C,EAC/D04B,cAAAA,EACA8M,YAAAA,EACAjN,MAAAA,EACAH,KAAAA,EACAnD,UAAAA,EACA/T,MAAAA,EACAm8B,uBAAAA,EACA1c,SAAAA,EACA1jB,SAAAA,EACA8b,eAAAA,EACAjJ,QAAAA,EACAytB,eAAAA,EACAC,cAAAA,EACAC,gBAAAA,EACAC,oBAAAA,EACAC,sBAAAA,EACAC,cAAAA,OAEA/4C,EAAAA,EAAAA,KAAU,KACJw4C,IACE3kB,IAAkBiB,EAAAA,GAAAA,sBACpBZ,EAAeY,EAAAA,GAAAA,2BACNjB,IAAkBiB,EAAAA,GAAAA,oBAC3BZ,EAAeY,EAAAA,GAAAA,2BAGlB,CAACjB,EAAeK,EAAgBskB,IAEnC,MAAMQ,GAAoB58C,EAAAA,EAAAA,KAAY,KACpC0/B,EAAS,CAAEnyB,KAAM,UACjBuqB,EAAeY,EAAAA,GAAAA,oBACd,CAACgH,EAAU5H,IAER+kB,GAAoB78C,EAAAA,EAAAA,KAAasN,IACrCoyB,EAAS,CAAEnyB,KAAM,cAAeiqB,QAASlqB,IACzCwqB,EAAeY,EAAAA,GAAAA,2BACd,CAACgH,EAAU5H,IAERglB,GAA2B98C,EAAAA,EAAAA,KAAY,KAC3C83B,EAAeY,EAAAA,GAAAA,wBACd,CAACZ,IAEEilB,GAAwB/8C,EAAAA,EAAAA,KAAasN,IACzCoyB,EAAS,CAAEnyB,KAAM,UAAWiqB,QAASlqB,IACrCwqB,EAAeY,EAAAA,GAAAA,yBACd,CAACgH,EAAU5H,IAERklB,GAAyBh9C,EAAAA,EAAAA,KAAasN,IAC1CoyB,EAAS,CAAEnyB,KAAM,WAAYiqB,QAASlqB,IACtCgvC,EAAe,IACVhlB,EACHF,MAAO9pB,EACP2vC,UAAW,KACTnlB,EAAeY,EAAAA,GAAAA,2BAGlB,CAACgH,EAAU5H,EAAgBR,EAAOglB,IAE/BY,GAA8Bl9C,EAAAA,EAAAA,KAAasN,IAC/CoyB,EAAS,CAAEnyB,KAAM,qBAAsBiqB,QAASlqB,IAChDivC,EAAc,CACZtlB,gBAAiB3pB,EACjB2vC,UAAW,KACTnlB,EAAeY,EAAAA,GAAAA,6BAGlB,CAAC6jB,EAAe7c,EAAU5H,IAEvBqlB,GAA0Bn9C,EAAAA,EAAAA,KAAasN,IAC3CoyB,EAAS,CAAEnyB,KAAM,cAAeiqB,QAASlqB,IACzCwqB,EAAeY,EAAAA,GAAAA,8BACd,CAACgH,EAAU5H,IAERslB,GAA8Bp9C,EAAAA,EAAAA,KAAY,KAC9C83B,EAAeY,EAAAA,GAAAA,2BACd,CAACZ,IAEEulB,GAA2Br9C,EAAAA,EAAAA,KAAasN,IAC5CoyB,EAAS,CAAEnyB,KAAM,UAAWiqB,QAASlqB,IACrCgvC,EAAe,IACVhlB,EACHH,KAAM7pB,EACN2vC,UAAW,KACTnlB,EAAeY,EAAAA,GAAAA,2BAGlB,CAACgH,EAAU5H,EAAgBR,EAAOglB,IAE/BgB,GAAgBt9C,EAAAA,EAAAA,KAAasN,IACjCqvC,EAAc,CACZ1lB,gBAAiB3pB,EACjB2vC,UAAW,KACTnlB,EAAeY,EAAAA,GAAAA,cAGlB,CAACikB,EAAe7kB,IAEbylB,GAAqCv9C,EAAAA,EAAAA,KAAasN,IACtDoyB,EAAS,CAAEnyB,KAAM,qBAAsBiqB,QAASlqB,IAChDivC,EAAc,CACZtlB,gBAAiB3pB,EACjB2vC,UAAW,KACTnlB,EAAeY,EAAAA,GAAAA,yBAGlB,CAAC6jB,EAAe7c,EAAU5H,IAEvB0lB,GAAsBx9C,EAAAA,EAAAA,KAAasN,IACvCoyB,EAAS,CAAEnyB,KAAM,WAAYiqB,QAASlqB,IACtCmvC,EAAoB,IACfnlB,EACHF,MAAO9pB,EACP2vC,UAAW,KACTnlB,EAAeY,EAAAA,GAAAA,2BAGlB,CAACgH,EAAU5H,EAAgBR,EAAOmlB,IAE/BgB,GAAkBz9C,EAAAA,EAAAA,KAAainB,IACnCy1B,EAAsB,CAAEz1B,KAAAA,MACvB,CAACy1B,IAEEz8C,GAAOC,EAAAA,EAAAA,KAEb,OAAQu3B,GACN,KAAKiB,EAAAA,GAAAA,cACH,OACE,mBAAC,GAAD,CACEijB,QAASiB,EACT9kB,eAAgBA,EAChB9b,SAAUA,GAAY,CACpB0c,EAAAA,GAAAA,iBACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACAh7B,SAAS6mC,GACX1V,QAASA,IAIf,KAAK6J,EAAAA,GAAAA,iBACH,OACE,mBAAC,GAAD,CACEmd,OAAQpe,EACR9Z,YAAa1d,EAAK,uBAClB46C,YAAa56C,EAAK,YAClBwjB,SAAUo5B,EACV/kB,eAAgBA,EAChB9b,SAAUA,GAAY,CACpB0c,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACAh7B,SAAS6mC,GACX1V,QAASA,IAIf,KAAK6J,EAAAA,GAAAA,wBACH,OACE,mBAAC,GAAD,CACEmd,OAAQpe,EACRmjB,iBAAkBtjB,EAAMJ,SACxBvZ,YAAa1d,EAAK,yBAClB46C,YAAa56C,EAAK,YAClBwjB,SAAUq5B,EACVhlB,eAAgBA,EAChB9b,SAAUA,GAAY,CACpB0c,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACAh7B,SAAS6mC,GACX1V,QAASA,IAIf,KAAK6J,EAAAA,GAAAA,qBACH,OACE,mBAAC,GAAD,CACE31B,KAAK,OACL4a,YAAa1d,EAAK,2BAClBwjB,SAAUs5B,EACVlH,OAAQpe,EACRK,eAAgBA,EAChB9b,SAAUA,GAAY,CACpB0c,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACAh7B,SAAS6mC,GACX1V,QAASA,IAIf,KAAK6J,EAAAA,GAAAA,sBACH,OACE,mBAAC,GAAD,CACE31B,KAAK,QACLwK,KAAK,QACLymB,UAAWA,EACX/T,MAAOA,EACP66B,WAAY0B,EACZ7+B,YAAa1d,EAAK,sBAClB47C,eAAa,EACbp4B,SAAUu5B,EACVnH,OAAQpe,EACRK,eAAgBA,EAChB9b,SAAUA,GAAY,CACpB0c,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACAh7B,SAAS6mC,GACX1V,QAASA,IAIf,KAAK6J,EAAAA,GAAAA,0BACH,OACE,mBAAC,GAAD,CACE1E,UAAWA,EACX/T,MAAOA,EACP66B,WAAY0B,EACZ/4B,SAAUg6B,EACV5H,OAAQpe,EACRK,eAAgBA,EAChB9b,SAAUA,GAAYuoB,IAAgB7L,EAAAA,GAAAA,qBACtC7J,QAASA,IAIf,KAAK6J,EAAAA,GAAAA,qBACH,OACE,mBAAC,GAAD,CACEZ,eAAgBA,EAChB9b,SAAUA,EACV6S,QAASA,IAIf,KAAK6J,EAAAA,GAAAA,aACH,OACE,mBAAC,GAAD,CACEZ,eAAgBA,EAChB9b,SAAUA,GAAY,CACpB0c,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,aACAA,EAAAA,GAAAA,kCACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,sBACAh7B,SAAS6mC,GACX1V,QAASA,IAIf,KAAK6J,EAAAA,GAAAA,2BACH,OACE,mBAAC,GAAD,CACEmd,OAAQpe,EACRzD,UAAWA,EACX/T,MAAOA,EACP66B,WAAY0B,EACZrlB,KAAMA,EACN1T,SAAUy5B,EACVplB,eAAgBA,EAChB9b,SAAUA,GAAY,CACpB0c,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,sBACAh7B,SAAS6mC,GACX1V,QAASA,IAIf,KAAK6J,EAAAA,GAAAA,uBACH,OACE,mBAAC,GAAD,CACEmd,OAAQpe,EACR9Z,YAAa1d,EAAK,+BAClBwjB,SAAU05B,EACVrlB,eAAgBA,EAChB9b,SAAUA,GAAY,CACpB0c,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,sBACAh7B,SAAS6mC,GACX1V,QAASA,IAIf,KAAK6J,EAAAA,GAAAA,2BACH,OACE,mBAAC,GAAD,CACEmd,OAAQpe,EACRmjB,iBAAkBtjB,EAAMJ,SACxBvZ,YAAa1d,EAAK,yBAClBwjB,SAAU25B,EACVtlB,eAAgBA,EAChB9b,SAAUA,GAAY,CACpB0c,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,sBACAh7B,SAAS6mC,GACX1V,QAASA,IAIf,KAAK6J,EAAAA,GAAAA,wBACH,OACE,mBAAC,GAAD,CACE1E,UAAWA,EACX/T,MAAOA,EACP66B,WAAY0B,EACZz5C,KAAK,OACL4a,YAAa1d,EAAK,2BAClBwjB,SAAU45B,EACVvlB,eAAgBA,EAChB9b,SAAUA,GAAYuoB,IAAgB7L,EAAAA,GAAAA,qBACtC7J,QAASA,EACTgnB,OAAQpe,IAId,KAAKiB,EAAAA,GAAAA,aACH,OACE,mBAAC,GAAD,CACE1E,UAAWA,EACX/T,MAAOA,EACP66B,WAAY0B,EACZrlB,KAAMA,EACN1T,SAAU65B,EACVxlB,eAAgBA,EAChB9b,SAAUA,EACV6S,QAASA,EACTgnB,OAAQpe,IAId,KAAKiB,EAAAA,GAAAA,kCACH,OACE,mBAAC,GAAD,CACEmd,OAAQpe,EACRzD,UAAWA,EACX/T,MAAOA,EACP66B,WAAY0B,EACZrlB,KAAMA,EACN1T,SAAU85B,EACVzlB,eAAgBA,EAChB9b,SAAUA,GAAY,CACpB0c,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,sBACAh7B,SAAS6mC,GACX1V,QAASA,IAIf,KAAK6J,EAAAA,GAAAA,mBACH,OACE,mBAAC,GAAD,CACEmd,OAAQpe,EACR10B,KAAK,QACLwK,KAAK,QACLoQ,YAAa1d,EAAK,sBAClBwjB,SAAU+5B,EACV1lB,eAAgBA,EAChB9b,SAAUA,GAAY,CACpB0c,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,sBACAh7B,SAAS6mC,GACX1V,QAASA,IAIf,KAAK6J,EAAAA,GAAAA,uBACH,OACE,mBAAC,GAAD,CACEmd,OAAQpe,EACRzD,UAAWA,EACX/T,MAAOA,EACP66B,WAAY0B,EACZ/4B,SAAUg6B,EACV3lB,eAAgBA,EAChB9b,SAAUA,GAAYuoB,IAAgB7L,EAAAA,GAAAA,qBACtC7J,QAASA,IAIf,QACE,Y,eCrRN,SAAS6uB,GAA0B1+C,EAAqB62C,GACtD,MAAM,QAAE1C,GAAYn0C,EAAOwS,SAC3B,OAAQqkC,GACN,KAAKnd,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,iCACH,OAAOya,EAAQO,YACjB,KAAKhb,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,8BACH,OAAOya,EAAQU,SACjB,KAAKnb,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,kCACH,OAAOya,EAAQY,aACjB,KAAKrb,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCACH,OAAOya,EAAQc,SACjB,KAAKvb,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,iCACH,OAAOya,EAAQgB,YAMrB,UAAenzC,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAU62C,OAAAA,MACT,MACEp3B,OACEC,KAAMC,EADD,QAELC,EAFK,iBAGLC,GAJE,cAMJpC,GACEzd,EAEJ,MAAO,CACLyd,cAAAA,EACAkC,UAAAA,EACAC,QAASA,EAAQG,OACjBF,iBAAkBA,EAAiBE,OACnCwkB,kBAAmB1kB,EAAiBK,SACpCD,gBAAiBL,EAAQM,SACzB1N,SAAUksC,GAA0B1+C,EAAQ62C,OAGhD,CAACn2C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,wBArBpCZ,EAxIsE,EACxF0d,cAAAA,EACAkhC,YAAAA,EACA9H,OAAAA,EACArkC,SAAAA,EACAmN,UAAAA,EACAC,QAAAA,EACAC,iBAAAA,EACAI,gBAAAA,EACAskB,kBAAAA,EACAqa,mBAAAA,EACA5hC,SAAAA,EACA8b,eAAAA,EACAjJ,QAAAA,MAEA,MAAM5uB,GAAOC,EAAAA,EAAAA,KAEP29C,GAAqB37C,EAAAA,EAAAA,KAAQ,IAC5BsP,EAIDmsC,EACK,IAAInsC,EAASukC,gBAAiBvkC,EAASwkC,cAEvC,IAAIxkC,EAASykC,gBAAiBzkC,EAAS0kC,cANvC,IAQR,CAACyH,EAAansC,KACV+d,EAAauuB,IAAkBn6C,EAAAA,EAAAA,IAAiB,KAChDo6C,EAAeC,IAAoBr6C,EAAAA,EAAAA,KAAkB,IACrDs6C,EAAuBC,IAA4Bv6C,EAAAA,EAAAA,IAAmBk6C,GAEvEp/B,GAAQvc,EAAAA,EAAAA,KAAQ,KACpB,MAAMuhC,EAAmB7kB,GACrB8kB,EAAAA,EAAAA,GAAgB/kB,EAAWC,EAASC,EAAkB,YACtDrc,EACEmhC,EAAqB1kB,GACvBykB,EAAAA,EAAAA,GAAgB/kB,EAAWM,EAAiBskB,EAAmB,iBAC/D/gC,EAEJ,GAAKihC,GAAqBE,EAI1B,MAAO,IACDF,EACA,IACGA,EAAiBG,eACjBH,EAAiBI,YAEpB,MAEAF,EAAqBA,EAAmBE,WAAa,MAE1D,CAACllB,EAAWC,EAASC,EAAkBI,EAAiBskB,IAErDO,GAAe5hC,EAAAA,EAAAA,KAAQ,KAC3B,GAAKuc,EAIL,OAAOA,EACJ7B,QAAQjc,KACLtB,EAAAA,EAAAA,IAASsB,EAAKlD,KAAOkD,EAAKlD,KAAOgf,IAAkB0hC,EAAAA,EAAAA,IAAYx9C,OAE9D4uB,IACA1P,EAAAA,GAAAA,IAAYC,EAAAA,EAAAA,GAAa7f,EAAMU,GAAO4uB,IACtCsuB,EAAmBngD,SAASiD,EAAKlD,OAGrCygB,KAAI,EAAGzgB,GAAAA,KAASA,MAClB,CAACghB,EAAOhC,EAAexc,EAAMsvB,EAAasuB,IAEvCO,GAAiCp+C,EAAAA,EAAAA,KAAasN,IAClD4wC,EAAyB5wC,GACzB0wC,GAAiB,KAChB,IAEG7C,GAAen7C,EAAAA,EAAAA,KAAY,KAC/B49C,EAAmB,CACjBpH,WAAYZ,GAAcC,GAC1B8H,YAAan0C,QAAQm0C,GACrBU,YAAaJ,IAGfnmB,EAAeY,EAAAA,GAAAA,WACd,CAACilB,EAAaM,EAAuBnmB,EAAgB+d,EAAQ+H,IAIhE,OAFAzhC,EAAAA,EAAAA,IAAeH,EAAU6S,EAASiJ,EAAgB+d,GAGhD,0BAAKx1C,UAAU,wBACb,mBAACi+C,GAAA,EAAD,CACEC,QAASza,GAAgB,GACzB5B,YAAa+b,EACb9b,YAAa5S,EACb1S,kBAAiC5c,EAAd09C,EAAmB,6BAAqC,6BAC3Ea,cAAc,0BACdpc,oBAAqBgc,EACrBthC,eAAgBghC,IAGlB,mBAACjhB,GAAA,EAAD,CACEhwB,QAASkxC,EACTz9C,QAAS66C,EACT14C,UAAyBxC,EAAd09C,EAAmB,uBAA+B,wBAE7D,wBAAGt9C,UAAU,2BCzHf21B,GAA0B/3B,OAAOg4B,KAAKyC,EAAAA,IAAiB/5B,OAAS,EAGhE8/C,GAAiB,CACrB/lB,EAAAA,GAAAA,cACAA,EAAAA,GAAAA,iBACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,aACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,aACAA,EAAAA,GAAAA,kCACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,wBAGIgmB,GAAkB,CACtBhmB,EAAAA,GAAAA,QACAA,EAAAA,GAAAA,oBACAA,EAAAA,GAAAA,kBACAA,EAAAA,GAAAA,8BACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,kCAGIimB,GAAkB,CACtBjmB,EAAAA,GAAAA,oBACAA,EAAAA,GAAAA,uBAGIkmB,GAA+B,CACnClmB,EAAAA,GAAAA,kCACAA,EAAAA,GAAAA,kCAGImmB,GAAkC,CACtCnmB,EAAAA,GAAAA,+BACAA,EAAAA,GAAAA,+BAGIomB,GAAgC,CACpCpmB,EAAAA,GAAAA,mCACAA,EAAAA,GAAAA,mCAGIqmB,GAA6B,CACjCrmB,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,iCAGIsmB,GAA8B,CAClCtmB,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,iCA6QF,IAAe13B,EAAAA,EAAAA,KAhQgB,EAC7Bgb,SAAAA,EACAyb,cAAAA,EACAwnB,aAAAA,EACAC,gBAAAA,EACApnB,eAAAA,EACAjJ,QAAAA,EACAswB,qBAAAA,MAEA,MAAOC,EAAYC,IpClDZC,EAAAA,GAAAA,GAAWjoB,GAAcL,IoCoD1BwN,GAAcxkC,EAAAA,EAAAA,KAAY,KAE5By3B,IAAkBiB,EAAAA,GAAAA,qBACfjB,IAAkBiB,EAAAA,GAAAA,mBAClBjB,IAAkBiB,EAAAA,GAAAA,+BAErBlyB,YAAW,KACT04C,EAAgB,CAAE3xC,KAAM,YA1FJ,KA+FtBkqB,IAAkBiB,EAAAA,GAAAA,sBACfjB,IAAkBiB,EAAAA,GAAAA,qBAUvB7J,IAR4B,WAAtBowB,EAAa7d,KACftJ,EAAeY,EAAAA,GAAAA,qBAEfZ,EAAeY,EAAAA,GAAAA,qBAMlB,CACDumB,EAAa7d,KAAM8d,EACnBznB,EAAe5I,EAASiJ,IAGpBynB,GAAmBv/C,EAAAA,EAAAA,KAAY,KACnCk/C,EAAgB,CAAE3xC,KAAM,gBACxBi3B,MACC,CAAC0a,EAAiB1a,IA0LrB,SAASgb,EAAqBC,EAAyBC,EAAiBC,GACtE,OACE,sCACE,mBAAC,GAAD,CACEloB,cAAeA,EACf5I,QAAS2V,EACT7M,aAAc4nB,EACdznB,eAAgBA,EAChBJ,eAAgBunB,EAAave,WAhMrC,SAAqC+e,EAAyB5J,GAC5D,MAAM+J,EAA+C,CACnD,CAAClnB,EAAAA,GAAAA,oBAAqCkmB,GAA6BlhD,SAASm4C,GAC5E,CAACnd,EAAAA,GAAAA,iBAAkCmmB,GAAgCnhD,SAASm4C,GAC5E,CAACnd,EAAAA,GAAAA,qBAAsComB,GAA8BphD,SAASm4C,GAC9E,CAACnd,EAAAA,GAAAA,mBAAoCqmB,GAA2BrhD,SAASm4C,GACzE,CAACnd,EAAAA,GAAAA,mBAAoCsmB,GAA4BthD,SAASm4C,IAGtEgK,EAAgBpB,GAAe/gD,SAASm4C,GACxCiK,EAAkBpB,GAAgBhhD,SAASm4C,GAC3CkK,EAAkBpB,GAAgBjhD,SAASm4C,IAC5CgK,GACA5hD,OAAOg4B,KAAK2pB,GAAqBliD,SAASm4C,EAAO1lC,aACjDlS,OAAO+hD,OAAOJ,GAAqB5c,MAAMxiC,IAAgB,IAARA,IAEtD,OAAQi3B,GACN,KAAKiB,EAAAA,GAAAA,KACH,OACE,mBAAC,GAAD,CAAcZ,eAAgBA,EAAgB9b,SAAUA,EAAU6S,QAAS2V,IAE/E,KAAK9L,EAAAA,GAAAA,YACH,OACE,mBAAC,GAAD,CACEZ,eAAgBA,EAChB9b,SAAUA,GAAYyjC,EACtB5wB,QAAS2V,IAGf,KAAK9L,EAAAA,GAAAA,QACH,OACE,mBAAC,GAAD,CACEZ,eAAgBA,EAChB9b,SAAUyjC,GACP5J,IAAWnd,EAAAA,GAAAA,4BACXmd,IAAWnd,EAAAA,GAAAA,uBACXqnB,GAAmBD,EACtBjxB,QAAS2V,IAGf,KAAK9L,EAAAA,GAAAA,cACH,OACE,mBAAC,GAAD,CAAuBZ,eAAgBA,EAAgB9b,SAAUyjC,EAAgB5wB,QAAS2V,IAE9F,KAAK9L,EAAAA,GAAAA,QACH,OACE,mBAAC,GAAD,CACEZ,eAAgBA,EAChB9b,SAAUyjC,GAAkBM,GAAmBF,EAC/ChxB,QAAS2V,IAGf,KAAK9L,EAAAA,GAAAA,SACH,OACE,mBAAC,GAAD,CAAkBZ,eAAgBA,EAAgB9b,SAAUyjC,EAAgB5wB,QAAS2V,IAEzF,KAAK9L,EAAAA,GAAAA,sBACH,OACE,mBAAC,GAAD,CACEZ,eAAgBA,EAChB9b,SAAUyjC,GAAkB5J,IAAWnd,EAAAA,GAAAA,2BACvC7J,QAAS2V,IAGf,KAAK9L,EAAAA,GAAAA,2BACH,OACE,mBAACunB,GAAD,CACEnoB,eAAgBA,EAChB9b,SAAUyjC,EACV5wB,QAAS2V,IAGf,KAAK9L,EAAAA,GAAAA,sBACH,OACE,mBAAC,GAAD,CACEZ,eAAgBA,EAChB9b,SAAUyjC,EACV5wB,QAAS2V,IAGf,KAAK9L,EAAAA,GAAAA,oBACH,OACE,mBAAC,GAAD,CACEZ,eAAgBA,EAChB9b,SAAUyjC,EACV5wB,QAAS2V,IAGf,KAAK9L,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,kBACH,OACE,mBAAC,GAAD,CACEmd,OAAQpe,EACRK,eAAgBA,EAChB9b,SAAUyjC,GAAkBG,EAAoBnoB,GAChD5I,QAAS2V,IAIf,KAAK9L,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,iCACH,OACE,mBAAC,GAAD,CACEilB,aAAW,EACX9H,OAAQpe,EACRK,eAAgBA,EAChB9b,SAAUyjC,GAAkBG,EAAoBnoB,GAChD5I,QAAS2V,IAIf,KAAK9L,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,gCACH,OACE,mBAAC,GAAD,CACEmd,OAAQpe,EACRK,eAAgBA,EAChB9b,SAAUyjC,EACV5wB,QAAS2V,IAIf,KAAK9L,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACH,OACE,mBAAC,GAAD,CACEjB,cAAeA,EACf8M,YAAasR,EACbve,MAAO2nB,EACPvf,SAAUwf,EACVljC,SAAUyjC,EACV3nB,eAAgBA,EAChBjJ,QAAS2V,IAIf,KAAK9L,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,wBACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,sBACL,KAAKA,EAAAA,GAAAA,0BACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,uBACL,KAAKA,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,wBACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,uBACH,OACE,mBAAC,GAAD,CACEjB,cAAeA,EACfH,MAAO8nB,EACP1f,SAAU2f,EACV9a,YAAasR,EACb75B,SAAUyjC,EACV3nB,eAAgBA,EAChBjJ,QAAS2V,IAIf,QACE,QAcC0b,CAA4BT,EAAgBE,IAKnD,OACE,mBAACrjC,EAAA,EAAD,CACE7e,GAAG,WACH+e,KAAM2iC,EAAuB,OAASgB,EAAAA,GACtC5jC,UAAWkb,EACXV,YAAaf,IAEZwpB,MC5TDpxB,IAAejqB,EAAAA,EAAAA,KAAUkqB,GAAOA,KAAM,KAAO,GA+DnD,IAAertB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAQsvB,QAASqqB,GAAe35C,EAAO8xB,aAAe,IAC9CpS,KAAM+P,GAAczvB,EAAO0vB,MAEnC,MAAO,CACLD,UAAAA,EACAkqB,WAAAA,EACAyH,iBAAkBphD,EAAOohD,qBAG7B,CAAC1gD,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,kBAAmB,cAXvDZ,EA7D2C,EAC7Did,SAAAA,EAAU6S,QAAAA,EACVjS,OAAAA,EAAQ6R,UAAAA,EAAWkqB,WAAAA,EAAY5pB,gBAAAA,EAAiBC,SAAAA,EAAUoxB,iBAAAA,OAI1Dx8C,EAAAA,EAAAA,KAAU,KACRwqB,IAAa,KACXW,WAIJ5S,EAAAA,EAAAA,IAAeH,EAAU6S,GAEzB,MAAMb,GAAchuB,EAAAA,EAAAA,KAAavC,IAC/BuxB,EAAS,CAAEvxB,GAAAA,EAAI4xB,sBAAsB,MACpC,CAACL,IAEEpQ,GAAU1c,EAAAA,EAAAA,KAAQ,KACtB,IAAKy2C,EACH,OAGF,MAAM0H,EAAYzjC,EAAS+7B,EAAW/7B,QAAQnf,IAC5C,MAAMiD,EAAO+tB,EAAUhxB,GACvB,IAAKiD,EACH,OAAO,EAET,MAAM8xB,GAAWC,EAAAA,EAAAA,IAAgB/xB,GACjC,OAAO8xB,IAAY3S,EAAAA,GAAAA,GAAY2S,EAAU5V,MACtC+7B,EAEL,OAAO2H,EAAAA,EAAAA,IAAYD,EAAW5xB,OAAWjsB,EAAW49C,KACnD,CAACzH,EAAY/7B,EAAQ6R,EAAW2xB,KAE5BnjC,EAAaC,IAAWC,EAAAA,GAAAA,QAAkB3a,EAAWoc,EAASpV,QAAQoT,IAE7E,OACE,mBAACkB,GAAA,EAAD,CAAgBC,MAAOd,EAAae,WAAYd,EAAS7c,UAAU,2BAChE4c,MAAAA,GAAAA,EAAate,OACZse,EAAYiB,KAAKzgB,GACf,mBAAC0gB,GAAA,EAAD,CACE3d,IAAK/C,EACL4C,UAAU,sBACVC,QAAS,IAAM0tB,EAAYvwB,GAC3ByK,QAASxF,EAAAA,IAET,mBAAC0b,GAAA,EAAD,CAAiBE,OAAQ7gB,EAAIw7B,eAAa,EAAC/K,WAAW,aAGxDjR,IAAgBA,EAAYte,OAC9B,wBAAG0B,UAAU,aAAaG,IAAI,aAAaI,IAAI,QAC5Cgc,EAAOje,OAAS,mCAAqC,0BAGxD,mBAAC6f,GAAA,EAAD,CAAShe,IAAI,iBCnDf4tB,IAAejqB,EAAAA,EAAAA,KAAUkqB,GAAOA,KAAM,KAAO,GAsHnD,IAAertB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAQsvB,QAASuC,GAAoB7xB,EAAO8xB,aAAe,IACnDpS,KAAM+P,GAAczvB,EAAO0vB,OAC3BhQ,KAAMC,GAAc3f,EAAOyf,OAC7B,cAAEhC,GAAkBzd,GAGxBkzB,MAAO3C,EADH,eAEJwB,EAFI,cAGJC,EAHI,aAIJC,GACEjyB,EAAO4vB,cACHN,QAAS6C,GAAkBH,GAAiB,IAC5C1C,QAAS+C,GAAiBJ,GAAgB,GAElD,MAAO,CACLxU,cAAAA,EACAgS,UAAAA,EACA9P,UAAAA,EACAkS,gBAAAA,EACAtB,YAAAA,EACAgxB,YAAaxvB,MAAAA,OAAF,EAAEA,EAAgBtS,MAC7B0S,cAAAA,EACAE,aAAAA,MAGJ,CAAC3xB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,kBAAmB,0BA3BvDZ,EApH4C,EAC9D6hB,UAAAA,EACA5E,SAAAA,EACAwkC,kBAAAA,EACAC,0BAAAA,EACAC,WAAAA,EACA7xB,QAAAA,EACApS,cAAAA,EACAgS,UAAAA,EACA9P,UAAAA,EACAkS,gBAAAA,EACAtB,YAAAA,EACAgxB,YAAAA,EACAlvB,aAAAA,EACAF,cAAAA,EACApC,gBAAAA,EACA4xB,qBAAAA,OAIA/8C,EAAAA,EAAAA,KAAU,KACRwqB,IAAa,KACXW,UAIJ,MAAM9uB,GAAOC,EAAAA,EAAAA,MAEbic,EAAAA,EAAAA,IAAeH,EAAU6S,GAEzB,MAAMvR,GAAqBtd,EAAAA,EAAAA,KAAakyB,IACtCyuB,EAAqB,CAAEzuB,MAAAA,MACtB,CAACyuB,IAEE7c,GAAe5hC,EAAAA,EAAAA,KAAQ,KAC3B,MAAMy2C,EAAa9nB,GACfnR,EAAAA,EAAAA,IAAYmR,EAAgBjU,QAAQnf,GAAOA,IAAOgf,IAAgBkC,GAClE,GAEJ,IAAK4Q,EACH,OAAOopB,EAGT,MAAMpmB,EAAkBomB,EAAW/7B,QAAQnf,IACzC,MAAMiD,EAAO+tB,EAAUhxB,GACvB,IAAKiD,EACH,OAAO,EAET,MAAM8xB,GAAWC,EAAAA,EAAAA,IAAgB/xB,GACjC,OAAO8xB,IAAY3S,EAAAA,GAAAA,GAAY2S,EAAUjD,MAG3C,OAAO7P,EAAAA,EAAAA,KACLD,EAAAA,EAAAA,IAAO,IACF8S,KACClB,GAAgB,MAChBF,GAAiB,KACpBvU,QAAQs8B,IACT,MAAMx4C,EAAO+tB,EAAUyqB,GAEvB,OAAQx4C,KAASkgD,EAAAA,EAAAA,IAAUlgD,IAASA,EAAKmgD,uBAE3CliC,GACA,EACA6hC,KAED,CACD3vB,EAAiBlS,EAAW4Q,EAAa8B,EAAcF,EAAeqvB,EACtE/jC,EAAegS,IAGXqyB,GAAiB9gD,EAAAA,EAAAA,KAAY,MAC7BwgD,EAAkB7hD,QAAUiiB,KAC9B+/B,EAAqB,CAAEzuB,MAAO,KAC9BwuB,OAED,CAACF,EAAkB7hD,OAAQiiB,EAAW+/B,EAAsBD,IAE/D,OACE,0BAAKrgD,UAAU,kBACb,0BAAKA,UAAU,eACb,mBAACgC,EAAA,EAAD,CACEC,OAAK,EACL7B,KAAK,UACL8B,MAAM,cACNjC,QAASuuB,EACTpsB,UAAU,uBAEV,wBAAGpC,UAAU,qBAEf,6BAAKJ,EAAK,qBAEZ,0BAAKI,UAAU,wBACb,mBAACi+C,GAAA,EAAD,CACEC,QAASza,EACT5B,YAAase,EACbre,YAAa5S,EACb1S,kBAAmB5c,EAAK,iBACxBu+C,cAAc,0BACdxqB,UAAWusB,EACXne,oBAAqBqe,EACrB3jC,eAAgBQ,IAGlB,mBAACuf,GAAA,EAAD,CACEhwB,QAASrD,QAAQg3C,EAAkB7hD,QAAUiiB,GAC7CtgB,QAASwgD,EACTr+C,UAAWme,EAAY,2BAA6B,0BAEpD,wBAAGvgB,UAAU,4BCwCvB,IAAeW,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MACEoE,SAAU29C,EACV9gC,MAAO+gC,GACLhiD,EAAOiiD,cAAgB,GAE3B,MAAO,CACLF,iBAAAA,EACAC,cAAAA,MAGJ,CAACthD,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,kBAAmB,mBAbHZ,EA3J4C,EAC9D6hB,UAAAA,EACA5E,SAAAA,EACAklC,UAAAA,EACAryB,QAAAA,EACAkyB,iBAAAA,EACAC,cAAAA,EACAG,gBAAAA,EACAC,cAAAA,MAEA,MAAMnhD,GAAOC,EAAAA,EAAAA,MAEbic,EAAAA,EAAAA,IAAeH,EAAU6S,GAEzB,MAAOnO,EAAO2gC,IAAY19C,EAAAA,EAAAA,IAAS,KAC5B29C,EAAOC,IAAY59C,EAAAA,EAAAA,IAAS,KAC5BiP,EAAO8oB,IAAY/3B,EAAAA,EAAAA,OACnBsc,EAAOwb,IAAY93B,EAAAA,EAAAA,MAEpB69C,EAAsB,4BACtBC,EAAyB,+BACzBC,EAAwB,mDAExB1tB,EAAY+sB,IAAqBY,EAAAA,GAAAA,WAEjCC,GAAoB5hD,EAAAA,EAAAA,KAAayE,IACrC,MAAM,MAAE6I,GAAU7I,EAAE+G,cACd6wC,EAAW/uC,EAAM0Y,QAAQ,OAAQ,IAEvCq7B,EAAShF,GAELA,IAAa/uC,IACf7I,EAAE+G,cAAc8B,MAAQ+uC,KAEzB,IAEG5xB,GAA0BzqB,EAAAA,EAAAA,KAAayE,IAC3C88C,EAAS98C,EAAE+G,cAAc8B,SACxB,IAEGu0C,GAAoB7hD,EAAAA,EAAAA,KAAY,KAC/B0gB,EAAM/hB,OAKPuiD,EAAUviD,OAhDgB,IAiD5B88B,EAASimB,GAIXP,EAAgB,CACdzgC,MAAAA,EACA9N,MAAAA,EACAsuC,UAAAA,IAZAzlB,EAAS+lB,KAcV,CAAC9gC,EAAOwgC,EAAWC,EAAiBvuC,EAAO4uC,EAAqBE,IAE7DI,GAAsB9hD,EAAAA,EAAAA,KAAY,KACjC0gB,EAAM/hB,OAKXyiD,EAAc,CACZ1gC,MAAAA,EACA4gC,MAAAA,EACA1uC,MAAAA,EACAsuC,UAAAA,IARAzlB,EAASgmB,KAUV,CAAC/gC,EAAO0gC,EAAeE,EAAO1uC,EAAOsuC,EAAWO,KAEnD79C,EAAAA,EAAAA,KAAU,KACJm9C,IAAqBY,EAAAA,GAAAA,UACvB9yB,GAAQ,KAET,CAACkyB,EAAkBlyB,IAEtB,MAAMkzB,EAAgBf,IACpB/gC,IAAUuhC,GAAuBvhC,IAAUwhC,EACvCxhC,OACAzd,GAGN,OACE,0BAAKnC,UAAU,WACb,0BAAKA,UAAU,eACb,mBAACgC,EAAA,EAAD,CACEC,OAAK,EACL7B,KAAK,UACL8B,MAAM,cACNjC,QAAS,IAAMuuB,IACfpsB,UAAU,8BAEV,wBAAGpC,UAAU,qBAEf,6BAAKJ,EAAK2gB,EAAY,aAAe,cAEvC,0BAAKvgB,UAAU,wBACb,mBAACs8B,GAAA,EAAD,CACEnvB,SAAUkuB,EACVhb,MAAOzgB,EAAK,cAEd,mBAACwd,GAAA,EAAD,CACEnQ,MAAOoT,EACPlT,SAAUo0C,EACVj3B,MAAO1qB,EAAK2gB,EAAY,mBAAqB,aAC7CX,MAAOA,IAAUuhC,GAAuBvhC,IAAUwhC,EAAyBxhC,OAAQzd,IAEpFoe,GACC,sCACE,mBAACnD,GAAA,EAAD,CACEnQ,MAAOg0C,EACP9zC,SAAUid,EACVE,MAAO1qB,EAAK,oCAEd,wBAAGI,UAAU,QAAQJ,EAAK,qBAI7B8hD,GACC,wBAAG1hD,UAAU,SAAS0hD,GAGvBb,EAAUviD,OAAS,GAClB,sCACE,yBAAI0B,UAAU,wBAAwBJ,EAAK,6BAA8BihD,EAAUviD,OAAQ,MAE3F,0BAAK0B,UAAU,mCACZ6gD,EAAUhjC,KAAKzgB,GACd,mBAAC0gB,GAAA,EAAD,CAAU0jB,UAAQ,EAACxhC,UAAU,uBAC3B,mBAAC+d,GAAA,EAAD,CAAiBE,OAAQ7gB,UAQrC,mBAACo/B,GAAA,EAAD,CACEhwB,QAA0B,IAAjB6T,EAAM/hB,OACf2B,QAASsgB,EAAYkhC,EAAsBD,EAC3Cz0C,SAAU4mB,EACVvxB,UAAWme,EAAY3gB,EAAK,8BAAgC,gBAE3D+zB,EACC,mBAAC9iB,EAAA,EAAD,CAAS3O,MAAM,UAEf,wBAAGlC,UAAU,2BCnKjB2hD,GAAe/jD,OAAOg4B,KAAKgsB,EAAAA,IAAmBtjD,OAAS,EAsD7D,IAAeqC,EAAAA,EAAAA,KApDe,EAC5Bgb,SAAAA,EACA4E,UAAAA,GAAY,EACZ8V,QAAAA,EACAwrB,gBAAAA,EACArzB,QAAAA,MAEA,MAAOszB,EAAkBC,IAAuBz+C,EAAAA,EAAAA,IAAmB,IAE7Dm9C,GAAiB9gD,EAAAA,EAAAA,KAAY,KACjCkiD,EAAgBthC,EAAYqhC,EAAAA,GAAAA,gBAAoCA,EAAAA,GAAAA,iBAC/D,CAACrhC,EAAWshC,IAEf,OACE,mBAAC5lC,EAAA,EAAD,CACE7e,GAAG,UACH+e,KAAM2jC,EAAAA,GACNppB,YAAairB,GACbzlC,UAAWma,IAET2rB,IACA,OAAQ3rB,GACN,KAAKurB,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,cACH,OACE,mBAAC,GAAD,CACErhC,UAAWA,EACX5E,SAAUA,EACVwkC,kBAAmB2B,EACnB1B,0BAA2B2B,EAC3B1B,WAAYI,EACZjyB,QAASA,IAGf,KAAKozB,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,cACH,OACE,mBAAC,GAAD,CACErhC,UAAWA,EACX5E,SAAUqmC,GAAgBrmC,EAC1BklC,UAAWiB,EACXtzB,QAASA,IAGf,QACE,c,eCpDZ,MAwBA,IAAe7tB,EAAAA,EAAAA,KAxBqB,EAAGgb,SAAAA,EAAU6S,QAAAA,EAASqzB,gBAAAA,MACxD,MAAMjiD,GAAOC,EAAAA,EAAAA,KAIb,OAFAic,EAAAA,EAAAA,IAAeH,EAAU6S,EAASqzB,EAAiBD,EAAAA,GAAAA,UAGjD,0BAAK5hD,UAAU,iBACb,0BAAKA,UAAU,eACb,mBAACgC,EAAA,EAAD,CACEC,OAAK,EACL7B,KAAK,UACL8B,MAAM,cACNjC,QAASuuB,EACTpsB,UAAU,uBAEV,wBAAGpC,UAAU,qBAEf,6BAAKJ,EAAK,mBAEZ,mBAACqiD,GAAA,EAAD,CAAUC,WAAW,WAAWvmC,SAAUA,Q,eCPhD,MAsEA,IAAehb,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAQ0f,KAAMue,EAAaF,WAAYylB,GAAqBxjD,EAAOo+B,YAEnE,MAAO,CACLH,YAAAA,EACAulB,iBAAAA,MAGJ,CAAC9iD,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,qBATpCZ,EAtE+C,EACjEqD,OAAAA,EACAnD,OAAAA,EACAg+B,YAAAA,EACAulB,iBAAAA,EACA55C,QAAAA,EACA65C,oBAAAA,EACAC,gBAAAA,MAEA,MAAMziD,GAAOC,EAAAA,EAAAA,KAEPyiD,GAA2BzgD,EAAAA,EAAAA,KAAQ,IAClC+6B,EAIEh/B,OAAOg4B,KAAKgH,GAAa6Z,QAAO,CAACC,EAAQrW,KAC9C,MAAM,gBAAEN,EAAF,cAAmBwiB,GAAkB3lB,EAAYxvB,OAAOizB,IAK9D,OAJIN,EAAgB1iC,SAASuB,IAAW2jD,MAAAA,GAAAA,EAAellD,SAASuB,KAC9D83C,EAAOpxB,KAAK+a,GAGPqW,IACN,IAVM,IAWR,CAAC93C,EAAQg+B,KAEL4lB,EAAmBC,IAAwBn/C,EAAAA,EAAAA,IAAmBg/C,GAE/DI,GAAU7gD,EAAAA,EAAAA,KAAQ,KACfsgD,MAAAA,OAAA,EAAAA,EAAkBtkC,KAAKwiB,IAAD,CAC3B/V,MAAOsS,EAAcA,EAAYyD,GAAUhgB,MAAQ,GACnDpT,MAAOyV,OAAO2d,SACT,IACN,CAAC8hB,EAAkBvlB,IAEhBke,GAAen7C,EAAAA,EAAAA,KAAY,KAC/B,MAAMgjD,EAAcL,EAAyB/lC,QAAQnf,IAAQolD,EAAkBnlD,SAASD,KAClFwlD,EAAWJ,EAAkBjmC,QAAQnf,IAAQklD,EAAyBjlD,SAASD,KAErFilD,EAAgB,CAAEzjD,OAAAA,EAAQ+jD,YAAAA,EAAaC,SAAAA,IACvCr6C,MACC,CAAC3J,EAAQyjD,EAAiBC,EAA0B/5C,EAASi6C,IAEhE,GAAK5lB,GAAgBulB,EAIrB,OACE,mBAAC5kC,GAAA,EAAD,CACExb,OAAQA,EACRwG,QAASA,EACT65C,oBAAqBA,EACrB75B,QAASuyB,EACT96C,UAAU,SACVqgB,MAAOzgB,EAAK,gBAEZ,mBAACijD,GAAA,EAAD,CACEr4B,QAASk4B,EACTj4B,SAAU+3B,EACVr1C,SAAUs1C,EACVxgD,OAAK,IAEP,mBAACD,EAAA,EAAD,CAAQE,MAAM,UAAUlC,UAAU,wBAAwB0gB,QAAM,EAACzgB,QAAS66C,GACvEl7C,EAAK,gBAER,mBAACoC,EAAA,EAAD,CAAQhC,UAAU,wBAAwB0gB,QAAM,EAACzgB,QAASsI,GAAU3I,EAAK,gB,yBCd/E,SAASkjD,GAAaC,GACpB,OAAIA,EACK,4BAEF,wBCpFT,IAAIC,GAEJ,MAAMC,GAAwC,CAC5CC,MAAM,EACNC,WAAW,EACXC,IAAI,EACJC,SAAS,EACTC,MAAM,EACNC,WAAW,EACXC,OAAO,EACPC,YAAY,EACZ,KAAK,EACLC,QAAQ,EACRC,UAAU,EACVC,KAAK,EACLC,MAAM,EACNC,KAAK,GAoBDr4C,GAAkBrH,IACtB,MAAMgM,EAAS,WAAYhM,EAAIA,EAAEgM,OAHhBhM,CAAAA,GAAgC,mBAAoBA,EAAIA,EAAE2/C,eAAe,GAAGC,QAAU,EAG7DC,CAAU7/C,KAGjD4+C,KAEGA,GAAajqC,SAAS3U,EAAEiJ,SAExB21C,GAAazlD,WAAa,GAAK6S,GAAU,GAEzC4yC,GAAazlD,WAAcylD,GAAakB,aAAelB,GAAaxlD,cAAiB4S,GAAU,IAEnGhM,EAAEqH,kBAIN,SAAS04C,GAA4B//C,GAC/B6+C,GAAa7+C,EAAEjE,OAlCrB,SAAmBkN,GACjB,KAAKA,GAAYA,aAAkB+2C,aAAc,OAAO,EACxD,MAAM1mD,EAAU2P,EACVg3C,EAAU3mD,EAAQ2mD,QAAQpP,cAChC,GAAgB,aAAZoP,EAAwB,OAAO,EACnC,GAAgB,UAAZA,EAAqB,OAAO,EAChC,MAAMn3C,EAAOxP,EAAQ4mD,aAAa,QAClC,QAAKp3C,GACc,CACjB,OAAQ,WAAY,SAAU,QAAS,MAAO,MAC9C,SAAU,OAAQ,WAAY,iBAAkB,OAAQ,QAAS,QAEjDqG,QAAQrG,EAAK+nC,gBAAkB,EAsBrBsP,CAAUngD,EAAEiJ,SACtCjJ,EAAEqH,iBAIC,SAAS+4C,GAAiBnrC,GAC/B2pC,GAAe3pC,EAEftd,SAASiI,iBAAiB,QAASyH,GAAgB,CAAEg5C,SAAS,IAC9D1oD,SAASiI,iBAAiB,YAAayH,GAAgB,CAAEg5C,SAAS,IAClE1oD,SAAS2oD,UAAYP,GAGhB,SAASQ,KACd3B,QAAe7gD,EACfpG,SAASkI,oBAAoB,QAASwH,IACtC1P,SAASkI,oBAAoB,YAAawH,IAE1C1P,SAAS2oD,UAAY,K,0BChBvB,MAsHA,GApHyC,EACvC3iD,OAAAA,EACA/D,QAAAA,EACA4mD,OAAAA,EACAC,WAAAA,EACAC,cAAAA,EACAC,SAAAA,EACAC,QAAAA,EACAC,OAAAA,EACAC,SAAAA,EACAv6B,UAAAA,EACAC,UAAAA,EACAu6B,WAAAA,EACAC,eAAAA,EACAC,iBAAAA,EACAC,QAAAA,EACAC,YAAAA,EACAC,UAAAA,EACA16B,YAAAA,EACAlqB,cAAAA,EACA6kD,QAAAA,EACAC,OAAAA,EACAC,MAAAA,EACAr8B,QAAAA,EACAnoB,UAAAA,EACA6qB,SAAAA,EACA45B,SAAAA,EACAC,cAAAA,EACAC,gBAAAA,EACAt5B,SAAAA,EACAu5B,OAAAA,EACAC,aAAAA,EACAz9C,QAAAA,EACA65C,oBAAAA,EACA6D,WAAAA,EACAC,WAAAA,MAGA,MAAMC,GAAUngD,EAAAA,EAAAA,IAAuB,MACjCogD,EF9ED,SACLpoD,EAAqBqoD,EAA0BJ,GAE/C,MAAMz7B,EAAwB,GACxBvnB,GAAOqjD,EAAAA,EAAAA,IAAetoD,GACtBuU,GAAQC,EAAAA,EAAAA,IAAgBxU,MACvB6U,EAAAA,EAAAA,IAAuB7U,QAA6CmE,GAAlCwQ,EAAAA,EAAAA,IAAuB3U,IAC1D4mC,GAAYljC,EAAAA,EAAAA,IAAoB1D,EAAS,UACzCuoD,EAAmBh0C,IAAUqyB,IAAa4hB,EAAAA,EAAAA,IAAuBxoD,KAAayoD,GAAAA,GAC9EC,EAAY3iD,OAAO4iD,eAgBzB,GAdIJ,GACF/7B,EAAQlF,KAAK,CACXgF,MAAO,yBACP6tB,QAAS,KACPyO,QAAQC,QAAQjiB,EAAYkiB,GAAAA,GAAkBliB,EAAWhwB,EAAAA,GAAAA,SAA0BrC,EAAO/B,SACvFqtB,KAAKkpB,GAAAA,IAEJV,GACFA,OAMJpjD,EAAM,OAER,MAAM8/C,EAAe55C,SACnBu9C,MAAAA,GAAA,UAAAA,EAAWM,kBAAX,eAAuBC,aACnBP,EAAUM,WAAWC,WAA2B9pD,QAAQ,4BACD,KAAxDupD,EAAU52C,WAAW6V,QAAQ,kBAAmB,KAGrD6E,EAAQlF,KAAK,CACXgF,MAAOw4B,GAAaC,GACpB5K,QAAS,KACP,MAAM+O,EAAgBnE,GAAgB2D,EAAYA,EAAU52C,WAAa7M,GACzEkkD,EAAAA,GAAAA,IAAoBD,GAEhBb,GACFA,OAmBR,OAbIJ,GACFz7B,EAAQlF,KAAK,CACXgF,MAAO,gCACP6tB,QAAS,KACP8N,IAEII,GACFA,OAMD77B,EEmBa48B,CAAsBppD,EAASuK,EAASg9C,EAAcU,OAAa9jD,GAEjFklD,GAAoB1nD,EAAAA,EAAAA,KAAY,IAC7B5D,SAASY,cAAe,+CAA8CqB,EAAQZ,SACpF,CAACY,EAAQZ,KAENkqD,GAAiB3nD,EAAAA,EAAAA,KACrB,IAAM5D,SAASY,cAAc,2BAC7B,IAGI4qD,GAAiB5nD,EAAAA,EAAAA,KACrB,IAAM5D,SAASY,cAAc,gCAC7B,KAGI,UACJ6F,EADI,UACOglD,EADP,MACkB1pD,EADlB,UACyB2pD,EADzB,WACoCC,IACtCC,EAAAA,GAAAA,GACF/C,EACAyC,EACAC,EACAC,EA/DoB,GAiEnBxrD,SAASY,cAAc,iBAAiCa,eAG3D+F,EAAAA,EAAAA,KAAU,KACRihD,GAAiBkD,EAAavB,EAAQ3/C,aAAUrE,GAEzCwiD,KACN,CAAC+C,IAEJ,MAAM9nD,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAAC+nD,GAAA,EAAD,CACEjgD,IAAKw+C,EACLpkD,OAAQA,EACRS,UAAWA,EACXglD,UAAWA,EACX1pD,MAAOA,EACP2pD,UAAWA,EACXznD,UAAU,2BACVuI,QAASA,EACT65C,oBAAqBA,GAEpByC,GAAc,mBAACpiD,EAAA,EAAD,CAAUC,KAAK,eAAezC,QAAS8lD,GAASnmD,EAAK,wBACnEklD,GACC,mBAACriD,EAAA,EAAD,CAAUC,KAAK,WAAWzC,QAAS+lD,GAAepmD,EAAK,4BAExDmlD,GAAY,mBAACtiD,EAAA,EAAD,CAAUC,KAAK,QAAQzC,QAASwlD,GAAU7lD,EAAK,UAC3DolD,GAAW,mBAACviD,EAAA,EAAD,CAAUC,KAAK,OAAOzC,QAASylD,GAAS9lD,EAAK,SACxDwlD,GACC,mBAAC3iD,EAAA,EAAD,CAAUC,KAAK,WAAWzC,QAAS4lD,GAAgBjmD,EAAK,mBAEzDylD,GACC,mBAAC5iD,EAAA,EAAD,CAAUC,KAAK,WAAWzC,QAAS6lD,GAAkBlmD,EAAK,iCAE3D0lD,GAAWc,EAAYvoC,KAAK2M,GAC3B,mBAAC/nB,EAAA,EAAD,CAAUtC,IAAKqqB,EAAQF,MAAO5nB,KAAK,OAAOzC,QAASuqB,EAAQ2tB,SAAUv4C,EAAK4qB,EAAQF,UAEnF26B,GAAU,mBAACxiD,EAAA,EAAD,CAAUC,KAAK,MAAMzC,QAAS0lD,GAAQ/lD,EAAK,cACrDslD,GAAY,mBAACziD,EAAA,EAAD,CAAUC,KAAK,QAAQzC,QAASqpB,GAAU1pB,EAAK,gBAC3DkrB,GACC,mBAACroB,EAAA,EAAD,CAAUC,KAAK,WAAWzC,QAASimD,GAChBtmD,EAAhBgB,EAAqB,8BAAsC,uBAG/DukD,GAAc,mBAAC1iD,EAAA,EAAD,CAAUC,KAAK,UAAUzC,QAASkB,GAAYvB,EAAK,YACjE4lD,GAAa,mBAAC/iD,EAAA,EAAD,CAAUC,KAAK,SAASzC,QAASusB,GAAW5sB,EAAK,kBAC9DgrB,GAAa,mBAACnoB,EAAA,EAAD,CAAUC,KAAK,OAAOzC,QAAS2lD,GAAWhmD,EAAK,2BAC5D+qB,GAAa,mBAACloB,EAAA,EAAD,CAAU8pB,aAAW,EAAC7pB,KAAK,SAASzC,QAAS+rB,GAAWpsB,EAAK,aCgJjF,IAAee,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUX,QAAAA,EAAS0sB,gBAAAA,MAClB,MAAM,SAAE5Z,IAAawW,EAAAA,EAAAA,IAAyB3oB,IAAW,GACnD60B,GAAkBq0B,EAAAA,EAAAA,IAAwBlpD,EAAQX,EAAQY,SAC1D,UACJkpD,EADI,SAEJ/C,EAFI,OAGJE,EAHI,SAIJC,EAJI,UAKJv6B,EALI,UAMJC,EANI,QAOJo6B,EAPI,WAQJG,EARI,eASJC,EATI,iBAUJC,EAVI,QAWJC,EAXI,YAYJC,EAZI,UAaJC,EAbI,YAcJ16B,GACGha,IAAY0W,EAAAA,EAAAA,IAA4B7oB,EAAQX,EAAS8S,IAAc,GACtE+b,EAA+B,WAApBnC,EACXq9B,EAAkC,cAApBr9B,EAEpB,MAAO,CACLo9B,UAAAA,EACAjD,WAAYkD,EACZjD,cAAeiD,EACfhD,UAAWl4B,IAAak7B,GAAehD,EACvCE,QAAS8C,GAAe9C,EACxBC,UAAW6C,GAAe7C,EAC1Bv6B,UAAAA,EACAC,UAAAA,EACAo6B,SAAUn4B,GAAYm4B,EACtBG,YAAa4C,GAAe5C,EAC5BC,gBAAiB2C,GAAe3C,EAChCC,kBAAmB0C,GAAe1C,EAClCC,QAAAA,EACAC,aAAcwC,GAAexC,EAC7BC,UAAAA,EACA16B,YAAAA,EACA0I,gBAAAA,MAGJ,CAACn0B,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,kBACA,eACA,aACA,kBACA,cACA,gBACA,yBACA,wBACA,oBACA,uBACA,gCAtDgBZ,EA1PoD,EACtEqD,OAAAA,EACA2oB,gBAAAA,EACAs9B,aAAAA,EACAhqD,QAAAA,EACAgqB,MAAAA,EACA48B,OAAAA,EACAr8C,QAAAA,EACA65C,oBAAAA,EACA0F,UAAAA,EACAjD,WAAAA,EACAC,cAAAA,EACAC,SAAAA,EACAE,OAAAA,EACAC,SAAAA,EACAv6B,UAAAA,EACAC,UAAAA,EACAo6B,QAAAA,EACAG,WAAAA,EACAC,eAAAA,EACAC,iBAAAA,EACAC,QAAAA,EACAC,YAAAA,EACAC,UAAAA,EACA16B,YAAAA,EACA0I,gBAAAA,EACAy0B,gBAAAA,EACAC,aAAAA,EACAn/B,WAAAA,EACA3W,gBAAAA,EACA+1C,YAAAA,EACAC,cAAAA,EACAC,uBAAAA,EACAC,sBAAAA,EACAC,kBAAAA,EACAlnD,qBAAAA,EACAC,2BAAAA,MAEA,MAAM,qBAAEiJ,IAAyBE,EAAAA,EAAAA,GAAkB1I,EAAQqgD,OAAqBjgD,GAAW,IACpFqmD,EAAYC,IAAiBnlD,EAAAA,EAAAA,KAAS,IACtCkoB,EAAmBk9B,IAAwBplD,EAAAA,EAAAA,KAAS,IACpDqoB,EAAmBg9B,IAAwBrlD,EAAAA,EAAAA,KAAS,IACpDslD,EAAgBC,IAAqBvlD,EAAAA,EAAAA,KAAS,IAC9CwlD,EAAgBC,EAAcC,IAAiBplC,EAAAA,GAAAA,KAEhDhjB,EAAgBonB,EAAQA,EAAMI,SAAS6gC,MAAMC,GAAQ11B,EAAgBn2B,SAAS6rD,EAAI9rD,MACpFo2B,EAAgBn2B,SAASW,EAAQZ,IAE/BqwB,GAAe9tB,EAAAA,EAAAA,KAAY,KAC/B8oD,GAAc,GACdC,GAAqB,KACpB,IAEGz+B,GAAetqB,EAAAA,EAAAA,KAAY,KAC/B8oD,GAAc,GACdE,GAAqB,KACpB,IAEGQ,IAAYxpD,EAAAA,EAAAA,KAAY,KAC5B8oD,GAAc,GACdlgD,MACC,CAACA,IAEEmjB,IAAmB/rB,EAAAA,EAAAA,KAAY,KACnC+oD,GAAqB,GACrBngD,MACC,CAACA,IAEEsjB,IAAmBlsB,EAAAA,EAAAA,KAAY,KACnCgpD,GAAqB,GACrBpgD,MACC,CAACA,IAEE6gD,IAAgBzpD,EAAAA,EAAAA,KAAY,KAChCkpD,GAAkB,GAClBtgD,MACC,CAACA,IAEE8gD,IAAsB1pD,EAAAA,EAAAA,KAAY,KACtCqpD,IACAzgD,MACC,CAACygD,EAAezgD,IAEb+gD,IAAc3pD,EAAAA,EAAAA,KAAY,KAC9BsoD,EAAgB,CAAEppD,UAAWb,EAAQZ,KACrC+rD,OACC,CAAClB,EAAiBjqD,EAAQZ,GAAI+rD,KAE3BI,IAAa5pD,EAAAA,EAAAA,KAAY,KAC7BuoD,EAAa,CAAErpD,UAAWb,EAAQZ,KAClC+rD,OACC,CAACjB,EAAclqD,EAAQZ,GAAI+rD,KAExBK,IAAY7pD,EAAAA,EAAAA,KAAY,KAC5B8oD,GAAc,GACdI,GAAkB,KACjB,IAEGY,IAAc9pD,EAAAA,EAAAA,KAAY,KAC9BopB,EAAW,CAAElqB,UAAWb,EAAQZ,GAAI6rB,SAAS,IAC7CkgC,OACC,CAACpgC,EAAY/qB,EAAQZ,GAAI+rD,KAEtB1uC,IAAgB9a,EAAAA,EAAAA,KAAY,KAEhC,GADAwpD,KACInhC,MAAAA,GAAAA,EAAOI,SAAU,CACnB,MAAMhV,EAAa4U,EAAMI,SAASvK,KAAI,EAAGzgB,GAAAA,KAASA,IAClDgV,EAAgB,CAAEsI,WAAY1c,EAAQY,OAAQwU,WAAAA,SAE9ChB,EAAgB,CAAEsI,WAAY1c,EAAQY,OAAQwU,WAAY,CAACpV,EAAQZ,QAEpE,CAACgV,EAAiBpU,EAASmrD,GAAWnhC,IAEnC0hC,IAAoB/pD,EAAAA,EAAAA,KAAY,KACpCwpD,KACAhB,EAAY,CAAE5iB,QAASvnC,EAAQq4B,QAAQkP,YACtC,CAAC4jB,GAAWnrD,EAAQq4B,QAAQkP,QAAS4iB,IAElCwB,IAAsBhqD,EAAAA,EAAAA,KAAY,KACtCwpD,KACAf,EAAc,CAAE7iB,QAASvnC,EAAQq4B,QAAQkP,YACxC,CAAC4jB,GAAWnrD,EAAQq4B,QAAQkP,QAAS6iB,IAElCwB,IAAsBjqD,EAAAA,EAAAA,KAAY,KACtC,MAAMkqD,EAAS7hC,MAAAA,GAAAA,EAAOI,SAClB,CACAvpB,UAAWb,EAAQZ,GACnB0sD,gBAAiB9hC,EAAMI,SAASvK,KAAI,EAAGzgB,GAAAA,KAASA,IAChD2sD,WAAW,GAEX,CAAElrD,UAAWb,EAAQZ,GAAI2sD,WAAW,GAExC1B,EAAuBwB,GACvBV,OACC,CAACA,GAAWnrD,EAAQZ,GAAIirD,EAAwBrgC,IAE7CgiC,IAA6BrqD,EAAAA,EAAAA,KAAY,KAC7C2oD,EAAsB,CAAE1pD,OAAQZ,EAAQY,OAAQxB,GAAIY,EAAQZ,KAC5D+rD,OACC,CAACA,GAAWnrD,EAAQY,OAAQZ,EAAQZ,GAAIkrD,IAErC2B,IAAqBtqD,EAAAA,EAAAA,KAAY,KACrC8oD,GAAc,GACdM,MACC,CAACA,IAEEmB,IAA0BvqD,EAAAA,EAAAA,KAAae,IAC3C6nD,EAAkB,CAChB3pD,OAAQZ,EAAQY,OAChBC,UAAWb,EAAQZ,GACnB+sD,YAAaxnD,KAAKV,MAAMvB,EAAK+jB,UAAY,SAE1C,CAACzmB,EAAQY,OAAQZ,EAAQZ,GAAImrD,IAE1B6B,IAAiBzqD,EAAAA,EAAAA,KAAY,MACjCwnD,EAAAA,GAAAA,IAAqB,gBAAea,GAAiB,KAAIhqD,EAAQY,OAAO+mB,QAAQ,IAAK,SAAS3nB,EAAQZ,MACtG+rD,OACC,CAACnB,EAAcmB,GAAWnrD,EAAQY,OAAQZ,EAAQZ,KAE/CuE,IAAsBhC,EAAAA,EAAAA,KAAY,OACrCqoB,MAAAA,OAAA,EAAAA,EAAOI,WAAY,CAACpqB,IAAUimC,SAASilB,IAClCtoD,EACFU,EAA2B,CAAEtD,QAASkrD,IAEtC7nD,EAAqB,CAAErD,QAASkrD,OAGpCC,OACC,CAACnhC,EAAOhqB,EAASmrD,GAAWvoD,EAAeU,EAA4BD,IAEpEgpD,IAAmBxoD,EAAAA,EAAAA,KAAQ,KAAOmmB,EAAQA,EAAMI,SAAW,CAACpqB,IAAU6f,KAAI,EAAGzgB,GAAAA,KAASA,KAAK,CAAC4qB,EAAOhqB,IAEzG,GAAI8pD,EAGF,YAFAqB,KAKF,MAAMmB,GAAmB,IAAInoC,KAG7B,OAFAmoC,GAAiBrlC,YAAYqlC,GAAiBjoC,cAAgB,GAG5D,0BAAKriB,UAAW,CAAC,uBAAwBuK,GAAsB+B,KAAK,MAClE,mBAAC,GAAD,CACEtO,QAASA,EACT+D,OAAQymD,EACR5D,OAAQA,EACRC,WAAYA,EACZC,cAAeA,EACfC,SAAUA,EACVp6B,UAAWA,EACXC,UAAWA,EACXq6B,OAAQA,EACRC,SAAUA,EACVF,QAASA,EACTG,WAAYA,EACZC,eAAgBA,EAChBC,iBAAkBA,EAClBC,QAASA,EACTC,YAAaA,EACbC,UAAWA,EACX16B,YAAaA,EACblqB,cAAeA,EACf6kD,QAAS6D,GACT5D,OAAQ6D,GACR5D,MAAO6D,GACPlgC,QAASmgC,GACTtoD,UAAWsZ,GACXuR,SAAUyB,EACVm4B,SAAU37B,EACV47B,cAAe6D,GACf5D,gBAAiB6D,GACjBn9B,SAAUo9B,GACV7D,OAAQiE,GACRhE,aAAciE,GACd1hD,QAAS4gD,GACTlD,WAAYmE,GACZlE,WAAYvkD,KAEd,mBAAC,GAAD,CACEI,OAAQypB,EACRnE,WAAgC,cAApBqD,EACZniB,QAASmjB,GACT1D,MAAOA,EACPhqB,QAASA,IAEX,mBAAC,GAAD,CACE+D,OAAQ4pB,EACRpjB,QAASsjB,GACTzY,WAAYi3C,KAEd,mBAAC,GAAD,CACEtoD,OAAQ6mD,EACR/pD,UAAWb,EAAQZ,GACnBwB,OAAQZ,EAAQY,OAChB2J,QAAS6gD,KAEX,mBAAC,GAAD,CACErnD,OAAQ+mD,EACR7lC,gBAAc,EACdJ,WAA2B,IAAf7kB,EAAQ0C,KACpBoiB,OAAOynC,EAAAA,EAAAA,IAAcD,IACrBvnC,cAAY,EACZxa,QAAS8gD,GACTjmC,SAAU8mC,UC1KlB,IAAevpD,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUgqC,YAAAA,EAAa6hB,oBAAAA,MACtB,MAAMC,GAAqBnjC,EAAAA,EAAAA,IAAyB3oB,IAC9C,OAAEC,EAAF,SAAUkS,GAAa25C,GAAsB,GAC7CnqD,EAAO1B,IAAUM,EAAAA,EAAAA,IAAWP,EAAQC,GACpC8rD,EAAcpqD,GAAOqqD,EAAAA,EAAAA,IAA4BrqD,QAAQ6B,EAK/D,MAAO,CACLyoD,gBALsBzhD,QACtB7I,GAAQwQ,IAAYwO,EAAAA,EAAAA,IAAiBhf,EAAMwQ,KAAa45C,MAAAA,OAAxD,EAAwDA,EAAaE,kBAKrEpmB,WAAYmE,GACRkiB,EAAAA,EAAAA,IAAiBlsD,EAAQgqC,EAAYmiB,cACrCN,GACEO,EAAAA,EAAAA,IAA4BpsD,EAAQ6rD,QACpCroD,MAGV,CAAC9C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,eACA,mBACA,iBAtBgBZ,EA/F+C,EACjEqD,OAAAA,EACA4mC,YAAAA,EACA6hB,oBAAAA,EACAhmB,WAAAA,EACAomB,gBAAAA,EACAriD,QAAAA,EACAyiD,aAAAA,EACAC,iBAAAA,EACAC,YAAAA,MAGA,MAAMluC,GAAehX,EAAAA,EAAAA,IAAuB,MACtCpG,GAAOC,EAAAA,EAAAA,MAGXinC,QAASrC,IACPuC,EAAAA,GAAAA,IAAwB,CAAEC,QAASjqB,EAAcmuC,WAnBzB,IAmB4DC,YAAarpD,KAErGwB,EAAAA,EAAAA,KAAU,KACR,GAAIxB,EACF,GAAI4mC,EAAa,CACf,MAAM,aAAEmiB,EAAF,qBAAgBO,GAAyB1iB,EAC/CqiB,EAAa,CACXF,aAAAA,EACAO,qBAAAA,SAEOb,GACTQ,EAAa,CACXR,oBAAAA,MAIL,CAACzoD,EAAQ4mC,EAAaqiB,EAAcR,IAEvC,MAAMhf,GAAe7rC,EAAAA,EAAAA,KAAa4lC,IAChCA,EAAU,IACLA,EACH+lB,qBAAqB,GAGvBJ,EAAY,CAAE3lB,QAAAA,IACdh9B,MACC,CAACA,EAAS2iD,IAEPK,GAAoB5rD,EAAAA,EAAAA,KAAY,KAChC6kC,IACFymB,EAAiB,CAAEH,aAActmB,EAAWpnC,KAC5CmL,OAED,CAACA,EAASi8B,EAAYymB,IAEzB,OACE,mBAAC1tC,GAAA,EAAD,CACEvd,UAAU,kBACV+B,OAAQA,EACRwG,QAASA,EACTijD,gBAAc,EACdnrC,MAAOmkB,GAAahkC,EAAAA,EAAAA,GAAWgkC,EAAWnkB,MAAO,CAAC,QAAS,UAAYzgB,EAAK,uBAE3E4kC,MAAAA,GAAAA,EAAYU,SACX,sCACE,0BAAKv9B,IAAKqV,EAAchd,UAAU,0BAC/BwkC,EAAWU,SAASrnB,KAAK0nB,GACxB,mBAACD,GAAA,EAAD,CACEC,QAASA,EACTnlC,KAAMqrD,EAAAA,GACNhnB,oBAAqBA,EACrBxkC,QAAS2qD,EAAkBpf,OAAerpC,EAC1CgxB,SAAUoS,OAIhB,0BAAKvlC,UAAU,kBACb,mBAACgC,EAAA,EAAD,CACE5B,KAAK,UACLu+B,OAAK,EACLz8B,MAAOsiC,EAAW+D,cAAgB,SAAW,UAC7CtoC,QAASsrD,GAER3rD,EACC4kC,EAAW+D,cAAgB,iCAAmC,8BAC9D/D,EAAW1F,MACX,QAMR,mBAAC3gB,GAAA,EAAD,W,eCvER,MA8LA,IAAexd,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MAAyB,MAClC,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,GAChC,IAAK0B,GAAQA,EAAKorD,aAChB,MAAO,GAET,MAAM1R,GAAYh7C,EAAAA,EAAAA,IAASsB,EAAKlD,IAC1BiD,EAAO25C,GAAY/6C,EAAAA,EAAAA,IAAWN,EAAQC,QAAUuD,EAChDwpD,EAAgBtrD,IAAQurD,EAAAA,EAAAA,IAAiBvrD,GAE/C,MAAO,CACLC,KAAAA,EACAysB,SAASC,EAAAA,EAAAA,IAAkB1sB,GAAM2sB,EAAAA,EAAAA,IAAqBtuB,IAASuuB,EAAAA,EAAAA,IAAuBvuB,IACtFq7C,UAAAA,EACA2R,cAAAA,EACAE,eAAeC,EAAAA,EAAAA,IAAiBxrD,GAChCyrD,cAAe5iD,QAAQ7I,MAAAA,GAAD,UAACA,EAAMo6B,gBAAP,aAAC,EAAgBsxB,kBAG3C,CAAC3sD,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,uBACA,yBACA,iBACA,aACA,iBACA,gBAzBgBZ,EA9LmD,EACrEE,OAAAA,EACAmD,OAAAA,EACA6iD,OAAAA,EACArkC,UAAAA,EACA0rC,YAAAA,EACAC,cAAAA,EACAC,aAAAA,EACAC,UAAAA,EACAC,QAAAA,EACAC,SAAAA,EACAhsD,KAAAA,EACA05C,UAAAA,EACAjtB,QAAAA,EACA8+B,cAAAA,EACAE,cAAAA,EACAJ,cAAAA,EACAY,mBAAAA,EACAC,cAAAA,EACAjkD,QAAAA,EACA65C,oBAAAA,EACAqK,qBAAAA,EACAC,uBAAAA,EACAC,eAAAA,EACAC,WAAAA,EACAC,eAAAA,EACAC,WAAAA,MAEA,MAAOtE,EAAYC,IAAiBnlD,EAAAA,EAAAA,KAAS,IACtCkoB,EAAmBk9B,IAAwBplD,EAAAA,EAAAA,KAAS,IACrD,EAAEkL,EAAF,EAAKC,GAAMm2C,GAEjBn6C,EAAAA,EAAAA,GAAkB1I,EAAQqgD,OAAqBjgD,GAAW,GAE1D,MAAMsrB,GAAe9tB,EAAAA,EAAAA,KAAY,KAC/B8oD,GAAc,GACdC,GAAqB,KACpB,IAEGS,GAAYxpD,EAAAA,EAAAA,KAAY,KAC5B8oD,GAAc,GACdlgD,MACC,CAACA,IAEEmjB,GAAmB/rB,EAAAA,EAAAA,KAAY,KACnC+oD,GAAqB,GACrBngD,MACC,CAACA,IAEEwkD,GAAiBptD,EAAAA,EAAAA,KAAY,KACjCgtD,EAAe,CAAEK,QAAS,aACzB,CAACL,IAEEM,GAAmBttD,EAAAA,EAAAA,KAAY,KACnCitD,EAAW,CAAEhuD,OAAAA,MACZ,CAACA,EAAQguD,IAENM,GAAwBvtD,EAAAA,EAAAA,KAAY,KACxC8sD,EAAqB,CAAE7tD,OAAAA,EAAQmuB,SAAUA,IACzCo8B,MACC,CAACvqD,EAAQuqD,EAAWp8B,EAAS0/B,IAE1BU,GAAwBxtD,EAAAA,EAAAA,KAAY,KACxCktD,EAAe,CAAEzvD,GAAIwB,IACrBuqD,MACC,CAACvqD,EAAQuqD,EAAW0D,IAEjBO,GAAwBztD,EAAAA,EAAAA,KAAY,KACxCmtD,EAAW,CAAE7uC,OAAQrf,IACrBuqD,MACC,CAAC2D,EAAYluD,EAAQuqD,IAElBkE,GAAkB1tD,EAAAA,EAAAA,KAAY,KAClC4sD,IACApD,MACC,CAACA,EAAWoD,IAETe,GAAe3tD,EAAAA,EAAAA,KAAY,KAC/B6sD,IACArD,MACC,CAACA,EAAWqD,IAETe,GAAuB5tD,EAAAA,EAAAA,KAAY,KACvC+sD,IACAvD,MACC,CAACA,EAAWuD,KAEfnpD,EAAAA,EAAAA,KAAU,KACRihD,KAEOG,KACN,IAEH,MAAM/kD,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAAC2tD,GAAA,EAAD,KACE,0BAAKxtD,UAAU,uBACb,mBAAC4nD,GAAA,EAAD,CACE7lD,OAAQymD,EACRhmD,UAAU,QACV1E,MAAQ,SAAQ0Q,YAAYC,OAC5BlG,QAAS4gD,GAER9mD,EAAAA,IAA2B4pD,GAC1B,mBAACxpD,EAAA,EAAD,CACEC,KAAK,OACLzC,QAAS8sD,GAERntD,EAAK,aAGTyC,EAAAA,IAA2B6pD,GAC1B,mBAACzpD,EAAA,EAAD,CACEC,KAAK,OACLzC,QAASgtD,GAERrtD,EAAK,eAGTyC,EAAAA,IAA2B8pD,GAC1B,mBAAC1pD,EAAA,EAAD,CACEC,KAAM6d,EAAY,UAAY,QAC9BtgB,QAASotD,GAERztD,EAAK2gB,EAAY,YAAc,eAGnCorC,GACC,mBAAClpD,EAAA,EAAD,CACEC,KAAK,WACLzC,QAASmtD,GAERxtD,EAAK,eAGTyC,EAAAA,IAA2B+pD,GAC1B,mBAAC3pD,EAAA,EAAD,CACEC,KAAK,SACLzC,QAASqtD,GAER1tD,EAAK,WAGTysD,GACC,mBAAC5pD,EAAA,EAAD,CACEC,KAAMqqB,EAAU,SAAW,OAC3B9sB,QAASitD,GAERttD,EAAKmtB,EAAU,cAAgB,cAGnCg/B,GACC,mBAACtpD,EAAA,EAAD,CACEC,KAAM6d,EAAY,WAAa,UAC/BtgB,QAASktD,GAERvtD,EAAK2gB,EAAY,iBAAmB,6BAGzC,mBAAC9d,EAAA,EAAD,CACEC,KAAK,SACLzC,QAASstD,GAER3tD,EAAK,yBAEP0sD,GACC,mBAAC7pD,EAAA,EAAD,CACE8pB,aAAW,EACX7pB,KAAK,SACLzC,QAASwtB,GAER7tB,EAAKo6C,EACF,iBACC6R,EAAgB,0BAA6BtrC,EAAY,eAAiB,sBAIpFjgB,GACC,mBAACwtB,GAAA,EAAD,CACE/rB,OAAQypB,EACRjjB,QAASmjB,EACTprB,KAAMA,U,eC7MlB,MAAMmtD,IAAwBv0B,EAAAA,EAAAA,KAAUlL,GAAOA,KAAM,KAAK,GAsK1D,IAAertB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAM2B,GAAOopB,EAAAA,EAAAA,IAAkB/qB,GAC/B,IAAK2B,EACH,MAAO,GAGT,MAAM,MAAEuxB,EAAF,QAAS67B,IAAYC,EAAAA,EAAAA,IAAwBhvD,IAAW,IACxD,WAAEu0C,EAAF,SAAclhC,GAAa07C,GAAW,GAE5C,MAAO,CACLptD,KAAAA,EACAuxB,MAAAA,EACAqhB,WAAAA,EACAlhC,SAAAA,EACA47C,sBAAuBzkD,QAAQxK,EAAOooB,+BAG1C,CAAC1nB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,0BACA,0BACA,eACA,uBACA,yBAvBgBZ,EApKuC,EACzDid,SAAAA,EACArb,KAAAA,EACAuxB,MAAAA,EACAqhB,WAAAA,EACAlhC,SAAAA,EACA47C,sBAAAA,EACAC,wBAAAA,EACAC,wBAAAA,EACAruD,aAAAA,EACAsuD,qBAAAA,EACAC,oBAAAA,MAGA,MAAMphD,GAAW5G,EAAAA,EAAAA,IAAyB,OACnCioD,EAAcC,IAAmB5qD,EAAAA,EAAAA,IAAS,IAGjDC,EAAAA,EAAAA,KAAU,KACR,MAAM,eAAE4qD,GAAmBpqD,OAC3B,IAAKoqD,EACH,OAGF,MAAMC,EAASryD,SAASod,eAAe,QACjCtV,EAAe,KACnB,MAAM,cAAE6oB,GAAkB3wB,SAC1B,GAAI2wB,GAAkBA,IAAkB9f,EAASpG,QAAU,CACzD,MAAM,QAAE6nD,EAAF,OAAW3qD,GAAWyqD,EAC5BC,EAAOtwD,MAAM+R,UAAa,cAAaw+C,OACvCD,EAAOtwD,MAAM4F,OAAU,GAAEA,MACzB3H,SAAS+rC,gBAAgBvqC,UAAY8wD,OAErCD,EAAOtwD,MAAM+R,UAAY,GACzBu+C,EAAOtwD,MAAM4F,OAAS,IAM1B,OAFAyqD,EAAenqD,iBAAiB,SAAUH,GAEnC,KACLsqD,EAAelqD,oBAAoB,SAAUJ,MAE9C,KAGHN,EAAAA,EAAAA,KAAU,KACJjD,GAAQ0R,GAAYA,EAAS1T,QAC/BmB,EAAa,CAAEb,OAAQ0B,EAAKlD,GAAIyB,UAAWmT,EAASA,EAAS1T,OAAS,KACtE4vD,EAAgB,IAEhBA,GAAiB,KAElB,CAAC5tD,EAAMb,EAAcuS,KAGxBzO,EAAAA,EAAAA,KAAU,KACR+qD,MAAMC,KAAKxyD,SAASqC,iBAAmC,UAAU6lC,SAASuqB,IACxEA,EAAMzhD,SAAW5D,QAAQwS,GAAY6yC,IAAU5hD,EAASpG,YAG1D8nD,MAAMC,KAAKxyD,SAASqC,iBAAiC,yBAAyB6lC,SAASwqB,IACrFA,EAAIC,gBAAkB/yC,EAAW,QAAU,YAE5C,CAACA,KAGJpY,EAAAA,EAAAA,KAAU,KACHoY,GACH/O,EAASpG,QAASmoD,SAEnB,CAAChzC,KAEJvS,EAAAA,EAAAA,KAAgB,KACMrN,SAASY,cAAgC,uBACjDgyD,SACX,CAACf,IAEJ,MAAMgB,GAAiCjvD,EAAAA,EAAAA,KAAakvD,IAClDhB,EAAwB,CAAEh8B,MAAOg9B,IAE7BA,EAASvwD,QACXmvD,GAAsBK,KAEvB,CAACA,EAAyBD,IAEvBiB,GAAWnvD,EAAAA,EAAAA,KAAY,KAC3B,GAAIW,GAAQ0R,EAAU,CACpB,MAAM+8C,EAAgBd,EAAe,EACrCxuD,EAAa,CAAEb,OAAQ0B,EAAKlD,GAAIyB,UAAWmT,EAASA,EAAS1T,OAAS,EAAIywD,KAC1Eb,EAAgBa,MAEjB,CAACzuD,EAAM2tD,EAAcxuD,EAAcuS,IAEhCg9C,GAAarvD,EAAAA,EAAAA,KAAY,KAC7B,GAAIW,GAAQ0R,EAAU,CACpB,MAAM+8C,EAAgBd,EAAe,EACrCxuD,EAAa,CAAEb,OAAQ0B,EAAKlD,GAAIyB,UAAWmT,EAASA,EAAS1T,OAAS,EAAIywD,KAC1Eb,EAAgBa,MAEjB,CAACzuD,EAAM2tD,EAAcxuD,EAAcuS,IAEtC,OACE,0BAAK5U,GAAG,eAAe4C,UAAW2b,EAAW,SAAW,IACtD,0BAAK3b,UAAU,UACb,mBAACgC,EAAA,EAAD,CACE5B,KAAK,UACL6B,OAAK,EACLC,MAAM,cACNjC,QAAS8tD,GAET,wBAAG/tD,UAAU,qBAEf,mBAACivD,GAAA,EAAD,CACEtnD,IAAKiF,EACLK,MAAO4kB,EACP1kB,SAAUyhD,KAGd,0BAAK5uD,UAAU,UACb,0BAAKA,UAAU,WACZ6xB,EACC7f,MAAAA,GAAAA,EAAU1T,OACP,GAAE2vD,EAAe,QAAQ/a,IACxBlhC,IAAaA,EAAS1T,OACxB,aAEA,GAGF,mBAAC0D,EAAA,EAAD,CACEC,OAAK,EACL7B,KAAK,UACL8B,MAAM,cACNjC,QAAS,IAAM+tD,EAAoB,CAAEnrC,YAAY0nC,EAAAA,EAAAA,IAAcpoC,KAAKmB,SACpElhB,UAAU,2BAEV,wBAAGpC,UAAU,oBAInB,mBAACgC,EAAA,EAAD,CACEC,OAAK,EACL7B,KAAK,UACL8B,MAAM,cACNjC,QAAS6uD,EACT/hD,UAAWiF,IAAaA,EAAS1T,QAAU2vD,IAAiBj8C,EAAS1T,OAAS,GAE9E,wBAAG0B,UAAU,aAEf,mBAACgC,EAAA,EAAD,CACEC,OAAK,EACL7B,KAAK,UACL8B,MAAM,cACNjC,QAAS+uD,EACTjiD,UAAWiF,IAAaA,EAAS1T,QAA2B,IAAjB2vD,GAE3C,wBAAGjuD,UAAU,qB,2DCnMR,SAASkvD,GACtBpyD,EACAqyD,EACAC,EAAS,EACTC,GAAU,EACVC,GAAsB,EACtBC,GAAe,GAEf,MAAMC,EAAa1yD,EAAUyyD,EAAe,aAAe,aACrDE,EAAaD,EAAa1yD,EAAUyyD,EAAe,cAAgB,gBACnEG,EAA4C,iBAAvBP,EACvBryD,EAAUsB,iBAA8B+wD,GACxCA,GACE,OAAE7wD,GAAWoxD,EACbC,EAA2B,GACjC,IAAIC,GAAU,EAEd,IAAK,IAAIvqC,EAAI,EAAGA,EAAI/mB,EAAQ+mB,IAAK,CAC/B,MAAM3nB,EAAUgyD,EAAYrqC,GACtBwqC,EAAKnyD,EAAQ6xD,EAAe,aAAe,aAC3CO,EAAKD,EAAKnyD,EAAQ6xD,EAAe,cAAgB,gBAKvD,GAJkBD,EACdQ,GAAMN,EAAaJ,GAAUU,GAAML,EAAaL,EAChDS,GAAMJ,EAAaL,GAAUU,GAAMN,EAAaJ,EAGlDO,EAAerqC,KAAKD,GACpBuqC,GAAU,OACL,GAAIA,IAAYP,EACrB,MAIJ,MAAO,CAAEK,YAAAA,EAAaC,eAAAA,GCzBxB,SARA,SAAwB7yD,EAAwBY,EAAsB6xD,GAAe,GACnF,MAAMC,EAAa1yD,EAAUyyD,EAAe,aAAe,aACrDE,EAAaD,EAAa1yD,EAAUyyD,EAAe,cAAgB,gBACnEM,EAAKnyD,EAAQ6xD,EAAe,aAAe,aAC3CO,EAAKD,EAAKnyD,EAAQ6xD,EAAe,cAAgB,gBACvD,OAAOM,EAAKL,GAAcM,EAAKL,G,cCElB,SAASM,GAAsBC,EAAkBh1C,EAAegC,GAC7E,MAAMlgB,EAAYkgB,EAAaxW,QAC/B,IAAK1J,GAAake,EAAQ,EACxB,OAEF,MAAM,eAAE20C,EAAF,YAAkBD,GAAgBR,GACtCpyD,EACAkzD,EAVoB,GAYpB,GACA,GAGF,IAAKN,EAAYpxD,SAAWoxD,EAAY10C,GACtC,OAEF,MAAMi1C,EAAQN,EAAe,GAC7B,IAAKA,EAAetyD,SAAS2d,IACvBA,IAAUi1C,IAAUC,GAAepzD,EAAW4yD,EAAYO,IAAU,CACxE,MAAM3kD,EAAW0P,EAAQ20C,EAAeA,EAAerxD,OAAS,GAAK,QAAU,OAC/E6xD,EAAAA,GAAAA,GAAiBrzD,EAAW4yD,EAAY10C,GAAQ1P,EAtB9B,K,eCDf,SAAS8kD,IAAsB,SACpCz0C,EADoC,aAEpC4zC,EAFoC,iCAGpCc,EAHoC,6BAIpCC,EAJoC,kBAKpCC,EALoC,MAMpC7yC,EANoC,kBAOpC8yC,EAPoC,SAQpChkC,EARoC,QASpCjkB,IAYA,MAAOkoD,EAAmBC,IAAwBptD,EAAAA,EAAAA,KAAU,GAEtDqtD,GAAmBhxD,EAAAA,EAAAA,KAAaixD,GAC/BlzC,GAIEmzC,EAAAA,GAAAA,GAAcnzC,EAAMpf,OAAQsyD,IAHzB,GAIT,CAAClzC,IAEEozC,GAAiBnxD,EAAAA,EAAAA,KAAY,CAACsN,EAAe7I,KACjDA,EAAEqH,iBACFilD,GAAsB11C,GAAW21C,EAAiB31C,EAAQ/N,OACzD,CAACyjD,EAAsBC,IAEpBI,GAAmBpxD,EAAAA,EAAAA,KAAayE,IACpC,GAAIsZ,GAASA,EAAMpf,QAAUmyD,GAAqB,EAAG,CACnD,MAAMO,EAAOtzC,EAAM+yC,GACfO,IACF5sD,EAAEqH,iBACF+gB,EAASwkC,OAGZ,CAACtzC,EAAO8O,EAAUikC,IAEfQ,GAAyBvzC,GAAS+yC,EAAoB/yC,EAAMpf,OAAS,EAmB3E,OAlBAiF,EAAAA,EAAAA,KAAU,KACH8sD,IAAoCY,GACvCP,EAAqBJ,GAAgC,EAAI,KAE1D,CAACW,EAAuBX,EAA8BD,KAEzD9sD,EAAAA,EAAAA,KAAU,IAAOoY,GAAWmQ,EAAAA,GAAAA,GAAyB,CACnDG,MAAO1jB,EACP2oD,KAAMX,GAAqBhB,OAAeptD,EAAaiC,GAAqB0sD,GAAgB,EAAG1sD,GAC/F+sD,OAAQZ,GAAqBhB,OAAeptD,EAAaiC,GAAqB0sD,EAAe,EAAG1sD,GAChGgtD,OAAQb,IAAsBhB,OAAeptD,EAAaiC,GAAqB0sD,GAAgB,EAAG1sD,GAClGitD,QAASd,IAAsBhB,OAAeptD,EAAaiC,GAAqB0sD,EAAe,EAAG1sD,GAClGktD,MAAOd,EAAoBO,OAAmB5uD,EAC9ComB,QAASwoC,SACN5uD,GAAY,CACfouD,EAAmBO,EAAgBC,EAAkBp1C,EAAU4zC,EAAchnD,EAASioD,IAGjFC,EC5CT,MAkFA,IAAe9vD,EAAAA,EAAAA,KAlFsB,EACnCoB,OAAAA,EACAwG,QAAAA,EACAgpD,iBAAAA,EACAnjC,UAAAA,EACAojC,cAAAA,MAGA,MAAMx0C,GAAehX,EAAAA,EAAAA,IAAuB,OACtC,aAAEqE,EAAF,qBAAgBE,IAAyBE,EAAAA,EAAAA,GAAkB1I,OAAQI,OAAWA,GAAW,GAEzFsvD,GAAmB9xD,EAAAA,EAAAA,KAAY,CAACse,EAAgByzC,GAAa,KACjE,MAAMrxD,EAAO+tB,MAAAA,OAAH,EAAGA,EAAYnQ,GACpB5d,GAILkxD,EAAiBlxD,EAAMqxD,KACtB,CAACtjC,EAAWmjC,IAETI,GAAsBhyD,EAAAA,EAAAA,KAAaiyD,IACvCH,EAAiBG,EAAOx0D,IAAI,KAC3B,CAACq0D,IAEEI,EAAuBzB,GAAsB,CACjDz0C,SAAU5Z,EACV2b,MAAO8zC,EACPhlC,SAAUmlC,EACVnB,mBAAmB,EACnBH,kCAAkC,EAClC9nD,QAAAA,KAGFhF,EAAAA,EAAAA,KAAU,KACRwsD,GAAsB,uBAAwB8B,EAAsB70C,KACnE,CAAC60C,KAEJtuD,EAAAA,EAAAA,KAAU,KACJiuD,IAAkBA,EAAclzD,QAClCiK,MAED,CAACipD,EAAejpD,IAEnB,MAAMupD,GAAkBnlD,EAAAA,EAAAA,GACtB6kD,MAAAA,GAAAA,EAAelzD,OACXkzD,OACArvD,EACJkI,GAEI0nD,EAAsBP,IAAkBA,EAAclzD,OACxDwzD,EACAN,EAEJ,IAAKnnD,GAAiB0nD,IAAwBA,EAAoBzzD,OAChE,OAGF,MAAM0B,GAAYmE,EAAAA,EAAAA,GAChB,gDACAoG,GAGF,OACE,0BAAKvK,UAAWA,EAAW2H,IAAKqV,GAC7B+0C,MAAAA,OADH,EACGA,EAAqBl0C,KAAI,EAAGzgB,GAAAA,GAAM4d,IACjC,mBAAC8C,GAAA,EAAD,CACE3d,IAAK/C,EACL4C,UAAU,kCACVC,QAAS,IAAMwxD,EAAiBr0D,GAChCglC,MAAOyvB,IAAyB72C,GAEhC,mBAAC+C,GAAA,EAAD,CACEE,OAAQ7gB,EACRywB,WAAW,QACXV,cAAY,W,eCrDxB,MAwNA,IAAexsB,EAAAA,EAAAA,KAtNuB,EACpCqxD,YAAAA,EACAC,QAAAA,EACAC,QAAAA,EACA91C,cAAAA,EACA+1C,iBAAAA,EACA/jC,UAAAA,EACAgkC,aAAAA,EACAC,kBAAAA,EACAC,cAAAA,EACAC,eAAAA,EACAC,gBAAAA,EACAzM,OAAAA,EACA0M,aAAAA,EACAC,QAAAA,MAGA,MAAMC,GAAiB3sD,EAAAA,EAAAA,IAAe,MAChC4sD,GAAkBjmD,EAAAA,EAAAA,GAAYqlD,GAC9Ba,EAAuBb,EAAY1zD,OAAS0zD,EAAcY,EAC1D7wD,EAASoH,QAAQ6oD,EAAY1zD,SAC5Bw0D,EAAWC,EAAaC,IAAiBpvC,EAAAA,GAAAA,KAC1CqvC,EAAU9pD,QAAQ0pD,GAAwBA,EAAqBK,OAAOzgC,GAAMA,EAAE0gC,SAC9EvzD,GAAOC,EAAAA,EAAAA,MAEP,qBACJuzD,EADI,oBACkBC,EADlB,cACuCC,EADvC,qBACsDC,IACxDC,EAAAA,GAAAA,GACFzxD,EACAkwD,EACAO,EACAiB,EAAAA,GACAtB,OACAhwD,EACAia,EACAgS,IAEI,mBACJslC,EADI,kBACgBC,EADhB,eACmCC,EADnC,YACmDC,IACrDC,EAAAA,GAAAA,GACF/xD,EACAkwD,EACAG,EACAqB,EAAAA,GACAjB,EACAH,EACAC,GACCJ,IAGH3uD,EAAAA,EAAAA,KAAU,IAAOxB,GAAS4Y,EAAAA,EAAAA,GAAsB+3C,QAAWvwD,GAAY,CAACJ,EAAQ2wD,IAEhF,MAAMqB,GAAkBp0D,EAAAA,EAAAA,KAAY,KAC9BoC,GACFgkD,MAED,CAAChkD,EAAQgkD,IAsBNiO,GAAkBr0D,EAAAA,EAAAA,KAAayE,IACnCA,EAAEqH,iBACFunD,IAEA,MAAQiB,cAAc,MAAEznB,IAAYpoC,EAEpC,GAAIooC,MAAAA,GAAAA,EAAOluC,OAAQ,CACjB,MAAM41D,EAAWjB,EACb3E,MAAMC,KAAK/hB,GAAOjwB,QAAQ43C,GACnBA,EAAKjnD,MAAQknD,EAAAA,GAAAA,IAA+BD,EAAKjnD,QAExDohD,MAAMC,KAAK/hB,GAEfimB,EAAayB,EAAUjB,MAExB,CAACA,EAASR,EAAcO,IAW3B,IAAKH,EACH,OAGF,MAAMwB,EAAexB,EAAqBK,OAAOzgC,GAAM6hC,EAAAA,GAAAA,IAAkC7hC,EAAE8hC,YACrFC,EAAe3B,EAAqBK,OAAOzgC,GAAMgiC,EAAAA,GAAAA,IAAkChiC,EAAE8hC,YACrFG,EAAe7B,EAAqBK,OAAOzgC,GAAMA,EAAE8hC,SAASviC,WAAW,YAE7E,IAAI3R,EAAQ,GAkCZ,OAhCEA,EAAQzgB,EADNy0D,EACW,0BACJG,EACI,0BACJE,EACI,0BAEA,yBAN2B7B,EAAqBv0D,OAAQ,KAiCrE,mBAACif,GAAA,EAAD,CACExb,OAAQA,EACRwG,QAASmqD,EACTl1C,OA3BJ,WACE,GAAKq1C,EAIL,OACE,0BAAK7yD,UAAU,yBAAyBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAChE,mBAACH,EAAA,EAAD,CAAQC,OAAK,EAACC,MAAM,cAAc9B,KAAK,UAAUgC,UAAU,qBAAqBnC,QAASyyD,GACvF,wBAAG1yD,UAAU,gBAEf,0BAAKA,UAAU,eAAeqgB,GAC9B,mBAACre,EAAA,EAAD,CACEE,MAAM,UACN9B,KAAK,UACLJ,UAAU,sBACVC,QAAS8zD,GAERn0D,EAAK,UAUF+0D,GACR30D,UAAY,oBAAkB8yD,EAAY,UAAY,KAEtD,0BACE9yD,UAAU,cACV40D,YAAa7B,EACb8B,OAAQb,EACRc,WA9DN,SAAwB1wD,GACtBA,EAAEqH,iBACFrH,EAAEC,kBAEEsuD,EAAensD,SACjBzC,OAAOqC,aAAausD,EAAensD,UA0DjCuuD,YApGmB3wD,IACvB,MAAQ4wD,cAAeC,EAAU5nD,OAAQ6nD,GAAe9wD,EAGnD8wD,EAA8Bt9C,QAAQ,kBAAoBq9C,IAC7DtC,EAAensD,QAAUzC,OAAOoC,WAAW6sD,EAjEnB,MAqEtBkC,GAAeA,EAA2B/3D,QAAQ,8BAIlD83D,GACF7wD,EAAEC,kBAGJ2uD,MAoFI,0BAAyBpzD,EAAK,4BAA6B,KAE1DqzD,EACC,0BAAKjzD,UAAU,+BACZ6yD,EAAqBh1C,KAAKs3C,GACzBA,EAAWZ,SAASviC,WAAW,UAC3B,0BAAK31B,IAAK84D,EAAW3kD,QAASG,IAAI,KAClC,4BAAOtU,IAAK84D,EAAW3kD,QAAS1E,UAAQ,EAACG,OAAK,EAACD,MAAI,OAI3D,0BAAKhM,UAAU,kCACZ6yD,EAAqBh1C,KAAKs3C,GACzB,mBAACC,GAAA,EAAD,CACEj5C,KAAMg5C,EAAWE,SACjBC,WAAWC,EAAAA,GAAAA,IAAiBJ,EAAWE,SAAUF,EAAWZ,UAC5DiB,YAAaL,EAAWrgD,eACxB1U,KAAM+0D,EAAW/0D,KACjB60B,SAAO,OAMf,0BAAKj1B,UAAU,8BACb,mBAAC,GAAD,CACE+B,OAAQqxD,EACR7qD,QAAS8qD,EACT9B,iBAAkB+B,EAClB9B,cAAe+B,EACfnlC,UAAWA,IAEb,mBAAC,KAAD,CACErsB,OAAQ2xD,EACR+B,OAAQ7B,EACRrrD,QAASorD,EACT+B,cAAe7B,EACftB,eAAgBA,IAElB,mBAACoD,GAAA,EAAD,CACEv4D,GAAG,qBACHw4D,wBAAsB,EACtBC,KAAM5D,EACN6D,gBAAiBrC,EAAAA,GACjBn2C,YAAa1d,EAAK,WAClBm2D,SAAUvD,EACVzM,OAAQA,EACRiQ,eAAgB7sD,QAAQ6oD,EAAY1zD,gB,eCrOhD,MAqUA,IAAeqC,EAAAA,EAAAA,KA/TiB,EAAGoB,OAAAA,EAAQgkD,OAAAA,EAAQ2M,QAAAA,MAEjD,MAAMuD,GAAmBjwD,EAAAA,EAAAA,IAAyB,MAE5CkwD,GAAiBlwD,EAAAA,EAAAA,IAAuB,MAExCmwD,GAAcnwD,EAAAA,EAAAA,IAAuB,OAEpCowD,EAAUC,IAAe/yD,EAAAA,EAAAA,IAAiB,KAC1CknB,EAAS8rC,IAAchzD,EAAAA,EAAAA,IAAmB,CAAC,MAC3CizD,EAAaC,IAAkBlzD,EAAAA,EAAAA,KAAS,IACxCmzD,EAAmBC,IAAwBpzD,EAAAA,EAAAA,KAAS,IACpDqzD,EAAYC,IAAiBtzD,EAAAA,EAAAA,KAAS,IACtCuzD,EAAUC,IAAexzD,EAAAA,EAAAA,OACzByzD,EAAeC,IAAoB1zD,EAAAA,EAAAA,OACnC2zD,EAAWC,IAAgB5zD,EAAAA,EAAAA,KAAkB,GAE9C1D,GAAOC,EAAAA,EAAAA,KAEPs3D,GAAax3D,EAAAA,EAAAA,KAAagI,IAC1B5F,GAAU4F,EAAInB,SAChBmB,EAAInB,QAAQ47B,UAEb,CAACrgC,KAEJwB,EAAAA,EAAAA,KAAU,IAAOxB,GAAS4Y,EAAAA,EAAAA,GAAsB+3C,QAAWvwD,GAAY,CAACJ,EAAQ2wD,KAChFnvD,EAAAA,EAAAA,KAAU,KACHxB,IACHs0D,EAAY,IACZC,EAAW,CAAC,KACZE,GAAe,GACfE,GAAqB,GACrBE,GAAc,GACdE,EAAY,IACZE,EAAiB,IACjBE,GAAa,MAEd,CAACn1D,KAEJwB,EAAAA,EAAAA,KAAU,IAAM4zD,EAAWlB,IAAmB,CAACkB,EAAYp1D,KAE3DqH,EAAAA,EAAAA,KAAgB,KACd,MAAMguD,EAAajB,EAAY3vD,QAE3B4wD,GAAcP,IAAaO,EAAWC,YACxCD,EAAWC,UAAYR,KAExB,CAACA,IAEJ,MAAMS,GAAe33D,EAAAA,EAAAA,KAAY,CAAC43D,EAAuB,MACvDjB,EAAW,IAAIiB,EAAY,KAC3B1+C,uBAAsB,KACpB,MAAM2+C,EAAOtB,EAAe1vD,QACvBgxD,IAILA,EAAKv7D,UAAU8Z,OAAO,YAAayhD,EAAKtT,aA/DtB,KAgElBsT,EAAKC,SAAS,CAAE3/C,IAAK0/C,EAAKtT,aAAcwT,SAAU,iBAEnD,IAEGC,GAAeh4D,EAAAA,EAAAA,KAAY,KAE/B,GADAu3D,GAAa,IACRn1D,EACH,OAGF,MAAM61D,EAAkBxB,EAASt8B,OAAOyP,UAAU,EAvE1B,KAwElBsuB,EAAiBrtC,EAAQ3M,KAAKi6C,GAAMA,EAAEh+B,OAAOyP,UAAU,EAzEvC,OAyE8DhtB,QAAQu7C,GAAMA,EAAEx5D,SAEpG,IAAKs5D,GAAmBC,EAAev5D,OAAS,EAY9C,OAXA+3D,EAAYuB,GACRC,EAAev5D,OACbu5D,EAAev5D,OAAS,EAC1Bg5D,EAAaO,GAEbvB,EAAWuB,GAGbP,SAEFJ,GAAa,GAIf,GAAIP,KAAgBI,IAAkBc,EAAezqD,OAAO2pD,KAE1D,YADAG,GAAa,GAIf,MAOM//B,EAAsB,CAC1B4gC,QAAS,CACP3B,SAAUwB,EACVI,QAVYH,EACbh6C,KAAI,CAAC5a,EAAM+X,KAAP,CACH/X,KAAMA,EAAK62B,OACXm+B,OAAQv1C,OAAO1H,MACX0H,OAAO1H,KAAW+7C,GAAiB,CAAEmB,SAAS,WAO7C3B,GAAe,CAAE4B,UAAU,MAC5B1B,GAAqB,CAAE2B,gBAAgB,MACvCzB,GAAc,CAAE0B,MAAM,KAI9B,GAAI1B,EAAY,CACd,MAAM,KAAE1zD,EAAF,SAAQq1D,GAAczB,IAAY0B,EAAAA,GAAAA,GAAkB1B,EAASttB,UAAU,EA/GvD,OA+GoF,GAE1GpS,EAAQkhC,KAAO,CACbG,eAAgB,CAACzB,MACb9zD,GAAQ,CAAE4zD,SAAU5zD,MACpBq1D,GAAY,CAAEG,iBAAkBH,IAIxCvS,EAAO5uB,KACN,CACDp1B,EACAq0D,EACA5rC,EACAmsC,EACAI,EACAR,EACAE,EACA1Q,EACAuR,EACAT,IAGI6B,GAAe/4D,EAAAA,EAAAA,KAAY,CAACqb,EAAe/X,KAC/C,MAAMs0D,EAAa,IAAI/sC,GACvB+sC,EAAWv8C,GAAS/X,EAChBs0D,EAAWA,EAAWj5D,OAAS,GAAGw7B,OAAOx7B,QAAUi5D,EAAWj5D,OA5I5C,GA6IpBg5D,EAAaC,GAEbjB,EAAWiB,KAEZ,CAAC/sC,EAAS8sC,IAEPqB,GAAeh5D,EAAAA,EAAAA,KAAaqb,IAChC,MAAMu8C,EAAa,IAAI/sC,GACvB+sC,EAAWh1B,OAAOvnB,EAAO,GACzBs7C,EAAWiB,GACX1+C,uBAAsB,KACfq9C,EAAe1vD,SAIpB0vD,EAAe1vD,QAAQvK,UAAU8Z,OAAO,YAAamgD,EAAe1vD,QAAQ09C,aA7J1D,UA+JnB,CAAC15B,IAEEouC,GAA4Bj5D,EAAAA,EAAAA,KAAaq8C,IAC7Cgb,EAAiBhb,KAChB,CAACgb,IAEE6B,GAA0Bl5D,EAAAA,EAAAA,KAAayE,IAC3CoyD,EAAepyD,EAAEiJ,OAAO01B,WACvB,IAEG+1B,GAA8Bn5D,EAAAA,EAAAA,KAAayE,IAC/CsyD,EAAqBtyD,EAAEiJ,OAAO01B,WAC7B,IAEGg2B,GAAuBp5D,EAAAA,EAAAA,KAAayE,IACxCwyD,EAAcxyD,EAAEiJ,OAAO01B,WACtB,IAEGi2B,GAAiBr5D,EAAAA,EAAAA,KAAayE,IAChB,KAAdA,EAAE60D,SACJtB,MAED,CAACA,IAEEuB,GAAmBv5D,EAAAA,EAAAA,KAAY,KACnC,GAAIs3D,IAAcb,EAASt8B,OAAOx7B,OAChC,OAAOsB,EAAK,+BAIb,CAACq3D,EAAWr3D,EAAMw2D,IAEf+C,GAAkBx5D,EAAAA,EAAAA,KAAaqb,IACnC,MAAM68C,EAAiBrtC,EAAQ3M,KAAKi6C,GAAMA,EAAEh+B,SAAQvd,QAAQu7C,GAAMA,EAAEx5D,SACpE,GAAI24D,GAAaY,EAAev5D,OAAS,IAAMksB,EAAQxP,GAAO8e,OAAOx7B,OACnE,OAAOsB,EAAK,8BAGb,CAACq3D,EAAWr3D,EAAM4qB,IAqBrB,SAAS4uC,IACP,OAAO5uC,EAAQ3M,KAAI,CAACo6C,EAAQj9C,IAC1B,0BAAKhb,UAAU,kBACb,mBAACod,GAAA,EAAD,CACEkN,MAAOtP,IAAUwP,EAAQlsB,OAAS,GA7NlB,KA6NuBksB,EAAQlsB,OAC3CsB,EAAK,cACLA,EAAK,wBACTggB,MAAOu5C,EAAgBn+C,GACvB/N,MAAOgrD,EACP9qD,SAAW/I,GAAMs0D,EAAa19C,EAAO5W,EAAE+G,cAAc8B,OACrDosD,WAAYL,IAEbh+C,IAAUwP,EAAQlsB,OAAS,GAC1B,mBAAC0D,EAAA,EAAD,CACEhC,UAAU,uBACViC,OAAK,EACLC,MAAM,cACN9B,KAAK,UACLgC,UAAWxC,EAAK,UAChBK,QAAS,IAAM04D,EAAa39C,IAE5B,wBAAGhb,UAAU,mBAoBvB,OACE,mBAACud,GAAA,EAAD,CAAOxb,OAAQA,EAAQwG,QAASmqD,EAASl1C,OA3DvC,0BAAKxd,UAAU,0BACb,mBAACgC,EAAA,EAAD,CAAQC,OAAK,EAACC,MAAM,cAAc9B,KAAK,UAAUgC,UAAU,uBAAuBnC,QAASyyD,GACzF,wBAAG1yD,UAAU,gBAEf,0BAAKA,UAAU,eAAeJ,EAAK,YACnC,mBAACoC,EAAA,EAAD,CACEE,MAAM,UACN9B,KAAK,UACLJ,UAAU,sBACVC,QAAS03D,GAER/3D,EAAK,YAgDqDI,UAAU,aACzE,mBAACod,GAAA,EAAD,CACEzV,IAAKsuD,EACL3rC,MAAO1qB,EAAK,gBACZqN,MAAOmpD,EACPx2C,MAAOs5C,IACP/rD,SAAW/I,GAAMiyD,EAAYjyD,EAAE+G,cAAc8B,OAC7CosD,WAAYL,IAEd,0BAAKh5D,UAAU,oBAEf,0BAAKA,UAAU,6BAA6B2H,IAAKuuD,GAC/C,yBAAIl2D,UAAU,kBAAkBJ,EAAK,gBAEpCq3D,GAvBP,WACE,MAAMY,EAAiBrtC,EAAQ3M,KAAKi6C,GAAMA,EAAEh+B,SAAQvd,QAAQu7C,GAAMA,EAAEx5D,SAEpE,OAAOq4D,KAAgBI,IAAkBc,EAAezqD,OAAO2pD,MAC7D,wBAAG/2D,UAAU,SAASJ,EAAK,6BAmBX05D,GACb3C,EACC,mBAACpsC,GAAA,EAAD,CACEpO,KAAK,gBACLqO,QA/BD4uC,IACJv7C,KAAI,CAACyM,EAAOtP,KAAR,CAAqB/N,MAAOyV,OAAO1H,GAAQsP,MAAAA,EAAOivC,OAAQv+C,IAAUwP,EAAQlsB,OAAS,MA+BpF6O,SAAUyrD,IAGZQ,KAKJ,0BAAKp5D,UAAU,oBAEf,0BAAKA,UAAU,aACb,mBAAC8iC,GAAA,EAAD,CACExY,MAAO1qB,EAAK,iBACZmjC,QAASwzB,EACTppD,SAAU0rD,IAEZ,mBAAC/1B,GAAA,EAAD,CACExY,MAAO1qB,EAAK,gBACZmjC,QAAS0zB,EACT1pD,SAAU4pD,EACVxpD,SAAU2rD,IAEZ,mBAACh2B,GAAA,EAAD,CACExY,MAAO1qB,EAAK,YACZmjC,QAAS4zB,EACT5pD,SAAU0pD,EACVtpD,SAAU4rD,IAEXpC,GACC,sCACE,yBAAI32D,UAAU,kBAAkBJ,EAAK,6BACrC,0BACE+H,IAAKwuD,EACLn2D,UAAU,eACV0uD,iBAAe,EACfnuD,IAAI,OACJ4M,SAAW/I,GAAM0yD,EAAY1yD,EAAE+G,cAAcksD,aAE/C,0BAAKr3D,UAAU,QAAQJ,EAAK,qC,qCC1UxC,MAmBA,IAAee,EAAAA,EAAAA,KAnBmB,EAAG64D,MAAAA,EAAOp3B,MAAAA,EAAOniC,QAAAA,MACjD,MAAM0tB,GAAchuB,EAAAA,EAAAA,KAAayE,IAE/BA,EAAEqH,iBAEFxL,EAAQu5D,EAAMC,OAAQD,EAAMp8D,MAC3B,CAACo8D,EAAOv5D,IAEX,OACE,0BACED,UAAY,gBAAcoiC,EAAQ,QAAU,IAC5C90B,YAAaqgB,EACbtN,MAAQ,IAAGm5C,EAAME,MAAM,OAEtBC,EAAAA,GAAqBH,EAAMC,OAAS,0BAAKp9D,IAAM,kBAAiBm9D,EAAMnqD,YAAasB,IAAI,GAAGipD,QAAQ,aCuDzG,IAAej5D,EAAAA,EAAAA,KAxDqB,EAClCk5D,SAAAA,EAAU7+C,MAAAA,EAAO8+C,UAAAA,EAAWr1B,oBAAAA,EAAqBp6B,aAAAA,EAAcqrD,cAAAA,MAG/D,MAAM/tD,GAAM3B,EAAAA,EAAAA,IAAuB,OAEnC+zD,EAAAA,GAAAA,IAAepyD,EAAK88B,GAEpB,MAAMl6B,GAAuBu6B,EAAAA,GAAAA,GAAmBz6B,GAE1CzK,GAAOC,EAAAA,EAAAA,KAEPm6D,EAAe33D,EAAAA,GACjBM,KAAKkC,OAAOqS,EAAAA,EAAAA,MAAiBzQ,MAzBF,GAyBhB,IA3BiB,EA6B1B/C,EAAS,GAAAf,KAAKs3D,KAAKJ,EAASpE,OAAOn3D,OAAS07D,GAElD,OACE,0BACEryD,IAAKA,EACLxH,IAAK05D,EAASz8D,GACdA,GAAK,kBAAiB4d,IACtBhb,UAAU,cAEV,wBAAGA,UAAU,kBAAkBO,IAAI,QAChCX,EAAqB,WAAhBi6D,EAASz8D,GAAkB,iBAAoB,QAAO4d,MAE9D,0BACEhb,WAAWmE,EAAAA,EAAAA,GAAe,uBAAwBoG,GAElDzM,MAAQ,WAAU4F,OAClBnD,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAEzBkI,GAAgBwvD,EAASpE,OAAO53C,KAAK1B,IACpC,MAAMq9C,EAAQM,EAAU39C,GAExB,IAAKq9C,EACH,OAIF,MAAMU,EAAiB,OAAQV,EAAQA,EAAQA,EAAM,GAErD,OACE,mBAAC,GAAD,CACEr5D,IAAK+5D,EAAe98D,GACpBo8D,MAAOU,EACPj6D,QAASy1D,YCjCjByE,GAA4C,CAChDC,OAAQ,cACRC,OAAQ,aACRC,OAAQ,eACRC,MAAO,YACPC,SAAU,aACVC,OAAQ,WACRC,QAAS,YACTC,QAAS,gBACTC,MAAO,aAUHC,GAAmC,GAEzC,IAAIC,GACAC,GACAC,GAuKJ,UAAer6D,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IAAuBY,EAAAA,EAAAA,IAAKZ,EAAQ,CAAC,kBADpBD,EArK2B,EAC7CsB,UAAAA,EAAW01D,cAAAA,EAAetD,aAAAA,MAG1B,MAAMp1C,GAAehX,EAAAA,EAAAA,IAAuB,MAEtCi1D,GAAYj1D,EAAAA,EAAAA,IAAuB,OAElCk1D,EAAYC,IAAiB73D,EAAAA,EAAAA,OAC7BmyD,EAAQ2F,IAAa93D,EAAAA,EAAAA,OACrB+3D,EAAqBC,IAA0Bh4D,EAAAA,EAAAA,IAAS,IAEvDwjC,QAASrC,IAAwBuC,EAAAA,GAAAA,IAAwB,CAC/DC,QAASjqB,EACTmuC,WAtB0B,MAuBxBoQ,IACFA,EAAQt3B,SAASu3B,IACf,MAAM,GAAEp+D,GAAOo+D,EAAMnuD,OACrB,IAAKjQ,IAAOA,EAAG40B,WAAW,mBACxB,OAGF,MAAMhX,EAAQ5N,OAAOhQ,EAAGuoB,QAAQ,kBAAmB,KACnDk1C,GAAsB7/C,GAASwgD,EAAM92B,kBAGvC,MAAM+2B,EAA0BZ,GAC7Bh9C,KAAI,CAAC6mB,EAAgB1pB,KAAjB,CAA8BA,MAAAA,EAAO0pB,eAAAA,MACzCnoB,QAAO,EAAGmoB,eAAAA,KAAqBA,IAE7B+2B,EAAwBn9D,QAI7Bg9D,EAAuBG,EAAwB94D,KAAKkC,MAAM42D,EAAwBn9D,OAAS,IAAI0c,WAGjG+T,EAAAA,GAAAA,GAAoBksC,EAAUz0D,SAAUnE,EAAAA,KAGxCkB,EAAAA,EAAAA,KAAU,KACR,IAAK23D,EACH,OAGF,MAAM19C,EAASy9C,EAAUz0D,QACzB,IAAKgX,EACH,OAGF,MAAMk+C,EA3DkB,GA2DRL,EAA4C79C,EAAOmwB,YAAc,EAAIguB,IAErFC,EAAAA,GAAAA,GAA2Bp+C,EAAQk+C,KAClC,CAACR,EAAYG,IAEhB,MAAMz7D,GAAOC,EAAAA,EAAAA,KAEPg8D,GAAgBh6D,EAAAA,EAAAA,KAAQ,KAC5B,IAAKq5D,EACH,OAAOjpC,GAAAA,EAET,MAAM6pC,EAAkB,IAAIZ,GAS5B,OARI9I,MAAAA,GAAAA,EAAc9zD,QAChBw9D,EAAgBC,QAAQ,CACtB3+D,GAAI,SACJ+e,KAAMvc,EAAK,kBACX61D,OAAQrD,IAIL0J,IACN,CAACZ,EAAYt7D,EAAMwyD,KAGtB7uD,EAAAA,EAAAA,KAAU,KACR4C,YAAW,KACT,MAAM61D,EAAO,KACXb,EAAcH,GAAUE,YAExBE,EAAUJ,GAAUvF,SAGlBuF,GACFgB,IAuER9uB,iBAQE,OAPK4tB,KACHA,GAAmB,mCACnBC,UAAsBD,IAAkBmB,QAExCjB,IAAYkB,EAAAA,GAAAA,IAAgBnB,KAGvBD,GA7EDqB,GACGt+B,KAAKm+B,KAnGa,OAsGxB,IAEH,MAAMI,GAAiBz8D,EAAAA,EAAAA,KAAaqb,IAClCsgD,EAAuBtgD,GACvB,MAAMqhD,EAAatgE,SAASod,eAAgB,kBAAiB6B,MAC7Dm1C,EAAAA,GAAAA,GAAiBnzC,EAAaxW,QAAU61D,EAAY,QAxGnC,GADU,OA0G1B,IAEGC,GAAoB38D,EAAAA,EAAAA,KAAY,CAAC65D,EAAer9C,KACpDu5C,EAAc8D,EAAOr9C,KACpB,CAACu5C,IAEE3hC,GAAoBC,EAAAA,GAAAA,GAAkB,GAAIuoC,EAAAA,IAmB1CC,GAAqBr4D,EAAAA,EAAAA,GAAe,cAAenE,GAEzD,OAAKy1D,GAAW1hC,EASd,0BAAK/zB,UAAWw8D,GACd,0BAAK70D,IAAKszD,EAAWj7D,UAAU,qBAAqBO,IAAKX,EAAKoc,MAAQ,MAAQ,IAC3E6/C,EAAch+C,KA9BrB,SAA8Bg8C,EAA6B7+C,GACzD,MAAMtY,EAAOy3D,GAAkBN,EAASz8D,IAExC,OAAOsF,GACL,mBAACV,EAAA,EAAD,CACEhC,UAAY,sBAAoBgb,IAAUqgD,EAAsB,YAAc,IAC9Ep5D,OAAK,EACLw6D,OAAK,EACLv6D,MAAM,cACNjC,QAAS,IAAMm8D,EAAephD,GAC9B5Y,UAAWy3D,EAAS19C,MAEpB,wBAAGnc,UAAW0C,SAoBhB,0BACEiF,IAAKqV,EACLhd,WAAWmE,EAAAA,EAAAA,GAAe,gCAAiCuE,EAAAA,GAAe,eAAiB,kBAE1FmzD,EAAch+C,KAAI,CAACg8C,EAAUx0C,IAC5B,mBAAC,GAAD,CACEw0C,SAAUA,EACV7+C,MAAOqK,EACPy0C,UAAWrE,EACXhxB,oBAAqBA,EACrBp6B,aAAcgxD,GAAuBh2C,EAAI,GAAKg2C,GAAuBh2C,EAAI,EACzEqwC,cAAe4G,QAtBrB,0BAAKt8D,UAAWw8D,GACd,mBAACr+C,GAAA,EAAD,WCrKFu+C,GAAiBr6D,EAAAA,GAA0B,EAAI,GAsDrD,IAAe1B,EAAAA,EAAAA,KAnDkB,EAC/B6jC,WAAAA,EACAm4B,YAAAA,EACA3hD,MAAAA,EACAypB,oBAAAA,EACAp6B,aAAAA,EACAuyD,gBAAAA,EACAC,gBAAAA,MAGA,MAAMl1D,GAAM3B,EAAAA,EAAAA,IAAuB,OAEnC+zD,EAAAA,GAAAA,IAAepyD,EAAK88B,GAEpB,MAAMl6B,GAAuBu6B,EAAAA,GAAAA,GAAmBz6B,GAE1CyyD,EAAiBz6D,EAAAA,GACnBM,KAAKkC,OAAOqS,EAAAA,EAAAA,MAAiBzQ,MAnBF,IAmBuCs2D,EAAAA,EAAsBL,KArB1D,EAuB5Bh5D,EAASf,KAAKs3D,KAAKz1B,EAAW1F,MAAQg+B,IAAmBC,EAAAA,EAAsBL,IAErF,OACE,0BACE/0D,IAAKA,EACLxH,IAAKqkC,EAAWpnC,GAChBA,GAAK,eAAc4d,IACnBhb,UAAU,cAEV,wBAAGA,UAAU,mBAAmBwkC,EAAWnkB,OAC3C,0BACErgB,WAAWmE,EAAAA,EAAAA,GAAe,uBAAwBoG,GAElDzM,MAAQ,WAAU4F,QAEjB2G,GAAgBm6B,EAAWU,UAAYV,EAAWU,SAASrnB,KAAK0nB,GAC/D,mBAACD,GAAA,EAAD,CACEnlC,IAAKolC,EAAQnoC,GACbmoC,QAASA,EACTnlC,KAAM28D,EAAAA,EACNt4B,oBAAqBA,EACrBu4B,WAAYL,EACZ18D,QAAS28D,EACTzpC,SAAUoS,EACV03B,cAAiC,aAAlBz4B,EAAWpnC,GAAoBy/D,OAAkB16D,WChBtE+6D,GAAqC,GAmO3C,IAAev8D,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAM,SACJmnC,EADI,MAEJH,EAFI,OAGJy0B,EAHI,SAIJ+C,GACEx+D,EAAOumC,SAEX,MAAO,CACLk4B,eAAgBhD,EAAOl1B,SACvBm4B,iBAAkBF,EAASj4B,SAC3BW,gBAAiBC,EACjBw3B,YAAa33B,EAAMC,OACnB23B,WAAY5+D,EAAOwS,SAASC,MAAMo1B,uBAGtC,CAACnnC,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,kBACA,qBACA,uBACA,oBACA,mBACA,mBAvBgBZ,EAjO6C,EAC/DsB,UAAAA,EACA28D,YAAAA,EACA/R,gBAAAA,EACAwS,eAAAA,EACAC,iBAAAA,EACAC,YAAAA,EACAz3B,gBAAAA,EACA03B,WAAAA,EACAX,gBAAAA,EACAj2B,gBAAAA,EACA62B,mBAAAA,EACAC,qBAAAA,EACA72B,kBAAAA,EACA82B,iBAAAA,EACAtV,cAAAA,MAGA,MAAMprC,GAAehX,EAAAA,EAAAA,IAAuB,MAEtCi1D,GAAYj1D,EAAAA,EAAAA,IAAuB,OAClC23D,EAAgBC,IAAqBt6D,EAAAA,EAAAA,IAAiB,IAErDwjC,QAASrC,IAAwBuC,EAAAA,GAAAA,IAAwB,CAC/DC,QAASjqB,EACTmuC,WA7BkC,MA8BhCoQ,IACFA,EAAQt3B,SAASu3B,IACf,MAAM,GAAEp+D,GAAOo+D,EAAMnuD,OACrB,IAAKjQ,IAAOA,EAAG40B,WAAW,gBACxB,OAGF,MAAMhX,EAAQ5N,OAAOhQ,EAAGuoB,QAAQ,eAAgB,KAChDu3C,GAAwBliD,GAASwgD,EAAM92B,kBAGzC,MAAM+2B,EAA0ByB,GAC7Br/C,KAAI,CAAC6mB,EAAgB1pB,KAAjB,CAA8BA,MAAAA,EAAO0pB,eAAAA,MACzCnoB,QAAO,EAAGmoB,eAAAA,KAAqBA,IAE7B+2B,EAAwBn9D,QAI7Bs/D,EAAkBnC,EAAwB94D,KAAKkC,MAAM42D,EAAwBn9D,OAAS,IAAI0c,WAEpF8rB,QAASC,IAAiCC,EAAAA,GAAAA,IAAwB,CAAEC,QAASg0B,IAE/Er7D,GAAOC,EAAAA,EAAAA,KAEPg+D,EAAiB10D,QAAQm0D,GAEzBQ,GAAUj8D,EAAAA,EAAAA,KAAQ,IACjBy7D,EAIE,CACL,CACElgE,GAAI,SACJijB,MAAOzgB,EAAK,kBACZslC,SAAUk4B,EACVt+B,MAAOs+B,EAAe9+D,QAExB,CACElB,GAAI,WACJijB,MAAOzgB,EAAK,oBACZslC,SAAUm4B,EACVv+B,MAAOu+B,EAAiB/+D,WAEvBg/D,EAAYz/C,KAAKzgB,GAAOyoC,EAAgBzoC,KAAKmf,OAAOpT,UAhBhD8oB,GAAAA,GAkBR,CAACqrC,EAAa19D,EAAMw9D,EAAgBC,EAAkBx3B,IAEnDk4B,GAAkBl8D,EAAAA,EAAAA,KAAQ,IAC9Bg8D,GAC4D,IAAzDC,EAAQvhD,QAAQyhD,IAAD,uBAASA,EAAI94B,gBAAb,aAAS,EAAc5mC,UAAQA,QAChD,CAACw/D,EAASD,KAEbt6D,EAAAA,EAAAA,KAAU,KACJo5D,IACFh2B,IACA62B,IACAC,OAED,CAACd,EAAac,EAAsBD,EAAoB72B,KAE3DpjC,EAAAA,EAAAA,KAAU,KACJ+5D,MAAAA,GAAAA,EAAah/D,QACfsoC,MAED,CAAC02B,EAAa12B,KAEjB7X,EAAAA,GAAAA,GAAoBksC,EAAUz0D,UAG9BjD,EAAAA,EAAAA,KAAU,KACR,IAAKs6D,EACH,OAGF,MAAMrgD,EAASy9C,EAAUz0D,QACzB,IAAKgX,EACH,OAGF,MAAMk+C,EAhHkB,GAgHRiC,GAAwCngD,EAAOmwB,YAAc,EAAIguB,KAEjFC,EAAAA,GAAAA,GAA2Bp+C,EAAQk+C,KAClC,CAACmC,EAAgBF,IAEpB,MAAM9S,GAAmBlrD,EAAAA,EAAAA,KAAaqb,IACpC4iD,EAAkB5iD,GAClB,MAAMijD,EAAeliE,SAASod,eAAgB,eAAc6B,MAC5Dm1C,EAAAA,GAAAA,GAAiBnzC,EAAaxW,QAAUy3D,EAAc,aAAS97D,EAzHpC,OA0H1B,IAEG+7D,GAAsBv+D,EAAAA,EAAAA,KAAa4lC,IACvCq3B,EAAgBr3B,GAChBm4B,EAAiB,CAAEn4B,QAAAA,MAClB,CAACm4B,EAAkBd,IAEhBuB,GAAsBx+D,EAAAA,EAAAA,KAAa4lC,IACvC6iB,EAAc,CAAE7iB,QAAAA,MACf,CAAC6iB,IAEEr0B,GAAoBC,EAAAA,GAAAA,GAAkB,GAAIC,EAAAA,GAqD1CmqC,GAAgBj6D,EAAAA,EAAAA,GAAe,gBAAiBnE,GAEtD,OAAK69D,GAAmB9pC,IAAqBgqC,GAAoBnT,EAe/D,0BAAK5qD,UAAWo+D,GACd,0BACEz2D,IAAKszD,EACLj7D,UAAU,kDAET89D,EAAQjgD,KAzEf,SAAqB2mB,EAAgCxpB,GAAe,MAClE,MAAMmqB,EAAY,UAAGX,EAAWU,gBAAd,aAAG,EAAsB,GACrCm5B,GAAkBl6D,EAAAA,EAAAA,GACtB,uCACA6W,IAAU2iD,GAAkB,aAG9B,MAAsB,WAAlBn5B,EAAWpnC,IAAqC,aAAlBonC,EAAWpnC,IAAqBonC,EAAWS,eAAiBE,EAE1F,mBAACnjC,EAAA,EAAD,CACE7B,IAAKqkC,EAAWpnC,GAChB4C,UAAWq+D,EACXj8D,UAAWoiC,EAAWnkB,MACtBpe,OAAK,EACLw6D,MAAyB,WAAlBj4B,EAAWpnC,IAAqC,aAAlBonC,EAAWpnC,GAChD8E,MAAM,cACNjC,QAAS,IAAM4qD,EAAiB7vC,IAEb,WAAlBwpB,EAAWpnC,GACV,wBAAG4C,UAAU,gBACO,aAAlBwkC,EAAWpnC,GACb,wBAAG4C,UAAU,kBACXwkC,EAAWY,WACb,mBAAC,GAAD,CACEZ,WAAYA,EACZC,oBAAqBsC,IAGvB,mBAAC,GAAD,CACEvC,WAAYA,EACZC,oBAAqBsC,KAO3B,mBAACzB,GAAA,EAAD,CACEnlC,IAAKqkC,EAAWpnC,GAChBmoC,QAASJ,EACT/kC,KAAMmkC,EAAAA,GACNlkB,MAAOmkB,EAAWnkB,MAClBrgB,UAAWq+D,EACX55B,oBAAqBsC,EACrB9mC,QAAS4qD,EACT13B,SAAUnY,QA8Bd,0BACErT,IAAKqV,EACLhd,WAAWmE,EAAAA,EAAAA,GAAe,kCAAmCuE,EAAAA,GAAe,eAAiB,kBAE5Fo1D,EAAQjgD,KAAI,CAAC2mB,EAAYnf,IACxB,mBAAC,GAAD,CACEllB,IAAKqkC,EAAWpnC,GAChBonC,WAAYA,EACZm4B,YAAaxzD,QAAQo0D,GAAcZ,GACnC3hD,MAAOqK,EACPof,oBAAqBA,EACrBp6B,aAAcszD,GAAkBt4C,EAAI,GAAKs4C,GAAkBt4C,EAAI,EAC/Du3C,gBAAiBsB,EACjBrB,gBAAiBsB,QAjCvB,0BAAKn+D,UAAWo+D,GACZxT,EAEEmT,EACF,0BAAK/9D,UAAU,mBAAmBJ,EAAK,eAEvC,mBAACue,GAAA,EAAD,MAJA,0BAAKne,UAAU,mBAAmBJ,EAAK,wC,+NCxNjD,MAiFA,IAAee,EAAAA,EAAAA,KAjFiB,EAC9B29D,IAAAA,EAAK75B,oBAAAA,EAAqB2mB,WAAAA,EAAYprD,UAAAA,EAAWC,QAAAA,MAC7C,QAEJ,MAAM0H,GAAM3B,EAAAA,EAAAA,IAAuB,MAE7BwC,GAAWxC,EAAAA,EAAAA,IAAyB,MAEpCi/B,EAAe97B,QAAO,UAACm1D,EAAItzB,iBAAL,aAAC,EAAeC,SACtCJ,EAAkB,MAAKyzB,EAAIlhE,KAE3Bu/D,GADiBh4B,EAAAA,GAAAA,IAAkBh9B,EAAK88B,KACP2mB,EACjCt2C,GAAiBH,EAAAA,EAAAA,GAAU,GAAEk2B,YAA0B8xB,EAAa/nD,EAAAA,GAAAA,SACpEk2B,GAAWC,EAAAA,GAAAA,GAAa,UAACuzB,EAAItzB,iBAAL,aAAC,EAAeC,QAAS9hC,QAAQ2L,IACzDypD,GAAY5pD,EAAAA,EAAAA,GAASk2B,GAAiB8xB,EAAa/nD,EAAAA,GAAAA,SACnD4pD,EAAoBr1D,QAAQwzD,GAAe4B,IAC3C,WAAEr0D,EAAF,kBAAcC,IAAsBC,EAAAA,EAAAA,IAAa,GACjDE,EAAsBqyD,IAAgBzyD,EACtCu0D,EAAe9B,GAAezyD,GAEpCa,EAAAA,EAAAA,GAAgBvC,EAAU,CAACg2D,IAE3B,MAAM7wC,GAAchuB,EAAAA,EAAAA,KAClB,IAAMM,EAAQ,IACTq+D,EACH9tD,QAAS+tD,KAEX,CAACt+D,EAASq+D,EAAKC,IAGXH,GAAgBj6D,EAAAA,EAAAA,GACpB,YACAm6D,EAAI73D,OAAS63D,EAAI56D,QAAU46D,EAAI73D,MAAQ63D,EAAI56D,OAAS,WAAa,aACjEmnC,EACA7qC,GAGF,OACE,0BACE2H,IAAKA,EACL3H,UAAWo+D,EACX9wD,YAAaoxD,GAAAA,EACbz+D,QAAS0tB,GAERsX,GACC,6BACEt9B,IAAKmjC,EACL9qC,UAAU,YAGVlC,MAAO2gE,EAAe,sBAAmBt8D,IAG5C2S,IAAmB2pD,GAClB,0BACEpiE,IAAKyY,EACLnE,IAAI,GACJ3Q,UAAU,YAGbw+D,GACC,+BACE72D,IAAKa,EACLsD,UAAQ,EACRE,MAAI,EACJC,OAAK,EACLF,aAAW,EACX4yD,QAAQ,QAEJx0D,GAEJ,6BAAQ9N,IAAKkiE,KAGhBj0D,GACC,mBAACuG,EAAA,EAAD,CAAS3O,MAAO4S,GAAkBmwB,EAAe,QAAU,cCjBnE,IAAetkC,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACQ,CACLigE,UAAWjgE,EAAOkgE,KAAKC,MAAMD,SAGjC,CAACx/D,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,mBANpCZ,EAjDyC,EAC3DsB,UAAAA,EACA28D,YAAAA,EACAoC,YAAAA,EACAH,UAAAA,EACAI,YAAAA,EACAC,cAAAA,MAGA,MAAMjiD,GAAehX,EAAAA,EAAAA,IAAuB,OAG1C8gC,QAASrC,IACPuC,EAAAA,GAAAA,IAAwB,CAAEC,QAASjqB,EAAckiD,WAfzB,OAiB5B37D,EAAAA,EAAAA,KAAU,KACJo5D,GACFsC,MAED,CAACtC,EAAasC,IAEjB,MAAMlrC,GAAoBC,EAAAA,GAAAA,GAAkB,GAAIC,EAAAA,GAEhD,OACE,0BACEtsB,IAAKqV,EACLhd,WAAWmE,EAAAA,EAAAA,GAAe,YAAanE,EAAW0I,EAAAA,GAAe,eAAiB,kBAEhFq2D,EAEEhrC,GAAqB6qC,GAAaA,EAAUtgE,OAC9CsgE,EAAU/gD,KAAKygD,GACb,mBAAC,GAAD,CACEn+D,IAAKm+D,EAAIlhE,GACTkhE,IAAKA,EACL75B,oBAAqBA,EACrB2mB,YAAauR,EACb18D,QAAS++D,MAGXjrC,GAAqB6qC,EACvB,0BAAK5+D,UAAU,mBAAf,kBAEA,mBAACme,GAAA,EAAD,MAdA,0BAAKne,UAAU,mBAAf,kDCnDD,IAAKm/D,I,SAAAA,GAAAA,EAAAA,EAAAA,MAAAA,GAAAA,QAAAA,EAAAA,EAAAA,SAAAA,GAAAA,WAAAA,EAAAA,EAAAA,KAAAA,GAAAA,O,CAAAA,KAAAA,GAAAA,KAQL,MAAMC,GAAyBxhE,OAAO+hD,OAAOwf,IACjD5iD,QAAQtP,GAA4C,iBAAVA,IAEvCoyD,GAAwB,CAC5B,CAACF,GAAeG,OAAQ,aACxB,CAACH,GAAeI,UAAW,gBAC3B,CAACJ,GAAeK,MAAO,aAkEzB,IAAe7+D,EAAAA,EAAAA,KA/DwB,EACrCq1B,UAAAA,EAAWS,YAAAA,EAAagpC,eAAAA,EAAgBC,aAAAA,MAExC,MAAM9/D,GAAOC,EAAAA,EAAAA,KAEb,SAAS8/D,EAAgBvpC,GACvB,OACE,mBAACp0B,EAAA,EAAD,CACEhC,UAAY,sBAAoBg2B,IAAcI,EAAM,YAAc,IAClEn2B,QAAS,IAAMw2B,EAAYL,GAC3Bh0B,UAAWg9D,GAAuBhpC,GAClCn0B,OAAK,EACLw6D,OAAK,EACLv6D,MAAM,eAEN,wBAAGlC,UAAWq/D,GAAsBjpC,MAK1C,MAAMwpC,GAAmBjgE,EAAAA,EAAAA,KAAY,KACnC+/D,EAAa1pC,IAAcmpC,GAAeI,SAAW,WAAa,UACjE,CAACvpC,EAAW0pC,IAMf,OACE,0BAAK1/D,UAAU,oBAAoBC,QALrC,SAAyByhC,GACvBA,EAAMr9B,mBAIuD9D,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GACpF6zB,IAAcmpC,GAAeG,OAC5B,mBAACt9D,EAAA,EAAD,CACEhC,UAAU,uBACVoC,UAAW4zB,IAAcmpC,GAAeI,SAAW,kBAAoB,cACvEt9D,OAAK,EACLw6D,OAAK,EACLv6D,MAAM,cACNjC,QAAS2/D,GAET,wBAAG5/D,UAAU,iBAIhB2/D,EAAgBR,GAAeG,OAC/BK,EAAgBR,GAAeI,UAC/BI,EAAgBR,GAAeK,MAE/BxpC,IAAcmpC,GAAeG,OAC5B,mBAACt9D,EAAA,EAAD,CACEhC,UAAU,uBACVC,QAASw/D,EACTr9D,UAAU,gBACVH,OAAK,EACLw6D,OAAK,EACLv6D,MAAM,eAEN,wBAAGlC,UAAU,0BCzCvB,IAAI6/D,IAAc,EAElB,MAqLA,IAAel/D,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACQ,CACLmhE,kBAAmBnhE,EAAOmhE,qBAHZphE,EArL0B,EAC5CqD,OAAAA,EAAQg+D,yBAAAA,EAA0BD,kBAAAA,EAClCrhC,OAAAA,EAAQl2B,QAAAA,EACRmtD,cAAAA,EAAekH,gBAAAA,EAAiBoC,YAAAA,EAChCS,eAAAA,EAAgBC,aAAAA,EAAcnN,eAAAA,MAE9B,MAAOv8B,EAAWC,IAAgB3yB,EAAAA,EAAAA,IAAiB,IAC5C8uD,EAAc4N,IAAmB18D,EAAAA,EAAAA,IAAmB,KAEpD28D,EAAkBC,IAAoBC,EAAAA,GAAAA,GAAep+D,EAAQwG,OAASpG,EAAWE,EAAAA,KAClF,aAAEgI,EAAF,qBAAgBE,IAAyBE,EAAAA,EAAAA,GAAkB1I,EAAQwG,GAAS,GAAO,IAEpFs3D,IAAe99D,IAClB89D,IAAc,IAGhBt8D,EAAAA,EAAAA,KAAU,KACRk7B,MACC,CAACA,KAEJr1B,EAAAA,EAAAA,KAAgB,KACd,GAAK/G,EAAAA,GASL,OALIN,IACFhG,SAASsK,KAAKpK,UAAUC,IAAI,iCAC5BH,SAASsK,KAAKpK,UAAUC,IAAI,wBAGvB,KACD6F,IACFq+D,EAAAA,EAAAA,KAAQ,KACNrkE,SAASsK,KAAKpK,UAAUqK,OAAO,uBAC/BH,YAAW,KACTpK,SAASsK,KAAKpK,UAAUqK,OAAO,mCAxDhB,WA6DtB,CAACvE,IAEJ,MAAMs+D,GAAkBr6D,EAAAA,EAAAA,IAAOosD,GAC/BiO,EAAgB75D,QAAU4rD,GAC1B7uD,EAAAA,EAAAA,KAAU,KACH88D,EAAgB75D,QAAQlI,SAI7B+hE,EAAgB75D,QAAQy9B,SAAS9nB,IAC/Bo2C,EAAe,CAAEiH,MAAOr9C,OAG1B6jD,EAAgB,OACf,CAACj+D,EAAQi0B,EAAWu8B,IAEvB,MAAM+J,GAAoB38D,EAAAA,EAAAA,KAAY,CAAC65D,EAAer9C,KACpD6jD,GAAiBvK,GACR,IAAIA,EAAQt5C,KAGrBu5C,EAAc8D,KACb,CAAC9D,IAEEpI,GAAe3tD,EAAAA,EAAAA,KAAauN,IAChC3E,IACAm3D,EAAaxyD,KACZ,CAAC3E,EAASm3D,IAEPxB,GAAsBv+D,EAAAA,EAAAA,KAAa4lC,IACvCq3B,EAAgBr3B,GAAS,KACxB,CAACq3B,IAEEh9D,GAAOC,EAAAA,EAAAA,MAEP,gBAAE+qD,EAAF,YAAmBmU,GAAgBgB,EAEzC,SAASO,EAAc3kD,EAAmB0jC,GACxC,OAAQrpB,GACN,KAAKmpC,GAAeG,MAClB,OACE,mBAAC,GAAD,CACEt/D,UAAU,aACV01D,cAAe4G,IAGrB,KAAK6C,GAAeI,SAClB,OACE,mBAAC,GAAD,CACEv/D,UAAU,aACV28D,cAAa/R,GAAkB7oD,IAAW4Z,GAAY0jC,GACtDuL,gBAAiBA,EACjBgS,gBAAiBsB,IAGvB,KAAKiB,GAAeK,KAClB,OACE,mBAAC,GAAD,CACEx/D,UAAU,aACV28D,cAAaoC,GAAch9D,IAAW4Z,GAAY0jC,GAClD0f,YAAaA,EACbC,YAAaA,KAYvB,MAAM3oC,EACJ,sCACE,0BAAKr2B,UAAU,kBAAkBC,QANrC,SAAyByhC,GACvBA,EAAMr9B,oBAMDw7D,IACC,mBAAC5jD,EAAA,EAAD,CAAYE,KAAK,QAAQD,UAAW8Z,EAAWU,YAAa0oC,GAAuB9gE,QAChFgiE,IAINj+D,EAAAA,IACC,mBAACL,EAAA,EAAD,CACEC,OAAK,EACLw6D,OAAK,EACLv6D,MAAM,cACNE,UAAWxC,EAAK,SAChBI,UAAU,sBACVI,KAAK,OACLH,QAASsI,GAET,wBAAGvI,UAAU,gBAGjB,mBAAC,GAAD,CACEg2B,UAAWA,EACXS,YAAaR,EACbwpC,eAAgBA,EAChBC,aAAcpS,KAKpB,GAAIjrD,EAAAA,GAAyB,CAC3B,IAAKgI,EACH,OAGF,MAAMrK,GAAYmE,EAAAA,EAAAA,GAChB,yBACAoG,GACCu1D,GAAqB,sBAGxB,OACE,mBAACtS,GAAA,EAAD,KACE,0BAAKxtD,UAAWA,GACbq2B,IAMT,OACE,mBAACuxB,GAAA,EAAD,CACE7lD,OAAQA,EACRS,UAAU,OACVglD,UAAU,SACVj/C,QAASA,EACTvI,UAAU,aACVoiD,oBAAqB75C,EACrBg4D,aAAe73D,EAAAA,QAAkCvG,EAAnB89D,EAC9BO,aAAe93D,EAAAA,QAAkCvG,EAAnB+9D,EAC9BO,mBAAoB/3D,EAAAA,IAEnB2tB,OC1IP,IAAe11B,EAAAA,EAAAA,KA/DkB,EAC/BoB,OAAAA,EAAQg+D,yBAAAA,EAA0BW,aAAAA,EAAcC,aAAAA,EAAcp4D,QAAAA,MAE9D,MAAO03D,EAAkBC,IAAoBC,EAAAA,GAAAA,GAAep+D,EAAQwG,GAE9DgkC,GAAmB5sC,EAAAA,EAAAA,KAAY,CAACyE,EAAU6uD,KAC9C,MAAM,MAAEzmB,GAAUpoC,EAAEiJ,OAEhBm/B,GAASA,EAAMluC,OAAS,GAC1BoiE,EAAapS,MAAMC,KAAK/hB,GAAQymB,KAEjC,CAACyN,IAEEE,GAAoBjhE,EAAAA,EAAAA,KAAY,KACpCkpC,GACEylB,MAAMC,KAAK6F,EAAAA,IAA4B9nD,KAAK,MAC3ClI,GAAMmoC,EAAiBnoC,GAAG,OAE5B,CAACmoC,IAEEs0B,GAAuBlhE,EAAAA,EAAAA,KAAY,KACvCkpC,GAAsB,KAAMzkC,GAAMmoC,EAAiBnoC,GAAG,OACrD,CAACmoC,IAEE3sC,GAAOC,EAAAA,EAAAA,MAEP,eAAEihE,EAAF,eAAkBC,GAAmBhB,EAE3C,OACE,mBAACnY,GAAA,EAAD,CACE7lD,OAAQA,EACRi/D,WAAS,EACTx+D,UAAU,QACVglD,UAAU,SACVj/C,QAASA,EACTvI,UAAU,mBACVoiD,oBAAqB75C,EACrBg4D,aAAe73D,EAAAA,QAAkCvG,EAAnB89D,EAC9BO,aAAe93D,EAAAA,QAAkCvG,EAAnB+9D,EAC9BO,mBAAoB/3D,EAAAA,KAMlBo4D,GACA,mBAACr+D,EAAA,EAAD,CAAUzC,UAAU,iBAAiB+M,UAAQ,GAA7C,uDAED+zD,GACC,sCACE,mBAACr+D,EAAA,EAAD,CAAUC,KAAK,QAAQzC,QAAS2gE,GAC7BhhE,EAAK,gCAER,mBAAC6C,EAAA,EAAD,CAAUC,KAAK,WAAWzC,QAAS4gE,GAAuBjhE,EAAK,oBAGlEmhE,GACC,mBAACt+D,EAAA,EAAD,CAAUC,KAAK,OAAOzC,QAAS0gE,GAAe/gE,EAAK,aCjC3D,IAAee,EAAAA,EAAAA,KA1BkB,EAC/BsgE,WAAAA,EACA7+B,MAAAA,EACA8+B,WAAAA,EACAC,IAAAA,EACAlhE,QAAAA,KAGE,mBAAC6d,GAAA,EAAD,CACE3d,IAAK+gE,EAAWlU,QAChBhtD,WAAWmE,EAAAA,EAAAA,GAAe,6CAA8C88D,GAAc,eACtFpiC,WAAS,EACT5+B,QAAS,IAAMA,EAAQihE,GACvB9+B,MAAOA,GAEN6+B,GACC,mBAAC/gE,EAAA,EAAD,CAAQE,KAAK,QAAQC,KAAM8gE,IAE7B,0BAAKnhE,UAAU,iBACb,2BAAMA,UAAU,SAAhB,IAA0BkhE,EAAWlU,SACrC,2BAAMhtD,UAAU,aAAYQ,EAAAA,EAAAA,GAAW0gE,EAAWn3C,kBC4D1D,IAAeppB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IAAD,CACEyvB,UAAWzvB,EAAO0vB,MAAMhQ,SAE1B,CAAChf,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,oBAJpCZ,EAnEiD,EACnE0vB,UAAAA,EACArsB,OAAAA,EACAorB,aAAAA,EACAi0C,YAAAA,EACAnhE,QAAAA,EACAsI,QAAAA,EACAokD,eAAAA,MAGA,MAAM3vC,GAAehX,EAAAA,EAAAA,IAAuB,OACtC,aAAEqE,EAAF,qBAAgBE,IAAyBE,EAAAA,EAAAA,GAAkB1I,OAAQI,OAAWA,GAAW,GAEzFk/D,GAAoB1hE,EAAAA,EAAAA,KAAY,EAAG2hE,MAAAA,EAAOtU,QAAAA,MAC9C,MAAMmU,EAAM/yC,EAAUkzC,GACtB3U,EAAe,CACbK,QAAU,IAAGA,IAAU7/B,GAAgBg0C,EAAO,IAAGA,EAAI9uC,WAAa,KAClEivC,MAAAA,IAEFrhE,MACC,CAACA,EAAS0sD,EAAgBv+B,EAAWjB,IAElCo0C,EAAuBnR,GAAsB,CACjDz0C,SAAU5Z,EACV2b,MAAO0jD,EACP50C,SAAU60C,EACV94D,QAAAA,KAGFhF,EAAAA,EAAAA,KAAU,KACJ69D,IAAgBA,EAAY9iE,QAC9BiK,MAED,CAAC64D,EAAa74D,KAEjBhF,EAAAA,EAAAA,KAAU,KACRwsD,GAAsB,uBAAwBwR,EAAsBvkD,KACnE,CAACukD,IAEJ,MAAMC,GAAe70D,EAAAA,EAAAA,GAAYy0D,GAAeA,EAAY9iE,OAAS8iE,OAAcj/D,EAAWkI,GACxFo3D,EAAmBL,IAAgBA,EAAY9iE,OAASkjE,EAAeJ,EAE7E,IAAK/2D,GAAiBo3D,IAAqBA,EAAiBnjE,OAC1D,OAGF,MAAM0B,GAAYmE,EAAAA,EAAAA,GAChB,mDACAoG,GAGF,OACE,0BAAKvK,UAAWA,EAAW2H,IAAKqV,GAC7BykD,GAAoBA,EAAiB5jD,KAAI,CAAC6jD,EAAgB1mD,IACzD,mBAAC,GAAD,CACE7a,IAAM,GAAEuhE,EAAeJ,SAASI,EAAe1U,UAC/CkU,WAAYQ,EACZP,IAAK/yC,EAAUszC,EAAeJ,OAC9BL,YAAU,EACVhhE,QAASohE,EACTj/B,MAAOm/B,IAAyBvmD,WClC1C,IAAera,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,SAClByD,GACA,CAAC9C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,oBAFpCZ,EApCiC,EACnDqD,OAAAA,EAAQq/D,YAAAA,EAAa74D,QAAAA,EAASokD,eAAAA,MAE9B,MAAOsT,EAAkBC,IAAoBC,EAAAA,GAAAA,GAAep+D,EAAQwG,OAASpG,EAAWE,EAAAA,IAElFsrB,GAAchuB,EAAAA,EAAAA,KAAauhE,IAC/BvU,EAAe,CACbK,QAAU,IAAGkU,EAAWlU,UACxBsU,MAAOJ,EAAWI,QAEpB/4D,MACC,CAACA,EAASokD,IAEb,OACE,mBAAC/E,GAAA,EAAD,CACE7lD,OAAQA,EACRS,UAAU,OACVglD,UAAU,SACVj/C,QAASA,EACTvI,UAAU,iBACVoiD,oBAAqB75C,EACrBg4D,aAAe73D,EAAAA,QAAkCvG,EAAnB89D,EAC9BO,aAAe93D,EAAAA,QAAkCvG,EAAnB+9D,EAC9BO,mBAAoB/3D,EAAAA,IAEnB04D,EAAYvjD,KAAKqjD,GAChB,mBAAC,GAAD,CACE/gE,IAAK+gE,EAAWlU,QAChBkU,WAAYA,EACZjhE,QAAS0tB,WCwCnB,IAAehtB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAM,SAAEumC,GAAavmC,EAAOumC,SAASy8B,SAErC,MAAO,CAAEz8B,SAAAA,MAEX,CAAC7lC,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,2BANpCZ,EAzD8C,EAChEqD,OAAAA,EACA66D,gBAAAA,EACA13B,SAAAA,EACA08B,sBAAAA,MAGA,MAAM5kD,GAAehX,EAAAA,EAAAA,IAAuB,OACtC,aAAEqE,EAAF,qBAAgBE,IAAyBE,EAAAA,EAAAA,GAAkB1I,OAAQI,OAAWA,GAAW,GACzF0/D,GAAel1D,EAAAA,EAAAA,GAAYu4B,GAAU,GACrC48B,EAAoB58B,GAAY28B,GAGpC/6B,QAASrC,IACPuC,EAAAA,GAAAA,IAAwB,CAAEC,QAASjqB,EAAcmuC,WAhBzB,OAkB5B5nD,EAAAA,EAAAA,KAAU,IAAOxB,GAAS4Y,EAAAA,EAAAA,GAAsBinD,QAAyBz/D,GAAY,CAACJ,EAAQ6/D,IAE9F,MAQM5hE,GAAYmE,EAAAA,EAAAA,GAChB,gDACAoG,IACEu3D,MAAAA,GAAAA,EAAmBxjE,SAAW,UAGlC,OACE,0BACEqJ,IAAKqV,EACLhd,UAAWA,EACXugE,aAAe73D,EAAAA,QAAkCvG,EAlB5B,KACvBpG,SAASsK,KAAKpK,UAAUC,IAAI,cAkB1BskE,aAAe93D,EAAAA,QAAkCvG,EAf5B,KACvBpG,SAASsK,KAAKpK,UAAUqK,OAAO,eAgB5B+D,GAAgBy3D,EACfA,EAAkBjkD,KAAK0nB,GACrB,mBAACD,GAAA,EAAD,CACEnlC,IAAKolC,EAAQnoC,GACbmoC,QAASA,EACTnlC,KAAM28D,EAAAA,EACNt4B,oBAAqBA,EACrBxkC,QAAS28D,EACTzpC,SAAUoS,MAGZl7B,EACF,mBAAC8T,GAAA,EAAD,WACEhc,OC1CV,IAAexB,EAAAA,EAAAA,KA1BsB,EACnCoB,OAAAA,EAAQggE,aAAAA,EAAcC,eAAAA,EAAgBz5D,QAAAA,EAAS65C,oBAAAA,MAE/C,MAAO6d,EAAkBC,IAAoBC,EAAAA,GAAAA,GAAep+D,EAAQwG,GAE9D3I,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAAC+nD,GAAA,EAAD,CACE7lD,OAAQA,EACRi/D,WAAS,EACTx+D,UAAU,QACVglD,UAAU,SACVxnD,UAAU,iBACVuI,QAASA,EACT65C,oBAAqBA,EACrBme,aAAe73D,EAAAA,QAAkCvG,EAAnB89D,EAC9BO,aAAe93D,EAAAA,QAAkCvG,EAAnB+9D,EAC9BO,mBAAoB/3D,EAAAA,IAEnBq5D,GAAgB,mBAACt/D,EAAA,EAAD,CAAUC,KAAK,OAAOzC,QAAS8hE,GAAeniE,EAAK,qBACnEoiE,GAAkB,mBAACv/D,EAAA,EAAD,CAAUC,KAAK,WAAWzC,QAAS+hE,GAAiBpiE,EAAK,wB,qCCkBlF,MAsEA,IAAee,EAAAA,EAAAA,KAtEoB,EACjCoB,OAAAA,EACA0zD,OAAAA,EACAltD,QAAAA,EACAmtD,cAAAA,EACAnD,eAAAA,MAGA,MAAMv1C,GAAehX,EAAAA,EAAAA,IAAuB,OACtC,aAAEqE,EAAF,qBAAgBE,IAAyBE,EAAAA,EAAAA,GAAkB1I,OAAQI,OAAWA,GAAW,GACzF8/D,GAAsBC,EAAAA,GAAAA,GAAuBzM,EAAOn3D,OAASm3D,OAAStzD,EAhDvD,MAgDqF,GAEpGggE,GAAoBxiE,EAAAA,EAAAA,KAAa65D,IACrC9D,EAAc8D,EAAMC,QACpBlH,EAAe,CAAEiH,MAAOA,EAAMp8D,OAC7B,CAACm1D,EAAgBmD,IAEd/nC,GAAchuB,EAAAA,EAAAA,KAAY,CAAC85D,EAAgBr8D,KAC/Cs4D,EAAc+D,GACdlH,EAAe,CAAEiH,MAAOp8D,MACvB,CAACm1D,EAAgBmD,IAEd0M,EAAgBhS,GAAsB,CAC1Cz0C,SAAU5Z,EACVwtD,cAAc,EACd7xC,MAAO+3C,EACPjpC,SAAU21C,EACV55D,QAAAA,KAGFhF,EAAAA,EAAAA,KAAU,MAlEZ,SAAwByX,EAAegC,GACrC,MAAMlgB,EAAYkgB,EAAaxW,QAC/B,IAAK1J,EACH,OAGF,MAAM,eAAE6yD,EAAF,YAAkBD,GAAgBR,GACtCpyD,EACA,eAZoB,GAcpB,GACA,GACA,GAGF,IAAK4yD,EAAYpxD,SAAWoxD,EAAY10C,GACtC,OAEF,MAAMi1C,EAAQN,EAAe,GAC7B,IAAKA,EAAetyD,SAAS2d,IACvBA,IAAUi1C,IAAUC,GAAepzD,EAAW4yD,EAAYO,IAAQ,GAAQ,CAC9E,MACMyL,EAAuB,UADZ1gD,EAAQ20C,EAAeA,EAAerxD,OAAS,GAAK,QAAU,OAxBxD,GAyBgB0c,EAA6B,GAEpE4gD,EAAAA,GAAAA,GAA2B9+D,EAAW4+D,IA2CtC2G,CAAeD,EAAeplD,KAC7B,CAAColD,IAEJ,MAQMpiE,GAAYmE,EAAAA,EAAAA,GAChB,gDACAoG,GAGF,OACE,0BACE5C,IAAKqV,EACLhd,UAAWA,EACXugE,aAAe73D,EAAAA,QAAkCvG,EAjB5B,KACvBpG,SAASsK,KAAKpK,UAAUC,IAAI,cAiB1BskE,aAAe93D,EAAAA,QAAkCvG,EAd5B,KACvBpG,SAASsK,KAAKpK,UAAUqK,OAAO,eAe5B+D,GAAgB43D,EACfA,EAAWpkD,KAAI,CAAC27C,EAAOx+C,IACrB,mBAAC,GAAD,CACE7a,IAAKq5D,EAAMp8D,GACXo8D,MAAOA,EACPp3B,MAAOggC,IAAkBpnD,EACzB/a,QAAS0tB,MAGXtjB,EACF,mBAAC8T,GAAA,EAAD,WACEhc,MC5DV,IAAexB,EAAAA,EAAAA,KAxCkB,EAC/B0f,MAAAA,EACA0J,YAAAA,EACAihB,UAAAA,EACAs3B,SAAAA,EACAlgC,MAAAA,EACA73B,qBAAAA,EAAuB,GACvBtK,QAAAA,MAEA,IAAIo2B,EAA8B,GAElC,MAAMksC,GAAmB5tD,EAAAA,EAAAA,GAASq2B,EAAa,eAAcA,EAAU/iC,WAAQ9F,GAW/E,OAVAmgE,EAAWA,GAAYC,GAGrBlsC,EACE,0BAAKh6B,IAAKimE,EAAUtiE,UAAWuK,EAAsBoG,IAAI,GAAG6xD,SAAS,QAAQ5xD,UAAU,UAEhFyP,IACTgW,GAAU2O,EAAAA,GAAAA,IAAgB3kB,EAAO,IAIjC,mBAACvC,GAAA,EAAD,CACEskB,MAAOA,EACPpiC,UAAU,iCACVsN,YAAaoxD,GAAAA,EACbz+D,QAASA,GAET,2BAAMD,UAAU,SACM,iBAAZq2B,GAAuB71B,EAAAA,EAAAA,GAAW61B,GAAWA,GAEvD,0BAAKr2B,UAAU,iBACZqgB,GAAU,0BAAKrgB,UAAU,SAASqgB,GAClC0J,GAAgB,0BAAK/pB,UAAU,eAAe+pB,QCavD,IAAeppB,EAAAA,EAAAA,KAjDmB,EAChCyhC,MAAAA,EAAOqgC,aAAAA,EAAcC,aAAAA,EAAcziE,QAAAA,MAC/B,MACJ,IAAIsS,EACAy4B,EACA23B,EAEA,UAAWD,IACbnwD,EAAQmwD,EAAanwD,OAGnB,cAAemwD,IACjB13B,EAAY03B,EAAa13B,WAEvB,iBAAkB03B,GAAgBD,IACpCE,EAAeD,EAAaC,cAG9B,MAAMJ,GAAmB5tD,EAAAA,EAAAA,GAASguD,EAAgB,eAAcA,EAAa16D,WAAQ9F,GAC/EitB,GAAeza,EAAAA,EAAAA,GAASpC,GAAU,QAAOA,EAAMnV,aAC/CmN,GAAuBu6B,EAAAA,GAAAA,GAAmB1V,GAE1CzB,GAAchuB,EAAAA,EAAAA,KAAY,KAC9BM,EAAQyiE,KACP,CAACA,EAAcziE,IAEA,QAAlB,GAAIwiE,EACF,OACE,0BAAKziE,UAAU,kCAAkCC,QAAS0tB,GACxD,0BAAKtxB,KAAK,UAACkW,SAAD,iBAAC,EAAOy4B,iBAAR,aAAC,EAAkBC,UAAYs3B,EAAkB5xD,IAAI,KAC/D,0BAAKtU,IAAK+yB,EAAcpvB,WAAWmE,EAAAA,EAAAA,GAAe,aAAcoG,GAAuBoG,IAAI,MAKjG,MAAM,MAAE0P,EAAF,YAAS0J,GAAgB24C,EAE/B,OACE,mBAAC,GAAD,CACEtgC,MAAOA,EACPkgC,SAAUlzC,IAA0B,QAAT,EAAA4b,SAAA,eAAWC,UAAWs3B,EACjDh4D,qBAAsBA,EACtB8V,MAAOA,EACP0J,YAAaA,EACb9pB,QAAS0tB,OCjCf,IAAehtB,EAAAA,EAAAA,KApBqB,EAAGyhC,MAAAA,EAAOsgC,aAAAA,EAAcziE,QAAAA,MAC1D,MAAM,MACJogB,EADI,IACGpY,EADH,YACQ8hB,EADR,aACqB44C,GACvBD,EAEE/0C,GAAchuB,EAAAA,EAAAA,KAAY,KAC9BM,EAAQyiE,KACP,CAACA,EAAcziE,IAElB,OACE,mBAAC,GAAD,CACEmiC,MAAOA,EACP4I,UAAW23B,EACXtiD,MAAOA,GAASpY,EAChB8hB,YAAaA,EACb9pB,QAAS0tB,OCYf,IAAehtB,EAAAA,EAAAA,KAvBiB,EAC9B+hE,aAAAA,EAAcj+B,oBAAAA,EAAqBxkC,QAAAA,MAEnC,MAAM,IAAEq+D,GAAQoE,EAEV/0C,GAAchuB,EAAAA,EAAAA,KAAY,KAC9BM,EAAQyiE,KACP,CAACA,EAAcziE,IAElB,GAAKq+D,EAIL,OACE,mBAAC,GAAD,CACEA,IAAKA,EACL75B,oBAAqBA,EACrBzkC,UAAU,sBACVC,QAAS0tB,OCCf,IAAehtB,EAAAA,EAAAA,KApBqB,EAAG+hE,aAAAA,EAAcj+B,oBAAAA,EAAqBxkC,QAAAA,MACxE,MAAM,QAAEslC,GAAYm9B,EAEpB,GAAKn9B,EAIL,OACE,mBAACD,GAAA,EAAD,CACEC,QAASA,EACTnlC,KAAMwiE,EAAAA,GACNn+B,oBAAqBA,EACrBpkB,MAAOklB,EAAQi0B,MACfx5D,UAAU,sBACVC,QAASA,EACTkzB,SAAUuvC,OCAV30C,IAAejqB,EAAAA,EAAAA,KAAUkqB,GAAOA,KAAM,KAAK,GAwKjD,IAAertB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,SAClByD,GACA,CAAC9C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,WAAY,WAAY,yBAHRZ,EAxJmC,EACrDqD,OAAAA,EACAu/D,MAAAA,EACAuB,UAAAA,EACAC,iBAAAA,EACAC,SAAAA,EACArmD,SAAAA,EACAnU,QAAAA,EACAomB,SAAAA,EACAq0C,SAAAA,EACAC,eAAAA,MAGA,MAAMjmD,GAAehX,EAAAA,EAAAA,IAAuB,OACtC,aAAEqE,EAAF,qBAAgBE,IAAyBE,EAAAA,EAAAA,GAAkB1I,OAAQI,OAAWA,GAAW,IAE7F2kC,QAASrC,IACPuC,EAAAA,GAAAA,IAAwB,CAC1BC,QAASjqB,EACTkiD,WApC6B,IAqC7B9T,YAAarpD,IAGT4vB,GAAiBhyB,EAAAA,EAAAA,KAAY,EAAGob,UAAAA,MAChCA,IAAc6W,EAAAA,GAAAA,WAChB7D,GAAarR,KAEd,CAACA,IAEE0lD,EAAgBhS,GAAsB,CAC1Cz0C,SAAU5Z,EACVuuD,6BAA8BuS,EAC9BtS,kBAAmBsS,EACnBnlD,MAAOolD,EACPt2C,SAAUy2C,EACV16D,QAAAA,KAGFhF,EAAAA,EAAAA,KAAU,KACRwsD,GAAsB,uBAAwBqS,EAAeplD,KAC5D,CAAColD,IAEJ,MAAMc,GAAevjE,EAAAA,EAAAA,KAAY,KAC/BgvB,EAAS,CAAEvxB,GAAIkkE,IACf0B,EAAS,CAAE1B,MAAAA,EAAOj4B,MAAO05B,EAAUI,eAClC,CAAC7B,EAAO3yC,EAAUq0C,EAAUD,IAEzBK,GAAuBz2D,EAAAA,EAAAA,GAC3Bm2D,MAAAA,GAAAA,EAAkBxkE,OACdwkE,OACA3gE,EACJkI,GAEIg5D,EAA2BP,IAAqBA,EAAiBxkE,OACnE8kE,EACAN,EAEJ,IAAKz4D,IAAiBg5D,IAA8BA,EAAyB/kE,SAAWykE,EACtF,OAGF,MAAM/iE,GAAYmE,EAAAA,EAAAA,GAChB,oCACAuE,EAAAA,GAAe,eAAiB,gBAChCm6D,GAAa,UACbt4D,GAuEF,OACE,mBAACkT,GAAA,EAAD,CACE9V,IAAKqV,EACLhd,UAAWA,EACX0d,MAAO2lD,EACPjvC,aAAa,uBACbrB,YAAU,EACVpV,WAAYgU,EACZ2xC,cAAe,KAEdP,GA5ED,mBAACjlD,GAAA,EAAD,CAAUjW,QAAM,EAAC7H,UAAU,wBAAwBC,QAASijE,GAC1D,2BAAMljE,UAAU,SAAS+iE,EAAU9/D,OAMhCogE,EAA0BxlD,KAAI,CAAC0lD,EAAiBvoD,KACrD,OAAQuoD,EAAgBr2D,MACtB,IAAK,MACH,OACE,mBAAC,GAAD,CACE/M,IAAKojE,EAAgBnmE,GACrBslE,aAAca,EACd9+B,oBAAqBA,EACrBxkC,QAASgjE,IAIf,IAAK,QACH,OACE,mBAAC,GAAD,CACE9iE,IAAKojE,EAAgBnmE,GACrBqlE,aAAcI,EACdH,aAAca,EACdtjE,QAASgjE,IAIf,IAAK,UACH,OACE,mBAAC,GAAD,CACE9iE,IAAKojE,EAAgBnmE,GACrBslE,aAAca,EACd9+B,oBAAqBA,EACrBxkC,QAASgjE,IAIf,IAAK,QACL,IAAK,OACH,OACE,mBAAC,GAAD,CACE9iE,IAAKojE,EAAgBnmE,GACrBglC,MAAOggC,IAAkBpnD,EACzB0nD,aAAca,EACdtjE,QAASgjE,IAGf,IAAK,UACL,IAAK,QACH,OACE,mBAAC,GAAD,CACE9iE,IAAKojE,EAAgBnmE,GACrBglC,MAAOggC,IAAkBpnD,EACzB0nD,aAAca,EACdtjE,QAASgjE,IAIf,QACE,gB,eCvHV,MA+GA,IAAetiE,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MACT,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,GAC1B4kE,EAAeljE,IAAQqR,EAAAA,EAAAA,IAAmBhT,EAAQ2B,EAAKlD,IAC7D,IAAKkD,IAASkjE,EACZ,MAAO,GAGT,MAAM,MAAE3xC,EAAF,QAAS67B,IAAYC,EAAAA,EAAAA,IAAwBhvD,IAAW,IACxD,WAAEu0C,EAAF,SAAclhC,GAAa07C,GAAW,GAE5C,MAAO,CACLptD,KAAAA,EACAkjE,aAAAA,EACA3xC,MAAAA,EACAqhB,WAAAA,EACAlhC,SAAAA,MAGJ,CAACrT,EAAQW,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,0BAA2B,kBAnB5DZ,EA/G2C,EAC7DE,OAAAA,EACAkS,SAAAA,EACAvI,QAAAA,EACAoT,SAAAA,EACArb,KAAAA,EACAkjE,aAAAA,EACA3xC,MAAAA,EACAqhB,WAAAA,EACAlhC,SAAAA,EACA87C,wBAAAA,EACAruD,aAAAA,MAEA,MAAMG,GAAOC,EAAAA,EAAAA,KAEP4jE,GAAe5hE,EAAAA,EAAAA,KAAQ,KAC3B,KAAKgwB,GAAU7f,GAAaA,EAAS1T,QAAWklE,GAC9C,OAAOvxC,GAAAA,EAGT,MAAMy7B,EAAU17C,EAAS6L,KAAKzgB,IAC5B,MAAMY,EAAUwlE,EAAapmE,GAC7B,IAAKY,EACH,OAGF,MAAM0lE,EAAa1lE,EAAQqT,UAAWpS,EAAAA,EAAAA,KAAW0kE,EAAAA,EAAAA,MAAa3lE,EAAQqT,eAAYlP,EAElF,IAAIyhE,EACJ,GAAItjE,IAAQqoB,EAAAA,EAAAA,IAAcroB,GACxBsjE,EAAatjE,OACR,GAAItC,EAAQ6lE,YAAa,CAC9B,MAAM,cAAEC,EAAF,WAAiBppD,GAAe1c,EAAQ6lE,YAC9CD,EAAaE,GAAiBppD,GAAaxb,EAAAA,EAAAA,KAAWykE,EAAAA,EAAAA,MAAajpD,QAAcvY,OAEjFyhE,EAAa5lE,EAAQqT,UAAWnS,EAAAA,EAAAA,KAAWykE,EAAAA,EAAAA,MAAa3lE,EAAQqT,eAAYlP,EAG9E,MAAO,CACLnE,QAAAA,EACA0lE,WAAAA,EACAE,WAAAA,EACA3jE,QAAS,IAAMR,EAAa,CAAEb,OAAAA,EAAQkS,SAAAA,EAAUjS,UAAWzB,QAE5Dmf,OAAOpT,SAEV,OAAO46D,EAAAA,EAAAA,IAAQrW,GAAS,EAAG1vD,QAAAA,KAAcA,EAAQ0C,MAAM,UACtD,CAAC9B,EAAQkS,EAAUrR,EAAcuS,EAAU1R,EAAMkjE,EAAc3xC,KA2BlE/V,EAAAA,EAAAA,IAAeH,EAAUpT,GAGzB,MAAMyU,GAAehX,EAAAA,EAAAA,IAAuB,MACtCmV,GAAgB+B,EAAAA,GAAAA,GAA0BF,GAAc,GAAOhC,IACnE,MAAMgpD,EAAcP,MAAAA,OAAH,EAAGA,GAA0B,IAAXzoD,EAAe,EAAIA,GAClDgpD,GACFA,EAAY/jE,YAEb,oBAAoB,GAEvB,OACE,mBAACwd,GAAA,EAAD,CACEzd,UAAU,4BACV0d,MAAO+lD,EACPQ,iBAAkB,EAClBtmD,WAAYmwC,EACZ/6B,YAAU,EACV1V,UAAWlC,EACXxT,IAAKqV,GAEL,wBAAGhd,UAAU,cAAcO,IAAI,QAC3BsxB,EAEkB,IAAfqhB,GAAqBuwB,EAAanlE,OAEpB,IAAf40C,EACF,kBAEC,GAAGuwB,EAAanlE,SAAW40C,GAAcuwB,EAAanlE,yBAJvDsB,EAAK,yBAFLA,EAAK,gCASR6jE,EAAa5lD,KAzDS,EACzB7f,QAAAA,EAAS0lE,WAAAA,EAAYE,WAAAA,EAAY3jE,QAAAA,MAEjC,MAAMogB,EAAQujD,GAAankD,EAAAA,EAAAA,GAAa7f,EAAMgkE,IAAcxxC,EAAAA,EAAAA,IAAgBsxC,GACtEzgE,GAAO6sB,EAAAA,EAAAA,IAAsBlwB,EAAM5B,GAEzC,OACE,mBAAC8f,GAAA,EAAD,CACE9d,UAAU,gDACVC,QAASA,GAET,mBAACC,EAAA,EAAD,CAAQI,KAAMsjE,EAAYvjE,KAAMqjE,IAChC,0BAAK1jE,UAAU,QACb,0BAAKA,UAAU,SACb,yBAAIO,IAAI,QAAQ8f,IAAS7f,EAAAA,EAAAA,GAAW6f,IACpC,mBAAC6jD,GAAA,EAAD,CAAiBlmE,QAASA,KAE5B,0BAAKgC,UAAU,WAAWO,IAAI,SAC3BC,EAAAA,EAAAA,GAAWyC,EAAM,CAAC,QAAS,aAAc,CAAE8sB,UAAW8B,e,eC1FnE,MAqFA,IAAelxB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUmsD,aAAAA,MACF,CACLkT,KAAKnT,EAAAA,EAAAA,IAAiBlsD,EAAQmsD,GAC9ByS,YAAY4G,EAAAA,EAAAA,IAAyBxlE,OAGzC,CAACU,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,eAAgB,sBAPpDZ,EAnFgD,EAClEosD,aAAAA,EAAcrmB,oBAAAA,EAAqBu5B,IAAAA,EAAKT,WAAAA,EACxCvS,aAAAA,EAAcC,iBAAAA,EAAkBmZ,gBAAAA,EAAiBC,cAAAA,MAEjD,MAAMzkE,GAAOC,EAAAA,EAAAA,KACPykE,EAAUtG,GAAO70D,QAAQ60D,EAAIz1B,eAC7Bg8B,EAAoBp7D,QAAQ60D,MAAAA,OAAD,EAACA,EAAK94B,WAEhCgC,EAAaC,EAAWC,IAAcxjB,EAAAA,GAAAA,MAE7C4gD,EAAAA,GAAAA,IAAY,KACVH,EAAcn9B,KACb,CAACA,EAAam9B,IAEjB,MAAMvC,GAAoBjgE,EAAAA,EAAAA,KAAQ,KAChC,IAAKm8D,EACH,MAAO,GAGT,MAAMyG,GAAmBzG,EAAI0G,QAAU,IAAI7mD,KAAI,EAAGzgB,GAAAA,KAASA,IACrDunE,EAAgB3G,EAAI94B,SAAW84B,EAAI94B,SAAS3oB,QAAO,EAAGnf,GAAAA,MAAUqnE,EAAgBpnE,SAASD,KAAO,GAEtG,MAAO,IAAK4gE,EAAI0G,QAAU,MAAQC,GAAejvC,MAAM,EAxB/B,KAyBvB,CAACsoC,KAEJz6D,EAAAA,EAAAA,KAAU,MAEHghE,GAAqBzC,EAAkBxjE,OA7BpB,GA8BtB0sD,EAAa,CAAEF,aAAAA,MAEhB,CAACyZ,EAAmBzC,EAAkBxjE,OAAQ0sD,EAAcF,IAE/D,MAAM8Z,GAAiBjlE,EAAAA,EAAAA,KAAY,KACjCsrD,EAAiB,CAAEH,aAAAA,MAClB,CAACG,EAAkBH,IAEtB,IAAKkT,EACH,OAGF,MAAM6G,EAAoB/C,EAAkBxjE,OAAS,EAErD,OACE,0BAAK6B,IAAK69D,EAAI5gE,GAAI4C,UAAU,cAAcO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAClE,0BAAKnC,UAAU,sBACb,0BAAKA,UAAU,iBACb,yBAAIA,UAAU,QAAQO,IAAI,QAAQy9D,EAAI39C,OACtC,wBAAGrgB,UAAU,QAAQO,IAAI,QAAQX,EAAK,WAAYo+D,EAAIl/B,MAAO,OAE/D,mBAAC98B,EAAA,EAAD,CACEhC,UAAWskE,EAAU,gBAAaniE,EAClCD,MAAM,UACN9B,KAAK,OACLs+B,MAAI,EACJC,OAAK,EACL1+B,QAAS2kE,GAERhlE,EAAK0kE,EAAU,qBAAuB,sBAG3C,0BAAKtkE,UAAU,qBACX6kE,GAAqB,mBAACh0D,EAAA,EAAD,MACtBg0D,GAAqB/C,EAAkBjkD,KAAK0nB,GAC3C,mBAACD,GAAA,EAAD,CACEC,QAASA,EACTnlC,KAAM0kE,EAAAA,GACNrgC,oBAAqBA,EACrBu4B,WAAYO,GAAcr2B,GAAek9B,EACzCnkE,QAASknC,OAId09B,GACC,mBAAC,KAAD,CACE9iE,OAAQmlC,EACRyB,YAAam5B,EAAkB,GAC/Bv5D,QAAS6+B,SC/EbrZ,IAAejqB,EAAAA,EAAAA,KAAUkqB,GAAOA,KAAM,KAAO,GA0EnD,IAAertB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAMmT,GAAgBizD,EAAAA,EAAAA,IAA2BpmE,IAC3C,MAAEkzB,EAAF,UAASmuB,GAAcluC,GAAiB,IACxC,SAAEkzD,GAAarmE,EAAOumC,SAE5B,MAAO,CACLrT,MAAAA,EACAozC,YAAaD,EAASp/B,OACtBoa,UAAAA,MAGJ,CAAC3gD,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,0BAZpCZ,EAxE6C,EAC/D6J,QAAAA,EACAoT,SAAAA,EACAkW,MAAAA,EACAozC,YAAAA,EACAjlB,UAAAA,EACAklB,qBAAAA,MAGA,MAAMloD,GAAehX,EAAAA,EAAAA,IAAuB,MAEtCpG,GAAOC,EAAAA,EAAAA,MAENqnC,EAAai+B,IAAkB7hE,EAAAA,EAAAA,KAAS,IAG7CwjC,QAASrC,IACPuC,EAAAA,GAAAA,IAAwB,CAAEC,QAASjqB,EAAcmuC,WArBzB,MAqE5B,OA5CA5nD,EAAAA,EAAAA,KAAU,KACRwqB,IAAa,KACXm3C,WAIJppD,EAAAA,EAAAA,IAAeH,EAAUpT,GAuCvB,0BAAKZ,IAAKqV,EAAchd,UAAU,8BAA8BO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GArC5F,WACE,QAAcA,IAAV0vB,EAIJ,OAAKA,GAASozC,EACLA,EAAYpnD,KAAKzgB,GACtB,mBAAC,GAAD,CACE+C,IAAK/C,EACL0tD,aAAc1tD,EACdqnC,oBAAqBA,EACrB2/B,gBAAiBl9B,EACjBm9B,cAAec,MAKjBnlB,EACGA,EAAU1hD,OAIR0hD,EAAUniC,KAAKzgB,GACpB,mBAAC,GAAD,CACE+C,IAAK/C,EACL0tD,aAAc1tD,EACdqnC,oBAAqBA,EACrB2/B,gBAAiBl9B,EACjBm9B,cAAec,MATV,wBAAGnlE,UAAU,cAAcO,IAAI,QAA/B,kBAcJ,mBAAC4d,GAAA,EAAD,MAKJmiD,QCsBP,IAAe3/D,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAMmT,GAAgBszD,EAAAA,EAAAA,IAAuBzmE,IACvC,MAAEkzB,EAAF,QAAS67B,GAAY57C,GAAiB,IACtC,OAAElT,IAAW0oB,EAAAA,EAAAA,IAAyB3oB,IAAW,GACjD2B,EAAO1B,GAASM,EAAAA,EAAAA,IAAWP,EAAQC,QAAUuD,EAGnD,MAAO,CACL0vB,MAAAA,EACA67B,QAAAA,EACAptD,KAAAA,EACA+kE,cANoB/kE,GAAOglE,EAAAA,EAAAA,IAAoB3mE,EAAQ2B,QAAQ6B,MASnE,CAAC9C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,iBAAkB,cAAe,uBAfrEZ,EAhFyC,EAC3D6J,QAAAA,EACAoT,SAAAA,EACAkW,MAAAA,EACA67B,QAAAA,EACAptD,KAAAA,EACA+kE,cAAAA,EACAE,eAAAA,EACAra,YAAAA,EACAsa,kBAAAA,MAGA,MAAMxoD,GAAehX,EAAAA,EAAAA,IAAuB,OAG1C8gC,QAASrC,IACPuC,EAAAA,GAAAA,IAAwB,CAAEC,QAASjqB,EAAckiD,WAlBzB,OAoBtB,YAAEH,IAAgBpU,EAAAA,EAAAA,IAA4BrqD,EAAM+kE,GAEpDI,GAAiB9lE,EAAAA,EAAAA,KAAa2+D,IAC9BS,GACF7T,EAAY,CAAEoT,IAAAA,IAGZ51D,EAAAA,IACF88D,EAAkB,CAAE3zC,WAAO1vB,MAE5B,CAAC48D,EAAa7T,EAAasa,IAExB5lE,GAAOC,EAAAA,EAAAA,MAEbic,EAAAA,EAAAA,IAAeH,EAAUpT,GA6BzB,MAAMm9D,EAAav8D,aAAkBhH,IAAV0vB,GAAuB67B,GAAWA,EAAQpvD,QAErE,OACE,0BAAK0B,UAAU,YAAYO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GACnD,mBAACsb,GAAA,EAAD,CACE9V,IAAKqV,EACLhd,WAAWmE,EAAAA,EAAAA,GAAe,8BAA+BuhE,GAAc,QACvEhoD,MAAOgwC,EACPt5B,aAAa,aACb6vC,iBAzEkB,GA0ElBlxC,YAAU,EACVpV,WAAY4nD,GAtClB,WACE,QAAcpjE,IAAV0vB,EAIJ,OAAK67B,EAMAA,EAAQpvD,OAMNovD,EAAQ7vC,KAAKygD,GAClB,mBAAC,GAAD,CACEn+D,IAAKm+D,EAAIlhE,GACTkhE,IAAKA,EACL75B,oBAAqBA,EACrBxkC,QAASwlE,MATT,wBAAGzlE,UAAU,cAAcO,IAAI,QAAQX,EAAK,gBAN5C,mBAACue,GAAA,EAAD,MAiCCmiD,SCcT,IAAe3/D,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUgnE,OAAAA,MACT,MAAM,OAAEC,EAAF,QAAUC,GAAYlnE,EAAOmnE,YAEnC,MAAO,CACLF,OAAQA,MAAAA,OAAF,EAAEA,EAASD,EAAO1N,QACxB8N,QAASF,MAAAA,OAAD,EAACA,EAAUF,EAAO1N,UAAY,OAG1C,CAACt5D,EAAQW,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,wBAAyB,WAAY,sBATtEZ,EA5FiD,EACnE4B,KAAAA,EACAtC,QAAAA,EACA2nE,OAAAA,EACAK,WAAAA,EACAC,YAAAA,EACAL,OAAAA,EACAG,OAAAA,EACAG,sBAAAA,EACAv3C,SAAAA,EACAw3C,iBAAAA,MAEA,MAAMC,GAAkBz5D,EAAAA,EAAAA,GAAoBq5D,EAAWK,cAChD1yC,EAAW2yC,IAAgBhjE,EAAAA,EAAAA,KAAkB,GAC9CijE,EAAkBp9D,QAAQy8D,IAC1B,OAAE3N,EAAF,KAAUh1D,GAAS0iE,EACnB/lE,GAAOC,EAAAA,EAAAA,MAEb0D,EAAAA,EAAAA,KAAU,KAEHgjE,GAAmBH,IAAoBJ,EAAWK,aACrDH,EAAsB,CACpB5lE,KAAAA,EAAMzB,UAAWb,EAAQZ,GAAI66D,OAAAA,EAAQ8N,OAAAA,EAAQS,MAzB/B,EAyBqDC,mBAAmB,MAIzF,CAACT,EAAWK,YAAaE,IAE5B,MAAMG,GAAsB/mE,EAAAA,EAAAA,KAAY,KACtC2mE,GAAa,GACbJ,EAAsB,CACpB5lE,KAAAA,EAAMzB,UAAWb,EAAQZ,GAAI66D,OAAAA,EAAQ8N,OAAAA,EAAQS,MAjC3B,OAmCnB,CAAClmE,EAAM4lE,EAAuBloE,EAAQZ,GAAI2oE,EAAQ9N,KAErD10D,EAAAA,EAAAA,KAAU,KACR+iE,GAAa,KACZ,CAACV,IAEJ,MAAMe,GAAoBhnE,EAAAA,EAAAA,KAAavC,IACrCuxB,EAAS,CAAEvxB,GAAAA,IACX+oE,MACC,CAACA,EAAkBx3C,IAetB,OACE,0BAAK3uB,UAAU,qBACb,0BAAKA,UAAU,eACZ4lE,EACGA,EAAO/nD,KAAKzgB,GACZ,mBAAC0gB,GAAA,EAAD,CACE3d,IAAK/C,EACL4C,UAAU,sBACVC,QAAS,IAAM0mE,EAAkBvpE,IAEjC,mBAAC2gB,GAAA,EAAD,CACE8P,WAAW,OACX5P,OAAQ7gB,EACRw7B,eAAa,EACbguC,kBAAgB,OAIpB,mBAACzoD,GAAA,EAAD,MACHynD,GAhCP,WACE,MAAMiB,EAAkBb,EAAWK,YAAcT,EAAQtnE,OAEzD,OAAO0nE,EAAWK,YAlDA,GAkD+BQ,EAAkB,GACjE,mBAAC,GAAD,CACE/nC,MAAO+nC,EACP9nC,SAAS,QACTpL,UAAWA,EACX1zB,QAASymE,IAwBEI,IAEb,0BAAK9mE,UAAU,cAAcO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GACrD,2BAAMnC,UAAU,eAAeO,IAAI,QAAQ0C,GAC3C,2BAAMjD,UAAU,iBAAiBO,IAAKX,EAAKoc,MAAQ,YAAS7Z,IAQ7C8K,EAPE+4D,EAAWK,aAOEU,EAPWd,GAQhC,GAAMh5D,EAAQ85D,EAAS,KAAKhiE,UAAY,GATjD,OAQR,IAAuBkI,EAAe85D,MC7DtC,IAAepmE,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MACEmnE,aAAa,OAAElnE,EAAF,UAAUC,GADnB,aAEJowB,GACEtwB,EAEJ,OAAKC,GAAWC,EAOT,CACLyB,MAJWpB,EAAAA,EAAAA,IAAWP,EAAQC,GAK9BZ,SAJcmB,EAAAA,EAAAA,IAAkBR,EAAQC,EAAQC,GAKhDowB,aAAAA,GATO,KAROvwB,EAzC2B,EAC7C6J,QAAAA,EACAoT,SAAAA,EACArb,KAAAA,EACAtC,QAAAA,EACAixB,aAAAA,MAEA,MAAMrvB,GAAOC,EAAAA,EAAAA,KAGb,IAFAic,EAAAA,EAAAA,IAAeH,EAAUpT,IAEpBvK,IAAYsC,EACf,OAAO,mBAAC6d,GAAA,EAAD,MAGT,MAAM,QAAE45C,EAAF,QAAWrK,IAAYsZ,EAAAA,EAAAA,IAAehpE,GAC5C,IAAK0vD,EAAQA,QACX,OAGF,MAAMuZ,GAAkBC,EAAAA,EAAAA,IAAqBxZ,EAAQA,QAAS,UAE9D,OACE,0BAAK1tD,UAAU,cAAcO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GACrD,yBAAInC,UAAU,gBAAgBO,IAAI,SAAQC,EAAAA,EAAAA,GAAWu3D,EAAQ3B,SAAU,CAAC,QAAS,QACjF,0BAAKp2D,UAAU,mCACZivB,GAAgB8oC,EAAQC,QAAQn6C,KAAK8nD,GACpC,mBAAC,GAAD,CACExlE,IAAM,GAAEnC,EAAQZ,MAAMuoE,EAAO1N,SAC7B33D,KAAMA,EACNtC,QAASA,EACT2nE,OAAQA,EACRK,WAAYiB,EAAgBtB,EAAO1N,QACnCgO,YAAavY,EAAQuY,iBAGvBh3C,GAAgB,mBAAC9Q,GAAA,EAAD,YChBpBgc,GAA2B,4BAoKjC,IAAex5B,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUsf,OAAAA,MACT,MAAM5d,GAAOpB,EAAAA,EAAAA,IAAWN,EAAQsf,GAC1B3d,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQsf,IAC1B,SAAElb,GAAapE,EAAOwoE,WAG5B,MAAO,CACL9mE,KAAAA,EAAMC,KAAAA,EAAMyC,SAAAA,EAAUgqB,SAHRC,EAAAA,EAAAA,IAAkB1sB,GAAM2sB,EAAAA,EAAAA,IAAqBtuB,IAASuuB,EAAAA,EAAAA,IAAuBvuB,QAM/F,CAACA,EAAQW,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAChD,gBAAiB,aAAc,kBAAmB,WAAY,mBAZ9CZ,EAlK0C,EAC5Duf,OAAAA,EACA5d,KAAAA,EACAC,KAAAA,EACAyC,SAAAA,EACAgqB,QAAAA,EACAq6C,cAAAA,EACAC,WAAAA,EACAC,cAAAA,EACAC,gBAAAA,EACA54C,SAAAA,EACApmB,QAAAA,EACAoT,SAAAA,MAEA,MAAO6rD,EAAoBC,EAAkBC,IAAqB9jD,EAAAA,GAAAA,MAC3DsX,EAAwBC,IAA6B73B,EAAAA,EAAAA,KAAS,IAC9Dsc,EAAOwb,IAAY93B,EAAAA,EAAAA,MACpB1D,GAAOC,EAAAA,EAAAA,MAEbic,EAAAA,EAAAA,IAAeH,EAAUpT,GAEzB,MAAMgyB,EAAmBl6B,GAAQA,EAAKi6B,WAAmB,GACnDG,EAAkBp6B,GAAQA,EAAKm6B,UAAkB,IAEhDF,EAAWgB,IAAgBh4B,EAAAA,EAAAA,IAASi3B,IACpCC,EAAUe,IAAej4B,EAAAA,EAAAA,IAASm3B,IAClCktC,EAAwBC,IAA6BtkE,EAAAA,EAAAA,KAAUypB,IAEtExpB,EAAAA,EAAAA,KAAU,KACRqkE,GAA2B76C,KAC1B,CAACA,KAEJxpB,EAAAA,EAAAA,KAAU,KACR43B,GAA0B,GAC1BusC,MACC,CAACA,EAAmBzpD,KAEvB1a,EAAAA,EAAAA,KAAU,KACR+3B,EAAaf,GACbgB,EAAYd,KACX,CAACF,EAAkBE,EAAiBp6B,KAEvCkD,EAAAA,EAAAA,KAAU,KACJR,IAAa8kE,EAAAA,GAAAA,WACf1sC,GAA0B,GAC1BC,OAASj5B,GACTulE,OAED,CAACA,EAAmB3kE,IAEvB,MAAMg5B,GAAwBp8B,EAAAA,EAAAA,KAAayE,IACzCk3B,EAAal3B,EAAEiJ,OAAOJ,OACtBkuB,GAA0B,KACzB,IAEGa,GAAuBr8B,EAAAA,EAAAA,KAAayE,IACxCm3B,EAAYn3B,EAAEiJ,OAAOJ,OACrBkuB,GAA0B,KACzB,IAEG2sC,GAA2BnoE,EAAAA,EAAAA,KAAayE,IAC5CwjE,EAA0BxjE,EAAEiJ,OAAO01B,SACnC5H,GAA0B,KACzB,IAEGe,GAAoBv8B,EAAAA,EAAAA,KAAY,KACpC,MAAMw8B,EAAmB7B,EAAUR,OAC7BsC,EAAkB5B,EAASV,OAE5BqC,EAAiB79B,QACpB88B,EAASjB,IAGXitC,EAAc,CACZnpD,OAAAA,EACA8O,SAAU46C,EACVrtC,UAAW6B,EACX3B,SAAU4B,MAEX,CAAC9B,EAAWE,EAAU4sC,EAAenpD,EAAQ0pD,IAE1CI,GAAsBpoE,EAAAA,EAAAA,KAAY,KACtC2nE,EAAc,CACZ1oE,OAAQ0B,EAAKlD,GACbirB,oBAAoB,IAEtBg/C,EAAW,CAAEppD,OAAAA,IACbypD,IACAH,IACA54C,EAAS,CAAEvxB,QAAI+E,MACd,CAAC7B,EAAKlD,GAAIsqE,EAAmBH,EAAiBD,EAAeD,EAAY14C,EAAU1Q,IAEtF,IAAK5d,EACH,OAGF,MAAMszB,EAAY5wB,IAAa8kE,EAAAA,GAAAA,WAE/B,OACE,0BAAK7nE,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAAC+d,GAAA,EAAD,CACEE,OAAQ5d,EAAKjD,GACbywB,WAAW,QACX7P,OAAO,gBACPgqD,cAAY,IAEd,mBAAC5qD,GAAA,EAAD,CACEhgB,GAAG,kBACHktB,MAAO1qB,EAAK,iCACZuN,SAAU4uB,EACV9uB,MAAOqtB,EACP1a,MAAOA,IAAUua,GAA2Bva,OAAQzd,IAEtD,mBAACib,GAAA,EAAD,CACEhgB,GAAG,iBACHktB,MAAO1qB,EAAK,gCACZuN,SAAU6uB,EACV/uB,MAAOutB,IAET,0BAAKx6B,UAAU,gCACb,mBAAC8iC,GAAA,EAAD,CACEC,QAAS4kC,EACTr9C,MAAO1qB,EAAK,iBACZ2nC,SAAU3nC,EAAK+nE,EACX,gCACA,kCACJx6D,SAAU26D,MAIhB,0BAAK9nE,UAAU,WACb,mBAAC8d,GAAA,EAAD,CAAUpb,KAAK,SAASmF,QAAM,EAAC0kB,aAAW,EAACtsB,QAASwnE,GACjD7nE,EAAK,oBAIZ,mBAAC48B,GAAA,EAAD,CACEhwB,QAAS0uB,EACTj7B,QAASi8B,EACTnvB,SAAU4mB,EACVvxB,UAAWxC,EAAK,SAEf+zB,EACC,mBAAC9iB,EAAA,EAAD,CAAS3O,MAAM,UAEf,wBAAGlC,UAAU,gBAGjB,mBAACwhB,GAAA,EAAD,CACEzf,OAAQylE,EACRj/D,QAASm/D,EACTzkE,KAAMrD,EAAK,2BACX6hB,aAAc7hB,EAAK,iBACnB8hB,eAAgBqmD,EAChBxvC,sBAAoB,SCzJtB0vC,GAAoB,6BAiR1B,IAAetnE,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MAAyB,MAClC,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,IAC1B,SAAEmE,GAAapE,EAAOwoE,WACtBe,EAAmB/+D,QAAO,UAAC7I,EAAKo6B,gBAAN,aAAC,EAAesxB,cAC1Cmc,GAAetgD,EAAAA,EAAAA,IAAiBvnB,GAEtC,MAAO,CACLA,KAAAA,EACAyC,SAAAA,EACAolE,aAAAA,EACAD,iBAAAA,EACAE,cAAeD,EAAe7nE,EAAK+nE,WAAYC,EAAAA,EAAAA,IAAiBhoE,EAAM,cACtEioE,YAAaJ,EAAe7nE,EAAK+nE,WAAYC,EAAAA,EAAAA,IAAiBhoE,EAAM,gBAGxE,CAACjB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,yBAA0B,aAAc,kBACxC,eAAgB,gBAAiB,aAAc,cAlB/BZ,EA3Q2C,EAC7DE,OAAAA,EACA0B,KAAAA,EACAyC,SAAAA,EACAolE,aAAAA,EACAD,iBAAAA,EACAE,cAAAA,EACAG,YAAAA,EACA9wC,eAAAA,EACA+wC,uBAAAA,EACAC,WAAAA,EACAC,WAAAA,EACAC,aAAAA,EACAC,cAAAA,EACArB,gBAAAA,EACA54C,SAAAA,EACApmB,QAAAA,EACAoT,SAAAA,MACI,UACJ,MAAO6rD,EAAoBC,EAAkBC,IAAqB9jD,EAAAA,GAAAA,KAC5DilD,EAAevoE,EAAK+f,MACpByoD,EAAexoE,EAAKo6B,UAAYp6B,EAAKo6B,SAASumB,OAAe,IAE5D/lB,EAAwBC,IAA6B73B,EAAAA,EAAAA,KAAS,IAC9D+c,EAAO2gC,IAAY19C,EAAAA,EAAAA,IAASulE,IAC5B5nB,EAAOC,IAAY59C,EAAAA,EAAAA,IAASwlE,IAC5Bv2D,EAAO8oB,IAAY/3B,EAAAA,EAAAA,OACnBsc,EAAOwb,IAAY93B,EAAAA,EAAAA,MACpBylE,GAAYt0D,EAAAA,EAAAA,IAAkBnU,GAC9Bm7B,GAAuB9mB,EAAAA,EAAAA,GAASo0D,GAAW,EAAOn0D,EAAAA,GAAAA,SAClDhV,GAAOC,EAAAA,EAAAA,MAEbic,EAAAA,EAAAA,IAAeH,EAAUpT,IAEzBhF,EAAAA,EAAAA,KAAU,KACJR,IAAa8kE,EAAAA,GAAAA,WACf1sC,GAA0B,GAC1BC,OAASj5B,MAEV,CAACY,IAEJ,MAAMimE,GAAsBrpE,EAAAA,EAAAA,KAAY,KACtC83B,EAAewxC,EAAAA,GAAAA,mBACd,CAACxxC,IAEEyxC,GAAwBvpE,EAAAA,EAAAA,KAAY,KACxC83B,EAAewxC,EAAAA,GAAAA,cACd,CAACxxC,IAEE0xC,GAAyBxpE,EAAAA,EAAAA,KAAY,KACzC83B,EAAewxC,EAAAA,GAAAA,oBACd,CAACxxC,IAEE2xC,GAA4BzpE,EAAAA,EAAAA,KAAY,KAC5C83B,EAAewxC,EAAAA,GAAAA,sBACd,CAACxxC,IAEE4xC,GAAiB1pE,EAAAA,EAAAA,KAAaw0D,IAClC94B,EAAS84B,GACTh5B,GAA0B,KACzB,IAEGomB,GAAoB5hD,EAAAA,EAAAA,KAAayE,IACrC48C,EAAS58C,EAAEiJ,OAAOJ,OAClBkuB,GAA0B,KACzB,IAEGmuC,GAAoB3pE,EAAAA,EAAAA,KAAayE,IACrC88C,EAAS98C,EAAEiJ,OAAOJ,OAClBkuB,GAA0B,KACzB,IAEGouC,IAAoB5pE,EAAAA,EAAAA,KAAY,KACpC,MAAM6pE,EAAenpD,EAAMyZ,OACrB2vC,EAAexoB,EAAMnnB,OAEtB0vC,EAAalrE,OAKlBmqE,EAAW,CACT7pE,OAAAA,EACAyhB,MAAOmpD,EACPvoB,MAAOwoB,EACPl3D,MAAAA,IARA6oB,EAAS6sC,MAUV,CAAChnB,EAAOriD,EAAQ2T,EAAO8N,EAAOooD,IAE3BiB,IAAqB/pE,EAAAA,EAAAA,KAAY,KACrC83B,EAAewxC,EAAAA,GAAAA,gBACd,CAACxxC,IAEEkyC,IAAyBhqE,EAAAA,EAAAA,KAAY,KACzC,IAAKW,EAAKo6B,SACR,OAGF,MAAM,mBAAEkvC,GAAuBtpE,EAAKo6B,SAEpC8tC,EAAuB,CAAE5pE,OAAQ0B,EAAKlD,GAAIysE,WAAYD,MACrD,CAACtpE,EAAMkoE,IAEJsB,IAA0BjoE,EAAAA,EAAAA,KAAQ,KACtC,IAAKvB,EAAKypE,oBACR,OAAO,EAGT,IAAI72B,EAAa,CACf,eACA,YACA,aACA,YACA,aACA,cACA,eACA32B,QACCpc,IAASG,EAAKypE,oBAAqB5pE,KACpC7B,OAEF,MAAM,aAAE0rE,EAAF,SAAgBC,GAAa3pE,EAAKypE,oBAOxC,OAJKC,GAAiBC,IACpB/2B,GAAc,GAGTA,IACN,CAAC5yC,IAEE4pE,IAAc,UAAC5pE,EAAKo6B,gBAAN,iBAAC,EAAeyvC,oBAAhB,aAAC,EAA6B7rE,SAAW,EAEvD8rE,IAAoBzqE,EAAAA,EAAAA,KAAY,KAChCwoE,EACFO,EAAW,CAAE9pE,OAAQ0B,EAAKlD,KAChBkD,EAAK+nE,UAGfO,EAAc,CAAEhqE,OAAQ0B,EAAKlD,KAF7BurE,EAAa,CAAE/pE,OAAQ0B,EAAKlD,KAI9BsqE,IACAH,IACA54C,EAAS,CAAEvxB,QAAI+E,MACd,CACDgmE,EAAc7nE,EAAK+nE,UAAW/nE,EAAKlD,GACnCsqE,EAAmBH,EAAiBoB,EAAcC,EAAeF,EAAY/5C,IAG/E,GAAIruB,EAAKorD,aACP,OAGF,MAAM/3B,GAAY5wB,IAAa8kE,EAAAA,GAAAA,WAE/B,OACE,0BAAK7nE,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAACs8B,GAAA,EAAD,CACEb,qBAAsBA,EACtBtuB,SAAUk8D,EACVt8D,UAAWq7D,IAEb,mBAAChrD,GAAA,EAAD,CACEhgB,GAAG,cACHktB,MAAO1qB,EAAK,aACZuN,SAAUo0C,EACVt0C,MAAOoT,EACPT,MAAOA,IAAUqoD,GAAoBroD,OAAQzd,EAC7C4K,UAAWq7D,IAEb,mBAAChrD,GAAA,EAAD,CACEhgB,GAAG,cACH4C,UAAU,OACVsqB,MAAO1qB,EAAK,0BACZuN,SAAUm8D,EACVr8D,MAAOg0C,EACPl0C,UAAWq7D,IAEZ9nE,EAAK+nE,WACJ,mBAACvqD,GAAA,EAAD,CAAUpb,KAAK,OAAOm8B,WAAS,EAAC5+B,QAAS+oE,GACvC,2BAAMhpE,UAAU,SAASJ,EAAK,cAC9B,2BAAMI,UAAU,YAAYM,EAAK+xB,SAAWzyB,EAAK,cAAgBA,EAAK,iBAGzEsoE,GACC,mBAACpqD,GAAA,EAAD,CACEpb,KAAK,UACLm8B,WAAS,EACT5+B,QAASipE,GAET,2BAAMlpE,UAAU,SAASJ,EAAK,kBAC9B,2BAAMI,UAAU,YAAYJ,EAAK,sBAGrC,mBAACke,GAAA,EAAD,CACEpb,KAAK,cACLm8B,WAAS,EACT5+B,QAASkpE,EACTp8D,UAAWw7D,GAEX,2BAAMvoE,UAAU,SAASJ,EAAK,uBAC9B,2BAAMI,UAAU,WAAWO,IAAI,QAC5BupE,GADH,IA5MoB,IAgNtB,mBAAChsD,GAAA,EAAD,CACEpb,KAAK,QACLm8B,WAAS,EACT5+B,QAASmpE,GAET,2BAAMppE,UAAU,SAASJ,EAAK,0BAC9B,2BAAMI,UAAU,aAAYqqE,EAAAA,GAAAA,IAAcH,OAG9C,0BAAKlqE,UAAU,WACb,mBAAC8d,GAAA,EAAD,CAAUpb,KAAK,QAAQm8B,WAAS,EAAC5+B,QAASypE,IACxC,2BAAM1pE,UAAU,SAASJ,EAAK,iBAC9B,2BAAMI,UAAU,aAAYqqE,EAAAA,GAAAA,IAAa,UAAC/pE,EAAKq2C,oBAAN,QAAsB,KAGhEr2C,EAAKo6B,UACJ,0BAAK16B,UAAU,gCACb,mBAAC8iC,GAAA,EAAD,CACEC,SAAUziC,EAAKo6B,SAASkvC,mBACxBt/C,MAAO1qB,EAAK,eACZuN,SAAUw8D,GACV58D,UAAWw7D,MAKnB,0BAAKvoE,UAAU,WACb,mBAAC8d,GAAA,EAAD,CAAUpb,KAAK,SAASmF,QAAM,EAAC0kB,aAAW,EAACtsB,QAASwnE,GACjD7nE,EAAK,iBAIZ,mBAAC48B,GAAA,EAAD,CACEhwB,QAAS0uB,EACTj7B,QAASspE,GACTx8D,SAAU4mB,GACVvxB,UAAWxC,EAAK,SAEf+zB,GACC,mBAAC9iB,EAAA,EAAD,CAAS3O,MAAM,UAEf,wBAAGlC,UAAU,gBAGjB,mBAACwhB,GAAA,EAAD,CACEzf,OAAQylE,EACRj/D,QAASm/D,EACT7wD,WAAWrW,EAAAA,EAAAA,GACT2nE,IAAiB7nE,EAAK+nE,UAClBzoE,EAAK,2BACLA,EAAK,oCAAqCU,EAAK+f,OACnD,CAAC,KAAM,oBAEToB,aAAc0mD,IAAiB7nE,EAAK+nE,UAAYzoE,EAAK,cAAgBA,EAAK,qBAC1E8hB,eAAgB0oD,GAChB7xC,sBAAoB,SCjB5B,IAAe53B,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MAGF,CAAE0B,MAFIpB,EAAAA,EAAAA,IAAWP,EAAQC,GAEjBwd,cAAezd,EAAOyd,kBAEvC,CAAC/c,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,mCANpCZ,EAjPsD,EACxE+4B,eAAAA,EACA6yC,mBAAAA,EACAhqE,KAAAA,EACA8b,cAAAA,EACAmuD,8BAAAA,EACAhiE,QAAAA,EACAoT,SAAAA,MAEA,MAAO6uD,EAAaC,IAAkBnnE,EAAAA,EAAAA,IAA8B,KAC7DonE,EAAuBC,IAA4BrnE,EAAAA,EAAAA,KAAS,IAC5DqwB,EAAW2yC,IAAgBhjE,EAAAA,EAAAA,KAAS,GACrC1D,GAAOC,EAAAA,EAAAA,MAEbic,EAAAA,EAAAA,IAAeH,EAAUpT,GAEzB,MAAMqiE,GAA0BjrE,EAAAA,EAAAA,KAAY,KAC1C83B,EAAewxC,EAAAA,GAAAA,qBACd,CAACxxC,IAEEozC,GAA0BlrE,EAAAA,EAAAA,KAAY,KAC1C83B,EAAewxC,EAAAA,GAAAA,8BACd,CAACxxC,IAEEqzC,GAA6BnrE,EAAAA,EAAAA,KAAaiyD,IAC9C0Y,EAAmB1Y,EAAO3zC,OAAQ2zC,EAAOmZ,mBAAqB3uD,GAC9Dqb,EAAewxC,EAAAA,GAAAA,wBACd,CAAC7sD,EAAekuD,EAAoB7yC,KAEvCl0B,EAAAA,EAAAA,KAAU,KACRknE,GAAgBnqE,MAAAA,OAAD,EAACA,EAAMypE,sBAAwB,IAC9CY,GAAyB,GACzBxkE,YAAW,KACTmgE,GAAa,KA1D0B,OA4DxC,CAAChmE,IAEJ,MAAM0qE,GAAyBrrE,EAAAA,EAAAA,KAAayE,IAC1C,MAAM,KAAE+X,GAAS/X,EAAEiJ,OAEnB,SAAS49D,EAA0Bh+D,GACjC,OAAOA,QAAQ9K,EAGjBsoE,GAAgBrgC,IAAD,IACVA,EACH,CAACjuB,GAAO8uD,EAA0B7gC,EAAEjuB,OACvB,iBAATA,GAA2B,CAC7B8tD,SAAUgB,EAA0B7gC,EAAEjuB,SAG1CwuD,GAAyB,KACxB,IAEGO,GAAwBvrE,EAAAA,EAAAA,KAAY,KACnCW,IAILgmE,GAAa,GACbiE,EAA8B,CAAE3rE,OAAQ0B,EAAKlD,GAAI+tE,aAAcX,OAC9D,CAAClqE,EAAMkqE,EAAaD,IAEjBa,GAAoBvpE,EAAAA,EAAAA,KAAQ,IAC3BvB,GAASA,EAAKo6B,UAAap6B,EAAKo6B,SAAS2wC,cAIvC/qE,EAAKo6B,SAAS2wC,cAAc/sE,OAH1B,GAIR,CAACgC,IAEEgrE,GAAmBzpE,EAAAA,EAAAA,KAAQ,IAC1BvB,GAASA,EAAKo6B,UAAap6B,EAAKo6B,SAAS6wC,QAIvCjrE,EAAKo6B,SAAS6wC,QAAQhvD,QAAO,EAAG4uD,aAAAA,OAAqBA,IAHnD,IAIR,CAAC7qE,IAEEkrE,GAAsB7rE,EAAAA,EAAAA,KAAaiyD,IACvC,MAAM,aAAEuZ,GAAiBvZ,EACzB,IAAKuZ,IAAiB7qE,EACpB,OAGF,MAAM,oBAAEypE,GAAwBzpE,EAEhC,OAAO1C,OAAOg4B,KAAKu1C,GAAc10B,QAAO,CAACC,EAAQv2C,KAC/C,IACGgrE,EAAahrE,IACV4pE,MAAAA,GAAAA,EAAsB5pE,IACf,eAARA,GAAgC,iBAARA,GAAkC,cAARA,EAErD,OAAOu2C,EAGT,MAAM+0B,EAvHZ,SAAqCtrE,GACnC,OAAQA,GACN,IAAK,eACH,MAAO,yBACT,IAAK,YACH,MAAO,8BACT,IAAK,eACH,MAAO,iCACT,IAAK,aACH,MAAO,+BACT,IAAK,YACH,MAAO,8BACT,IAAK,aACH,MAAO,+BACT,IAAK,cACH,MAAO,8BACT,IAAK,cACH,MAAO,8BACT,QACE,QAoGgBurE,CAA4BvrE,GAE5C,IAAKsrE,EACH,OAAO/0B,EAGT,MAAMi1B,EAAmB/rE,EAAK6rE,GAE9B,MAAQ,GAAE/0B,IAAUA,EAAOp4C,OAA6B,KAAIqtE,IAAxBA,MACnC,MACF,CAACrrE,EAAMV,IAEV,OACE,0BAAKI,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,yBAAIA,UAAU,kBAAkBO,IAAI,QAAQX,EAAK,6BAEjD,0BAAKI,UAAU,yBACb,mBAAC8iC,GAAA,EAAD,CACE3mB,KAAK,eACL4mB,SAAUynC,EAAYoB,aACtBthD,MAAO1qB,EAAK,wBACZisE,UAAQ,EACR1+D,SAAU69D,KAGd,0BAAKhrE,UAAU,yBACb,mBAAC8iC,GAAA,EAAD,CACE3mB,KAAK,YACL4mB,SAAUynC,EAAYsB,UACtBxhD,MAAO1qB,EAAK,6BACZisE,UAAQ,EACR1+D,SAAU69D,KAGd,0BAAKhrE,UAAU,yBACb,mBAAC8iC,GAAA,EAAD,CACE3mB,KAAK,eACL4mB,SAAUynC,EAAYR,eAAiBQ,EAAYP,SACnD3/C,MAAO1qB,EAAK,gCACZisE,UAAQ,EACR1+D,SAAU69D,KAGd,0BAAKhrE,UAAU,yBACb,mBAAC8iC,GAAA,EAAD,CACE3mB,KAAK,YACL4mB,SAAUynC,EAAYuB,UACtBzhD,MAAO1qB,EAAK,6BACZisE,UAAQ,EACR1+D,SAAU69D,KAGd,0BAAKhrE,UAAU,yBACb,mBAAC8iC,GAAA,EAAD,CACE3mB,KAAK,aACL4mB,SAAUynC,EAAYwB,WACtB1hD,MAAO1qB,EAAK,8BACZisE,UAAQ,EACR1+D,SAAU69D,KAGd,0BAAKhrE,UAAU,yBACb,mBAAC8iC,GAAA,EAAD,CACE3mB,KAAK,cACL4mB,SAAUynC,EAAYyB,YACtB3hD,MAAO1qB,EAAK,+BACZisE,UAAQ,EACR1+D,SAAU69D,KAGd,0BAAKhrE,UAAU,yBACb,mBAAC8iC,GAAA,EAAD,CACE3mB,KAAK,cACL4mB,SAAUynC,EAAY0B,YACtB5hD,MAAO1qB,EAAK,+BACZisE,UAAQ,EACR1+D,SAAU69D,KAGd,0BAAKhrE,UAAU,yBACb,mBAAC8iC,GAAA,EAAD,CACE3mB,KAAK,aACL4mB,SAAUynC,EAAY2B,WACtB7hD,MAAO1qB,EAAK,8BACZisE,UAAQ,EACR1+D,SAAU69D,MAKhB,0BAAKhrE,UAAU,WACb,mBAAC8d,GAAA,EAAD,CACEpb,KAAK,cACLm8B,WAAS,EACTD,QAAM,EACN3+B,QAAS2qE,GAET,2BAAM5qE,UAAU,SAASJ,EAAK,wBAC9B,2BAAMI,UAAU,YAAYorE,KAIhC,0BAAKprE,UAAU,WACb,yBAAIA,UAAU,kBAAkBO,IAAI,QAAQX,EAAK,sBAEjD,mBAACke,GAAA,EAAD,CACEpb,KAAK,WACLzC,QAAS4qE,GAERjrE,EAAK,wBAGP0rE,EAAiBztD,KAAK+zC,GACrB,mBAAC9zC,GAAA,EAAD,CACE3d,IAAKyxD,EAAO3zC,OACZje,UAAU,wCACVC,QAAS,IAAM6qE,EAA2BlZ,IAE1C,mBAAC7zC,GAAA,EAAD,CACEE,OAAQ2zC,EAAO3zC,OACfD,OAAQwtD,EAAoB5Z,UAOtC,mBAACp1B,GAAA,EAAD,CACEhwB,QAASk+D,EACTzqE,QAASirE,EACT9oE,UAAWxC,EAAK,QAChBmN,SAAU4mB,GAETA,EACC,mBAAC9iB,EAAA,EAAD,CAAS3O,MAAM,UAEf,wBAAGlC,UAAU,qBCtNvB,IAAeW,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MACE0vB,OACEhQ,KAAM+P,GAFJ,cAIJhS,GACEzd,EAEJ,MAAO,CAAEyvB,UAAAA,EAAWhS,cAAAA,MAEtB,CAAC/c,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,kBAAmB,sBAXvDZ,EApDoD,EACtE4B,KAAAA,EACA8tB,UAAAA,EACAhS,cAAAA,EACAra,OAAAA,EACAwG,QAAAA,EACA6jE,gBAAAA,EACAC,iBAAAA,MACI,MACJ,MAAMzsE,GAAOC,EAAAA,EAAAA,MACN0c,EAAQ0C,IAAa3b,EAAAA,EAAAA,IAAS,IAE/BgZ,GAAYtW,EAAAA,EAAAA,IAAyB,MAErCsmE,GAAUzqE,EAAAA,EAAAA,KAAQ,KAAM,MAK5B,QAJ0B,UAAAvB,EAAKo6B,gBAAL,eAAe6wC,UAAW,IAAIhvD,QAAQq1C,IACtDA,EAAO2a,UAAY3a,EAAO4a,SAAW5a,EAAO3zC,SAAW7B,IAGzCq6B,QAAiB,CAACqC,EAAK8Y,KAE1Cr1C,GACG6R,EAAUwjC,EAAO3zC,WAClBuB,EAAAA,GAAAA,IAAY4S,EAAAA,EAAAA,IAAgBhE,EAAUwjC,EAAO3zC,UAAY,GAAI1B,IAEhEu8B,EAAIxzB,KAAKssC,EAAO3zC,QAGX66B,IACN,MACF,WAACx4C,EAAKo6B,gBAAN,aAAC,EAAe6wC,QAASnvD,EAAeG,EAAQ6R,IAE7C+qB,GAAmBx5C,EAAAA,EAAAA,KAAase,IACpCouD,EAAiB,CAAEztE,OAAQ0B,EAAKlD,GAAI6gB,OAAAA,IACpC1V,MACC,CAACjI,EAAKlD,GAAIivE,EAAkB9jE,IAE/B,OACE,mBAAC,GAAD,CACExG,OAAQA,EACRsa,cAAeiwD,EACfhwD,UAAWA,EACXE,kBAAmB5c,EAAK,oBACxB2c,OAAQA,EACRE,eAAgBwC,EAChBvC,SAAU0vD,EACVzvD,mBAAoBw8B,EACpB5wC,QAASA,QCmDf,IAAe5H,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MACT,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,IACxByf,KAAM+P,GAAczvB,EAAO0vB,MAGnC,MAAO,CAAE/tB,KAAAA,EAAM8tB,UAAAA,EAAWq+C,iBAFDnsE,KAASgoE,EAAAA,EAAAA,IAAiBhoE,EAAM,aAAeA,EAAK+nE,eAI/E,CAAChpE,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,kCARpCZ,EA5FuD,EACzE4B,KAAAA,EACA8tB,UAAAA,EACAq+C,iBAAAA,EACAC,6BAAAA,EACAnkE,QAAAA,EACAoT,SAAAA,MAEA,MAAM/b,GAAOC,EAAAA,EAAAA,MACN8sE,EAAuBC,EAAqBC,IAAwBjpD,EAAAA,GAAAA,MAE3E9H,EAAAA,EAAAA,IAAeH,EAAUpT,GAEzB,MAAMukE,GAAiBjrE,EAAAA,EAAAA,KAAQ,IACxBvB,GAASA,EAAKo6B,UAAap6B,EAAKo6B,SAAS2wC,cAIvC/qE,EAAKo6B,SAAS2wC,cAHZ,IAIR,CAAC/qE,IAEEysE,GAAeptE,EAAAA,EAAAA,KAAaiyD,IAChC,IAAKA,EAAOob,eACV,OAGF,MAAMC,EAAe7+C,EAAUwjC,EAAOob,gBACtC,OAAKC,EAIErtE,EAAK,iBAAiBwyB,EAAAA,EAAAA,IAAgB66C,SAJ7C,IAKC,CAACrtE,EAAMwuB,IAEJ8+C,GAAoBvtE,EAAAA,EAAAA,KAAaiyD,IACrC,GAAKtxD,EAIL,MAAO,CAAC,CACN+f,MAAOzgB,EAAK,WACZ8C,KAAM,SACN6pB,aAAa,EACb4rB,QAAS,IAAMu0B,EAA6B,CAC1C9tE,OAAQ0B,EAAKlD,GACb6gB,OAAQ2zC,EAAO3zC,OACfktD,aAAc,SAGjB,CAACvrE,EAAMU,EAAMosE,IAEhB,OACE,0BAAK1sE,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,UAAUO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GACjD,wBAAGnC,UAAU,cAAcJ,EAAK,oBAE/BktE,EAAejvD,KAAK+zC,GACnB,mBAAC9zC,GAAA,EAAD,CACE3d,IAAKyxD,EAAO3zC,OACZje,UAAU,sBACV6H,QAAM,EACN0lB,eAAgB2/C,EAAkBtb,IAElC,mBAAC7zC,GAAA,EAAD,CACEE,OAAQ2zC,EAAO3zC,OACfD,OAAQ+uD,EAAanb,QAI1B6a,GACC,mBAACjwC,GAAA,EAAD,CACEhwB,SAAO,EACPvM,QAAS2sE,EACTxqE,UAAWxC,EAAK,0CAEhB,wBAAGI,UAAU,0BAGhBM,GAAQmsE,GACP,mBAAC,GAAD,CACEnsE,KAAMA,EACNyB,OAAQ4qE,EACRpkE,QAASskE,WCvEjBM,GAAsB,+BAiN5B,IAAexsE,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MACT,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,IAC1B,SAAEmE,GAAapE,EAAOwoE,WAG5B,MAAO,CACL7mE,KAAAA,EACAyC,SAAAA,EACAqqE,kBALwBjkE,QAAQ7I,MAAAA,OAAD,EAACA,EAAM8sE,mBAMtChF,eAAeE,EAAAA,EAAAA,IAAiBhoE,EAAM,kBAG1C,CAACjB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,mBAAoB,aAAc,kBAAmB,eAAgB,gBAAiB,cAdtEZ,EA/M6C,EAC/DE,OAAAA,EACA0B,KAAAA,EACAyC,SAAAA,EACAqqE,kBAAAA,EACAhF,cAAAA,EACA3wC,eAAAA,EACAgxC,WAAAA,EACA4E,iBAAAA,EACA9F,gBAAAA,EACAoB,aAAAA,EACAC,cAAAA,EACAj6C,SAAAA,EACApmB,QAAAA,EACAoT,SAAAA,MACI,YACJ,MAAMktD,EAAevoE,GAAQA,EAAK+f,OAAe,GAC3CyoD,EAAexoE,MAAAA,GAAAA,EAAMo6B,UAAYp6B,EAAKo6B,SAASumB,OAAe,GAC9D8K,EAAgBzrD,MAAAA,GAAH,UAAGA,EAAMo6B,gBAAT,aAAG,EAAgBsxB,cAE/Bwb,EAAoBC,EAAkBC,IAAqB9jD,EAAAA,GAAAA,MAC3DsX,EAAwBC,IAA6B73B,EAAAA,EAAAA,KAAS,IAC9D+c,EAAO2gC,IAAY19C,EAAAA,EAAAA,IAASulE,IAC5B5nB,EAAOC,IAAY59C,EAAAA,EAAAA,IAASwlE,IAC5Bv2D,EAAO8oB,IAAY/3B,EAAAA,EAAAA,OACnBsc,EAAOwb,IAAY93B,EAAAA,EAAAA,MACpBylE,EAAYzoE,IAAQmU,EAAAA,EAAAA,IAAkBnU,GACtCm7B,GAAuB9mB,EAAAA,EAAAA,GAASo0D,GAAW,EAAOn0D,EAAAA,GAAAA,SAClDhV,GAAOC,EAAAA,EAAAA,MAEbic,EAAAA,EAAAA,IAAeH,EAAUpT,IAEzBhF,EAAAA,EAAAA,KAAU,KACJR,IAAa8kE,EAAAA,GAAAA,WACf1sC,GAA0B,GAC1BC,OAASj5B,MAEV,CAACY,IAEJ,MAAMmnE,GAAe5pE,MAAAA,GAAD,UAACA,EAAMo6B,gBAAP,iBAAC,EAAgByvC,oBAAjB,aAAC,EAA8B7rE,SAAW,EAExD0qE,GAAsBrpE,EAAAA,EAAAA,KAAY,KACtC83B,EAAewxC,EAAAA,GAAAA,mBACd,CAACxxC,IAEEyxC,GAAwBvpE,EAAAA,EAAAA,KAAY,KACxC83B,EAAewxC,EAAAA,GAAAA,cACd,CAACxxC,IAEE2xC,GAA4BzpE,EAAAA,EAAAA,KAAY,KAC5C83B,EAAewxC,EAAAA,GAAAA,sBACd,CAACxxC,IAEE4xC,GAAiB1pE,EAAAA,EAAAA,KAAaw0D,IAClC94B,EAAS84B,GACTh5B,GAA0B,KACzB,IAEGomB,GAAoB5hD,EAAAA,EAAAA,KAAayE,IACrC48C,EAAS58C,EAAEiJ,OAAOJ,OAClBkuB,GAA0B,KACzB,IAEGmuC,GAAoB3pE,EAAAA,EAAAA,KAAayE,IACrC88C,EAAS98C,EAAEiJ,OAAOJ,OAClBkuB,GAA0B,KACzB,IAEGmyC,GAAsB3tE,EAAAA,EAAAA,KAAY,KACtC,MAAM6pE,EAAenpD,EAAMyZ,OACrB2vC,EAAexoB,EAAMnnB,OAEtB0vC,EAAalrE,OAKlBmqE,EAAW,CACT7pE,OAAAA,EACAyhB,MAAOmpD,EACPvoB,MAAOwoB,EACPl3D,MAAAA,IARA6oB,EAAS+xC,MAUV,CAAClsB,EAAOriD,EAAQ2T,EAAO8N,EAAOooD,IAE3B8E,GAAyB5tE,EAAAA,EAAAA,KAAY,KACzC0tE,EAAiB,CAAEzuE,OAAAA,EAAQirE,WAAYuD,MACtC,CAACxuE,EAAQwuE,EAAmBC,IAEzBG,IAAyB7tE,EAAAA,EAAAA,KAAY,KACzC83B,EAAewxC,EAAAA,GAAAA,sBACd,CAACxxC,IAEEg2C,IAAsB9tE,EAAAA,EAAAA,KAAY,KAClCW,EAAK+nE,UACPO,EAAc,CAAEhqE,OAAQ0B,EAAKlD,KAE7BurE,EAAa,CAAE/pE,OAAQ0B,EAAKlD,KAG9BsqE,IACAH,IACA54C,EAAS,CAAEvxB,QAAI+E,MACd,CAAC7B,EAAK+nE,UAAW/nE,EAAKlD,GAAIsqE,EAAmBH,EAAiBoB,EAAcC,EAAej6C,IAE9F,GAAIruB,EAAKorD,aACP,OAGF,MAAM/3B,GAAY5wB,IAAa8kE,EAAAA,GAAAA,WAE/B,OACE,0BAAK7nE,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAACs8B,GAAA,EAAD,CACEb,qBAAsBA,EACtBtuB,SAAUk8D,EACVt8D,UAAWq7D,IAEb,mBAAChrD,GAAA,EAAD,CACEhgB,GAAG,gBACHktB,MAAO1qB,EAAK,oBACZuN,SAAUo0C,EACVt0C,MAAOoT,EACPT,MAAOA,IAAUutD,GAAsBvtD,OAAQzd,EAC/C4K,UAAWq7D,IAEb,mBAAChrD,GAAA,EAAD,CACEhgB,GAAG,gBACH4C,UAAU,OACVsqB,MAAO1qB,EAAK,0BACZuN,SAAUm8D,EACVr8D,MAAOg0C,EACPl0C,UAAWq7D,IAEZ9nE,EAAK+nE,WACJ,mBAACvqD,GAAA,EAAD,CAAUpb,KAAK,OAAOm8B,WAAS,EAAC5+B,QAAS+oE,GACvC,2BAAMhpE,UAAU,SAASJ,EAAK,gBAC9B,2BAAMI,UAAU,YAAYM,EAAK+xB,SAAWzyB,EAAK,cAAgBA,EAAK,iBAG1E,mBAACke,GAAA,EAAD,CACEpb,KAAK,UACLm8B,WAAS,EACT5+B,QAASipE,EACTn8D,UAAWq7D,GAEX,2BAAMpoE,UAAU,SAASJ,EAAK,eAC9B,2BAAMI,UAAU,YAA4BJ,EAAhBmsD,EAAqB,mBAA2B,SAE9E,mBAACjuC,GAAA,EAAD,CACEpb,KAAK,QACLm8B,WAAS,EACT5+B,QAASmpE,GAET,2BAAMppE,UAAU,SAASJ,EAAK,0BAC9B,2BAAMI,UAAU,YAAYkqE,IAE9B,0BAAKlqE,UAAU,gCACb,mBAAC8iC,GAAA,EAAD,CACEC,QAASqqC,EACT9iD,MAAO1qB,EAAK,uBACZuN,SAAUogE,MAIhB,0BAAKvtE,UAAU,WACb,mBAAC8d,GAAA,EAAD,CACEpb,KAAK,QACLm8B,WAAS,EACT5+B,QAASutE,IAET,2BAAMxtE,UAAU,QAAQO,IAAI,QAAQX,EAAK,uBACzC,2BAAMI,UAAU,WAAWO,IAAI,QAAQX,EAAK,cAAD,UAAgBU,EAAKq2C,oBAArB,QAAqC,EAAG,QAGvF,0BAAK32C,UAAU,WACb,mBAAC8d,GAAA,EAAD,CAAUpb,KAAK,SAASmF,QAAM,EAAC0kB,aAAW,EAACtsB,QAASwnE,GACjDnnE,EAAK+nE,UAAYzoE,EAAK,iBAAmBA,EAAK,mBAIrD,mBAAC48B,GAAA,EAAD,CACEhwB,QAAS0uB,EACTj7B,QAASqtE,EACTvgE,SAAU4mB,GACVvxB,UAAWxC,EAAK,SAEf+zB,GACC,mBAAC9iB,EAAA,EAAD,CAAS3O,MAAM,UAEf,wBAAGlC,UAAU,gBAGjB,mBAACwhB,GAAA,EAAD,CACEzf,OAAQylE,EACRj/D,QAASm/D,EACTzkE,KAAM3C,EAAK+nE,UAAYzoE,EAAK,sBAAwBA,EAAK,qBACzD6hB,aAAcnhB,EAAK+nE,UAAYzoE,EAAK,iBAAmBA,EAAK,gBAC5D8hB,eAAgB+rD,GAChBl1C,sBAAoB,S,aC7M5B,MA4HA,IAAe53B,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MACT,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,IAC1B,oBAAEy6B,IAAwBq0C,EAAAA,EAAAA,IAAiB/uE,EAAQC,GAEzD,MAAO,CACL0B,KAAAA,EACAigB,WAAWoI,EAAAA,EAAAA,IAAcroB,GACzByC,SAAUpE,EAAOwoE,WAAWpkE,SAC5Bs2B,oBAAAA,MAGJ,CAACh6B,EAAWC,KAAYC,EAAAA,EAAAA,IAAKD,EAAS,CACpC,kBAAmB,mBAAoB,uBAbvBZ,EA5HqD,EACvE4B,KAAAA,EACAiI,QAAAA,EACAoT,SAAAA,EACA4E,UAAAA,EACAxd,SAAAA,EACAs2B,oBAAAA,EACAs0C,gBAAAA,EACAC,iBAAAA,EACAC,kBAAAA,MACI,MACJ,MAAM1V,EAAWhvD,QAAQ7I,EAAK+xB,UACxBy7C,EAAW,UAAGxtE,EAAKo6B,gBAAR,aAAG,EAAeqzC,YAE5BC,EAAaC,IAAkB3qE,EAAAA,EAAAA,IAAsB60D,EAAW,SAAW,YAC3E9lC,EAAUkH,IAAej2B,EAAAA,EAAAA,OACzB4qE,EAA2BC,EAAyBC,IAA4BxqD,EAAAA,GAAAA,KAEjFyqD,EAAYllE,QACC,WAAhB6kE,GAA4B37C,GAAYgH,GACrB,YAAhB20C,GAA6B7V,IAGnCr8C,EAAAA,EAAAA,IAAeH,EAAUpT,IAEzBhF,EAAAA,EAAAA,KAAU,KACJyqE,IAAgBF,GAClBD,MAED,CAACG,EAAaF,EAAaD,IAE9B,MAAMS,GAAqB3uE,EAAAA,EAAAA,KAAasN,IACtCghE,EAAehhE,KACd,IAEGshE,GAAa5uE,EAAAA,EAAAA,KAAY,KAC7BiuE,EAAiB,CAAEv7C,SAA0B,WAAhB27C,EAA2B37C,EAAW,OAClE,CAAC27C,EAAaJ,EAAkBv7C,IAE7Bm8C,GAA0B7uE,EAAAA,EAAAA,KAAY,KAC1CyuE,IACAP,MACC,CAACO,EAA0BP,IAExBjuE,GAAOC,EAAAA,EAAAA,KACP4uE,EAAcluD,EAAY,UAAY,OACtCmuD,EAAcnuD,EAAY,UAAY,QAEtCiK,EAAU,CACd,CAAEvd,MAAO,UAAWqd,MAAO1qB,EAAM,GAAE6uE,YAAuBlnC,SAAU3nC,EAAM,GAAE6uE,iBAC5E,CAAExhE,MAAO,SAAUqd,MAAO1qB,EAAM,GAAE6uE,WAAsBlnC,SAAU3nC,EAAM,GAAE6uE,iBAGtE96C,EAAY5wB,IAAa8kE,EAAAA,GAAAA,WAE/B,OACE,0BAAK7nE,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,UAAUO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GACjD,yBAAInC,UAAU,mBAAmBJ,EAAM,GAAE8uE,UACzC,mBAACnkD,GAAA,EAAD,CACEE,SAAUujD,EACV7xD,KAAK,eACLqO,QAASA,EACTrd,SAAUmhE,KAGG,YAAhBN,EACC,0BAAKhuE,UAAU,UAAUO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAChD2rE,EACC,sCACE,mBAACa,GAAA,EAAD,CAAU1mE,IAAK6lE,EAAa9tE,UAAU,aAAaiD,KAAM6qE,IACzD,wBAAG9tE,UAAU,eAAeO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GACnDvC,EAAM,GAAE6uE,qBAGX,mBAAC3wD,GAAA,EAAD,CAAUpb,KAAK,SAASmF,QAAM,EAAC0kB,aAAW,EAACtsB,QAASkuE,GACjDvuE,EAAK,eAER,mBAAC4hB,GAAA,EAAD,CACEzf,OAAQmsE,EACR3lE,QAAS6lE,EACTnrE,KAAMrD,EAAK,eACX6hB,aAAc7hB,EAAK,gBACnB8hB,eAAgB8sD,EAChBj2C,sBAAoB,KAIxB,mBAACpa,GAAA,EAAD,OAIJ,0BAAKne,UAAU,qBACb,mBAACu8B,GAAD,CACEnD,QAAM,EACND,gBAAiB74B,EAAK+xB,SACtBsB,UAAWA,EACX0F,oBAAqBA,EACrBC,cAAeq0C,EACfxgE,SAAUosB,IAEZ,wBAAGv5B,UAAU,eAAeO,IAAI,QAC7BX,EAAM,GAAE8uE,sCAKjB,mBAAClyC,GAAA,EAAD,CACEhwB,QAAS6hE,EACTthE,SAAU4mB,EACVvxB,UAAWxC,EAAK,QAChBK,QAASsuE,GAER56C,EACC,mBAAC9iB,EAAA,EAAD,CAAS3O,MAAM,UAEf,wBAAGlC,UAAU,qBCkGvB,IAAeW,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MAAyB,MAClC,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,IAC1B,iBAAEgwE,EAAkBvwD,KAAMg7B,GAAe16C,EAAOyf,MAKtD,MAAO,CACL9d,KAAAA,EACA+4C,WAAAA,EACAu1B,iBAAAA,EACAC,WARiBvuE,MAAAA,GAAA,UAAAA,EAAMo6B,gBAAN,SAAgBsxB,cAC/B9sD,EAAAA,EAAAA,IAAWP,EAAQ2B,EAAKo6B,SAASsxB,mBACjC7pD,EAOFoe,UAAWjgB,IAAQqoB,EAAAA,EAAAA,IAAcroB,OAGrC,CAACjB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,0BAA2B,sBAAuB,2BAjBlCZ,EAxNgD,EAClE4B,KAAAA,EACAiI,QAAAA,EACAoT,SAAAA,EACA/c,OAAAA,EACAy6C,WAAAA,EACAw1B,WAAAA,EACAD,iBAAAA,EACAruD,UAAAA,EACAkX,eAAAA,EACAq3C,wBAAAA,EACAC,oBAAAA,EACAC,sBAAAA,MAEA,MAAOC,EAAeC,IAAoB5rE,EAAAA,EAAAA,OACnCi6B,EAAeC,IAAoBl6B,EAAAA,EAAAA,OACnCm6B,EAAmBC,IAAwBp6B,EAAAA,EAAAA,KAAS,GACrDq6B,GAAsBh+B,EAAAA,EAAAA,KAAY,IAAM+9B,GAAqB,IAAO,KACnEyxC,EAAgCC,EAA8BC,IAAiCzrD,EAAAA,GAAAA,MAC/F0rD,EAA8BC,EAA4BC,IAA+B5rD,EAAAA,GAAAA,KAC1FhkB,GAAOC,EAAAA,EAAAA,KACPmsD,EAAe6iB,MAAAA,OAAH,EAAGA,EAAYzxE,IAEjC0e,EAAAA,EAAAA,IAAeH,EAAUpT,IAEzBhF,EAAAA,EAAAA,KAAU,KACRurE,MACC,CAACA,KAEJvrE,EAAAA,EAAAA,KAAU,KACHg6B,IACHK,EAAAA,GAAAA,GAAiB,oBAAoBC,KAAKL,KAE3C,CAACD,IAEJ,MAAMkyC,GAA4B9vE,EAAAA,EAAAA,KAAY,KAC5C0vE,IACAL,EAAsB,CAAEU,UAAWnvD,EAAY3hB,EAASotD,IACnDzrC,GACHkX,EAAewxC,EAAAA,GAAAA,WAEhB,CAACoG,EAA+BL,EAAuBzuD,EAAW3hB,EAAQotD,EAAcv0B,IAErFk4C,GAA0BhwE,EAAAA,EAAAA,KAAY,KAC1C6vE,IACAT,EAAoB,CAAEW,UAAW9wE,EAAQA,OAAQqwE,MAChD,CAACO,EAA6BT,EAAqBnwE,EAAQqwE,IAkJ9D,OACE,0BAAKjvE,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,0BAAKA,UAAU,gBACZu9B,GACC,mBAACc,GAAA,EAAD,CACEjhC,GAAG,wBACHgD,KAAMwvE,EAAAA,GACNryC,cAAeA,EACfgB,KAAMd,EACNe,QAAM,EACNC,OAAQd,KAIbkxC,GA3FL,8BACE,mBAAC/wD,GAAA,EAAD,CACE9d,UAAU,sBACVwhC,UAAQ,GAER,mBAACtjB,GAAA,EAAD,CAAetf,OAAQiwE,EAAYzxE,MAErC,mBAAC0gB,GAAA,EAAD,CACEpb,KAAK,SACLmF,QAAM,EACN0kB,aAAW,EACXtsB,QAASmvE,GAERxvE,EAAK2gB,EAAY,wBAA0B,4BAE9C,mBAACiB,GAAA,EAAD,CACEzf,OAAQotE,EACR5mE,QAAS8mE,EACT7xD,OAhFJ,0BAAKxd,UAAU,gBACb,mBAACE,EAAA,EAAD,CACEE,KAAK,OACLE,KAAMuuE,IAER,0BAAK7uE,UAAU,eACZJ,EAAK2gB,EAAY,wBAA0B,6BA2E5C1J,WAAWrW,EAAAA,EAAAA,GACTZ,EAAK2gB,EAAY,+BAAiC,6BAA8BsuD,EAAYxuD,OAC5F,CAAC,KAAM,oBAEToB,aAAc7hB,EAAK2gB,EAAY,wBAA0B,2BACzDmB,eAAgB+tD,EAChBl3C,sBAAoB,MAmElBs2C,GA3DN,8BACE,wBAAG7uE,UAAU,eAAeO,IAAI,QAAQX,EAAK,0BAE7C,0BAAKiwE,eAAa,GAChB,mBAAC/xD,GAAA,EAAD,CACE3d,IAAI,eACJuC,KAAK,QACLmF,QAAM,EACNioE,cAAe,EACf9vE,UAAU,mBAETJ,EAAK,0BAEPgvE,EACCA,EAAiB/wD,KAAI,CAACzgB,EAAIioB,IACxB,mBAACvH,GAAA,EAAD,CACE3d,IAAK/C,EACL0yE,cAAezqD,EAAI,EACnBrlB,UAAU,kCACVC,QAAS,KAxHrBivE,EAwH+C9xE,GAvH/CmyE,MAyHY,mBAACrxD,GAAA,EAAD,CAAetf,OAAQxB,OAI3B,mBAAC41B,GAAA,EAAD,CAAc7yB,IAAI,gBAAgB2vE,cAAe,EAAG7sE,KAAK,gCAG7D,wBAAGjD,UAAU,yBAAyBO,IAAI,QAAQX,EAAK,2BACvD,mBAAC4hB,GAAA,EAAD,CACEzf,OAAQutE,EACR/mE,QAASinE,EACThyD,OApHR,WACE,MAAMuyD,EAAc12B,EAAW41B,GAE/B,GAAKc,EAIL,OACE,0BAAK/vE,UAAU,gBACb,mBAACE,EAAA,EAAD,CACEE,KAAK,OACLE,KAAMyvE,IAER,0BAAK/vE,UAAU,eACZJ,EAAK,uCAsGEowE,GACRn5D,UAjGR,WACE,MAAMk5D,EAAc12B,EAAW41B,GAE/B,GAAKc,EAIL,OAAIA,EAAYE,gBACPzvE,EAAAA,EAAAA,GACJ,yBAAwBuvE,EAAY1vD,sCAAsC/f,EAAM+f,WACjF,CAAC,KAAM,qBAQJ7f,EAAAA,EAAAA,GAEJ,yBAAwBuvE,EAAY1vD,sCAAsC/f,EAAM+f,kFACjF,CAAC,KAAM,oBA4EQ6vD,GACXzuD,aAAc7hB,EAAK,uBACnB8hB,eAAgBiuD,EAChBQ,mBAAiB,YCgC3B,IAAexvE,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,EAAQwxE,wBAAAA,MACjB,MAAM9vE,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,GAGhC,MAAO,CAAE0B,KAAAA,EAAM+vE,sBAFe/vE,EAAK+nE,WAAa+H,OAIlD,CAAC/wE,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,kCAPpCZ,EA/N0D,EAC5E4B,KAAAA,EACAgwE,qBAAAA,EACA74C,eAAAA,EACAi1C,6BAAAA,EACA2D,oBAAAA,EACA9nE,QAAAA,EACAoT,SAAAA,MAEA,MAAO6uD,EAAaC,IAAkBnnE,EAAAA,EAAAA,IAA8B,KAC7DonE,EAAuBC,IAA4BrnE,EAAAA,EAAAA,KAAS,IAC5DqwB,EAAW2yC,IAAgBhjE,EAAAA,EAAAA,KAAS,IACpCitE,EAA6BC,EAA2BC,IAA8B7sD,EAAAA,GAAAA,KACvFhkB,GAAOC,EAAAA,EAAAA,MAEbic,EAAAA,EAAAA,IAAeH,EAAUpT,GAEzB,MAAMmoE,GAAqB7uE,EAAAA,EAAAA,KAAQ,KACjC,GAAKvB,GAASA,EAAKo6B,UAAap6B,EAAKo6B,SAAS6wC,QAI9C,OAAOjrE,EAAKo6B,SAAS6wC,QAAQ5oC,MAAK,EAAG1kB,OAAAA,KAAaA,IAAWqyD,MAC5D,CAAChwE,EAAMgwE,KAEV/sE,EAAAA,EAAAA,KAAU,KACJjD,MAAAA,GAAAA,EAAMo6B,UAAY41C,IAAyBI,GAC7Cj5C,EAAewxC,EAAAA,GAAAA,oBAEhB,CAAC3oE,EAAMm3B,EAAgBi5C,EAAoBJ,KAE9C/sE,EAAAA,EAAAA,KAAU,KACRknE,GAAgBiG,MAAAA,OAAD,EAACA,EAAoBvF,gBAAkB7qE,MAAAA,OAAvC,EAAuCA,EAAMypE,sBAAwB,IACpFY,GAAyB,GACzBrE,GAAa,KACZ,CAAChmE,EAAMowE,IAEV,MAAM1F,GAAyBrrE,EAAAA,EAAAA,KAAayE,IAC1C,MAAM,KAAE+X,GAAS/X,EAAEiJ,OAEnB,SAAS49D,EAA0Bh+D,GACjC,OAAOA,QAAQ9K,EAGjBsoE,GAAgBrgC,IAAD,IACVA,EACH,CAACjuB,GAAO8uD,EAA0B7gC,EAAEjuB,OACvB,iBAATA,GAA2B,CAC7B8tD,SAAUgB,EAA0B7gC,EAAEjuB,SAG1CwuD,GAAyB,KACxB,IAEGO,GAAwBvrE,EAAAA,EAAAA,KAAY,KACnCW,GAASgwE,IAIdhK,GAAa,GACboG,EAA6B,CAC3B9tE,OAAQ0B,EAAKlD,GACb6gB,OAAQqyD,EACRnF,aAAcX,OAEf,CAAClqE,EAAMgwE,EAAsB9F,EAAakC,IAEvCiE,GAAqBhxE,EAAAA,EAAAA,KAAY,KAChCW,GAASgwE,GAId5D,EAA6B,CAC3B9tE,OAAQ0B,EAAKlD,GACb6gB,OAAQqyD,EACRnF,aAAc,CACZyF,cAAc,OAGjB,CAACtwE,EAAMgwE,EAAsB5D,IAE1BmE,GAAuBlxE,EAAAA,EAAAA,KAAaQ,KACpCkwE,MAIC/vE,IAASA,EAAKypE,sBAIZzpE,EAAKypE,oBAAoB5pE,IAC/B,CAACG,EAAM+vE,IAEV,GAAKK,EAIL,OACE,0BAAK1wE,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAAC8d,GAAA,EAAD,CAAU0jB,UAAQ,EAACxhC,UAAU,uBAC3B,mBAAC+d,GAAA,EAAD,CAAiBE,OAAQyyD,EAAmBzyD,UAG9C,yBAAIje,UAAU,uBAAuBO,IAAI,QAAQX,EAAK,0BAEtD,0BAAKI,UAAU,yBACb,mBAAC8iC,GAAA,EAAD,CACE3mB,KAAK,eACL4mB,SAAUynC,EAAYoB,aACtBthD,MAAO1qB,EAAK,wBACZisE,UAAQ,EACR9+D,SAAU8jE,EAAqB,gBAC/B1jE,SAAU69D,KAGd,0BAAKhrE,UAAU,yBACb,mBAAC8iC,GAAA,EAAD,CACE3mB,KAAK,YACL4mB,SAAUynC,EAAYsB,UACtBxhD,MAAO1qB,EAAK,6BACZisE,UAAQ,EACR9+D,SAAU8jE,EAAqB,aAC/B1jE,SAAU69D,KAGd,0BAAKhrE,UAAU,yBACb,mBAAC8iC,GAAA,EAAD,CACE3mB,KAAK,eACL4mB,SAAUynC,EAAYR,eAAiBQ,EAAYP,SACnD3/C,MAAO1qB,EAAK,gCACZisE,UAAQ,EACR9+D,SAAU8jE,EAAqB,gBAC/B1jE,SAAU69D,KAGd,0BAAKhrE,UAAU,yBACb,mBAAC8iC,GAAA,EAAD,CACE3mB,KAAK,YACL4mB,SAAUynC,EAAYuB,UACtBzhD,MAAO1qB,EAAK,6BACZisE,UAAQ,EACR9+D,SAAU8jE,EAAqB,aAC/B1jE,SAAU69D,KAGd,0BAAKhrE,UAAU,yBACb,mBAAC8iC,GAAA,EAAD,CACE3mB,KAAK,aACL4mB,SAAUynC,EAAYwB,WACtB1hD,MAAO1qB,EAAK,8BACZisE,UAAQ,EACR9+D,SAAU8jE,EAAqB,cAC/B1jE,SAAU69D,KAGd,0BAAKhrE,UAAU,yBACb,mBAAC8iC,GAAA,EAAD,CACE3mB,KAAK,cACL4mB,SAAUynC,EAAYyB,YACtB3hD,MAAO1qB,EAAK,+BACZisE,UAAQ,EACR9+D,SAAU8jE,EAAqB,eAC/B1jE,SAAU69D,KAGd,0BAAKhrE,UAAU,yBACb,mBAAC8iC,GAAA,EAAD,CACE3mB,KAAK,cACL4mB,SAAUynC,EAAY0B,YACtB5hD,MAAO1qB,EAAK,+BACZisE,UAAQ,EACR9+D,SAAU8jE,EAAqB,eAC/B1jE,SAAU69D,KAGd,0BAAKhrE,UAAU,yBACb,mBAAC8iC,GAAA,EAAD,CACE3mB,KAAK,aACL4mB,SAAUynC,EAAY2B,WACtB7hD,MAAO1qB,EAAK,8BACZisE,UAAQ,EACR9+D,SAAU8jE,EAAqB,cAC/B1jE,SAAU69D,OAKdqF,GACA,0BAAKrwE,UAAU,WACb,mBAAC8d,GAAA,EAAD,CAAUpb,KAAK,cAAcmF,QAAM,EAAC0kB,aAAW,EAACtsB,QAASuwE,GACtD5wE,EAAK,4BAMd,mBAAC48B,GAAA,EAAD,CACEhwB,QAASk+D,EACTzqE,QAASirE,EACT9oE,UAAWxC,EAAK,QAChBmN,SAAU4mB,GAETA,EACC,mBAAC9iB,EAAA,EAAD,CAAS3O,MAAM,UAEf,wBAAGlC,UAAU,gBAIjB,mBAACwhB,GAAA,EAAD,CACEzf,OAAQwuE,EACRhoE,QAASkoE,EACTxtE,KAAK,oEACLwe,aAAa,SACbC,eAAgBivD,EAChBp4C,sBAAoB,SCnI5B,IAAe53B,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MACT,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,IACxByf,KAAM+P,GAAczvB,EAAO0vB,MAEnC,MAAO,CACL/tB,KAAAA,EACA8b,cAAezd,EAAOyd,cACtBmE,WAAWoI,EAAAA,EAAAA,IAAcroB,GACzB8tB,UAAAA,KATc1vB,EA7FwC,EAC1D4B,KAAAA,EACAigB,UAAAA,EACAnE,cAAAA,EACAgS,UAAAA,EACAqJ,eAAAA,EACA6yC,mBAAAA,EACA/hE,QAAAA,EACAoT,SAAAA,MAEA,MAAM/b,GAAOC,EAAAA,EAAAA,MAEbic,EAAAA,EAAAA,IAAeH,EAAUpT,GAMzB,MAAM4hE,GAAetoE,EAAAA,EAAAA,KAAQ,IACtBvB,EAAKo6B,UAAap6B,EAAKo6B,SAASyvC,aAI9B7pE,EAAKo6B,SAASyvC,aAAa33C,MAAK,CAACC,EAAGC,IACrCD,EAAE+5C,SACI,EACC95C,EAAE85C,QACJ,EAGF,IAVA,IAYR,CAAClsE,IAEEwwE,GAAyBnxE,EAAAA,EAAAA,KAAaiyD,IAC1C0Y,EAAmB1Y,EAAO3zC,OAAQ2zC,EAAOmZ,mBAAqB3uD,GAC9Dqb,EAAewxC,EAAAA,GAAAA,mBACd,CAAC7sD,EAAekuD,EAAoB7yC,IAEjCs5C,GAAkBpxE,EAAAA,EAAAA,KAAaiyD,IACnC,GAAIA,EAAO4a,QACT,OAAO5sE,EAAK,kBAGd,MAAMoxE,EAAiBpf,EAAOmZ,iBAAmB38C,EAAUwjC,EAAOmZ,uBAAoB5oE,EAEtF,OAAI6uE,EACKpxE,EAAK,uBAAuBwyB,EAAAA,EAAAA,IAAgB4+C,IAG9CpxE,EAAK,kBACX,CAACA,EAAMwuB,IAEV,OACE,0BAAKpuB,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAAC8d,GAAA,EAAD,CACEpb,KAAK,SACLm8B,WAAS,EACT5+B,QA9CV,WACEw3B,EAAewxC,EAAAA,GAAAA,sBA+CP,2BAAMjpE,UAAU,SAASJ,EAAK,aAC9B,2BAAMI,UAAU,YAAYJ,EAAK2gB,EAAY,4BAA8B,yBAI/E,0BAAKvgB,UAAU,UAAUO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GACjD,wBAAGnC,UAAU,aAAaO,IAAI,QAC3BggB,EACG,8DACA,6DAGL4pD,EAAatsD,KAAK+zC,GACjB,mBAAC9zC,GAAA,EAAD,CACE3d,IAAKyxD,EAAO3zC,OACZje,UAAU,sBACVC,QAAS,IAAM6wE,EAAuBlf,IAEtC,mBAAC7zC,GAAA,EAAD,CACEE,OAAQ2zC,EAAO3zC,OACfD,OAAQ+yD,EAAgBnf,GACxBh5B,eAAa,cCoC7B,IAAej4B,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MAGF,CAAE0B,MAFIpB,EAAAA,EAAAA,IAAWP,EAAQC,MAFhBF,EA9HwC,EAAG4B,KAAAA,EAAMiI,QAAAA,EAASoT,SAAAA,MAC5E,MAAM/b,GAAOC,EAAAA,EAAAA,MAEbic,EAAAA,EAAAA,IAAeH,EAAUpT,GAEzB,MAAM4hE,GAAetoE,EAAAA,EAAAA,KAAQ,IACtBvB,GAASA,EAAKo6B,UAAap6B,EAAKo6B,SAASyvC,aAIvC7pE,EAAKo6B,SAASyvC,aAAa33C,MAAK,CAACC,EAAGC,IACrCD,EAAE+5C,SACI,EACC95C,EAAE85C,QACJ,EAGF,IAVA,IAYR,CAAClsE,IAEEywE,GAAkBpxE,EAAAA,EAAAA,KAAaiyD,GAC/BA,EAAO4a,QACF5sE,EAAK,kBAGPA,EAAK,iBACX,CAACA,IAEJ,OACE,0BAAKI,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,0BAA0BO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GACjE,yBAAInC,UAAU,kBAAkBO,IAAI,QAApC,WAEA,0BAAKP,UAAU,yBACb,mBAAC8iC,GAAA,EAAD,CACE3mB,KAAK,aACL4mB,SAAS,EACTzY,MAAO1qB,EAAK,qBACZuN,cAAUhL,KAGd,0BAAKnC,UAAU,yBACb,mBAAC8iC,GAAA,EAAD,CACE3mB,KAAK,aACL4mB,SAAS,EACTzY,MAAO1qB,EAAK,2BACZuN,cAAUhL,KAGd,0BAAKnC,UAAU,yBACb,mBAAC8iC,GAAA,EAAD,CACE3mB,KAAK,aACL4mB,SAAS,EACTzY,MAAO1qB,EAAK,4BACZuN,cAAUhL,KAGd,0BAAKnC,UAAU,yBACb,mBAAC8iC,GAAA,EAAD,CACE3mB,KAAK,aACL4mB,SAAS,EACTzY,MAAO1qB,EAAK,6BACZuN,cAAUhL,KAGd,0BAAKnC,UAAU,yBACb,mBAAC8iC,GAAA,EAAD,CACE3mB,KAAK,aACL4mB,SAAS,EACTzY,MAAO1qB,EAAK,iCACZuN,cAAUhL,KAGd,0BAAKnC,UAAU,yBACb,mBAAC8iC,GAAA,EAAD,CACE3mB,KAAK,aACL4mB,SAAS,EACTzY,MAAO1qB,EAAK,gCACZuN,cAAUhL,KAGd,0BAAKnC,UAAU,yBACb,mBAAC8iC,GAAA,EAAD,CACE3mB,KAAK,aACL4mB,SAAS,EACTzY,MAAO1qB,EAAK,gCACZuN,cAAUhL,MAKhB,0BAAKnC,UAAU,0BAA0BO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GACjE,yBAAInC,UAAU,kBAAkBO,IAAI,QAAQX,EAAK,6BAEjD,0BAAKI,UAAU,yBACb,mBAAC8iC,GAAA,EAAD,CACE3mB,KAAK,aACL4mB,SAAS,EACTzY,MAAO1qB,EAAK,qBACZuN,cAAUhL,KAIbgoE,EAAatsD,KAAK+zC,GACjB,mBAAC9zC,GAAA,EAAD,CACE3d,IAAKyxD,EAAO3zC,OACZje,UAAU,uCACVC,aAASkC,EACT0F,QAAM,GAEN,mBAACi7B,GAAA,EAAD,CAAUxY,MAAM,GAAGyY,SAAS,IAC5B,mBAAChlB,GAAA,EAAD,CACEE,OAAQ2zC,EAAO3zC,OACfD,OAAQ+yD,EAAgBnf,GACxBh5B,eAAa,cCmM7B,IAAej4B,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,EAAQwxE,wBAAAA,MACjB,MAAM9vE,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,IACxByf,KAAM+P,GAAczvB,EAAO0vB,OAC7B,cAAEjS,GAAkBzd,EAI1B,MAAO,CACL2B,KAAAA,EACA8tB,UAAAA,EACAhS,cAAAA,EACAmE,WAPgBoI,EAAAA,EAAAA,IAAcroB,GAQ9B+vE,sBAP4B/vE,EAAK+nE,WAAa+H,OAUlD,CAAC/wE,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,qBAhBpCZ,EAlSsD,EACxE4xE,qBAAAA,EACA74C,eAAAA,EACAn3B,KAAAA,EACA8tB,UAAAA,EACAhS,cAAAA,EACAmE,UAAAA,EACA8vD,oBAAAA,EACAY,gBAAAA,EACA1oE,QAAAA,EACAoT,SAAAA,MAEA,MAAO6uD,EAAaC,IAAkBnnE,EAAAA,EAAAA,IAA6B,KAC5Dq+B,EAAWuvC,IAAgB5tE,EAAAA,EAAAA,KAAS,IACpCqwB,EAAW2yC,IAAgBhjE,EAAAA,EAAAA,KAAS,IACpC6tE,EAAiCC,EAA+BC,IAAkCztD,EAAAA,GAAAA,MAClG0tD,EAAaC,IAAkBjuE,EAAAA,EAAAA,IAAS,IACzC1D,GAAOC,EAAAA,EAAAA,MAEbic,EAAAA,EAAAA,IAAeH,EAAUpT,GAEzB,MAAMmoE,GAAqB7uE,EAAAA,EAAAA,KAAQ,KACjC,GAAKvB,EAAKo6B,UAAap6B,EAAKo6B,SAASyvC,aAIrC,OAAO7pE,EAAKo6B,SAASyvC,aAAaxnC,MAAK,EAAG1kB,OAAAA,KAAaA,IAAWqyD,MACjE,CAAChwE,EAAMgwE,KAEV/sE,EAAAA,EAAAA,KAAU,KACJjD,MAAAA,GAAAA,EAAMo6B,UAAY41C,IAAyBI,GAC7Cj5C,EAAewxC,EAAAA,GAAAA,sBAEhB,CAAC3oE,EAAMm3B,EAAgBi5C,EAAoBJ,KAE9C/sE,EAAAA,EAAAA,KAAU,KACRknE,GAAgBiG,MAAAA,OAAD,EAACA,EAAoBc,cAAgB,IACpDD,IAAiBb,MAAAA,OAAD,EAACA,EAAoBY,cAAgB,IAAIn8B,OAAO,EAvCpC,KAwC5B+7B,GAAa,GACb5K,GAAa,KACZ,CAACoK,IAEJ,MAAM1F,GAAyBrrE,EAAAA,EAAAA,KAAayE,IAC1C,MAAM,KAAE+X,GAAS/X,EAAEiJ,OAMnBo9D,GAAgBrgC,IAAD,UACVA,EACH,CAACjuB,IANgClP,EAMCm9B,EAAEjuB,IAL7BlP,QAAQ9K,IADjB,IAAmC8K,KAQnCikE,GAAa,KACZ,IAEGhG,GAAwBvrE,EAAAA,EAAAA,KAAY,KACnC2wE,IAILhK,GAAa,GACb2K,EAAgB,CACdryE,OAAQ0B,EAAKlD,GACb6gB,OAAQqyD,EACRkB,YAAahH,EACb8G,YAAAA,OAED,CAAChxE,EAAMgwE,EAAsB9F,EAAa8G,EAAaL,IAEpDQ,GAAqB9xE,EAAAA,EAAAA,KAAY,KAChC2wE,IAILW,EAAgB,CACdryE,OAAQ0B,EAAKlD,GACb6gB,OAAQqyD,EACRkB,YAAa,KAEfH,OACC,CAAC/wE,EAAKlD,GAAIi0E,EAAgCf,EAAsBW,IAE7DJ,GAAuBlxE,EAAAA,EAAAA,KAAaQ,MACpC0nB,EAAAA,EAAAA,IAAiBvnB,KAIjB+vE,GAAwB/vE,EAAKkxE,aAIzBlxE,EAAKkxE,YAAarxE,KACzB,CAACG,EAAM+vE,IAEJqB,GAAe7vE,EAAAA,EAAAA,KAAQ,KAC3B,IAAK6uE,EACH,OAGF,GAAIA,EAAmBlE,QACrB,OAAO5sE,EAAK,kBAGd,MAAMoxE,EAAiBN,EAAmB3F,iBACtC38C,EAAUsiD,EAAmB3F,uBAC7B5oE,EAEJ,OAAI6uE,EACKpxE,EAAK,uBAAuBwyB,EAAAA,EAAAA,IAAgB4+C,IAG9CpxE,EAAK,kBACX,CAAC8wE,EAAoBtiD,EAAWxuB,IAE7B+xE,GAA0BhyE,EAAAA,EAAAA,KAAayE,IAC3C,MAAM,MAAE6I,GAAU7I,EAAEiJ,OACpBkkE,EAAetkE,GACfikE,GAAa,KACZ,IAEH,GAAKR,EAIL,OACE,0BAAK1wE,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAAC8d,GAAA,EAAD,CAAU0jB,UAAQ,EAACxhC,UAAU,uBAC3B,mBAAC+d,GAAA,EAAD,CACEE,OAAQyyD,EAAmBzyD,OAC3BD,OAAQ0zD,EACR94C,eAAa,KAIjB,yBAAI54B,UAAU,uBAAuBO,IAAI,QAAQX,EAAK,uBAEtD,0BAAKI,UAAU,yBACb,mBAAC8iC,GAAA,EAAD,CACE3mB,KAAK,aACL4mB,UAAWynC,EAAY2B,WACvB7hD,MAAO1qB,EAAK2gB,EAAY,6BAA+B,4BACvDsrD,UAAQ,EACR9+D,SAAU8jE,EAAqB,cAC/B1jE,SAAU69D,KAGbzqD,GACC,0BAAKvgB,UAAU,yBACb,mBAAC8iC,GAAA,EAAD,CACE3mB,KAAK,eACL4mB,UAAWynC,EAAYoH,aACvBtnD,MAAO1qB,EAAK,yBACZisE,UAAQ,EACR9+D,SAAU8jE,EAAqB,gBAC/B1jE,SAAU69D,KAIfzqD,GACC,0BAAKvgB,UAAU,yBACb,mBAAC8iC,GAAA,EAAD,CACE3mB,KAAK,eACL4mB,UAAWynC,EAAYqH,aACvBvnD,MAAO1qB,EAAK,yBACZisE,UAAQ,EACR9+D,SAAU8jE,EAAqB,gBAC/B1jE,SAAU69D,KAIhB,0BAAKhrE,UAAU,yBACb,mBAAC8iC,GAAA,EAAD,CACE3mB,KAAK,iBACL4mB,UAAWynC,EAAYviD,eACvBqC,MAAO1qB,EAAK2gB,EAAY,0BAA4B,gCACpDsrD,UAAQ,EACR9+D,SAAU8jE,EAAqB,kBAC/B1jE,SAAU69D,MAGZzqD,GACA,0BAAKvgB,UAAU,yBACb,mBAAC8iC,GAAA,EAAD,CACE3mB,KAAK,WACL4mB,UAAWynC,EAAYsH,SACvBxnD,MAAO1qB,EAAK,qBACZisE,UAAQ,EACR9+D,SAAU8jE,EAAqB,YAC/B1jE,SAAU69D,KAIhB,0BAAKhrE,UAAU,yBACb,mBAAC8iC,GAAA,EAAD,CACE3mB,KAAK,cACL4mB,UAAWynC,EAAYyB,YACvB3hD,MAAO1qB,EAAK,qBACZisE,UAAQ,EACR9+D,SAAU8jE,EAAqB,eAC/B1jE,SAAU69D,MAGZzqD,GACA,0BAAKvgB,UAAU,yBACb,mBAAC8iC,GAAA,EAAD,CACE3mB,KAAK,cACL4mB,UAAWynC,EAAY0B,YACvB5hD,MAAO1qB,EAAK,wBACZisE,UAAQ,EACR9+D,SAAU8jE,EAAqB,eAC/B1jE,SAAU69D,KAIhB,0BAAKhrE,UAAU,yBACb,mBAAC8iC,GAAA,EAAD,CACE3mB,KAAK,YACL4mB,UAAWynC,EAAYuH,UACvBznD,MAAO1qB,EAAK,sBACZisE,UAAQ,EACR9+D,SAAU8jE,EAAqB,aAC/B1jE,SAAU69D,MAGZzqD,GACA,0BAAKvgB,UAAU,yBACb,mBAAC8iC,GAAA,EAAD,CACE3mB,KAAK,YACL4mB,UAAWynC,EAAYwH,UACvB1nD,MAAO1qB,EAAK,4BACZisE,UAAQ,EACR9+D,SAAU8jE,EAAqB,aAC/B1jE,SAAU69D,KAKfqF,GACC,wBAAGrwE,UAAU,oBAAoBO,IAAI,QAClCX,EAAK,kCAIR2gB,GACA,mBAACnD,GAAA,EAAD,CACEhgB,GAAG,cACHktB,MAAO1qB,EAAK,iBACZuN,SAAUwkE,EACV1kE,MAAOqkE,EACPvkE,SAAUsjE,EACV4B,UA/PkB,KAmQrB71D,IAAkBk0D,IAAyBD,GAC1C,mBAACvyD,GAAA,EAAD,CAAUpb,KAAK,SAASmF,QAAM,EAAC0kB,aAAW,EAACtsB,QAASmxE,GACjDxxE,EAAK,2BAMd,mBAAC48B,GAAA,EAAD,CACEhwB,QAASm1B,EACT1hC,QAASirE,EACT9oE,UAAWxC,EAAK,QAChBmN,SAAU4mB,GAETA,EACC,mBAAC9iB,EAAA,EAAD,CAAS3O,MAAM,UAEf,wBAAGlC,UAAU,gBAIjB,mBAACwhB,GAAA,EAAD,CACEzf,OAAQovE,EACR5oE,QAAS8oE,EACTpuE,KAAK,+CACLwe,aAAa,UACbC,eAAgB+vD,EAChBl5C,sBAAoB,SCvP5B,IAAe53B,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MAAyB,MAClC,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,IACxByf,KAAM+P,GAAczvB,EAAO0vB,MAInC,MAAO,CACLk9C,QAJcjrE,MAAAA,GAAH,UAAGA,EAAMo6B,gBAAT,aAAG,EAAgB6wC,QAK9Bn9C,UAAAA,EACA7N,UALgBjgB,IAAQqoB,EAAAA,EAAAA,IAAcroB,GAMtCy/C,iBAAkBphD,EAAOohD,qBAG7B,CAAC1gD,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,kBAfgBZ,EAnDkD,EACpE6sE,QAAAA,EACAn9C,UAAAA,EACA7N,UAAAA,EACA2xD,aAAAA,EACA3pE,QAAAA,EACAoT,SAAAA,EACAokC,iBAAAA,MAEA,MAAMc,GAAYh/C,EAAAA,EAAAA,KAAQ,KACxB,GAAK0pE,GAAYn9C,EAIjB,OAAO6xB,EAAAA,EAAAA,IAAYsrB,EAAQ1tD,KAAI,EAAGI,OAAAA,KAAaA,IAASmQ,OAAWjsB,EAAW49C,KAC7E,CAACwrB,EAASxrB,EAAkB3xB,IAEzBu4C,GAAoBhnE,EAAAA,EAAAA,KAAavC,IACrC80E,EAAa,CAAE90E,GAAAA,MACd,CAAC80E,IAIJ,OAFAp2D,EAAAA,EAAAA,IAAeH,EAAUpT,GAGvB,0BAAKvI,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,UAAU6vE,eAAa,GACnChvB,EACCA,EAAUhjC,KAAI,CAACzgB,EAAIioB,IACjB,mBAACvH,GAAA,EAAD,CACE3d,IAAK/C,EACL0yE,cAAezqD,EACfrlB,UAAU,kCACVC,QAAS,IAAM0mE,EAAkBvpE,IAEjC,mBAAC2gB,GAAA,EAAD,CAAiBE,OAAQ7gB,EAAIw7B,eAAa,OAI9C,mBAAC5F,GAAA,EAAD,CACE88C,cAAe,EACf3vE,IAAI,gBACJ8C,KAAMsd,EAAY,uBAAyB,4BCczD,IAAe5f,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MAAyB,MAClC,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,IACxByf,KAAM+P,GAAczvB,EAAO0vB,MAInC,MAAO,CACLk9C,QAJcjrE,MAAAA,GAAH,UAAGA,EAAMo6B,gBAAT,aAAG,EAAgB6wC,QAK9Bn9C,UAAAA,EACA7N,UALgBjgB,IAAQqoB,EAAAA,EAAAA,IAAcroB,GAMtCy/C,iBAAkBphD,EAAOohD,oBAXXrhD,EAxDgD,EAClE0vB,UAAAA,EACAm9C,QAAAA,EACAhrD,UAAAA,EACAkX,eAAAA,EACA6yC,mBAAAA,EACA/hE,QAAAA,EACAoT,SAAAA,EACAokC,iBAAAA,OAEAjkC,EAAAA,EAAAA,IAAeH,EAAUpT,GAEzB,MAAMs4C,GAAYh/C,EAAAA,EAAAA,KAAQ,KACxB,GAAK0pE,GAAYn9C,EAIjB,OAAO6xB,EAAAA,EAAAA,IACLsrB,EAAQhvD,QAAQq1C,IAAYA,EAAO4a,UAAS3uD,KAAI,EAAGI,OAAAA,KAAaA,IAChEmQ,OAAWjsB,EAAW49C,KAEvB,CAACwrB,EAASxrB,EAAkB3xB,IAEzB08C,GAA6BnrE,EAAAA,EAAAA,KAAawyE,IAC9C7H,EAAmB6H,GACnB16C,EAAewxC,EAAAA,GAAAA,wBACd,CAACqB,EAAoB7yC,IAExB,OACE,0BAAKz3B,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,UAAU6vE,eAAa,GACnChvB,EACCA,EAAUhjC,KAAI,CAACzgB,EAAIioB,IACjB,mBAACvH,GAAA,EAAD,CACE3d,IAAK/C,EACL0yE,cAAezqD,EACfrlB,UAAU,kCACVC,QAAS,IAAM6qE,EAA2B1tE,IAE1C,mBAAC2gB,GAAA,EAAD,CAAiBE,OAAQ7gB,EAAIw7B,eAAa,OAI9C,mBAAC5F,GAAA,EAAD,CACE88C,cAAe,EACf3vE,IAAI,gBACJ8C,KAAMsd,EAAY,uBAAyB,4BC4IzD,IAAe5f,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IAGQ,CACLyzE,gBAHqBC,EAAAA,EAAAA,IAA4B1zE,MAFnCD,EAtL0B,EAC5CE,OAAAA,EACAw4B,cAAAA,EACAk5C,qBAAAA,EACAF,wBAAAA,EACA34C,eAAAA,EACA6yC,mBAAAA,EACA/hE,QAAAA,EACAoT,SAAAA,EACAy2D,eAAAA,MAEA,OAAQh7C,GACN,KAAK6xC,EAAAA,GAAAA,QACH,OAAQmJ,GACN,IAAK,OACH,OACE,mBAAC,GAAD,CACEjyE,IAAKvB,EACLqf,OAAQrf,EACR2J,QAASA,EACToT,SAAUA,IAGhB,IAAK,QACH,OACE,mBAAC,GAAD,CACExb,IAAKvB,EACLA,OAAQA,EACR64B,eAAgBA,EAChBlvB,QAASA,EACToT,SAAUA,GAAY,CACpBstD,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,WACAA,EAAAA,GAAAA,iBACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,kBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,oBACA5rE,SAAS+5B,KAGjB,IAAK,UACH,OACE,mBAAC,GAAD,CACEj3B,IAAKvB,EACLA,OAAQA,EACR64B,eAAgBA,EAChBlvB,QAASA,EACToT,SAAUA,GAAY,CACpBstD,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,WACAA,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,oBACA5rE,SAAS+5B,KAKnB,MAGF,KAAK6xC,EAAAA,GAAAA,gBACH,OACE,mBAAC,GAAD,CACErqE,OAAQA,EACR+c,SAAUA,EACVpT,QAASA,IAIf,KAAK0gE,EAAAA,GAAAA,WACH,OACE,mBAAC,GAAD,CACErqE,OAAQA,EACR64B,eAAgBA,EAChB9b,SAAUA,EACVpT,QAASA,IAIf,KAAK0gE,EAAAA,GAAAA,iBACH,OACE,mBAAC,GAAD,CACErqE,OAAQA,EACR64B,eAAgBA,EAChB6yC,mBAAoBA,EACpB3uD,SAAUA,GAAY,CACpBstD,EAAAA,GAAAA,kBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,sBACA5rE,SAAS+5B,GACX7uB,QAASA,IAIf,KAAK0gE,EAAAA,GAAAA,kBACH,OACE,mBAAC,GAAD,CACErqE,OAAQA,EACR+c,SAAUA,EACVpT,QAASA,IAIf,KAAK0gE,EAAAA,GAAAA,2BACH,OACE,mBAAC,GAAD,CACErqE,OAAQA,EACR0rE,mBAAoBA,EACpB7yC,eAAgBA,EAChB9b,SAAUA,GAAY,CACpBstD,EAAAA,GAAAA,sBACA5rE,SAAS+5B,GACX7uB,QAASA,IAIf,KAAK0gE,EAAAA,GAAAA,qBACH,OACE,mBAAC,GAAD,CACErqE,OAAQA,EACR0xE,qBAAsBA,EACtBF,wBAAyBA,EACzB34C,eAAgBA,EAChB9b,SAAUA,EACVpT,QAASA,IAIf,KAAK0gE,EAAAA,GAAAA,mBACH,OACE,mBAAC,GAAD,CACErqE,OAAQA,EACR64B,eAAgBA,EAChB6yC,mBAAoBA,EACpB3uD,SAAUA,GAAY,CACpBstD,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,oBACA5rE,SAAS+5B,GACX7uB,QAASA,IAIf,KAAK0gE,EAAAA,GAAAA,mBACH,OACE,mBAAC,GAAD,CACErqE,OAAQA,EACR+c,SAAUA,EACVpT,QAASA,IAIf,KAAK0gE,EAAAA,GAAAA,gBACH,OACE,mBAAC,GAAD,CACErqE,OAAQA,EACR0xE,qBAAsBA,EACtBF,wBAAyBA,EACzB34C,eAAgBA,EAChB9b,SAAUA,EACVpT,QAASA,IAIf,KAAK0gE,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,aACH,OACE,mBAAC,GAAD,CACErqE,OAAQA,EACR+c,SAAUA,EACVpT,QAASA,S,eClNnB,MAAM+pE,GAAO,8BACPC,GAAc,uBACdC,GAAc,uBAEb,IAAKC,I,SAAAA,GAAAA,EAAAA,EAAAA,QAAAA,GAAAA,UAAAA,EAAAA,EAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,WAAAA,GAAAA,a,CAAAA,KAAAA,GAAAA,KAMZ,MAAMC,GAAgC,CACpC,CAACD,GAASE,SAAU,GACpB,CAACF,GAASG,MAAO,OACjB,CAACH,GAASI,YAAa,cAGlB,SAASC,GAAeC,GAE7B,OADAA,EAAaA,EAAWptD,QAAQ,MAAO,IACnC2sD,GAAK34C,KAAKo5C,GACLN,GAASG,KAEdL,GAAY54C,KAAKo5C,IAAeP,GAAY74C,KAAKo5C,GAC5CN,GAASI,WAEXJ,GAASE,QCvBlB,MA0OMK,GAAuC,GAChCC,GAA2B,oDAoCxC,GA/Qc,+8JA8OX1gD,MAAM,MACN1U,KAAKq1D,IAQG,CACL91E,GARS81E,EAAI/9B,OAAO,EAAG,GAQnBg+B,KAPOD,EAAI/9B,OAAO,EAAG,GAOfvuB,KANE,IAAGssD,EAAI/iD,MAAM,OAAQ,KAMjBhU,KALL+2D,EAAI3gD,MAAM,OAAO,GAKN6gD,YAI5B,SAA8BC,GAC5B,IAAKA,EACH,OAAOJ,GAGT,MAAMK,EAAcD,EAAO,GAC3B,IAAIE,EAEJ,IAAKP,GAAaM,GAAc,CAC9B,MAAME,EAAoBF,EAAY/gD,MAAM,IAAI1U,IAAIzQ,QACpDmmE,EAAoBC,EAAkB/8B,QAAO,CAACC,EAAQ5X,EAAOzZ,IACnD,GAAEqxB,WAAgB5X,MAAUzZ,EAAI,EAAI,IAAM,MACjD,IACH2tD,GAAaM,GAAe,IAAIG,OAAQ,GAAEF,IAAoB,MAAMG,OAAO,EAAIF,EAAkBl1E,WAGnG,OAAO00E,GAAaM,GAvBEK,CADLT,EAAI/iD,MAAM,aCpNvBwG,GAA2B,CAC/Bi9C,YAAa,GACbC,YAAa,GACbC,KAAM,GACN78C,MAAO,GACP88C,YAAa,GACbC,SAAU,GACV7hD,SAAU,GACV4E,MAAO,GACPk9C,MAAO,GACPC,SAAU,GACVnB,WAAY,GACZoB,WAAY,GACZC,OAAQ,GACRC,IAAK,GACLC,eAAgB,GAChBC,WAAY,GACZC,UAAU,EACVC,iBAAiB,EACjBC,WAAY,IAGRC,GAAgD,CAAC19C,EAAOC,KAC5D,OAAQA,EAAOhqB,MACb,IAAK,iBACH,MAAO,IACF+pB,EACH28C,YAAa18C,EAAOC,QACpBu9C,WAAY,IACPz9C,EAAMy9C,WACTd,iBAAazxE,IAGnB,IAAK,iBACH,MAAO,IACF80B,EACH48C,YAAa38C,EAAOC,QACpBu9C,WAAY,IACPz9C,EAAMy9C,WACTb,iBAAa1xE,IAGnB,IAAK,aACH,MAAO,IACF80B,EACH68C,KAAM58C,EAAOC,QACbu9C,WAAY,IACPz9C,EAAMy9C,WACTZ,UAAM3xE,IAGZ,IAAK,cACH,MAAO,IACF80B,EACHA,MAAOC,EAAOC,QACdu9C,WAAY,IACPz9C,EAAMy9C,WACTz9C,WAAO90B,IAGb,IAAK,gBACH,MAAO,IACF80B,EACH88C,YAAa78C,EAAOC,QACpBm9C,eAAgBM,GAAkB19C,EAAOC,SACzCu9C,WAAY,IACPz9C,EAAMy9C,WACTX,iBAAa5xE,IAGnB,IAAK,iBACH,MAAO,IACF80B,EACH+8C,SAAU98C,EAAOC,QACjBu9C,WAAY,IACPz9C,EAAMy9C,WACTV,cAAU7xE,IAGhB,IAAK,iBACH,MAAO,IACF80B,EACH9E,SAAU+E,EAAOC,QACjBu9C,WAAY,IACPz9C,EAAMy9C,WACTviD,cAAUhwB,IAGhB,IAAK,cACH,MAAO,IACF80B,EACHF,MAAOG,EAAOC,QACdu9C,WAAY,IACPz9C,EAAMy9C,WACT39C,WAAO50B,IAGb,IAAK,cACH,MAAO,IACF80B,EACHg9C,MAAO/8C,EAAOC,QACdu9C,WAAY,IACPz9C,EAAMy9C,WACTT,WAAO9xE,IAGb,IAAK,iBACH,MAAO,IAAK80B,EAAOi9C,SAAUh9C,EAAOC,SACtC,IAAK,mBACH,MAAO,IACFF,EACH87C,WAAY77C,EAAOC,QACnBu9C,WAAY,IACPz9C,EAAMy9C,WACT3B,gBAAY5wE,IAGlB,IAAK,mBACH,MAAO,IACF80B,EACHk9C,WAAYj9C,EAAOC,QACnBu9C,WAAY,IACPz9C,EAAMy9C,WACTP,gBAAYhyE,IAGlB,IAAK,mBACH,MAAO,IACF80B,EACHm9C,OAAQl9C,EAAOC,QACfu9C,WAAY,IACPz9C,EAAMy9C,WACTN,YAAQjyE,IAGd,IAAK,gBACH,MAAO,IACF80B,EACHo9C,IAAKn9C,EAAOC,QACZu9C,WAAY,IACPz9C,EAAMy9C,WACTL,SAAKlyE,IAGX,IAAK,uBACH,MAAO,IACF80B,EACHq9C,eAAgBp9C,EAAOC,QACvBu9C,WAAY,IACPz9C,EAAMy9C,WACTJ,oBAAgBnyE,IAGtB,IAAK,mBACH,MAAO,IACF80B,EACHs9C,WAAYr9C,EAAOC,QACnBu9C,WAAY,IACPz9C,EAAMy9C,WACTH,gBAAYpyE,IAGlB,IAAK,iBACH,MAAO,IAAK80B,EAAOu9C,SAAUt9C,EAAOC,SACtC,IAAK,wBACH,MAAO,IAAKF,EAAOw9C,gBAAiBv9C,EAAOC,SAC7C,IAAK,iBACH,OAAID,EAAOC,QAAQ48C,YACV,IACF98C,KACAC,EAAOC,QACVm9C,eAAgBM,GAAkB19C,EAAOC,QAAQ48C,cAG9C,IAAK98C,KAAUC,EAAOC,SAC/B,IAAK,gBACH,MAAO,IACFF,EACHy9C,WAAY,IACPz9C,EAAMy9C,cACNx9C,EAAOC,UAGhB,QACE,OAAOF,IAIb,SAAS29C,GAAkBC,GACzB,MAAM59B,EAAUsC,GAAAA,MAAiB,EAAGn8C,GAAAA,KAASA,IAAOy3E,IACpD,OAAO59B,EAAUA,EAAQ96B,KAAO,GCvNnB,SAAS24D,GACtBntE,EAAkCotE,EAHX,MAKvBxxE,EAAAA,EAAAA,KAAU,KACJmF,EAAAA,IAIJvC,YAAW,MACTi6D,EAAAA,EAAAA,KAAQ,KACFz4D,EAAInB,SACNmB,EAAInB,QAAQ47B,aAGf2yC,KACF,CAACptE,EAAKotE,ICNX,MAyCA,IAAep0E,EAAAA,EAAAA,KAzCe0yB,IAC5B,MAAM,GACJj2B,EADI,MAEJ6P,EAFI,MAGJqd,EAHI,SAIJ0qD,EAJI,MAKJp1D,EALI,IAMJjY,EANI,YAOJ2V,EAPI,SAQJnQ,EARI,SASJQ,GACE0lB,EACE4hD,EAAYr1D,GAAS0K,EACrB8zC,GAAgBj6D,EAAAA,EAAAA,GACpB,cACA8I,GAAS,UACT2S,GAAS,QACTq1D,GAAa,aACbD,GAAY,aACZ,eAGF,OACE,0BAAKh1E,UAAWo+D,GACd,6BACEp+D,UAAU,eACV5C,GAAIA,EACJ6P,MAAOA,GAAS,GAChBE,SAAUA,EACVmQ,YAAaA,GAAegN,EAC5B3iB,IAAKA,GAEJgG,GAEFsnE,GAAa73E,GACZ,4BAAO83E,QAAS93E,GAAK63E,OCsJ7B,IAAet0E,EAAAA,EAAAA,KAlLoB,EACjCs2B,MAAAA,EACAk+C,UAAAA,EACAC,UAAAA,EACAC,SAAAA,EACAC,YAAAA,EACAj2C,SAAAA,MAGA,MAAMzyB,GAAW5G,EAAAA,EAAAA,IAAyB,MAEpCuvE,GAAWvvE,EAAAA,EAAAA,IAAyB,MAEpCwvE,GAAmBxvE,EAAAA,EAAAA,IAA0B,OAEnDzC,EAAAA,EAAAA,KAAU,KACJiyE,EAAiBhvE,SAChBgvE,EAAiBhvE,QAAQyG,QAAUgqB,EAAM88C,cAC5CyB,EAAiBhvE,QAAQyG,MAAQgqB,EAAM88C,eAExC,CAAC98C,EAAM88C,cAEV,MAAMn0E,GAAOC,EAAAA,EAAAA,KAEbi1E,GAAuBloE,GAEvB,MAAM6oE,GAAuB91E,EAAAA,EAAAA,KAAayE,IACxCi7B,EAAS,CAAEnyB,KAAM,iBAAkBiqB,QAAS/yB,EAAEiJ,OAAOJ,UACpD,CAACoyB,IAEEq2C,GAAuB/1E,EAAAA,EAAAA,KAAayE,IACxCi7B,EAAS,CAAEnyB,KAAM,iBAAkBiqB,QAAS/yB,EAAEiJ,OAAOJ,UACpD,CAACoyB,IAEEs2C,GAAmBh2E,EAAAA,EAAAA,KAAayE,IACpCi7B,EAAS,CAAEnyB,KAAM,aAAciqB,QAAS/yB,EAAEiJ,OAAOJ,UAChD,CAACoyB,IAEEu2C,GAAoBj2E,EAAAA,EAAAA,KAAayE,IACrCi7B,EAAS,CAAEnyB,KAAM,cAAeiqB,QAAS/yB,EAAEiJ,OAAOJ,UACjD,CAACoyB,IAEEw2C,GAAsBl2E,EAAAA,EAAAA,KAAayE,IACvCi7B,EAAS,CAAEnyB,KAAM,gBAAiBiqB,QAAS/yB,EAAEiJ,OAAOJ,UACnD,CAACoyB,IAEEy2C,GAAuBn2E,EAAAA,EAAAA,KAAayE,IACxCi7B,EAAS,CAAEnyB,KAAM,iBAAkBiqB,QAAS/yB,EAAEiJ,OAAOJ,UACpD,CAACoyB,IAEE02C,GAAuBp2E,EAAAA,EAAAA,KAAayE,IACxCi7B,EAAS,CAAEnyB,KAAM,iBAAkBiqB,QAAS/yB,EAAEiJ,OAAOJ,UACpD,CAACoyB,IAEE22C,GAAoBr2E,EAAAA,EAAAA,KAAayE,IACrCi7B,EAAS,CAAEnyB,KAAM,cAAeiqB,QAAS/yB,EAAEiJ,OAAOJ,UACjD,CAACoyB,IAEE42C,GAAoBt2E,EAAAA,EAAAA,KAAayE,IACrC,IAAI,MAAE6I,GAAU7I,EAAEiJ,OAClBJ,EAAS,IAAGA,EAAM0Y,QAAQ,MAAO,MAC7B4vD,EAAS/uE,UACX+uE,EAAS/uE,QAAQyG,MAAQA,GAE3BoyB,EAAS,CAAEnyB,KAAM,cAAeiqB,QAASlqB,MACxC,CAACoyB,IAEE62C,GAAuBv2E,EAAAA,EAAAA,KAAayE,IACxCi7B,EAAS,CAAEnyB,KAAM,iBAAkBiqB,QAAS/yB,EAAEiJ,OAAOJ,UACpD,CAACoyB,KAEE,WAAEq1C,GAAez9C,EACvB,OACE,0BAAKj3B,UAAU,gBACb,+BACGs1E,EACC,8BACE,6BAAK11E,EAAK,2BACV,mBAACwd,GAAA,EAAD,CACEzV,IAAKiF,EACL0d,MAAM,oBACNnd,SAAUsoE,EACVxoE,MAAOgqB,EAAM28C,YACbptD,UAAU,OACV5G,MAAO80D,EAAWd,cAEpB,mBAACx2D,GAAA,EAAD,CACEkN,MAAM,oBACNnd,SAAUuoE,EACVzoE,MAAOgqB,EAAM48C,YACbrtD,UAAU,OACV5G,MAAO80D,EAAWb,cAEpB,mBAACz2D,GAAA,EAAD,CACEkN,MAAM,OACNnd,SAAUwoE,EACV1oE,MAAOgqB,EAAM68C,KACbttD,UAAU,OACV5G,MAAO80D,EAAWZ,OAEpB,mBAAC12D,GAAA,EAAD,CACEkN,MAAM,QACNnd,SAAUyoE,EACV3oE,MAAOgqB,EAAMA,MACbzQ,UAAU,OACV5G,MAAO80D,EAAWz9C,QAEpB,mBAAC,GAAD,CACE3M,MAAM,UACNhN,YAAY,UACZnQ,SAAU0oE,EACV5oE,MAAOgqB,EAAM88C,YACbiB,SAAU7rE,SAAQ,GAClB/L,GAAG,mBACHwiB,MAAO80D,EAAWX,YAClBpsE,IAAK6tE,GAEJj8B,GAAAA,KAAgB,EAAGp9B,KAAAA,EAAM/e,GAAAA,KACxB,6BACE6P,MAAO7P,EACP4C,UAAU,eAETmc,MAKP,mBAACiB,GAAA,EAAD,CACEkN,MAAM,YACNnd,SAAU2oE,EACV7oE,MAAOgqB,EAAM+8C,SACbxtD,UAAU,OACV5G,MAAO80D,EAAWV,iBAGpB7xE,EACFkzE,GAAYF,GAAaC,EACzB,6BAAKx1E,EAAK,iCACRuC,EACFkzE,GACA,mBAACj4D,GAAA,EAAD,CACEkN,MAAM,YACNnd,SAAU4oE,EACV9oE,MAAOgqB,EAAM9E,SACb3L,UAAU,OACV5G,MAAO80D,EAAWviD,WAGpBgjD,GACA,mBAAC/3D,GAAA,EAAD,CACEkN,MAAM,QACNnd,SAAU6oE,EACV/oE,MAAOgqB,EAAMF,MACbvQ,UAAU,QACV5G,MAAO80D,EAAW39C,QAGpBq+C,GACA,mBAACh4D,GAAA,EAAD,CACEkN,MAAM,eACNnd,SAAU8oE,EACVhpE,MAAOgqB,EAAMg9C,MACbztD,UAAU,MACV5G,MAAO80D,EAAWT,MAClBtsE,IAAK4tE,IAGT,mBAACzyC,GAAA,EAAD,CACExY,MAAO1qB,EAAK,uBACZ2nC,SAAU3nC,EAAK,2BACfmjC,QAAS55B,QAAQ8tB,EAAMu9C,UACvBrnE,SAAU+oE,SCtIpB,IAAev1E,EAAAA,EAAAA,KAxCgB,EAC7Bs2B,MAAAA,EACAk/C,gBAAAA,EACAC,SAAAA,EACA/2C,SAAAA,MAEA,MAAMz/B,GAAOC,EAAAA,EAAAA,MAEb0D,EAAAA,EAAAA,KAAU,KACH4yE,IAAmBl/C,EAAMi9C,UAG9B70C,EAAS,CAAEnyB,KAAM,iBAAkBiqB,QAASg/C,EAAgB,GAAG/4E,OAC9D,CAAC+4E,EAAiBl/C,EAAMi9C,SAAU70C,IAErC,MAAMg3C,GAAuB12E,EAAAA,EAAAA,KAAasN,IACxCoyB,EAAS,CAAEnyB,KAAM,iBAAkBiqB,QAASlqB,MAC3C,CAACoyB,IAEE7U,GAAU3oB,EAAAA,EAAAA,KAAQ,IAAOs0E,EAAgBt4D,KAAI,EAAGzgB,GAAI6P,EAAOoT,MAAOiK,EAAOgsD,OAAAA,MAA5B,CACjDhsD,MAAAA,EACAid,UAAUgvC,EAAAA,GAAAA,GAAeD,EAAQF,EAAUx2E,EAAKgnB,MAChD3Z,MAAAA,OACI,CAACkpE,EAAiBC,EAAUx2E,EAAKgnB,OAEvC,OACE,0BAAK5mB,UAAU,YACb,+BACE,sDACA,mBAACuqB,GAAA,EAAD,CACEpO,KAAK,mBACLqO,QAASA,EACTrd,SAAUkpE,EACV5rD,SAAUwM,EAAMi9C,gBC6B1B,SAASsC,GACP3hC,EAAgCx0B,EAAepT,EAAempE,EAAmBK,GAAO,GAExF,OACE,0BAAKz2E,UAAY,oBAAkBy2E,EAAO,uBAAyB,KACjE,0BAAKz2E,UAAU,SACXqgB,GAEJ,0BAAKrgB,UAAU,UACZu2E,EAAAA,GAAAA,GAAetpE,EAAOmpE,EAAUvhC,KAMzC,SAAS6hC,GAAmBh0E,EAAc2d,EAAe0d,GACvD,OACE,0BAAK/9B,UAAU,sBACb,wBAAGA,UAAW0C,GAAd,KACA,0BAAK1C,UAAU,QACb,0BAAKA,UAAU,SACXqgB,GAEJ,wBAAGrgB,UAAU,QACT+9B,KAOZ,UAAep9B,EAAAA,EAAAA,KAnFgB,EAC7Bg2E,eAAAA,EACAC,OAAAA,EACAC,eAAAA,EACAC,aAAAA,EACAV,SAAAA,EACAW,WAAAA,MAEA,MAAMn3E,GAAOC,EAAAA,EAAAA,MAEP,SAAEm3E,EAAF,MAAY32D,EAAZ,KAAmBpd,GAAS0zE,GAAkB,IAC9C,cACJM,EADI,gBAEJC,EAFI,gBAGJC,EAHI,KAIJh7D,EAJI,MAKJ83D,EALI,eAMJmD,GACGN,GAAgB,GAErB,OACE,0BAAK92E,UAAU,YACb,0BAAKA,UAAU,yBACZg3E,GAAY,0BAAK36E,IAAK26E,EAAUrmE,IAAI,KACrC,0BAAK3Q,UAAU,QACb,6BAAKqgB,GACL,4BAAIpd,KAGR,0BAAKjD,UAAU,cACX42E,GAAUA,EAAO/4D,KAAKmzC,GACtBwlB,GAAkB52E,EAAKgnB,KAAMoqC,EAAK1mC,MAAO0mC,EAAKslB,OAAQF,KAEtDS,GAAkBA,EAAeh5D,KAAKmzC,GACtCwlB,GAAkB52E,EAAKgnB,KAAMoqC,EAAK1mC,MAAO0mC,EAAKslB,OAAQF,UAEvCj0E,IAAf40E,GACAP,GAAkB52E,EAAKgnB,KAAMhnB,EAAK,wBAAyBm3E,EAAYX,GAAU,IAGrF,0BAAKp2E,UAAU,gBACZi3E,GAAiBP,GAAmB,YAAaO,EAAe,kBAChEC,GAAmBR,GAAmB,kBAAmBQ,EAAiB,oBAC1EC,GAAmBT,GAAmB,gBAAiBS,EAAiB,oBACxEh7D,GAAQu6D,GAAmB,YAAav6D,EAAM,QAC9C83D,GAASyC,GAAmB,aAAczC,EAAO,gBACjDmD,GAAkBV,GAAmB,aAAcU,EAAgB,wBC9B5E,IAAez2E,EAAAA,EAAAA,KA/BoB,EAAGsM,MAAAA,EAAO2S,MAAAA,EAAOzS,SAAAA,MAElD,MAAMkqE,GAAiBrxE,EAAAA,EAAAA,IAAyB,MAE1CmV,GAAgBxb,EAAAA,EAAAA,KAAayE,IACjC,GAAc,cAAVA,EAAEjE,KAA0D,MAAnC8M,EAAMqqE,OAAOrqE,EAAM3O,OAAS,GAAY,CACnE,MAAM09C,EAAW/uC,EAAMyoB,MAAM,EAAGzoB,EAAM3O,OAAS,GAC3C+4E,EAAe7wE,UACjB6wE,EAAe7wE,QAAQyG,MAAQ+uC,MAGlC,CAAC/uC,IAEE2nC,GAAej1C,EAAAA,EAAAA,KAAayE,IAChC+I,EC9BG,SAA0BqhD,GAE/B,MAAM+oB,GADN/oB,EAAQA,EAAM7oC,QAAQ,SAAU,IAAI+P,MAAM,EAAG,IACzBvF,MAAM,WAO1B,OANIonD,MAAAA,GAAAA,EAAQ,IAAMnqE,OAAOmqE,EAAM,IAAM,KACnCA,EAAM,GAAK,MAETA,MAAAA,GAAAA,EAAQ,IAA0B,IAApBA,EAAM,GAAGj5E,SAAiBi5E,EAAM,KAChDA,EAAM,GAAK,IAENA,EAAQA,EAAMjrE,KAAK,KAAO,GDqBtBkrE,CAAiBpzE,EAAEiJ,OAAOJ,UAClC,CAACE,IAEJ,OACE,mBAACiQ,GAAA,EAAD,CACEkN,MAAM,cACN3iB,IAAK0vE,EACLlqE,SAAUynC,EACVv3B,UAAWlC,EACXlO,MAAOA,EACP2S,MAAOA,EACP4G,UAAU,UACVyrD,UAlCmB,O,0BESzB,MAkDA,IAAetxE,EAAAA,EAAAA,KA1CkB,EAAGsM,MAAAA,EAAO2S,MAAAA,EAAOzS,SAAAA,MAEhD,MAAMsqE,GAAgBzxE,EAAAA,EAAAA,IAAyB,MAE/C8uE,GAAuB2C,GAEvB,MAAOC,EAAUC,IAAer0E,EAAAA,EAAAA,IAAiBmvE,GAASE,UAC1DpvE,EAAAA,EAAAA,KAAU,KACR,MAAMq0E,EAAc9E,GAAe7lE,GACnC0qE,EAAYC,KAEX,IAEH,MAAMhjC,GAAej1C,EAAAA,EAAAA,KAAayE,IAChC,MAAM43C,ED3BH,SAA0BwS,GAE/B,MAAM+oB,GADN/oB,EAAQA,EAAM7oC,QAAQ,SAAU,KACZwK,MAAM,WAC1B,OAAOonD,EAAQA,EAAMjrE,KAAK,KAAO,GCwBdurE,CAAiBzzE,EAAEiJ,OAAOJ,OACrC2qE,EAAc9E,GAAe1uE,EAAEiJ,OAAOJ,OAC5C0qE,EAAYC,GACZzqE,EAAS6uC,GACLy7B,EAAcjxE,UAChBixE,EAAcjxE,QAAQyG,MAAQ+uC,KAE/B,CAAC7uC,EAAUsqE,IAERK,EAqBR,SAAqBJ,GACnB,OAAQA,GACN,KAAKjF,GAASI,WACZ,OAAO,0BAAKx2E,IAAK07E,GAAoBpnE,IAAI,KAC3C,KAAK8hE,GAASG,KACZ,OAAO,0BAAKv2E,IAAK27E,GAAcrnE,IAAI,KACrC,QACE,QA5BasnE,CAAYP,GAE7B,OACE,0BAAK13E,UAAU,aACb,2BAAMA,UAAU,cAAc83E,GAC9B,mBAAC16D,GAAA,EAAD,CACEzV,IAAK8vE,EACLntD,MAAM,cACNnd,SAAUynC,EACV3nC,MAAOA,EACPuZ,UAAU,UACVxmB,UAAW03E,EAAW,iBAAmB,GACzC93D,MAAOA,EACPqyD,UA5CuB,SC0I/B,IAAetxE,EAAAA,EAAAA,KAlImB,EAChCs2B,MAAAA,EACAihD,mBAAAA,EACAC,mBAAAA,EACAC,YAAAA,EACAC,QAAAA,EACAh5C,SAAAA,MAGA,MAAMm2C,GAAmBxvE,EAAAA,EAAAA,IAA0B,OAEnDzC,EAAAA,EAAAA,KAAU,KACJiyE,EAAiBhvE,SAChBgvE,EAAiBhvE,QAAQyG,QAAUgqB,EAAMq9C,iBAC5CkB,EAAiBhvE,QAAQyG,MAAQgqB,EAAMq9C,kBAExC,CAACr9C,EAAMq9C,iBAEV,MAAMgE,GAAyB34E,EAAAA,EAAAA,KAAasN,IAC1CoyB,EAAS,CAAEnyB,KAAM,mBAAoBiqB,QAASlqB,MAC7C,CAACoyB,IAEEk5C,GAAyB54E,EAAAA,EAAAA,KAAayE,IAC1Ci7B,EAAS,CAAEnyB,KAAM,mBAAoBiqB,QAAS/yB,EAAEiJ,OAAOJ,MAAMurE,kBAC5D,CAACn5C,IAEEo5C,GAAqB94E,EAAAA,EAAAA,KAAasN,IACtCoyB,EAAS,CAAEnyB,KAAM,mBAAoBiqB,QAASlqB,MAC7C,CAACoyB,IAEEq5C,GAAkB/4E,EAAAA,EAAAA,KAAayE,IACnCi7B,EAAS,CAAEnyB,KAAM,gBAAiBiqB,QAAS/yB,EAAEiJ,OAAOJ,UACnD,CAACoyB,IAEEw2C,GAAsBl2E,EAAAA,EAAAA,KAAayE,IACvCi7B,EAAS,CAAEnyB,KAAM,uBAAwBiqB,QAAS/yB,EAAEiJ,OAAOJ,UAC1D,CAACoyB,IAEEs5C,GAA8Bh5E,EAAAA,EAAAA,KAAayE,IAC/Ci7B,EAAS,CAAEnyB,KAAM,mBAAoBiqB,QAAS/yB,EAAEiJ,OAAOJ,UACtD,CAACoyB,IAEEu5C,GAA8Bj5E,EAAAA,EAAAA,KAAayE,IAC/Ci7B,EAAS,CAAEnyB,KAAM,wBAAyBiqB,QAAS/yB,EAAEiJ,OAAOJ,UAC3D,CAACoyB,IAEEz/B,GAAOC,EAAAA,EAAAA,MAEP,WAAE60E,EAAa,IAAOz9C,EAE5B,OACE,0BAAKj3B,UAAU,eACb,+BACE,6BAAKJ,EAAK,qBACV,mBAAC,GAAD,CACEuN,SAAUmrE,EACVrrE,MAAOgqB,EAAM87C,WACbnzD,MAAO80D,EAAW3B,aAElBoF,GACA,mBAAC/6D,GAAA,EAAD,CACEkN,MAAM,eACNnd,SAAUorE,EACVtrE,MAAOgqB,EAAMk9C,WACb3tD,UAAU,OACV5G,MAAO80D,EAAWP,aAGtB,8BAASn0E,UAAU,iBACjB,mBAAC,GAAD,CACEiN,MAAOgqB,EAAMm9C,OACbjnE,SAAUsrE,EACV74D,MAAO80D,EAAWN,SAEpB,mBAACh3D,GAAA,EAAD,CACEkN,MAAM,WACNnd,SAAUurE,EACVzrE,MAAOgqB,EAAMo9C,IACb7tD,UAAU,UACVyrD,UAAW,EACXryD,MAAO80D,EAAWL,OAGpB+D,GAAeC,EACf,6BAAKz4E,EAAK,+BACRuC,EACFi2E,GACA,mBAAC,GAAD,CACE9tD,MAAM,UACNhN,YAAY,UACZnQ,SAAU0oE,EACV5oE,MAAOgqB,EAAMq9C,eACbU,SAAU7rE,SAAQ,GAClB/L,GAAG,kBACHwiB,MAAO80D,EAAWJ,eAClB3sE,IAAK6tE,GAGHj8B,GAAAA,KAAgB,EAAGp9B,KAAAA,KACjB,6BACElP,MAAOkP,EACPnc,UAAU,eAETmc,MAMTk8D,GACA,mBAACj7D,GAAA,EAAD,CACEkN,MAAM,YACNnd,SAAUwrE,EACV1rE,MAAOgqB,EAAMs9C,WACb/tD,UAAU,OACV5G,MAAO80D,EAAWH,aAGpB2D,GACA,mBAACp1C,GAAA,EAAD,CACExY,MAAO1qB,EAAK,qCACZmjC,QAAS9L,EAAMw9C,gBACftnE,SAAUyrE,SCyMtB,IAAej4E,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAM,KACJqO,EADI,gBAEJmpE,EAFI,UAGJ0C,EAHI,mBAIJX,EAJI,QAKJY,EALI,eAMJnC,EANI,eAOJoC,EAPI,aAQJC,EARI,gBASJC,EATI,MAUJr5D,GACEjhB,EAAOu6E,QAELC,EAAkBhwE,QAAQ2vE,KAAaC,GAlVxB,WAkV0CA,KACzD,mBAAEZ,EAAF,YAAsBC,EAAtB,QAAmCC,GAAaW,GAAgB,IAChE,cACJI,EADI,eAEJC,EAFI,eAGJC,EAHI,yBAIJC,EAJI,SAKJC,EALI,gBAMJC,EANI,gBAOJC,EAPI,SAQJtD,EARI,OASJQ,GACGkC,GAAW,GAEhB,MAAO,CACL9rE,KAAAA,EACAmpE,gBAAAA,EACA0C,UAAAA,EACAX,mBAAAA,EACAa,eAAAA,EACAE,gBAAAA,EACAG,cAAAA,EACAG,yBAAAA,EACAF,eAAAA,EACAC,eAAAA,EACAE,SAAAA,EACAC,gBAAAA,EACAC,gBAAAA,EACAtD,SAAAA,EACAQ,OAAAA,EACAuC,gBAAAA,EACAxC,eAAAA,EACAwB,mBAAAA,EACAC,YAAAA,EACAC,QAAAA,EACAz4D,MAAAA,MAGJ,CAACvgB,EAAWC,KACHC,EAAAA,EAAAA,IAAKD,EAAS,CACnB,wBACA,kBACA,iBACA,sBACA,uBA3DcZ,EArS0D,EAC5EqD,OAAAA,EACAwG,QAAAA,EACAyE,KAAAA,EACAmpE,gBAAAA,EACA0C,UAAAA,EACAX,mBAAAA,EACAkB,cAAAA,EACAG,yBAAAA,EACAF,eAAAA,EACAC,eAAAA,EACAG,gBAAAA,EACAC,gBAAAA,EACAtD,SAAAA,EACA6C,gBAAAA,EACAE,gBAAAA,EACAxC,eAAAA,EACAoC,eAAAA,EACAnC,OAAAA,EACAuB,mBAAAA,EACAC,YAAAA,EACAC,QAAAA,EACAz4D,MAAAA,EACA+5D,sBAAAA,EACAC,gBAAAA,EACAC,eAAAA,EACAC,oBAAAA,EACAC,kBAAAA,MAEA,MAAOC,EAAcC,IV+Idh7B,EAAAA,GAAAA,GAAW01B,GAASh+C,KU9IpBhD,EAAW2yC,IAAgBhjE,EAAAA,EAAAA,KAAS,GACrC1D,GAAOC,EAAAA,EAAAA,MAEb0D,EAAAA,EAAAA,KAAU,MACJyJ,GAAQ4S,IACV0mD,GAAa,KAEd,CAACt5D,EAAM4S,KAEVrc,EAAAA,EAAAA,KAAU,KACJqc,MAAAA,GAAAA,EAAOs6D,OACTD,EAAgB,CACd/sE,KAAM,gBACNiqB,QAAS,CACP,CAACvX,EAAMs6D,OAAQt6D,EAAM5hB,aAI1B,CAAC4hB,EAAOq6D,KAEX12E,EAAAA,EAAAA,KAAU,KACR,GAAIs1E,EAAW,CACb,MACE18D,KAAMgW,EADF,MACY8hD,EADZ,MACmBl9C,EADnB,gBAC0BogD,GAC5B0B,EACJoB,EAAgB,CACd/sE,KAAM,iBACNiqB,QAAS,CACPhF,SAAAA,EACA8hD,MAAOA,GAA6B,MAApBA,EAAMqD,OAAO,GACxB,IAAGrD,IACJA,EACJl9C,MAAAA,KACIogD,GAAmB,SAI5B,CAAC0B,EAAWoB,IAEf,MAAME,GAAwBx6E,EAAAA,EAAAA,KAAY,KACxCo6E,MACC,CAACA,IAEEhD,GAAal1E,EAAAA,EAAAA,KAAQ,IACrBmL,IAASotE,EAAAA,GAAAA,SACJ,EAmSb,SAAuBxD,EAAkB,GAAIT,EAA+CkE,GAC1F,MAAMxD,EAAiBV,EACnBmE,GAAkBnE,EAAiBkE,GACnC,GACJ,IAAItT,EAAQ,EAKZ,OAHAA,EADoB6P,EAAOh+B,OAAOi+B,GAAkB,IAChCpgC,QAAO,CAACqC,EAAKyhC,IACxBzhC,EAAMyhC,EAAIjE,QAChBvP,GACIA,EAzSEyT,CAAc5D,EAAQT,EAAiB6D,EAAa9F,WAC1D,CAAClnE,EAAMgtE,EAAa9F,SAAU0C,EAAQT,IAEnCW,GAAej1E,EAAAA,EAAAA,KAAQ,KAC3B,GAAImL,IAASotE,EAAAA,GAAAA,SAGb,OAqSJ,SAAyBnjD,EAAkBk/C,EAA+Ce,GACxF,MACMD,EAAiB,GZxZlB,SAA4BlE,GACjC,MAAM2E,EAAW5E,GAAeC,GAChC,OAAOL,GAAMgF,IAAuB,GYqZf+C,CAAmBxjD,EAAM87C,gBACJ97C,EAAM87C,WAAWr9C,OAAO,KAC5DyhD,EAAkBlgD,EAAM28C,YACzB,GAAE38C,EAAM28C,gBAAgB38C,EAAM68C,SAAS78C,EAAM88C,mBAC9C5xE,GACE,MAAE8xE,EAAO9hD,SAAUhW,GAAS8a,EAC5BojD,EAAiBlE,EAAkBuE,GAAmBvE,EAAiBl/C,EAAMi9C,eAAY/xE,EAE/F,MAAO,CACL80E,cAAAA,EACAC,gBAAAA,EACAC,gBAAAA,EACAh7D,KAAAA,EACA83D,MAAAA,EACAmD,eAPqBiD,MAAAA,OAAH,EAAGA,EAAgBh6D,OA7S9Bs6D,CAAgBX,EAAc7D,EAAiB4C,GAAkB,MACvE,CAAC/rE,EAAMgtE,EAAc7D,EAAiB4C,IA2EnC6B,GAAkBj7E,EAAAA,EAAAA,KAAY,KAClC,MAAM,SAAE60E,GAAawF,EACfa,EA0OV,SAAwBb,GACtB,MAAM,YACJpG,EADI,YAEJC,EAFI,KAGJC,EAHI,MAIJ78C,EAJI,YAKJ88C,EALI,SAMJC,EACA7hD,SAAUhW,EAPN,MAQJ83D,EARI,MASJl9C,GACEijD,EAWJ,MAAO,CACL79D,KAAAA,EACA83D,MAAAA,EACAl9C,MAAAA,EACAogD,gBAbsB,CACtBvD,YAAAA,EACAC,YAAAA,EACAC,KAAAA,EACA78C,MAAAA,EACA88C,YAAAA,EACAC,SAAAA,IA7PoB8G,CAAed,GACnCL,EAAsB,CAAEkB,YAAAA,EAAarG,SAAAA,MACpC,CAACmF,EAAuBK,IAErBe,GAAkBp7E,EAAAA,EAAAA,KAAY,KAClC,MAAMq7E,EAmQV,SAAwBhB,GACtB,MAAM,WACJjH,EADI,WACQoB,EADR,OACoBC,EADpB,IAC4BC,EAD5B,eACiCC,EADjC,WACiDC,GACnDyF,GACGiB,EAAaC,GAAc9G,EAAO7hD,MAAM,KAW/C,MAAO,CACLwL,KAXW,CACXg1C,WAAAA,EACAoB,WAAAA,EACA8G,YAAAA,EACAC,WAAAA,EACA7G,IAAAA,EACAp9B,QAASq9B,EACT6G,IAAK5G,IA/Qe6G,CAAepB,GACnCF,EAAoB,CAClBkB,YAAAA,MAED,CAAClB,EAAqBE,IAEnBqB,GAAW17E,EAAAA,EAAAA,KAAY,KAC3Bi6E,EAAgB,CACd0B,iBAAkBtB,EAAa9F,SAC/BO,gBAAiBuF,EAAavF,oBAE/B,CAACmF,EAAiBI,IAEfuB,GAAU57E,EAAAA,EAAAA,KAAa67E,IAC3B3B,EAAe,CAAE7sE,KAAMwuE,MACtB,CAAC3B,IAEEtuB,GAAoB5rD,EAAAA,EAAAA,KAAY,KAEpC,OADA2mE,GAAa,GACLt5D,GACN,KAAKotE,EAAAA,GAAAA,aACH,OAAOQ,IACT,KAAKR,EAAAA,GAAAA,SACH,OAAOmB,EAAQnB,EAAAA,GAAAA,aACjB,KAAKA,EAAAA,GAAAA,YACH,OAAOW,IACT,KAAKX,EAAAA,GAAAA,SACH,OAAOiB,IACT,QACE,MAAO,UAEV,CAACruE,EAAM4tE,EAAiBW,EAASR,EAAiBM,IAE/Cl+D,GAActb,EAAAA,EAAAA,KAAQ,KAC1B,OAAQmL,GACN,KAAKotE,EAAAA,GAAAA,aACH,OAAOx6E,EAAK,uBACd,KAAKw6E,EAAAA,GAAAA,SACH,OAAOx6E,EAAK,yBACd,KAAKw6E,EAAAA,GAAAA,YACH,OAAOx6E,EAAK,mBACd,KAAKw6E,EAAAA,GAAAA,SACH,OAAOx6E,EAAK,mBACd,QACE,MAAO,MAEV,CAACoN,EAAMpN,IAEJ67E,GAAa55E,EAAAA,EAAAA,KAAQ,KACzB,OAAQmL,GACN,KAAKotE,EAAAA,GAAAA,SACH,OAAOx6E,EAAK,qBAAqB22E,EAAAA,GAAAA,GAAeQ,EAAYX,EAAUx2E,EAAKgnB,OAC7E,QACE,OAAOhnB,EAAK,WAEf,CAACoN,EAAMpN,EAAMw2E,EAAUW,IAE1B,OAAIoC,EAEA,mBAAC57D,GAAA,EAAD,CACEvd,UAAU,QACV+B,OAAQA,EACRwG,QAASA,GAET,qGAC6E,8BAD7E,iDAIA,mBAACvG,EAAA,EAAD,CACE0e,QAAM,EACNzgB,QAASsI,GAER3I,EAAK,QAOZ,mBAAC2d,GAAA,EAAD,CACEvd,UAAU,eACV+B,OAAQA,EACRwG,QAASA,GAET,0BAAKvI,UAAU,SAASO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAChD,mBAACH,EAAA,EAAD,CACEhC,UAAU,eACVkC,MAAM,cACND,OAAK,EACL7B,KAAK,UACLH,QAASsI,EACTnG,UAAU,SAEV,wBAAGpC,UAAU,gBAEf,6BAAKmd,SAEGhb,IAAT6K,EACC,mBAACiP,EAAA,EAAD,CAAYE,KAAK,QAAQD,UAAWlP,IACjC,IACC,0BAAKhN,UAAU,yBA9JzB,SAA4B07E,GAC1B,OAAQA,GACN,KAAKtB,EAAAA,GAAAA,aACH,OACE,mBAAC,GAAD,CACEnjD,MAAO+iD,EACP36C,SAAU46C,EACV3E,YAAansE,QAAQowE,GACrBpE,UAAWhsE,QAAQmwE,GAAkBI,GACrCtE,UAAWjsE,QAAQkwE,GAAkBI,GACrCpE,SAAUlsE,QAAQiwE,KAGxB,KAAKgB,EAAAA,GAAAA,SACH,OACE,mBAAC,GAAD,CACEnjD,MAAO+iD,EACP36C,SAAU46C,EACV9D,gBAAiBA,GAAmB,GACpCC,SAAUA,IAGhB,KAAKgE,EAAAA,GAAAA,YACH,OACE,mBAAC,GAAD,CACEnjD,MAAO+iD,EACP36C,SAAU46C,EACV/B,mBAAoB/uE,SAAS8vE,GAAmBf,GAChDC,mBAAoBA,EACpBC,YAAaA,EACbC,QAASA,IAGf,KAAK+B,EAAAA,GAAAA,SACH,OACE,mBAAC,GAAD,CACExD,OAAQA,EACRC,eAAgBmD,EAAa9F,UAAYiC,EACrCmE,GAAkBnE,EAAiB6D,EAAa9F,eAChD/xE,EACJ40E,WAAYA,EACZJ,eAAgBA,EAChBG,aAAcA,EACdV,SAAUA,IAGhB,QACE,QAgHOuF,CAAmB3uE,MAK1B,0BAAKhN,UAAU,iBACb,mBAAC6Q,EAAA,EAAD,CAAS3O,MAAM,UAGnB,0BAAKlC,UAAU,UACb,mBAACgC,EAAA,EAAD,CACEkL,KAAK,SACLjN,QAASsrD,EACTx+C,SAAU4mB,EACVA,UAAWA,GAEV8nD,IAGJ77D,IAAUA,EAAMs6D,OAxMrB,WACE,GAAKt6D,EAGL,OACE,mBAACrC,GAAA,EAAD,CACEvd,UAAU,QACV+B,OAAQoH,QAAQyW,GAChBrX,QAAS4xE,GAET,6BAAKv6D,EAAMmK,aAAe,SAC1B,4BAAInK,EAAMmK,aAAe,SACzB,mBAAC/nB,EAAA,EAAD,CACE0e,QAAM,EACNzgB,QAAS85E,GAERn6E,EAAK,QAwLgBg8E,QAqEhC,SAASlB,GAAmBvE,EAAmC0F,GAC7D,OAAO1F,EAAgBxzC,MAAK,EAAGvlC,GAAAA,KAASA,IAAOy+E,IAGjD,SAASvB,GAAkBnE,EAAmCkE,GAC5D,MAAMpiB,EAASyiB,GAAmBvE,EAAiBkE,GACnD,OAAOpiB,MAAAA,OAAP,EAAOA,EAAQ2e,OC5XjB,MA0DA,IAAej2E,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAM,QAAEm9E,GAAYn9E,EAAOu6E,SACrB,SACJ9C,EADI,OAEJQ,EAFI,KAGJmF,EAHI,YAIJC,EAJI,iBAKJC,EALI,eAMJpF,EANI,eAOJO,EAPI,SAQJJ,EARI,KASJ/zE,EATI,MAUJod,GACGy7D,GAAW,GAEhB,MAAO,CACL1F,SAAAA,EACAQ,OAAAA,EACAmF,KAAAA,EACAC,YAAAA,EACAC,iBAAAA,EACApF,eAAAA,EACAO,eAAAA,EACAJ,SAAAA,EACA/zE,KAAAA,EACAod,MAAAA,KA1Bc3hB,EA1D4B,EAC9CqD,OAAAA,EACAwG,QAAAA,EACAquE,OAAAA,EACAC,eAAAA,EACAmF,YAAAA,EACA5F,SAAAA,EACA2F,KAAAA,EACA/E,SAAAA,EACA/zE,KAAAA,EACAod,MAAAA,EACA47D,iBAAAA,EACA7E,eAAAA,MAEA,MAAMx3E,GAAOC,EAAAA,EAAAA,KACPi3E,GAAej1E,EAAAA,EAAAA,KAAQ,IA0E/B,SAAyBo1E,EACvB8E,EAKA3E,GACA,IAAK2E,EACH,MAAO,CAAE9E,cAAAA,GAEX,MAAM,gBAAEE,GAAoB4E,EACtBG,EAAc/E,MAAAA,GAAAA,EAAiBvD,YAChC,GAAEuD,EAAgBvD,gBAAgBuD,EAAgBrD,SAASqD,EAAgBpD,mBAC5E5xE,GACE,MAAE8xE,EAAF,KAAS93D,GAAS4/D,EACxB,MAAO,CACL9E,cAAAA,EACAC,gBAAiB,SACjBC,gBAAiB+E,EACjB//D,KAAAA,EACA83D,MAAAA,EACAmD,eAAAA,GA9FOuD,CAAgBsB,EAAkBF,EAAM3E,IAC9C,CAAC2E,EAAM3E,EAAgB6E,IAE1B,OACE,mBAAC1+D,GAAA,EAAD,CACEvd,UAAU,oCACV+B,OAAQA,EACRwG,QAASA,GAET,8BACE,0BAAKvI,UAAU,SAASO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAChD,mBAACH,EAAA,EAAD,CACEhC,UAAU,eACVkC,MAAM,cACND,OAAK,EACL7B,KAAK,UACLH,QAASsI,EACTnG,UAAU,SAEV,wBAAGpC,UAAU,gBAEf,iCAAMJ,EAAK,kBAAX,MAEF,0BAAKI,UAAU,iCACb,mBAAC,GAAD,CACE42E,OAAQA,EACRC,eAAgBA,EAChBE,WAAYiF,EACZrF,eAAgB,CACdK,SAAAA,EACA/zE,KAAAA,EACAod,MAAAA,GAEFy2D,aAAcA,EACdV,SAAUA,Y,+FC/DtB,MAAM76B,EAAyBl5C,EAAAA,GAA0B,IAAM,IAuG/D,GAAe1B,EAAAA,EAAAA,KArGoB,EACjCgzB,UAAAA,GAAY,EACZwnB,kBAAAA,EACAv7B,MAAAA,EACAkX,KAAAA,EACAxZ,YAAAA,EAAc,WACdk9B,YAAAA,EAAc,OACdC,WAAAA,EACAY,2BAAAA,EACA8gC,cAAAA,EACA/4D,SAAAA,MAGA,MAAMxW,GAAW5G,EAAAA,EAAAA,IAAyB,MACpCpG,GAAOC,EAAAA,EAAAA,MAENg3B,EAAUulD,IAAe94E,EAAAA,EAAAA,IAAS,KAClC+4E,EAAWC,IAAgBh5E,EAAAA,EAAAA,KAAS,GAgD3C,OA9CAC,EAAAA,EAAAA,KAAU,KACHmF,EAAAA,IACHvC,YAAW,KACTyG,EAASpG,QAAS47B,UACjBmZ,KAEJ,KAEHh4C,EAAAA,EAAAA,KAAU,KACJqc,GACF/G,uBAAsB,KACpBjM,EAASpG,QAAS47B,QAClBx1B,EAASpG,QAAS+1E,cAGrB,CAAC38D,IAgCF,2BAAMsX,OAAO,GAAG9T,SAblB,SAAsBse,GACpBA,EAAMj2B,iBAEFkoB,GAIA0oD,GACFj5D,EAASyT,IAK6B2lD,aAAa,OACnD,0BACEx8E,WAAWmE,EAAAA,EAAAA,GAAe,6BAA8B0yB,GAAY,UAAWjX,GAAS,SACxFrf,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAE1B,4BACEwF,IAAKiF,EACL5M,UAAU,eACVkN,KAAMiuC,EAAoB,OAAS,WACnC/9C,GAAG,mBACH6P,MAAO4pB,GAAY,GACnB2lD,aAAa,mBACbrvE,SA1CR,SAA0B/I,GACpBwb,GACF66B,IAGF,MAAM,OAAEptC,GAAWjJ,EACnBg4E,EAAY/uE,EAAOJ,OACnBqvE,EAAajvE,EAAOJ,MAAM3O,QAAUm+E,EAAAA,IAChCN,GACFA,EAAc9uE,EAAOJ,QAkCjB1M,IAAI,SAEN,gCAAQqf,GAASkX,GAAQxZ,GACzB,0BACEtd,UAAU,kBACVC,QAnCR,WACEo7C,GAA4BF,IAmCtB90B,KAAK,SACLC,SAAU,EACVjG,MAAM,8BAEN,wBAAGrgB,UAAWm7C,EAAoB,WAAa,sBAGlDkhC,GACC,mBAAC,IAAD,CAAQnvE,KAAK,SAASrF,QAAM,EAAC8rB,UAAWA,GACrC6mB,Q,sFCxGX,MACMkiC,EAAuC,CAAC,EAAG,IAC3CC,EAAwC,CAAC,EAAG,IAC5CC,EAAsC,CAAC,GAAI,GAC3CC,EAAex6E,EAAAA,GAA0By6E,EAAAA,GAA2BC,EAAAA,GAsD1E,GAAep8E,EAAAA,EAAAA,KApDsB,EAAGw6C,kBAAAA,EAAmBD,MAAAA,MACzD,MAAO8hC,EAAiBC,IAAsB35E,EAAAA,EAAAA,OACvC45E,EAAgBC,IAAqB75E,EAAAA,EAAAA,OACrC85E,EAAqBC,IAA0B/5E,EAAAA,EAAAA,KAAS,IACxDg6E,EAAaC,IAAkBj6E,EAAAA,EAAAA,KAAS,IAE/CC,EAAAA,EAAAA,KAAU,KACHy5E,EAGH72E,YAAW,IAAMo3E,GAAe,IAhBP,MAczB3/C,EAAAA,EAAAA,GAAiB,eAAeC,KAAKo/C,KAItC,CAACD,KAEJz5E,EAAAA,EAAAA,KAAU,KACH25E,IACHt/C,EAAAA,EAAAA,GAAiB,cAAcC,KAAKs/C,KAErC,CAACD,IAEJ,MAAMM,GAAwB79E,EAAAA,EAAAA,KAAY,IAAM09E,GAAuB,IAAO,IAE9E,OACE,0BAAKjgF,GAAG,SAAS4C,UAAWk7C,EAAQ,MAAQ,KACxCkiC,GACA,0BAAKp9E,UAAU,mBAEhBg9E,GACC,mBAAC,IAAD,CACE5/E,GAAG,cACHgD,KAAM86C,EAAQuiC,EAAAA,GAAsBZ,EACpC78E,UAAWs9E,EAAc,SAAW,QACpC//C,cAAey/C,EACfU,YAAahB,EACbl+C,QAAM,EACNC,OAAQ++C,IAGXN,GACC,mBAAC,IAAD,CACE9/E,GAAG,aACHgD,KAAM86C,EAAQuiC,EAAAA,GAAsBZ,EACpC78E,UAAWs9E,EAAc,QAAU,SACnC//C,cAAe2/C,EACfQ,YAAaviC,EAAoBwhC,EAAsBC,EACvDp+C,QAAM,S,uDCjDT,MAAMm/C,EAA0B,CACrCC,W,QACAC,e,QACAC,Y,QACAC,W,QACAC,W,QACAC,W,QACAC,iB,SAGa,SAAStgD,EAAiBzhB,GACvC,MAAMgiE,EAAOR,EAAwBxhE,GAAMwJ,QAAQ5hB,OAAOq6E,SAASviF,OAAQ,IAE3E,OAAOirD,EAAAA,GAAmB,OAAMq3B,IAAQvpE,EAAAA,GAAAA,U,kHCjB1C,MAAMypE,EAAiE,CACrEnxE,KAAM,OACNoxE,QAAS,EACTjL,OAAQ,OACRkL,QAAQ,GAIV,IAAIC,EACAC,EAWAC,EAwCJ,MAwDA,GAAe/9E,EAAAA,EAAAA,KAxDiB,EAAGwzD,KAAAA,EAAMhnD,SAAAA,EAAU5E,QAAAA,MACjD,MAAOo2E,EAAgBC,IAAqBt7E,EAAAA,EAAAA,KAAS,IAErDC,EAAAA,EAAAA,KAAU,KACH4wD,IAIAwqB,EA9CTzxC,eAA2B2xC,GACzB,IACE,MAAMC,EAAgB/iF,SAASod,eAAe,eAC9C,IAAK2lE,EACH,OAGF,MAAM,YAAEnxC,EAAF,aAAenwC,GAAiBshF,EAEtCJ,EAAU,IAAIF,EAAQM,EAAe,CACnCC,YAAY,EACZC,SAAU,CACRv4E,MAAOknC,EACPjqC,OAAQlG,GAEVyhF,SAAU,CACRx4E,MAAOknC,EAAc,GACrBjqC,OAAQlG,EAAe,GACvB0P,KAAM,YAIV,MAAM+9B,QAAgBi0C,EAAAA,EAAAA,IAAcL,SAC9BH,EAAQS,KAAK,CAAEl3E,IAAKgjC,IAC1B,MAAOm0C,GACHC,EAAAA,IAEFC,QAAQ1/D,MAAMw/D,IAyBhBG,CAAYprB,GA/DhBjnB,iBAME,OALKuxC,IACHA,EAAiB,qDACjBD,SAAiBC,GAAgBxiB,SAG5BwiB,EAoDHe,GAAgB3hD,MAAK,IAAM+gD,GAAkB,QAM9C,CAACzqB,EAAMwqB,IAEV,MAAM/+E,GAAOC,EAAAA,EAAAA,KAab,OACE,mBAAC0d,EAAA,EAAD,CACExb,OAAQoH,QAAQgrD,GAChB5rD,QAASA,EACT8X,MAAM,qBACNrgB,UAAU,YACVwrD,gBAAc,GAEbmzB,EACC,0BAAKvhF,GAAG,gBAER,mBAAC+gB,EAAA,EAAD,MAEF,mBAACnc,EAAA,EAAD,CACEhC,UAAU,iBACViC,OAAK,EACLC,MAAM,UACNjC,QA5BNitC,iBACE,IAAKwxC,EACH,OAGF,MAAMhoC,QAA8BgoC,EAAQhoC,OAAO2nC,GAC7CoB,EAA+B,iBAAX/oC,EAAsBA,GAASgpC,EAAAA,EAAAA,IAAWhpC,EAAQ,cAE5EvpC,EAASsyE,IAqBLr9E,UAAWxC,EAAK,cAEhB,wBAAGI,UAAU,oBC3CrB,GAAeW,EAAAA,EAAAA,KAhEsB,EACnC0f,MAAAA,EAAQ,8BACRtT,SAAAA,EACA0uB,qBAAAA,EACAtuB,SAAAA,MAEA,MAAOwyE,EAAcC,IAAmBt8E,EAAAA,EAAAA,OACjCu8E,EAAgBC,IAAqBx8E,EAAAA,EAAAA,IAA6Bm4B,IAEzEl4B,EAAAA,EAAAA,KAAU,KACRu8E,EAAkBrkD,KACjB,CAACA,IA2BJ,MAAMskD,GAAiB57E,EAAAA,EAAAA,GACrB07E,GAAkB,SAClB9yE,GAAY,YAGd,OACE,0BAAK/M,UAAU,kBACb,4BACEA,UAAW+/E,EACX15D,KAAK,SACLC,SAAU,EACVjG,MAAOA,GAEP,4BACEnT,KAAK,OACLC,SAxCR,SAA0Bu0B,GACxB,MAAMr0B,EAASq0B,EAAMr0B,OAEhBA,GAAWA,EAAOm/B,OAAUn/B,EAAOm/B,MAAM,KAI9CozC,EAAgBvyE,EAAOm/B,MAAM,IAC7Bn/B,EAAOJ,MAAQ,KAiCT67B,OAAO,0BAET,wBAAG9oC,UAAU,oBACZ6/E,GAAkB,0BAAKxjF,IAAKwjF,EAAgBlvE,IAAI,YAEnD,mBAAC,EAAD,CAAWwjD,KAAMwrB,EAAcp3E,QAzBnC,WACEq3E,OAAgBz9E,IAwB4CgL,SAnC9D,SAA0BsyE,GACxBG,OAAgBz9E,GAChBgL,EAASsyE,GAELI,GACFG,IAAIC,gBAAgBJ,GAEtBC,EAAkBE,IAAIE,gBAAgBT,Y","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/hooks/useFullscreen.ts","webpack://telegram-t/./src/components/mediaViewer/helpers/formatFileSize.ts","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/ZoomControls.tsx","webpack://telegram-t/./src/components/mediaViewer/PanZoom.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/common/ReportMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/ui/ShowMoreButton.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCoverAnimated.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickerSet.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/util/systemFilesDialog.ts","webpack://telegram-t/./src/util/colors.ts","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helper/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaPassword.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRecentActions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/util/countries.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/ui/Select.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/common/PasswordForm.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/common/helpers/animatedAssets.ts","webpack://telegram-t/./src/components/ui/CropModal.tsx","webpack://telegram-t/./src/components/ui/AvatarEditable.tsx"],"sourcesContent":["import { ApiMessage, ApiDimensions } from '../../../api/types';\n\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.active .media-viewer-content img, .active .media-viewer-content video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isElementInViewport(el: HTMLElement) {\n  if (el.style.display === 'none') {\n    return false;\n  }\n\n  const rect = el.getBoundingClientRect();\n  const { height: windowHeight } = windowSize.get();\n\n  return (rect.top <= windowHeight) && ((rect.top + rect.height) >= 0);\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter) {\n    topOffsetRem += mql.matches ? 0.875 : 3.375;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.active > .MessageList #album-media-${message!.id}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${message!.id}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${message!.id}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .ChatInfo .Avatar';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .active .ProfilePhoto';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .active .ProfilePhoto';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.active > .MessageList #message${message!.id}`;\n      mediaSelector = '.message-content .full-media, .message-content .thumbnail';\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[mediaEls.length - 1],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, ApiMessage, ApiUser } from '../../api/types';\n\nimport { getSenderTitle, isUserId } from '../../modules/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'closeMediaViewer' | 'focusMessage'>;\n\nconst SenderInfo: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isAvatar,\n  message,\n  closeMediaViewer,\n  focusMessage,\n}) => {\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n    focusMessage({ chatId, messageId });\n  }, [chatId, focusMessage, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isUserId(sender.id) ? (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang('lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return {};\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['closeMediaViewer', 'focusMessage']),\n)(SenderInfo);\n","import React, {\n  FC,\n  memo,\n  useCallback,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiMessage } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getMessageMediaHash } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport { selectIsDownloading } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading: boolean;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  isZoomed: boolean;\n  message?: ApiMessage;\n  fileName?: string;\n  isAvatar?: boolean;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  onZoomToggle: NoneToVoidFunction;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'downloadMessageMedia' | 'cancelMessageMediaDownload'>;\n\nconst MediaViewerActions: FC<OwnProps & StateProps & DispatchProps> = ({\n  mediaData,\n  isVideo,\n  isZoomed,\n  message,\n  fileName,\n  isAvatar,\n  isDownloading,\n  onCloseMediaViewer,\n  onForward,\n  onZoomToggle,\n  downloadMessageMedia,\n  cancelMessageMediaDownload,\n}) => {\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n  );\n\n  const handleDownloadClick = useCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message });\n    } else {\n      downloadMessageMedia({ message });\n    }\n  }, [cancelMessageMediaDownload, downloadMessageMedia, isDownloading, message]);\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {!isAvatar && (\n            <MenuItem\n              icon=\"forward\"\n              onClick={onForward}\n            >\n              {lang('Forward')}\n            </MenuItem>\n          )}\n          {isVideo ? (\n            <MenuItem\n              icon={isDownloading ? 'close' : 'download'}\n              onClick={handleDownloadClick}\n            >\n              {isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download'}\n            </MenuItem>\n          ) : (\n            <MenuItem\n              icon=\"download\"\n              href={mediaData}\n              download={fileName}\n            >\n              {lang('AccActionDownload')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {!isAvatar && (\n        <>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Forward')}\n            onClick={onForward}\n          >\n            <i className=\"icon-forward\" />\n          </Button>\n        </>\n      )}\n      {isVideo ? (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('AccActionDownload')}\n          onClick={handleDownloadClick}\n        >\n          {isDownloading ? (\n            <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n          ) : (\n            <i className=\"icon-download\" />\n          )}\n        </Button>\n      ) : (\n        <Button\n          href={mediaData}\n          download={fileName}\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('AccActionDownload')}\n        >\n          <i className=\"icon-download\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={isZoomed ? 'Zoom Out' : 'Zoom In'}\n        onClick={onZoomToggle}\n      >\n        <i className={isZoomed ? 'icon-zoom-out' : 'icon-zoom-in'} />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n\n    return {\n      isDownloading,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'downloadMessageMedia',\n    'cancelMessageMediaDownload',\n  ]),\n)(MediaViewerActions));\n","import React, { FC, useEffect, useState } from '../../lib/teact/teact';\n\nimport { throttle } from '../../util/schedulers';\nimport { TextPart } from '../common/helpers/renderMessageText';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHidden?: boolean;\n  isForVideo: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isHidden, isForVideo, onClick,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {text && (\n        <div className=\"media-viewer-footer-content\" onClick={!IS_SINGLE_COLUMN_LAYOUT ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\nimport { PLATFORM_ENV } from '../util/environment';\n\ntype RefType = {\n  current: HTMLElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreenStatus(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || PLATFORM_ENV === 'iOS')) {\n      return;\n    }\n\n    if (elRef.current.requestFullscreen) {\n      elRef.current.requestFullscreen();\n    } else if (elRef.current.webkitRequestFullscreen) {\n      elRef.current.webkitRequestFullscreen();\n    } else if (elRef.current.webkitEnterFullscreen) {\n      elRef.current.webkitEnterFullscreen();\n    } else if (elRef.current.mozRequestFullScreen) {\n      elRef.current.mozRequestFullScreen();\n    }\n\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.mozCancelFullScreen) {\n      document.mozCancelFullScreen();\n    } else if (document.webkitCancelFullScreen) {\n      document.webkitCancelFullScreen();\n    } else if (document.webkitExitFullscreen) {\n      document.webkitExitFullscreen();\n    }\n\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const listener = () => { setIsFullscreen(Boolean(prop && document[prop])); };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n    const video = elRef.current;\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && PLATFORM_ENV !== 'iOS') {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n\n  return '';\n}\n","const units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'];\n\nexport default (bytes: number) => {\n  const number = bytes === 0 ? 0 : Math.floor(Math.log(bytes) / Math.log(1024));\n\n  return `${(bytes / 1024 ** Math.floor(number)).toFixed(1)} ${units[number]}`;\n};\n","import React, {\n  FC, useState, useEffect, useRef, useCallback,\n} from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport formatFileSize from './helpers/formatFileSize';\nimport useLang from '../../hooks/useLang';\nimport { captureEvents } from '../../util/captureEvents';\n\nimport Button from '../ui/Button';\n\nimport './VideoPlayerControls.scss';\n\ntype IProps = {\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceVisible: boolean;\n  isForceMobileVersion?: boolean;\n  isPlayed: boolean;\n  isFullscreenSupported: boolean;\n  isFullscreen: boolean;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 800;\n\nconst VideoPlayerControls: FC<IProps> = ({\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceVisible,\n  isForceMobileVersion,\n  isPlayed,\n  isFullscreenSupported,\n  isFullscreen,\n  onChangeFullscreen,\n  onPlayPause,\n  onSeek,\n}) => {\n  const [isVisible, setVisibility] = useState(true);\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const isSeeking = useRef<boolean>(false);\n\n  useEffect(() => {\n    if (isForceVisible) {\n      setVisibility(isForceVisible);\n    }\n  }, [isForceVisible]);\n\n  useEffect(() => {\n    let timeout: number | undefined;\n\n    if (!isForceVisible) {\n      if (IS_SINGLE_COLUMN_LAYOUT) {\n        setVisibility(false);\n      } else {\n        timeout = window.setTimeout(() => {\n          setVisibility(false);\n        }, HIDE_CONTROLS_TIMEOUT_MS);\n      }\n    }\n\n    return () => {\n      if (timeout) {\n        window.clearTimeout(timeout);\n      }\n    };\n  }, [isForceVisible]);\n\n  useEffect(() => {\n    if (isVisible || isForceVisible) {\n      document.body.classList.add('video-controls-visible');\n    }\n\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isForceVisible, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    if (isSeeking.current && seekerRef.current) {\n      const { width, left } = seekerRef.current.getBoundingClientRect();\n      const clientX = e instanceof MouseEvent ? e.clientX : e.targetTouches[0].clientX;\n      onSeek(Math.max(Math.min(duration * ((clientX - left) / width), duration), 0));\n    }\n  }, [duration, onSeek]);\n\n  const handleStartSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    isSeeking.current = true;\n    handleSeek(e);\n  }, [handleSeek]);\n\n  const handleStopSeek = useCallback(() => {\n    isSeeking.current = false;\n  }, []);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isVisible) return undefined;\n    return captureEvents(seekerRef.current, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n  }, [isVisible, handleStartSeek, handleSeek, handleStopSeek]);\n\n  if (!isVisible && !isForceVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className={`VideoPlayerControls ${isForceMobileVersion ? 'mobile' : ''}`} onClick={stopEvent}>\n      {renderSeekLine(currentTime, duration, bufferedProgress, seekerRef)}\n      <Button\n        ariaLabel={lang('AccActionPlay')}\n        size=\"tiny\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent-white\"\n        className=\"play\"\n        onClick={onPlayPause}\n      >\n        <i className={isPlayed ? 'icon-pause' : 'icon-play'} />\n      </Button>\n      {renderTime(currentTime, duration)}\n      {bufferedProgress < 1 && renderFileSize(bufferedProgress, fileSize)}\n      {isFullscreenSupported && (\n        <Button\n          ariaLabel=\"Fullscreen\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"fullscreen\"\n          onClick={onChangeFullscreen}\n        >\n          <i className={`${isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'}`} />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderFileSize(loadedPercent: number, totalSize: number) {\n  return (\n    <div className=\"player-file-size\">\n      {`${formatFileSize(totalSize * loadedPercent)} / ${formatFileSize(totalSize)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(\n  currentTime: number, duration: number, bufferedProgress: number, seekerRef: React.RefObject<HTMLDivElement>,\n) {\n  const percentagePlayed = (currentTime / duration) * 100;\n  const percentageBuffered = bufferedProgress * 100;\n\n  return (\n    <div className=\"player-seekline\" ref={seekerRef}>\n      <div className=\"player-seekline-track\">\n        <div\n          className=\"player-seekline-buffered\"\n          // @ts-ignore teact feature\n          style={`width: ${percentageBuffered || 0}%`}\n        />\n        <div\n          className=\"player-seekline-played\"\n          // @ts-ignore teact feature\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreenStatus from '../../hooks/useFullscreen';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport safePlay from '../../util/safePlay';\n\nimport VideoPlayerControls from './VideoPlayerControls';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport Button from '../ui/Button';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  onClose,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlayed, setIsPlayed] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [isControlsVisible, setIsControlsVisible] = useState(true);\n\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreenStatus(videoRef, setIsPlayed);\n\n  const { isBuffered, bufferedProgress, bufferingHandlers } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlayed && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlayed(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlayed) {\n      videoRef.current!.pause();\n      setIsPlayed(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlayed(true);\n      if (IS_SINGLE_COLUMN_LAYOUT) {\n        setIsControlsVisible(false);\n      }\n    }\n  }, [isPlayed]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleMouseOver = useCallback(() => {\n    setIsControlsVisible(true);\n  }, []);\n\n  const handleMouseOut = useCallback(() => {\n    setIsControlsVisible(false);\n  }, []);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlayed(false);\n    setIsControlsVisible(true);\n  }, []);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  }, []);\n\n  const toggleControls = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    setIsControlsVisible(!isControlsVisible);\n    if (!isControlsVisible) {\n      videoRef.current!.pause();\n      setIsPlayed(false);\n    }\n  }, [isControlsVisible]);\n\n  useEffect(() => {\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onClick={!isGif && IS_SINGLE_COLUMN_LAYOUT ? toggleControls : undefined}\n      onMouseOver={!isGif && !IS_TOUCH_ENV ? handleMouseOver : undefined}\n      onMouseOut={!isGif && !IS_TOUCH_ENV ? handleMouseOut : undefined}\n    >\n      <div\n        // @ts-ignore\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          playsInline\n          loop={isGif}\n          // This is to force auto playing on mobiles\n          muted={isGif}\n          id=\"media-viewer-video\"\n          // @ts-ignore\n          style={videoStyle}\n          onPlay={IS_IOS ? () => setIsPlayed(true) : undefined}\n          onEnded={handleEnded}\n          onClick={!IS_SINGLE_COLUMN_LAYOUT ? togglePlayState : undefined}\n          onDoubleClick={handleFullscreenChange}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlayed={isPlayed}\n          bufferedProgress={bufferedProgress}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={videoRef.current ? videoRef.current.duration : 0}\n          isForceVisible={isControlsVisible}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPlayPause={togglePlayState}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ZoomControls.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onChangeZoom: (level: number, canCloseZoom?: boolean) => void;\n};\n\nexport const MAX_ZOOM_LEVEL = 3;\nexport const MIN_ZOOM_LEVEL = 1;\nconst ONE_STEP_PERCENT = 100 / (MAX_ZOOM_LEVEL - MIN_ZOOM_LEVEL);\nconst RESET_ZOOM_LEVEL = 1.5;\n\nconst ZoomControls: FC<OwnProps> = ({ isShown, onChangeZoom }) => {\n  const { transitionClassNames } = useShowTransition(isShown);\n  const prevIsShown = usePrevious<boolean>(isShown);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [zoomLevel, setZoomLevel] = useState(1);\n  const isSeeking = useRef<boolean>(false);\n\n  useEffect(() => {\n    if (isShown && !prevIsShown) {\n      setZoomLevel(RESET_ZOOM_LEVEL);\n    }\n  }, [isShown, prevIsShown]);\n\n  const handleZoomOut = () => {\n    if (inputRef.current) {\n      setZoomLevel(Math.max(MIN_ZOOM_LEVEL, zoomLevel - 0.5));\n    }\n  };\n\n  const handleZoomIn = () => {\n    if (inputRef.current) {\n      setZoomLevel(Math.min(MAX_ZOOM_LEVEL, zoomLevel + 0.5));\n    }\n  };\n\n  const handleStartSeek = useCallback(() => {\n    isSeeking.current = true;\n  }, []);\n\n  const handleStopSeek = useCallback(() => {\n    isSeeking.current = false;\n    if (zoomLevel === 1) {\n      onChangeZoom(zoomLevel, !isSeeking.current);\n    }\n  }, [onChangeZoom, zoomLevel]);\n\n  const handleSeeklineChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n    setZoomLevel(Math.min(MAX_ZOOM_LEVEL, Math.max(Number(e.target.value), MIN_ZOOM_LEVEL)));\n  };\n\n  useEffect(() => {\n    onChangeZoom(zoomLevel, !isSeeking.current);\n  }, [zoomLevel, onChangeZoom]);\n\n  const lang = useLang();\n\n  const className = buildClassName(\n    'ZoomControls',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className}>\n      <Button\n        disabled={zoomLevel === MIN_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel={lang('ZoomOut')}\n        className=\"zoom-out\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        disabled={zoomLevel === MAX_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel=\"Zoom In\"\n        className=\"zoom-in\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      <div className=\"seekline\">\n        <div className=\"seekline-track\">\n          <div\n            className=\"seekline-played\"\n            // @ts-ignore teact feature\n            style={`width: ${(zoomLevel - 1) * ONE_STEP_PERCENT}%`}\n          />\n          <input\n            ref={inputRef}\n            min={MIN_ZOOM_LEVEL}\n            max={MAX_ZOOM_LEVEL}\n            step=\"0.5\"\n            value={zoomLevel}\n            type=\"range\"\n            className=\"seekline-input\"\n            onChange={handleSeeklineChange}\n            onMouseDown={handleStartSeek}\n            onMouseUp={handleStopSeek}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ZoomControls);\n","/*\n  @source https://github.com/ajainarayanan/react-pan-zoom\n\n  Heavily inspired/lifted from this idea: https://stackoverflow.com/a/39311435/661768\n  without jqueryUI or jquery dependency.\n*/\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { areSortedArraysEqual } from '../../util/iteratees';\n\nimport './PanZoom.scss';\n\nexport interface IDragData {\n  x: number;\n  y: number;\n  dx: number;\n  dy: number;\n}\n\nexport interface OwnProps {\n  children: any;\n  className?: string;\n  noWrap: boolean;\n  canPan: boolean;\n  zoomLevel: number;\n  panDeltaX: number;\n  panDeltaY: number;\n  onPan?: (x: number, y: number) => void;\n}\n\nconst INITIAL_MATRIX = [\n  1, 0, 0, 1, 0, 0,\n];\n\nconst SCALE_VALUES = {\n  1: 1,\n  1.5: 1.5,\n  2: 2.2,\n  2.5: 3.3,\n  3: 5.5,\n};\n\nconst ZOOM_SAFE_AREA = 150;\n\nfunction calculateSafeZoneOnZoom(oldScale: number, matrixData: number[], wrapper: HTMLDivElement | null) {\n  const image = wrapper && wrapper.querySelector('.active img');\n  if (!wrapper || !image) {\n    return matrixData;\n  }\n  const wrapperRect = wrapper.getBoundingClientRect();\n  const imageRect = image.getBoundingClientRect();\n\n  const newImgWidth = (imageRect.width / oldScale) * matrixData[0];\n  const newImgHeight = (imageRect.height / oldScale) * matrixData[3];\n  const newImgX = (wrapperRect.width - newImgWidth) / 2 + matrixData[4];\n  const newImgY = (wrapperRect.height - newImgHeight) / 2 + matrixData[5];\n  if (wrapperRect.width && wrapperRect.width - ZOOM_SAFE_AREA < newImgX) {\n    matrixData[4] -= newImgX + wrapperRect.width - ZOOM_SAFE_AREA;\n  } else if (newImgWidth && newImgWidth + newImgX < ZOOM_SAFE_AREA) {\n    matrixData[4] -= newImgWidth + newImgX - ZOOM_SAFE_AREA;\n  }\n  if (wrapperRect.height && wrapperRect.height - ZOOM_SAFE_AREA < newImgY) {\n    matrixData[5] -= newImgY + wrapperRect.height - ZOOM_SAFE_AREA;\n  } else if (newImgHeight && newImgHeight + newImgY < ZOOM_SAFE_AREA) {\n    matrixData[5] -= newImgHeight + newImgY - ZOOM_SAFE_AREA;\n  }\n\n  return matrixData;\n}\n\nconst PanZoom: FC<OwnProps> = ({\n  children,\n  className,\n  noWrap,\n  canPan,\n  zoomLevel,\n  panDeltaX,\n  panDeltaY,\n  onPan,\n}) => {\n  const tunedZoomLevel = SCALE_VALUES[zoomLevel as keyof typeof SCALE_VALUES] || zoomLevel;\n  const [isDragging, setIsDragging] = useState<boolean>(false);\n  const [dragData, setDragData] = useState<IDragData>({\n    dx: panDeltaX, dy: panDeltaY, x: 0, y: 0,\n  });\n  // [zoom, skew, skew, zoom, dx, dy] - see https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix()\n  const [matrixData, setMatrixData] = useState<number[]>(INITIAL_MATRIX);\n  // Used to set cursor while moving.\n  // eslint-disable-next-line no-null/no-null\n  const panWrapperRef = useRef<HTMLDivElement>(null);\n  // Used to set transform for pan.\n  // eslint-disable-next-line no-null/no-null\n  const panContainerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const newZoomLevel = tunedZoomLevel || matrixData[0];\n    const newPandx = panDeltaX || matrixData[4];\n    const newPandy = panDeltaY || matrixData[5];\n\n    const newMatrixData = [...matrixData];\n    if (matrixData[0] !== newZoomLevel) {\n      newMatrixData[0] = newZoomLevel || newMatrixData[0];\n      newMatrixData[3] = newZoomLevel || newMatrixData[3];\n    }\n    if (matrixData[4] !== newPandx) {\n      newMatrixData[4] = newPandx;\n    }\n    if (matrixData[5] !== newPandy) {\n      newMatrixData[5] = newPandy;\n    }\n\n    if (!areSortedArraysEqual(matrixData, newMatrixData)) {\n      setMatrixData(calculateSafeZoneOnZoom(matrixData[0], newMatrixData, panWrapperRef.current));\n    }\n    // eslint-disable-next-line\n  }, [panDeltaX, panDeltaY, tunedZoomLevel]);\n\n  useEffect(() => {\n    if (!canPan) {\n      setMatrixData(INITIAL_MATRIX);\n    }\n  }, [canPan]);\n\n  useEffect(() => {\n    if (panContainerRef.current) {\n      panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n    }\n  }, [noWrap, matrixData]);\n\n  const handleMouseDown = (e: React.MouseEvent<EventTarget>) => {\n    if (!canPan) {\n      return;\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n\n    const offsetX = matrixData[4];\n    const offsetY = matrixData[5];\n    const newDragData: IDragData = {\n      dx: offsetX,\n      dy: offsetY,\n      x: e.pageX,\n      y: e.pageY,\n    };\n    setDragData(newDragData);\n    setIsDragging(true);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.add('move');\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.remove('move');\n    }\n\n    if (onPan) {\n      onPan(matrixData[4], matrixData[5]);\n    }\n  };\n\n  function getNewMatrixData(x: number, y: number): number[] {\n    const newMatrixData = [...matrixData];\n    const deltaX = dragData.x - x;\n    const deltaY = dragData.y - y;\n    newMatrixData[4] = dragData.dx - deltaX;\n    newMatrixData[5] = dragData.dy - deltaY;\n\n    return newMatrixData;\n  }\n\n  const handleMouseMove = (e: React.MouseEvent<EventTarget>) => {\n    if (isDragging) {\n      const newMatrixData = getNewMatrixData(e.pageX, e.pageY);\n      setMatrixData(newMatrixData);\n\n      if (panContainerRef.current) {\n        panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n      }\n    }\n  };\n\n  if (noWrap) {\n    return children;\n  }\n\n  return (\n    <div\n      ref={panWrapperRef}\n      className={`pan-wrapper ${className || ''}`}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onMouseMove={handleMouseMove}\n    >\n      <div\n        ref={panContainerRef}\n        className=\"pan-container\"\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PanZoom);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiChat, ApiMediaFormat, ApiMessage, ApiUser, ApiDimensions,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport windowSize from '../../util/windowSize';\nimport {\n  AVATAR_FULL_DIMENSIONS,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  calculateMediaViewerDimensions,\n} from '../common/helpers/mediaDimensions';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  getChatAvatarHash,\n  getChatMediaMessageIds,\n  getMessageFileName,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageDocument,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  getPhotoFullDimensions,\n  getVideoDimensions, getMessageFileSize,\n} from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport usePrevious from '../../hooks/usePrevious';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Spinner from '../ui/Spinner';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport SenderInfo from './SenderInfo';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\nimport ZoomControls from './ZoomControls';\nimport PanZoom from './PanZoom';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageId?: number;\n  senderId?: string;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  profilePhotoIndex?: number;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  animationLevel: 0 | 1 | 2;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openMediaViewer' | 'closeMediaViewer' | 'openForwardMenu' | 'focusMessage'>;\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageId,\n  senderId,\n  origin,\n  avatarOwner,\n  profilePhotoIndex,\n  message,\n  chatMessages,\n  collectionIds,\n  openMediaViewer,\n  closeMediaViewer,\n  openForwardMenu,\n  focusMessage,\n  animationLevel,\n}) => {\n  const isOpen = Boolean(avatarOwner || messageId);\n\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  /* Content */\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isAvatar = Boolean(avatarOwner);\n\n  /* Navigation */\n  const isSingleSlide = Boolean(webPagePhoto || webPageVideo);\n  const messageIds = useMemo(() => {\n    return isSingleSlide && messageId\n      ? [messageId]\n      : getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n  }, [isSingleSlide, messageId, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaMessageIndex = messageId ? messageIds.indexOf(messageId) : -1;\n  const isFirst = selectedMediaMessageIndex === 0 || selectedMediaMessageIndex === -1;\n  const isLast = selectedMediaMessageIndex === messageIds.length - 1 || selectedMediaMessageIndex === -1;\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaMessageIndex;\n  }\n  const slideAnimation = animationLevel >= 1 ? 'mv-slide' : 'none';\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2;\n\n  /* Controls */\n  const [isFooterHidden, setIsFooterHidden] = useState<boolean>(false);\n  const [canPanZoomWrap, setCanPanZoomWrap] = useState(false);\n  const [isZoomed, setIsZoomed] = useState<boolean>(false);\n  const [zoomLevel, setZoomLevel] = useState<number>(1);\n  const [panDelta, setPanDelta] = useState({ x: 0, y: 0 });\n\n  /* Media data */\n  function getMediaHash(isFull?: boolean) {\n    if (isAvatar && profilePhotoIndex !== undefined) {\n      const { photos } = avatarOwner!;\n      return photos && photos[profilePhotoIndex]\n        ? `photo${photos[profilePhotoIndex].id}?size=c`\n        : getChatAvatarHash(avatarOwner!, isFull ? 'big' : 'normal');\n    }\n\n    return message && getMessageMediaHash(message, isFull ? 'viewerFull' : 'viewerPreview');\n  }\n\n  const pictogramBlobUrl = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const { mediaData: fullMediaBlobUrl, loadProgress } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const fileName = message\n    ? getMessageFileName(message)\n    : isAvatar\n      ? `avatar${avatarOwner!.id}-${profilePhotoIndex}.jpg`\n      : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = AVATAR_FULL_DIMENSIONS;\n  }\n\n  useEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return;\n    }\n\n    document.body.classList.toggle('is-media-viewer-open', isOpen);\n  }, [isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevOrigin = usePrevious(origin);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && !prevMessage && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      const textParts = message ? renderMessageText(message) : undefined;\n      const hasFooter = Boolean(textParts);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo,\n  ]);\n\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (isZoomed) {\n      setCanPanZoomWrap(true);\n    } else {\n      timer = window.setTimeout(() => {\n        setCanPanZoomWrap(false);\n      }, ANIMATION_DURATION);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [isZoomed]);\n\n  const closeZoom = () => {\n    setIsZoomed(false);\n    setZoomLevel(1);\n    setPanDelta({ x: 0, y: 0 });\n  };\n\n  const handleZoomToggle = useCallback(() => {\n    setIsZoomed(!isZoomed);\n    setZoomLevel(!isZoomed ? 1.5 : 1);\n    if (isZoomed) {\n      setPanDelta({ x: 0, y: 0 });\n    }\n  }, [isZoomed]);\n\n  const handleZoomValue = useCallback((level: number, canCloseZoom = false) => {\n    setZoomLevel(level);\n    if (level === 1 && canCloseZoom) {\n      closeZoom();\n    }\n  }, []);\n\n  const close = useCallback(() => {\n    closeMediaViewer();\n    closeZoom();\n  }, [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    close();\n    focusMessage({ chatId, threadId, messageId });\n  }, [close, chatId, threadId, focusMessage, messageId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    closeZoom();\n  }, [openForwardMenu, chatId, messageId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    if (isZoomed) {\n      closeZoom();\n    } else {\n      close();\n    }\n  }) : undefined), [close, isOpen, isZoomed]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  // Prevent refresh when rotating device to watch a video\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  const getMessageId = useCallback((fromId: number, direction: number): number => {\n    let index = messageIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < messageIds.length - 1)) {\n      index += direction;\n    }\n\n    return messageIds[index];\n  }, [messageIds]);\n\n  const selectPreviousMedia = useCallback(() => {\n    if (isFirst) {\n      return;\n    }\n\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: messageId ? getMessageId(messageId, -1) : undefined,\n      origin,\n    });\n  }, [chatId, threadId, getMessageId, isFirst, messageId, openMediaViewer, origin]);\n\n  const selectNextMedia = useCallback(() => {\n    if (isLast) {\n      return;\n    }\n\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: messageId ? getMessageId(messageId, 1) : undefined,\n      origin,\n    });\n  }, [chatId, threadId, getMessageId, isLast, messageId, openMediaViewer, origin]);\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          selectPreviousMedia();\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          selectNextMedia();\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  });\n\n  // Support for swipe gestures and closing on click\n  useEffect(() => {\n    const element = document.querySelector<HTMLDivElement>('.slide-container > .active, .slide-container > .to');\n    if (!element) {\n      return undefined;\n    }\n\n    const shouldCloseOnVideo = isGif && !IS_IOS;\n\n    return captureEvents(element, {\n      // eslint-disable-next-line max-len\n      excludedClosestSelector: `.backdrop, .navigation, .media-viewer-head, .media-viewer-footer${!shouldCloseOnVideo ? ', .VideoPlayer' : ''}`,\n      onClick: () => {\n        if (!isZoomed && !IS_TOUCH_ENV) {\n          close();\n        }\n      },\n      onSwipe: IS_TOUCH_ENV ? (e, direction) => {\n        if (direction === SwipeDirection.Right) {\n          selectPreviousMedia();\n        } else if (direction === SwipeDirection.Left) {\n          selectNextMedia();\n        } else if (!(e.target && (e.target as HTMLElement).closest('.MediaViewerFooter'))) {\n          close();\n        }\n\n        return true;\n      } : undefined,\n    });\n  }, [close, isFooterHidden, isGif, isPhoto, isZoomed, selectNextMedia, selectPreviousMedia]);\n\n  const handlePan = useCallback((x: number, y: number) => {\n    setPanDelta({ x, y });\n  }, []);\n\n  const handleToggleFooterVisibility = useCallback(() => {\n    if (IS_TOUCH_ENV && (isPhoto || isGif)) {\n      setIsFooterHidden(!isFooterHidden);\n    }\n  }, [isFooterHidden, isGif, isPhoto]);\n\n  const lang = useLang();\n\n  useHistoryBack(isOpen, closeMediaViewer, openMediaViewer, {\n    chatId,\n    threadId,\n    messageId,\n    origin,\n    avatarOwnerId: avatarOwner && avatarOwner.id,\n  });\n\n  function renderSlide(isActive: boolean) {\n    if (isAvatar) {\n      return (\n        <div key={chatId} className=\"media-viewer-content\">\n          {renderPhoto(\n            fullMediaBlobUrl || previewBlobUrl,\n            calculateMediaViewerDimensions(AVATAR_FULL_DIMENSIONS, false),\n            !IS_SINGLE_COLUMN_LAYOUT && !isZoomed,\n          )}\n        </div>\n      );\n    } else if (message) {\n      const textParts = renderMessageText(message);\n      const hasFooter = Boolean(textParts);\n\n      return (\n        <div\n          key={messageId}\n          className={`media-viewer-content ${hasFooter ? 'has-footer' : ''}`}\n          onClick={handleToggleFooterVisibility}\n        >\n          {isPhoto && renderPhoto(\n            localBlobUrl || fullMediaBlobUrl || previewBlobUrl || pictogramBlobUrl,\n            message && calculateMediaViewerDimensions(dimensions!, hasFooter),\n            !IS_SINGLE_COLUMN_LAYOUT && !isZoomed,\n          )}\n          {isVideo && (\n            <VideoPlayer\n              key={messageId}\n              url={localBlobUrl || fullMediaBlobUrl}\n              isGif={isGif}\n              posterData={bestImageData}\n              posterSize={message && calculateMediaViewerDimensions(dimensions!, hasFooter, true)}\n              loadProgress={loadProgress}\n              fileSize={videoSize!}\n              isMediaViewerOpen={isOpen}\n              noPlay={!isActive}\n              onClose={close}\n            />\n          )}\n          {textParts && (\n            <MediaViewerFooter\n              text={textParts}\n              onClick={handleFooterClick}\n              isHidden={isFooterHidden && (!isVideo || isGif)}\n              isForVideo={isVideo && !isGif}\n            />\n          )}\n        </div>\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderSenderInfo() {\n    return isAvatar ? (\n      <SenderInfo\n        key={avatarOwner!.id}\n        chatId={avatarOwner!.id}\n        isAvatar\n      />\n    ) : (\n      <SenderInfo\n        key={messageId}\n        chatId={chatId}\n        messageId={messageId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      className={isZoomed ? 'zoomed' : ''}\n      isOpen={isOpen}\n    >\n      {() => (\n        <>\n          <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {IS_SINGLE_COLUMN_LAYOUT && (\n              <Button\n                className=\"media-viewer-close\"\n                round\n                size=\"smaller\"\n                color=\"translucent-white\"\n                ariaLabel={lang('Close')}\n                onClick={close}\n              >\n                <i className=\"icon-close\" />\n              </Button>\n            )}\n            <Transition activeKey={animationKey.current!} name={headerAnimation}>\n              {renderSenderInfo}\n            </Transition>\n            <MediaViewerActions\n              mediaData={fullMediaBlobUrl || previewBlobUrl}\n              isVideo={isVideo}\n              isZoomed={isZoomed}\n              message={message}\n              fileName={fileName}\n              onCloseMediaViewer={close}\n              onForward={handleForward}\n              onZoomToggle={handleZoomToggle}\n              isAvatar={isAvatar}\n            />\n          </div>\n          <PanZoom\n            noWrap={!canPanZoomWrap}\n            canPan={isZoomed}\n            panDeltaX={panDelta.x}\n            panDeltaY={panDelta.y}\n            zoomLevel={zoomLevel}\n            onPan={handlePan}\n          >\n            <Transition\n              className=\"slide-container\"\n              activeKey={selectedMediaMessageIndex}\n              name={slideAnimation}\n            >\n              {renderSlide}\n            </Transition>\n          </PanZoom>\n          {!isFirst && (\n            <button\n              type=\"button\"\n              className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n              aria-label={lang('AccDescrPrevious')}\n              dir={lang.isRtl ? 'rtl' : undefined}\n              onClick={selectPreviousMedia}\n            />\n          )}\n          {!isLast && (\n            <button\n              type=\"button\"\n              className={`navigation next ${isVideo && !isGif && 'inline'}`}\n              aria-label={lang('Next')}\n              dir={lang.isRtl ? 'rtl' : undefined}\n              onClick={selectNextMedia}\n            />\n          )}\n          <ZoomControls\n            isShown={isZoomed}\n            onChangeZoom={handleZoomValue}\n          />\n        </>\n      )}\n    </ShowTransition>\n  );\n};\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean) {\n  return blobUrl\n    ? (\n      <img\n        src={blobUrl}\n        alt=\"\"\n        // @ts-ignore teact feature\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n        draggable={Boolean(canDrag)}\n      />\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        // @ts-ignore teact feature\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n    } = global.mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && messageId)) {\n        return { animationLevel };\n      }\n\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message) {\n        return { animationLevel };\n      }\n\n      return {\n        chatId,\n        messageId,\n        senderId: message.senderId,\n        origin,\n        message,\n        animationLevel,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        messageId: -1,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        profilePhotoIndex: profilePhotoIndex || 0,\n        animationLevel,\n        origin,\n      };\n    }\n\n    if (!(chatId && threadId && messageId)) {\n      return { animationLevel };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, messageId);\n    } else {\n      message = selectChatMessage(global, chatId, messageId);\n    }\n\n    if (!message) {\n      return { animationLevel };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      senderId: message.senderId,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openMediaViewer', 'closeMediaViewer', 'openForwardMenu', 'focusMessage',\n  ]),\n)(MediaViewer));\n","import { RefObject } from 'react';\nimport React, {\n  FC, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\n\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\nimport { isUserId } from '../../modules/helpers';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  isOpen: boolean;\n  filterRef: RefObject<HTMLInputElement>;\n  filterPlaceholder: string;\n  filter: string;\n  onFilterChange: (filter: string) => void;\n  loadMore: NoneToVoidFunction;\n  onSelectChatOrUser: (chatOrUserId: string) => void;\n  onClose: NoneToVoidFunction;\n};\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  filterRef,\n  filter,\n  filterPlaceholder,\n  onFilterChange,\n  onClose,\n  loadMore,\n  onSelectChatOrUser,\n}) => {\n  const lang = useLang();\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(filter));\n\n  useInputFocusOnOpen(filterRef, isOpen, () => { onFilterChange(''); });\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onFilterChange(e.currentTarget.value);\n  }, [onFilterChange]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      onSelectChatOrUser(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const modalHeader = (\n    <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel={lang('Close')}\n        onClick={onClose}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <InputText\n        ref={filterRef}\n        value={filter}\n        onChange={handleFilterChange}\n        onKeyDown={handleKeyDown}\n        placeholder={filterPlaceholder}\n      />\n    </div>\n  );\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"ChatOrUserPicker\"\n      header={modalHeader}\n    >\n      {viewportIds?.length ? (\n        <InfiniteScroll\n          className=\"picker-list custom-scroll\"\n          items={viewportIds}\n          onLoadMore={getMore}\n          noScrollRestore={Boolean(filter)}\n          ref={containerRef}\n          onKeyDown={handleKeyDown}\n        >\n          {viewportIds.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable force-rounded-corners\"\n              onClick={() => onSelectChatOrUser(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo status={id === currentUserId ? lang('SavedMessagesInfo') : undefined} userId={id} />\n              ) : (\n                <GroupChatInfo chatId={id} />\n              )}\n            </ListItem>\n          ))}\n        </InfiniteScroll>\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import React, {\n  FC, useMemo, useState, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { getCanPostInChat, getChatTitle, sortChatIds } from '../../modules/helpers';\nimport searchWords from '../../util/searchWords';\nimport { pick, unique } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport ChatOrUserPicker from '../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  pinnedIds?: string[];\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  orderedPinnedIds?: string[];\n  currentUserId?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setForwardChatId' | 'exitForwardMode' | 'loadMoreChats'>;\n\nconst ForwardPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatsById,\n  pinnedIds,\n  activeListIds,\n  archivedListIds,\n  currentUserId,\n  isOpen,\n  setForwardChatId,\n  exitForwardMode,\n  loadMoreChats,\n}) => {\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  const chatIds = useMemo(() => {\n    const listIds = [\n      ...(activeListIds || []),\n      ...(archivedListIds || []),\n    ];\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    return sortChatIds([\n      ...listIds.filter((id) => {\n        const chat = chatsById[id];\n        if (!chat) {\n          return true;\n        }\n\n        if (!getCanPostInChat(chat, MAIN_THREAD_ID)) {\n          return false;\n        }\n\n        if (!filter) {\n          return true;\n        }\n\n        return searchWords(getChatTitle(lang, chatsById[id], undefined, id === currentUserId), filter);\n      }),\n    ], chatsById, undefined, priorityIds);\n  }, [activeListIds, archivedListIds, chatsById, currentUserId, filter, lang, pinnedIds]);\n\n  const handleSelectUser = useCallback((userId: string) => {\n    setForwardChatId({ id: userId });\n  }, [setForwardChatId]);\n\n  return (\n    <ChatOrUserPicker\n      currentUserId={currentUserId}\n      isOpen={isOpen}\n      chatOrUserIds={chatIds}\n      filterRef={filterRef}\n      filterPlaceholder={lang('ForwardTo')}\n      filter={filter}\n      onFilterChange={setFilter}\n      loadMore={loadMoreChats}\n      onSelectChatOrUser={handleSelectUser}\n      onClose={exitForwardMode}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      pinnedIds: orderedPinnedIds.active,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      currentUserId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setForwardChatId', 'exitForwardMode', 'loadMoreChats']),\n)(ForwardPicker));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiError, ApiInviteInfo } from '../../api/types';\n\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport renderText from '../common/helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './Dialogs.scss';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo)[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'dismissDialog' | 'acceptInviteConfirmation'>;\n\nconst Dialogs: FC<StateProps & DispatchProps> = ({ dialogs, dismissDialog, acceptInviteConfirmation }) => {\n  const lang = useLang();\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, participantsCount, isChannel,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      dismissDialog();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n\n    return (\n      <Modal\n        isOpen\n        onClose={dismissDialog}\n        className=\"error\"\n        title={title}\n      >\n        {participantsCount !== undefined && <p>{participantsText}</p>}\n        <Button isText className=\"confirm-dialog-button\" onClick={handleJoinClick}>{joinText}</Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={dismissDialog}>{lang('Cancel')}</Button>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen\n        onClose={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error) : renderText(error.message!, ['emoji', 'br'])}\n        <div>\n          <Button isText onClick={dismissDialog}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return (\n    <div id=\"Dialogs\">\n      {dialogs.map(renderDialog)}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['dialogs']),\n  (setGlobal, actions): DispatchProps => pick(actions, ['dismissDialog', 'acceptInviteConfirmation']),\n)(Dialogs));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiNotification } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'dismissNotification'>;\n\nconst Notifications: FC<StateProps & DispatchProps> = ({ notifications, dismissNotification }) => {\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({ message, localId }) => (\n        <Notification\n          message={renderText(message, ['emoji', 'br', 'links', 'simple_markdown'])}\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['notifications']),\n  (setGlobal, actions): DispatchProps => pick(actions, ['dismissNotification']),\n)(Notifications));\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'toggleSafeLinkModal'>;\n\nconst SafeLinkModal: FC<OwnProps & DispatchProps> = ({ url, toggleSafeLinkModal }) => {\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(url);\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, ['toggleSafeLinkModal']),\n)(SafeLinkModal));\n","import React, {\n  FC, memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString } from '../../util/dateFormat';\nimport useLang, { LangFn } from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nexport type OwnProps = {\n  selectedAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n  const defaultSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const maxDate = maxAt ? new Date(maxAt) : undefined;\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(defaultSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(defaultSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(defaultSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(defaultSelectedDate);\n      setCurrentMonthAndYear(new Date(defaultSelectedDate.getFullYear(), defaultSelectedDate.getMonth(), 1));\n    }\n  }, [defaultSelectedDate, isOpen, prevIsOpen]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < defaultSelectedDate.getTime()) {\n      setSelectedDate(defaultSelectedDate);\n      setSelectedHours(formatInputTime(defaultSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(defaultSelectedDate.getMinutes()));\n    }\n  }, [defaultSelectedDate, isTimeInputFocused, isFutureMode, selectedDate]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  function handleSubmit() {\n    onSubmit(selectedDate);\n  }\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, isFutureMode ? now : undefined, isPastMode ? now : maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {!!gridDate && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {withTimePicker ? formatSubmitLabel(lang, selectedDate) : submitButtonLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay();\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day, 0, 0, 0, 0);\n  const fixedMinDate = minDate && new Date(minDate.getFullYear(), minDate.getMonth(), minDate.getDate(), 0, 0, 0, 0);\n  const fixedMaxDate = maxDate && new Date(maxDate.getFullYear(), maxDate.getMonth(), maxDate.getDate(), 0, 0, 0, 0);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(date, lang));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(date, lang)]);\n}\n\nexport default memo(CalendarModal);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchMessagesByDate' | 'closeHistoryCalendar'>;\n\nconst HistoryCalendar: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen, selectedAt, searchMessagesByDate, closeHistoryCalendar,\n}) => {\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: global.historyCalendarSelectedAt };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesByDate', 'closeHistoryCalendar',\n  ]),\n)(HistoryCalendar));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../api/types';\nimport { IAlbum } from '../../types';\n\nimport { GlobalActions } from '../../global/types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteMessages' | 'deleteScheduledMessages'>;\n\nconst DeleteMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n  deleteMessages,\n  deleteScheduledMessages,\n}) => {\n  const handleDeleteMessageForAll = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [deleteMessages, message.id, onClose, album]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n          {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'deleteMessages', 'deleteScheduledMessages',\n  ]),\n)(DeleteMessageModal));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../modules/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'pinMessage'>;\n\nconst PinMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  messageId,\n  chatId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n  pinMessage,\n}) => {\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, chatId, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [chatId, messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n        {lang('DialogPin')}\n      </Button>\n      {canPinForAll && (\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n          {contactName\n            ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n        </Button>\n      )}\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = !!chat && isChatChannel(chat);\n    const isGroup = !!chat && isChatBasicGroup(chat);\n    const isSuperGroup = !!chat && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['pinMessage']),\n)(PinMessageModal));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n        {lang('DialogUnpin')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import React, {\n  FC, useCallback, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { selectCanDeleteSelectedMessages, selectCurrentChat, selectUser } from '../../modules/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteMessages' | 'exitMessageSelectMode' | 'deleteScheduledMessages'>;\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n  deleteMessages,\n  deleteScheduledMessages,\n  exitMessageSelectMode,\n}) => {\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: true });\n  }, [deleteMessages, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  }, [isSchedule, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages]);\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName\n            ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n            : lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'deleteMessages',\n    'deleteScheduledMessages',\n    'exitMessageSelectMode',\n  ]),\n)(DeleteSelectedMessageModal));\n","import { ChangeEvent } from 'react';\n\nimport React, {\n  FC, memo, useCallback, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiReportReason } from '../../api/types';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\nimport InputText from '../ui/InputText';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageIds?: number[];\n  onClose: () => void;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'reportMessages' | 'exitMessageSelectMode'>;\n\nconst ReportMessageModal: FC<OwnProps & DispatchProps> = ({\n  isOpen,\n  messageIds,\n  reportMessages,\n  exitMessageSelectMode,\n  onClose,\n}) => {\n  const [selectedReason, setSelectedReason] = useState<ApiReportReason>('spam');\n  const [description, setDescription] = useState('');\n\n  const handleReport = () => {\n    reportMessages({ messageIds, reason: selectedReason, description });\n    exitMessageSelectMode();\n    onClose();\n  };\n\n  const handleSelectReason = useCallback((value: string) => {\n    setSelectedReason(value as ApiReportReason);\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setDescription(e.target.value);\n  }, []);\n\n  const lang = useLang();\n\n  const REPORT_OPTIONS: { value: ApiReportReason; label: string }[] = [\n    { value: 'spam', label: lang('lng_report_reason_spam') },\n    { value: 'violence', label: lang('lng_report_reason_violence') },\n    { value: 'pornography', label: lang('lng_report_reason_pornography') },\n    { value: 'childAbuse', label: lang('lng_report_reason_child_abuse') },\n    { value: 'copyright', label: lang('ReportPeer.ReasonCopyright') },\n    { value: 'other', label: lang('lng_report_reason_other') },\n  ];\n\n  if (!messageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen ? handleReport : undefined}\n      className=\"report\"\n      title={lang('lng_report_message_title')}\n    >\n      <RadioGroup\n        name=\"report-message\"\n        options={REPORT_OPTIONS}\n        onChange={handleSelectReason}\n        selected={selectedReason}\n      />\n      <InputText\n        label={lang('lng_report_reason_description')}\n        value={description}\n        onChange={handleDescriptionChange}\n      />\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleReport}>\n        {lang('lng_report_button')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined, (setGlobal, actions): DispatchProps => pick(actions, [\n    'reportMessages', 'exitMessageSelectMode',\n  ]),\n)(ReportMessageModal));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList,\n  selectSelectedMessagesCount,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport useFlag from '../../hooks/useFlag';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportMessageModal from '../common/ReportMessageModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  selectedMessageIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'exitMessageSelectMode' | 'openForwardMenuForSelectedMessages' | 'downloadSelectedMessages'\n)>;\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps & DispatchProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  selectedMessageIds,\n  exitMessageSelectMode,\n  openForwardMenuForSelectedMessages,\n  downloadSelectedMessages,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: openDeleteModal,\n        onDelete: openDeleteModal,\n        onEsc: exitMessageSelectMode,\n      })\n      : undefined;\n  }, [isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, exitMessageSelectMode]);\n\n  const handleDownload = useCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  }, [downloadSelectedMessages, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const lang = useLang();\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, disabled?: boolean, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'item',\n          disabled && 'disabled',\n          destructive && 'destructive',\n        )}\n        onClick={!disabled ? onClick : undefined}\n        title={label}\n      >\n        <i className={`icon-${icon}`} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={exitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {!!selectedMessagesCount && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && (\n              renderButton('forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages)\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && (\n              renderButton('download', lang('lng_media_download'), handleDownload)\n            )}\n            {renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, !canDeleteMessages, true)}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportMessageModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { type: messageListType } = selectCurrentMessageList(global) || {};\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = selectCanReportSelectedMessages(global);\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n\n    return {\n      isSchedule: messageListType === 'scheduled',\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      selectedMessageIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'exitMessageSelectMode', 'openForwardMenuForSelectedMessages', 'downloadSelectedMessages',\n  ]),\n)(MessageSelectToolbar));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nexport default (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isUserId, getPrivateChatUserId, selectIsChatMuted } from '../../../modules/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../modules/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  privateChatUser,\n  isPinned,\n  isMuted,\n  withUsername,\n  onClick,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    privateChatUser,\n    isPinned,\n    isMuted,\n    handleDelete: openDeleteModal,\n    handleChatFolderChange: openChatFolderModal,\n  }, true);\n\n  const handleClick = () => {\n    onClick(chatId);\n  };\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n      <ChatFolderModal\n        isOpen={isChatFolderModalOpen}\n        onClose={closeChatFolderModal}\n        chatId={chatId}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      privateChatUser,\n      isPinned,\n      isMuted,\n    };\n  },\n)(LeftSearchResultChat));\n","import React, {\n  FC, useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadTopUsers' | 'loadContactList' | 'openChat' | 'addRecentlyFoundChatId' | 'clearRecentlyFoundChats'\n)>;\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps & DispatchProps> = ({\n  topUserIds, usersById, recentlyFoundChatIds,\n  onReset, loadTopUsers, loadContactList, openChat,\n  addRecentlyFoundChatId, clearRecentlyFoundChats,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n      // Loading full contact list for quick local search before user enters the query\n      loadContactList();\n    });\n  }, [loadTopUsers, loadContactList]);\n\n  useHorizontalScroll(topUsersRef.current, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={clearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global.globalSearch;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadTopUsers',\n    'loadContactList',\n    'openChat',\n    'addRecentlyFoundChatId',\n    'clearRecentlyFoundChats',\n  ]),\n)(RecentContacts));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport {\n  getChatTitle,\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageSummaryText,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../modules/helpers';\nimport { selectChat, selectUser } from '../../../modules/selectors';\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\nimport useMedia from '../../../hooks/useMedia';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport VerifiedIcon from '../../common/VerifiedIcon';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusMessage'>;\n\nconst ChatMessage: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  focusMessage,\n  lastSyncTime,\n}) => {\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!IS_SINGLE_COLUMN_LAYOUT}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        withOnlineStatus\n        isSavedMessages={privateChatUser?.isSelf}\n        lastSyncTime={lastSyncTime}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{renderText(getChatTitle(lang, chat, privateChatUser))}</h3>\n            {chat.isVerified && <VerifiedIcon />}\n          </div>\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderMessageSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderMessageSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderText(getMessageSummaryText(lang, message));\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={isRoundVideo ? 'round' : undefined} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderText(getMessageSummaryText(lang, message, true), ['emoji', 'highlight'], { highlight: searchQuery })}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'focusMessage',\n  ]),\n)(ChatMessage));\n","import React, { FC, memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser, ApiChat, ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport searchWords from '../../../util/searchWords';\nimport { unique, pick } from '../../../util/iteratees';\nimport { getUserFullName, getMessageSummaryText, sortChatIds } from '../../../modules/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'addRecentlyFoundChatId' | 'searchMessagesGlobal' | 'setGlobalSearchChatId'\n)>;\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 3;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, usersById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect, openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n}) => {\n  const lang = useLang();\n\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        onReset();\n      }\n    },\n    [currentUserId, openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const foundContactIds = localContactIds\n      ? localContactIds.filter((id) => {\n        const user = usersById[id];\n        if (!user) {\n          return false;\n        }\n\n        const fullName = getUserFullName(user);\n        return (fullName && searchWords(fullName, searchQuery)) || searchWords(user.username, searchQuery);\n      })\n      : [];\n\n    return [\n      ...(currentUserId && searchWords(lang('SavedMessages'), searchQuery) ? [currentUserId] : []),\n      ...sortChatIds(unique([\n        ...foundContactIds,\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById),\n    ];\n  }, [\n    searchQuery, localContactIds, currentUserId, lang, localChatIds, localUserIds, chatsById, usersById,\n  ]);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(unique([...globalChatIds, ...globalUserIds]),\n      chatsById, true);\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = getMessageSummaryText(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {!!localResults.length && (\n        <div className=\"chat-selection no-selection no-scrollbar\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {!!localResults.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {!!globalResults.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {!!foundMessages.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n        usersById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = global.globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      usersById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n    'addRecentlyFoundChatId',\n    'searchMessagesGlobal',\n    'setGlobalSearchChatId',\n  ]),\n)(ChatResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { getMessageSummaryText } from '../../../modules/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport DateSuggest from './DateSuggest';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal')>;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  currentUserId,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  searchMessagesGlobal,\n  onSearchDateSelect,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n          chatId: currentUserId,\n        });\n      });\n    }\n  }, [currentUserId, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = getMessageSummaryText(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {!!foundMessages.length && foundMessages.map(renderFoundMessage)}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const { fetchingStatus, resultsByType } = global.globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['searchMessagesGlobal']),\n)(ChatMessageResults));\n","import { GlobalState } from '../../../../global/types';\nimport {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { ISettings } from '../../../../types';\n\nimport { selectTheme } from '../../../../modules/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: string;\n  activeDownloads: Record<string, number[]>;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = global.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = global.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'openMediaViewer')>;\n\nconst CURRENT_TYPE = 'media';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  openMediaViewer,\n}) => {\n  const lang = useLang();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((messageId: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      messageId,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={message.id}\n            idPrefix=\"search-media\"\n            message={message}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'openMediaViewer',\n  ]),\n)(MediaResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage')>;\n\nconst CURRENT_TYPE = 'links';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n  ]),\n)(LinkResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../modules/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage')>;\n\nconst CURRENT_TYPE = 'documents';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            onDateClick={handleMessageFocus}\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n  ]),\n)(FileResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage' | 'openAudioPlayer')>;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  activeDownloads,\n  searchMessagesGlobal,\n  focusMessage,\n  openAudioPlayer,\n}) => {\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId, origin: AudioOrigin.Search });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n    'openAudioPlayer',\n  ]),\n)(AudioResults));\n","import React, {\n  FC, memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport UserChatResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('setGlobalSearchContent' | 'setGlobalSearchDate')>;\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  setGlobalSearchContent,\n  setGlobalSearchDate,\n  onReset,\n}) => {\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack(isActive, onReset, undefined, undefined, true);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slide-reversed' : 'slide'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <UserChatResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = global.globalSearch;\n\n    return { currentContent, chatId };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setGlobalSearchContent', 'setGlobalSearchDate']),\n)(LeftSearch));\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nexport default () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'signOut' | 'deleteChatFolder'>;\n\nconst SettingsHeader: FC<OwnProps & DispatchProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  signOut,\n  deleteChatFolder,\n  onScreenSelect,\n}) => {\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n  const [isDeleteFolderDialogOpen, setIsDeleteFolderDialogOpen] = useState(false);\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(true);\n  }, []);\n\n  const closeDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(false);\n  }, []);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteFolderConfirmation();\n    deleteChatFolder({ id: editedFolderId });\n    onReset();\n  }, [editedFolderId, closeDeleteFolderConfirmation, deleteChatFolder, onReset]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n\n            {editedFolderId && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            {(currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList) ? (\n                <h3>{lang('FilterInclude')}</h3>\n              ) : (\n                <h3>{lang('FilterExclude')}</h3>\n              )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('SETTINGS')}</h3>\n\n            <Button\n              round\n              ripple={!IS_SINGLE_COLUMN_LAYOUT}\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isDeleteFolderDialogOpen}\n        onClose={closeDeleteFolderConfirmation}\n        text={lang('FilterDeleteAlert')}\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDeleteFolderMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, ['signOut', 'deleteChatFolder']),\n)(SettingsHeader));\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\nimport { ApiUser } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadProfilePhotos'>;\n\nconst SettingsMain: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  loadProfilePhotos,\n  currentUser,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  const profileId = currentUser?.id;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Main);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadProfilePhotos']),\n)(SettingsMain));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\n\nimport { debounce } from '../../util/schedulers';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkUsername: AnyToVoidFunction;\n  onChange: (value: string | false) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX = 'https://t.me/';\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username);\n}\n\nconst SettingsEditProfile: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkUsername,\n  onChange,\n}) => {\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, `${label} is too short`];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, `${label} is too long`];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, `${label} contains invalid characters`];\n    }\n\n    if (isUsernameAvailable === undefined) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      isUsernameAvailable ? lang(`${langPrefix}Available`, 'Username') : undefined,\n      isUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, isUsernameAvailable, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n    e.target.value = `${asLink ? LINK_PREFIX : ''}${newUsername}`;\n\n    const isValid = isUsernameValid(newUsername);\n\n    if (isValid) {\n      runDebouncedForCheckUsername(() => {\n        checkUsername({ username: newUsername });\n      });\n    }\n\n    if (onChange) {\n      onChange(isValid ? newUsername : false);\n    }\n  }, [asLink, checkUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n    />\n  );\n};\n\nexport default memo(SettingsEditProfile);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { ProfileEditProgress, SettingsScreens } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport { selectUser } from '../../../modules/selectors';\nimport { getChatAvatarHash } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport renderText from '../../common/helpers/renderText';\nimport UsernameInput from '../../common/UsernameInput';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  currentUsername?: string;\n  progress?: ProfileEditProgress;\n  isUsernameAvailable?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadCurrentUser' | 'updateProfile' | 'checkUsername'\n)>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst MAX_BIO_LENGTH = 70;\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\nconst ERROR_BIO_TOO_LONG = 'Bio can\\' be longer than 70 characters';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  currentUsername,\n  progress,\n  isUsernameAvailable,\n  loadCurrentUser,\n  updateProfile,\n  checkUsername,\n}) => {\n  const lang = useLang();\n\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [username, setUsername] = useState<string | false>(currentUsername || '');\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = username === false;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || isUsernameAvailable === true;\n  }, [photo, isProfileFieldsTouched, isUsernameError, isUsernameAvailable]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.EditProfile);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setUsername(value);\n    setIsUsernameTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    if (trimmedBio.length > MAX_BIO_LENGTH) {\n      setError(ERROR_BIO_TOO_LONG);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    username, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-edit-profile\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <InputText\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            error={error === ERROR_BIO_TOO_LONG ? error : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={username || ''}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkUsername={checkUsername}\n            onChange={handleUsernameChange}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {username && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">https://t.me/{username}</span>\n            </p>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const { progress, isUsernameAvailable } = global.profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    if (!currentUser) {\n      return {\n        progress,\n        isUsernameAvailable,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      username: currentUsername,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      currentUsername,\n      progress,\n      isUsernameAvailable,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadCurrentUser',\n    'updateProfile',\n    'checkUsername',\n  ]),\n)(SettingsEditProfile));\n","import React, {\n  FC, memo, useMemo, useCallback, useState, useEffect,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\nimport { ApiChatFolder, ApiChat, ApiUser } from '../../../../api/types';\nimport { NotifyException, NotifySettings, SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { pick } from '../../../../util/iteratees';\nimport { selectNotifyExceptions, selectNotifySettings } from '../../../../modules/selectors';\nimport { throttle } from '../../../../util/schedulers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport { getFolderDescriptionText } from '../../../../modules/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\ntype OwnProps = {\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  orderedFolderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadRecommendedChatFolders' | 'addChatFolder' | 'showDialog'>;\n\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst MAX_ALLOWED_FOLDERS = 10;\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps & DispatchProps> = ({\n  onCreateFolder,\n  onEditFolder,\n  isActive,\n  onScreenSelect,\n  onReset,\n  chatsById,\n  usersById,\n  orderedFolderIds,\n  foldersById,\n  recommendedChatFolders,\n  notifySettings,\n  notifyExceptions,\n  loadRecommendedChatFolders,\n  addChatFolder,\n  showDialog,\n}) => {\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersAll').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, showDialog, onCreateFolder]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Folders);\n\n  const userFolders = useMemo(() => {\n    if (!orderedFolderIds) {\n      return undefined;\n    }\n\n    const chatIds = Object.keys(chatsById);\n\n    return orderedFolderIds.map((id) => {\n      const folder = foldersById[id];\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(\n          lang, chatsById, usersById, folder, chatIds, notifySettings, notifyExceptions,\n        ),\n      };\n    });\n  }, [orderedFolderIds, chatsById, foldersById, usersById, notifySettings, notifyExceptions, lang]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, addChatFolder, showDialog]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header\">\n        <div className=\"settings-content-icon\">\n          {animationData && (\n            <AnimatedSticker\n              id=\"settingsFoldersMain\"\n              size={STICKER_SIZE_FOLDER_SETTINGS}\n              animationData={animationData}\n              play={isAnimationLoaded}\n              noLoop\n              onLoad={handleAnimationLoad}\n            />\n          )}\n        </div>\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n          className=\"with-icon mb-2\"\n          color=\"primary\"\n          size=\"smaller\"\n          pill\n          fluid\n          onClick={handleCreateFolder}\n          isRtl={lang.isRtl}\n        >\n          <i className=\"icon-add\" />\n          {lang('CreateNewFilter')}\n        </Button>\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        {userFolders?.length ? userFolders.map((folder) => (\n          <ListItem\n            className=\"mb-2 no-icon\"\n            narrow\n            multiline\n            onClick={() => onEditFolder(foldersById[folder.id])}\n          >\n            <span className=\"title\">{folder.title}</span>\n            <span className=\"subtitle\">{folder.subtitle}</span>\n          </ListItem>\n        )) : userFolders && !userFolders.length ? (\n          <p className=\"settings-item-description my-4\" dir=\"auto\">\n            You have no folders yet.\n          </p>\n        ) : <Loading />}\n      </div>\n\n      {(recommendedChatFolders && !!recommendedChatFolders.length) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{folder.title}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: { byId: chatsById },\n      users: { byId: usersById },\n    } = global;\n\n    const {\n      orderedIds: orderedFolderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      chatsById,\n      usersById,\n      orderedFolderIds,\n      foldersById,\n      recommendedChatFolders,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadRecommendedChatFolders', 'addChatFolder', 'showDialog']),\n)(SettingsFoldersMain));\n","import React, { FC } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { findIntersectionWithSet, pick } from '../../../../util/iteratees';\nimport { isUserId } from '../../../../modules/helpers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  FolderEditDispatch,\n  FoldersState,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  onBack: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'editChatFolder' | 'addChatFolder' | 'loadMoreChats'>;\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps & DispatchProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  isActive,\n  onScreenSelect,\n  onReset,\n  onBack,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n  editChatFolder,\n  addChatFolder,\n  loadMoreChats,\n}) => {\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersNew').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  useEffect(() => {\n    if (\n      visibleIncludedChatIds.length < includedChatIds.length\n      || visibleExcludedChatIds.length < excludedChatIds.length\n    ) {\n      loadMoreChats({ listType: 'active' });\n    }\n  }, [\n    loadMoreChats,\n    excludedChatIds.length,\n    includedChatIds.length,\n    visibleExcludedChatIds.length,\n    visibleIncludedChatIds.length,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onBack, onScreenSelect, state.mode === 'edit'\n    ? SettingsScreens.FoldersEditFolder\n    : SettingsScreens.FoldersCreateFolder);\n\n  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }\n\n  function handleSubmit() {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-content-header\">\n          <div className=\"settings-content-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"settingsFoldersEdit\"\n                size={STICKER_SIZE_FOLDER_SETTINGS}\n                animationData={animationData}\n                play={isAnimationLoaded && String(state.folderId)}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang(state.error)}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={!!state.isTouched}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { listIds } = global.chats;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['editChatFolder', 'addChatFolder', 'loadMoreChats']),\n)(SettingsFoldersEdit));\n","import React, {\n  FC, useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\n\nimport { isUserId } from '../../../../modules/helpers';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n  FolderChatType,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n  onLoadMore: () => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_CHATS = 100;\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\nconst SettingsFoldersChatsPicker: FC<OwnProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  onLoadMore,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n  const hasMaxChats = selectedIds.length >= MAX_CHATS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        onClick={() => handleItemClick(id)}\n        ripple\n        disabled={!isSelected && hasMaxChats}\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(onLoadMore, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        {!hasMaxChats ? (\n          <InputText\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={lang('Search')}\n          />\n        ) : (\n          <p className=\"max-items-reached\" dir=\"auto\">\n            {`Sorry, you can't add more than ${MAX_CHATS} chats.`}\n          </p>\n        )}\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <>\n            <h4 key=\"header1\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChatTypes')}\n            </h4>\n            {chatTypes.map(renderChatType)}\n            <div key=\"divider\" className=\"picker-list-divider\" />\n            <h4 key=\"header2\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(SettingsFoldersChatsPicker);\n","import React, {\n  FC, memo, useMemo, useCallback,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\nimport { ApiChat } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { pick } from '../../../../util/iteratees';\nimport searchWords from '../../../../util/searchWords';\nimport { prepareChatList, getChatTitle } from '../../../../modules/helpers';\nimport {\n  FoldersState,\n  FolderEditDispatch,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\n\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  listIds?: string[];\n  orderedPinnedIds?: string[];\n  archivedListIds?: string[];\n  archivedPinnedIds?: string[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadMoreChats'>;\n\nconst SettingsFoldersChatFilters: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  mode,\n  state,\n  dispatch,\n  chatsById,\n  listIds,\n  orderedPinnedIds,\n  archivedListIds,\n  archivedPinnedIds,\n  loadMoreChats,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n  const chats = useMemo(() => {\n    const activeChatArrays = listIds\n      ? prepareChatList(chatsById, listIds, orderedPinnedIds, 'all')\n      : undefined;\n    const archivedChatArrays = archivedListIds\n      ? prepareChatList(chatsById, archivedListIds, archivedPinnedIds, 'archived')\n      : undefined;\n\n    if (!activeChatArrays && !archivedChatArrays) {\n      return undefined;\n    }\n\n    return [\n      ...(activeChatArrays\n        ? [...activeChatArrays.pinnedChats, ...activeChatArrays.otherChats]\n        : []\n      ),\n      ...(archivedChatArrays ? archivedChatArrays.otherChats : []),\n    ];\n  }, [chatsById, listIds, orderedPinnedIds, archivedListIds, archivedPinnedIds]);\n\n  const displayedIds = useMemo(() => {\n    if (!chats) {\n      return undefined;\n    }\n\n    return chats\n      .filter((chat) => (\n        !chatFilter\n        || searchWords(getChatTitle(lang, chat), chatFilter)\n        || selectedChatIds.includes(chat.id)\n      ))\n      .map(({ id }) => id);\n  }, [chats, chatFilter, lang, selectedChatIds]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect,\n    mode === 'included' ? SettingsScreens.FoldersIncludedChats : SettingsScreens.FoldersExcludedChats);\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n      onLoadMore={loadMoreChats}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n    } = global;\n\n    return {\n      chatsById,\n      listIds: listIds.active,\n      orderedPinnedIds: orderedPinnedIds.active,\n      archivedPinnedIds: orderedPinnedIds.archived,\n      archivedListIds: listIds.archived,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadMoreChats']),\n)(SettingsFoldersChatFilters));\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onBack={onReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import React, {\n  FC, memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\ntype OwnProps = {\n  size?: number;\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCoverAnimated: FC<OwnProps> = ({\n  size = STICKER_SIZE_PICKER_HEADER,\n  stickerSet,\n  observeIntersection,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHash = `stickerSet${stickerSet.id}`;\n  const lottieData = useMedia(mediaHash, !isIntersecting, ApiMediaFormat.Lottie);\n  const transitionClassNames = useMediaTransition(lottieData);\n\n  const firstLetters = useMemo(() => {\n    if (lottieData) return undefined;\n\n    return getFirstLetters(stickerSet.title, 2);\n  }, [lottieData, stickerSet.title]);\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {firstLetters}\n      {lottieData && (\n        <AnimatedSticker\n          id={mediaHash}\n          size={size}\n          animationData={lottieData}\n          className={transitionClassNames}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCoverAnimated);\n","import React, {\n  FC, memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiStickerSet } from '../../../api/types';\n\nimport { getFirstLetters } from '../../../util/textFormat';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({ stickerSet, observeIntersection }) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaData = useMedia(stickerSet.hasThumbnail && `stickerSet${stickerSet.id}`, !isIntersecting);\n  const transitionClassNames = useMediaTransition(mediaData);\n\n  const firstLetters = useMemo(() => {\n    if (mediaData) return undefined;\n\n    return getFirstLetters(stickerSet.title, 2);\n  }, [mediaData, stickerSet.title]);\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {firstLetters}\n      <img src={mediaData} className={transitionClassNames} alt=\"\" />\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../../config';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport StickerSetCoverAnimated from '../../middle/composer/StickerSetCoverAnimated';\nimport StickerSetCover from '../../middle/composer/StickerSetCover';\nimport StickerButton from '../../common/StickerButton';\n\nimport './SettingsStickerSet.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst SettingsStickerSet: FC<OwnProps> = ({\n  stickerSet,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  const firstSticker = stickerSet.stickers?.[0];\n\n  if (stickerSet.hasThumbnail || !firstSticker) {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        inactive={!firstSticker}\n        onClick={() => firstSticker && onClick(firstSticker)}\n      >\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          {stickerSet.isAnimated ? (\n            <StickerSetCoverAnimated\n              size={STICKER_SIZE_GENERAL_SETTINGS}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          )}\n        </Button>\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  } else {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        onClick={() => onClick(firstSticker)}\n      >\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          observeIntersection={observeIntersection}\n        />\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  }\n};\n\nexport default memo(SettingsStickerSet);\n","import React, {\n  FC, useCallback, memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ISettings, TimeFormat } from '../../../types';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { IS_IOS, IS_MAC_OS, IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup, { IRadioOption } from '../../ui/RadioGroup';\nimport SettingsStickerSet from './SettingsStickerSet';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'messageTextSize' |\n  'animationLevel' |\n  'messageSendKeyCombo' |\n  'shouldAutoDownloadMediaFromContacts' |\n  'shouldAutoDownloadMediaInPrivateChats' |\n  'shouldAutoDownloadMediaInGroups' |\n  'shouldAutoDownloadMediaInChannels' |\n  'shouldAutoPlayGifs' |\n  'shouldAutoPlayVideos' |\n  'shouldSuggestStickers' |\n  'shouldLoopStickers' |\n  'timeFormat'\n)> & {\n  stickerSetIds?: string[];\n  stickerSetsById?: Record<string, ApiStickerSet>;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setSettingOption' | 'loadStickerSets' | 'loadAddedStickers'\n)>;\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  stickerSetIds,\n  stickerSetsById,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  shouldAutoDownloadMediaFromContacts,\n  shouldAutoDownloadMediaInPrivateChats,\n  shouldAutoDownloadMediaInGroups,\n  shouldAutoDownloadMediaInChannels,\n  shouldAutoPlayGifs,\n  shouldAutoPlayVideos,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  timeFormat,\n  setSettingOption,\n  loadStickerSets,\n  loadAddedStickers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [sticker, setSticker] = useState<ApiSticker>();\n\n  const lang = useLang();\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  useEffect(() => {\n    loadStickerSets();\n  }, [loadStickerSets]);\n\n  useEffect(() => {\n    if (stickerSetIds?.length) {\n      loadAddedStickers();\n    }\n  }, [stickerSetIds, loadAddedStickers]);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleStickerSetClick = useCallback((value: ApiSticker) => {\n    setSticker(value);\n    openModal();\n  }, [openModal]);\n\n  const stickerSets = stickerSetIds && stickerSetIds.map((id: string) => {\n    return stickerSetsById?.[id]?.installedDate ? stickerSetsById[id] : false;\n  }).filter<ApiStickerSet>(Boolean as any);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.General);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={(value) => setSettingOption({ messageSendKeyCombo: value })}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoDownloadMedia')}</h4>\n\n        <Checkbox\n          label={lang('Contacts')}\n          checked={shouldAutoDownloadMediaFromContacts}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaFromContacts: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutodownloadPrivateChats')}\n          checked={shouldAutoDownloadMediaInPrivateChats}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaInPrivateChats: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutodownloadGroupChats')}\n          checked={shouldAutoDownloadMediaInGroups}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaInGroups: isChecked })}\n        />\n        <Checkbox\n          label={lang('FilterChannels')}\n          checked={shouldAutoDownloadMediaInChannels}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaInChannels: isChecked })}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={shouldAutoPlayGifs}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoPlayGifs: isChecked })}\n        />\n        <Checkbox\n          label={lang('DataAndStorage.Autoplay.Videos')}\n          checked={shouldAutoPlayVideos}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoPlayVideos: isChecked })}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AccDescrStickers')}</h4>\n\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={(isChecked) => setSettingOption({ shouldSuggestStickers: isChecked })}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={(isChecked) => setSettingOption({ shouldLoopStickers: isChecked })}\n        />\n\n        <div className=\"mt-4\" ref={stickerSettingsRef}>\n          {stickerSets && stickerSets.map((stickerSet: ApiStickerSet) => (\n            <SettingsStickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersectionForCovers}\n              onClick={handleStickerSetClick}\n            />\n          ))}\n        </div>\n        {sticker && (\n          <StickerSetModal\n            isOpen={isModalOpen}\n            fromSticker={sticker}\n            onClose={closeModal}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'shouldAutoDownloadMediaFromContacts',\n        'shouldAutoDownloadMediaInPrivateChats',\n        'shouldAutoDownloadMediaInGroups',\n        'shouldAutoDownloadMediaInChannels',\n        'shouldAutoPlayGifs',\n        'shouldAutoPlayVideos',\n        'shouldSuggestStickers',\n        'shouldLoopStickers',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      stickerSetIds: global.stickers.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setSettingOption', 'loadStickerSets', 'loadAddedStickers',\n  ]),\n)(SettingsGeneral));\n","let fileSelector: HTMLInputElement;\n\nexport function openSystemFilesDialog(accept = '*', callback: (e: Event) => void, noMultiple = false) {\n  if (!fileSelector) {\n    fileSelector = document.createElement('input');\n    fileSelector.setAttribute('type', 'file');\n  }\n\n  fileSelector.setAttribute('accept', accept);\n\n  if (noMultiple) {\n    fileSelector.removeAttribute('multiple');\n  } else {\n    fileSelector.setAttribute('multiple', 'multiple');\n  }\n\n  // eslint-disable-next-line no-null/no-null\n  fileSelector.onchange = null;\n  fileSelector.value = '';\n  fileSelector.onchange = callback;\n\n  fileSelector.click();\n}\n","/* eslint-disable eqeqeq */\n/* eslint-disable prefer-template */\n/* eslint-disable prefer-const */\n/* eslint-disable prefer-destructuring */\n/* eslint-disable one-var */\n/* eslint-disable one-var-declaration-per-line */\n\nimport { preloadImage } from './files';\n\n/**\n * HEX > RGB\n * input: 'xxxxxx' (ex. 'ed15fa') case-insensitive\n * output: [r, g, b] ([0-255, 0-255, 0-255])\n */\nexport function hex2rgb(param: string): [number, number, number] {\n  return [\n    parseInt(param.substring(0, 2), 16),\n    parseInt(param.substring(2, 4), 16),\n    parseInt(param.substring(4, 6), 16),\n  ];\n}\n\n/**\n * RGB > HEX\n * input: [r, g, b] ([0-255, 0-255, 0-255])\n * output: 'xxxxxx' (ex. 'ff0000')\n */\nexport function rgb2hex(param: [number, number, number]) {\n  const p0 = param[0].toString(16);\n  const p1 = param[1].toString(16);\n  const p2 = param[2].toString(16);\n  return (p0.length == 1 ? '0' + p0 : p0) + (p1.length == 1 ? '0' + p1 : p1) + (p2.length == 1 ? '0' + p2 : p2);\n}\n\n/**\n * Converts an RGB color value to HSV. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and v in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSV representation\n */\nexport function rgb2hsb([r, g, b]: [number, number, number]): [number, number, number] {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  let max = Math.max(r, g, b), min = Math.min(r, g, b);\n  let h!: number, s: number, v: number = max;\n\n  let d = max - min;\n  s = max == 0 ? 0 : d / max;\n\n  if (max == min) {\n    h = 0; // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return [h, s, v];\n}\n\n/**\n * Converts an HSV color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes h, s, and v are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param   Number  h       The hue\n * @param   Number  s       The saturation\n * @param   Number  v       The value\n * @return  Array           The RGB representation\n */\nexport function hsb2rgb([h, s, v]: [number, number, number]): [number, number, number] {\n  let r!: number, g!: number, b!: number;\n\n  let i = Math.floor(h * 6);\n  let f = h * 6 - i;\n  let p = v * (1 - s);\n  let q = v * (1 - f * s);\n  let t = v * (1 - (1 - f) * s);\n\n  switch (i % 6) {\n    case 0:\n      r = v;\n      g = t;\n      b = p;\n      break;\n    case 1:\n      r = q;\n      g = v;\n      b = p;\n      break;\n    case 2:\n      r = p;\n      g = v;\n      b = t;\n      break;\n    case 3:\n      r = p;\n      g = q;\n      b = v;\n      break;\n    case 4:\n      r = t;\n      g = p;\n      b = v;\n      break;\n    case 5:\n      r = v;\n      g = p;\n      b = q;\n      break;\n  }\n\n  return [\n    Math.round(r * 255),\n    Math.round(g * 255),\n    Math.round(b * 255),\n  ];\n}\n\nexport async function getAverageColor(url: string): Promise<[number, number, number]> {\n  // Only visit every 5 pixels\n  const blockSize = 5;\n  const defaultRGB: [number, number, number] = [0, 0, 0];\n  let data;\n  let width;\n  let height;\n  let i = -4;\n  let length;\n  let rgb: [number, number, number] = [0, 0, 0];\n  let count = 0;\n\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext && canvas.getContext('2d');\n  if (!context) {\n    return defaultRGB;\n  }\n\n  const image = await preloadImage(url);\n  height = image.naturalHeight || image.offsetHeight || image.height;\n  width = image.naturalWidth || image.offsetWidth || image.width;\n  canvas.height = height;\n  canvas.width = width;\n\n  context.drawImage(image, 0, 0);\n\n  try {\n    data = context.getImageData(0, 0, width, height);\n  } catch (e) {\n    return defaultRGB;\n  }\n\n  length = data.data.length;\n\n  // eslint-disable-next-line no-cond-assign\n  while ((i += blockSize * 4) < length) {\n    ++count;\n    rgb[0] += data.data[i];\n    rgb[1] += data.data[i + 1];\n    rgb[2] += data.data[i + 2];\n  }\n\n  rgb[0] = Math.floor(rgb[0] / count);\n  rgb[1] = Math.floor(rgb[1] / count);\n  rgb[2] = Math.floor(rgb[2] / count);\n\n  return rgb;\n}\n\n// eslint-disable-next-line max-len\n// Function was adapted from https://github.com/telegramdesktop/tdesktop/blob/35ff621b5b52f7e3553fb0f990ea13ade7101b8e/Telegram/SourceFiles/data/data_wall_paper.cpp#L518\nexport function getPatternColor(rgbColor: [number, number, number]) {\n  let [hue, saturation, value] = rgb2hsb(rgbColor);\n\n  saturation = Math.min(1, saturation + 0.05 + 0.1 * (1 - saturation));\n  value = value > 0.5\n    ? Math.max(0, value * 0.65)\n    : Math.max(0, Math.min(1, 1 - value * 0.65));\n\n  return `hsla(${hue * 360}, ${saturation * 100}%, ${value * 100}%, .4)`;\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport { ApiWallpaper } from '../../../api/types';\nimport { ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import React, {\n  FC, memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadWallpapers' | 'uploadWallpaper' | 'setThemeSettings'\n)>;\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n  loadWallpapers,\n  uploadWallpaper,\n  setThemeSettings,\n}) => {\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      uploadWallpaper(files[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.GeneralChatBackground);\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadWallpapers', 'uploadWallpaper', 'setThemeSettings',\n  ]),\n)(SettingsGeneralBackground));\n","import { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport { captureEvents, RealTouchEvent } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../modules/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setThemeSettings'>;\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  theme,\n  backgroundColor,\n  setThemeSettings,\n}) => {\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.GeneralChatBackgroundColor);\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            // @ts-ignore\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            // @ts-ignore\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            // @ts-ignore\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setThemeSettings']),\n)(SettingsGeneralBackground));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadNotificationSettings' | 'updateContactSignUpNotification' |\n  'updateNotificationSettings' | 'updateWebNotificationSettings'\n)>;\n\nconst SettingsNotifications: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n  loadNotificationSettings,\n  updateContactSignUpNotification,\n  updateNotificationSettings,\n  updateWebNotificationSettings,\n}) => {\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Notifications);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          onChange={(e) => {\n            updateWebNotificationSettings({ hasWebNotifications: e.target.checked });\n          }}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPushNotifications}\n          onChange={(e) => {\n            updateWebNotificationSettings({ hasPushNotifications: e.target.checked });\n          }}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            disabled={!hasWebNotifications}\n            min={0}\n            max={10}\n            value={notificationSoundVolume}\n            onChange={(volume) => {\n              updateWebNotificationSettings({ notificationSoundVolume: volume });\n            }}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'contact', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'contact', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'group', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'group', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'broadcast', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'broadcast', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n    hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n    hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n    hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n    hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n    hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n    hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n    hasWebNotifications: global.settings.byKey.hasWebNotifications,\n    hasPushNotifications: global.settings.byKey.hasPushNotifications,\n    notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n  };\n},\n(setGlobal, actions): DispatchProps => pick(actions, [\n  'loadNotificationSettings',\n  'updateContactSignUpNotification',\n  'updateNotificationSettings',\n  'updateWebNotificationSettings',\n]))(SettingsNotifications));\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { PrivacyVisibility, SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPassword?: boolean;\n  blockedCount: number;\n  sessionsCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  visibilityPrivacyPhoneNumber?: PrivacyVisibility;\n  visibilityPrivacyLastSeen?: PrivacyVisibility;\n  visibilityPrivacyProfilePhoto?: PrivacyVisibility;\n  visibilityPrivacyForwarding?: PrivacyVisibility;\n  visibilityPrivacyGroupChats?: PrivacyVisibility;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadBlockedContacts' | 'loadAuthorizations' | 'loadPrivacySettings' | 'loadContentSettings' | 'updateContentSettings'\n)>;\n\nconst SettingsPrivacy: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  hasPassword,\n  blockedCount,\n  sessionsCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  visibilityPrivacyPhoneNumber,\n  visibilityPrivacyLastSeen,\n  visibilityPrivacyProfilePhoto,\n  visibilityPrivacyForwarding,\n  visibilityPrivacyGroupChats,\n  loadPrivacySettings,\n  loadBlockedContacts,\n  loadAuthorizations,\n  loadContentSettings,\n  updateContentSettings,\n}) => {\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Privacy);\n\n  function getVisibilityValue(visibility?: PrivacyVisibility) {\n    switch (visibility) {\n      case 'everybody':\n        return lang('P2PEverybody');\n\n      case 'contacts':\n        return lang('P2PContacts');\n\n      case 'nobody':\n        return lang('P2PNobody');\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('BlockedUsers')}</span>\n            {blockedCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang('Users', blockedCount)}\n              </span>\n            )}\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyActiveSessions)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('SessionsTitle')}</span>\n            {sessionsCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {sessionsCount === 1 ? '1 session' : `${sessionsCount} sessions`}\n              </span>\n            )}\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={updateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: { hasPassword, isSensitiveEnabled, canChangeSensitive },\n        privacy,\n      },\n      blocked,\n      activeSessions,\n    } = global;\n\n    return {\n      hasPassword,\n      blockedCount: blocked.totalCount,\n      sessionsCount: activeSessions.length,\n      isSensitiveEnabled,\n      canChangeSensitive,\n      visibilityPrivacyPhoneNumber: privacy.phoneNumber?.visibility,\n      visibilityPrivacyLastSeen: privacy.lastSeen?.visibility,\n      visibilityPrivacyProfilePhoto: privacy.profilePhoto?.visibility,\n      visibilityPrivacyForwarding: privacy.forwards?.visibility,\n      visibilityPrivacyGroupChats: privacy.chatInvite?.visibility,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadBlockedContacts', 'loadAuthorizations', 'loadPrivacySettings', 'loadContentSettings', 'updateContentSettings',\n  ]),\n)(SettingsPrivacy));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ISettings, LangCode, SettingsScreens } from '../../../types';\nimport { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\nimport { pick } from '../../../util/iteratees';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'languages' | 'language'>;\n\ntype DispatchProps = Pick<GlobalActions, 'loadLanguages' | 'setSettingOption'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  languages,\n  language,\n  loadLanguages,\n  setSettingOption,\n}) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  // TODO Throttle\n  useEffect(() => {\n    loadLanguages();\n  }, [loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode });\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Language);\n\n  return (\n    <div className=\"settings-content settings-item settings-language custom-scroll\">\n      {options ? (\n        <RadioGroup\n          name=\"keyboard-send-settings\"\n          options={options}\n          selected={selectedLanguage}\n          loadingOption={isLoading ? selectedLanguage : undefined}\n          onChange={handleChange}\n        />\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      languages: global.settings.byKey.languages,\n      language: global.settings.byKey.language,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadLanguages', 'setSettingOption',\n  ]),\n)(SettingsLanguage));\n","import { ApiPrivacyKey, SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n  }\n\n  return undefined;\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport { pick } from '../../../util/iteratees';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport { getPrivacyKey } from './helper/privacy';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Partial<ApiPrivacySettings> & {\n  chatsById?: Record<string, ApiChat>;\n  usersById?: Record<string, ApiUser>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setPrivacyVisibility'>;\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps & DispatchProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n  setPrivacyVisibility,\n}) => {\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            onClick={() => { onScreenSelect(allowedContactsScreen); }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            onClick={() => { onScreenSelect(deniedContactsScreen); }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {};\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setPrivacyVisibility']),\n)(SettingsPrivacyVisibility));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiSession } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  activeSessions: ApiSession[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadAuthorizations' | 'terminateAuthorization' | 'terminateAllAuthorizations'\n)>;\n\nconst SettingsPrivacyActiveSessions: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  activeSessions,\n  loadAuthorizations,\n  terminateAuthorization,\n  terminateAllAuthorizations,\n}) => {\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  useEffect(() => {\n    loadAuthorizations();\n  }, [loadAuthorizations]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const currentSession = useMemo(() => {\n    return activeSessions.find((session) => session.isCurrent);\n  }, [activeSessions]);\n\n  const otherSessions = useMemo(() => {\n    return activeSessions.filter((session) => !session.isCurrent);\n  }, [activeSessions]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.PrivacyActiveSessions);\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive className=\"no-icon\">\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.appName}</span>\n            <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('TerminateAllSessions')}\n        </ListItem>\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessions: ApiSession[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessions.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(session: ApiSession) {\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        className=\"no-icon\"\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.appName}</span>\n          <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n          <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {otherSessions && renderOtherSessions(otherSessions)}\n      {otherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text=\"Are you sure you want to terminate all other sessions?\"\n          confirmLabel=\"Terminate All Other Sessions\"\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nfunction getDeviceEnvironment(session: ApiSession) {\n  return `${session.deviceModel}${session.deviceModel ? ', ' : ''} ${session.platform} ${session.systemVersion}`;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      activeSessions: global.activeSessions,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadAuthorizations', 'terminateAuthorization', 'terminateAllAuthorizations',\n  ]),\n)(SettingsPrivacyActiveSessions));\n","import React, {\n  FC, useMemo, useState, memo, useRef, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../modules/helpers';\nimport searchWords from '../../../util/searchWords';\nimport { pick, unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'setUserSearchQuery' | 'blockContact'>;\n\nconst BlockUserModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n  loadContactList,\n  setUserSearchQuery,\n  blockContact,\n}) => {\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    setUserSearchQuery({ query: filter });\n  }, [filter, setUserSearchQuery]);\n\n  const filteredContactsId = useMemo(() => {\n    const availableContactsId = (contactIds || []).concat(localContactIds || []).filter((contactId) => {\n      return !blockedIds.includes(contactId) && contactId !== currentUserId;\n    });\n\n    return unique(availableContactsId).reduce<string[]>((acc, contactId) => {\n      if (\n        !filter\n        || !usersById[contactId]\n        || searchWords(getUserFullName(usersById[contactId]) || '', filter)\n        || usersById[contactId]?.username.toLowerCase().includes(filter)\n      ) {\n        acc.push(contactId);\n      }\n\n      return acc;\n    }, [])\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, filter, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    const { id: contactId, accessHash } = usersById[userId] || {};\n    if (!contactId || !accessHash) {\n      return;\n    }\n    blockContact({ contactId, accessHash });\n    onClose();\n  }, [blockContact, onClose, usersById]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactsId}\n      filterRef={filterRef}\n      filterPlaceholder={lang('BlockedUsers.BlockUser')}\n      filter={filter}\n      onFilterChange={setFilter}\n      loadMore={loadContactList}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: global.userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadContactList', 'setUserSearchQuery', 'blockContact',\n  ]),\n)(BlockUserModal));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { pick } from '../../../util/iteratees';\nimport {\n  getChatTitle, getUserFullName, isUserId,\n} from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'unblockContact'>;\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n  unblockContact,\n}) => {\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((contactId: string) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.PrivacyBlockedUsers);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\" dir=\"auto\">\n          <h3 dir=\"auto\">{renderText((isPrivate ? getUserFullName(user) : getChatTitle(lang, chat!)) || '')}</h3>\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {user && !user.phoneNumber && user.username && (\n            <div className=\"contact-username\" dir=\"auto\">@{user.username}</div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['unblockContact']),\n)(SettingsPrivacyBlockedUsers));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps & StateProps> = ({\n  isActive, onReset, animatedEmoji, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaEnabled);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <ListItem\n          icon=\"edit\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaEnabled));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../../common/PasswordMonkey';\nimport PasswordForm from '../../../common/PasswordForm';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  error?: string;\n  isLoading?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsTwoFaPassword: FC<OwnProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  error,\n  isLoading,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaPassword);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps & StateProps> = ({\n  isActive, onScreenSelect, onReset, animatedEmoji, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaDisabled);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaStart));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  screen: SettingsScreens;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onScreenSelect,\n  onReset,\n  screen,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = () => {\n    onSubmit();\n  };\n\n  const handleSkipConfirm = () => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  };\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps & StateProps> = ({\n  isActive, onReset, animatedEmoji, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = () => {\n    onScreenSelect(SettingsScreens.Privacy);\n  };\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaCongratulations);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🥳'),\n  };\n})(SettingsTwoFaCongratulations));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  screen: SettingsScreens;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onScreenSelect,\n  onReset,\n  screen,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  };\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { pick } from '../../../../util/iteratees';\nimport { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from './SettingsTwoFaPassword';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\ntype DispatchProps = Pick<GlobalActions, (\n  'updatePassword' | 'updateRecoveryEmail' | 'clearPassword' | 'provideTwoFaEmailCode' |\n  'checkPassword' | 'clearTwoFaError'\n)>;\n\nconst SettingsTwoFa: FC<OwnProps & StateProps & DispatchProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n  updatePassword,\n  checkPassword,\n  clearTwoFaError,\n  updateRecoveryEmail,\n  provideTwoFaEmailCode,\n  clearPassword,\n}) => {\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n          screen={currentScreen}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n          screen={currentScreen}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          screen={currentScreen}\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'updatePassword', 'updateRecoveryEmail', 'clearPassword', 'provideTwoFaEmailCode',\n    'checkPassword', 'clearTwoFaError',\n  ]),\n)(SettingsTwoFa));\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport { pick } from '../../../util/iteratees';\nimport searchWords from '../../../util/searchWords';\nimport { getPrivacyKey } from './helper/privacy';\nimport {\n  getChatTitle, isChatGroup, isUserId, prepareChatList,\n} from '../../../modules/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  listIds?: string[];\n  orderedPinnedIds?: string[];\n  archivedListIds?: string[];\n  archivedPinnedIds?: string[];\n  settings?: ApiPrivacySettings;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setPrivacySettings'>;\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps & DispatchProps> = ({\n  currentUserId,\n  isAllowList,\n  screen,\n  settings,\n  chatsById,\n  listIds,\n  orderedPinnedIds,\n  archivedListIds,\n  archivedPinnedIds,\n  setPrivacySettings,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  const chats = useMemo(() => {\n    const activeChatArrays = listIds\n      ? prepareChatList(chatsById, listIds, orderedPinnedIds, 'all')\n      : undefined;\n    const archivedChatArrays = archivedListIds\n      ? prepareChatList(chatsById, archivedListIds, archivedPinnedIds, 'archived')\n      : undefined;\n\n    if (!activeChatArrays && !archivedChatArrays) {\n      return undefined;\n    }\n\n    return [\n      ...(activeChatArrays\n        ? [\n          ...activeChatArrays.pinnedChats,\n          ...activeChatArrays.otherChats,\n        ]\n        : []\n      ),\n      ...(archivedChatArrays ? archivedChatArrays.otherChats : []),\n    ];\n  }, [chatsById, listIds, orderedPinnedIds, archivedListIds, archivedPinnedIds]);\n\n  const displayedIds = useMemo(() => {\n    if (!chats) {\n      return undefined;\n    }\n\n    return chats\n      .filter((chat) => (\n        ((isUserId(chat.id) && chat.id !== currentUserId) || isChatGroup(chat))\n        && (\n          !searchQuery\n        || searchWords(getChatTitle(lang, chat), searchQuery)\n        || selectedContactIds.includes(chat.id)\n        )\n      ))\n      .map(({ id }) => id);\n  }, [chats, currentUserId, lang, searchQuery, selectedContactIds]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen),\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysShareWithPlaceholder') : lang('NeverShareWithPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysShareWithTitle') : lang('NeverShareWithTitle')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      currentUserId,\n      chatsById,\n      listIds: listIds.active,\n      orderedPinnedIds: orderedPinnedIds.active,\n      archivedPinnedIds: orderedPinnedIds.archived,\n      archivedListIds: listIds.archived,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setPrivacySettings']),\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\nimport { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsPrivacyActiveSessions from './SettingsPrivacyActiveSessions';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.PrivacyActiveSessions,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: () => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            onScreenSelect={onScreenSelect}\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n            || screen === SettingsScreens.GeneralChatBackgroundColor\n            || screen === SettingsScreens.GeneralChatBackground\n            || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen || isTwoFaScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyActiveSessions:\n        return (\n          <SettingsPrivacyActiveSessions\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import React, {\n  FC, useEffect, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { pick } from '../../../util/iteratees';\nimport { getUserFullName, sortUserIds } from '../../../modules/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  contactIds?: string[];\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'openChat'>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ContactList: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive, onReset,\n  filter, usersById, contactIds, loadContactList, openChat, serverTimeOffset,\n}) => {\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  useHistoryBack(isActive, onReset);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const resultIds = filter ? contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, filter);\n    }) : contactIds;\n\n    return sortUserIds(resultIds, usersById, undefined, serverTimeOffset);\n  }, [contactIds, filter, usersById, serverTimeOffset]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            onClick={() => handleClick(id)}\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n\n    return {\n      usersById,\n      contactIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'openChat']),\n)(ContactList));\n","import React, {\n  FC, useCallback, useEffect, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport { pick, unique } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { getUserFullName, isUserBot, sortChatIds } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'setGlobalSearchQuery'>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst NewChatStep1: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  currentUserId,\n  usersById,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  loadContactList,\n  setGlobalSearchQuery,\n}) => {\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = localContactIds\n      ? sortChatIds(localContactIds.filter((id) => id !== currentUserId), chatsById)\n      : [];\n\n    if (!searchQuery) {\n      return contactIds;\n    }\n\n    const foundContactIds = contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, searchQuery);\n    });\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n\n        return !user || !isUserBot(user) || user.canBeInvitedToGroup;\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds,\n    currentUserId, usersById,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n    const { currentUserId } = global;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = global.globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      currentUserId,\n      usersById,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'setGlobalSearchQuery']),\n)(NewChatStep1));\n","import React, {\n  FC, useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ChatCreationProgress } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'createGroupChat' | 'createChannel'>;\n\n// TODO @implement\nconst MAX_USERS_FOR_LEGACY_CHAT = 199; // Accounting for current user\n\nconst NewChatStep2: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  isActive,\n  memberIds,\n  onReset,\n  creationProgress,\n  creationError,\n  createGroupChat,\n  createChannel,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset);\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (memberIds.length > MAX_USERS_FOR_LEGACY_CHAT) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, createGroupChat, photo, chatTitleEmptyError, chatTooManyUsersError]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = creationError || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = global.chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'createGroupChat', 'createChannel',\n  ]),\n)(NewChatStep2));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport { LeftColumnContent } from '../../types';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n  onContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({ isActive, onReset, onContentChange }) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onContentChange, LeftColumnContent.Archived);\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('ArchivedChats')}</h3>\n      </div>\n      <ChatList folderType=\"archived\" isActive={isActive} />\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import React, {\n  FC, useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChatFolder } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'editChatFolders'>;\n\nconst ChatFolderModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n  editChatFolders,\n}) => {\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id));\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id));\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n        {lang('FilterAddTo')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['editChatFolders']),\n)(ChatFolderModal));\n","import { ApiMediaFormat, ApiMessage } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../modules/helpers';\nimport { CLIPBOARD_ITEM_SUPPORTED, copyImageToClipboard, copyTextToClipboard } from '../../../../util/clipboard';\n\ntype ICopyOptions = {\n  label: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage, afterEffect?: () => void, onCopyLink?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      handler: () => {\n        const clipboardText = hasSelection && selection ? selection.toString() : text;\n        copyTextToClipboard(clipboardText);\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      handler: () => {\n        onCopyLink();\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nconst getTouchY = (e: WheelEvent | TouchEvent) => ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null) {\n  scrollLockEl = el;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import React, {\n  FC, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  isDownloading?: boolean;\n  onReply: () => void;\n  onEdit: () => void;\n  onPin: () => void;\n  onUnpin: () => void;\n  onForward: () => void;\n  onDelete: () => void;\n  onReport: () => void;\n  onFaveSticker: () => void;\n  onUnfaveSticker: () => void;\n  onSelect: () => void;\n  onSend: () => void;\n  onReschedule: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n  onDownload?: () => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  isOpen,\n  message,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canEdit,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  isDownloading,\n  onReply,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onDownload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  const copyOptions = getMessageCopyOptions(message, onClose, canCopyLink ? onCopyLink : undefined);\n\n  const getTriggerElement = useCallback(() => {\n    return document.querySelector(`.active > .MessageList div[data-message-id=\"${message.id}\"]`);\n  }, [message.id]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const {\n    positionX, positionY, style, menuStyle, withScroll,\n  } = useContextMenuPosition(\n    anchor,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    SCROLLBAR_WIDTH,\n    (document.querySelector('.MiddleHeader') as HTMLElement).offsetHeight,\n  );\n\n  useEffect(() => {\n    disableScrolling(withScroll ? menuRef.current : undefined);\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      menuStyle={menuStyle}\n      className=\"MessageContextMenu fluid\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n      {canReschedule && (\n        <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n      )}\n      {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n      {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n      {canFaveSticker && (\n        <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n      )}\n      {canUnfaveSticker && (\n        <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n      )}\n      {canCopy && copyOptions.map((options) => (\n        <MenuItem key={options.label} icon=\"copy\" onClick={options.handler}>{lang(options.label)}</MenuItem>\n      ))}\n      {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n      {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n      {canDownload && (\n        <MenuItem icon=\"download\" onClick={onDownload}>\n          {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n        </MenuItem>\n      )}\n      {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n      {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n      {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n      {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n    </Menu>\n  );\n};\n\nexport default MessageContextMenu;\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum, IAnchorPosition } from '../../../types';\nimport {\n  selectActiveDownloadIds,\n  selectAllowedMessageActions,\n  selectCurrentMessageList,\n} from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportMessageModal from '../../common/ReportMessageModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport CalendarModal from '../../common/CalendarModal';\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  activeDownloads: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setReplyingToId' | 'setEditingId' | 'pinMessage' | 'openForwardMenu' |\n  'faveSticker' | 'unfaveSticker' | 'toggleMessageSelection' | 'sendScheduledMessages' | 'rescheduleMessage' |\n  'downloadMessageMedia' | 'cancelMessageMediaDownload'\n)>;\n\nconst ContextMenuContainer: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  album,\n  anchor,\n  onClose,\n  onCloseAnimationEnd,\n  noOptions,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canEdit,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  activeDownloads,\n  setReplyingToId,\n  setEditingId,\n  pinMessage,\n  openForwardMenu,\n  faveSticker,\n  unfaveSticker,\n  toggleMessageSelection,\n  sendScheduledMessages,\n  rescheduleMessage,\n  downloadMessageMedia,\n  cancelMessageMediaDownload,\n}) => {\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n\n  const isDownloading = album ? album.messages.some((msg) => activeDownloads.includes(msg.id))\n    : activeDownloads.includes(message.id);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    onClose();\n  }, [closeCalendar, onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    openCalendar();\n  }, [openCalendar]);\n\n  const handleRescheduleMessage = useCallback((date: Date) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt: Math.round(date.getTime() / 1000),\n    });\n  }, [message.chatId, message.id, rescheduleMessage]);\n\n  const handleCopyLink = useCallback(() => {\n    copyTextToClipboard(`https://t.me/${chatUsername || `c/${message.chatId.replace('-', '')}`}/${message.id}`);\n    closeMenu();\n  }, [chatUsername, closeMenu, message.chatId, message.id]);\n\n  const handleDownloadClick = useCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  }, [album, message, closeMenu, isDownloading, cancelMessageMediaDownload, downloadMessageMedia]);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={['ContextMenuContainer', transitionClassNames].join(' ')}>\n      <MessageContextMenu\n        message={message}\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        isDownloading={isDownloading}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onDownload={handleDownloadClick}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportMessageModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={message.date * 1000}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        onClose={handleCloseCalendar}\n        onSubmit={handleRescheduleMessage}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloadIds(global, message.chatId);\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n\n    return {\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy,\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n      canDownload,\n      activeDownloads,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setReplyingToId',\n    'setEditingId',\n    'pinMessage',\n    'openForwardMenu',\n    'faveSticker',\n    'unfaveSticker',\n    'toggleMessageSelection',\n    'sendScheduledMessages',\n    'rescheduleMessage',\n    'downloadMessageMedia',\n    'cancelMessageMediaDownload',\n  ]),\n)(ContextMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiSticker, ApiStickerSet } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport { STICKER_SIZE_MODAL } from '../../config';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectChat, selectCurrentMessageList, selectStickerSet, selectStickerSetByShortName,\n} from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../modules/helpers';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadStickers' | 'toggleStickerSet' | 'sendMessage'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  onClose,\n  loadStickers,\n  toggleStickerSet,\n  sendMessage,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen) {\n      if (fromSticker) {\n        const { stickerSetId, stickerSetAccessHash } = fromSticker;\n        loadStickers({\n          stickerSetId,\n          stickerSetAccessHash,\n        });\n      } else if (stickerSetShortName) {\n        loadStickers({\n          stickerSetShortName,\n        });\n      }\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName]);\n\n  const handleSelect = useCallback((sticker: ApiSticker) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    sendMessage({ sticker });\n    onClose();\n  }, [onClose, sendMessage]);\n\n  const handleButtonClick = useCallback(() => {\n    if (stickerSet) {\n      toggleStickerSet({ stickerSetId: stickerSet.id });\n      onClose();\n    }\n  }, [onClose, stickerSet, toggleStickerSet]);\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={stickerSet ? renderText(stickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n    >\n      {stickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            {stickerSet.stickers.map((sticker) => (\n              <StickerButton\n                sticker={sticker}\n                size={STICKER_SIZE_MODAL}\n                observeIntersection={observeIntersection}\n                onClick={canSendStickers ? handleSelect : undefined}\n                clickArg={sticker}\n              />\n            ))}\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={stickerSet.installedDate ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {lang(\n                stickerSet.installedDate ? 'StickerPack.RemoveStickerCount' : 'StickerPack.AddStickerCount',\n                stickerSet.count,\n                'i',\n              )}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId) && sendOptions?.canSendStickers,\n    );\n\n    return {\n      canSendStickers,\n      stickerSet: fromSticker\n        ? selectStickerSet(global, fromSticker.stickerSetId)\n        : stickerSetShortName\n          ? selectStickerSetByShortName(global, stickerSetShortName)\n          : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadStickers',\n    'toggleStickerSet',\n    'sendMessage',\n  ]),\n)(StickerSetModal));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport {\n  selectChat, selectNotifySettings, selectNotifyExceptions, selectUser,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport {\n  isUserId, getCanDeleteChat, selectIsChatMuted, getCanAddContact,\n} from '../../modules/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport DeleteChatModal from '../common/DeleteChatModal';\n\nimport './HeaderMenuContainer.scss';\n\ntype DispatchProps = Pick<GlobalActions, (\n  'updateChatMutedState' | 'enterMessageSelectMode' | 'sendBotCommand' | 'restartBot' | 'openLinkedChat' | 'addContact'\n)>;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canMute?: boolean;\n  canLeave?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  canAddContact?: boolean;\n  canDeleteChat?: boolean;\n  hasLinkedChat?: boolean;\n};\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  isOpen,\n  anchor,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canMute,\n  canLeave,\n  chat,\n  isPrivate,\n  isMuted,\n  canDeleteChat,\n  hasLinkedChat,\n  canAddContact,\n  onSubscribeChannel,\n  onSearchClick,\n  onClose,\n  onCloseAnimationEnd,\n  updateChatMutedState,\n  enterMessageSelectMode,\n  sendBotCommand,\n  restartBot,\n  openLinkedChat,\n  addContact,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleLinkedChatClick = useCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, openLinkedChat]);\n\n  const handleAddContactClick = useCallback(() => {\n    addContact({ userId: chatId });\n    closeMenu();\n  }, [addContact, chatId, closeMenu]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {IS_SINGLE_COLUMN_LAYOUT && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'Subscribe' : 'Join Group')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          <MenuItem\n            icon=\"select\"\n            onClick={handleSelectMessages}\n          >\n            {lang('ReportSelectMessages')}\n          </MenuItem>\n          {canLeave && (\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={handleDelete}\n            >\n              {lang(isPrivate\n                ? 'DeleteChatUser'\n                : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n            </MenuItem>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      canAddContact,\n      canDeleteChat: getCanDeleteChat(chat),\n      hasLinkedChat: Boolean(chat?.fullInfo?.linkedChatId),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'updateChatMutedState',\n    'enterMessageSelectMode',\n    'sendBotCommand',\n    'restartBot',\n    'openLinkedChat',\n    'addContact',\n  ]),\n)(HeaderMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChat } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport { debounce } from '../../util/schedulers';\nimport { selectCurrentTextSearch, selectCurrentChat } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalTextSearchQuery' | 'searchTextMessagesLocal' | 'closeLocalTextSearch' | 'openHistoryCalendar' |\n  'focusMessage'\n)>;\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps & DispatchProps> = ({\n  isActive,\n  chat,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n  setLocalTextSearchQuery,\n  searchTextMessagesLocal,\n  focusMessage,\n  closeLocalTextSearch,\n  openHistoryCalendar,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat && foundIds && foundIds.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1] });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat, focusMessage, foundIds]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1 - newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1 - newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={closeLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalTextSearchQuery',\n    'searchTextMessagesLocal',\n    'focusMessage',\n    'closeLocalTextSearch',\n    'openHistoryCalendar',\n  ]),\n)(MobileSearchFooter));\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement>,\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport fastSmoothScroll from './fastSmoothScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: AnyToVoidFunction;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  }, [items]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedItemIndex, getSelectedIndex]);\n\n  const handleItemSelect = useCallback((e: KeyboardEvent) => {\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        e.preventDefault();\n        onSelect(item);\n      }\n    }\n  }, [items, onSelect, selectedItemIndex]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport { ApiUser } from '../../../api/types';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n  usersById?: Record<string, ApiUser>;\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  usersById,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useCallback((userId: string, forceFocus = false) => {\n    const user = usersById?.[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [usersById, onInsertUserName]);\n\n  const handleSelectMention = useCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  }, [handleUserSelect]);\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          onClick={() => handleUserSelect(id)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAttachment, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport File from '../../common/File';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\n\nimport './AttachmentModal.scss';\n\nexport type OwnProps = {\n  attachments: ApiAttachment[];\n  caption: string;\n  isReady?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  usersById?: Record<string, ApiUser>;\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  addRecentEmoji: AnyToVoidFunction;\n  onCaptionUpdate: (html: string) => void;\n  onSend: () => void;\n  onFileAppend: (files: File[], isQuick: boolean) => void;\n  onClear: () => void;\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\n\nconst AttachmentModal: FC<OwnProps> = ({\n  attachments,\n  caption,\n  isReady,\n  currentUserId,\n  groupChatMembers,\n  usersById,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  addRecentEmoji,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const hideTimeoutRef = useRef<number>(null);\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const isOpen = Boolean(attachments.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n  const isQuick = Boolean(renderingAttachments && renderingAttachments.every((a) => a.quick));\n  const lang = useLang();\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    isOpen,\n    caption,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n    usersById,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    isOpen,\n    caption,\n    recentEmojis,\n    EDITABLE_INPUT_MODAL_ID,\n    onCaptionUpdate,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  const sendAttachments = useCallback(() => {\n    if (isOpen) {\n      onSend();\n    }\n  }, [isOpen, onSend]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches('.drop-target') && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest('.AttachmentModal.hovered')) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer: { files } } = e;\n\n    if (files?.length) {\n      const newFiles = isQuick\n        ? Array.from(files).filter((file) => {\n          return file.type && CONTENT_TYPES_WITH_PREVIEW.has(file.type);\n        })\n        : Array.from(files);\n\n      onFileAppend(newFiles, isQuick);\n    }\n  }, [isQuick, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n    }\n  }\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const areAllPhotos = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n  const areAllVideos = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n  const areAllAudios = renderingAttachments.every((a) => a.mimeType.startsWith('audio/'));\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={sendAttachments}\n        >\n          {lang('Send')}\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={`AttachmentModal ${isHovered ? 'hovered' : ''}`}\n    >\n      <div\n        className=\"drop-target\"\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n      >\n        {isQuick ? (\n          <div className=\"media-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              attachment.mimeType.startsWith('image/')\n                ? <img src={attachment.blobUrl} alt=\"\" />\n                : <video src={attachment.blobUrl} autoPlay muted loop />\n            ))}\n          </div>\n        ) : (\n          <div className=\"document-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              <File\n                name={attachment.filename}\n                extension={getFileExtension(attachment.filename, attachment.mimeType)}\n                previewData={attachment.previewBlobUrl}\n                size={attachment.size}\n                smaller\n              />\n            ))}\n          </div>\n        )}\n\n        <div className=\"attachment-caption-wrapper\">\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            onClose={closeMentionTooltip}\n            onInsertUserName={insertMention}\n            filteredUsers={mentionFilteredUsers}\n            usersById={usersById}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <MessageInput\n            id=\"caption-input-text\"\n            isAttachmentModalInput\n            html={caption}\n            editableInputId={EDITABLE_INPUT_MODAL_ID}\n            placeholder={lang('Caption')}\n            onUpdate={onCaptionUpdate}\n            onSend={onSend}\n            shouldSetFocus={Boolean(attachments.length)}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AttachmentModal);\n","import { ChangeEvent, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({ isOpen, onSend, onClear }) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(false);\n  const [solution, setSolution] = useState<string>();\n  const [correctOption, setCorrectOption] = useState<string>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(false);\n      setSolution('');\n      setCorrectOption('');\n      setHasErrors(false);\n    }\n  }, [isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(String(index) === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [correctOption],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(newValue);\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)]) && (\n      <p className=\"error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={(e) => setQuestion(e.currentTarget.value)}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        <Checkbox\n          label={lang('PollAnonymous')}\n          checked={isAnonymous}\n          onChange={handleIsAnonymousChange}\n        />\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({ emoji, focus, onClick }) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  return (\n    <div\n      className={`EmojiButton ${focus ? 'focus' : ''}`}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : <img src={`./img-apple-64/${emoji.image}.png`} alt=\"\" loading=\"lazy\" />}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 9;\nconst EMOJI_MARGIN = 4;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n\n  const emojisPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\" dir=\"auto\">\n        {lang(category.id === 'recent' ? 'RecentStickers' : `Emoji${index}`)}\n      </p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        // @ts-ignore\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { MENU_TRANSITION_DURATION } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n  uncompressEmoji,\n} from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className, onEmojiSelect, recentEmojis,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  useHorizontalScroll(headerRef.current, !IS_SINGLE_COLUMN_LAYOUT);\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: 'recent',\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = document.getElementById(`emoji-category-${index}`)!;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!emojis || !canRenderContents) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json') as unknown as Promise<EmojiModule>;\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport windowSize from '../../../util/windowSize';\nimport StickerButton from '../../common/StickerButton';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n  onStickerUnfave: (sticker: ApiSticker) => void;\n};\n\nconst STICKERS_PER_ROW_ON_DESKTOP = 5;\nconst STICKER_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 16;\nconst MOBILE_CONTAINER_PADDING = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  observeIntersection,\n  shouldRender,\n  onStickerSelect,\n  onStickerUnfave,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const stickersPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (STICKER_SIZE_PICKER + STICKER_MARGIN))\n    : STICKERS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(stickerSet.count / stickersPerRow) * (STICKER_SIZE_PICKER + STICKER_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`sticker-set-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\">{stickerSet.title}</p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        // @ts-ignore\n        style={`height: ${height}px;`}\n      >\n        {shouldRender && stickerSet.stickers && stickerSet.stickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            noAnimate={!loadAndPlay}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n            onUnfaveClick={stickerSet.id === 'favorite' ? onStickerUnfave : undefined}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiStickerSet, ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION, STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport StickerSetCoverAnimated from './StickerSetCoverAnimated';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  shouldPlay?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadStickerSets' | 'loadRecentStickers' | 'loadFavoriteStickers' |\n  'addRecentSticker' | 'loadAddedStickers' | 'unfaveSticker'\n)>;\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  addedSetIds,\n  stickerSetsById,\n  shouldPlay,\n  onStickerSelect,\n  loadStickerSets,\n  loadRecentStickers,\n  loadFavoriteStickers,\n  loadAddedStickers,\n  addRecentSticker,\n  unfaveSticker,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return [\n      {\n        id: 'recent',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      },\n      {\n        id: 'favorite',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      },\n      ...addedSetIds.map((id) => stickerSetsById[id]).filter(Boolean),\n    ];\n  }, [addedSetIds, lang, recentStickers, favoriteStickers, stickerSetsById]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadStickerSets();\n      loadRecentStickers();\n      loadFavoriteStickers();\n    }\n  }, [loadAndPlay, loadFavoriteStickers, loadRecentStickers, loadStickerSets]);\n\n  useEffect(() => {\n    if (addedSetIds?.length) {\n      loadAddedStickers();\n    }\n  }, [addedSetIds, loadAddedStickers]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    onStickerSelect(sticker);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    if (stickerSet.id === 'recent' || stickerSet.id === 'favorite' || stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === 'recent' || stickerSet.id === 'favorite'}\n          color=\"translucent\"\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === 'recent' ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === 'favorite' ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.isAnimated ? (\n            <StickerSetCoverAnimated\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          observeIntersection={observeIntersectionForCovers}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets || !canSendStickers) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        {allSets.map(renderCover)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(shouldPlay && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n    } = global.stickers;\n\n    return {\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      shouldPlay: global.settings.byKey.shouldLoopStickers,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadStickerSets',\n    'loadRecentStickers',\n    'loadFavoriteStickers',\n    'loadAddedStickers',\n    'addRecentSticker',\n    'unfaveSticker',\n  ]),\n)(StickerPicker));\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiVideo } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport Spinner from '../ui/Spinner';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick: (gif: ApiVideo) => void;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif, observeIntersection, isDisabled, className, onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const hasThumbnail = Boolean(gif.thumbnail?.dataUri);\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, Boolean(previewBlobUrl));\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  useVideoCleanup(videoRef, [shouldRenderVideo]);\n\n  const handleClick = useCallback(\n    () => onClick({\n      ...gif,\n      blobUrl: videoData,\n    }),\n    [onClick, gif, videoData],\n  );\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={handleClick}\n    >\n      {hasThumbnail && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          // @ts-ignore\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <video\n          ref={videoRef}\n          autoPlay\n          loop\n          muted\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        >\n          <source src={videoData} />\n        </video>\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || hasThumbnail ? 'white' : 'black'} />\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import React, {\n  FC, useEffect, memo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs: boolean;\n  onGifSelect: (gif: ApiVideo) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadSavedGifs'>;\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  onGifSelect,\n  loadSavedGifs,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={onGifSelect}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      savedGifs: global.gifs.saved.gifs,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadSavedGifs']),\n)(GifPicker));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'Stickers',\n  'GIFs',\n}\n\n// Getting enum string values for display in Tabs.\n// See: https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings\nexport const SYMBOL_MENU_TAB_TITLES = Object.values(SymbolMenuTabs)\n  .filter((value): value is string => typeof value === 'string');\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={SYMBOL_MENU_TAB_TITLES[tab]}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {renderTabButton(SymbolMenuTabs.Emoji)}\n      {renderTabButton(SymbolMenuTabs.Stickers)}\n      {renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {activeTab === SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker, ApiVideo } from '../../../api/types';\n\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onStickerSelect: (sticker: ApiSticker, shouldPreserveInput?: boolean) => void;\n  onGifSelect: (gif: ApiVideo) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: AnyToVoidFunction;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  isOpen, allowedAttachmentOptions, isLeftColumnShown,\n  onLoad, onClose,\n  onEmojiSelect, onStickerSelect, onGifSelect,\n  onRemoveSymbol, onSearchOpen, addRecentEmoji,\n}) => {\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  useLayoutEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, activeTab, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => {\n      return [...emojis, name];\n    });\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    onStickerSelect(sticker, true);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  const { canSendStickers, canSendGifs } = allowedAttachmentOptions;\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={handleStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={SYMBOL_MENU_TAB_TITLES.length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {IS_SINGLE_COLUMN_LAYOUT && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n      />\n    </>\n  );\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const className = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      !isLeftColumnShown && 'middle-column-open',\n    );\n\n    return (\n      <Portal>\n        <div className={className}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SymbolMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: global.isLeftColumnShown,\n    };\n  },\n)(SymbolMenu));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { CONTENT_TYPES_WITH_PREVIEW } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  onFileSelect: (files: File[], isQuick: boolean) => void;\n  onPollCreate: () => void;\n  onClose: () => void;\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  isOpen, allowedAttachmentOptions, onFileSelect, onPollCreate, onClose,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const handleFileSelect = useCallback((e: Event, isQuick: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      onFileSelect(Array.from(files), isQuick);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(CONTENT_TYPES_WITH_PREVIEW).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const lang = useLang();\n\n  const { canAttachMedia, canAttachPolls } = allowedAttachmentOptions;\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"AttachMenu fluid\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n      {!canAttachMedia && (\n        <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n      )}\n      {canAttachMedia && (\n        <>\n          <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n            {lang('AttachmentMenu.PhotoOrVideo')}\n          </MenuItem>\n          <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n        </>\n      )}\n      {canAttachPolls && (\n        <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(AttachMenu);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiBotCommand, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'sendBotCommand'>;\n\nconst BotCommandTooltip: FC<OwnProps & StateProps & DispatchProps> = ({\n  usersById,\n  isOpen,\n  withUsername,\n  botCommands,\n  onClick,\n  onClose,\n  sendBotCommand,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useCallback(({ botId, command }: ApiBotCommand) => {\n    const bot = usersById[botId];\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.username}` : ''}`,\n      botId,\n    });\n    onClick();\n  }, [onClick, sendBotCommand, usersById, withUsername]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSendCommand,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          bot={usersById[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({\n    usersById: global.users.byId,\n  }),\n  (setGlobal, actions): DispatchProps => pick(actions, ['sendBotCommand']),\n)(BotCommandTooltip));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiBotCommand } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'sendBotCommand'>;\n\nconst BotCommandMenu: FC<OwnProps & DispatchProps> = ({\n  isOpen, botCommands, onClose, sendBotCommand,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n\n  const handleClick = useCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n      botId: botCommand.botId,\n    });\n    onClose();\n  }, [onClose, sendBotCommand]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, ['sendBotCommand']),\n)(BotCommandMenu));\n","import React, {\n  FC, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'clearStickersForEmoji'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  onStickerSelect,\n  stickers,\n  clearStickersForEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(clearStickersForEmoji) : undefined), [isOpen, clearStickersForEmoji]);\n\n  const handleMouseEnter = () => {\n    document.body.classList.add('no-select');\n  };\n\n  const handleMouseLeave = () => {\n    document.body.classList.remove('no-select');\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n\n    return { stickers };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['clearStickersForEmoji']),\n)(StickerTooltip));\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onSilentSend?: NoneToVoidFunction;\n  onScheduleSend?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen, onSilentSend, onScheduleSend, onClose, onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      className=\"CustomSendMenu\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSilentSend && <MenuItem icon=\"mute\" onClick={onSilentSend}>{lang('SendWithoutSound')}</MenuItem>}\n      {onScheduleSend && <MenuItem icon=\"schedule\" onClick={onScheduleSend}>{lang('ScheduleMessage')}</MenuItem>}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onEmojiSelect: (text: string) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: AnyToVoidFunction;\n  emojis: Emoji[];\n};\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  onClose,\n  onEmojiSelect,\n  addRecentEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: Emoji[] = usePrevDuringAnimation(emojis.length ? emojis : undefined, CLOSE_DURATION) || [];\n\n  const handleSelectEmoji = useCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: emojis,\n    onSelect: handleSelectEmoji,\n    onClose,\n  });\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleMouseEnter = () => {\n    document.body.classList.add('no-select');\n  };\n\n  const handleMouseLeave = () => {\n    document.body.classList.remove('no-select');\n  };\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          <EmojiButton\n            key={emoji.id}\n            emoji={emoji}\n            focus={selectedIndex === index}\n            onClick={handleClick}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\n\nimport { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: string | undefined = '';\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable=\"false\" />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import React, {\n  FC, memo, useCallback,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst StickerResult: FC<OwnProps> = ({ inlineResult, observeIntersection, onClick }) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm } from '../../../api/types';\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  onSelectResult: (inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('startBot' | 'openChat' | 'sendInlineBotResult')>;\n\nconst InlineBotTooltip: FC<OwnProps & DispatchProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  loadMore,\n  onClose,\n  openChat,\n  startBot,\n  onSelectResult,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: isGallery,\n    noArrowNavigation: isGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId, param: switchPm!.startParam });\n  }, [botId, openChat, startBot, switchPm]);\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults && !inlineBotResults.length\n    ? prevInlineBotResults\n    : inlineBotResults;\n\n  if (!shouldRender || !renderedInlineBotResults || (!renderedInlineBotResults.length && !switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    isGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={isGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'video':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'startBot', 'openChat', 'sendInlineBotResult',\n  ]),\n)(InlineBotTooltip));\n","import React, {\n  FC, useMemo, memo, useRef,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiUser, ApiChat } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../modules/selectors';\nimport {\n  getMessageSummaryText,\n  getChatTitle,\n  getUserFullName,\n  isChatChannel,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport { orderBy, pick } from '../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchTextMessagesLocal' | 'focusMessage'>;\n\ninterface Result {\n  message: ApiMessage;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  onClick: NoneToVoidFunction;\n}\n\nconst RightSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  onClose,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  searchTextMessagesLocal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n\n  const foundResults = useMemo(() => {\n    if (!query || !foundIds || !foundIds.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const results = foundIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean) as Result[];\n\n    return orderBy(results, ({ message }) => message.date, 'desc');\n  }, [chatId, threadId, focusMessage, foundIds, chat, messagesById, query]);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: Result) => {\n    const title = senderChat ? getChatTitle(lang, senderChat) : getUserFullName(senderUser);\n    const text = getMessageSummaryText(lang, message);\n\n    return (\n      <ListItem\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} />\n        <div className=\"info\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{title && renderText(title)}</h3>\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {renderText(text, ['emoji', 'highlight'], { highlight: query })}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  useHistoryBack(isActive, onClose);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = foundResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  return (\n    <InfiniteScroll\n      className=\"RightSearch custom-scroll\"\n      items={foundResults}\n      preloadBackwards={0}\n      onLoadMore={searchTextMessagesLocal}\n      noFastList\n      onKeyDown={handleKeyDown}\n      ref={containerRef}\n    >\n      <p className=\"helper-text\" dir=\"auto\">\n        {!query ? (\n          lang('lng_dlg_search_for_messages')\n        ) : (totalCount === 0 || !foundResults.length) ? (\n          lang('lng_search_no_results')\n        ) : totalCount === 1 ? (\n          '1 message found'\n        ) : (\n          `${(foundResults.length && (totalCount || foundResults.length))} messages found`\n        )}\n      </p>\n      {foundResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, ['searchTextMessagesLocal', 'focusMessage']),\n)(RightSearch));\n","import React, {\n  FC, useEffect, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiStickerSet } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { pick } from '../../util/iteratees';\nimport { selectShouldLoopStickers, selectStickerSet } from '../../modules/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport useOnChange from '../../hooks/useOnChange';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isSomeModalOpen: boolean;\n  onModalToggle: (isOpen: boolean) => void;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadStickers' | 'toggleStickerSet'>;\n\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps & DispatchProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  loadStickers, toggleStickerSet, isSomeModalOpen, onModalToggle,\n}) => {\n  const lang = useLang();\n  const isAdded = set && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useOnChange(() => {\n    onModalToggle(isModalOpen);\n  }, [isModalOpen, onModalToggle]);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY) {\n      loadStickers({ stickerSetId });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main\">\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen || isSomeModalOpen}\n            onClick={openModal}\n          />\n        ))}\n      </div>\n      {canRenderStickers && (\n        <StickerSetModal\n          isOpen={isModalOpen}\n          fromSticker={displayedStickers[0]}\n          onClose={closeModal}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadStickers', 'toggleStickerSet']),\n)(StickerSetResult));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadFeaturedStickers'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  onClose,\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  loadFeaturedStickers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack(isActive, onClose);\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadFeaturedStickers']),\n)(StickerSearch));\n","import React, {\n  FC, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n} from '../../modules/selectors';\nimport { getAllowedAttachmentOptions } from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchMoreGifs' | 'sendMessage' | 'setGifSearchQuery'>;\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  onClose,\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  searchMoreGifs,\n  sendMessage,\n  setGifSearchQuery,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const { canSendGifs } = getAllowedAttachmentOptions(chat, isChatWithBot);\n\n  const handleGifClick = useCallback((gif: ApiVideo) => {\n    if (canSendGifs) {\n      sendMessage({ gif });\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, sendMessage, setGifSearchQuery]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={handleGifClick}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={searchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['searchMoreGifs', 'sendMessage', 'setGifSearchQuery']),\n)(GifSearch));\n","import React, {\n  FC, useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport { pick } from '../../util/iteratees';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadPollOptionResults' | 'openChat' | 'closePollResults'>;\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n  loadPollOptionResults,\n  openChat,\n  closePollResults,\n}) => {\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = global.pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, ['loadPollOptionResults', 'openChat', 'closePollResults']),\n)(PollAnswerResults));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage } from '../../modules/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack(isActive, onClose);\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {lastSyncTime && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n      lastSyncTime,\n    } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  selectChat, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../../modules/selectors';\nimport { selectIsChatMuted } from '../../../modules/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'updateContact' | 'deleteUser' | 'deleteHistory' | 'closeManagement' | 'openChat'\n)>;\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps & DispatchProps> = ({\n  userId,\n  user,\n  chat,\n  progress,\n  isMuted,\n  updateContact,\n  deleteUser,\n  deleteHistory,\n  closeManagement,\n  openChat,\n  onClose,\n  isActive,\n}) => {\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteHistory({\n      chatId: chat.id,\n      shouldDeleteForAll: false,\n    });\n    deleteUser({ userId });\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.id, closeDeleteDialog, closeManagement, deleteHistory, deleteUser, openChat, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId)!;\n    const { progress } = global.management;\n    const isMuted = selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    return {\n      user, chat, progress, isMuted,\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, [\n    'updateContact', 'deleteUser', 'closeManagement', 'openChat', 'deleteHistory',\n  ]),\n)(ManageUser));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport { ApiChat, ApiChatBannedRights, ApiMediaFormat } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatBasicGroup } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat } from '../../../modules/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'togglePreHistoryHidden' | 'updateChat' | 'closeManagement' |\n  'leaveChannel' | 'deleteChannel' | 'deleteChat' | 'openChat'\n)>;\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\n\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = 8;\n\nconst ManageGroup: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  onScreenSelect,\n  togglePreHistoryHidden,\n  updateChat,\n  deleteChat,\n  leaveChannel,\n  deleteChannel,\n  closeManagement,\n  openChat,\n  onClose,\n  isActive,\n}) => {\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = [\n      'sendMessages',\n      'sendMedia',\n      'embedLinks',\n      'sendPolls',\n      'changeInfo',\n      'inviteUsers',\n      'pinMessages',\n    ].filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = (chat.fullInfo?.adminMembers?.length) || 0;\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\">\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const hasLinkedChannel = Boolean(chat.fullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n\n    return {\n      chat,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'togglePreHistoryHidden', 'updateChat', 'closeManagement',\n    'leaveChannel', 'deleteChannel', 'deleteChat', 'openChat',\n  ]),\n)(ManageGroup));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatDefaultBannedRights'>;\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\n\nfunction getLangKeyForBannedRightKey(key: string) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps & DispatchProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  updateChatDefaultBannedRights,\n  onClose,\n  isActive,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  useEffect(() => {\n    setPermissions((chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [chat]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => !!bannedRights);\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, key) => {\n      if (\n        !bannedRights[key as keyof ApiChatBannedRights]\n        || (defaultBannedRights?.[key as keyof ApiChatBannedRights])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        <div className=\"section\">\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat, currentUserId: global.currentUserId };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatDefaultBannedRights']),\n)(ManageGroupPermissions));\n","import React, {\n  FC, useMemo, useState, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../modules/helpers';\nimport searchWords from '../../../util/searchWords';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  currentUserId?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadMoreMembers' | 'deleteChatMember'>;\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  usersById,\n  currentUserId,\n  isOpen,\n  onClose,\n  loadMoreMembers,\n  deleteChatMember,\n}) => {\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  const usersId = useMemo(() => {\n    const availableMembers = (chat.fullInfo?.members || []).filter((member) => {\n      return !member.isAdmin && !member.isOwner && member.userId !== currentUserId;\n    });\n\n    return availableMembers.reduce<string[]>((acc, member) => {\n      if (\n        !filter\n        || !usersById[member.userId]\n        || searchWords(getUserFullName(usersById[member.userId]) || '', filter)\n      ) {\n        acc.push(member.userId);\n      }\n\n      return acc;\n    }, []);\n  }, [chat.fullInfo?.members, currentUserId, filter, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      filterRef={filterRef}\n      filterPlaceholder={lang('ChannelBlockUser')}\n      filter={filter}\n      onFilterChange={setFilter}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      currentUserId,\n    } = global;\n\n    return { usersById, currentUserId };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadMoreMembers', 'deleteChatMember']),\n)(RemoveGroupUserModal));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { getHasAdminRight, getUserFullName } from '../../../modules/helpers';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  canDeleteMembers?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatMemberBannedRights'>;\n\nconst ManageGroupRemovedUsers: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  updateChatMemberBannedRights,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack(isActive, onClose);\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang('NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return { chat, usersById, canDeleteMembers };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatMemberBannedRights']),\n)(ManageGroupRemovedUsers));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport { ApiChat, ApiMediaFormat } from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { getChatAvatarHash, getHasAdminRight } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'toggleSignatures' | 'updateChat' | 'closeManagement' | 'leaveChannel' | 'deleteChannel' | 'openChat'\n)>;\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\n\nconst ManageChannel: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  onScreenSelect,\n  updateChat,\n  toggleSignatures,\n  closeManagement,\n  leaveChannel,\n  deleteChannel,\n  openChat,\n  onClose,\n  isActive,\n}) => {\n  const currentTitle = chat ? (chat.title || '') : '';\n  const currentAbout = chat?.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat?.fullInfo?.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = (chat?.fullInfo?.adminMembers?.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'toggleSignatures', 'updateChat', 'closeManagement', 'leaveChannel', 'deleteChannel', 'openChat',\n  ]),\n)(ManageChannel));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { selectChat, selectManagement } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport { isChatChannel } from '../../../modules/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'checkPublicLink' | 'updatePublicLink' | 'updatePrivateLink'\n)>;\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  onClose,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkPublicLink,\n  updatePublicLink,\n  updatePrivateLink,\n}) => {\n  const isPublic = Boolean(chat.username);\n  const privateLink = chat.fullInfo?.inviteLink;\n\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [username, setUsername] = useState();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n\n  const canUpdate = Boolean(\n    (privacyType === 'public' && username && isUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleOptionChange = useCallback((value: string) => {\n    setPrivacyType(value as PrivacyType);\n  }, []);\n\n  const handleSave = useCallback(() => {\n    updatePublicLink({ username: privacyType === 'public' ? username : '' });\n  }, [privacyType, updatePublicLink, username]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={chat.username}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkUsername={checkPublicLink}\n              onChange={setUsername}\n            />\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: global.management.progress,\n      isUsernameAvailable,\n    };\n  },\n  (setGlobal, actions) => pick(actions, [\n    'checkPublicLink', 'updatePublicLink', 'updatePrivateLink',\n  ]),\n)(ManageChatPrivacyType));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { selectChat } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport getAnimationData from '../../common/helpers/animatedAssets';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../modules/helpers';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadGroupsForDiscussion' | 'linkDiscussionGroup' | 'unlinkDiscussionGroup'>;\n\nconst ManageDiscussion: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n  loadGroupsForDiscussion,\n  linkDiscussionGroup,\n  unlinkDiscussionGroup,\n}) => {\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('DiscussionGroups').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n      // return renderText(\n      //   lang('DiscussionLinkGroupPublicAlert', linkedChat.title, chat!.title),\n      //   ['br', 'simple_markdown'],\n      // );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n    // return renderText(\n    //   lang('DiscussionLinkGroupPrivateAlert', linkedChat.title, chat!.title),\n    //   ['br', 'simple_markdown'],\n    // );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => { onDiscussionClick(id); }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n          isButtonsInOneRow\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"section-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"discussionGroupsDucks\"\n                size={STICKER_SIZE_DISCUSSION_GROUPS}\n                animationData={animationData}\n                play={isAnimationLoaded}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat?.fullInfo?.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadGroupsForDiscussion', 'linkDiscussionGroup', 'unlinkDiscussionGroup',\n  ]),\n)(ManageDiscussion));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatMemberBannedRights'>;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  updateChatMemberBannedRights,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember?.bannedRights) || (chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setIsLoading(false);\n  }, [chat, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, permissions, updateChatMemberBannedRights]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              disabled={getControlIsDisabled('sendStickers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              disabled={getControlIsDisabled('sendPolls')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              disabled={getControlIsDisabled('embedLinks')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              disabled={getControlIsDisabled('pinMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div className=\"section\">\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatMemberBannedRights']),\n)(ManageGroupUserPermissions));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../modules/helpers';\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n  usersById: Record<string, ApiUser>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  usersById,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  function handleRecentActionsClick() {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang, usersById]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            onClick={handleRecentActionsClick}\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n      usersById,\n    };\n  },\n  // (setGlobal, actions): DispatchProps => pick(actions, ['togglePreHistoryHidden', 'updateChat']),\n)(ManageChatAdministrators));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat, onClose, isActive }) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const adminMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { selectChat } from '../../../modules/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatAdmin'>;\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps & DispatchProps> = ({\n  selectedChatMemberId,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isFormFullyDisabled,\n  updateChatAdmin,\n  onClose,\n  isActive,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return undefined;\n    }\n\n    return chat.fullInfo.adminMembers.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember?.adminRights) || {});\n    setCustomTitle(((selectedChatMember?.customTitle) || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(false);\n    setIsLoading(false);\n  }, [selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [chat, selectedChatMemberId, permissions, customTitle, updateChatAdmin]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedChatMemberId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedChatMemberId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (!selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!!permissions.changeInfo}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={!!permissions.postMessages}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={!!permissions.editMessages}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={!!permissions.deleteMessages}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={!!permissions.banUsers}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!!permissions.inviteUsers}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!!permissions.pinMessages}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={!!permissions.addAdmins}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={!!permissions.anonymous}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedChatMemberId && !isFormFullyDisabled && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isDismissConfirmationDialogOpen}\n        onClose={closeDismissConfirmationDialog}\n        text=\"Are you sure you want to dismiss this admin?\"\n        confirmLabel=\"Dismiss\"\n        confirmHandler={handleDismissAdmin}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isFormFullyDisabled,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatAdmin']),\n)(ManageGroupAdminRights));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatMember, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { selectChat } from '../../../modules/selectors';\nimport { sortUserIds, isChatChannel } from '../../../modules/helpers';\nimport { pick } from '../../../util/iteratees';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openUserInfo'>;\n\nconst ManageGroupMembers: FC<OwnProps & StateProps & DispatchProps> = ({\n  members,\n  usersById,\n  isChannel,\n  openUserInfo,\n  onClose,\n  isActive,\n  serverTimeOffset,\n}) => {\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(members.map(({ userId }) => userId), usersById, undefined, serverTimeOffset);\n  }, [members, serverTimeOffset, usersById]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  useHistoryBack(isActive, onClose);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => handleMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n  ]),\n)(ManageGroupMembers));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatMember, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { sortUserIds, isChatChannel } from '../../../modules/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  serverTimeOffset,\n}) => {\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById, undefined, serverTimeOffset,\n    );\n  }, [members, serverTimeOffset, usersById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens, ManagementType } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../modules/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageGroupRemovedUsers from './ManageGroupRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageGroupRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4[0-9]{12}(?:[0-9]{1,3})?$/;\nconst MASTERCARD1 = /^5[1-5][0-9]{11,14}$/;\nconst MASTERCARD2 = /^2[2-7][0-9]{11,14}$/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","// This data was received from Telegram Desktop (Telegram/Resources/numbers.txt)\nconst DATA = `AF🇦🇫93Afghanistan333\nAO🇦🇴244Angola333\nAL🇦🇱355Albania234\nAD🇦🇩376Andorra222\nAE🇦🇪971United Arab Emirates234\nAI🇦🇮1264Anguilla34\nAR🇦🇷54Argentina\nAM🇦🇲374Armenia233\nAG🇦🇬1268Antigua and Barbuda34\nAU🇦🇺61Australia333\nAS🇦🇸1684American Samoa34\nAT🇦🇹43Austria\nAW🇦🇼297Aruba34\nAZ🇦🇿994Azerbaijan2322\nBI🇧🇮257Burundi224\nBE🇧🇪32Belgium3222\nBJ🇧🇯229Benin233\nBF🇧🇫226Burkina Faso2222\nBD🇧🇩880Bangladesh\nBG🇧🇬359Bulgaria\nBH🇧🇭973Bahrain44\nBS🇧🇸1242Bahamas34\nBA🇧🇦387Bosnia and Herzegovina\nBY🇧🇾375Belarus2322\nBZ🇧🇿501Belize\nBO🇧🇴591Bolivia134\nBR🇧🇷55Brazil254\nBB🇧🇧1246Barbados34\nBM🇧🇲1441Bermuda34\nBN🇧🇳673Brunei34\nBQ🇧🇶599Bonaire, Sint Eustatius and Saba\nBT🇧🇹975Bhutan\nBW🇧🇼267Botswana233\nCF🇨🇫236Central African Republic2222\nCA🇨🇦1Canada334\nCH🇨🇭41Switzerland234\nCK🇨🇰682Cook Islands\nCL🇨🇱56Chile144\nCN🇨🇳86China344\nCI🇨🇮225Côte d\\`Ivoire233\nCM🇨🇲237Cameroon44\nCD🇨🇩243DR Congo234\nCG🇨🇬242Republic of the Congo234\nCO🇨🇴57Colombia334\nKM🇰🇲269Comoros34\nCV🇨🇻238Cape Verde34\nCR🇨🇷506Costa Rica\nCU🇨🇺53Cuba44\nCY🇨🇾357Cyprus44\nCW🇨🇼599Curaçao\nCZ🇨🇿420Czech Republic\nDE🇩🇪49Germany38\nDJ🇩🇯253Djibouti2222\nDM🇩🇲1767Dominica34\nDK🇩🇰45Denmark44\nDO🇩🇴1Dominican Republic334\nDZ🇩🇿213Algeria3222\nEC🇪🇨593Ecuador\nEG🇪🇬20Egypt234\nER🇪🇷291Eritrea133\nES🇪🇸34Spain333\nEE🇪🇪372Estonia\nET🇪🇹251Ethiopia234\nFI🇫🇮358Finland\nFJ🇫🇯679Fiji\nFK🇫🇰500Falkland Islands\nFM🇫🇲691Micronesia\nFO🇫🇴298Faroe Islands33\nFR🇫🇷33France12222\nGA🇬🇦241Gabon1222\nGB🇬🇧44United Kingdom46\nGE🇬🇪995Georgia\nGF🇬🇫594French Guiana\nGH🇬🇭233Ghana\nGI🇬🇮350Gibraltar44\nGL🇬🇱299Greenland33\nGN🇬🇳224Guinea333\nGM🇬🇲220Gambia34\nGP🇬🇵590Guadeloupe\nGU🇬🇺1671Guam34\nGW🇬🇼245Guinea-Bissau34\nGQ🇬🇶240Equatorial Guinea333\nGR🇬🇷30Greece244\nGD🇬🇩1473Grenada34\nGT🇬🇹502Guatemala134\nGY🇬🇾592Guyana\nHK🇭🇰852Hong Kong\nHN🇭🇳504Honduras44\nHR🇭🇷385Croatia\nHT🇭🇹509Haiti\nHU🇭🇺36Hungary234\nID🇮🇩62Indonesia\nIN🇮🇳91India55\nIO🇩🇬246Diego Garcia34\nIE🇮🇪353Ireland234\nIR🇮🇷98Iran334\nIQ🇮🇶964Iraq334\nIS🇮🇸354Iceland34\nIL🇮🇱972Israel234\nIT🇮🇹39Italy334\nJM🇯🇲1876Jamaica34\nJO🇯🇴962Jordan144\nJP🇯🇵81Japan244\nKZ🇰🇿7Kazakhstan3322\nKE🇰🇪254Kenya333\nKG🇰🇬996Kyrgyzstan\nKH🇰🇭855Cambodia\nKI🇰🇮686Kiribati\nKN🇰🇳1869Saint Kitts and Nevis34\nKR🇰🇷82South Korea\nKW🇰🇼965Kuwait44\nKY🇰🇾1345Cayman Islands34\nLA🇱🇦856Laos\nLB🇱🇧961Lebanon\nLR🇱🇷231Liberia\nLY🇱🇾218Libya234\nLC🇱🇨1758Saint Lucia34\nLI🇱🇮423Liechtenstein\nLK🇱🇰94Sri Lanka234\nLS🇱🇸266Lesotho233\nLT🇱🇹370Lithuania35\nLU🇱🇺352Luxembourg\nLV🇱🇻371Latvia35\nMA🇲🇦212Morocco234\nMC🇲🇨377Monaco44\nMD🇲🇩373Moldova233\nMG🇲🇬261Madagascar2232\nMP🇲🇵1670Northern Mariana Islands34\nMO🇲🇴853Macau\nMS🇲🇸1664Montserrat34\nMV🇲🇻960Maldives\nMX🇲🇽52Mexico\nMH🇲🇭692Marshall Islands\nMK🇲🇰389Macedonia\nML🇲🇱223Mali44\nMT🇲🇹356Malta2222\nMM🇲🇲95Myanmar\nME🇲🇪382Montenegro\nMN🇲🇳976Mongolia\nMZ🇲🇿258Mozambique234\nMQ🇲🇶596Martinique\nMR🇲🇷222Mauritania44\nMU🇲🇺230Mauritius\nMW🇲🇼265Malawi\nMY🇲🇾60Malaysia\nNA🇳🇦264Namibia234\nNC🇳🇨687New Caledonia6\nNE🇳🇪227Niger2222\nNF🇳🇫672Norfolk Island\nNG🇳🇬234Nigeria\nNI🇳🇮505Nicaragua44\nNL🇳🇱31Netherlands12222\nNO🇳🇴47Norway44\nNP🇳🇵977Nepal\nNU🇳🇺683Niue\nNR🇳🇷674Nauru\nNZ🇳🇿64New Zealand\nOM🇴🇲968Oman44\nPK🇵🇰92Pakistan334\nPA🇵🇦507Panama44\nPE🇵🇪51Peru333\nPF🇵🇫689French Polynesia\nPH🇵🇭63Philippines334\nPM🇵🇲508Saint Pierre and Miquelon\nPR🇵🇷1Puerto Rico334\nPS🇵🇸970Palestine324\nPW🇵🇼680Palau\nPG🇵🇬675Papua New Guinea\nPL🇵🇱48Poland333\nKP🇰🇵850North Korea\nPT🇵🇹351Portugal144\nPY🇵🇾595Paraguay333\nQA🇶🇦974Qatar\nRE🇷🇪262Réunion333\nRO🇷🇴40Romania333\nRU🇷🇺7Russia3322\nRW🇷🇼250Rwanda333\nSA🇸🇦966Saudi Arabia\nSD🇸🇩249Sudan234\nSN🇸🇳221Senegal234\nSG🇸🇬65Singapore44\nSH🇸🇭290Saint Helena23\nSH🇸🇭247Saint Helena4\nSB🇸🇧677Solomon Islands\nSL🇸🇱232Sierra Leone233\nSV🇸🇻503El Salvador44\nSM🇸🇲378San Marino334\nSO🇸🇴252Somalia233\nRS🇷🇸381Serbia234\nSS🇸🇸211South Sudan234\nST🇸🇹239São Tomé and Príncipe25\nSR🇸🇷597Suriname34\nSK🇸🇰421Slovakia\nSI🇸🇮386Slovenia\nSE🇸🇪46Sweden234\nSZ🇸🇿268Swaziland44\nSC🇸🇨248Seychelles1222\nSX🇸🇽1721Sint Maarten34\nSY🇸🇾963Syria\nTC🇹🇨1649Turks and Caicos Islands34\nTD🇹🇩235Chad2222\nTG🇹🇬228Togo233\nTH🇹🇭66Thailand144\nTJ🇹🇯992Tajikistan\nTK🇹🇰690Tokelau\nTM🇹🇲993Turkmenistan26\nTL🇹🇱670Timor-Leste\nTO🇹🇴676Tonga\nTT🇹🇹1868Trinidad and Tobago34\nTN🇹🇳216Tunisia233\nTR🇹🇷90Turkey334\nTV🇹🇻688Tuvalu\nTW🇹🇼886Taiwan\nTZ🇹🇿255Tanzania234\nUG🇺🇬256Uganda234\nUA🇺🇦380Ukraine2322\nUY🇺🇾598Uruguay44\nUS🇺🇸1United States334\nUZ🇺🇿998Uzbekistan27\nVA🇻🇦3Vatican City\nVC🇻🇨1784Saint Vincent and the Grenadines34\nVE🇻🇪58Venezuela334\nVG🇻🇬1284British Virgin Islands34\nVI🇻🇮1340US Virgin Islands34\nVN🇻🇳84Vietnam\nVU🇻🇺678Vanuatu\nWF🇼🇫681Wallis and Futuna\nWS🇼🇸685Samoa\nXK🇽🇰383Kosovo44\nYE🇾🇪967Yemen333\nZA🇿🇦27South Africa234\nZM🇿🇲260Zambia234\nZW🇿🇼263Zimbabwe234`;\n\nconst formatsCache: Record<string, RegExp> = {};\nexport const defaultPhoneNumberFormat = /(\\d{1,3})(\\d{1,3})?(\\d{1,3})?(\\d{1,3})?(\\d{1,3})?/;\n\nconst parsed = DATA\n  .split('\\n')\n  .map((str) => {\n    const id = str.substr(0, 2);\n    const flag = str.substr(2, 4);\n    const code = `+${str.match(/\\d+/)![0]}`;\n    const name = str.split(/\\d+/)[1];\n    const format = str.match(/\\d+$/);\n    const phoneFormat = getPhoneNumberFormat(format);\n\n    return {\n      id, flag, code, name, phoneFormat,\n    };\n  });\n\nfunction getPhoneNumberFormat(format: RegExpMatchArray | null) {\n  if (!format) {\n    return defaultPhoneNumberFormat;\n  }\n\n  const formatValue = format[0] as string;\n  let phoneNumberFormat;\n\n  if (!formatsCache[formatValue]) {\n    const phoneNumberGroups = formatValue.split('').map(Number);\n    phoneNumberFormat = phoneNumberGroups.reduce((result, count, i) => {\n      return `${result}(\\\\d{1,${count}})${i > 0 ? '?' : ''}`;\n    }, '');\n    formatsCache[formatValue] = new RegExp(`${phoneNumberFormat}${'()?'.repeat(5 - phoneNumberGroups.length)}`);\n  }\n\n  return formatsCache[formatValue];\n}\n\nexport default parsed;\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\nimport countryList from '../../util/countries';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload,\n        billingCountry: getBillingCountry(action.payload),\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.countryIso2) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: getBillingCountry(action.payload.countryIso2),\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nfunction getBillingCountry(countryCode: string) {\n  const country = countryList.find(({ id }) => id === countryCode);\n  return country ? country.name : '';\n}\n\nexport default () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n","import { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import { ChangeEvent, RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: any;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import React, {\n  FC, useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\nimport countryList from '../../util/countries';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label=\"Address1 (Street)\"\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label=\"Address2 (Street)\"\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label=\"City\"\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              error={formErrors.city}\n            />\n            <InputText\n              label=\"State\"\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label=\"Country\"\n              placeholder=\"Country\"\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n            >\n              {countryList.map(({ name, id }) => (\n                <option\n                  value={id}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label=\"Post Code\"\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label=\"Full name\"\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label=\"Email\"\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label=\"Phone number\"\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import React, {\n  FC, useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency?: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>Select shipping method</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import React, {\n  FC, memo,\n} from '../../lib/teact/teact';\n\nimport { LangCode, Price } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport useLang from '../../hooks/useLang';\n\nimport './Checkout.scss';\n\nexport type OwnProps = {\n  invoiceContent?: {\n    title?: string;\n    text?: string;\n    photoUrl?: string;\n  };\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  shippingPrices?: Price[];\n  currency?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  invoiceContent,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n}) => {\n  const lang = useLang();\n\n  const { photoUrl, title, text } = invoiceContent || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  return (\n    <div className=\"Checkout\">\n      <div className=\"description has-image\">\n        {photoUrl && <img src={photoUrl} alt=\"\" />}\n        <div className=\"text\">\n          <h5>{title}</h5>\n          <p>{text}</p>\n        </div>\n      </div>\n      <div className=\"price-info\">\n        { prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        )) }\n        { shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        )) }\n        { totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        ) }\n      </div>\n      <div className=\"invoice-info\">\n        {paymentMethod && renderCheckoutItem('icon-card', paymentMethod, 'Payment method')}\n        {paymentProvider && renderCheckoutItem('stripe-provider', paymentProvider, 'Payment provider')}\n        {shippingAddress && renderCheckoutItem('icon-location', shippingAddress, 'Shipping address')}\n        {name && renderCheckoutItem('icon-user', name, 'Name')}\n        {phone && renderCheckoutItem('icon-phone', phone, 'Phone number')}\n        {shippingMethod && renderCheckoutItem('icon-truck', shippingMethod, 'Shipping method')}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency?: string, main = false,\n) {\n  return (\n    <div className={`price-info-item ${main ? 'price-info-item-main' : ''}`}>\n      <div className=\"title\">\n        { title }\n      </div>\n      <div className=\"value\">\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem(icon: string, title: string, data: string) {\n  return (\n    <div className=\"checkout-info-item\">\n      <i className={icon}> </i>\n      <div className=\"info\">\n        <div className=\"title\">\n          { title }\n        </div>\n        <p className=\"data\">\n          { data }\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Checkout);\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  // eslint-disable-next-line no-null/no-null\n  const expiryInputRef = useRef<HTMLInputElement>(null);\n\n  const handleKeyDown = useCallback((e) => {\n    if (e.key === 'Backspace' && value.charAt(value.length - 1) === '/') {\n      const newValue = value.slice(0, value.length - 1);\n      if (expiryInputRef.current) {\n        expiryInputRef.current.value = newValue;\n      }\n    }\n  }, [value]);\n\n  const handleChange = useCallback((e) => {\n    onChange(formatCardExpiry(e.target.value));\n  }, [onChange]);\n\n  return (\n    <InputText\n      label=\"Expiry date\"\n      ref={expiryInputRef}\n      onChange={handleChange}\n      onKeyDown={handleKeyDown}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      maxLength={MAX_FIELD_LENGTH}\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import React, {\n  FC, memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\n// @ts-ignore\nimport mastercardIconPath from '../../assets/mastercard.svg';\n// @ts-ignore\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n    if (cardNumberRef.current) {\n      cardNumberRef.current.value = newValue;\n    }\n  }, [onChange, cardNumberRef]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <span className=\"left-addon\">{cardIcon}</span>\n      <InputText\n        ref={cardNumberRef}\n        label=\"Card number\"\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-left-addon' : ''}\n        error={error}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n      />\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import React, {\n  FC, useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\nimport countryList from '../../util/countries';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    dispatch({ type: 'changeCvvCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label=\"Name on card\"\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label=\"CVV code\"\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            error={formErrors.cvv}\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label=\"Country\"\n            placeholder=\"Country\"\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ name }) => (\n                <option\n                  value={name}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label=\"Post Code\"\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            error={formErrors.billingZip}\n          />\n        )}\n        { canSaveCredentials && (\n          <Checkbox\n            label={lang('PaymentCardSavePaymentInformation')}\n            checked={state.saveCredentials}\n            onChange={handleChangeSaveCredentials}\n          />\n        ) }\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../global/types';\nimport { PaymentStep, ShippingOption, Price } from '../../types';\n\nimport { pick } from '../../util/iteratees';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport usePaymentReducer, { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  nameRequested?: boolean;\n  shippingAddressRequested?: boolean;\n  phoneRequested?: boolean;\n  emailRequested?: boolean;\n  flexible?: boolean;\n  phoneToProvider?: boolean;\n  emailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n};\n\ntype GlobalStateProps = Pick<GlobalState['payment'], 'step' | 'shippingOptions' |\n'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoiceContent' |\n'error'>;\n\ntype DispatchProps = Pick<GlobalActions, 'validateRequestedInfo' | 'sendPaymentForm' | 'setPaymentStep'\n| 'sendCredentialsInfo' | 'clearPaymentError' >;\n\nconst Invoice: FC<OwnProps & StateProps & GlobalStateProps & DispatchProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  nameRequested,\n  shippingAddressRequested,\n  phoneRequested,\n  emailRequested,\n  phoneToProvider,\n  emailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoiceContent,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  error,\n  validateRequestedInfo,\n  sendPaymentForm,\n  setPaymentStep,\n  sendCredentialsInfo,\n  clearPaymentError,\n}) => {\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useEffect(() => {\n    if (step || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingAddress || {}),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping);\n  }, [step, paymentState.shipping, prices, shippingOptions]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <Button\n          isText\n          onClick={clearPaymentError}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(shippingAddressRequested)}\n            needEmail={Boolean(emailRequested || emailToProvider)}\n            needPhone={Boolean(phoneRequested || phoneToProvider)}\n            needName={Boolean(nameRequested)}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n          />\n        );\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            prices={prices}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoiceContent={invoiceContent}\n            checkoutInfo={checkoutInfo}\n            currency={currency}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  const handleButtonClick = useCallback(() => {\n    setIsLoading(true);\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return validateRequest();\n      case PaymentStep.Shipping:\n        return setStep(PaymentStep.PaymentInfo);\n      case PaymentStep.PaymentInfo:\n        return sendCredentials();\n      case PaymentStep.Checkout:\n        return sendForm();\n      default:\n        return () => {};\n    }\n  }, [step, validateRequest, setStep, sendCredentials, sendForm]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('Checkout.PayPrice', formatCurrency(totalPrice, currency, lang.code));\n      default:\n        return lang('Next');\n    }\n  }, [step, lang, currency, totalPrice]);\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <p>\n          Sorry, Telegram WebZ doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <Button\n          isText\n          onClick={onClose}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"PaymentModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={onClose}\n          ariaLabel=\"Close\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          {() => (\n            <div className=\"content custom-scroll\">\n              {renderModalContent(step)}\n            </div>\n          )}\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      <div className=\"footer\">\n        <Button\n          type=\"submit\"\n          onClick={handleButtonClick}\n          disabled={isLoading}\n          isLoading={isLoading}\n        >\n          {buttonText}\n        </Button>\n      </div>\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContent,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n    } = global.payment;\n\n    const isProviderError = Boolean(invoice && (!nativeProvider || nativeProvider !== DEFAULT_PROVIDER));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      nameRequested,\n      phoneRequested,\n      emailRequested,\n      shippingAddressRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n    } = (invoice || {});\n\n    return {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      nameRequested,\n      shippingAddressRequested,\n      phoneRequested,\n      emailRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoiceContent,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n    };\n  },\n  (setGlobal, actions): DispatchProps => {\n    return pick(actions, [\n      'validateRequestedInfo',\n      'sendPaymentForm',\n      'setPaymentStep',\n      'sendCredentialsInfo',\n      'clearPaymentError',\n    ]);\n  },\n)(Invoice));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(prices: Price[] = [], shippingOptions: ShippingOption[] | undefined, shippingOption: string) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = 0;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = `${cardTypeText} *${state.cardNumber.slice(-4)}`;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nfunction getCredentials(paymentState: FormState) {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, {\n  FC, memo, useMemo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { Price } from '../../types';\nimport { ApiShippingAddress } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photoUrl?: string;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  totalAmount,\n  currency,\n  info,\n  photoUrl,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={onClose}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            invoiceContent={{\n              photoUrl,\n              text,\n              title,\n            }}\n            checkoutInfo={checkoutInfo}\n            currency={currency}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = global.payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    paymentProvider: 'Stripe',\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { MIN_PASSWORD_LENGTH } from '../../config';\nimport { IS_TOUCH_ENV, IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  submitLabel?: string;\n  error?: string;\n  hint?: string;\n  placeholder?: string;\n  isLoading?: boolean;\n  isPasswordVisible?: boolean;\n  clearError: NoneToVoidFunction;\n  onChangePasswordVisibility: (state: boolean) => void;\n  onInputChange?: (password: string) => void;\n  onSubmit: (password: string) => void;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst PasswordForm: FC<OwnProps> = ({\n  isLoading = false,\n  isPasswordVisible,\n  error,\n  hint,\n  placeholder = 'Password',\n  submitLabel = 'Next',\n  clearError,\n  onChangePasswordVisibility,\n  onInputChange,\n  onSubmit,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const lang = useLang();\n\n  const [password, setPassword] = useState('');\n  const [canSubmit, setCanSubmit] = useState(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (error) {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n        inputRef.current!.select();\n      });\n    }\n  }, [error]);\n\n  function onPasswordChange(e: ChangeEvent<HTMLInputElement>) {\n    if (error) {\n      clearError();\n    }\n\n    const { target } = e;\n    setPassword(target.value);\n    setCanSubmit(target.value.length >= MIN_PASSWORD_LENGTH);\n    if (onInputChange) {\n      onInputChange(target.value);\n    }\n  }\n\n  function togglePasswordVisibility() {\n    onChangePasswordVisibility(!isPasswordVisible);\n  }\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    if (isLoading) {\n      return;\n    }\n\n    if (canSubmit) {\n      onSubmit(password);\n    }\n  }\n\n  return (\n    <form action=\"\" onSubmit={handleSubmit} autoComplete=\"off\">\n      <div\n        className={buildClassName('input-group password-input', password && 'touched', error && 'error')}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <input\n          ref={inputRef}\n          className=\"form-control\"\n          type={isPasswordVisible ? 'text' : 'password'}\n          id=\"sign-in-password\"\n          value={password || ''}\n          autoComplete=\"current-password\"\n          onChange={onPasswordChange}\n          dir=\"auto\"\n        />\n        <label>{error || hint || placeholder}</label>\n        <div\n          className=\"toggle-password\"\n          onClick={togglePasswordVisibility}\n          role=\"button\"\n          tabIndex={0}\n          title=\"Toggle password visibility\"\n        >\n          <i className={isPasswordVisible ? 'icon-eye' : 'icon-eye-closed'} />\n        </div>\n      </div>\n      {canSubmit && (\n        <Button type=\"submit\" ripple isLoading={isLoading}>\n          {submitLabel}\n        </Button>\n      )}\n    </form>\n  );\n};\n\nexport default memo(PasswordForm);\n","import React, {\n  FC, useState, useEffect, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport getAnimationData from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\nconst STICKER_SIZE = IS_SINGLE_COLUMN_LAYOUT ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [closeMonkeyData, setCloseMonkeyData] = useState<Record<string, any>>();\n  const [peekMonkeyData, setPeekMonkeyData] = useState<Record<string, any>>();\n  const [isFirstMonkeyLoaded, setIsFirstMonkeyLoaded] = useState(false);\n  const [isPeekShown, setIsPeekShown] = useState(false);\n\n  useEffect(() => {\n    if (!closeMonkeyData) {\n      getAnimationData('MonkeyClose').then(setCloseMonkeyData);\n    } else {\n      setTimeout(() => setIsPeekShown(true), PEEK_MONKEY_SHOW_DELAY);\n    }\n  }, [closeMonkeyData]);\n\n  useEffect(() => {\n    if (!peekMonkeyData) {\n      getAnimationData('MonkeyPeek').then(setPeekMonkeyData);\n    }\n  }, [peekMonkeyData]);\n\n  const handleFirstMonkeyLoad = useCallback(() => setIsFirstMonkeyLoaded(true), []);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      {closeMonkeyData && (\n        <AnimatedSticker\n          id=\"closeMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'hidden' : 'shown'}\n          animationData={closeMonkeyData}\n          playSegment={SEGMENT_COVER_EYES}\n          noLoop\n          onLoad={handleFirstMonkeyLoad}\n        />\n      )}\n      {peekMonkeyData && (\n        <AnimatedSticker\n          id=\"peekMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'shown' : 'hidden'}\n          animationData={peekMonkeyData}\n          playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n          noLoop\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import { ApiMediaFormat } from '../../../api/types';\n\nimport * as mediaLoader from '../../../util/mediaLoader';\n\n// @ts-ignore\nimport MonkeyIdle from '../../../assets/TwoFactorSetupMonkeyIdle.tgs';\n// @ts-ignore\nimport MonkeyTracking from '../../../assets/TwoFactorSetupMonkeyTracking.tgs';\n// @ts-ignore\nimport MonkeyClose from '../../../assets/TwoFactorSetupMonkeyClose.tgs';\n// @ts-ignore\nimport MonkeyPeek from '../../../assets/TwoFactorSetupMonkeyPeek.tgs';\n// @ts-ignore\nimport FoldersAll from '../../../assets/FoldersAll.tgs';\n// @ts-ignore\nimport FoldersNew from '../../../assets/FoldersNew.tgs';\n// @ts-ignore\nimport DiscussionGroups from '../../../assets/DiscussionGroupsDucks.tgs';\n\nexport const ANIMATED_STICKERS_PATHS = {\n  MonkeyIdle,\n  MonkeyTracking,\n  MonkeyClose,\n  MonkeyPeek,\n  FoldersAll,\n  FoldersNew,\n  DiscussionGroups,\n};\n\nexport default function getAnimationData(name: keyof typeof ANIMATED_STICKERS_PATHS) {\n  const path = ANIMATED_STICKERS_PATHS[name].replace(window.location.origin, '');\n\n  return mediaLoader.fetch(`file${path}`, ApiMediaFormat.Lottie);\n}\n","import React, {\n  FC, useEffect, useState, memo,\n} from '../../lib/teact/teact';\n\nimport { DEBUG } from '../../config';\nimport { blobToFile, blobToDataUri } from '../../util/files';\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\nimport Modal from './Modal';\nimport Loading from './Loading';\n\nimport './CropModal.scss';\n\n// Change to 'base64' to get base64-encoded string\nconst cropperResultOptions: Croppie.ResultOptions & { type: 'blob' } = {\n  type: 'blob',\n  quality: 1,\n  format: 'jpeg',\n  circle: false,\n};\n\ntype ICroppie = typeof import('croppie');\nlet Croppie: ICroppie;\nlet croppiePromise: Promise<{ default: ICroppie }>;\n\nasync function ensureCroppie() {\n  if (!croppiePromise) {\n    croppiePromise = import('../../lib/croppie') as unknown as Promise<{ default: ICroppie }>;\n    Croppie = (await croppiePromise).default;\n  }\n\n  return croppiePromise;\n}\n\nlet cropper: Croppie;\n\nasync function initCropper(imgFile: File) {\n  try {\n    const cropContainer = document.getElementById('avatar-crop');\n    if (!cropContainer) {\n      return;\n    }\n\n    const { offsetWidth, offsetHeight } = cropContainer;\n\n    cropper = new Croppie(cropContainer, {\n      enableZoom: true,\n      boundary: {\n        width: offsetWidth,\n        height: offsetHeight,\n      },\n      viewport: {\n        width: offsetWidth - 16,\n        height: offsetHeight - 16,\n        type: 'circle',\n      },\n    });\n\n    const dataUri = await blobToDataUri(imgFile);\n    await cropper.bind({ url: dataUri });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n}\n\ntype OwnProps = {\n  file?: File;\n  onChange: (file: File) => void;\n  onClose: () => void;\n};\n\nconst CropModal: FC<OwnProps> = ({ file, onChange, onClose }: OwnProps) => {\n  const [isCroppieReady, setIsCroppieReady] = useState(false);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    if (!isCroppieReady) {\n      ensureCroppie().then(() => setIsCroppieReady(true));\n\n      return;\n    }\n\n    initCropper(file);\n  }, [file, isCroppieReady]);\n\n  const lang = useLang();\n\n  async function handleCropClick() {\n    if (!cropper) {\n      return;\n    }\n\n    const result: Blob | string = await cropper.result(cropperResultOptions);\n    const croppedImg = typeof result === 'string' ? result : blobToFile(result, 'avatar.jpg');\n\n    onChange(croppedImg);\n  }\n\n  return (\n    <Modal\n      isOpen={Boolean(file)}\n      onClose={onClose}\n      title=\"Drag to reposition\"\n      className=\"CropModal\"\n      hasCloseButton\n    >\n      {isCroppieReady ? (\n        <div id=\"avatar-crop\" />\n      ) : (\n        <Loading />\n      )}\n      <Button\n        className=\"confirm-button\"\n        round\n        color=\"primary\"\n        onClick={handleCropClick}\n        ariaLabel={lang('CropImage')}\n      >\n        <i className=\"icon-check\" />\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(CropModal);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target || !target.files || !target.files[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  function handleAvatarCrop(croppedImg: File) {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }\n\n  function handleModalClose() {\n    setSelectedFile(undefined);\n  }\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n"],"names":["createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","mediaEls","querySelectorAll","mediaEl","length","applyShape","firstChild","objectFit","withGlobal","global","chatId","messageId","isAvatar","sender","isUserId","selectUser","selectChat","selectChatMessage","selectSender","setGlobal","actions","pick","closeMediaViewer","focusMessage","handleFocusMessage","useCallback","lang","useLang","senderTitle","getSenderTitle","className","onClick","Avatar","key","size","user","chat","dir","renderText","formatMediaDateTime","date","memo","isDownloading","selectIsDownloading","mediaData","isVideo","isZoomed","fileName","onCloseMediaViewer","onForward","onZoomToggle","downloadMessageMedia","cancelMessageMediaDownload","loadProgress","downloadProgress","useMediaWithLoadProgress","getMessageMediaHash","handleDownloadClick","MenuButton","useMemo","onTrigger","isOpen","Button","round","color","undefined","ariaLabel","IS_SINGLE_COLUMN_LAYOUT","DropdownMenu","trigger","positionX","MenuItem","icon","Math","href","download","ProgressSpinner","progress","noCross","text","isHidden","isForVideo","isMultiline","setIsMultiline","useState","useEffect","footerContent","checkIsMultiline","height","clientHeight","REM","handleResize","throttle","window","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","prop","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","units","bytes","number","floor","log","toFixed","stopEvent","bufferedProgress","currentTime","duration","fileSize","isForceVisible","isForceMobileVersion","isPlayed","isFullscreenSupported","isFullscreen","onChangeFullscreen","onPlayPause","onSeek","isVisible","setVisibility","seekerRef","useRef","isSeeking","timeout","setTimeout","clearTimeout","body","remove","handleSeek","current","width","left","getBoundingClientRect","clientX","MouseEvent","targetTouches","max","min","handleStartSeek","handleStopSeek","loadedPercent","totalSize","captureEvents","onCapture","onRelease","onDrag","percentagePlayed","percentageBuffered","ref","renderSeekLine","ripple","formatMediaDuration","renderTime","formatFileSize","url","isGif","posterData","posterSize","isMediaViewerOpen","noPlay","onClose","videoRef","setIsPlayed","IS_TOUCH_ENV","IS_IOS","setCurrentTime","isControlsVisible","setIsControlsVisible","setFullscreen","exitFullscreen","elRef","setIsFullscreen","Boolean","useLayoutEffect","listener","listenerEnter","listenerExit","video","PLATFORM_ENV","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreenStatus","isBuffered","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","safePlay","togglePlayState","useVideoCleanup","handleMouseOver","handleMouseOut","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","position","toggleControls","togglePayingStateBySpace","preventDefault","wrapperStyle","videoStyle","onMouseOver","onMouseOut","autoPlay","playsInline","loop","muted","onPlay","onEnded","onDoubleClick","onTimeUpdate","join","square","isShown","onChangeZoom","prevIsShown","usePrevious","inputRef","zoomLevel","setZoomLevel","disabled","step","value","type","onChange","Number","target","onMouseDown","onMouseUp","INITIAL_MATRIX","SCALE_VALUES","ZOOM_SAFE_AREA","children","noWrap","canPan","panDeltaX","panDeltaY","onPan","tunedZoomLevel","isDragging","setIsDragging","dragData","setDragData","dx","dy","x","y","matrixData","setMatrixData","panWrapperRef","panContainerRef","newZoomLevel","newPandx","newPandy","newMatrixData","areSortedArraysEqual","oldScale","wrapper","image","wrapperRect","imageRect","newImgWidth","newImgHeight","newImgX","newImgY","calculateSafeZoneOnZoom","transform","toString","newDragData","pageX","pageY","onMouseMove","deltaX","deltaY","getNewMatrixData","ANIMATION_DURATION","renderPhoto","blobUrl","imageSize","canDrag","alt","draggable","Spinner","threadId","avatarOwnerId","profilePhotoIndex","mediaViewer","animationLevel","settings","byKey","senderId","avatarOwner","chatMessages","collectionIds","selectScheduledMessage","selectScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","isFromSharedMedia","isFromSearch","photo","getMessagePhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","isPhoto","isSingleSlide","messageIds","getChatMediaMessageIds","selectedMediaMessageIndex","indexOf","isFirst","isLast","animationKey","prevSenderId","slideAnimation","headerAnimation","isGhostAnimation","isFooterHidden","setIsFooterHidden","canPanZoomWrap","setCanPanZoomWrap","setIsZoomed","panDelta","setPanDelta","getMediaHash","isFull","photos","getChatAvatarHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","fullMediaBlobUrl","getMessageMediaFormat","localBlobUrl","bestImageData","thumbDataUri","useBlurSync","getMessageMediaThumbDataUri","videoSize","getMessageFileSize","getMessageFileName","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","AVATAR_FULL_DIMENSIONS","toggle","forceUpdate","useForceUpdate","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevOrigin","prevAvatarOwner","prevBestImageData","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","textParts","renderMessageText","hasFooter","fromImage","windowWidth","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","matches","getTopOffset","top","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","requestAnimationFrame","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","el","display","rect","windowHeight","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","timer","closeZoom","handleZoomToggle","handleZoomValue","level","canCloseZoom","close","handleFooterClick","handleForward","fromChatId","captureEscKeyListener","stopCurrentAudio","getMessageId","fromId","direction","index","selectPreviousMedia","selectNextMedia","handleKeyDown","shouldCloseOnVideo","excludedClosestSelector","onSwipe","SwipeDirection","handlePan","handleToggleFooterVisibility","renderSlide","isActive","calculateMediaViewerDimensions","renderSenderInfo","useHistoryBack","ShowTransition","isRtl","Transition","activeKey","name","currentUserId","chatOrUserIds","filterRef","filter","filterPlaceholder","onFilterChange","loadMore","onSelectChatOrUser","viewportIds","getMore","useInfiniteScroll","useInputFocusOnOpen","containerRef","handleFilterChange","useKeyboardListNavigation","modalHeader","InputText","onKeyDown","placeholder","Modal","header","InfiniteScroll","items","onLoadMore","noScrollRestore","map","ListItem","PrivateChatInfo","status","userId","GroupChatInfo","Loading","chats","byId","chatsById","listIds","orderedPinnedIds","pinnedIds","active","activeListIds","archivedListIds","archived","setForwardChatId","exitForwardMode","loadMoreChats","setFilter","chatIds","priorityIds","unique","sortChatIds","getCanPostInChat","MAIN_THREAD_ID","searchWords","getChatTitle","handleSelectUser","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","dismissDialog","acceptInviteConfirmation","dialog","invite","hash","title","participantsCount","isChannel","participantsText","joinText","isText","renderInvite","getReadableErrorText","notifications","dismissNotification","localId","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","handleDismiss","renderingUrl","useCurrentOrPrev","ConfirmDialog","confirmLabel","confirmHandler","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","Date","fixedMinDate","getFullYear","getMonth","getDate","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","now","defaultSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","useFlag","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","currentYear","currentMonth","getTime","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","i","push","gridDate","lastRowDaysCount","buildCalendarGrid","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","formatDateToString","code","formatTime","formatSubmitLabel","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","isSchedule","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","contactName","getUserFirstOrLastName","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","album","deleteMessages","deleteScheduledMessages","handleDeleteMessageForAll","messages","shouldDeleteForAll","handleDeleteMessageForSelf","onEnter","isPrivateChat","isChatWithSelf","selectIsChatWithSelf","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","selectCurrentChat","exitMessageSelectMode","reportMessages","selectedReason","setSelectedReason","description","setDescription","handleReport","reason","handleSelectReason","handleDescriptionChange","REPORT_OPTIONS","label","RadioGroup","options","selected","messageListType","canDelete","canReport","selectCanReportSelectedMessages","canDownload","selectCanDownloadSelectedMessages","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isReportModalOpen","openReportModal","closeReportModal","captureKeyboardListeners","onBackspace","onDelete","onEsc","handleDownload","prevSelectedMessagesCount","renderingSelectedMessagesCount","formattedMessagesCount","renderButton","destructive","onSelect","buttonRef","activeElement","privateChatUserId","privateChatUser","isPinned","selectIsChatPinned","isMuted","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","withUsername","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","contextActions","useChatContextActions","handleDelete","handleChatFolderChange","handleClick","useSelectWithEnter","avatarSize","DeleteChatModal","runThrottled","cb","userIds","topUserIds","topPeers","usersById","users","recentlyFoundChatIds","globalSearch","onReset","loadTopUsers","loadContactList","openChat","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","useHorizontalScroll","shouldReplaceHistory","lastSyncTime","searchQuery","mediaThumbnail","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","withOnlineStatus","isSavedMessages","isSelf","isVerified","VerifiedIcon","Link","formatPastTimeShort","getMessageSummaryText","highlight","renderMessageSummary","searchDate","suggestions","match","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","contactList","fetchingStatus","globalResults","localResults","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleLoadMore","LoadMoreDirection","query","handleChatClick","handlePickerItemClick","startsWith","MEMO_EMPTY_ARRAY","foundContactIds","fullName","getUserFullName","username","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","NothingFound","PickerSelectedItem","chatOrUserId","clickArg","createMapStateToProps","props","currentType","isVoice","activeDownloads","theme","selectTheme","isLoading","searchChatId","CURRENT_TYPE","handleSelectMedia","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","isMediaGrid","isMessageList","itemSelector","Media","idPrefix","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","AudioOrigin","Audio","TABS","GlobalSearchContent","CHAT_TABS","slice","TRANSITION_RENDER_COUNT","keys","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","content","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","action","payload","currentScreen","editedFolderId","onSaveFilter","signOut","deleteChatFolder","onScreenSelect","isSignOutDialogOpen","setIsSignOutDialogOpen","isDeleteFolderDialogOpen","setIsDeleteFolderDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","closeDeleteFolderConfirmation","handleSignOutMessage","handleDeleteFolderMessage","SettingsMenuButton","SettingsScreens","renderHeaderContent","confirmIsDestructive","currentUser","loadProfilePhotos","profileId","ProfileInfo","forceShowSelf","ChatExtra","LINK_PREFIX","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","debounce","currentUsername","asLink","isUsernameAvailable","checkUsername","setUsername","langPrefix","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","trim","isValid","isUsernameValid","success","readOnly","ERROR_FIRST_NAME_MISSING","ERROR_BIO_TOO_LONG","profileEdit","firstName","currentFirstName","lastName","currentLastName","fullInfo","bio","currentBio","currentAvatarHash","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setFirstName","setLastName","setBio","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","isSaveButtonShown","handlePhotoChange","newPhoto","handleFirstNameChange","handleLastNameChange","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","UsernameInput","FloatingActionButton","runThrottledForLoadRecommended","orderedIds","orderedFolderIds","foldersById","recommended","recommendedChatFolders","chatFolders","notifySettings","notifyExceptions","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","showDialog","animationData","setAnimationData","isAnimationLoaded","setIsAnimationLoaded","handleAnimationLoad","getAnimationData","then","handleCreateFolder","data","userFolders","folder","subtitle","getFolderDescriptionText","handleCreateFolderFromRecommended","AnimatedSticker","STICKER_SIZE_FOLDER_SETTINGS","play","noLoop","onLoad","pill","fluid","narrow","multiline","count","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","loadedActiveChatIds","loadedArchivedChatIds","dispatch","onAddIncludedChats","onAddExcludedChats","onBack","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","folderId","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","Set","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","listType","renderChats","mode","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","inactive","renderChatType","event","isTouched","folderUpdate","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","chatTypes","shouldMinimize","hasMaxChats","focus","handleItemClick","newSelectedIds","splice","handleChatTypeClick","newSelectedChatTypes","selectedType","find","isMinimized","canClose","Checkbox","checked","isSelected","withChatType","archivedPinnedIds","chatFilter","activeChatArrays","prepareChatList","archivedChatArrays","pinnedChats","otherChats","displayedIds","newFilter","handleSelectedIdsChange","ids","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","forEach","shownScreen","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","STICKER_SIZE_PICKER_HEADER","stickerSet","observeIntersection","isIntersecting","useIsIntersecting","mediaHash","lottieData","useMediaTransition","firstLetters","getFirstLetters","hasThumbnail","stickers","firstSticker","isAnimated","STICKER_SIZE_GENERAL_SETTINGS","StickerButton","sticker","ANIMATION_LEVEL_OPTIONS","TIME_FORMAT_OPTIONS","stickerSetIds","added","setIds","stickerSetsById","setsById","messageTextSize","messageSendKeyCombo","shouldAutoDownloadMediaFromContacts","shouldAutoDownloadMediaInPrivateChats","shouldAutoDownloadMediaInGroups","shouldAutoDownloadMediaInChannels","shouldAutoPlayGifs","shouldAutoPlayVideos","shouldSuggestStickers","shouldLoopStickers","timeFormat","setSettingOption","loadStickerSets","loadAddedStickers","stickerSettingsRef","observe","observeIntersectionForCovers","useIntersectionObserver","rootRef","isModalOpen","openModal","closeModal","setSticker","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleAnimationLevelChange","newLevel","_","handleMessageTextSizeChange","newSize","documentElement","setProperty","setAttribute","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleStickerSetClick","stickerSets","installedDate","RangeSlider","onCheck","isChecked","fromSticker","fileSelector","openSystemFilesDialog","accept","callback","noMultiple","removeAttribute","onchange","click","hex2rgb","param","parseInt","substring","rgb2hex","p0","p1","p2","rgb2hsb","r","g","h","s","v","hsb2rgb","f","p","q","t","getPatternColor","rgbColor","hue","saturation","wallpaper","slug","localMediaHash","thumbRef","useCanvasBlur","thumbnail","dataUri","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","handleSelect","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","files","handleUploadWallpaper","handleSetColor","handleResetToDefault","backgroundColor","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","async","defaultRGB","rgb","canvas","context","getContext","preloadImage","naturalHeight","naturalWidth","offsetWidth","drawImage","getImageData","blockSize","getAverageColor","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hueHex","w","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleContactNotificationChange","volume","hasPassword","isSensitiveEnabled","canChangeSensitive","privacy","blocked","activeSessions","blockedCount","totalCount","sessionsCount","visibilityPrivacyPhoneNumber","phoneNumber","visibility","visibilityPrivacyLastSeen","lastSeen","visibilityPrivacyProfilePhoto","profilePhoto","visibilityPrivacyForwarding","forwards","visibilityPrivacyGroupChats","chatInvite","loadPrivacySettings","loadBlockedContacts","loadAuthorizations","loadContentSettings","updateContentSettings","getVisibilityValue","languages","language","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","handleChange","langCode","setLanguage","currentLangCode","navigator","toLowerCase","shortLangCode","substr","nativeName","buildOptions","loadingOption","getPrivacyKey","screen","privacySettings","allowUserIds","allowChatIds","blockUserIds","blockChatIds","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","reduce","result","membersCount","blockCount","handleVisibilityChange","getLocation","session","region","country","getDeviceEnvironment","deviceModel","platform","systemVersion","terminateAuthorization","terminateAllAuthorizations","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","handleTerminateSessionClick","handleTerminateAllSessions","currentSession","isCurrent","otherSessions","appName","ip","sessions","handler","dateActive","blockedIds","contactIds","userSearch","setUserSearchQuery","blockContact","filteredContactsId","availableContactsId","concat","contactId","acc","firstId","secondId","secondName","localeCompare","handleRemoveUser","accessHash","chatsByIds","usersByIds","countryList","phoneCodes","phoneCodeList","unblockContact","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","viewportOffset","isPrivate","CHAT_HEIGHT_PX","formatPhoneNumberWithCode","renderContact","animatedEmoji","selectAnimatedEmoji","AnimatedEmoji","expectedPassword","submitLabel","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","handleSubmit","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","onChangePasswordVisibility","onStart","FOCUS_DELAY_TIMEOUT_MS","shouldConfirm","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","codeLength","twoFaSettings","waitingEmailCodeLength","newValue","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","isChatGroup","handleSelectedContactIdsChange","contactsIds","Picker","itemIds","searchInputId","TWO_FA_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","twoFaState","twoFaDispatch","useReducer","handleSaveFilter","renderCurrentSection","isScreenActive","isFrom","currentKey","privacyAllowScreens","isTwoFaScreen","isFoldersScreen","isPrivacyScreen","values","SettingsGeneralBackgroundColor","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","serverTimeOffset","resultIds","sortUserIds","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","isUserBot","canBeInvitedToGroup","handleNextStep","creationProgress","creationError","chatCreation","memberIds","createGroupChat","createChannel","setTitle","about","setAbout","chatTitleEmptyError","channelTitleEmptyError","chatTooManyUsersError","ChatCreationProgress","handleTitleChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","ChatList","folderType","folderOrderedIds","onCloseAnimationEnd","editChatFolders","initialSelectedFolderIds","pinnedChatIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","changedTouches","clientY","getTouchY","scrollHeight","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","passive","onkeydown","enableScrolling","anchor","canSendNow","canReschedule","canReply","canEdit","canPin","canUnpin","canForward","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","onReply","onEdit","onPin","onReport","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onDownload","menuRef","copyOptions","afterEffect","getMessageText","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","clipboardText","copyTextToClipboard","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","positionY","menuStyle","withScroll","useContextMenuPosition","Menu","selectActiveDownloadIds","noOptions","isScheduled","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","isMenuOpen","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isCalendarOpen","openCalendar","closeCalendar","some","msg","closeMenu","closePinModal","handleCloseCalendar","handleReply","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleOpenCalendar","handleRescheduleMessage","scheduledAt","handleCopyLink","reportMessageIds","scheduledMaxDate","getDayStartAt","stickerSetShortName","currentMessageList","sendOptions","getAllowedAttachmentOptions","canSendStickers","selectStickerSet","stickerSetId","selectStickerSetByShortName","loadStickers","toggleStickerSet","sendMessage","throttleMs","isDisabled","stickerSetAccessHash","isPreloadedGlobally","handleButtonClick","hasCloseButton","STICKER_SIZE_MODAL","isRestricted","canAddContact","getCanAddContact","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","canStartBot","canRestartBot","canSubscribe","canSearch","canMute","canLeave","onSubscribeChannel","onSearchClick","updateChatMutedState","enterMessageSelectMode","sendBotCommand","restartBot","openLinkedChat","addContact","handleStartBot","command","handleRestartBot","handleToggleMuteClick","handleLinkedChatClick","handleAddContactClick","handleSubscribe","handleSearch","handleSelectMessages","Portal","runDebouncedForSearch","results","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","Array","from","input","div","contentEditable","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","SearchInput","findInViewport","selectorOrElements","margin","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y1","y2","setTooltipItemVisible","selector","first","isFullyVisible","fastSmoothScroll","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","cycleRestrict","handleArrowKey","handleItemSelect","item","isSelectionOutOfRange","onUp","onDown","onLeft","onRight","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","attachments","caption","isReady","groupChatMembers","recentEmojis","baseEmojiKeywords","emojiKeywords","addRecentEmoji","onCaptionUpdate","onFileAppend","onClear","hideTimeoutRef","prevAttachments","renderingAttachments","isHovered","markHovered","unmarkHovered","isQuick","every","quick","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","sendAttachments","handleFilesDrop","dataTransfer","newFiles","file","CONTENT_TYPES_WITH_PREVIEW","areAllPhotos","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","areAllVideos","SUPPORTED_VIDEO_CONTENT_TYPES","areAllAudios","renderHeader","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","attachment","File","filename","extension","getFileExtension","previewData","emojis","onEmojiSelect","MessageInput","isAttachmentModalInput","html","editableInputId","onUpdate","shouldSetFocus","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","innerHTML","addNewOption","newOptions","list","scrollTo","behavior","handleCreate","questionTrimmed","optionsTrimmed","o","summary","answers","option","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","hidden","emoji","native","names","IS_EMOJI_SUPPORTED","loading","category","allEmojis","useOnIntersect","emojisPerRow","ceil","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","headerRef","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","entries","entry","intersectingWithIndexes","newLeft","HEADER_BUTTON_WIDTH","fastSmoothScrollHorizontal","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","handleEmojiSelect","MENU_TRANSITION_DURATION","containerClassName","faded","STICKER_MARGIN","loadAndPlay","onStickerSelect","onStickerUnfave","stickersPerRow","STICKER_SIZE_PICKER","noAnimate","onUnfaveClick","stickerSetIntersections","favorite","recentStickers","favoriteStickers","addedSetIds","shouldPlay","loadRecentStickers","loadFavoriteStickers","addRecentSticker","activeSetIndex","setActiveSetIndex","areAddedLoaded","allSets","noPopulatedSets","set","stickerSetEl","handleStickerSelect","handleStickerUnfave","fullClassName","buttonClassName","gif","videoData","shouldRenderVideo","isVideoReady","preventMessageInputBlurWithBubbling","preload","savedGifs","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","SYMBOL_MENU_TAB_ICONS","Emoji","Stickers","GIFs","onRemoveSymbol","onSearchOpen","renderTabButton","handleSearchOpen","isActivated","isLeftColumnShown","allowedAttachmentOptions","setRecentEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","fastRaf","recentEmojisRef","renderContent","onMouseEnter","onMouseLeave","noCloseOnBackdrop","onFileSelect","onPollCreate","handleQuickSelect","handleDocumentSelect","canAttachMedia","canAttachPolls","autoClose","withAvatar","botCommand","bot","botCommands","handleSendCommand","botId","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","forEmoji","clearStickersForEmoji","prevStickers","displayedStickers","onSilentSend","onScheduleSend","listEmojis","usePrevDuringAnimation","handleSelectEmoji","selectedIndex","setItemVisible","thumbUrl","thumbnailDataUrl","decoding","isForGallery","inlineResult","webThumbnail","STICKER_SIZE_INLINE_BOT_RESULT","isGallery","inlineBotResults","switchPm","startBot","onSelectResult","handleSendPm","startParam","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","messagesById","foundResults","senderUser","getGlobal","senderChat","forwardInfo","isChannelPost","orderBy","foundResult","preloadBackwards","LastMessageMeta","selectShouldLoopStickers","isSomeModalOpen","onModalToggle","isAdded","areStickersLoaded","useOnChange","coverStickerIds","covers","otherStickers","handleAddClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","featured","featuredIds","loadFeaturedStickers","setIsModalOpen","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","searchMoreGifs","setGifSearchQuery","handleGifClick","hasResults","answer","voters","offsets","pollResults","offset","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","limit","shouldResetVoters","handleViewMoreClick","handleMemberClick","noStatusOrTyping","leftVotersCount","renderViewMoreButton","total","getMessagePoll","resultsByOption","buildCollectionByKey","management","updateContact","deleteUser","deleteHistory","closeManagement","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","withFullInfo","GROUP_TITLE_EMPTY","hasLinkedChannel","isBasicGroup","canChangeInfo","isCreator","getHasAdminRight","canBanUsers","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","currentTitle","currentAbout","imageHash","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickPermissions","handleClickAdministrators","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","isEnabled","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembers","handleDeleteGroup","formatInteger","onChatMemberSelect","updateChatDefaultBannedRights","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","handlePermissionChange","getUpdatedPermissionValue","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","members","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","sendMessages","blocking","sendMedia","sendPolls","embedLinks","inviteUsers","pinMessages","changeInfo","loadMoreMembers","deleteChatMember","usersId","isAdmin","isOwner","canDeleteMembers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","selectManagement","checkPublicLink","updatePublicLink","updatePrivateLink","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","canUpdate","handleOptionChange","handleSave","handleRevokePrivateLink","langPrefix1","langPrefix2","SafeLink","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","teactOrderKey","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isButtonsInOneRow","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","selectedChatMember","handleBanFromGroup","viewMessages","getControlIsDisabled","handleAdminMemberClick","getMemberStatus","promotedByUser","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","adminRights","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","addAdmins","anonymous","maxLength","openUserInfo","memberId","managementType","selectCurrentManagementType","VISA","MASTERCARD1","MASTERCARD2","CardType","cards","Default","Visa","Mastercard","detectCardType","cardNumber","formatsCache","defaultPhoneNumberFormat","str","flag","phoneFormat","format","formatValue","phoneNumberFormat","phoneNumberGroups","RegExp","repeat","getPhoneNumberFormat","streetLine1","streetLine2","city","countryIso2","postCode","phone","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","reducer","getBillingCountry","countryCode","useFocusAfterAnimation","animationDuration","hasArrow","labelText","htmlFor","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handlePhoneChange","handleSaveInfoChange","shippingOptions","currency","handleShippingSelect","amount","formatCurrency","renderPaymentItem","main","renderCheckoutItem","invoiceContent","prices","shippingPrices","checkoutInfo","totalPrice","photoUrl","paymentMethod","paymentProvider","shippingAddress","shippingMethod","expiryInputRef","charAt","parts","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","savedInfo","invoice","nativeProvider","nativeParams","passwordMissing","payment","isProviderError","nameRequested","phoneRequested","emailRequested","shippingAddressRequested","flexible","phoneToProvider","emailToProvider","validateRequestedInfo","sendPaymentForm","setPaymentStep","sendCredentialsInfo","clearPaymentError","paymentState","paymentDispatch","field","handleErrorModalClose","PaymentStep","shippingOption","getShippingPrices","cur","getTotalPrice","detectCardTypeText","findShippingOption","getCheckoutInfo","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","setStep","nextStep","buttonText","currentStep","renderModalContent","renderError","optionId","receipt","info","totalAmount","credentialsTitle","fullAddress","onInputChange","setPassword","canSubmit","setCanSubmit","select","autoComplete","MIN_PASSWORD_LENGTH","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","STICKER_SIZE","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","closeMonkeyData","setCloseMonkeyData","peekMonkeyData","setPeekMonkeyData","isFirstMonkeyLoaded","setIsFirstMonkeyLoaded","isPeekShown","setIsPeekShown","handleFirstMonkeyLoad","STICKER_SIZE_TWO_FA","playSegment","ANIMATED_STICKERS_PATHS","MonkeyIdle","MonkeyTracking","MonkeyClose","MonkeyPeek","FoldersAll","FoldersNew","DiscussionGroups","path","location","cropperResultOptions","quality","circle","Croppie","croppiePromise","cropper","isCroppieReady","setIsCroppieReady","imgFile","cropContainer","enableZoom","boundary","viewport","blobToDataUri","bind","err","DEBUG","console","initCropper","ensureCroppie","croppedImg","blobToFile","selectedFile","setSelectedFile","croppedBlobUrl","setCroppedBlobUrl","labelClassName","URL","revokeObjectURL","createObjectURL"],"sourceRoot":""}