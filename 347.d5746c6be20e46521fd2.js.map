{"version":3,"file":"347.d5746c6be20e46521fd2.js","mappings":"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","sources":["webpack://telegram-t/./src/modules/actions/ui/localSearch.ts","webpack://telegram-t/./src/modules/actions/ui/chats.ts","webpack://telegram-t/./src/modules/actions/ui/messages.ts","webpack://telegram-t/./src/versionNotification.txt","webpack://telegram-t/./src/modules/actions/ui/globalSearch.ts","webpack://telegram-t/./src/modules/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/modules/actions/ui/users.ts","webpack://telegram-t/./src/modules/actions/ui/misc.ts","webpack://telegram-t/./src/modules/actions/ui/payments.ts","webpack://telegram-t/./src/modules/actions/api/messages.ts","webpack://telegram-t/./src/modules/actions/api/symbols.ts","webpack://telegram-t/./src/modules/actions/api/globalSearch.ts","webpack://telegram-t/./src/modules/actions/api/localSearch.ts","webpack://telegram-t/./src/modules/actions/api/sync.ts","webpack://telegram-t/./src/modules/actions/api/management.ts","webpack://telegram-t/./src/modules/actions/api/users.ts","webpack://telegram-t/./src/modules/reducers/bots.ts","webpack://telegram-t/./src/modules/actions/api/bots.ts","webpack://telegram-t/./src/modules/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/modules/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/modules/reducers/reactions.ts","webpack://telegram-t/./src/modules/actions/api/reactions.ts","webpack://telegram-t/./src/util/areDeepEqual.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/hooks/useWindowSize.ts","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/HeaderActions.tsx","webpack://telegram-t/./src/hooks/useWebpThumbnail.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/hooks/useAsync.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/calls/group/GroupCallTopPane.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useVideoAutoPause.ts","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/common/LocalAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/insertHtmlInSelection.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./node_modules/opus-recorder/dist/encoderWorker.min.js","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/hooks/useDebouncedMemo.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/common/CalendarModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/CallFallbackConfirm.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addReducer } from '../../../lib/teact/teactn';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddReducer('closeLocalTextSearch', closeLocalTextSearch);\n\naddReducer('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddReducer('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddReducer('openChat', (global, actions, payload) => {\n  const {\n    id, threadId = -1, type = 'thread', shouldReplaceHistory = false,\n  } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n\n    setGlobal(global);\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory);\n});\n\naddReducer('openPreviousChat', (global) => {\n  return updateCurrentMessageList(global, undefined);\n});\n\naddReducer('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddReducer('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddReducer('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddReducer('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage, MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\n// @ts-ignore\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddReducer('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddReducer('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddReducer('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddReducer('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddReducer('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddReducer('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n  } = payload!;\n\n  return {\n    ...global,\n    mediaViewer: {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    },\n    forwardMessages: {},\n  };\n});\n\naddReducer('closeMediaViewer', (global) => {\n  return {\n    ...global,\n    mediaViewer: {},\n  };\n});\n\naddReducer('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? global.audioPlayer.origin,\n      volume: volume ?? global.audioPlayer.volume,\n      playbackRate: playbackRate || global.audioPlayer.playbackRate,\n      isMuted: isMuted || global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddReducer('setAudioPlayerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      volume,\n    },\n  };\n});\n\naddReducer('setAudioPlayerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      playbackRate,\n    },\n  };\n});\n\naddReducer('setAudioPlayerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      isMuted,\n    },\n  };\n});\n\naddReducer('setAudioPlayerOrigin', (global, actions, payload) => {\n  const {\n    origin,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      origin,\n    },\n  };\n});\n\naddReducer('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {\n      volume: global.audioPlayer.volume,\n      playbackRate: global.audioPlayer.playbackRate,\n      isMuted: global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddReducer('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      const newGlobal = getGlobal();\n\n      setGlobal({\n        ...newGlobal,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    setGlobal({\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    });\n  }\n});\n\naddReducer('closePollResults', (global) => {\n  setGlobal({\n    ...global,\n    pollResults: {},\n  });\n});\n\naddReducer('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddReducer('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage();\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids?.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddReducer('openForwardMenu', (global, actions, payload) => {\n  const { fromChatId, messageIds, groupedId } = payload!;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n    },\n  };\n});\n\naddReducer('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddReducer('setForwardChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddReducer('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddReducer('cancelMessageMediaDownload', (global, actions, payload) => {\n  const { message } = payload!;\n\n  const byChatId = global.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  });\n});\n\naddReducer('downloadMessageMedia', (global, actions, payload) => {\n  const { message } = payload!;\n  if (!message) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: [...(global.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  });\n});\n\naddReducer('downloadSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message }));\n});\n\naddReducer('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddReducer('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddReducer('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddReducer('exitMessageSelectMode', exitMessageSelectMode);\n\naddReducer('openPollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: true,\n  };\n});\n\naddReducer('closePollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: false,\n  };\n});\n\naddReducer('checkVersionNotification', (global, actions) => {\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(global.serverTimeOffset),\n    content: {\n      text: parseMessageInput(versionNotification),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message,\n    version: currentVersion,\n  });\n});\n\naddReducer('createServiceNotification', (global, actions, payload) => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  setGlobal({\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  });\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddReducer('openReactorListModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    reactorModal: { chatId, messageId },\n  };\n});\n\naddReducer('closeReactorListModal', (global) => {\n  return {\n    ...global,\n    reactorModal: undefined,\n  };\n});\n\naddReducer('openSeenByModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    seenByModal: { chatId, messageId },\n  };\n});\n\naddReducer('closeSeenByModal', (global) => {\n  return {\n    ...global,\n    seenByModal: undefined,\n  };\n});\n","export default \"**Telegram Web Z was updated to version v1.32**\\n\\n**Harder**\\n• Create and share Video Stickers made from .webm files.\\n• 5 new reactions and interactive emoji: 🥰🤯🤔🤬👏\\n• Send entire folders as a file.\\n• Directly add chats to chat folders from Global Search.\\n\\n**Better**\\n• Redesigned group management pages with animated artwork.\\n• ‘Forward To’ menu has smooth infinite scroll on mobile.\\n• Spoiler animations re-hide text after a short period.\\n• Numerous layout fixes and improvements.\\n\\n**Faster**\\n• Media loads and scrolls faster in Shared Media and Global Search.\\n• Optimized some heavy background calculations.\\n• Memory usage optimizations.\\n\\n**Stronger**\\n• Fixed missing sticker suggestions (e.g. for ❤️ emoji).\\n• Fixed infinite spinning in Sticker panel.\\n• Fixed scroll jumps and missing sender names in local search results.\\n• Fixed highlight color when searching in dark mode.\\n• Fixed pasting text and media from clipboard on Firefox and iOS browsers.\\n• Media Viewer: Fixed navigating to the origin message on mobile.\\n• Media Viewer: Fixed lingering audio after moving to the next item.\\n• Reactions: Fixed unexpected interaction animations.\\n• Fixed jumping cursor when typing in Safari.\\n\";","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddReducer('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddReducer('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddReducer('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddReducer('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { updateUserSearch } from '../../reducers';\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport { ApiError } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectCurrentMessageList } from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\n\nconst MAX_STORED_EMOJIS = 18; // Represents two rows of recent emojis\n\naddReducer('toggleChatInfo', (global, action, payload) => {\n  return {\n    ...global,\n    isChatInfoShown: payload !== undefined ? payload : !global.isChatInfoShown,\n  };\n});\n\naddReducer('setLeftColumnWidth', (global, actions, payload) => {\n  const leftColumnWidth = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddReducer('resetLeftColumnWidth', (global) => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddReducer('toggleManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddReducer('requestNextManagementScreen', (global, actions, payload): GlobalState | undefined => {\n  const { screen } = payload || {};\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  };\n});\n\naddReducer('closeManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddReducer('openChat', (global) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    isLeftColumnShown: global.messages.messageLists.length === 0,\n  };\n});\n\naddReducer('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddReducer('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload!;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddReducer('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload!;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddReducer('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('dismissNotification', (global, actions, payload) => {\n  const newNotifications = global.notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddReducer('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddReducer('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\n\naddReducer('openPaymentModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      chatId,\n      messageId,\n      isPaymentModalOpen: true,\n    },\n  };\n});\n\naddReducer('closePaymentModal', (global) => {\n  const newGlobal = clearPayment(global);\n  return closeInvoice(newGlobal);\n});\n\naddReducer('addPaymentError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      error,\n    },\n  };\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/environment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n  updateSponsoredMessage,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n  selectUser,\n  selectSendAs,\n  selectSponsoredMessage,\n} from '../../selectors';\nimport { debounce, rafPromise } from '../../../util/schedulers';\nimport { isServiceNotificationMessage } from '../../helpers';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddReducer('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    // Let reducer return and update global\n    await Promise.resolve();\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddReducer('loadMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const message = await loadMessage(chat, messageId, replyOriginForId);\n    if (message && threadUpdate) {\n      const { lastMessageId, isDeleting } = threadUpdate;\n\n      setGlobal(updateThreadUnreadFromForwardedMessage(\n        getGlobal(),\n        message,\n        chatId,\n        lastMessageId,\n        isDeleting,\n      ));\n    }\n  })();\n});\n\naddReducer('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments, MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddReducer('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(message.previousLocalId || message.id);\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddReducer('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  return global;\n});\n\naddReducer('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddReducer('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddReducer('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddReducer('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddReducer('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteHistory', (global, actions, payload) => {\n  (async () => {\n    const { chatId, shouldDeleteForAll } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const maxId = chat.lastMessage?.id;\n\n    await callApi('deleteHistory', { chat, shouldDeleteForAll, maxId });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('reportMessages', (global, actions, payload) => {\n  (async () => {\n    const {\n      messageIds, reason, description,\n    } = payload!;\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return;\n    }\n\n    const { chatId } = currentMessageList;\n    const chat = selectChat(global, chatId)!;\n\n    const result = await callApi('reportMessages', {\n      peer: chat, messageIds, reason, description,\n    });\n\n    actions.showNotification({\n      message: result\n        ? 'Thank you! Your report will be reviewed by our team.'\n        : 'Error occured while submiting report. Please, try again later.',\n    });\n  })();\n});\n\naddReducer('sendMessageAction', (global, actions, payload) => {\n  (async () => {\n    const { action, chatId, threadId } = payload!;\n    if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n    const chat = selectChat(global, chatId)!;\n    if (!chat) return;\n\n    await callApi('sendMessageAction', {\n      peer: chat, threadId, action,\n    });\n  })();\n});\n\naddReducer('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const { maxId } = payload!;\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n\n  // TODO Support local marking read for threads\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddReducer('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddReducer('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddReducer('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddReducer('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddReducer('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddReducer('forwardMessages', (global, action, payload) => {\n  const { fromChatId, messageIds, toChatId } = global.forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages) {\n    return;\n  }\n\n  const { isSilent, scheduledAt } = payload;\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      messages: realMessages,\n      serverTimeOffset: getGlobal().serverTimeOffset,\n      isSilent,\n      scheduledAt,\n      sendAs,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage({\n        chat: toChat,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n});\n\naddReducer('loadScheduledHistory', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadScheduledHistory(chat);\n});\n\naddReducer('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddReducer('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddReducer('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  let global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  serverTimeOffset?: number;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddReducer('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\naddReducer('loadSeenBy', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchSeenBy', { chat, messageId });\n    if (!result) {\n      return;\n    }\n\n    setGlobal(updateChatMessage(getGlobal(), chatId, messageId, {\n      seenByUserIds: result,\n    }));\n  })();\n});\n\naddReducer('saveDefaultSendAs', (global, actions, payload) => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddReducer('loadSendAs', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchSendAs', { chat });\n    if (!result) {\n      global = updateChat(global, chatId, {\n        sendAsIds: [],\n      });\n      setGlobal(global);\n      return;\n    }\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = updateChat(global, chatId, {\n      sendAsIds: result.ids,\n    });\n    setGlobal(global);\n  })();\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat) {\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n\naddReducer('loadSponsoredMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchSponsoredMessages', { chat });\n    if (!result) {\n      return;\n    }\n\n    let newGlobal = updateSponsoredMessage(getGlobal(), chatId, result.messages[0]);\n    newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users, 'id'));\n    newGlobal = addChats(newGlobal, buildCollectionByKey(result.chats, 'id'));\n\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('viewSponsoredMessage', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectStickerSet } from '../../selectors';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('loadStickerSets', (global) => {\n  const { hash } = global.stickers.added || {};\n  void loadStickerSets(hash);\n});\n\naddReducer('loadAddedStickers', (global, actions) => {\n  const { setIds: addedSetIds } = global.stickers.added;\n  const cached = global.stickers.setsById;\n  if (!addedSetIds || !addedSetIds.length) {\n    return;\n  }\n\n  (async () => {\n    for (let i = 0; i < addedSetIds.length; i++) {\n      const id = addedSetIds[i];\n      if (cached[id].stickers) {\n        continue; // Already loaded\n      }\n      actions.loadStickers({ stickerSetId: id });\n\n      if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n        await pause(ADDED_SETS_THROTTLE);\n      }\n    }\n  })();\n});\n\naddReducer('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddReducer('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddReducer('loadGreetingStickers', (global) => {\n  const { hash } = global.stickers.greeting || {};\n\n  (async () => {\n    const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n\n    if (!greeting) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal({\n      ...newGlobal,\n      stickers: {\n        ...newGlobal.stickers,\n        greeting: {\n          hash: greeting.hash,\n          stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n        },\n      },\n    });\n  })();\n});\n\naddReducer('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddReducer('loadStickers', (global, actions, payload) => {\n  const { stickerSetId, stickerSetShortName } = payload!;\n  let { stickerSetAccessHash } = payload!;\n\n  if (!stickerSetAccessHash && !stickerSetShortName) {\n    const stickerSet = selectStickerSet(global, stickerSetId);\n    if (!stickerSet) {\n      return;\n    }\n\n    stickerSetAccessHash = stickerSet.accessHash;\n  }\n\n  void loadStickers(stickerSetId, stickerSetAccessHash, stickerSetShortName);\n});\n\naddReducer('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n  void loadAnimatedEmojiEffects();\n});\n\naddReducer('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddReducer('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddReducer('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddReducer('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddReducer('loadEmojiKeywords', (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  (async () => {\n    const emojiKeywords = await callApi('fetchEmojiKeywords', {\n      language,\n      fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n    });\n\n    global = getGlobal();\n    currentEmojiKeywords = global.emojiKeywords[language];\n\n    if (!emojiKeywords) {\n      setGlobal({\n        ...global,\n        emojiKeywords: {\n          ...global.emojiKeywords,\n          [language]: {\n            ...currentEmojiKeywords,\n            isLoading: false,\n          },\n        },\n      });\n\n      return;\n    }\n\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          isLoading: false,\n          version: emojiKeywords.version,\n          keywords: {\n            ...(currentEmojiKeywords?.keywords),\n            ...emojiKeywords.keywords,\n          },\n        },\n      },\n    });\n  })();\n});\n\nasync function loadStickerSets(hash?: string) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash?: string) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash?: string) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetId: string, accessHash: string, stickerSetShortName?: string) {\n  const stickerSet = await callApi(\n    'fetchStickers',\n    { stickerSetShortName, stickerSetId, accessHash },\n  );\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  let global = getGlobal();\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nasync function loadAnimatedEmojiEffects() {\n  const stickerSet = await callApi('fetchAnimatedEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal({\n    ...getGlobal(),\n    animatedEmojiEffects: { ...set, stickers },\n  });\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddReducer('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddReducer('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload!;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddReducer('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddReducer('openStickerSetShortName', (global, actions, payload) => {\n  const { stickerSetShortName } = payload!;\n  return {\n    ...global,\n    openedStickerSetShortName: stickerSetShortName,\n  };\n});\n\nasync function searchStickers(query: string, hash?: string) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash?: string) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash?: string) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddReducer('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const newGlobal = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(newGlobal);\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddReducer('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalChats.map(({ id }) => id),\n      userIds: globalUsers.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport { SharedMediaType } from '../../../types';\n\naddReducer('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddReducer('searchMediaMessagesLocal', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chat, type, offsetId);\n});\n\naddReducer('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chat: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chat: ApiChat,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    searchSharedMedia(chat, type, nextOffsetId, true);\n  }\n}\n\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getDispatch().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import {\n  addReducer, getGlobal, setGlobal, getDispatch,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiFormattedText, ApiMessage, ApiUser, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport {\n  CHAT_LIST_LOAD_SLICE, DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  replaceChatListIds,\n  replaceChats,\n  replaceUsers,\n  replaceUserStatuses,\n  updateUsers,\n  addUserStatuses,\n  updateChats,\n  updateChatListSecondaryInfo,\n  updateThreadInfos,\n  replaceThreadParam,\n  updateListedIds,\n  safeReplaceViewportIds,\n  addChatMessagesById,\n} from '../../reducers';\nimport {\n  selectUser,\n  selectChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectChatMessage,\n  selectThreadInfo,\n  selectLastServiceNotification,\n} from '../../selectors';\nimport { isUserId } from '../../helpers';\n\naddReducer('sync', (global, actions) => {\n  void sync(actions.afterSync);\n});\n\naddReducer('afterSync', () => {\n  void afterSync();\n});\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 10 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\nasync function sync(afterSyncCallback: () => void) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  setGlobal({ ...getGlobal(), isSyncing: true });\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    setGlobal({ ...getGlobal(), isSyncing: false });\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  await callApi('fetchCurrentUser');\n\n  // This fetches only active chats and clears archived chats, which will be fetched in `afterSync`\n  const savedUsers = await loadAndReplaceChats();\n  await loadAndReplaceMessages(savedUsers);\n\n  setGlobal({\n    ...getGlobal(),\n    lastSyncTime: Date.now(),\n    isSyncing: false,\n  });\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH SYNC');\n  }\n\n  afterSyncCallback();\n}\n\nasync function afterSync() {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START AFTER-SYNC');\n  }\n\n  await Promise.all([\n    loadAndUpdateUsers(),\n    loadAndReplaceArchivedChats(),\n  ]);\n\n  await callApi('fetchCurrentUser');\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH AFTER-SYNC');\n  }\n}\n\nasync function loadAndReplaceChats() {\n  let global = getGlobal();\n\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    withPinned: true,\n    serverTimeOffset: global.serverTimeOffset,\n    lastLocalServiceMessage: selectLastServiceNotification(global)?.message,\n  });\n\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  const { currentUserId } = global;\n\n  const savedPrivateChatIds = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n    ...(currentUserId ? [currentUserId] : []),\n  ];\n\n  const savedUsers = savedPrivateChatIds\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  const savedChats = savedPrivateChatIds\n    .map((id) => selectChat(global, id))\n    .filter<ApiChat>(Boolean as any);\n\n  const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n  if (currentChatId) {\n    const selectedChat = selectChat(global, currentChatId);\n    if (selectedChat && !savedPrivateChatIds.includes(currentChatId)) {\n      savedChats.push(selectedChat);\n    }\n\n    if (isUserId(currentChatId)) {\n      const selectedChatUser = selectUser(global, currentChatId);\n      if (selectedChatUser && !savedPrivateChatIds.includes(currentChatId)) {\n        savedUsers.push(selectedChatUser);\n      }\n    }\n  }\n\n  savedUsers.push(...result.users);\n  savedChats.push(...result.chats);\n\n  global = replaceUserStatuses(global, result.userStatusesById);\n\n  global = replaceChats(global, buildCollectionByKey(savedChats, 'id'));\n  global = replaceChatListIds(global, 'active', result.chatIds);\n  global = updateChatListSecondaryInfo(global, 'active', result);\n\n  Object.keys(result.draftsById).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId]);\n  });\n\n  Object.keys(result.replyingToById).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  setGlobal(global);\n\n  if (currentChatId && !global.chats.byId[currentChatId]) {\n    getDispatch().openChat({ id: undefined });\n  }\n\n  return savedUsers;\n}\n\nasync function loadAndReplaceArchivedChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    archived: true,\n    withPinned: true,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addUserStatuses(global, result.userStatusesById);\n\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = replaceChatListIds(global, 'archived', result.chatIds);\n  global = updateChatListSecondaryInfo(global, 'archived', result);\n\n  setGlobal(global);\n}\n\nasync function loadAndReplaceMessages(savedUsers?: ApiUser[]) {\n  let areMessagesLoaded = false;\n  let users = savedUsers || [];\n\n  let global = getGlobal();\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, ApiFormattedText>>((acc, chatId) => {\n    const draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    if (draft) {\n      acc[chatId] = draft;\n    }\n\n    return acc;\n  }, {});\n\n  if (currentChatId) {\n    const result = await loadTopMessages(global.chats.byId[currentChatId]);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n        ? global.serviceNotifications.map(({ message }) => message)\n        : [];\n      const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n      const byId = buildCollectionByKey(allMessages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {},\n        },\n      };\n\n      global = addChatMessagesById(global, currentChatId, byId);\n      global = updateListedIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n      global = safeReplaceViewportIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin).map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin?.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo?.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n      users = Array.prototype.concat(users, result.users);\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', draftsByChatId[chatId]);\n  });\n\n  if (savedUsers) {\n    global = replaceUsers(global, buildCollectionByKey(users, 'id'));\n  } else if (users) {\n    // If `fetchChats` has failed for some reason, we don't have saved chats, thus we can not replace\n    global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getDispatch().closeAudioPlayer();\n  }\n}\n\nasync function loadAndUpdateUsers() {\n  let global = getGlobal();\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  if (\n    (!contactIds || !contactIds.length)\n    && (!recentlyFoundChatIds || !recentlyFoundChatIds.length)\n  ) {\n    return;\n  }\n\n  const users = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n  ].map((id) => selectUser(global, id)).filter<ApiUser>(Boolean as any);\n\n  const result = await callApi('fetchUsers', { users });\n  if (!result) {\n    return;\n  }\n\n  const { users: updatedUsers, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  setGlobal(global);\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateChat, updateManagement, updateManagementProgress } from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport { isChatBasicGroup } from '../../helpers';\n\naddReducer('checkPublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n\n    const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n    global = getGlobal();\n    global = updateManagementProgress(\n      global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n    );\n    global = updateManagement(global, chatId, { isUsernameAvailable });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    setGlobal(global);\n\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    const result = await callApi('setChatUsername', { chat, username });\n\n    global = getGlobal();\n    global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddReducer('setEditingExportedInvite', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  setGlobal(updateManagement(global, chatId, { editingInvite: invite }));\n});\n\naddReducer('setOpenedInviteInfo', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  setGlobal(updateManagement(global, chatId, update));\n});\n\naddReducer('loadExportedChatInvites', (global, actions, payload) => {\n  const {\n    chatId, adminId, isRevoked, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  (async () => {\n    const result = await callApi('fetchExportedChatInvites', {\n      peer, admin, isRevoked, limit,\n    });\n    if (!result) {\n      return;\n    }\n    const update = isRevoked ? { revokedInvites: result } : { invites: result };\n\n    setGlobal(updateManagement(getGlobal(), chatId, update));\n  })();\n});\n\naddReducer('editExportedChatInvite', (global, actions, payload) => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  (async () => {\n    const result = await callApi('editExportedChatInvite', {\n      peer,\n      link,\n      isRevoked,\n      expireDate,\n      usageLimit,\n      isRequestNeeded,\n      title,\n    });\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    let invites = global.management.byChatId[chatId].invites || [];\n    const revokedInvites = global.management.byChatId[chatId].revokedInvites || [];\n    const { oldInvite, newInvite } = result;\n    invites = invites.filter((current) => current.link !== oldInvite.link);\n    if (newInvite.isRevoked) {\n      revokedInvites.unshift(newInvite);\n    } else {\n      invites.push(newInvite);\n    }\n    setGlobal(updateManagement(global, chatId, {\n      invites,\n      revokedInvites,\n    }));\n  })();\n});\n\naddReducer('exportChatInvite', (global, actions, payload) => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  (async () => {\n    const result = await callApi('exportChatInvite', {\n      peer,\n      expireDate,\n      usageLimit,\n      isRequestNeeded,\n      title,\n    });\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    const invites = global.management.byChatId[chatId].invites || [];\n    setGlobal(updateManagement(global, chatId, {\n      invites: [...invites, result],\n    }));\n  })();\n});\n\naddReducer('deleteExportedChatInvite', (global, actions, payload) => {\n  const {\n    chatId, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  (async () => {\n    const result = await callApi('deleteExportedChatInvite', {\n      peer,\n      link,\n    });\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    const managementState = global.management.byChatId[chatId];\n    setGlobal(updateManagement(global, chatId, {\n      invites: managementState?.invites?.filter((invite) => invite.link !== link),\n      revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n    }));\n  })();\n});\n\naddReducer('deleteRevokedExportedChatInvites', (global, actions, payload) => {\n  const {\n    chatId, adminId,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  (async () => {\n    const result = await callApi('deleteRevokedExportedChatInvites', {\n      peer,\n      admin,\n    });\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    setGlobal(updateManagement(global, chatId, {\n      revokedInvites: [],\n    }));\n  })();\n});\n\naddReducer('loadChatInviteImporters', (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  (async () => {\n    const result = await callApi('fetchChatInviteImporters', {\n      peer,\n      link,\n      offsetDate,\n      offsetUser,\n      limit,\n    });\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n    if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) return;\n    setGlobal(updateManagement(global, chatId, {\n      inviteInfo: {\n        ...currentInviteInfo,\n        importers: result,\n      },\n    }));\n  })();\n});\n\naddReducer('loadChatInviteRequesters', (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  (async () => {\n    const result = await callApi('fetchChatInviteImporters', {\n      peer,\n      link,\n      offsetDate,\n      offsetUser,\n      limit,\n      isRequested: true,\n    });\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n    if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) return;\n    setGlobal(updateManagement(global, chatId, {\n      inviteInfo: {\n        ...currentInviteInfo,\n        requesters: result,\n      },\n    }));\n  })();\n});\n\naddReducer('loadChatJoinRequests', (global, actions, payload) => {\n  const {\n    chatId, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  (async () => {\n    const result = await callApi('fetchChatInviteImporters', {\n      peer,\n      offsetDate,\n      offsetUser,\n      limit,\n      isRequested: true,\n    });\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    setGlobal(updateChat(global, chatId, { joinRequests: result }));\n  })();\n});\n\naddReducer('hideChatJoinRequest', (global, actions, payload) => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  (async () => {\n    const result = await callApi('hideChatJoinRequest', {\n      peer,\n      user,\n      isApproved,\n    });\n\n    if (!result) return;\n    global = getGlobal();\n    const targetChat = selectChat(global, chatId);\n    if (!targetChat) return;\n    setGlobal(updateChat(global, chatId, {\n      joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n    }));\n  })();\n});\n\naddReducer('hideAllChatJoinRequests', (global, actions, payload) => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  (async () => {\n    const result = await callApi('hideAllChatJoinRequests', {\n      peer,\n      isApproved,\n      link,\n    });\n\n    if (!result) return;\n    global = getGlobal();\n    const targetChat = selectChat(global, chatId);\n    if (!targetChat) return;\n\n    setGlobal(updateChat(global, chatId, {\n      joinRequests: [],\n      fullInfo: {\n        ...targetChat.fullInfo,\n        recentRequesterIds: [],\n        requestsPending: 0,\n      },\n    }));\n  })();\n});\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { debounce, throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, pick, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport {\n  addChats, addUsers, replaceUserStatuses, updateChat, updateManagementProgress, updateUser, updateUsers,\n  updateUserSearch, updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\n\nconst runDebouncedForFetchFullUser = debounce((cb) => cb(), 500, false, true);\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddReducer('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  runDebouncedForFetchFullUser(() => callApi('fetchFullUser', { id, accessHash }));\n});\n\naddReducer('loadUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchUsers', { users: [user] });\n    if (!result) {\n      return;\n    }\n\n    const { users, userStatusesById } = result;\n\n    global = getGlobal();\n\n    global = updateUsers(global, buildCollectionByKey(users, 'id'));\n    setGlobal(replaceUserStatuses(global, {\n      ...global.users.statusesById,\n      ...userStatusesById,\n    }));\n\n    setGlobal(global);\n  })();\n});\n\naddReducer('loadTopUsers', (global) => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!lastRequestedAt || getServerTime(global.serverTimeOffset) - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers();\n  }\n});\n\naddReducer('loadContactList', () => {\n  void loadContactList();\n});\n\naddReducer('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddReducer('loadCommonChats', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  (async () => {\n    const maxId = user.commonChats?.maxId;\n    const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n    if (!result) {\n      return;\n    }\n\n    const { chats, chatIds, isFullyLoaded } = result;\n\n    global = getGlobal();\n    if (chats.length) {\n      global = addChats(global, buildCollectionByKey(chats, 'id'));\n    }\n    global = updateUser(global, user.id, {\n      commonChats: {\n        maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n        ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n        isFullyLoaded,\n      },\n    });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted, firstName, lastName,\n  } = payload!;\n\n  void updateContact(userId, isMuted, firstName, lastName);\n});\n\naddReducer('deleteContact', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteContact(userId);\n});\n\nasync function loadTopUsers() {\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList() {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: string,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getDispatch().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  let result;\n  if (user.phoneNumber) {\n    result = await callApi('updateContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('addContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n    });\n  }\n\n  if (result) {\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n}\n\nasync function deleteContact(userId: string) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n}\n\naddReducer('loadProfilePhotos', (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n\n  if (!user && !chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchProfilePhotos', user, chat);\n    if (!result || !result.photos) {\n      return;\n    }\n\n    let newGlobal = getGlobal();\n    if (isPrivate) {\n      newGlobal = updateUser(newGlobal, profileId, { photos: result.photos });\n    } else {\n      newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users!, 'id'));\n      newGlobal = updateChat(newGlobal, profileId, { photos: result.photos });\n    }\n\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\naddReducer('addContact', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  void callApi('addContact', pick(user, ['id', 'accessHash', 'firstName', 'lastName', 'phoneNumber']));\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import { GlobalState } from '../../global/types';\nimport { InlineBotSettings } from '../../types';\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiContact, ApiUser } from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  RE_TG_LINK, RE_TME_LINK,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList,\n  selectReplyingToId, selectSendAs, selectUser,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddReducer('clickInlineButton', (global, actions, payload) => {\n  const { button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.value });\n      break;\n    case 'url':\n      if (button.value.match(RE_TME_LINK) || button.value.match(RE_TG_LINK)) {\n        actions.openTelegramLink({ url: button.value });\n      } else {\n        actions.toggleSafeLinkModal({ url: button.value });\n      }\n      break;\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, button.messageId, button.value);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal();\n      break;\n    case 'requestSelfContact': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      const { messageId, value } = button;\n      if (!chat) {\n        return;\n      }\n\n      if (value) {\n        actions.getReceipt({ receiptMessageId: value, chatId: chat.id, messageId });\n      } else {\n        actions.getPaymentForm({ chat, messageId });\n        actions.setInvoiceMessageInfo(selectChatMessage(global, chat.id, messageId));\n        actions.openPaymentModal({ chatId: chat.id, messageId });\n      }\n      break;\n    }\n  }\n});\n\naddReducer('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentUserId || !chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId: chat.id, threadId, value: false });\n\n  void sendBotCommand(\n    chat, currentUserId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chatId),\n  );\n});\n\naddReducer('restartBot', (global, actions, payload) => {\n  const { chatId } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('unblockContact', bot.id, bot.accessHash);\n    if (!result) {\n      return;\n    }\n\n    setGlobal(removeBlockedContact(getGlobal(), bot.id));\n    void sendBotCommand(chat, currentUserId, '/start', undefined, selectSendAs(global, chatId));\n  })();\n});\n\naddReducer('loadTopInlineBots', (global) => {\n  const { lastRequestedAt } = global.topInlineBots;\n\n  if (lastRequestedAt && getServerTime(global.serverTimeOffset) - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchTopInlineBots');\n    if (!result) {\n      return;\n    }\n\n    const { ids, users } = result;\n\n    let newGlobal = getGlobal();\n    newGlobal = addUsers(newGlobal, buildCollectionByKey(users, 'id'));\n    newGlobal = {\n      ...newGlobal,\n      topInlineBots: {\n        ...newGlobal.topInlineBots,\n        userIds: ids,\n        lastRequestedAt: getServerTime(global.serverTimeOffset),\n      },\n    };\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('queryInlineBot', ((global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  (async () => {\n    let inlineBotData = global.inlineBots.byUsername[username];\n\n    if (inlineBotData === false) {\n      return;\n    }\n\n    if (inlineBotData === undefined) {\n      const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n      global = getGlobal();\n      if (!inlineBot || !chat) {\n        setGlobal(replaceInlineBotSettings(global, username, false));\n        return;\n      }\n\n      global = addUsers(global, { [inlineBot.id]: inlineBot });\n      global = addChats(global, { [chat.id]: chat });\n      inlineBotData = {\n        id: inlineBot.id,\n        query: '',\n        offset: '',\n        switchPm: undefined,\n        canLoadMore: true,\n        results: [],\n      };\n\n      global = replaceInlineBotSettings(global, username, inlineBotData);\n      setGlobal(global);\n    }\n\n    if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n      return;\n    }\n\n    void runDebouncedForSearch(() => {\n      searchInlineBot({\n        username,\n        inlineBotData: inlineBotData as InlineBotSettings,\n        chatId,\n        query,\n        offset,\n      });\n    });\n  })();\n}));\n\naddReducer('sendInlineBotResult', (global, actions, payload) => {\n  const { id, queryId } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  });\n});\n\naddReducer('resetInlineBot', (global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n});\n\naddReducer('startBot', (global, actions, payload) => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  (async () => {\n    await callApi('startBot', {\n      bot,\n      startParam: param,\n    });\n  })();\n});\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, currentUserId: string, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data: string) {\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { showDialog, showNotification, toggleSafeLinkModal } = getDispatch();\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' } });\n  } else if (message) {\n    showNotification({ message });\n  } else if (url) {\n    toggleSafeLinkModal({ url });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddReducer('loadPasswordInfo', () => {\n  (async () => {\n    const result = await callApi('getPasswordInfo');\n    if (!result) {\n      return;\n    }\n\n    let global = getGlobal();\n    global = replaceSettings(global, { hasPassword: result.hasPassword });\n    global = updateTwoFaSettings(global, { hint: result.hint });\n    setGlobal(global);\n  })();\n});\n\naddReducer('checkPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('checkPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('clearPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('clearPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updatePassword', (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updateRecoveryEmail', (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddReducer('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { PaymentStep } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  selectPaymentMessageId,\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectPaymentChatId,\n  selectChat,\n  selectPaymentFormId,\n} from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setInvoiceMessageInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n} from '../../reducers';\n\naddReducer('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  if (!chat || !messageId) {\n    return;\n  }\n  void validateRequestedInfo(chat, messageId, requestInfo, saveInfo);\n});\n\nasync function validateRequestedInfo(chat: ApiChat, messageId: number, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', {\n    chat, messageId, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddReducer('getPaymentForm', (global, actions, payload) => {\n  const { chat, messageId } = payload;\n  if (!chat || !messageId) {\n    return;\n  }\n  void getPaymentForm(chat, messageId);\n});\n\nasync function getPaymentForm(chat: ApiChat, messageId: number) {\n  const result = await callApi('getPaymentForm', { chat, messageId });\n  if (!result) {\n    return;\n  }\n  let global = setPaymentForm(getGlobal(), result);\n  let step = PaymentStep.PaymentInfo;\n  if (global.payment.invoice\n    && (global.payment.invoice.shippingAddressRequested\n    || global.payment.invoice.nameRequested\n    || global.payment.invoice.phoneRequested\n    || global.payment.invoice.emailRequested)) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n}\n\naddReducer('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  void getReceipt(chat, messageId, receiptMessageId);\n});\n\nasync function getReceipt(chat: ApiChat, messageId: number, receiptMessageId: number) {\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddReducer('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddReducer('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddReducer('sendCredentialsInfo', (global, actions, payload) => {\n  const publishableKey = selectProviderPublishableKey(global);\n  if (!publishableKey) {\n    return;\n  }\n  const { credentials } = payload;\n  const { data } = credentials;\n  void sendStripeCredentials(data, publishableKey);\n});\n\naddReducer('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  const formId = selectPaymentFormId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const publishableKey = selectProviderPublishableKey(global);\n  const stripeCredentials = selectStripeCredentials(global);\n  if (!chat || !messageId || !publishableKey || !formId) {\n    return;\n  }\n\n  void sendPaymentForm(chat, messageId, formId, {\n    save: saveCredentials,\n    data: stripeCredentials,\n  }, requestInfoId, shippingOptionId);\n});\n\nasync function sendStripeCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  },\n  publishableKey: string,\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  chat: ApiChat,\n  messageId: number,\n  formId: string,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    chat, messageId, formId, credentials, requestedInfoId, shippingOptionId,\n  });\n  if (result) {\n    const global = clearPayment(getGlobal());\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddReducer('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddReducer('setInvoiceMessageInfo', (global, actions, payload) => {\n  return setInvoiceMessageInfo(global, payload);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import { updateChatMessage } from './messages';\nimport { GlobalState } from '../../global/types';\nimport { selectChatMessage } from '../selectors';\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport windowSize from '../../util/windowSize';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  return x - ((global.isLeftColumnShown && !IS_SINGLE_COLUMN_LAYOUT)\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction(global: GlobalState, chatId: string, messageId: number, reaction: string) {\n  const { reactions } = selectChatMessage(global, chatId, messageId) || {};\n\n  if (!reactions) {\n    return global;\n  }\n\n  // Update UI without waiting for server response\n  let results = reactions.results.map((l) => (l.reaction === reaction\n    ? {\n      ...l,\n      count: l.isChosen ? l.count : l.count + 1,\n      isChosen: true,\n    } : (l.isChosen ? {\n      ...l,\n      isChosen: false,\n      count: l.count - 1,\n    } : l)))\n    .filter((l) => l.count > 0);\n\n  let { recentReactions } = reactions;\n\n  if (reaction && !results.some((l) => l.reaction === reaction)) {\n    const { currentUserId } = global;\n\n    results = [...results, {\n      reaction,\n      isChosen: true,\n      count: 1,\n    }];\n\n    if (reactions.canSeeList) {\n      recentReactions = [...(recentReactions || []), {\n        userId: currentUserId!,\n        reaction,\n      }];\n    }\n  }\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { ApiAppConfig, ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectDefaultReaction,\n  selectLocalAnimatedEmojiEffectByName,\n  selectMessageIdsByGroupId,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction } from '../../reducers/reactions';\nimport { addUsers, updateChatMessage } from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\nimport { isMessageLocal } from '../../helpers';\n\naddReducer('loadAvailableReactions', () => {\n  (async () => {\n    const result = await callApi('getAvailableReactions');\n\n    if (!result) {\n      return;\n    }\n\n    // Preload animations\n    result.forEach((availableReaction) => {\n      if (availableReaction.aroundAnimation) {\n        mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.Lottie);\n      }\n      if (availableReaction.centerIcon) {\n        mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.Lottie);\n      }\n    });\n\n    setGlobal({\n      ...getGlobal(),\n      availableReactions: result,\n    });\n  })();\n});\n\naddReducer('interactWithAnimatedEmoji', (global, actions, payload) => {\n  const {\n    emoji, x, y, localEffect, startSize, isReversed,\n  } = payload!;\n\n  return {\n    ...global,\n    activeEmojiInteraction: {\n      animatedEffect: emoji || localEffect,\n      x: subtractXForEmojiInteraction(global, x),\n      y,\n      startSize,\n      isReversed,\n    },\n  };\n});\n\naddReducer('sendEmojiInteraction', (global, actions, payload) => {\n  const {\n    messageId, chatId, emoji, interactions, localEffect,\n    x, y, startX, startY, startSize,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || (!emoji && !localEffect) || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji || selectLocalAnimatedEmojiEffectByName(localEffect),\n    timestamps: interactions,\n  });\n\n  if (!global.activeEmojiInteraction) return undefined;\n\n  return {\n    ...global,\n    activeEmojiInteraction: {\n      ...global.activeEmojiInteraction,\n      endX: subtractXForEmojiInteraction(global, x),\n      endY: y,\n      ...(startX && { x: subtractXForEmojiInteraction(global, startX) }),\n      ...(startY && { y: startY }),\n      ...(startSize && { startSize }),\n    },\n  };\n});\n\naddReducer('sendDefaultReaction', (global, actions, payload) => {\n  const {\n    chatId, messageId, x, y,\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.sendReaction({\n    chatId,\n    messageId,\n    reaction,\n    x,\n    y,\n  });\n});\n\naddReducer('sendReaction', (global, actions, payload) => {\n  const {\n    chatId,\n  }: { chatId: string } = payload;\n  let { messageId } = payload;\n\n  let { reaction } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  if (message.reactions?.results?.some((l) => l.reaction === reaction && l.isChosen)) {\n    reaction = undefined;\n  }\n\n  void callApi('sendReaction', { chat, messageId, reaction });\n\n  const { animationLevel } = global.settings.byKey;\n\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    global = {\n      ...global,\n      activeReactions: {\n        ...(reaction ? global.activeReactions : omit(global.activeReactions, [messageId])),\n        ...(reaction && {\n          [messageId]: {\n            reaction,\n            messageId,\n          },\n        }),\n      },\n    };\n  }\n\n  return addMessageReaction(global, chatId, messageId, reaction);\n});\n\naddReducer('openChat', (global) => {\n  return {\n    ...global,\n    activeReactions: {},\n  };\n});\n\naddReducer('stopActiveReaction', (global, actions, payload) => {\n  const { messageId, reaction } = payload;\n\n  if (global.activeReactions[messageId]?.reaction !== reaction) {\n    return global;\n  }\n\n  return {\n    ...global,\n    activeReactions: omit(global.activeReactions, [messageId]),\n  };\n});\n\naddReducer('setDefaultReaction', (global, actions, payload) => {\n  const { reaction } = payload;\n\n  (async () => {\n    const result = await callApi('setDefaultReaction', { reaction });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    setGlobal({\n      ...global,\n      appConfig: {\n        ...global.appConfig,\n        defaultReaction: reaction,\n      } as ApiAppConfig,\n    });\n  })();\n});\n\naddReducer('stopActiveEmojiInteraction', (global) => {\n  return {\n    ...global,\n    activeEmojiInteraction: undefined,\n  };\n});\n\naddReducer('loadReactors', (global, actions, payload) => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n\n  (async () => {\n    const result = await callApi('fetchMessageReactionsList', {\n      reaction,\n      chat,\n      messageId,\n      offset,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    if (result.users?.length) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    }\n\n    const { nextOffset, count, reactions } = result;\n\n    setGlobal(updateChatMessage(global, chatId, messageId, {\n      reactors: {\n        nextOffset,\n        count,\n        reactions: [\n          ...(message.reactors?.reactions || []),\n          ...reactions,\n        ],\n      },\n    }));\n  })();\n});\n\naddReducer('loadMessageReactions', (global, actions, payload) => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddReducer('sendWatchingEmojiInteraction', (global, actions, payload) => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !global.activeEmojiInteraction || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return {\n    ...global,\n    activeEmojiInteraction: {\n      ...global.activeEmojiInteraction,\n      x: subtractXForEmojiInteraction(global, x),\n      y,\n      startSize,\n      isReversed,\n    },\n  };\n});\n","export function areDeepEqual<T extends any>(value1: T, value2: T): boolean {\n  const type1 = typeof value1;\n  const type2 = typeof value2;\n  if (type1 !== type2) {\n    return false;\n  }\n\n  if (type1 !== 'object') {\n    return value1 === value2;\n  }\n\n  const isArray1 = Array.isArray(value1);\n  const isArray2 = Array.isArray(value2);\n\n  if (isArray1 !== isArray2) {\n    return false;\n  }\n\n  if (isArray1) {\n    const array1 = value1 as any[];\n    const array2 = value2 as any[];\n\n    if (array1.length !== array2.length) {\n      return false;\n    }\n\n    return array1.every((member1, i) => areDeepEqual(member1, array2[i]));\n  }\n\n  const object1 = value1 as AnyLiteral;\n  const object2 = value2 as AnyLiteral;\n  const keys1 = Object.keys(object1);\n\n  return keys1.every((key1) => areDeepEqual(object1[key1], object2[key1]));\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutNewMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1500;\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      const newGlobal = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(newGlobal);\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n      break;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n      break;\n    }\n\n    case 'updateChatLeave': {\n      setGlobal(leaveChat(global, update.id));\n\n      break;\n    }\n\n    case 'updateChatInbox': {\n      setGlobal(updateChat(global, update.id, update.chat));\n\n      break;\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        const newGlobal = getGlobal();\n        const chat = selectChat(newGlobal, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(newGlobal, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      break;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        setGlobal(updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n          ...(update.message.hasUnreadMention && {\n            unreadMentionsCount: chat.unreadMentionsCount ? chat.unreadMentionsCount + 1 : 1,\n          }),\n        }));\n      }\n\n      notifyAboutNewMessage({\n        chat,\n        message,\n      });\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: chat.unreadMentionsCount - 1,\n          });\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return;\n      }\n\n      setGlobal(updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      }));\n\n      break;\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      global = {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (listType) {\n        const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n        let newOrderedPinnedIds = orderedPinnedIds || [];\n        if (!isPinned) {\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n        } else if (!newOrderedPinnedIds.includes(id)) {\n          // When moving pinned chats to archive, active ordered pinned ids don't get updated\n          // (to preserve chat pinned state when it returns from archive)\n          // If user already has max pinned chats, we should check for orderedIds\n          // that don't point to listed chats\n          if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n            const listIds = global.chats.listIds.active;\n            newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n          }\n\n          newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n        }\n\n        global = {\n          ...global,\n          chats: {\n            ...global.chats,\n            orderedPinnedIds: {\n              ...global.chats.orderedPinnedIds,\n              [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n            },\n          },\n        };\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      setGlobal(updateChatListType(global, id, folderId));\n\n      break;\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        setGlobal(updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        }));\n      }\n\n      break;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        setGlobal(updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        }));\n      }\n      break;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n        global = updateChat(global, chatId, { draftDate: date });\n\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n      break;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (chat) {\n        global = updateChat(global, chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            requestsPending,\n            recentRequesterIds,\n          },\n        });\n        setGlobal(global);\n        actions.loadChatJoinRequests({ chatId });\n      }\n    }\n  }\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiUpdate, ApiMessage, ApiPollResult, ApiThreadInfo, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport { ActiveEmojiInteraction, GlobalActions, GlobalState } from '../../../global/types';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  isMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsChatWithBot,\n  selectIsServiceChatReady,\n  selectLocalAnimatedEmojiEffect,\n  selectLocalAnimatedEmoji,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText,\n} from '../../helpers';\n\nconst ANIMATION_DELAY = 350;\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      setGlobal(global);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (isMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (message.isOutgoing && !(message.content?.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n              isResizingContainer: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isMessageLocal(message as ApiMessage)) {\n          setTimeout(() => {\n            let delayedGlobal = getGlobal();\n            if (shouldForceReply) {\n              delayedGlobal = replaceThreadParam(delayedGlobal, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n            }\n            setGlobal(updateChatLastMessage(delayedGlobal, chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n      }\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n\n      if (global.activeEmojiInteraction || currentChatId !== update.id) return;\n      const message = selectChatMessage(global, currentChatId, update.messageId);\n\n      if (!message) return;\n\n      // Workaround for a weird behavior when interaction is received after watching reaction\n      if (getMessageText(message) !== update.emoji) return;\n\n      const localEmoji = selectLocalAnimatedEmoji(global, update.emoji);\n\n      global = {\n        ...global,\n        activeEmojiInteraction: {\n          animatedEffect: localEmoji ? selectLocalAnimatedEmojiEffect(localEmoji) : update.emoji,\n          messageId: update.messageId,\n        } as ActiveEmojiInteraction,\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      // Scroll down if bot message height is changed with an updated inline keyboard.\n      // A drawback: this will scroll down even if the previous scroll was not at bottom.\n      const chat = selectChat(global, chatId);\n      if (\n        chat\n        && !message.isOutgoing\n        && chat.lastMessage?.id === message.id\n        && selectIsChatWithBot(global, chat)\n        && isMessageInCurrentMessageList(global, chatId, message as ApiMessage)\n        && selectIsViewportNewest(global, chatId, message.threadInfo?.threadId || MAIN_THREAD_ID)\n      ) {\n        actions.focusLastMessage();\n      }\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, chatId, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread?.threadInfo) {\n        actions.markMessageListRead({ maxId: message.id });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, global);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const updatedPoll = { ...message.content.poll, ...pollUpdate };\n\n        // Workaround for poll update bug: `chosen` option gets reset when someone votes after current user\n        const { results: updatedResults } = updatedPoll.results || {};\n        if (updatedResults && !updatedResults.some(((result) => result.isChosen))) {\n          const { results } = message.content.poll.results;\n          const chosenAnswers = results && results.filter((result) => result.isChosen);\n          if (chosenAnswers) {\n            chosenAnswers.forEach((chosenAnswer) => {\n              const chosenAnswerIndex = updatedResults.findIndex((result) => result.option === chosenAnswer.option);\n              if (chosenAnswerIndex >= 0) {\n                updatedPoll.results.results![chosenAnswerIndex].isChosen = true;\n              }\n            });\n          }\n        }\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOption = newResults.find((result) => result.option === option);\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const currentReactions = message?.reactions;\n\n      // `updateMessageReactions` happens with an interval so we try to avoid redundant global state updates\n      if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n        return;\n      }\n\n      setGlobal(updateChatMessage(global, chatId, id, { reactions: update.reactions }));\n\n      break;\n    }\n  }\n});\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: string, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateThreadUnread(global: GlobalState, actions: GlobalActions, message: ApiMessage, isDeleting?: boolean) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, actions: GlobalActions, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n        global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n        if (!firstMessageId) {\n          global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n        }\n      }\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: threadInfo.messagesCount + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first unread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const newGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(newGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = newGlobal;\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId]?.lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    setGlobal(global);\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, ApiUserStatus } from '../../../api/types';\n\nimport { deleteContact, replaceUserStatuses, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  const global = getGlobal();\n\n  setGlobal(replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  }));\n\n  pendingStatusUpdates = {};\n}\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\n\nimport { updateStickerSet } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import {\n  addReducer, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { ApiPrivacyKey } from '../../../types';\n\nimport { addBlockedContact, removeBlockedContact } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updatePrivacy':\n      global.settings.privacy[update.key as ApiPrivacyKey] = update.rules;\n      break;\n  }\n\n  return undefined;\n});\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer, getGlobal } from '../../../lib/teact/teactn';\nimport { ApiUpdate } from '../../../api/types';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          actions.leaveGroupCall({ shouldRemove: true });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      return updateGroupCall(global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount);\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(global, groupCallId, participant.id, participant,\n            Boolean(nextOffset) || currentUserId === participant.id);\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n      return global;\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import React, { FC, memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {() => connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ISettings, LeftColumnContent } from '../../../types';\nimport { ApiChat } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX, APP_NAME, APP_VERSION, FEEDBACK_URL,\n} from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport { selectCurrentMessageList, selectTheme } from '../../../modules/selectors';\nimport { isChatArchived } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport { disableHistoryBack } from '../../../hooks/useHistoryBack';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: 0 | 1 | 2;\n    chatsById?: Record<string, ApiChat>;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    isMessageListOpen: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing'>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\n\nconst PRODUCTION_HOSTNAME = 'web.telegram.org';\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isConnectionStatusMinimized,\n  isMessageListOpen,\n}) => {\n  const {\n    openChat,\n    openTipsChat,\n    setGlobalSearchDate,\n    setSettingOption, setGlobalSearchChatId,\n  } = getDispatch();\n\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized,\n  );\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleSwitchToWebK = () => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    disableHistoryBack();\n  };\n\n  const handleOpenTipsChat = () => {\n    openTipsChat({ langCode: lang.code });\n  };\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${APP_VERSION}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"animations\"\n            onClick={handleAnimationLevelChange}\n          >\n            <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n            <Switcher\n              id=\"animations\"\n              label=\"Toggle Animations\"\n              checked={animationLevel > 0}\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={handleOpenTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n                onClick={disableHistoryBack}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          {() => (\n            <ConnectionStatusOverlay\n              connectionStatus={connectionStatus}\n              connectionStatusText={connectionStatusText!}\n              onClick={toggleConnectionStatus}\n            />\n          )}\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId, connectionState, isSyncing } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isConnectionStatusMinimized,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n    };\n  },\n)(LeftMainHeader));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatFolder } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onScreenSelect,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => chatFoldersById[id] || {}).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, orderedFolderIds]);\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return [\n      {\n        id: ALL_FOLDER_ID,\n        title: lang.code === 'en' ? 'All' : lang('FilterAllChats'),\n      },\n      ...displayedFolders.map(({ id, title }) => ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n      })),\n    ];\n  }, [displayedFolders, folderCountersById, lang]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(0);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1), { forceOnHeavyAnimation: true });\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1), { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInAllTabRef = useRef();\n  isNotInAllTabRef.current = activeChatFolder !== 0;\n  useEffect(() => (isNotInAllTabRef.current ? captureEscKeyListener(() => {\n    if (isNotInAllTabRef.current) {\n      setActiveChatFolder(0);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack(activeChatFolder !== 0, () => setActiveChatFolder(0, { forceOnHeavyAnimation: true }));\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  });\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n\n    if (!activeFolder || activeChatFolder === 0) {\n      return (\n        <ChatList\n          folderType=\"all\"\n          isActive={isActive}\n          lastSyncTime={lastSyncTime}\n          foldersDispatch={foldersDispatch}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        isActive={isActive}\n        lastSyncTime={lastSyncTime}\n        onScreenSelect={onScreenSelect}\n        foldersDispatch={foldersDispatch}\n      />\n    );\n  }\n\n  return (\n    <div className=\"ChatFolders\">\n      {folderTabs?.length ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={folderTabs ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    } = global;\n\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(ChatFolders));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import React, {\n  FC, useCallback, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\nconst MENU_CLOSE_DELAY_MS = 750;\nlet closeTimeout: number | undefined;\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const handleClose = () => {\n    setIsMenuOpen(false);\n  };\n\n  const handleMouseEnter = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n  }, []);\n\n  const handleMouseLeave = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      setIsMenuOpen(false);\n    }, MENU_CLOSE_DELAY_MS);\n  }, []);\n\n  return (\n    <div\n      className={fabClassName}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nconst APP_OUTDATED_TIMEOUT = 3 * 24 * 60 * 60 * 1000; // 3 days\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const isMouseInside = useRef(false);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const [shouldRenderUpdateButton, updateButtonClassNames, handleUpdateClick] = useAppOutdatedCheck();\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders onScreenSelect={onScreenSelect} foldersDispatch={foldersDispatch} />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nfunction useAppOutdatedCheck() {\n  const [isAppOutdated, markIsAppOutdated] = useFlag(false);\n\n  useEffect(() => {\n    const timeout = window.setTimeout(markIsAppOutdated, APP_OUTDATED_TIMEOUT);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [markIsAppOutdated]);\n\n  const { shouldRender, transitionClassNames } = useShowTransition(isAppOutdated);\n\n  const handleUpdateClick = () => {\n    window.location.reload();\n  };\n\n  return [shouldRender, transitionClassNames, handleUpdateClick] as const;\n}\n\nexport default memo(LeftMain);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MAC_OS, LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport getKeyFromEvent from '../../util/getKeyFromEvent';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  activeChatFolder: number;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps> = ({\n  searchQuery,\n  searchDate,\n  activeChatFolder,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: boolean) => {\n    if (content === LeftColumnContent.NewGroupStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Language:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n        case SettingsScreens.QuickReaction:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyActiveSessions:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && activeChatFolder === 0) {\n      setContent(LeftColumnContent.GlobalSearch);\n      return;\n    }\n\n    setContent(LeftColumnContent.ChatList);\n    setContactsFilter('');\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchDate({ date: undefined });\n    setGlobalSearchChatId({ id: undefined });\n    resetChatCreation();\n    setTimeout(() => {\n      setLastResetTime(Date.now());\n    }, RESET_TRANSITION_DELAY_MS);\n  }, [\n    content, activeChatFolder, settingsScreen, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId,\n    resetChatCreation,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || activeChatFolder === 0\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [activeChatFolder, content, handleReset],\n  );\n\n  useEffect(() => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (((IS_MAC_OS && e.metaKey) || (!IS_MAC_OS && e.ctrlKey)) && e.shiftKey && getKeyFromEvent(e) === 'f') {\n        e.preventDefault();\n        setContent(LeftColumnContent.GlobalSearch);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [content]);\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, setLeftColumnWidth, resetLeftColumnWidth, leftColumnWidth);\n\n  const handleSettingsScreenSelect = (screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  };\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onContentChange={setContent}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent}\n                  onSearchQuery={handleSearchQuery}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n    } = global;\n    return {\n      searchQuery: query, searchDate: date, activeChatFolder, shouldSkipHistoryAnimations, leftColumnWidth,\n    };\n  },\n)(LeftColumn));\n","import { RefObject } from 'react';\nimport { useState, useEffect } from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport const useResize = (\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n) => {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  useEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    elementRef.current.style.width = `${initialWidth}px`;\n  }, [elementRef, initialWidth]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('no-selection', 'cursor-ew-resize');\n  }\n\n  function initResize(event: React.MouseEvent<HTMLElement, MouseEvent>) {\n    document.body.classList.add('no-selection', 'cursor-ew-resize');\n\n    setInitialMouseX(event.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(event: React.MouseEvent<HTMLElement, MouseEvent>) {\n    event.preventDefault();\n    elementRef.current!.style.width = '';\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return;\n\n    const handleMouseMove = (event: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + event.clientX - initialMouseX);\n      elementRef.current!.style.width = `${newWidth}px`;\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive]);\n\n  return { initResize, resetResize, handleMouseUp };\n};\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\nimport windowSize from '../util/windowSize';\nimport { ApiDimensions } from '../api/types';\n\nconst THROTTLE = 250;\n\nconst useWindowSize = () => {\n  const [size, setSize] = useState<ApiDimensions>(windowSize.get());\n\n  useEffect(() => {\n    const handleResize = throttle(() => {\n      setSize(windowSize.get());\n    }, THROTTLE, false);\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return size;\n};\n\nexport default useWindowSize;\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import React, {\n  FC,\n  memo,\n  useRef,\n  useCallback,\n  useState,\n  useEffect,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { IAnchorPosition, ManagementScreens } from '../../types';\n\nimport {\n  ARE_CALLS_SUPPORTED, IS_MAC_OS, IS_PWA, IS_SINGLE_COLUMN_LAYOUT,\n} from '../../util/environment';\nimport getKeyFromEvent from '../../util/getKeyFromEvent';\nimport {\n  isChatBasicGroup, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatBot,\n  selectIsUserBlocked,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  canExpandActions: boolean;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n}\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  pendingJoinRequests,\n  isRightColumnShown,\n  canExpandActions,\n}) => {\n  const {\n    joinChannel,\n    sendBotCommand,\n    openLocalTextSearch,\n    restartBot,\n    openCallFallbackConfirm,\n    requestNextManagementScreen,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleJoinRequestsClick = useCallback(() => {\n    requestNextManagementScreen({ screen: ManagementScreens.JoinRequests });\n  }, [requestNextManagementScreen]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  useEffect(() => {\n    if (!canSearch) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (\n        IS_PWA && ((IS_MAC_OS && e.metaKey) || (!IS_MAC_OS && e.ctrlKey)) && !e.shiftKey && getKeyFromEvent(e) === 'f'\n      ) {\n        e.preventDefault();\n        handleSearchClick();\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [canSearch, handleSearchClick]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && (\n        <>\n          {canExpandActions && canSubscribe && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </Button>\n          )}\n          {canExpandActions && canStartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </Button>\n          )}\n          {canExpandActions && canRestartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </Button>\n          )}\n          {canSearch && (\n            <Button\n              round\n              ripple={isRightColumnShown}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleSearchClick}\n              ariaLabel=\"Search in this chat\"\n            >\n              <i className=\"icon-search\" />\n            </Button>\n          )}\n          {canCall && (\n            <Button\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={openCallFallbackConfirm}\n              ariaLabel=\"Call\"\n            >\n              <i className=\"icon-phone\" />\n            </Button>\n          )}\n        </>\n      )}\n      {Boolean(pendingJoinRequests) && (\n        <Button\n          round\n          className=\"badge-button\"\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleJoinRequestsClick}\n          ariaLabel={isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n        >\n          <i className=\"icon-user\" />\n          <div className=\"badge\">{pendingJoinRequests}</div>\n        </Button>\n      )}\n      <Button\n        ref={menuButtonRef}\n        className={isMenuOpen ? 'active' : ''}\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        disabled={noMenu}\n        ariaLabel=\"More actions\"\n        onClick={handleHeaderMenuOpen}\n      >\n        <i className=\"icon-more\" />\n      </Button>\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          withExtraActions={IS_SINGLE_COLUMN_LAYOUT || !canExpandActions}\n          isChannel={isChannel}\n          canStartBot={canStartBot}\n          canRestartBot={canRestartBot}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canCall={canCall}\n          canMute={canMute}\n          canLeave={canLeave}\n          canEnterVoiceChat={canEnterVoiceChat}\n          canCreateVoiceChat={canCreateVoiceChat}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (!chat || chat.isRestricted || selectIsInSelectMode(global)) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const bot = selectChatBot(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canCall = ARE_CALLS_SUPPORTED && isUserId(chat.id) && !isChatWithSelf && !bot;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canLeave = isMainThread && !canSubscribe;\n    const canEnterVoiceChat = ARE_CALLS_SUPPORTED && chat.isCallActive;\n    const canCreateVoiceChat = ARE_CALLS_SUPPORTED && !chat.isCallActive\n      && (chat.adminRights?.manageCall || (chat.isCreator && isChatBasicGroup(chat)));\n    const pendingJoinRequests = chat.fullInfo?.requestsPending;\n\n    return {\n      noMenu: false,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canRestartBot,\n      canSubscribe,\n      canSearch,\n      canCall,\n      canMute,\n      canLeave,\n      canEnterVoiceChat,\n      canCreateVoiceChat,\n      pendingJoinRequests,\n    };\n  },\n)(HeaderActions));\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { ApiMessage } from '../api/types';\n\nimport { DEBUG } from '../config';\nimport { isWebpSupported } from '../util/environment';\nimport { EMPTY_IMAGE_DATA_URI, webpToPngBase64 } from '../util/webpToPng';\nimport { getMessageMediaThumbDataUri } from '../modules/helpers';\n\nexport default function useWebpThumbnail(message?: ApiMessage) {\n  const thumbDataUri = message && getMessageMediaThumbDataUri(message);\n  const sticker = message?.content?.sticker;\n  const shouldDecodeThumbnail = thumbDataUri && sticker && !isWebpSupported() && thumbDataUri.includes('image/webp');\n  const [thumbnailDecoded, setThumbnailDecoded] = useState(EMPTY_IMAGE_DATA_URI);\n  const messageId = message?.id;\n\n  useLayoutEffect(() => {\n    if (!shouldDecodeThumbnail) {\n      return;\n    }\n\n    webpToPngBase64(`b64-${messageId}`, thumbDataUri!)\n      .then(setThumbnailDecoded)\n      .catch((err) => {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(err);\n        }\n      });\n  }, [messageId, shouldDecodeThumbnail, thumbDataUri]);\n\n  return shouldDecodeThumbnail ? thumbnailDecoded : thumbDataUri;\n}\n","import React, {\n  FC,\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        // @ts-ignore\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          // @ts-ignore\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../modules/helpers';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport RippleEffect from '../ui/RippleEffect';\nimport buildClassName from '../../util/buildClassName';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\n\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const lang = useLang();\n  const mediaThumbnail = useWebpThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = renderMessageSummary(lang, message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div className=\"HeaderPinnedMessage\" onClick={onClick} dir={lang.isRtl ? 'rtl' : undefined}>\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">{text}</p>\n        </div>\n\n        <RippleEffect />\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","export function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          canvas.getContext('2d')!.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nfunction steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport useMedia from './useMedia';\nimport { useAsync } from './useAsync';\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../modules/helpers';\nimport { getTranslation } from '../util/langProvider';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\n// @ts-ignore\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = (audio && audio.performer) || (sender && getSenderTitle(getTranslation, sender));\n  const album = (chat && getChatTitle(getTranslation, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => makeGoodArtwork(media, size), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes || audio.thumbnailSizes.length === 0) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport const useAsync = <T>(fn: () => Promise<T>, deps: any[], defaultValue?: T) => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<Error | undefined>();\n  const [result, setResult] = useState<T | undefined>(defaultValue);\n  useEffect(() => {\n    setIsLoading(true);\n    let wasCancelled = false;\n    fn().then((res) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setResult(res);\n    }, (err) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setError(err);\n    });\n    return () => {\n      wasCancelled = true;\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n  return { isLoading, error, result };\n};\n","import React, {\n  FC, useCallback, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { AudioOrigin } from '../../types';\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../modules/helpers';\nimport { selectChat, selectSender } from '../../modules/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport windowSize from '../../util/windowSize';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useLang from '../../hooks/useLang';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport renderText from '../common/helpers/renderText';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isMuted: boolean;\n};\n\nconst FAST_PLAYBACK_RATE = 1.8;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getDispatch();\n\n  const lang = useLang();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  // Prevent refresh by accidentally rotating device when listening to a voice message\n  const isVoicePlaying = isVoice && isPlaying;\n  useEffect(() => {\n    if (!isVoicePlaying) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isVoicePlaying]);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n    setAudioPlayerMuted({ isMuted: false });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerMuted, setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const handlePlaybackClick = useCallback(() => {\n    if (playbackRate === 1) {\n      setPlaybackRate(FAST_PLAYBACK_RATE);\n      setAudioPlayerPlaybackRate({ playbackRate: FAST_PLAYBACK_RATE });\n    } else {\n      setPlaybackRate(1);\n      setAudioPlayerPlaybackRate({ playbackRate: 1 });\n    }\n  }, [playbackRate, setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        className=\"player-button volume-button\"\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel=\"Volume\"\n        withClickPropagation\n      >\n        <i className={volumeIcon} onClick={handleVolumeClick} />\n        {!IS_IOS && (\n          <>\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </>\n        )}\n      </Button>\n\n      {isVoice && (\n        <Button\n          round\n          className={buildClassName('playback-button', playbackRate !== 1 && 'applied')}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          onClick={handlePlaybackClick}\n        >\n          <span className=\"playback-button-inner\">2Х</span>\n        </Button>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const { volume, playbackRate, isMuted } = global.audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiGroupCall, ApiUser } from '../../../api/types';\n\nimport { selectChatGroupCall } from '../../../modules/selectors/calls';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\n\nimport './GroupCallTopPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasPinnedOffset: boolean;\n};\n\ntype StateProps = {\n  groupCall?: ApiGroupCall;\n  isActive: boolean;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n};\n\nconst GroupCallTopPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  groupCall,\n  hasPinnedOffset,\n  usersById,\n  chatsById,\n}) => {\n  const {\n    joinGroupCall,\n    subscribeToGroupCallUpdates,\n  } = getDispatch();\n\n  const lang = useLang();\n\n  const handleJoinGroupCall = useCallback(() => {\n    joinGroupCall({\n      chatId,\n    });\n  }, [joinGroupCall, chatId]);\n\n  const participants = groupCall?.participants;\n\n  const fetchedParticipants = useMemo(() => {\n    if (participants) {\n      return Object.values(participants).filter((_, i) => i < 3).map(({ id, isUser }) => {\n        if (isUser) {\n          if (!usersById[id]) {\n            return undefined;\n          }\n          return { user: usersById[id] };\n        } else {\n          if (!chatsById[id]) {\n            return undefined;\n          }\n          return { chat: chatsById[id] };\n        }\n      }).filter(Boolean);\n    } else return [];\n  }, [chatsById, participants, usersById]);\n\n  useEffect(() => {\n    if (!groupCall?.id) return undefined;\n    if (!isActive && groupCall.isLoaded) return undefined;\n\n    subscribeToGroupCallUpdates({\n      id: groupCall.id,\n      subscribed: true,\n    });\n\n    return () => {\n      subscribeToGroupCallUpdates({\n        id: groupCall.id,\n        subscribed: false,\n      });\n    };\n  }, [groupCall?.id, groupCall?.isLoaded, isActive, subscribeToGroupCallUpdates]);\n\n  if (!groupCall) return undefined;\n\n  return (\n    <div\n      className={buildClassName(\n        'GroupCallTopPane',\n        hasPinnedOffset && 'has-pinned-offset',\n        !isActive && 'is-hidden',\n      )}\n      onClick={handleJoinGroupCall}\n    >\n      <div className=\"info\">\n        <span className=\"title\">{lang('VoipGroupVoiceChat')}</span>\n        <span className=\"participants\">{lang('Participants', groupCall.participantsCount || 0, 'i')}</span>\n      </div>\n      <div className=\"avatars\">\n        {fetchedParticipants.map((p) => {\n          if (!p) return undefined;\n          if (p.user) {\n            return <Avatar key={p.user.id} user={p.user} />;\n          } else {\n            return <Avatar key={p.chat.id} chat={p.chat} />;\n          }\n        })}\n      </div>\n      <Button round className=\"join\">\n        {lang('VoipChatJoin')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chat = selectChat(global, chatId)!;\n    const groupCall = selectChatGroupCall(global, chatId);\n    return {\n      groupCall,\n      usersById: global.users.byId,\n      chatsById: global.chats.byId,\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      isActive: ((!groupCall ? (chat && chat.isCallNotEmpty && chat.isCallActive)\n        : (groupCall.participantsCount > 0 && groupCall.isLoaded)))\n        && (global.groupCalls.activeGroupCallId !== groupCall?.id),\n    };\n  },\n)(GroupCallTopPane));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport { GlobalState, MessageListType } from '../../global/types';\nimport {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser, MAIN_THREAD_ID,\n} from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_ID,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isUserId,\n} from '../../modules/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../modules/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  isChatWithBot?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isChatWithSelf,\n  isChatWithBot,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getDispatch();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID);\n      if (messageInput) {\n        messageInput.blur();\n      }\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    threadId, messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode, setBackButtonActive,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo={isChatWithBot}\n              withMediaViewer\n              withUpdatingStatus\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n      >\n        {renderInfo}\n      </Transition>\n\n      <GroupCallTopPane\n        hasPinnedOffset={\n          (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n        }\n        chatId={chatId}\n      />\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isAudioPlayerRendered && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const chat = selectChat(global, chatId);\n\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isChatWithBot: chat && selectIsChatWithBot(global, chat),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\n\nimport { getDayStart } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../modules/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: Number(getDayStart(messages[0].date * 1000)),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = Number(getDayStart(nextMessage.date * 1000));\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { RefObject } from 'react';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMessagesRead } = getDispatch();\n\n  const {\n    observe: observeIntersectionForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMessagesRead({ messageIds: mentionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  };\n}\n","import { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../modules/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMedia = photo || video;\n  const isMediaWithNoText = isMedia && !text;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (text) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (photo || video) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../modules/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, isForwarded, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport { IAlbum } from '../../../../types';\nimport { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction clamp(num: number, low: number, high: number) {\n  return num < low ? low : (num > high ? high : num);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1)));\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, isForwarded, false, noAvatars) - (isForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet element: HTMLSpanElement | undefined;\n\nexport default function calculateAuthorWidth(text: string) {\n  if (!element) {\n    element = document.createElement('span');\n    // eslint-disable-next-line max-len\n    element.style.font = IS_IOS\n      // eslint-disable-next-line max-len\n      ? '400 12px system-ui, -apple-system, BlinkMacSystemFont, \"Roboto\", \"Apple Color Emoji\", \"Helvetica Neue\", sans-serif'\n      : '400 12px \"Roboto\", -apple-system, \"Apple Color Emoji\", BlinkMacSystemFont, \"Helvetica Neue\", sans-serif';\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer]);\n}\n","import { RefObject } from 'react';\nimport React, { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getDispatch();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction(e: React.MouseEvent) {\n    const { x, y } = e.currentTarget.getBoundingClientRect();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    const { pageX: x, pageY: y } = e;\n\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap(e);\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, {\n  FC, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\nimport { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../modules/selectors';\nimport { isChatChannel } from '../../modules/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { ObserveFn, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter<ApiUser>(Boolean as any)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    { asTextWithSpoilers: isEmbedded },\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{content}</span>;\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={`message${message.id}`}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import React, { FC, useRef } from '../../lib/teact/teact';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useLang from '../../hooks/useLang';\nimport { renderMessageSummary } from './helpers/renderMessageText';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  isProtected?: boolean;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const pictogramId = message && `sticker-reply-thumb${message.id}`;\n  const mediaThumbnail = useWebpThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender && getSenderTitle(lang, sender);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('EmbeddedMessage', className)}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(pictogramId, mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderMessageSummary(lang, message, Boolean(mediaThumbnail))\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  id: string | undefined,\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <>\n      <img\n        id={id}\n        src={blobUrl || thumbDataUri}\n        width={width}\n        height={height}\n        alt=\"\"\n        className={isRoundVideo ? 'round' : ''}\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </>\n  );\n}\n\nexport default EmbeddedMessage;\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { ActiveReaction } from '../../../global/types';\nimport { ApiAvailableReaction, ApiMediaFormat } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionAnimatedEmoji.scss';\n\ntype OwnProps = {\n  reaction: string;\n  activeReaction?: ActiveReaction;\n  isInMeta?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CENTER_ICON_SIZE = 30;\nconst EFFECT_SIZE = 100;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  activeReaction,\n  isInMeta,\n  availableReactions,\n}) => {\n  const { stopActiveReaction } = getDispatch();\n\n  const availableReaction = availableReactions?.find((r) => r.reaction === reaction);\n  const centerIconId = availableReaction?.centerIcon?.id;\n  const effectId = availableReaction?.aroundAnimation?.id;\n  const mediaDataCenterIcon = useMedia(`sticker${centerIconId}`, !centerIconId, ApiMediaFormat.Lottie);\n  const mediaDataEffect = useMedia(`sticker${effectId}`, !effectId, ApiMediaFormat.Lottie);\n\n  const shouldPlay = Boolean(activeReaction?.reaction === reaction && mediaDataCenterIcon && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    stopActiveReaction({ messageId: activeReaction?.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !shouldPlay || !isAnimationLoaded;\n\n  const className = buildClassName(\n    'ReactionAnimatedEmoji',\n    isInMeta && 'in-meta',\n    shouldRenderAnimation && 'is-animating',\n  );\n\n  return (\n    <div className={className}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} />}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={centerIconId}\n            id={`reaction_emoji_${centerIconId}`}\n            className={animationClassNames}\n            size={CENTER_ICON_SIZE}\n            animationData={mediaDataCenterIcon}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onLoad={markAnimationLoaded}\n            onEnded={unmarkAnimationLoaded}\n          />\n          <AnimatedSticker\n            key={effectId}\n            id={`reaction_effect_${effectId}`}\n            className={buildClassName('effect', animationClassNames)}\n            size={EFFECT_SIZE}\n            animationData={mediaDataEffect}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, {\n  FC, memo, useMemo,\n} from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\nimport { ActiveReaction } from '../../../global/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  reactionMessage?: ApiMessage;\n  withReactions?: boolean;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick, withReactions,\n  activeReaction, withReactionOffset, availableReactions,\n  reactionMessage,\n}) => {\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const reactions = withReactions && reactionMessage?.reactions?.results.filter((l) => l.count > 0);\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  return (\n    <span\n      className={buildClassName('MessageMeta', withReactionOffset && 'reactions-offset')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n    >\n      {reactions && reactions.map((l) => (\n        <ReactionAnimatedEmoji\n          activeReaction={activeReaction}\n          reaction={l.reaction}\n          isInMeta\n          availableReactions={availableReactions}\n        />\n      ))}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import React, { FC, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { NO_STICKER_SET_ID } from '../../../config';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useWebpThumbnail from '../../../hooks/useWebpThumbnail';\nimport safePlay from '../../../util/safePlay';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\nimport './Sticker.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const sticker = message.content.sticker!;\n  const { isLottie, stickerSetId, isGif } = sticker;\n  const canDisplayGif = IS_WEBM_SUPPORTED;\n  const isMemojiSticker = stickerSetId === NO_STICKER_SET_ID;\n\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const previewMediaHash = isGif && !canDisplayGif && (\n    sticker.isPreloadedGlobally ? `sticker${sticker.id}?size=m` : getMessageMediaHash(message, 'pictogram'));\n  const previewBlobUrl = useMedia(previewMediaHash);\n  const thumbDataUri = useWebpThumbnail(message);\n  const previewUrl = previewBlobUrl || thumbDataUri;\n\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isLottieLoaded, markLottieLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isLottie ? isLottieLoaded : isMediaLoaded;\n  const transitionClassNames = useMediaTransition(isMediaReady);\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n  );\n\n  useEffect(() => {\n    if (!isGif || !ref.current) return;\n    const video = ref.current.querySelector('video');\n    if (!video) return;\n    if (shouldPlay) {\n      safePlay(video);\n    } else {\n      video.pause();\n    }\n  }, [isGif, shouldPlay]);\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? openModal : undefined}>\n      {(!isMediaReady || (isGif && !canDisplayGif)) && (\n        <img\n          id={`sticker-thumb-${message.id}`}\n          src={previewUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isLottie && !isGif && (\n        <img\n          id={`sticker-${message.id}`}\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isGif && canDisplayGif && isMediaReady && (\n        <video\n          id={`sticker-${message.id}`}\n          src={mediaData as string}\n          width={width}\n          height={height}\n          autoPlay={shouldPlay}\n          playsInline\n          loop={shouldLoop}\n          muted\n        />\n      )}\n      {isLottie && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          id={mediaHash}\n          animationData={mediaData}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markLottieLoaded}\n        />\n      )}\n      <StickerSetModal\n        isOpen={isModalOpen}\n        fromSticker={sticker}\n        onClose={closeModal}\n      />\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../modules/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, fullMediaData?: string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import React, {\n  FC, useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ISettings } from '../../../types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst CUSTOM_APPENDIX_ATTRIBUTE = 'data-has-custom-appendix';\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbRef = useBlurredMediaThumbRef(message, fullMediaData);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, 'download'), !isDownloading);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(fullMediaData);\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        // @ts-ignore teact feature\n        style={`width: ${width}px; height: ${height}px`}\n      />\n      <img\n        src={fullMediaData}\n        className={`full-media ${transitionClassNames}`}\n        width={width}\n        height={height}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <i className={buildClassName('icon-download', downloadButtonClassNames)} />}\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import { useCallback, useRef } from '../../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../../util/schedulers';\nimport safePlay from '../../../../util/safePlay';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useHeavyAnimationCheck from '../../../../hooks/useHeavyAnimationCheck';\n\nexport default function useVideoAutoPause(playerRef: { current: HTMLVideoElement | null }, canPlay: boolean) {\n  const wasPlaying = useRef(playerRef.current?.paused);\n  const canPlayRef = useRef();\n  canPlayRef.current = canPlay;\n\n  const freezePlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    wasPlaying.current = !playerRef.current.paused;\n\n    if (wasPlaying.current) {\n      playerRef.current.pause();\n    }\n  }, [playerRef]);\n\n  const unfreezePlaying = useCallback(() => {\n    if (\n      playerRef.current && wasPlaying.current && canPlayRef.current\n      // At this point HTMLVideoElement can be unmounted from the DOM\n      && document.body.contains(playerRef.current)\n    ) {\n      safePlay(playerRef.current);\n    }\n  }, [playerRef]);\n\n  const unfreezePlayingOnRaf = useCallback(() => {\n    fastRaf(unfreezePlaying);\n  }, [unfreezePlaying]);\n\n  useBackgroundMode(freezePlaying, unfreezePlayingOnRaf);\n  useHeavyAnimationCheck(freezePlaying, unfreezePlaying);\n}\n","import React, {\n  FC, useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat, ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n  isDownloading,\n  isProtected,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const previewClassNames = useMediaTransition(previewBlobUrl);\n\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(isIntersecting && fullMediaData);\n  // Thumbnail is always rendered so we can only disable blur if we have preview\n  const thumbRef = useBlurredMediaThumbRef(message, previewBlobUrl);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!canAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isBuffered) || isDownloading,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(isLoadAllowed && !isPlayAllowed && !shouldRenderSpinner);\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = (videoRef.current?.duration) || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded, noAvatars);\n\n  useVideoAutoPause(videoRef, isInline);\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (isDownloading) {\n      getDispatch().cancelMessageMediaDownload({ message });\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, isDownloading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        // @ts-ignore teact feature\n        style={`width: ${width}px; height: ${height}px;`}\n      />\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        // @ts-ignore teact feature\n        style={`width: ${width}px; height: ${height}px;`}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isInline && (\n        <video\n          ref={videoRef}\n          className=\"full-media\"\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderPlayButton && <i className={buildClassName('icon-large-play', playButtonClassNames)} />}\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openChat } = getDispatch();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', Boolean(userId) && 'interactive')}\n      onClick={userId ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import React, {\n  FC, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent < answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            // @ts-ignore\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n  serverTimeOffset: number;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n  serverTimeOffset,\n}) => {\n  const { loadMessage, openPollResults } = getDispatch();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    if (\n      isSubmitting\n      && poll.results.results\n      && poll.results.results.some((result) => result.isChosen)\n    ) {\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\">\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n)(Poll));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../modules/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  let isSquarePhoto = false;\n  if (webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebPage',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          nonInteractive={!isMediaInteractive}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          theme={theme}\n        />\n      )}\n      <div className=\"WebPage-text\">\n        <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n        {!inPreview && title && (\n          <p className=\"site-title\">{renderText(title)}</p>\n        )}\n        {truncatedDescription && (\n          <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n        )}\n      </div>\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersection={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../modules/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n}) => {\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photoUrl,\n  } = invoice!;\n\n  return (\n    <div\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <p>{renderText(text, ['emoji', 'br'])}</p>\n      )}\n      <div className={`description ${photoUrl ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n          />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../../lib/teact/teactn';\n\nimport { OwnProps as PhotoProps } from '../Photo';\nimport { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../modules/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getDispatch();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...props.dimensions,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : props.onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        // @ts-ignore\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { GlobalState } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum, ISettings } from '../../../types';\nimport { AlbumRectPart, IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent } from '../../../modules/helpers';\nimport { getDispatch, getGlobal, withGlobal } from '../../../lib/teact/teactn';\nimport withSelectControl from './hocs/withSelectControl';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../modules/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getDispatch();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[message.previousLocalId || message.id];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      // @ts-ignore\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat, ApiMessage } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet currentOnRelease: NoneToVoidFunction;\n\nfunction createCapture(onRelease: NoneToVoidFunction) {\n  return () => {\n    if (currentOnRelease) {\n      currentOnRelease();\n    }\n\n    currentOnRelease = onRelease;\n  };\n}\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = (isLoadAllowed && !isBuffered) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(mediaData);\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = () => {\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current!);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  };\n\n  const capturePlaying = createCapture(stopPlaying);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useVideoAutoPause(playerRef, shouldPlay);\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getDispatch().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      <div className=\"thumbnail-wrapper\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n        />\n      </div>\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React, { FC } from '../../../lib/teact/teact';\n\nimport { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ button }: { button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'NOT_SUPPORTED'}\n              onClick={() => onClick({ button })}\n            >\n              {renderText(lang(button.text))}\n              {button.type === 'buy' && <i className=\"icon-card\" />}\n              {button.type === 'url' && !button.value!.match(RE_TME_LINK) && <i className=\"icon-arrow-right\" />}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, getGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../modules/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openChat } = getDispatch();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, getGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiUser,\n} from '../../../api/types';\nimport { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './Reactions.scss';\n\nconst MAX_REACTORS_AVATARS = 3;\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n}> = ({\n  reaction,\n  message,\n  activeReaction,\n  availableReactions,\n}) => {\n  const { sendReaction } = getDispatch();\n\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!recentReactions || reaction.count > MAX_REACTORS_AVATARS) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => recentReaction.reaction === reaction.reaction)\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction, recentReactions]);\n\n  const handleClick = useCallback(() => {\n    sendReaction({\n      reaction: reaction.isChosen ? undefined : reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, sendReaction]);\n\n  return (\n    <Button\n      className={buildClassName(reaction.isChosen && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReaction={activeReaction}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : formatIntegerCompact(reaction.count)}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction, ApiMessage } from '../../../api/types';\nimport { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n};\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  activeReaction,\n  availableReactions,\n  metaChildren,\n}) => {\n  return (\n    <div className={buildClassName('Reactions', isOutside && 'is-outside')}>\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={reaction.reaction}\n          reaction={reaction}\n          message={message}\n          activeReaction={activeReaction}\n          availableReactions={availableReactions}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import React, {\n  FC, memo, useEffect, useState,\n} from '../../lib/teact/teact';\n\nimport { ActiveEmojiInteraction } from '../../global/types';\n\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport getAnimationData, { ANIMATED_STICKERS_PATHS } from './helpers/animatedAssets';\nimport useAnimatedEmoji from './hooks/useAnimatedEmoji';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nconst QUALITY = 1;\n\ntype OwnProps = {\n  localSticker?: string;\n  localEffect?: string;\n  isOwn?: boolean;\n  soundId?: string;\n  observeIntersection?: ObserveFn;\n  size?: 'large' | 'medium' | 'small';\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteraction?: ActiveEmojiInteraction;\n};\n\nconst LocalAnimatedEmoji: FC<OwnProps> = ({\n  localSticker,\n  localEffect,\n  isOwn,\n  soundId,\n  size = 'medium',\n  observeIntersection,\n  messageId,\n  chatId,\n  activeEmojiInteraction,\n}) => {\n  const {\n    playKey,\n    ref,\n    style,\n    width,\n    handleClick,\n    markAnimationLoaded,\n  } = useAnimatedEmoji(size, chatId, messageId, soundId, activeEmojiInteraction, isOwn, localEffect);\n  const id = `local_emoji_${localSticker}`;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [localStickerAnimationData, setLocalStickerAnimationData] = useState<string>();\n  useEffect(() => {\n    if (localSticker) {\n      getAnimationData(localSticker as keyof typeof ANIMATED_STICKERS_PATHS).then((data) => {\n        setLocalStickerAnimationData(data);\n      });\n    }\n  }, [localSticker]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"AnimatedEmoji media-inner\"\n      // @ts-ignore teact feature\n      style={style}\n      onClick={handleClick}\n    >\n      {localStickerAnimationData && (\n        <AnimatedSticker\n          key={id}\n          id={id}\n          animationData={localStickerAnimationData}\n          size={width}\n          quality={QUALITY}\n          play={isIntersecting && playKey}\n          forceOnHeavyAnimation\n          noLoop\n          onLoad={markAnimationLoaded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(LocalAnimatedEmoji);\n","import React, {\n  FC,\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ActiveEmojiInteraction, ActiveReaction, MessageListType } from '../../../global/types';\nimport {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiSticker,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n} from '../../../api/types';\nimport {\n  AudioOrigin, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectAnimatedEmoji,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectMessageIdsByGroupId,\n  selectLocalAnimatedEmoji,\n  selectIsMessageProtected,\n  selectLocalAnimatedEmojiEffect,\n  selectDefaultReaction,\n} from '../../../modules/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n} from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from '../../common/AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport LocalAnimatedEmoji from '../../common/LocalAnimatedEmoji';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForMedia: ObserveFn;\n    observeIntersectionForAnimatedStickers: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    areReactionsInMeta?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsername?: string;\n  sender?: ApiUser | ApiChat;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  isSingleEmoji?: boolean;\n  animatedEmoji?: ApiSticker;\n  localSticker?: string;\n  localEffect?: string;\n  animatedEmojiEffect?: ApiSticker;\n  animatedEmojiSoundId?: string;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  threadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: string;\n  activeReaction?: ActiveReaction;\n  activeEmojiInteraction?: ActiveEmojiInteraction;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'in-meta'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsername,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  areReactionsInMeta,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  canReply,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  localSticker,\n  localEffect,\n  animatedEmojiEffect,\n  animatedEmojiSoundId,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReaction,\n  activeEmojiInteraction,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  threadInfo,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickInlineButton,\n    disableContextMenuHint,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const customShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = localSticker || animatedEmoji;\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !customShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1;\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const withCommentButton = threadInfo && !isInDocumentGroupNotLast && messageListType === 'thread' && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && defaultReaction && !isInDocumentGroupNotLast;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !sender) ? originSender : sender;\n  const senderPeer = forwardInfo ? originSender : sender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n  );\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    Boolean(activeReaction) && 'has-active-reaction',\n  );\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: threadInfo && threadInfo?.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const textParts = renderMessageText(message, highlight, isEmojiOnlyMessage(customShape));\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice,\n  } = getMessageContent(message);\n\n  let metaPosition!: MetaPosition;\n  if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (textParts && !hasAnimatedEmoji && !webPage) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (areReactionsInMeta) {\n    reactionsPosition = 'in-meta';\n  } else if (hasReactions) {\n    if (customShape || ((photo || video || hasAnimatedEmoji) && !textParts)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, noAvatars).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  const signature = (isChannel && message.adminTitle) || (!asForwarded && forwardInfo?.adminTitle) || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        reactionMessage={reactionMessage}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactions={reactionsPosition === 'in-meta'}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        activeReaction={activeReaction}\n        onClick={handleMetaClick}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReaction={activeReaction}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n    const textContentClass = buildClassName(\n      'text-content',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            isProtected={isProtected}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            size=\"small\"\n            isOwn={isOwn}\n            sticker={animatedEmoji}\n            effect={animatedEmojiEffect}\n            soundId={animatedEmojiSoundId}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        )}\n        {localSticker && (\n          <LocalAnimatedEmoji\n            size=\"small\"\n            isOwn={isOwn}\n            localSticker={localSticker}\n            localEffect={localEffect}\n            soundId={animatedEmojiSoundId}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {!hasAnimatedEmoji && textParts && (\n          <p className={textContentClass} dir=\"auto\">\n            {textParts}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </p>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {invoice && <Invoice message={message} />}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const shouldRender = !(customShape && !viaBotId) && (\n      (withSenderName && !photo && !video) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && customShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(customShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"auto\"\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      id={`message${messageId}`}\n      className={containerClassName}\n      // @ts-ignore teact feature\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          // @ts-ignore\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={threadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReaction && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji reaction={defaultReaction!} />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            activeReaction={activeReaction}\n            availableReactions={availableReactions}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const { focusedMessage, forwardMessages, lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, threadInfo,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const chatUsername = chat?.username;\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectSender(global, replyMessage);\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    let isSelected: boolean;\n\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualThreadInfo = threadInfo\n      ? selectThreadInfo(global, threadInfo.chatId, threadInfo.threadId) || threadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const localSticker = singleEmoji ? selectLocalAnimatedEmoji(global, singleEmoji) : undefined;\n\n    return {\n      theme: selectTheme(global),\n      chatUsername,\n      forceSenderName,\n      sender: canShowSender ? sender : undefined,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      canReply,\n      lastSyncTime,\n      highlight,\n      isSingleEmoji: Boolean(singleEmoji),\n      animatedEmoji: singleEmoji ? selectAnimatedEmoji(global, singleEmoji) : undefined,\n      animatedEmojiEffect: singleEmoji && isUserId(chatId) ? selectAnimatedEmojiEffect(global, singleEmoji) : undefined,\n      animatedEmojiSoundId: singleEmoji ? selectAnimatedEmojiSound(global, singleEmoji) : undefined,\n      localSticker,\n      localEffect: localSticker && isUserId(chatId) ? selectLocalAnimatedEmojiEffect(localSticker) : undefined,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      threadInfo: actualThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReaction: reactionMessage && global.activeReactions[reactionMessage.id],\n      activeEmojiInteraction: global.activeEmojiInteraction,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n    };\n  },\n)(Message));\n","import React, { useCallback } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { IAlbum, MediaViewerOrigin } from '../../../../types';\nimport {\n  ApiChat, ApiMessage, ApiUser, MAIN_THREAD_ID,\n} from '../../../../api/types';\nimport { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n  } = getDispatch();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId, threadId, messageId, origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId,\n        messageId: forwardInfo!.fromMessageId,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n  };\n}\n","import { RefObject } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../modules/selectors';\nimport { getChatTitle, getUserFullName } from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Button from '../../ui/Button';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getDispatch();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  const handleClick = () => {\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId,\n          param: message.startParam,\n        });\n      }\n    }\n  };\n\n  return (\n    <div className=\"SponsoredMessage Message open\" key=\"sponsored-message\">\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <p className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">{lang('SponsoredMessage')}</span>\n            </span>\n          </p>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import { RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact, flatten } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport { getMessageOriginalId, isActionMessage, isOwnMessage } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport { isAlbum, MessageDateGroup } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\nimport { getDispatch } from '../../lib/teact/teactn';\n\ninterface OwnProps {\n  chatId: string;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  threadId: number;\n  type: MessageListType;\n  isReady: boolean;\n  areReactionsInMeta: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  chatId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  areReactionsInMeta,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  threadId,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getDispatch();\n\n  const {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + flatten(messageGroup.senderGroups).length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (senderGroup.length === 1 && !isAlbum(senderGroup[0]) && isActionMessage(senderGroup[0])) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return flatten(senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === `message${message.previousLocalId}`) {\n          anchorIdRef.current = `message${message.id}`;\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Scheduled messages can have local IDs in the middle of the list,\n        // and keys should be ordered, so we prefix it with a date.\n        // However, this may lead to issues if server date is not synchronized with the local one.\n        const key = type !== 'scheduled' ? originalId : `${message.date}_${originalId}`;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            areReactionsInMeta={areReactionsInMeta}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }));\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {flatten(senderGroups)}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {flatten(dateGroups)}\n      {isViewportNewest && <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import { RefObject } from 'react';\nimport { getDispatch } from '../../../lib/teact/teactn';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getDispatch();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] >= LOCAL_MESSAGE_ID_BASE;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useOnChange(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../modules/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getDispatch();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport useLang, { LangFn } from '../../hooks/useLang';\n\nimport './NoMessages.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf, type, isGroupChatJustCreated,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiMessage, ApiRestrictionReason, MAIN_THREAD_ID,\n} from '../../api/types';\nimport { MessageListType } from '../../global/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n} from '../../modules/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n} from '../../modules/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  lastMessage?: ApiMessage;\n  botDescription?: string;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 20;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  botDescription,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useOnChange(() => {\n    if (isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [chatId, isReady, isChannelChat, lastSyncTime]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useOnChange(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((l) => messagesById[l]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] >= LOCAL_MESSAGE_ID_BASE;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]: [\n    typeof messageIds, typeof isViewportNewest, typeof containerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To workaround that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botDescription ? (\n        <div className=\"empty\"><span>{renderText(lang(botDescription), ['br', 'emoji', 'links'])}</span></div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated) ? (\n        <NoMessages\n          chatId={chatId}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          chatId={chatId}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          areReactionsInMeta={isPrivate}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let botDescription: string | undefined;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botDescription = chatBot.fullInfo.botDescription || 'NoMessages';\n      } else {\n        botDescription = 'Updating bot info...';\n      }\n    }\n\n    return {\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      botDescription,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useDebounce from '../../../hooks/useDebounce';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useDebounce(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import React, {\n  FC, useCallback, memo, useRef,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../modules/selectors';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ScrollDownButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  messageListType?: MessageListType;\n  unreadCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst ScrollDownButton: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  unreadCount,\n  withExtraShift,\n}) => {\n  const { focusNextReply } = getDispatch();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    'ScrollDownButton',\n    isShown && 'revealed',\n    !canPost && 'no-composer',\n    withExtraShift && 'with-extra-shift',\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <div className=\"ScrollDownButton-inner\">\n        <Button\n          color=\"secondary\"\n          round\n          onClick={handleClick}\n          ariaLabel={lang('AccDescrPageDown')}\n        >\n          <i className=\"icon-arrow-down\" />\n        </Button>\n        {Boolean(unreadCount) && (\n          <div className=\"unread-count\">{formatIntegerCompact(unreadCount!)}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    return {\n      messageListType,\n      unreadCount: chat && threadId === MAIN_THREAD_ID && messageListType === 'thread' ? chat.unreadCount : undefined,\n    };\n  },\n)(ScrollDownButton));\n","import { ApiAttachment } from '../../../../api/types';\nimport { SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../../config';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n  fetchBlob,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let previewBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n\n      if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE || mimeType !== 'image/jpeg') {\n        const resizedUrl = await scaleImage(blobUrl, MAX_QUICK_IMG_SIZE / Math.max(width, height), 'image/jpeg');\n        URL.revokeObjectURL(blobUrl);\n        const newBlob = await fetchBlob(resizedUrl);\n        return buildAttachment(filename, newBlob, true, options);\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    previewBlobUrl,\n    ...options,\n  };\n}\n","export default function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection?.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n    } else {\n      range.collapse(false);\n    }\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","export default __webpack_public_path__ + \"c0155344d336103c2b6a0b28cc510750.js\";","// @ts-ignore\nimport encoderPath from 'file-loader!opus-recorder/dist/encoderWorker.min';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\ninterface IOpusRecorder extends Omit<MediaRecorder, 'start' | 'ondataavailable'> {\n  new(options: AnyLiteral): IOpusRecorder;\n\n  start(stream?: MediaStreamAudioSourceNode): void;\n\n  sourceNode: MediaStreamAudioSourceNode;\n\n  ondataavailable: (typedArray: Uint8Array) => void;\n}\n\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    // @ts-ignore\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import { StateHookSetter, useEffect } from '../../../../lib/teact/teact';\nimport { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst useClipboardPaste = (\n  insertTextAndUpdateCursor: (text: string, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const { items } = e.clipboardData;\n      let files: File[] = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (files.length === 0 && !pastedText) {\n        return;\n      }\n\n      if (files.length > 0 && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file, files.length === 1 && CLIPBOARD_ACCEPTED_TYPES.includes(file.type));\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiFormattedText, ApiMessage } from '../../../../api/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_ID } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: string | undefined;\nlet currentThreadId: number | undefined;\n\nconst useDraft = (\n  draft: ApiFormattedText | undefined,\n  chatId: string,\n  threadId: number,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n) => {\n  const { saveDraft, clearDraft } = getDispatch();\n\n  const updateDraft = useCallback((draftChatId: string, draftThreadId: number) => {\n    const currentHtml = htmlRef.current;\n    if (currentHtml.length && !editedMessage) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(currentHtml!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (!draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId]);\n\n  const html = htmlRef.current;\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n\nexport default useDraft;\n","import { useState } from '../lib/teact/teact';\n\nimport useDebounce from './useDebounce';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport useFlag from './useFlag';\n\nexport default function useDebouncedMemo<R extends any, D extends any[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const runDebounced = useDebounce(ms, true);\n  const [value, setValue] = useState<R>();\n  const [isFrozen, freeze, unfreeze] = useFlag();\n\n  useHeavyAnimationCheck(freeze, unfreeze);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    runDebounced(() => {\n      setValue(resolverFn());\n    });\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\nimport { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport useDebouncedMemo from '../../../../hooks/useDebouncedMemo';\n\nconst DEBOUNCE_MS = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: string,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot } = getDispatch();\n\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDebouncedMemo(() => parseBotQuery(html), DEBOUNCE_MS, [html]) || {};\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = usernameLowered ? inlineBots?.[usernameLowered] : undefined;\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [offset, chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results?.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: unmarkIsOpen,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nfunction parseBotQuery(html: string) {\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n    usernameLowered: result[1].toLowerCase(),\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  return tempEl.innerText;\n}\n","import {\n  useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotCommand } from '../../../../api/types';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport { throttle } from '../../../../util/schedulers';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\nconst RE_COMMAND = /^[\\w@]{1,32}\\s?/i;\n\nexport default function useBotCommandTooltip(\n  isAllowed: boolean,\n  html: string,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n\n  const getFilteredCommands = useCallback((filter) => {\n    if (!botCommands && !chatBotCommands) {\n      setFilteredBotCommands(undefined);\n\n      return;\n    }\n\n    runThrottled(() => {\n      const nextFilteredBotCommands = (botCommands || chatBotCommands || [])\n        .filter(({ command }) => !filter || command.includes(filter));\n      setFilteredBotCommands(\n        nextFilteredBotCommands && nextFilteredBotCommands.length ? nextFilteredBotCommands : undefined,\n      );\n    });\n  }, [botCommands, chatBotCommands]);\n\n  useEffect(() => {\n    if (!isAllowed || !html.length) {\n      unmarkIsOpen();\n      return;\n    }\n\n    const shouldShowCommands = html.startsWith('/');\n\n    if (shouldShowCommands) {\n      const filter = prepareForRegExp(html.substr(1)).match(RE_COMMAND);\n      getFilteredCommands(filter ? filter[0] : '');\n    } else {\n      unmarkIsOpen();\n    }\n  }, [getFilteredCommands, html, isAllowed, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (filteredBotCommands && filteredBotCommands.length) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [filteredBotCommands, markIsOpen, unmarkIsOpen]);\n\n  return {\n    isOpen,\n    close: unmarkIsOpen,\n    filteredBotCommands,\n  };\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import React, {\n  FC, useRef, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Button, { OwnProps as ButtonProps } from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={IS_TOUCH_ENV ? onActivate : undefined}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './CalendarModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CalendarModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CalendarModal = useModuleLoader(Bundles.Extra, 'CalendarModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CalendarModal ? <CalendarModal {...props} /> : undefined;\n};\n\nexport default memo(CalendarModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AttachMenu = useModuleLoader(Bundles.Extra, 'AttachMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachMenu ? <AttachMenu {...props} /> : undefined;\n};\n\nexport default memo(AttachMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './CustomSendMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomSendMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomSend = useModuleLoader(Bundles.Extra, 'CustomSendMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomSend ? <CustomSend {...props} /> : undefined;\n};\n\nexport default memo(CustomSendMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../modules/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickInlineButton } = getDispatch();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n  const [forceOpen, markForceOpen, unmarkForceOpen] = useFlag(true);\n\n  const handleClose = () => {\n    unmarkForceOpen();\n    onClose();\n  };\n\n  useEffect(() => {\n    markForceOpen();\n  }, [markForceOpen, message?.keyboardButtons]);\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen || forceOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={handleClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={handleClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'NOT_SUPPORTED'}\n                onClick={() => clickInlineButton({ button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n} from '../../../modules/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../modules/helpers';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    exitForwardMode,\n  } = getDispatch();\n\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n  }, [replyingToId, editingId, forwardedMessagesCount, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, message]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? `${forwardedMessagesCount} forwarded messages`\n    : undefined;\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Cancel replying\" onClick={clearEmbedded}>\n          <i className=\"icon-close\" />\n        </Button>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={message}\n          sender={sender}\n          customText={customText}\n          title={editingId ? 'Edit Message' : undefined}\n          onClick={handleMessageClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      currentUserId,\n      forwardMessages: { fromChatId, toChatId, messageIds: forwardMessageIds },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n\n    let message;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = selectChatMessage(global, fromChatId!, forwardMessageIds![0]);\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = chatId === currentUserId;\n\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n    }\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage, ApiMessageEntityTypes, ApiWebPage } from '../../../api/types';\nimport { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage, selectTheme } from '../../../modules/selectors';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDebouncedMemo from '../../../hooks/useDebouncedMemo';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getDispatch();\n\n  const link = useDebouncedMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities && entities.find(({ type }) => type === ApiMessageEntityTypes.TextUrl);\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, DEBOUNCE_MS, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  const handleClearWebpagePreview = () => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  };\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Clear Webpage Preview\" onClick={handleClearWebpagePreview}>\n          <i className=\"icon-close\" />\n        </Button>\n        <WebPage message={messageStub} inPreview theme={theme} />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState, MessageListType } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n  ApiBotCommand,\n} from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, EDITABLE_INPUT_ID, REPLIES_USER_ID, SCHEDULED_WHEN_ONLINE, SEND_MESSAGE_ACTION_INTERVAL,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatUser,\n  selectChatMessage,\n  selectUser,\n  selectUserStatus,\n} from '../../../modules/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isUserId,\n  isChatAdmin,\n  isChatSuperGroup,\n} from '../../../modules/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration, getDayStartAt } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport insertHtmlInSelection from '../../../util/insertHtmlInSelection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useOnChange from '../../../hooks/useOnChange';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport CalendarModal from '../../common/CalendarModal.async';\nimport Avatar from '../../common/Avatar';\nimport AttachMenu from './AttachMenu.async';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiFormattedText;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    isPollModalOpen?: boolean;\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    serverTimeOffset: number;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst CAPTION_MAX_LENGTH = 1024;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  isPollModalOpen,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  baseEmojiKeywords,\n  emojiKeywords,\n  serverTimeOffset,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    loadFullChat,\n  } = getDispatch();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const htmlRef = useStateRef(html);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n  const [\n    scheduledMessageArgs, setScheduledMessageArgs,\n  ] = useState<GlobalState['messages']['contentToBeScheduled'] | undefined>();\n  const { width: windowWidth } = windowSize.get();\n  const sendAsIds = chat?.sendAsIds;\n  const canShowSendAs = sendAsIds && (sendAsIds.length > 1 || !sendAsIds.includes(currentUserId!));\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsIds]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !chat.fullInfo && isReady && isChatSuperGroup(chat)) {\n      loadFullChat({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadFullChat]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useOnChange(([prevChatId, prevSendAsIds]) => {\n    // We only animate send-as button if `sendAsIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsIds && !prevSendAsIds);\n  }, [chatId, sendAsIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      setScheduledMessageArgs(contentToBeScheduled);\n      openCalendar();\n    }\n  }, [contentToBeScheduled, openCalendar]);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const mainButtonState = editingMessage ? MainButtonState.Edit\n    : (!IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding)\n      ? (shouldSchedule ? MainButtonState.Schedule : MainButtonState.Send)\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    htmlRef,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean((botCommands && botCommands.length) || (chatBotCommands && chatBotCommands.length)),\n    html,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    htmlRef,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    const messageInput = document.getElementById(inputId)!;\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [htmlRef]);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, [htmlRef]);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments(MEMO_EMPTY_ARRAY);\n    closeStickerTooltip();\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeCalendar, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu]);\n\n  // Handle chat change (ref is used to avoid redundant effect calls)\n  const stopRecordingVoiceRef = useRef<typeof stopRecordingVoice>();\n  stopRecordingVoiceRef.current = stopRecordingVoice;\n  useEffect(() => {\n    return () => {\n      stopRecordingVoiceRef.current!();\n      resetComposer();\n    };\n  }, [chatId, resetComposer, stopRecordingVoiceRef]);\n\n  const handleEditComplete = useEditing(htmlRef, setHtml, editingMessage, resetComposer, openDeleteModal);\n  useDraft(draft, chatId, threadId, htmlRef, setHtml, editingMessage);\n  useClipboardPaste(insertTextAndUpdateCursor, setAttachments, editingMessage);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, []);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    const maxLength = currentAttachments.length ? CAPTION_MAX_LENGTH : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = getServerTime(serverTimeOffset);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime(serverTimeOffset);\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, clearDraft, chatId, serverTimeOffset,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang, htmlRef,\n  ]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleActivateSymbolMenu = useCallback(() => {\n    closeBotCommandMenu();\n    closeSendAsMenu();\n    openSymbolMenu();\n  }, [closeBotCommandMenu, closeSendAsMenu, openSymbolMenu]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, shouldPreserveInput = false) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ sticker });\n      openCalendar();\n    } else {\n      sendMessage({ sticker });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ gif });\n      openCalendar();\n    } else {\n      sendMessage({ gif });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleInlineBotSelect = useCallback((inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    sendInlineBotResult({\n      id: inlineResult.id,\n      queryId: inlineResult.queryId,\n    });\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, connectionState, resetComposer, sendInlineBotResult]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ poll });\n      closePollModal();\n      openCalendar();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, openCalendar, sendMessage, shouldSchedule]);\n\n  const handleSilentSend = useCallback(() => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ isSilent: true });\n      openCalendar();\n    } else {\n      void handleSend(true);\n    }\n  }, [handleSend, openCalendar, shouldSchedule]);\n\n  const handleMessageSchedule = useCallback((date: Date, isWhenOnline = false) => {\n    const { isSilent, ...restArgs } = scheduledMessageArgs || {};\n\n    // Scheduled time can not be less than 10 seconds in future\n    const scheduledAt = Math.round(Math.max(date.getTime(), Date.now() + 60 * 1000) / 1000)\n      + (isWhenOnline ? 0 : serverTimeOffset);\n\n    if (!scheduledMessageArgs || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else {\n      sendMessage({\n        ...scheduledMessageArgs,\n        scheduledAt,\n      });\n      requestAnimationFrame(() => {\n        resetComposer();\n      });\n    }\n    closeCalendar();\n  }, [closeCalendar, handleSend, resetComposer, scheduledMessageArgs, sendMessage, serverTimeOffset]);\n\n  const handleMessageScheduleUntilOnline = useCallback(() => {\n    handleMessageSchedule(new Date(SCHEDULED_WHEN_ONLINE * 1000), true);\n  }, [handleMessageSchedule]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n  }, [closeCalendar]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu, closeBotCommandMenu]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record:\n        void startRecordingVoice();\n        break;\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        openCalendar();\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, startRecordingVoice, handleEditComplete,\n    activeVoiceRecording, openCalendar, pauseRecordingVoice,\n  ]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record && !canAttachMedia;\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = areVoiceMessagesNotAllowed\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? openCalendar\n      : handleSend;\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        attachments={attachments}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        recentEmojis={recentEmojis}\n        isReady={isReady}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        addRecentEmoji={addRecentEmoji}\n        onSend={shouldSchedule ? openCalendar : handleSend}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={Boolean(isPollModalOpen)}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsIds={sendAsIds}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {isChatWithBot && botCommands !== false && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={isSymbolMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={handleActivateSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            chatId={chatId}\n            threadId={threadId}\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && !attachments.length}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {!activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isAttachMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openAttachMenu}\n              ariaLabel=\"Add an attachment\"\n            >\n              <i className=\"icon-attach\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <AttachMenu\n            isOpen={isAttachMenuOpen}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            onClose={closeAttachMenu}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <SymbolMenu\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isSymbolMenuOpen}\n            canSendGifs={canSendGifs}\n            canSendStickers={canSendStickers}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSilentSend={!isChatWithSelf ? handleSilentSend : undefined}\n          onScheduleSend={!shouldSchedule ? openCalendar : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={scheduledDefaultDate.getTime()}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        secondButtonLabel={canScheduleUntilOnline ? lang('Schedule.SendWhenOnline') : undefined}\n        onClose={handleCloseCalendar}\n        onSubmit={handleMessageSchedule}\n        onSecondButtonClick={canScheduleUntilOnline ? handleMessageScheduleUntilOnline : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatUser = chat && selectChatUser(global, chat);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language, shouldSuggestStickers } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsIds && defaultSendAsId && chat.sendAsIds.includes(defaultSendAsId)\n      ? defaultSendAsId\n      : (chat?.adminRights?.anonymous ? chat?.id : undefined);\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      canScheduleUntilOnline: Boolean(\n        !isChatWithSelf && !isChatWithBot && chat && chatUser\n        && isUserId(chatId) && selectUserStatus(global, chatId)?.wasOnline,\n      ),\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      isPollModalOpen: global.isPollModalOpen,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      shouldSuggestStickers,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      serverTimeOffset: global.serverTimeOffset,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n      chatBotCommands: chat && chat.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot && chatBot.fullInfo ? (chatBot.fullInfo.botCommands || false) : undefined,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n    };\n  },\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","import { useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const cleanHtml = useMemo(() => prepareForRegExp(html).trim(), [html]);\n  const { loadStickersForEmoji, clearStickersForEmoji } = getDispatch();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({\n        emoji: IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1],\n      });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../../../api/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../modules/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\nconst useEditing = (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: () => void,\n  openDeleteModal: () => void,\n) => {\n  const { editMessage } = getDispatch();\n\n  // TODO useOnChange\n  // Handle editing message\n  useEffect(() => {\n    if (!editedMessage) {\n      setHtml('');\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(editedMessage.content.text));\n\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [editedMessage, setHtml]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer]);\n\n  return handleEditComplete;\n};\n\nexport default useEditing;\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { emojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(Bundles.Extra, 'EmojiInteractionAnimation', !emojiInteraction);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import React, {\n  FC, useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChatBannedRights, MAIN_THREAD_ID } from '../../api/types';\nimport {\n  MessageListType,\n  MessageList as GlobalMessageList,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport { ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTheme,\n} from '../../modules/selectors';\nimport {\n  getCanPostInChat, getMessageSendingRestrictionReason, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../modules/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport { createMessageHash } from '../../util/routing';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useOnChange from '../../hooks/useOnChange';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport ScrollDownButton from './ScrollDownButton';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\n\nimport './MiddleColumn.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  animationLevel?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  messageLists?: GlobalMessageList[];\n  isChannel?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  activeEmojiInteraction?: ActiveEmojiInteraction;\n};\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  messageLists,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteraction,\n}) => {\n  const {\n    openChat,\n    unpinAllMessages,\n    loadUser,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    closePaymentModal,\n    clearReceipt,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n  } = getDispatch();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const hasTools = hasPinnedOrAudioPlayer && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, CLOSE_ANIMATION_DURATION);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, CLOSE_ANIMATION_DURATION);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useOnChange(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (window.visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openChat({ id: chatId });\n  }, [unpinAllMessages, openChat, closeUnpinModal, chatId]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    customBackground && 'custom-bg-image',\n    backgroundColor && 'custom-bg-color',\n    customBackground && isBackgroundBlurred && 'blurred',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  useHistoryBack(\n    renderingChatId && renderingThreadId,\n    closeChat, undefined, undefined, undefined,\n    messageLists?.map(createMessageHash) || [],\n  );\n\n  useHistoryBack(isMobileSearchActive, closeLocalTextSearch);\n  useHistoryBack(isSelectModeActive, exitMessageSelectMode);\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && messageSendingRestrictionReason,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingCanStartBot || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      // @ts-ignore teact-feature\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        id=\"middle-column-bg\"\n        // @ts-ignore\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              {() => (\n                <>\n                  <MessageList\n                    key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    type={renderingMessageListType}\n                    canPost={renderingCanPost}\n                    hasTools={renderingHasTools}\n                    onFabToggle={setIsFabShown}\n                    onNotchToggle={setIsNotchShown}\n                    isReady={isReady}\n                    withBottomShift={withMessageListBottomShift}\n                  />\n                  <div className={footerClassName}>\n                    {renderingCanPost && (\n                      <Composer\n                        chatId={renderingChatId}\n                        threadId={renderingThreadId}\n                        messageListType={renderingMessageListType}\n                        dropAreaState={dropAreaState}\n                        onDropHide={handleHideDropArea}\n                        isReady={isReady}\n                      />\n                    )}\n                    {isPinnedMessageList && (\n                      <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          color=\"secondary\"\n                          className=\"unpin-all-button\"\n                          onClick={handleOpenUnpinModal}\n                        >\n                          <i className=\"icon-unpin\" />\n                          <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                        </Button>\n                      </div>\n                    )}\n                    {isMessagingDisabled && (\n                      <div className={messagingDisabledClassName}>\n                        <div className=\"messaging-disabled-inner\">\n                          <span>\n                            {messageSendingRestrictionReason}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n                    {IS_SINGLE_COLUMN_LAYOUT && renderingCanSubscribe && (\n                      <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"join-subscribe-button\"\n                          onClick={handleSubscribeClick}\n                        >\n                          {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                        </Button>\n                      </div>\n                    )}\n                    {IS_SINGLE_COLUMN_LAYOUT && renderingCanStartBot && (\n                      <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"join-subscribe-button\"\n                          onClick={handleStartBot}\n                        >\n                          {lang('BotStart')}\n                        </Button>\n                      </div>\n                    )}\n                    {IS_SINGLE_COLUMN_LAYOUT && renderingCanRestartBot && (\n                      <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"join-subscribe-button\"\n                          onClick={handleRestartBot}\n                        >\n                          {lang('BotRestart')}\n                        </Button>\n                      </div>\n                    )}\n                    <MessageSelectToolbar\n                      messageListType={renderingMessageListType}\n                      isActive={isSelectModeActive}\n                      canPost={renderingCanPost}\n                    />\n                    <PaymentModal\n                      isOpen={Boolean(isPaymentModalOpen)}\n                      onClose={closePaymentModal}\n                    />\n                    <ReceiptModal\n                      isOpen={Boolean(isReceiptModalOpen)}\n                      onClose={clearReceipt}\n                    />\n                    <SeenByModal isOpen={isSeenByModalOpen} />\n                    <ReactorListModal isOpen={isReactorListModalOpen} />\n                  </div>\n                </>\n              )}\n            </Transition>\n\n            <ScrollDownButton\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      {activeEmojiInteraction && (\n        <EmojiInteractionAnimation emojiInteraction={activeEmojiInteraction} />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const { messageLists } = global.messages;\n    const currentMessageList = selectCurrentMessageList(global);\n    const { isLeftColumnShown, chats: { listIds }, activeEmojiInteraction } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      isSeenByModalOpen: Boolean(global.seenByModal),\n      isReactorListModalOpen: Boolean(global.reactorModal),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      activeEmojiInteraction,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate: isUserId(chatId),\n      canPost: !isPinnedMessageList && (!chat || canPost) && !isBotNotStarted,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioPlayer: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      messageLists,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n) {\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useOnChange(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ManagementScreens, ProfileState } from '../../types';\nimport { ApiExportedInvite } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  getCanAddContact, isChatAdmin, isChatChannel, isUserId,\n} from '../../modules/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isAddingChatMembers?: boolean;\n  shouldSkipAnimation?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n};\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  shouldSkipAnimation,\n  isEditingInvite,\n  currentInviteInfo,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    addContact,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const backButtonRef = useRef<HTMLDivElement>(null);\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    addContact({ userId });\n  }, [addContact, userId]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon-add-user\" />\n                </Button>\n              )}\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipAnimation) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div ref={backButtonRef} className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipAnimation) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && global.management.byChatId[chatId]?.editingInvite);\n    const currentInviteInfo = chatId ? global.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      isChannel,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../modules/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: string,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [groupChatMembers, serverTimeOffset, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import React, {\n  FC, useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  MAIN_THREAD_ID,\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport {\n  NewChatMembersProgress, ISettings, MediaViewerOrigin, ProfileState, ProfileTabType, SharedMediaType, AudioOrigin,\n} from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId,\n} from '../../modules/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../modules/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\n\ntype OwnProps = {\n  chatId: string;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n  { type: 'voice', title: 'SharedVoiceTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  serverTimeOffset,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    ...(hasCommonChatsTab ? [{\n      type: 'commonChats', title: 'SharedGroupsTab2',\n    }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown, loadMoreMembers, loadCommonChats, searchMediaMessagesLocal, tabType, mediaSearchType, members,\n    commonChatIds, usersById, userStatusesById, chatsById, chatMessages, foundIds, chatId, lastSyncTime,\n    serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !chatMessages) {\n      const noSpinner = isFirstTab && !canRenderContent;\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && <Spinner />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              senderTitle={getSenderName(lang, chatMessages[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId?: string) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatMessages = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat?.fullInfo?.members;\n    const areMembersHidden = hasMembersTab && chat && chat.fullInfo && !chat.fullInfo.canViewMembers;\n    const canAddMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import React, {\n  FC, useCallback, useMemo, memo, useState, useEffect,\n} from '../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiChatMember, ApiUpdateConnectionStateType,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat } from '../../modules/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  connectionState?: ApiUpdateConnectionStateType;\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  connectionState,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery, loadContactList } = getDispatch();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useEffect(() => {\n    if (isActive && connectionState === 'connectionStateReady') {\n      loadContactList();\n    }\n  }, [connectionState, isActive, loadContactList]);\n\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress, connectionState } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n      connectionState,\n    };\n  },\n)(AddChatMembers));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../modules/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst CLOSE_ANIMATION_DURATION = 300;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n  } = getDispatch();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ invite: undefined });\n            setEditingExportedInvite({ chatId, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, CLOSE_ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId ) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack(isChatSelected && (\n    contentKey === RightColumnContent.ChatInfo\n    || contentKey === RightColumnContent.Management\n    || contentKey === RightColumnContent.AddingMembers\n  ), () => close(false), toggleChatInfo);\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={chatId!}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={chatId!}\n            chatId={chatId!}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={chatId!}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          shouldSkipAnimation={shouldSkipTransition || shouldSkipHistoryAnimations}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const nextManagementScreen = chatId ? global.management.byChatId[chatId]?.nextScreen : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","export default function download(url: string, filename: string) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import { FC, memo, useEffect } from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { Thread } from '../../global/types';\nimport { ApiMediaFormat, ApiMessage } from '../../api/types';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaHash,\n} from '../../modules/helpers';\n\ntype StateProps = {\n  activeDownloads: Record<number, number[]>;\n  messages: Record<number, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst startedDownloads = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessageMediaDownload } = getDispatch();\n\n  useEffect(() => {\n    Object.entries(activeDownloads).forEach(([chatId, messageIds]) => {\n      const activeMessages = messageIds.map((id) => messages[Number(chatId)].byId[id]);\n      activeMessages.forEach((message) => {\n        const downloadHash = getMessageMediaHash(message, 'download');\n        if (!downloadHash) {\n          cancelMessageMediaDownload({ message });\n          return;\n        }\n\n        if (!startedDownloads.has(downloadHash)) {\n          const mediaData = mediaLoader.getFromMemory(downloadHash);\n          if (mediaData) {\n            startedDownloads.delete(downloadHash);\n            download(mediaData, getMessageContentFilename(message));\n            cancelMessageMediaDownload({ message });\n            return;\n          }\n\n          mediaLoader.fetch(downloadHash, ApiMediaFormat.BlobUrl, true).then((result) => {\n            startedDownloads.delete(downloadHash);\n            if (result) {\n              download(result, getMessageContentFilename(message));\n            }\n            cancelMessageMediaDownload({ message });\n          });\n\n          startedDownloads.add(downloadHash);\n        }\n      });\n    });\n  }, [\n    cancelMessageMediaDownload,\n    messages,\n    activeDownloads,\n  ]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = global.activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './ForwardPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardPicker = useModuleLoader(Bundles.Extra, 'ForwardPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardPicker ? <ForwardPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardPickerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  groupCallId?: string;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !groupCallId);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isOpen: boolean;\n};\n\nconst CallFallbackConfirmAsync: FC<OwnProps> = ({ isOpen }) => {\n  const CallFallbackConfirm = useModuleLoader(Bundles.Calls, 'CallFallbackConfirm', !isOpen);\n\n  return CallFallbackConfirm ? <CallFallbackConfirm isOpen={isOpen} /> : undefined;\n};\n\nexport default memo(CallFallbackConfirmAsync);\n","import React, {\n  FC, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { LangCode } from '../../types';\nimport { ApiMessage } from '../../api/types';\n\nimport '../../modules/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport {\n  selectChatMessage,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n} from '../../modules/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport buildClassName from '../../util/buildClassName';\nimport { fastRaf } from '../../util/schedulers';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport stopEvent from '../../util/stopEvent';\nimport windowSize from '../../util/windowSize';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport { LOCATION_HASH } from '../../hooks/useHistoryBack';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardPicker from './ForwardPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport CallFallbackConfirm from '../calls/CallFallbackConfirm.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  lastSyncTime?: number;\n  isLeftColumnShown: boolean;\n  isRightColumnShown: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: number;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isCallFallbackConfirmOpen: boolean;\n  addedSetIds?: string[];\n};\n\nconst NOTIFICATION_INTERVAL = 1000;\n\nlet notificationInterval: number | undefined;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps> = ({\n  lastSyncTime,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  openedStickerSetShortName,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  isCallFallbackConfirmOpen,\n  addedSetIds,\n}) => {\n  const {\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    ensureTimeFormat,\n    openStickerSetShortName,\n    checkVersionNotification,\n    loadAppConfig,\n  } = getDispatch();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (!addedSetIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      } else {\n        loadAddedStickers();\n      }\n    }\n  }, [lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (lastSyncTime && LOCATION_HASH.startsWith('#?tgaddr=')) {\n      processDeepLink(decodeURIComponent(LOCATION_HASH.substr('#?tgaddr='.length)));\n    }\n  }, [lastSyncTime]);\n\n  // Prevent refresh by accidentally rotating device when listening to a voice chat\n  useEffect(() => {\n    if (!activeGroupCallId) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [activeGroupCallId]);\n\n  const {\n    transitionClassNames: middleColumnTransitionClassNames,\n  } = useShowTransition(!isLeftColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const {\n    transitionClassNames: rightColumnTransitionClassNames,\n  } = useShowTransition(isRightColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const className = buildClassName(\n    middleColumnTransitionClassNames.replace(/([\\w-]+)/g, 'middle-column-$1'),\n    rightColumnTransitionClassNames.replace(/([\\w-]+)/g, 'right-column-$1'),\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  // Dispatch heavy transition event when opening middle column\n  useOnChange(([prevIsLeftColumnShown]) => {\n    if (prevIsLeftColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, dispatchHeavyAnimationEnd);\n  }, [isLeftColumnShown]);\n\n  // Dispatch heavy transition event and add body class when opening right column\n  useOnChange(([prevIsRightColumnShown]) => {\n    if (prevIsRightColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    fastRaf(() => {\n      document.body.classList.add('animating-right-column');\n    });\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n\n      fastRaf(() => {\n        document.body.classList.remove('animating-right-column');\n      });\n    });\n  }, [isRightColumnShown]);\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = getAllNotificationsCount();\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = getAllNotificationsCount() - initialUnread;\n        if (newUnread > 0) {\n          updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n          updateIcon(true);\n        }\n      } else {\n        updatePageTitle(PAGE_TITLE);\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    openStickerSetShortName({ stickerSetShortName: undefined });\n  }, [openStickerSetShortName]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className} onDrop={stopEvent} onDragOver={stopEvent}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardPicker isOpen={isForwardModalOpen} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      {activeGroupCallId && (\n        <>\n          <GroupCall groupCallId={activeGroupCallId} />\n          <ActiveCallHeader groupCallId={activeGroupCallId} />\n        </>\n      )}\n      <DownloadManager />\n      <CallFallbackConfirm isOpen={isCallFallbackConfirmOpen} />\n      <UnreadCount isForAppBadge />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { settings: { byKey: { animationLevel, language, wasTimeFormatSetManually } } } = global;\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      lastSyncTime: global.lastSyncTime,\n      isLeftColumnShown: global.isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      safeLinkModalUrl: global.safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      openedStickerSetShortName: global.openedStickerSetShortName,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isCallFallbackConfirmOpen: Boolean(global.groupCalls.isFallbackConfirmOpen),\n      addedSetIds: global.stickers.added.setIds,\n    };\n  },\n)(Main));\n","import { getDispatch, getGlobal } from '../lib/teact/teactn';\n\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nif (!getGlobal().connectionState) {\n  getDispatch().initApi();\n}\n"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addReducer","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","type","shouldReplaceHistory","currentMessageList","replaceThreadParam","exitMessageSelectMode","messages","contentToBeScheduled","forwardMessages","toChatId","setGlobal","updateCurrentMessageList","isChatInfoShown","openChat","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","scrollOffset","messageId","paramName","chatMessages","selectChatMessages","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","selectAllowedMessageActions","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","MAIN_THREAD_ID","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","avatarOwnerId","profilePhotoIndex","origin","mediaViewer","volume","playbackRate","isMuted","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","newGlobal","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","messageListType","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","messageIds","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","closeMediaViewer","selectedMessages","openForwardMenu","message","byChatId","activeDownloads","filter","map","canDownload","forEach","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isPollModalOpen","currentVersion","APP_VERSION","slice","join","serviceNotifications","find","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","serverTimeOffset","content","text","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateUserSearch","globalUserIds","localUserIds","action","leftColumnWidth","management","isActive","screen","nextScreen","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","messageLists","emoji","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","push","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","payment","isPaymentModalOpen","clearPayment","closeInvoice","error","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","result","callApi","selectThreadOriginChat","limit","users","threadInfos","localMessages","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingIds","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","i","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","delete","isRestricted","Promise","resolve","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","replyMessage","selectChatMessage","updateChatMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","scheduledAt","noWebPage","selectNoWebPage","sendAs","selectSendAs","clearWebPagePreview","value","isSingle","attachments","isGrouped","restParams","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","Date","now","selectEditingMessage","setEditingId","get","previousLocalId","cancelApiProgress","draft","replyToMsgId","updateChat","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","currentUserId","minId","selectFirstUnreadId","unreadCount","readCount","count","l","countSortedIds","lastReadInboxMessageId","webPagePreview","loadWebPagePreview","options","option","offset","shouldResetVoters","unique","user","offsets","nextOffset","loadPollOptionResults","fromChat","toChat","sort","a","b","realMessages","m","isServiceNotificationMessage","poll","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","loadPinnedMessages","seenByUserIds","sendAsId","sendAsChat","selectUser","fullInfo","sendAsIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","searchThrottled","throttle","searchGifs","updateGifSearch","added","addedStickers","updateStickerSets","sets","loadStickerSets","setIds","addedSetIds","cached","setsById","loadStickers","stickerSetId","pause","recentStickers","loadRecentStickers","favorite","favoriteStickers","loadFavoriteStickers","greeting","featured","featuredStickers","loadFeaturedStickers","stickerSetShortName","stickerSetAccessHash","stickerSet","selectStickerSet","accessHash","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","replaceAnimatedEmojis","loadAnimatedEmojis","animatedEmojiEffects","loadAnimatedEmojiEffects","saved","savedGifs","loadSavedGifs","unfave","unfaveSticker","installedDate","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","keywords","searchStickers","title","searchWords","updateStickersForEmoji","loadStickersForEmoji","openedStickerSetShortName","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","searchSharedMedia","SHARED_MEDIA_SLICE","newFoundIds","currentSearch","selectCurrentMediaSearch","updateLocalMediaSearchResults","releaseStatusTimeout","loadAndReplaceArchivedChats","CHAT_LIST_LOAD_SLICE","archived","withPinned","updateUsers","addUserStatuses","userStatusesById","updateChats","replaceChatListIds","chatIds","updateChatListSecondaryInfo","loadAndUpdateUsers","userIds","contactIds","contactList","updatedUsers","loadTopMessages","localChats","localUsers","globalChats","globalUsers","searchChats","timestampPlusDay","foundIds","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","searchTextMessages","currentType","currentResults","timestamp","getDispatch","searchMessagesByDate","ManagementProgress","username","updateManagementProgress","updateManagement","isUsernameAvailable","isChatBasicGroup","invite","editingInvite","update","inviteInfo","adminId","isRevoked","admin","revokedInvites","invites","link","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","current","managementState","offsetDate","offsetUserId","offsetUser","currentInviteInfo","importers","isRequested","requesters","joinRequests","userId","isApproved","targetChat","importer","recentRequesterIds","requestsPending","afterSyncCallback","DEBUG","console","log","isSyncing","savedUsers","lastLocalServiceMessage","selectLastServiceNotification","savedPrivateChatIds","savedChats","currentChatId","selectedChat","isUserId","selectedChatUser","replaceUserStatuses","replaceChats","draftsById","replyingToById","loadAndReplaceChats","areMessagesLoaded","currentThreadId","draftsByChatId","reduce","acc","newCurrentChatId","currentMessageListInfo","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","threadsById","Array","prototype","replaceUsers","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","sync","afterSync","all","runDebouncedForFetchFullUser","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","statusesById","topPeers","lastRequestedAt","loadTopUsers","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","isUserBot","commonChats","isFullyLoaded","updateUser","updateChatMutedState","phoneNumber","phone","updateContact","deleteContact","profileId","isPrivate","photos","userSearch","updateUserSearchFetchingStatus","searchUsers","pick","runDebouncedForSearch","sendBotCommand","command","button","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","toggleSafeLinkModal","showDialog","alert","isError","answerCallbackButton","openPollModal","getReceipt","receiptMessageId","getPaymentForm","setInvoiceMessageInfo","openPaymentModal","bot","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","queryId","resultId","botId","param","startParam","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","requestInfo","saveInfo","selectPaymentChatId","selectPaymentMessageId","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","validateRequestedInfo","setPaymentForm","step","invoice","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","setReceipt","receipt","publishableKey","selectProviderPublishableKey","credentials","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","shippingOptionId","saveCredentials","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","stripeCredentials","selectStripeCredentials","requestedInfoId","sendPaymentForm","save","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","localEffect","startSize","isReversed","activeEmojiInteraction","animatedEffect","interactions","startX","startY","emoticon","selectLocalAnimatedEmojiEffectByName","timestamps","endX","endY","reaction","selectDefaultReaction","isMessageLocal","sendReaction","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","reactions","some","isChosen","animationLevel","settings","byKey","ANIMATION_LEVEL_MAX","activeReactions","omit","recentReactions","canSeeList","addMessageReaction","appConfig","defaultReaction","reactors","areDeepEqual","value1","value2","type1","isArray1","isArray","array1","array2","every","member1","object1","object2","key1","noTopChatsRequest","selectIsChatListed","loadTopChats","newProfilePhoto","closeMessageNotifications","listType","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","senderId","isFromScheduled","hasUnreadMention","unreadMentionsCount","notifyAboutNewMessage","messageUpdate","channelId","selectCommonBoxChatId","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","active","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","photo","formattedText","loadChatJoinRequests","ANIMATION_DELAY","updateWithLocalMedia","isScheduled","currentMessage","video","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","messagesCount","firstUnreadId","updateChatLastMessage","force","currentLastMessage","findLastMessage","deleteMessages","newLastMessage","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","updateThreadInfo","newMessage","isMessageInCurrentMessageList","delayedGlobal","getMessageText","localEmoji","selectLocalAnimatedEmoji","selectLocalAnimatedEmojiEffect","scheduledIds","selectScheduledIds","selectIsChatWithBot","selectScheduledMessages","deleteChatScheduledMessages","thread","markMessageListRead","currentPinnedIds","selectPinnedIds","newPinnedIds","newTheadInfo","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","updatedPoll","updatedResults","chosenAnswers","chosenAnswer","chosenAnswerIndex","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOption","targetOptionIndex","updatedOption","votersCount","selectIsServiceChatReady","currentReactions","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","status","targetUser","isBlocked","addBlockedContact","privacy","key","rules","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","connectionState","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","updateGroupCall","participantsCount","groupCallId","participants","participant","updateGroupCallParticipant","useBeforeUnload","callback","useEffect","onBeforeUnload","metaViewport","querySelector","defaultViewportContent","getAttribute","allowedZoomViewportContent","preventEvent","preventDefault","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","getAllNotificationsCount","updateAppBadge","className","formatIntegerCompact","ConnectionStatus","useConnectionStatus","lang","hasMiddleHeader","isMinimized","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","replace","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","name","Button","size","ANIMATION_LEVEL_OPTIONS","withGlobal","searchQuery","chatsById","isConnectionStatusMinimized","globalSearchChatId","searchDate","theme","selectTheme","isMessageListOpen","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","openTipsChat","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","isChatArchived","withOtherVersions","location","hostname","MainButton","onTrigger","isOpen","ripple","ariaLabel","buildClassName","handleSearchFocus","useCallback","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","stopPropagation","newTheme","shouldUseSystemTheme","switchTheme","handleAnimationLevelChange","newLevel","_","body","classList","toggle","isSearchFocused","searchInputPlaceholder","DropdownMenu","trigger","footer","APP_NAME","MenuItem","icon","Switcher","label","checked","noAnimation","langCode","href","FEEDBACK_URL","setPermanentWebVersion","clearWebsync","disableHistoryBack","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","orderedFolderIds","activeChatFolder","shouldSkipHistoryAnimations","foldersDispatch","onScreenSelect","loadChatFolders","setActiveChatFolder","transitionRef","useRef","displayedFolders","folderCountersById","folderTabs","ALL_FOLDER_ID","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","forceOnHeavyAnimation","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInAllTabRef","captureEscKeyListener","useHistoryBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","ChatList","folderType","TabList","tabs","activeTab","onSwitchTab","ref","renderCount","props","LeftSearch","useModuleLoader","Bundles","Loading","ContactList","closeTimeout","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","handleMouseEnter","handleMouseLeave","onMouseEnter","onMouseLeave","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","onContentChange","isNewChatButtonShown","setIsNewChatButtonShown","isMouseInside","handleSelectSettings","handleSelectContacts","handleSelectNewChannel","handleSelectNewGroup","handleSelectArchived","autoCloseTimeout","shouldRenderUpdateButton","updateButtonClassNames","handleUpdateClick","isAppOutdated","markIsAppOutdated","useFlag","timeout","reload","useAppOutdatedCheck","shouldCleanup","cleanupExceptionKey","fluid","pill","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","SettingsScreens","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","pickerSearchInput","getElementById","blur","handleSearchQuery","IS_MAC_OS","metaKey","getKeyFromEvent","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","remove","style","handleMouseMove","event","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","add","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","isChannel","onMouseDown","onMouseUp","onDoubleClick","setSize","handleResize","HeaderMenuContainer","isChatChannel","selectIsInSelectMode","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canCall","ARE_CALLS_SUPPORTED","canMute","canLeave","canEnterVoiceChat","isCallActive","canCreateVoiceChat","adminRights","manageCall","isCreator","pendingJoinRequests","canExpandActions","joinChannel","openLocalTextSearch","restartBot","openCallFallbackConfirm","requestNextManagementScreen","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","right","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleRestartBot","handleJoinRequestsClick","ManagementScreens","handleSearchClick","focus","searchInput","IS_PWA","disabled","anchor","withExtraActions","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","useWebpThumbnail","thumbDataUri","getMessageMediaThumbDataUri","shouldDecodeThumbnail","isWebpSupported","thumbnailDecoded","setThumbnailDecoded","EMPTY_IMAGE_DATA_URI","useLayoutEffect","webpToPngBase64","then","catch","drawRect","height","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","mediaThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","renderMessageSummary","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","ConfirmDialog","confirmLabel","confirmHandler","getPictogramDimensions","src","alt","renderPictogram","RippleEffect","scaleImage","image","ratio","outputType","Blob","URL","createObjectURL","img","Image","onload","scale","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","res","canvas","createElement","ctx","getContext","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","LOGO_DIMENSIONS","MINIMAL_SIZE","sender","audio","voice","fileName","artist","performer","getSenderTitle","getTranslation","album","getChatTitle","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","media","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","fn","deps","defaultValue","setIsLoading","setError","setResult","wasCancelled","telegramLogoPath","resizeImage","makeGoodArtwork","useAsync","buildMediaMetadata","artwork","selectSender","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","isVoice","senderName","mediaData","mediaMetadata","useMessageMediaMetadata","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isFirst","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isVoicePlaying","handleClick","handleClose","clearMediaSession","handleVolumeChange","handleVolumeClick","handlePlaybackClick","volumeIcon","renderText","renderAudio","subtitle","renderVoice","withClickPropagation","RangeSlider","groupCall","selectChatGroupCall","usersById","isLoaded","isCallNotEmpty","hasPinnedOffset","joinGroupCall","subscribeToGroupCallUpdates","handleJoinGroupCall","fetchedParticipants","isUser","subscribed","p","Avatar","audioMessage","pinnedIds","state","isSelectModeActive","isChatWithBot","currentTransitionKey","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","openChatWithInfo","pinMessage","openPreviousChat","toggleLeftColumn","isBackButtonActive","pinnedMessageIndex","setPinnedMessageIndex","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_ID","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","useCurrentOrPrev","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","canRevealTools","componentEl","renderInfo","renderBackButton","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","noRtl","GroupChatInfo","asClose","withUnreadCounter","isAudioPlayerRendered","getMessageKey","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStart","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","IS_ANDROID","INTERSECTION_MARGIN_FOR_MEDIA","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","noAvatars","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","clamp","num","low","high","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","REM","minWidth","maxHeight","spacing","originalRatios","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","calculateAuthorWidth","font","whiteSpace","left","opacity","appendChild","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","onContextMenu","handleBeforeContextMenu","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","onRelease","handleMouseDown","preventMessageInputBlur","clearInterval","pageX","pageY","handleDoubleTap","target","contains","handleTap","handleContextMenu","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","container","clientY","isVisibleX","isVisibleY","handleSendQuickReaction","currentTarget","lastGroupElement","getLastElementInDocumentGroup","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","ContextMenuContainer","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isChat","senderUser","senderChat","observeIntersection","isEmbedded","appearanceOrder","isLastInList","useOnIntersect","noAppearanceAnimation","markShown","targetUsers","renderActionMessageText","asTextWithSpoilers","isContextMenuOpen","contextMenuPosition","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","customText","isIntersecting","useIsIntersecting","pictogramId","isRoundVideo","getMessageRoundVideo","senderTitle","draggable","activeReaction","isInMeta","stopActiveReaction","r","centerIconId","effectId","mediaDataCenterIcon","mediaDataEffect","shouldPlay","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","AnimatedSticker","animationData","play","noLoop","onLoad","onEnded","outgoingStatus","signature","withReactions","withReactionOffset","reactionMessage","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","views","formatTime","MessageOutgoingStatus","observeIntersectionForPlaying","shouldLoop","isModalOpen","openModal","closeModal","isLottie","isGif","canDisplayGif","IS_WEBM_SUPPORTED","isMemojiSticker","NO_STICKER_SET_ID","shouldLoad","mediaHash","previewMediaHash","previewUrl","getMessageMediaFormat","isMediaLoaded","isLottieLoaded","markLottieLoaded","isMediaReady","useMediaTransition","getStickerDimensions","thumbClassName","stickerClassName","safePlay","autoPlay","playsInline","loop","muted","fromSticker","useBlurredMediaThumbRef","fullMediaData","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","canAutoLoad","isSelected","uploadProgress","nonInteractive","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","loadProgress","useMediaWithLoadProgress","thumbRef","downloadProgress","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","usePrevious","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","contentEl","inSelectMode","getImageData","getAppendixColorFromImage","getCustomAppendixBg","appendixBg","setProperty","ProgressSpinner","useVideoAutoPause","playerRef","canPlay","wasPlaying","paused","canPlayRef","freezePlaying","unfreezePlaying","unfreezePlayingOnRaf","fastRaf","useBackgroundMode","useHeavyAnimationCheck","canAutoPlay","videoRef","getMessageWebPageVideo","isPlayAllowed","setIsPlayAllowed","previewClassNames","isInline","isBuffered","bufferingHandlers","useBuffering","shouldRenderPlayButton","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","duration","useVideoCleanup","cancelMessageMediaDownload","onTimeUpdate","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","formatPhoneNumberWithCode","getPercentage","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","isQuiz","getReadableVotersCount","isText","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","isSquarePhoto","handleMediaClick","siteName","displayUrl","isMediaInteractive","truncatedDescription","trimText","SafeLink","getMessageInvoice","amount","currency","isTest","photoUrl","formatCurrency","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","selectCanAutoLoadMedia","selectCanAutoPlayMedia","currentOnRelease","playingProgressRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","stopPlaying","capturePlaying","stopCurrentAudio","videoClassName","recentReplierIds","recentRepliers","peerId","hasUnread","recentReactors","recentReaction","isOutside","metaChildren","localSticker","soundId","playKey","useAnimatedEmoji","localStickerAnimationData","setLocalStickerAnimationData","getAnimationData","quality","APPENDIX_OWN","__html","APPENDIX_NOT_OWN","withSenderName","withAvatar","isLastInDocumentGroup","viaBotId","replyToChatId","isRepliesChat","isChatWithRepliesBot","chatUsername","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","botSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","selectIsDownloading","actualThreadInfo","selectIsMessageProtected","isSingleEmoji","animatedEmoji","selectAnimatedEmoji","animatedEmojiEffect","selectAnimatedEmojiEffect","animatedEmojiSoundId","selectAnimatedEmojiSound","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoLoadMedia","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","areReactionsInMeta","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","clickInlineButton","bottomMarkerRef","isLocal","hasReply","isReplyMessage","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","asForwarded","isLinkedChannelPost","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","withCommentButton","withQuickReactionButton","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","openMediaViewer","openAudioPlayer","markMessagesRead","sendPollVote","focusMessageInComments","replyToTopMessageId","channelPostId","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","contentClassName","hasComments","hasActionButton","classNames","isMedia","isMediaWithNoText","isViaBot","isRound","buildContentClassName","withAppendix","textParts","renderMessageText","metaPosition","reactionsPosition","calculatedWidth","noMediaCorners","extraPadding","adminTitle","metaSafeAuthorWidth","renderReactionsAndMeta","meta","onMouseMove","isAvatarPeerUser","avatarUser","avatarChat","hiddenName","renderAvatar","textContentClass","senderColor","getUserColorKey","renderSenderName","AnimatedEmoji","effect","forceLoadPreview","Audio","AudioOrigin","isSelectable","onPlay","onReadMedia","Document","renderContent","dangerouslySetInnerHTML","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","threshold","getUserFullName","chatInviteTitle","chatInviteHash","messageGroups","isViewportNewest","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","observeIntersectionForReading","throttleMs","margin","freeze","freezeForReading","unfreeze","unfreezeForReading","entries","mentionIds","entry","dataset","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","offsetHeight","scrollHeight","scrollTop","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_ID_BASE","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useOnChange","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flatten","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","getMessageOriginalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","botDescription","isChatLoaded","isChannelChat","isGroupChat","isChatGroup","threadFirstMessageId","selectFirstMessageId","linkedChatId","hasTools","canPost","withBottomShift","setScrollOffset","loadSponsoredMessages","loadMessageReactions","scrollOffsetRef","selectScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","onTickEnd","listedMessages","orderBy","useInterval","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useDebounce","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","el","offsetTop","top","findStuckDate","useStickyDates","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","clientHeight","preservedItemElements","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","isAnimatingScroll","patchChromiumScroll","resetScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","onScroll","backgroundColor","withExtraShift","focusNextReply","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","FILE_EXT_REGEX","buildAttachment","filename","isQuick","mimeType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","preloadImage","resizedUrl","fetchBlob","SUPPORTED_VIDEO_CONTENT_TYPES","videoWidth","videoHeight","preloadVideo","createPosterForVideo","insertHtmlInSelection","html","selection","getSelection","getRangeAt","rangeCount","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","collapse","removeAllRanges","addRange","resetInput","applyIosAutoCapitalizationFix","inputEl","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","reject","onstop","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","useDebouncedMemo","resolverFn","ms","dependencies","setValue","isFrozen","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","runThrottled","RE_COMMAND","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","CalendarModal","AttachMenu","SymbolMenu","InlineBotTooltip","MentionTooltip","CustomSend","StickerTooltip","BotCommandTooltip","useMouseInside","isKeyboardSingleUse","forceOpen","markForceOpen","unmarkForceOpen","keyboardButtons","forwardMessageIds","forwardedMessagesCount","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","faded","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RegExp","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","linkEntity","ApiMessageEntityTypes","textMatch","renderingWebPage","webPageWithoutPhoto","messageStub","SendAsMenu","MainButtonState","VOICE_RECORDING_FILENAME","chatUser","selectChatUser","REPLIES_USER_ID","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","anonymous","sendAsUser","editingMessage","canScheduleUntilOnline","selectUserStatus","wasOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","dropAreaState","onDropHide","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","addRecentEmoji","sendInlineBotResult","loadSendAs","appendixRef","setHtml","htmlRef","useStateRef","lastMessageSendTimeSeconds","prevDropAreaState","isCalendarOpen","openCalendar","closeCalendar","scheduledMessageArgs","setScheduledMessageArgs","canShowSendAs","sendMessageAction","useSendMessageAction","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsIds","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isAttachMenuOpen","openAttachMenu","closeAttachMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","SEND_MESSAGE_ACTION_INTERVAL","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetInlineBot","markIsOpen","unmarkIsOpen","innerText","getPlainText","parseBotQuery","prevQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","close","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","getFilteredCommands","nextFilteredBotCommands","prepareForRegExp","substr","useBotCommandTooltip","isCustomSendMenuOpen","canSendStickers","canSendGifs","canAttachMedia","canAttachPolls","canAttachEmbedLinks","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","isDisabled","cleanHtml","trim","clearStickersForEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","insertTextAndUpdateCursor","newHtml","selectionRange","isSelectionInsideInput","dispatchEvent","Event","bubbles","focusEditableElement","removeSymbol","execCommand","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","stopRecordingVoiceRef","handleEditComplete","editedMessage","editMessage","getTextWithEntitiesAsHtml","hasMessageMedia","useEditing","saveDraft","updateDraft","draftChatId","draftThreadId","currentHtml","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevHtml","handleBlur","useDraft","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","items","files","getFilesFromDataTransferItems","newAttachments","file","useClipboardPaste","handleFileSelect","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","maxLength","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleActivateBotCommandMenu","handleActivateSymbolMenu","handleGifSelect","gif","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","handleSilentSend","handleMessageSchedule","isWhenOnline","restArgs","getTime","handleMessageScheduleUntilOnline","handleCloseCalendar","handleSearchOpen","handleSymbolMenuOpen","handleSendAsMenuOpen","handleAllScheduledClick","mainButtonHandler","areVoiceMessagesNotAllowed","prevEditedMessage","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","onSend","DropAreaState","withQuick","onHide","onFileSelect","caption","onCaptionUpdate","onFileAppend","onClear","selectedSendAsId","onInsertUserName","filteredUsers","onSelectResult","withUsername","MessageInput","forcedPlaceholder","canAutoFocus","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onStickerSelect","emojis","onEmojiSelect","onPollCreate","onGifSelect","onRemoveSymbol","onSearchOpen","onSilentSend","onScheduleSend","withTimePicker","maxAt","getDayStartAt","isFutureMode","secondButtonLabel","onSubmit","onSecondButtonClick","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","PaymentModal","ReceiptModal","SeenByModal","emojiInteraction","EmojiInteractionAnimation","ReactorListModal","CLOSE_ANIMATION_DURATION","isImage","kind","isBlurred","isBackgroundBlurred","background","customBackground","patternColor","themes","isMobileSearchActive","isReceiptModalOpen","isSeenByModalOpen","isReactorListModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioPlayer","loadUser","closePaymentModal","clearReceipt","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","renderingHasTools","renderingIsFabShown","renderingIsChannel","prevTransitionKey","handleOpenEnd","handleSlideStop","withAnimations","setIsReady","forceUpdate","useForceUpdate","willSwitchMessageList","propertyName","useIsReady","ANIMATION_LEVEL_MIN","visualViewport","documentElement","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","forceSyncOnIOs","createMessageHash","isMessagingDisabled","withMessageListBottomShift","onTransitionEnd","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canAddContact","getCanAddContact","canManage","isEditingInvite","isColumnOpen","isSearch","isStickerSearch","isGifSearch","isPollResults","isAddingChatMembers","profileState","managementScreen","shouldSkipAnimation","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","addContact","setEditingExportedInvite","deleteExportedChatInvite","backButtonRef","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","handleAddContact","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","renderingContentKey","renderHeaderContent","confirmIsDestructive","autoFocusSearch","isBackButton","buttonClassName","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","isGroup","hasMembersTab","areMembersHidden","canViewMembers","canAddMembers","getHasAdminRight","canDeleteMembers","hasCommonChatsTab","resolvedUserId","isChatProtected","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","loadProfilePhotos","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContent","noSpinner","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","teactOrderKey","contextActions","memberId","handler","forceShowSelf","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","setOpenedInviteInfo","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","MediaViewer","download","click","startedDownloads","downloadHash","getMessageContentFilename","Notifications","Dialogs","ForwardPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","CallFallbackConfirm","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","updatePageTitle","nextTitle","wasTimeFormatSetManually","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isCallFallbackConfirmOpen","isFallbackConfirmOpen","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadAddedStickers","ensureTimeFormat","openStickerSetShortName","checkVersionNotification","loadAppConfig","LOCATION_HASH","processDeepLink","decodeURIComponent","middleColumnTransitionClassNames","rightColumnTransitionClassNames","prevIsLeftColumnShown","dispatchHeavyAnimationEnd","waitForTransitionEnd","prevIsRightColumnShown","initialUnread","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","handleStickerSetModalClose","usePreventPinchZoomGesture","onDrop","onDragOver","initApi"],"sourceRoot":""}