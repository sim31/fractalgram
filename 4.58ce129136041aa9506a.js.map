{"version":3,"sources":["webpack:///./src/modules/actions/ui/chats.ts","webpack:///./src/modules/actions/ui/messages.ts","webpack:///./src/modules/actions/ui/globalSearch.ts","webpack:///./src/modules/actions/ui/localSearch.ts","webpack:///./src/modules/actions/ui/stickerSearch.ts","webpack:///./src/modules/actions/ui/users.ts","webpack:///./src/modules/actions/ui/settings.ts","webpack:///./src/modules/actions/ui/misc.ts","webpack:///./src/modules/actions/ui/payments.ts","webpack:///./src/modules/actions/api/chats.ts","webpack:///./src/modules/actions/api/messages.ts","webpack:///./src/modules/actions/api/symbols.ts","webpack:///./src/modules/actions/api/globalSearch.ts","webpack:///./src/modules/actions/api/sync.ts","webpack:///./src/modules/actions/api/localSearch.ts","webpack:///./src/modules/actions/api/management.ts","webpack:///./src/modules/actions/api/users.ts","webpack:///./src/modules/actions/api/settings.ts","webpack:///./src/modules/actions/api/bots.ts","webpack:///./src/modules/actions/api/twoFaSettings.ts","webpack:///./src/modules/actions/api/payments.ts","webpack:///./src/util/requestQuery.ts","webpack:///./src/modules/actions/apiUpdaters/chats.ts","webpack:///./src/modules/actions/apiUpdaters/messages.ts","webpack:///./src/modules/actions/apiUpdaters/users.ts","webpack:///./src/modules/actions/apiUpdaters/symbols.ts","webpack:///./src/modules/actions/apiUpdaters/misc.ts","webpack:///./src/modules/actions/apiUpdaters/settings.ts","webpack:///./src/modules/actions/apiUpdaters/twoFaSettings.ts","webpack:///./src/components/ui/Switcher.tsx","webpack:///./src/components/left/main/LeftMainHeader.tsx","webpack:///./src/components/left/ConnectionState.tsx","webpack:///./src/hooks/useThrottledMemo.ts","webpack:///./src/hooks/useThrottle.ts","webpack:///./src/components/left/main/ChatFolders.tsx","webpack:///./src/components/left/search/LeftSearch.async.tsx","webpack:///./src/components/left/main/ContactList.async.tsx","webpack:///./src/components/left/NewChatButton.tsx","webpack:///./src/components/left/main/LeftMain.tsx","webpack:///./src/components/left/settings/Settings.async.tsx","webpack:///./src/components/left/newChat/NewChat.async.tsx","webpack:///./src/components/left/ArchivedChats.async.tsx","webpack:///./src/components/left/LeftColumn.tsx","webpack:///./src/hooks/useWindowSize.ts","webpack:///./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack:///./src/components/middle/HeaderMenuContainer.async.tsx","webpack:///./src/components/middle/HeaderActions.tsx","webpack:///./src/hooks/useWebpThumbnail.ts","webpack:///./src/components/middle/PinnedMessageNavigation.tsx","webpack:///./src/components/middle/HeaderPinnedMessage.tsx","webpack:///./src/components/middle/AudioPlayer.tsx","webpack:///./src/components/middle/MiddleHeader.tsx","webpack:///./src/components/middle/helpers/groupMessages.ts","webpack:///./src/components/middle/hooks/useStickyDates.ts","webpack:///./src/hooks/useDebounce.ts","webpack:///./src/components/middle/MessageScroll.tsx","webpack:///./src/components/middle/message/helpers/buildContentClassName.ts","webpack:///./src/components/middle/message/helpers/mediaDimensions.ts","webpack:///./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack:///./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack:///./src/components/middle/message/hooks/useFocusMessage.ts","webpack:///./src/components/middle/message/ContextMenuContainer.async.tsx","webpack:///./src/components/middle/ActionMessage.tsx","webpack:///./src/components/common/EmbeddedMessage.tsx","webpack:///./src/components/middle/message/MessageMeta.tsx","webpack:///./src/components/middle/message/Sticker.tsx","webpack:///./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack:///./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack:///./src/components/middle/message/Photo.tsx","webpack:///./src/hooks/useHeavyAnimationCheckForVideo.ts","webpack:///./src/components/middle/message/hooks/usePauseOnInactive.ts","webpack:///./src/components/middle/message/Video.tsx","webpack:///./src/components/middle/message/Contact.tsx","webpack:///./src/components/ui/CheckboxGroup.tsx","webpack:///./src/components/middle/message/PollOption.tsx","webpack:///./src/components/middle/message/Poll.tsx","webpack:///./src/components/middle/message/WebPage.tsx","webpack:///./src/components/middle/message/Invoice.tsx","webpack:///./src/components/middle/message/hocs/withSelectControl.tsx","webpack:///./src/components/middle/message/Album.tsx","webpack:///./src/components/middle/message/RoundVideo.tsx","webpack:///./src/components/middle/message/InlineButtons.tsx","webpack:///./src/components/middle/message/CommentButton.tsx","webpack:///./src/components/middle/message/Message.tsx","webpack:///./src/components/middle/MessageList.tsx","webpack:///./src/components/middle/ScrollDownButton.tsx","webpack:///./src/components/middle/composer/helpers/buildAttachment.ts","webpack:///./node_modules/opus-recorder/dist/encoderWorker.min.js","webpack:///./src/util/voiceRecording.ts","webpack:///./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack:///./src/components/middle/composer/helpers/getMessageTextAsHtml.ts","webpack:///./src/components/middle/composer/hooks/useDraft.ts","webpack:///./src/components/common/DeleteMessageModal.async.tsx","webpack:///./src/components/ui/ResponsiveHoverButton.tsx","webpack:///./src/components/middle/composer/AttachMenu.async.tsx","webpack:///./src/components/middle/composer/SymbolMenu.async.tsx","webpack:///./src/components/middle/composer/MentionTooltip.async.tsx","webpack:///./src/components/middle/composer/CustomSendMenu.async.tsx","webpack:///./src/components/middle/composer/StickerTooltip.async.tsx","webpack:///./src/components/middle/composer/BotKeyboardMenu.async.tsx","webpack:///./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack:///./src/components/middle/composer/AttachmentModal.async.tsx","webpack:///./src/components/middle/composer/PollModal.async.tsx","webpack:///./src/components/middle/composer/DropArea.async.tsx","webpack:///./src/components/middle/composer/WebPagePreview.tsx","webpack:///./src/components/common/CalendarModal.async.tsx","webpack:///./src/components/payment/PaymentModal.async.tsx","webpack:///./src/components/payment/ReceiptModal.async.tsx","webpack:///./src/components/middle/composer/Composer.tsx","webpack:///./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack:///./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack:///./src/util/insertHtmlInSelection.ts","webpack:///./src/util/deleteLastCharacterOutsideSelection.ts","webpack:///./src/components/middle/composer/hooks/useEditing.ts","webpack:///./src/components/middle/MobileSearch.async.tsx","webpack:///./src/components/middle/MessageSelectToolbar.async.tsx","webpack:///./src/components/common/UnpinAllMessagesModal.async.tsx","webpack:///./src/components/middle/MiddleColumn.tsx","webpack:///./src/hooks/useCustomBackground.ts","webpack:///./src/components/right/RightHeader.tsx","webpack:///./src/components/right/hooks/useProfileViewportIds.ts","webpack:///./src/components/right/hooks/useProfileState.ts","webpack:///./src/components/right/ProfilePhoto.tsx","webpack:///./src/components/right/ProfileInfo.tsx","webpack:///./src/components/right/hooks/usePhotosPreload.ts","webpack:///./src/components/right/ChatExtra.tsx","webpack:///./src/components/right/Profile.tsx","webpack:///./src/components/right/hooks/useTransitionFixes.ts","webpack:///./src/hooks/useCacheBuster.ts","webpack:///./src/components/right/RightSearch.async.tsx","webpack:///./src/components/right/management/Management.async.tsx","webpack:///./src/components/right/StickerSearch.async.tsx","webpack:///./src/components/right/GifSearch.async.tsx","webpack:///./src/components/right/PollResults.async.tsx","webpack:///./src/components/right/RightColumn.tsx","webpack:///./src/components/mediaViewer/MediaViewer.async.tsx","webpack:///./src/components/main/Notifications.async.tsx","webpack:///./src/components/main/Errors.async.tsx","webpack:///./src/components/main/ForwardPicker.async.tsx","webpack:///./src/components/main/SafeLinkModal.async.tsx","webpack:///./src/components/main/Main.tsx","webpack:///./src/bundles/main.ts"],"names":["addReducer","global","actions","payload","id","threadId","type","noPushState","currentMessageList","selectCurrentMessageList","chatId","exitMessageSelectMode","messages","contentToBeScheduled","undefined","forwardMessages","toChatId","setGlobal","HistoryWrapper","pushState","messageListType","back","updateCurrentMessageList","isChatInfoShown","contentKey","selectRightColumnContentKey","openChat","chatCreation","blurTimeout","scrollOffset","replaceThreadParam","messageId","paramName","chatMessages","selectChatMessages","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","selectAllowedMessageActions","canEdit","targetIndexDelta","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","indexOf","toString","length","Number","MAIN_THREAD_ID","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","avatarOwnerId","profilePhotoIndex","origin","mediaViewer","audioPlayer","shouldOpenInstantly","selectIsRightColumnShown","RightColumnContent","PollResults","window","setTimeout","newGlobal","getGlobal","pollResults","voters","noHighlight","groupedId","groupedChatId","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","includes","direction","Down","Up","loadViewportMessages","fromChatId","messageIds","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","closeMediaViewer","selectedMessages","openForwardMenu","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","isPollModalOpen","query","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","filter","unshift","pop","content","updateGlobalSearchContent","Search","updateLocalTextSearch","replaceLocalTextSearchResults","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","previousQuery","stickers","search","StickerSearch","resultIds","gifs","GifSearch","offsetId","results","updateSelectedUserId","replaceSettings","theme","settings","replaceThemeSettings","isActive","prevIsActive","management","byChatId","IS_MOBILE_SCREEN","isLeftColumnShown","action","emoji","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","notification","newNotifications","notifications","existingNotificationIndex","findIndex","n","message","splice","push","error","getReadableErrorText","newErrors","errors","existingErrorIndex","err","url","safeLinkModalUrl","payment","isPaymentModalOpen","clearPayment","closeInvoice","runThrottledForLoadChats","throttle","cb","runThrottledForLoadTopChats","runDebouncedForLoadFullChat","debounce","async","loadChats","listType","offsetDate","result","callApi","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","orderedPinnedIds","chatIds","shift","addUsers","buildCollectionByKey","users","updateChats","updateChatListIds","updateChatListSecondaryInfo","draftsById","map","forEach","replyingToById","isFullyLoaded","loadFullChat","fullInfo","updateChat","openChatByUsername","username","channelPostId","localChat","selectChatByUsername","isMin","previousChat","showNotification","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","byId","listIds","active","currentChatId","pinnedChats","otherChats","prepareChatList","chatToPreload","find","currentUserId","hasUnreadMark","toggleChatUnread","isChatSummaryOnly","requestChatUpdate","user","selectUser","selectThreadTopMessageId","requestThreadInfoUpdate","selectSupportChat","TIPS_USERNAME","oldestChat","selectIsChatPinned","sort","chat1","chat2","date","force","isMuted","title","about","photo","memberIds","progress","ChatCreationProgress","InProgress","createdChannel","channelId","accessHash","Complete","Error","getDispatch","createChannel","createdChat","createGroupChat","folderId","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","isChatArchived","chatFolders","loadChatFolders","recommendedChatFolders","recommended","loadRecommendedChatFolders","emoticon","orderedIds","maxId","recommendedId","description","newFolder","createChatFolder","Math","max","apply","deleteChatFolder","unreadCount","match","RE_TME_INVITE_LINK","exec","RE_TME_LINK","isEnabled","isChatBasicGroup","bannedRights","userId","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembers","isDismissed","updateManagementProgress","ManagementProgress","Promise","all","groups","addedById","reduce","group","addChats","forDiscussionIds","channel","fullChat","isPreHistoryHidden","linkedChatId","activeChatFolder","offset","uploadProgressCallbacks","Map","runThrottledForMarkRead","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","Backwards","Around","round","MESSAGE_LIST_SLICE","Forwards","selectThreadOriginChat","threadInfos","addChatMessagesById","updateOutlyingIds","updateListedIds","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","localId","progressCallback","attachment","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","rafPromise","delete","isRestricted","resolve","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","MESSAGE_DELETED","replyMessage","selectChatMessage","updateChatMessage","replyToMessageId","loadMessage","scheduledAt","clearWebPagePreview","value","noWebPage","selectNoWebPage","isSingle","attachments","isGrouped","restParams","text","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","Date","now","selectEditingMessage","setEditingId","get","previousLocalId","cancelApiProgress","apiUpdate","draft","replyToMsgId","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","webPagePreview","loadWebPagePreview","options","option","shouldResetVoters","v","a","offsets","nextOffset","loadPollOptionResults","fromChat","toChat","b","scheduledMessages","historyHash","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","loadPinnedMessages","copyTextToClipboard","link","searchThrottled","searchGifs","updateGifSearch","added","addedStickers","updateStickerSets","sets","loadStickerSets","setIds","addedSetIds","loadStickers","stickerSetId","recentStickers","loadRecentStickers","favorite","favoriteStickers","loadFavoriteStickers","featured","featuredStickers","loadFeaturedStickers","stickerSetAccessHash","stickerSet","selectStickerSet","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","replaceAnimatedEmojis","loadAnimatedEmojis","saved","savedGifs","loadSavedGifs","unfave","unfaveSticker","installedDate","language","currentEmojiKeywords","selectEmojiKeywords","isLoading","emojiKeywords","fromVersion","version","keywords","setsById","searchWords","searchStickers","updateStickersForEmoji","loadStickersForEmoji","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","chatOrUser","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","loadAndReplaceArchivedChats","updateUsers","replaceChatListIds","loadAndUpdateUsers","userIds","contactIds","contactList","updatedUsers","localChats","localUsers","globalChats","globalUsers","searchChats","timestampPlusDay","foundIds","currentSearch","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","newFoundIds","updateLocalTextSearchResults","searchTextMessages","peerId","selectCurrentMediaSearchPeerId","selectCurrentMediaSearch","currentType","currentResults","SHARED_MEDIA_SLICE","updateLocalMediaSearchResults","searchSharedMedia","timestamp","searchMessagesByDate","updateManagement","isUsernameAvailable","afterSyncCallback","DEBUG","console","log","savedUsers","savedPrivateChatIds","savedChats","selectedChat","isChatPrivate","selectedChatUser","replaceChats","loadAndReplaceChats","areMessagesLoaded","draftsByChatId","acc","lastReadInboxMessageId","newCurrentChatId","currentMessageListInfo","threadsById","Array","prototype","concat","replaceUsers","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","sync","afterSync","runDebouncedForFetchFullUser","buildInputPrivacyRules","visibility","allowedIds","deniedIds","usersById","chatsById","rules","collectUsers","collectChats","allowedUsers","allowedChats","blockedUsers","blockedChats","lastRequestedAt","topPeers","usersHash","loadTopUsers","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","updateChatMutedState","phone","phoneNumber","updateUser","updateContact","deleteUser","profileId","isPrivate","photos","button","sendBotCommand","command","openTelegramLink","toggleSafeLinkModal","data","alert","isError","showError","answerCallbackButton","openPollModal","getReceipt","receiptMessageId","getPaymentForm","setInvoiceMessageInfo","openPaymentModal","bio","profileEdit","ProfileEditProgress","currentUser","Idle","loadedWallpapers","wallpapers","file","previewBlobUrl","URL","createObjectURL","slug","UPLOADING_WALLPAPER_SLUG","document","fileName","size","mimeType","wallpaper","firstWallpaper","withLocalMedia","blocked","blockedIds","contactId","addBlockedContact","removeBlockedContact","activeSessions","session","isCurrent","peerType","shouldShowPreviews","updateNotifySettings","hasContactJoinedNotifications","languages","phoneNumberSettings","lastSeenSettings","profilePhotoSettings","forwardsSettings","chatInviteSettings","privacy","lastSeen","profilePhoto","forwards","chatInvite","privacyKey","allowUserIds","allowChatIds","blockUserIds","blockChatIds","isAllowList","contactsIds","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","requestInfo","saveInfo","selectPaymentMessageId","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","PaymentInfo","validateRequestedInfo","setPaymentForm","step","invoice","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","ShippingInfo","setReceipt","receipt","publishableKey","selectProviderPublishableKey","credentials","k","join","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","Checkout","sendStipeCredentials","shippingOptionId","saveCredentials","requestInfoId","selectPaymentRequestId","stripeCredentials","selectStripeCredentials","requestedInfoId","sendPaymentForm","save","runThrottledForUpdateAppBadge","update","noTopChatsRequest","selectIsChatListed","loadTopChats","newProfilePhoto","selectCountNotMutedUnread","updateAppBadge","isNotJoined","listId","typingStatus","senderId","isFromScheduled","isActiveChat","hasUnreadMention","unreadMentionsCount","showNewMessageNotification","messageUpdate","selectCommonBoxChatId","targetChat","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","updateChatListType","chatFoldersById","newChatFoldersById","pick","newOrderedIds","orderedId","folders","replacedMembers","addedMember","deletedMemberId","shouldUpdate","some","deleteIndex","isOwner","isAdmin","membersCount","updateWithLocalMedia","isScheduled","currentMessage","video","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","updateScheduledMessage","updateListedAndViewportIds","firstUnreadId","selectFirstUnreadId","addViewportId","firstMessageId","selectThreadByMessage","isMessageLocal","updateChatLastMessage","currentLastMessage","findLastMessage","isDeleting","deleteMessages","newLastMessage","threadIdsToUpdate","unique","deleteChatMessages","chatsIdsToUpdate","commonBoxChatId","updateThreadInfo","newMessage","isMessageInCurrentMessageList","isOutgoing","scheduledIds","selectScheduledIds","selectScheduledMessages","deleteChatScheduledMessages","currentPinnedIds","selectPinnedIds","newTheadInfo","messagesById","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","poll","updatedPoll","updatedResults","isChosen","chosenAnswers","chosenAnswer","chosenAnswerIndex","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","newResults","targetOption","targetOptionIndex","updatedOption","votersCount","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","status","targetUser","isBlocked","key","addNotifyException","twoFaSettings","memo","name","label","checked","disabled","inactive","noAnimation","onChange","onCheck","handleChange","useCallback","currentTarget","className","buildClassName","ANIMATION_LEVEL_OPTIONS","withGlobal","searchQuery","animationLevel","byKey","globalSearchChatId","searchDate","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","onOpenMenu","onCloseMenu","setGlobalSearchChatId","onReset","shouldSkipTransition","openTipsChat","setGlobalSearchDate","setSettingOption","lang","useLang","hasMenu","LeftColumnContent","ChatList","clearedDateSearchParam","clearedChatSearchParam","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","MainButton","onTrigger","isOpen","Button","ripple","color","onClick","ariaLabel","handleSearchFocus","handleSelectSaved","handleDarkModeToggle","stopPropagation","newTheme","switchTheme","handleAnimationLevelChange","newLevel","_","body","classList","toggle","isSearchFocused","GlobalSearch","Contacts","searchInputPlaceholder","forceOpenDropdown","setForceOpenDropdown","useState","useHistoryBack","event","previousHistoryState","isMenuOpen","DropdownMenu","trigger","footer","APP_NAME","APP_VERSION","forceOpen","onOpen","onClose","MenuItem","icon","toLowerCase","href","FEEDBACK_URL","SearchInput","inputId","parentContainerClassName","focused","placeholder","autoComplete","canClose","onFocus","PickerSelectedItem","isMinimized","clickArg","chatOrUserId","connectionState","dir","isRtl","Spinner","resolverFn","ms","dependencies","valueRef","useRef","runThrottled","useThrottle","forceUpdate","useForceUpdate","useOnChange","isSync","current","orderedFolderIds","notifySettings","selectNotifySettings","notifyExceptions","selectNotifyExceptions","setActiveChatFolder","transitionRef","useEffect","displayedFolders","folderCountersById","useThrottledMemo","counters","unreadDialogsCount","hasActiveDialogs","getFolderUnreadDialogs","badgeCount","isBadgeActive","folderTabs","handleSwitchTab","IS_TOUCH_ENV","captureEvents","onSwipe","SwipeDirection","Left","min","Right","isNotInAllTabRef","captureEscKeyListener","handleKeyDown","metaKey","startsWith","digit","preventDefault","addEventListener","removeEventListener","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","folderType","noChatsText","TabList","tabs","activeTab","onSwitchTab","Transition","ref","activeKey","renderCount","props","LeftSearch","useModuleLoader","Bundles","Extra","Loading","ContactList","closeTimeout","isShown","onNewPrivateChat","onNewChannel","onNewGroup","setIsMenuOpen","fabClassName","handleMouseEnter","handleMouseLeave","onMouseEnter","onMouseLeave","tabIndex","Menu","positionX","positionY","autoClose","TRANSITION_RENDER_COUNT","onContentChange","isNewChatButtonShown","setIsNewChatButtonShown","isMouseInside","handleSelectSettings","Settings","handleSelectContacts","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","handleSelectArchived","Archived","autoCloseTimeout","NewChat","ContentType","ArchivedChats","RENDER_COUNT","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","SettingsScreens","Main","setContactsFilter","openMenu","closeMenu","useFlag","setContentWithHistory","NewChannelStep2","NewGroupStep2","setSettingsScreenWithHistory","screen","lastResetTime","setLastResetTime","contentType","NewChannel","NewGroup","handleReset","forceReturnToChatList","pickerSearchInput","getElementById","blur","EditProfile","Folders","General","Notifications","Privacy","Language","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyForwarding","PrivacyGroupChats","PrivacyActiveSessions","PrivacyBlockedUsers","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","setShouldSkipTransition","ANIMATION_DURATION","handleSearchQuery","currentScreen","onScreenSelect","isChannel","setSize","windowSize","handleResize","calculateMiddleFooterTransforms","windowWidth","canPost","sidePadding","MOBILE_SCREEN_MAX_WIDTH","messageListWidth","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","leftColumnWidth","rightColumnWidth","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","HeaderMenuContainer","isChatChannel","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canMute","canSelect","selectIsInSelectMode","canLeave","joinChannel","openLocalTextSearch","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","x","right","y","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleSearchClick","querySelector","focus","searchInput","fluid","anchor","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","useWebpThumbnail","getMessageMediaThumbDataUri","shouldDecodeThumbnail","isWebpSupported","thumbnailDecoded","setThumbnailDecoded","EMPTY_IMAGE_DATA_URI","useLayoutEffect","webpToPngBase64","then","catch","drawRect","width","height","radius","count","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","style","transform","svg","div","defs","innerHTML","onUnpinMessage","onAllPinnedClick","mediaThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","getMessageSummaryText","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","src","alt","renderPictogram","renderText","RippleEffect","sender","selectSender","noUi","senderName","getSenderTitle","mediaData","mediaLoader","playPause","isPlaying","useAudioPlayer","getMessageKey","getMediaDuration","handleClick","handleClose","audio","getMessageAudio","performer","renderAudio","subtitle","renderVoice","audioMessage","originChat","messagesCount","pinnedIds","state","isSelectModeActive","originChatId","isChatWithBot","selectIsChatWithBot","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","openChatWithInfo","pinMessage","toggleLeftColumn","pinnedMessageIndex","setPinnedMessageIndex","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","getChatTitle","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","handleBackClick","messageInput","EDITABLE_INPUT_ID","currentChat","selectIsChatMuted","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","useCurrentOrPrev","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessageTitle","canRevealTools","renderInfo","renderBackButton","PrivateChatInfo","withFullInfo","withMediaViewer","withUpdatingStatus","noRtl","GroupChatInfo","asClose","unreadCountInfo","formatIntegerCompact","componentEl","add","remove","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStart","senderGroups","dateGroups","isInAlbum","mainMessage","albumId","nextMessage","nextMessageDatetime","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","useStickyDates","isScrolled","markIsScrolled","runDebounced","shouldRunFirst","shouldRunLast","updateStickyDates","container","hasTools","contains","fastRaf","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","scrollTop","el","offsetTop","offsetHeight","top","findStuckDate","MessageScroll","focusingId","loadMoreForwards","loadMoreBackwards","isViewportNewest","onFabToggle","onNotchToggle","children","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","toggleScrollTools","scrollHeight","scrollBottom","isAtBottom","observe","observeIntersection","freeze","freezeForLoadMore","unfreeze","unfreezeForLoadMore","useIntersectionObserver","rootRef","margin","MESSAGE_LIST_SENSITIVE_AREA","entries","triggerEntry","isIntersecting","target","resetScroll","useOnIntersect","observeIntersectionForFab","freezeForFab","unfreezeForFab","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","teactFastList","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","getMessageText","stretchFactor","finalWidth","finalHeight","isSmall","AlbumRectPart","accumulate","list","initValue","accumulator","item","clamp","num","low","high","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","album","ratios","proportions","ratio","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","REM","getMaxWidth","minWidth","maxHeight","spacing","originalRatios","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","calculateAuthorWidth","createElement","font","whiteSpace","position","left","opacity","appendChild","offsetWidth","useFocusMessage","elementRef","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","ContextMenuContainer","targetUserId","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isEmbedded","appearanceOrder","isLastInList","noAppearanceAnimation","markShown","renderActionMessageText","asPlain","isContextMenuOpen","contextMenuPosition","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","isContextMenuShown","data-message-id","onMouseDown","onContextMenu","EmbeddedMessage","customText","useIsIntersecting","pictogramId","isRoundVideo","getMessageRoundVideo","senderTitle","outgoingStatus","signature","views","isEdited","formatTime","MessageOutgoingStatus","Sticker","observeIntersectionForPlaying","shouldLoop","isModalOpen","openModal","closeModal","isAnimated","isMemojiSticker","MEMOJI_STICKER_ID","shouldLoad","shouldPlay","mediaHash","getMessageMediaFormat","isMediaLoaded","isAnimationLoaded","markAnimationLoaded","isMediaReady","shouldRenderFullMedia","useTransitionForMedia","getStickerDimensions","thumbClassName","stickerClassName","AnimatedSticker","animationData","play","noLoop","onLoad","fromSticker","useBlurredMediaThumbRef","fullMediaData","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","inSelectMode","isSelected","img","Image","onload","canvas","ctx","getContext","drawImage","getImageData","getAppendixColorFromImage","Photo","shouldAutoLoad","isInSelectMode","uploadProgress","nonInteractive","shouldAffectAppendix","onCancelUpload","localBlobUrl","isDownloadAllowed","setIsDownloadAllowed","shouldDownload","downloadProgress","useMediaWithDownloadProgress","thumbRef","isUploading","isTransferring","transferProgress","getMediaTransferState","wasDownloadDisabled","usePrevious","shouldRenderSpinner","spinnerClassNames","shouldRenderThumb","isAllowed","contentEl","getCustomAppendixBg","appendixBg","setProperty","setAttribute","ProgressSpinner","useHeavyAnimationCheckForVideo","playerRef","shouldPlayRef","safePlay","useHeavyAnimationCheck","isPlayAllowed","wasPlaying","isFrozen","freezePlaying","paused","unfreezePlaying","unfreezePlayingOnRaf","hasFocus","useBackgroundMode","Video","shouldAutoPlay","videoRef","canPlayInline","canMessagePlayVideoInline","setIsPlayAllowed","isInline","isBuffered","bufferingHandlers","useBuffering","playProgress","setPlayProgress","handleTimeUpdate","currentTime","usePauseOnInactive","useVideoCleanup","videoClassName","shouldRenderInlineVideo","shouldRenderHqPreview","shouldRenderPlayButton","shouldRenderDownloadButton","autoPlay","muted","loop","playsInline","onTimeUpdate","isGif","formatMediaDuration","duration","contact","openUserInfo","Avatar","formatPhoneNumberWithCode","selected","loadingOptions","setValues","newValues","Checkbox","subLabel","getPercentage","toFixed","PollOption","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","r","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","floor","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","RadioGroup","loadingOption","isQuiz","getReadableVotersCount","isText","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","isSquarePhoto","handleMediaClick","siteName","displayUrl","isMediaInteractive","hasDocument","truncatedDescription","trimText","data-initial","SafeLink","getMessageInvoice","photoUrl","withSelectControl","WrapedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","shiftKey","newProps","PhotoWithSelect","VideoWithSelect","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","currentOnRelease","RoundVideo","playingProgressRef","shouldSpinnerRender","isActivated","setIsActivated","setProgress","playerEl","playingProgressEl","stopPlaying","requestAnimationFrame","capturePlaying","onRelease","ROUND_VIDEO_DIMENSIONS","onEnded","InlineButtons","recentReplierIds","recentRepliers","hasUnread","data-cnt","handleDocumentGroupMouseEnter","lastGroupElement","getLastElementInDocumentGroup","handleDocumentGroupMouseLeave","removeAttribute","nextElementSibling","withSenderName","withAvatar","viaBotId","forceSenderName","isAnonymousOwnMessage","originSender","botSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","every","selectOutgoingStatus","isSingleEmoji","animatedEmoji","selectAnimatedEmoji","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","shouldAutoLoadMedia","selectShouldAutoLoadMedia","shouldAutoPlayMedia","selectShouldAutoPlayMedia","shouldLoopStickers","selectShouldLoopStickers","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","openMediaViewer","openAudioPlayer","markMessagesRead","sendPollVote","clickInlineButton","bottomMarkerRef","appendixRef","hasReply","isReplyMessage","hasThread","asForwarded","isLinkedChannelPost","isInDocumentGroup","voice","getMessageCustomShape","textParts","renderMessageText","containerClassName","contentClassName","hasComments","classNames","isMediaWithNoText","isViaBot","isRound","buildContentClassName","avatarPeer","senderPeer","adminTitle","withCommentButton","withAppendix","handleGroupDocumentMessagesSelect","handleContainerDoubleClick","handleContentDoubleClick","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","MediaViewerOrigin","ScheduledInline","Inline","handleAudioPlay","handleAlbumMediaClick","albumMessageId","ScheduledAlbum","Album","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","fromMessageId","calculatedWidth","noMediaCorners","extraPadding","metaSafeAuthorWidth","canShowActionButton","canForward","canFocus","isChannelPost","onDoubleClick","data-last-message-id","data-has-unread-mention","isAvatarPeerUser","avatarUser","avatarChat","hiddenName","renderAvatar","shouldInlineMeta","senderColor","getUserColorKey","renderSenderName","AnimatedEmoji","Audio","isSelectable","onPlay","onReadMedia","Document","renderContent","INTERSECTION_THROTTLE_FOR_MEDIA","IS_ANDROID","INTERSECTION_MARGIN_FOR_MEDIA","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","withLastMessageWhenPreloading","botDescription","chatBot","selectChatBot","isChatLoaded","isChannelChat","threadFirstMessageId","selectFirstMessageId","hasLinkedChat","markMessageListRead","setScrollOffset","scrollOffsetRef","selectScrollOffset","anchorIdRef","anchorTopRef","listItemElementsRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","hasFocusing","setHasFocusing","onTickEnd","freezeForMedia","unfreezeForMedia","throttleMs","observeIntersectionForReading","freezeForReading","unfreezeForReading","mentionIds","entry","dataset","messageGroups","listedMessages","orderBy","loadMoreAround","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","clientHeight","preservedItemElements","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","shouldForceScroll","lastItemElement","lastItemHeight","newScrollTop","hasFirstMessageChanged","hasLastMessageChanged","isAlreadyFocusing","isResized","unreadDivider","isAnimatingScroll","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","withUsers","onScroll","currentAnchorIdRef","isSchedule","messageCountToAnimate","messageGroup","flatten","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","getMessageOriginalId","SCHEDULED_WHEN_ONLINE","formatHumanDate","renderMessages","focusLastMessage","messageElements","lastMessageElement","buildAttachment","filename","blob","isQuick","quick","preloadImage","newBlob","toBlob","squeezeImage","revokeObjectURL","videoWidth","videoHeight","preloadVideo","createPosterForVideo","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","startedAt","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","volume","subscribeToAnalyzer","stop","reject","onstop","Blob","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","getMessageTextAsHtml","formattedText","currentThreadId","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","AttachMenu","SymbolMenu","MentionTooltip","CustomSend","StickerTooltipAsync","StickerTooltip","BotKeyboardMenu","forwardMessageIds","forwardedMessagesCount","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","AttachmentModal","PollModal","DropArea","RE_LINK","RegExp","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","parseMessageInput","linkEntity","ApiMessageEntityTypes","TextUrl","textMatch","renderingWebPage","webPageWithoutPhoto","messageStub","CalendarModal","PaymentModal","MainButtonState","ReceiptModal","chatUser","selectChatUser","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","editingMessage","canScheduleUntilOnline","wasOnline","withScheduledButton","shouldSchedule","botKeyboardMessageId","canSuggestMembers","isChatGroup","stickersForEmoji","groupChatMembers","isReceiptModalOpen","shouldSuggestStickers","dropAreaState","onDropHide","editMessage","saveDraft","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","closePaymentModal","clearReceipt","addRecentEmoji","loadEmojiKeywords","html","setHtml","lastMessageSendTimeSeconds","prevDropAreaState","isCalendarOpen","openCalendar","closeCalendar","scheduledMessageArgs","setScheduledMessageArgs","htmlRef","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isAttachMenuOpen","openAttachMenu","closeAttachMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_IOS","voiceRecording","tickVolume","boxShadow","useVoiceRecording","mainButtonState","Edit","IS_VOICE_RECORDING_SUPPORTED","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","mentionFilter","closeMentionTooltip","insertMention","mentionFilteredMembers","useMentionTooltip","isCustomSendMenuOpen","allowedAttachmentOptions","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","clearStickersForEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","canSendStickers","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","insertTextAndUpdateCursor","selection","getSelection","newHtml","replace","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","execCommand","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","removeAllRanges","addRange","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","removeSymbol","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","prevChatId","handleEditComplete","editedMessage","hasMessageMedia","useEditing","updateDraft","draftChatId","draftThreadId","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevHtml","handleBlur","useDraft","handlePaste","clipboardData","input","activeElement","tagName","EDITABLE_INPUT_MODAL_ID","items","media","getAsFile","pastedText","getData","substring","useClipboardPaste","handleFileSelect","files","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleStickerSelect","handleGifSelect","gif","handlePollSend","handleSilentSend","handleMessageSchedule","restArgs","getTime","handleMessageScheduleUntilOnline","handleCloseCalendar","handleSearchOpen","handleSymbolMenuOpen","handleAllScheduledClick","mainButtonHandler","areVoiceMessagesNotAllowed","canAttachMedia","prevEditedMessage","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","Portal","DropAreaState","None","withQuick","QuickFile","onHide","onFileSelect","caption","onCaptionUpdate","onSend","onFileAppend","onClear","onInsertUserName","filteredChatMembers","canAttachEmbedLinks","faded","MessageInput","innerWidth","shouldSetFocus","shouldSupressFocus","shouldSupressTextFormatter","onUpdate","onSupressedFocus","formatVoiceRecordDuration","onStickerSelect","emojis","onEmojiSelect","onPollCreate","onGifSelect","onRemoveSymbol","onSearchOpen","onSilentSend","onScheduleSend","withTimePicker","selectedAt","maxAt","getDayStartAt","isFutureMode","secondButtonLabel","onSubmit","onSecondButtonClick","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","CLOSE_ANIMATION_DURATION","canBeQuicklyUploaded","kind","CONTENT_TYPES_FOR_QUICK_UPLOAD","isBlurred","isBackgroundBlurred","background","customBackground","backgroundColor","patternColor","themes","isMobileSearchActive","getCanPostInChat","isBotNotStarted","isPinnedMessageList","messageSendingRestrictionReason","getMessageSendingRestrictionReason","hasPinnedOrAudioMessage","loadUser","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanPost","renderingHasTools","renderingIsFabShown","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","customBackgroundValue","settingValue","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","useCustomBackground","MASK_IMAGE_DISABLED","messagingDisabledClassName","footerClassName","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","ANIMATION_LEVEL_MAX","shouldCleanup","onUnpin","runDebouncedForSearch","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canManage","isCreator","isColumnOpen","isSearch","isStickerSearch","isGifSearch","isPollResults","profileState","managementScreen","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","shouldSkipAnimation","backButtonRef","handleMessageSearchQueryChange","handleJumpToDate","valueOf","handleStickerSearchQueryChange","handleGifSearchQueryChange","ProfileState","Profile","SharedMedia","MemberList","ManagementScreens","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","GroupMembers","ManageGroupMembers","renderingContentKey","renderHeaderContent","isBackButton","buttonClassName","isPastMode","submitButtonLabel","useProfileViewportIds","loadMoreMembers","searchMessages","tabType","mediaSearchType","resultType","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","currentResultType","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","isOnTop","useInfiniteScrollForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","useInfiniteScrollForSharedMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","noProfileInfo","forSharedMediaType","messageIdsRef","getMessageContentIds","reverse","runThrottledForScroll","isScrollingProgrammatically","isFirstPhoto","isSavedMessages","isDeleted","isDeletedUser","getMediaHash","forceAvatar","getChatAvatarHash","imageHash","ApiMediaFormat","BlobUrl","avatarThumbnailData","useBlurSync","dataUri","imageSrc","prevImageSrc","decoding","userFullName","getUserFullName","getFirstLetters","fullClassName","forceShowSelf","loadFullUser","fullName","slideAnimation","currentPhotoIndex","setCurrentPhotoIndex","isFirst","isLast","profile","currentIndex","usePhotosPreload","handleProfilePhotoClick","ProfileAvatar","selectPreviousMedia","selectNextMedia","excludedClosestSelector","renderPhoto","isVerifiedIconShown","isVerified","renderPhotoTabs","aria-label","VerifiedIcon","isUserOnline","getUserStatus","canInviteUsers","isUserRightBanned","getHasAdminRight","currentIsMuted","chatUsername","handleNotificationChange","copy","entity","formattedNumber","getChatLink","printedUsername","getChatDescription","ListItem","multiline","narrow","isStatic","TABS","buildInfiniteScrollItemSelector","isGroup","hasMembersTab","areMembersHidden","canViewMembers","resolvedUserId","onProfileStateChange","setLocalMediaSearchType","searchMediaMessagesLocal","loadProfilePhotos","setActiveTab","useEffectWithPrevDeps","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContents","renderSharedMedia","noSpinner","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","renderingFor","teactOrderKey","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","renderProfileInfo","shouldRestoreHeight","onStart","onStop","big","RightSearch","Management","MAIN_SCREENS_COUNT","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","currentProfileUserId","selectedId","isChatSelected","toggleChatInfo","closeLocalTextSearch","closePollResults","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","UserInfo","isOverlaying","close","GroupType","handleSelectChatMember","memberId","isPromoted","handleManagementScreenSelect","onChatMemberSelect","prevContentKey","MediaViewer","Errors","ForwardPicker","SafeLinkModal","rightColumnAnimationTimeout","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasErrors","isHistoryAnimationDisabled","setIsHistoryAnimationDisabled","middleColumnTransitionClassNames","rightColumnTransitionClassNames","stopEvent","initialUnread","clearInterval","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","onDrop","onDragOver","initApi"],"mappings":"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","file":"4.58ce129136041aa9506a.js","sourcesContent":["import { addReducer, setGlobal } from '../../../lib/teact/teactn';\nimport {\n  exitMessageSelectMode,\n  updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList, selectRightColumnContentKey } from '../../selectors';\nimport { HistoryWrapper } from '../../../util/history';\n\naddReducer('openChat', (global, actions, payload) => {\n  const {\n    id, threadId = -1, type = 'thread', noPushState,\n  } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    global = exitMessageSelectMode(global);\n\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n\n    setGlobal(global);\n\n    if (!noPushState) {\n      if (id !== undefined) {\n        HistoryWrapper.pushState({\n          type: 'chat',\n          chatId: id,\n          threadId,\n          messageListType: type,\n        });\n      } else {\n        HistoryWrapper.back();\n      }\n    }\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type);\n});\n\naddReducer('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  HistoryWrapper.pushState({\n    type: 'right',\n    contentKey: selectRightColumnContentKey(global),\n  });\n\n  actions.openChat(payload);\n});\n\naddReducer('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection, RightColumnContent } from '../../../types';\n\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId, selectIsViewportNewest, selectReplyingToId,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\nimport { HistoryWrapper } from '../../../util/history';\n\nconst FOCUS_DURATION = 2000;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\n\nlet blurTimeout: number | undefined;\n\naddReducer('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddReducer('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddReducer('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddReducer('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddReducer('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat && chat.lastMessage ? chat.lastMessage.id : undefined;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo ? threadInfo.lastMessageId : undefined;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddReducer('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n  } = payload!;\n\n  return {\n    ...global,\n    mediaViewer: {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    },\n    forwardMessages: {},\n  };\n});\n\naddReducer('closeMediaViewer', (global) => {\n  return {\n    ...global,\n    mediaViewer: {},\n  };\n});\n\naddReducer('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n    },\n  };\n});\n\naddReducer('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {},\n  };\n});\n\naddReducer('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId, noPushState } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!noPushState) {\n    HistoryWrapper.pushState({\n      type: 'right',\n      contentKey: RightColumnContent.PollResults,\n    });\n  }\n\n  if (shouldOpenInstantly) {\n    window.setTimeout(() => {\n      const newGlobal = getGlobal();\n\n      setGlobal({\n        ...newGlobal,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    setGlobal({\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    });\n  }\n});\n\naddReducer('closePollResults', (global, actions, payload) => {\n  const { noPushState } = payload;\n\n  if (!noPushState) {\n    HistoryWrapper.back();\n  }\n\n  setGlobal({\n    ...global,\n    pollResults: {},\n  });\n});\n\naddReducer('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat && chat.lastMessage ? chat.lastMessage.id : undefined;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo ? threadInfo.lastMessageId : undefined;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddReducer('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids && ids.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight);\n  global = updateFocusDirection(global, undefined);\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddReducer('openForwardMenu', (global, actions, payload) => {\n  const { fromChatId, messageIds, groupedId } = payload!;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n    },\n  };\n});\n\naddReducer('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddReducer('setForwardChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddReducer('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddReducer('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddReducer('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  return toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n});\n\n\naddReducer('exitMessageSelectMode', exitMessageSelectMode);\n\naddReducer('openPollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: true,\n  };\n});\n\naddReducer('closePollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: false,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddReducer('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddReducer('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddReducer('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddReducer('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport { HistoryWrapper } from '../../../util/history';\nimport { RightColumnContent } from '../../../types';\n\naddReducer('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  HistoryWrapper.pushState({\n    type: 'right',\n    contentKey: RightColumnContent.Search,\n  });\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddReducer('closeLocalTextSearch', (global, actions, payload) => {\n  const { noPushState } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  if (!noPushState) {\n    HistoryWrapper.back();\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n});\n\naddReducer('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddReducer('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n","import { addReducer } from '../../../lib/teact/teactn';\nimport { HistoryWrapper } from '../../../util/history';\nimport { RightColumnContent } from '../../../types';\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query, noPushState } = payload!;\n  const previousQuery = global.stickers.search.query;\n\n  if (!noPushState && previousQuery !== query) {\n    if (query !== undefined && previousQuery === undefined) {\n      HistoryWrapper.pushState({\n        type: 'right',\n        contentKey: RightColumnContent.StickerSearch,\n      });\n    } else {\n      HistoryWrapper.back();\n    }\n  }\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query, noPushState } = payload!;\n  const previousQuery = global.gifs.search.query;\n\n  if (!noPushState && previousQuery !== query) {\n    if (query !== undefined) {\n      HistoryWrapper.pushState({\n        type: 'right',\n        contentKey: RightColumnContent.GifSearch,\n      });\n    } else {\n      HistoryWrapper.back();\n    }\n  }\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { updateSelectedUserId } from '../../reducers';\n\naddReducer('openUserInfo', (global, actions, payload) => {\n  const { id } = payload!;\n\n  actions.openChat({ id });\n});\n\nconst clearSelectedUserId = (global: GlobalState) => updateSelectedUserId(global, undefined);\n\naddReducer('openChat', clearSelectedUserId);\n","import { addReducer } from '../../../lib/teact/teactn';\nimport { ISettings, IThemeSettings, ThemeKey } from '../../../types';\nimport { replaceSettings, replaceThemeSettings } from '../../reducers';\n\naddReducer('setSettingOption', (global, actions, payload?: Partial<ISettings>) => {\n  return replaceSettings(global, payload);\n});\n\naddReducer('setThemeSettings', (global, actions, payload: { theme: ThemeKey } & Partial<IThemeSettings>) => {\n  const { theme, ...settings } = payload;\n\n  return replaceThemeSettings(global, theme, settings);\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { IS_MOBILE_SCREEN } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectCurrentMessageList, selectRightColumnContentKey } from '../../selectors';\nimport { HistoryWrapper } from '../../../util/history';\n\nconst MAX_STORED_EMOJIS = 18; // Represents two rows of recent emojis\n\naddReducer('toggleChatInfo', (global, actions, payload) => {\n  const { noPushState } = payload;\n\n  if (!noPushState) {\n    if (global.isChatInfoShown) {\n      HistoryWrapper.back();\n    } else {\n      HistoryWrapper.pushState({\n        type: 'right',\n        contentKey: selectRightColumnContentKey(global),\n      });\n    }\n  }\n\n  return {\n    ...global,\n    isChatInfoShown: !global.isChatInfoShown,\n  };\n});\n\naddReducer('toggleManagement', (global, actions, payload): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const { noPushState } = payload;\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { isActive: prevIsActive } = global.management.byChatId[chatId] || {};\n\n  if (!noPushState) {\n    if (prevIsActive) {\n      HistoryWrapper.back();\n    } else {\n      HistoryWrapper.pushState({\n        type: 'right',\n        contentKey: selectRightColumnContentKey(global),\n      });\n    }\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !prevIsActive,\n        },\n      },\n    },\n  };\n});\n\naddReducer('closeManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddReducer('openChat', (global, actions, payload) => {\n  if (!IS_MOBILE_SCREEN) {\n    return undefined;\n  }\n\n  const { id } = payload!;\n\n  return {\n    ...global,\n    isLeftColumnShown: id === undefined,\n  };\n});\n\naddReducer('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddReducer('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload!;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddReducer('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload!;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: 0,\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddReducer('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('dismissNotification', (global) => {\n  const newNotifications = [...global.notifications];\n\n  newNotifications.pop();\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('showError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if (!getReadableErrorText(error)) {\n    return global;\n  }\n\n  const newErrors = [...global.errors];\n  const existingErrorIndex = newErrors.findIndex((err) => err.message === error.message);\n  if (existingErrorIndex !== -1) {\n    newErrors.splice(existingErrorIndex, 1);\n  }\n\n  newErrors.push(error);\n\n  return {\n    ...global,\n    errors: newErrors,\n  };\n});\n\naddReducer('dismissError', (global) => {\n  const newErrors = [...global.errors];\n\n  newErrors.pop();\n\n  return {\n    ...global,\n    errors: newErrors,\n  };\n});\n\naddReducer('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\nimport {\n  clearPayment, closeInvoice,\n} from '../../reducers';\n\naddReducer('openPaymentModal', (global, actions, payload) => {\n  const { messageId } = payload;\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      messageId,\n      isPaymentModalOpen: true,\n    },\n  };\n});\n\naddReducer('closePaymentModal', (global) => {\n  const newGlobal = clearPayment(global);\n  return closeInvoice(newGlobal);\n});\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiUser, ApiChatFolder, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ChatCreationProgress, ManagementProgress } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  ARCHIVED_FOLDER_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  CHAT_LIST_LOAD_SLICE,\n  RE_TME_INVITE_LINK,\n  RE_TME_LINK,\n  TIPS_USERNAME,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addChats,\n  addUsers,\n  replaceThreadParam,\n  updateChatListIds,\n  updateChats,\n  updateChat,\n  updateChatListSecondaryInfo,\n  updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChat,\n  selectUser,\n  selectChatListType,\n  selectIsChatPinned,\n  selectChatFolder,\n  selectSupportChat,\n  selectChatByUsername,\n  selectThreadTopMessageId,\n  selectCurrentMessageList,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport {\n  isChatSummaryOnly, isChatArchived, prepareChatList, isChatBasicGroup,\n} from '../../helpers';\n\nconst TOP_CHATS_PRELOAD_PAUSE = 100;\n// We expect this ID does not exist\nconst TMP_CHAT_ID = -1;\n\nconst runThrottledForLoadChats = throttle((cb) => cb(), 1000, true);\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddReducer('preloadTopChatMessages', (global, actions) => {\n  (async () => {\n    const preloadedChatIds: number[] = [];\n\n    for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n      await pause(TOP_CHATS_PRELOAD_PAUSE);\n\n      const {\n        byId,\n        listIds: { active: listIds },\n        orderedPinnedIds: { active: orderedPinnedIds },\n      } = getGlobal().chats;\n      if (!listIds) {\n        return;\n      }\n\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n      const { pinnedChats, otherChats } = prepareChatList(byId, listIds, orderedPinnedIds);\n      const topChats = [...pinnedChats, ...otherChats];\n      const chatToPreload = topChats.find(({ id }) => id !== currentChatId && !preloadedChatIds.includes(id));\n      if (!chatToPreload) {\n        return;\n      }\n\n      preloadedChatIds.push(chatToPreload.id);\n\n      actions.loadViewportMessages({ chatId: chatToPreload.id, threadId: MAIN_THREAD_ID });\n    }\n  })();\n});\n\naddReducer('openChat', (global, actions, payload) => {\n  const { id, threadId } = payload!;\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat && chat.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      actions.requestThreadInfoUpdate({ chatId: id, threadId });\n    }\n  }\n});\n\naddReducer('openSupportChat', (global, actions) => {\n  const chat = selectSupportChat(global);\n\n  actions.openChat({ id: chat ? chat.id : TMP_CHAT_ID });\n\n  if (chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchChat', { type: 'support' });\n    if (result) {\n      actions.openChat({ id: result.chatId });\n    }\n  })();\n});\n\naddReducer('openTipsChat', (global, actions) => {\n  actions.openChatByUsername({ username: TIPS_USERNAME });\n});\n\naddReducer('loadMoreChats', (global, actions, payload) => {\n  const { listType = 'active' } = payload!;\n  const listIds = global.chats.listIds[listType as ('active' | 'archived')];\n  const isFullyLoaded = global.chats.isFullyLoaded[listType as ('active' | 'archived')];\n\n  if (isFullyLoaded) {\n    return;\n  }\n\n  const oldestChat = listIds\n    ? listIds\n      .map((id) => global.chats.byId[id])\n      .filter((chat) => Boolean(chat && chat.lastMessage) && !selectIsChatPinned(global, chat.id))\n      .sort((chat1, chat2) => (chat1.lastMessage!.date - chat2.lastMessage!.date))[0]\n    : undefined;\n\n  if (oldestChat) {\n    runThrottledForLoadChats(() => loadChats(listType, oldestChat.id, oldestChat.lastMessage!.date));\n  } else {\n    runThrottledForLoadChats(() => loadChats(listType));\n  }\n});\n\naddReducer('loadFullChat', (global, actions, payload) => {\n  const { chatId, force } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(chat);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(chat));\n  }\n});\n\naddReducer('loadTopChats', () => {\n  runThrottledForLoadTopChats(() => loadChats('active'));\n});\n\naddReducer('requestChatUpdate', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', chat);\n});\n\naddReducer('updateChatMutedState', (global, actions, payload) => {\n  const { chatId, isMuted } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatMutedState', { chat, isMuted });\n});\n\naddReducer('createChannel', (global, actions, payload) => {\n  const {\n    title, about, photo, memberIds,\n  } = payload!;\n\n  const members = (memberIds as number[])\n    .map((id: number) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createChannel(title, members, about, photo);\n});\n\naddReducer('joinChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (channelId && accessHash) {\n    void callApi('joinChannel', { channelId, accessHash });\n  }\n});\n\naddReducer('leaveChannel', (global, actions, payload) => {\n  (async () => {\n    const { chatId } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const { id: channelId, accessHash } = chat;\n\n    if (channelId && accessHash) {\n      await callApi('leaveChannel', { channelId, accessHash });\n    }\n\n    actions.openChat({ id: undefined });\n  })();\n});\n\naddReducer('deleteChannel', (global, actions, payload) => {\n  (async () => {\n    const { chatId } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const { id: channelId, accessHash } = chat;\n\n    if (channelId && accessHash) {\n      await callApi('deleteChannel', { channelId, accessHash });\n    }\n\n    actions.openChat({ id: undefined });\n  })();\n});\n\naddReducer('createGroupChat', (global, actions, payload) => {\n  const { title, memberIds, photo } = payload!;\n  const members = (memberIds as number[])\n    .map((id: number) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createGroupChat(title, members, photo);\n});\n\naddReducer('toggleChatPinned', (global, actions, payload) => {\n  const { id, folderId } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddReducer('toggleChatArchived', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddReducer('loadChatFolders', () => {\n  void loadChatFolders();\n});\n\naddReducer('loadRecommendedChatFolders', () => {\n  void loadRecommendedChatFolders();\n});\n\naddReducer('editChatFolder', (global, actions, payload) => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddReducer('addChatFolder', (global, actions, payload) => {\n  const { folder } = payload!;\n  const { orderedIds } = global.chatFolders;\n  const maxId = orderedIds && orderedIds.length ? Math.max.apply(Math.max, orderedIds) : ARCHIVED_FOLDER_ID;\n\n  void createChatFolder(folder, maxId);\n});\n\naddReducer('deleteChatFolder', (global, actions, payload) => {\n  const { id } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void deleteChatFolder(id);\n  }\n});\n\naddReducer('toggleChatUnread', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddReducer('openTelegramLink', (global, actions, payload) => {\n  const { url } = payload!;\n  let match = RE_TME_INVITE_LINK.exec(url);\n\n  if (match) {\n    const hash = match[1];\n\n    (async () => {\n      const chat = await callApi('openChatByInvite', hash);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    })();\n  } else {\n    match = RE_TME_LINK.exec(url)!;\n\n    const username = match[1];\n    const channelPostId = match[2] ? Number(match[2]) : undefined;\n\n    void openChatByUsername(actions, username, channelPostId);\n  }\n});\n\naddReducer('openChatByUsername', (global, actions, payload) => {\n  const { username } = payload!;\n\n  void openChatByUsername(actions, username);\n});\n\naddReducer('togglePreHistoryHidden', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  let chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    void callApi('togglePreHistoryHidden', { chat, isEnabled });\n  })();\n});\n\naddReducer('updateChatDefaultBannedRights', (global, actions, payload) => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddReducer('updateChatMemberBannedRights', (global, actions, payload) => {\n  const { chatId, userId, bannedRights } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n    const isBanned = !!bannedRights.viewMessages;\n    const isUnblocked = !Object.keys(bannedRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(members && isBanned && {\n          members: members.filter((m) => m.userId !== userId),\n        }),\n        ...(members && !isBanned && {\n          members: members.map((m) => (\n            m.userId === userId\n              ? { ...m, bannedRights }\n              : m\n          )),\n        }),\n        ...(isUnblocked && kickedMembers && {\n          kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChatAdmin', (global, actions, payload) => {\n  const {\n    chatId, userId, adminRights, customTitle,\n  } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatAdmin', {\n      chat, user, adminRights, customTitle,\n    });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { adminMembers } = chatAfterUpdate.fullInfo;\n\n    const isDismissed = !Object.keys(adminRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(adminMembers && isDismissed && {\n          adminMembers: adminMembers.filter((m) => m.userId !== userId),\n        }),\n        ...(adminMembers && !isDismissed && {\n          adminMembers: adminMembers.map((m) => (\n            m.userId === userId\n              ? { ...m, adminRights, customTitle }\n              : m\n          )),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChat', (global, actions, payload) => {\n  const {\n    chatId, title, about, photo,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n    await Promise.all([\n      chat.title !== title\n        ? callApi('updateChatTitle', chat, title)\n        : undefined,\n      chat.fullInfo && chat.fullInfo.about !== about\n        ? callApi('updateChatAbout', chat, about)\n        : undefined,\n      photo\n        ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n        : undefined,\n    ]);\n\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n  })();\n});\n\naddReducer('toggleSignatures', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddReducer('loadGroupsForDiscussion', () => {\n  (async () => {\n    const groups = await callApi('fetchGroupsForDiscussion');\n    if (!groups) {\n      return;\n    }\n\n    const addedById = groups.reduce((result, group) => {\n      if (group) {\n        result[group.id] = group;\n      }\n\n      return result;\n    }, {} as Record<number, ApiChat>);\n\n    const global = addChats(getGlobal(), addedById);\n    setGlobal({\n      ...global,\n      chats: {\n        ...global.chats,\n        forDiscussionIds: Object.keys(addedById).map(Number),\n      },\n    });\n  })();\n});\n\naddReducer('linkDiscussionGroup', (global, actions, payload) => {\n  const { channelId, chatId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  let chat = selectChat(global, chatId);\n  if (!channel || !chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    let { fullInfo } = chat;\n    if (!fullInfo) {\n      const fullChat = await callApi('fetchFullChat', chat);\n      if (!fullChat) {\n        return;\n      }\n\n      fullInfo = fullChat.fullInfo;\n    }\n\n    if (fullInfo.isPreHistoryHidden) {\n      await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n    }\n\n    void callApi('setDiscussionGroup', { channel, chat });\n  })();\n});\n\naddReducer('unlinkDiscussionGroup', (global, actions, payload) => {\n  const { channelId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo && channel.fullInfo.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  (async () => {\n    await callApi('setDiscussionGroup', { channel });\n    if (chat) {\n      loadFullChat(chat);\n    }\n  })();\n});\n\n\naddReducer('setActiveChatFolder', (global, actions, payload) => {\n  return {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      activeChatFolder: payload,\n    },\n  };\n});\n\naddReducer('loadMoreMembers', (global) => {\n  (async () => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    if (!chat || isChatBasicGroup(chat)) {\n      return;\n    }\n\n    const offset = (chat.fullInfo && chat.fullInfo.members && chat.fullInfo.members.length) || undefined;\n    const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n    if (!result) {\n      return;\n    }\n\n    const { members, users } = result;\n    if (!members || !members.length) {\n      return;\n    }\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n    global = updateChat(global, chat.id, {\n      fullInfo: {\n        ...chat.fullInfo,\n        members: [\n          ...((chat.fullInfo || {}).members || []),\n          ...(members || []),\n        ],\n      },\n    });\n    setGlobal(global);\n  })();\n});\n\nasync function loadChats(listType: 'active' | 'archived', offsetId?: number, offsetDate?: number) {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: getGlobal().chats.orderedPinnedIds[listType] === undefined,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChatListIds(global, listType, chatIds);\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  Object.keys(result.draftsById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId],\n    );\n  });\n\n  Object.keys(result.replyingToById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nasync function loadFullChat(chat: ApiChat) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return;\n  }\n\n  const { users, fullInfo } = result;\n\n  let global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n  global = updateChat(global, chat.id, { fullInfo });\n\n  setGlobal(global);\n}\n\nasync function createChannel(title: string, users: ApiUser[], about?: string, photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChannel = await callApi('createChannel', { title, about, users });\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  let global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: channelId });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n}\n\nasync function createGroupChat(title: string, users: ApiUser[], photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChat = await callApi('createGroupChat', { title, users });\n  if (!createdChat) {\n    return;\n  }\n\n  const { id: chatId } = createdChat;\n\n  let global = getGlobal();\n  global = updateChat(global, chatId, createdChat);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: chatId });\n\n  if (chatId && photo) {\n    await callApi('editChatPhoto', { chatId, photo });\n  }\n}\n\nasync function loadChatFolders() {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    });\n  }\n}\n\nasync function loadRecommendedChatFolders() {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    });\n  }\n}\n\nasync function createChatFolder(folder: ApiChatFolder, maxId: number) {\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    });\n  }\n}\n\nasync function deleteChatFolder(id: number) {\n  await callApi('deleteChatFolder', id);\n}\n\nasync function openChatByUsername(\n  actions: GlobalActions,\n  username: string,\n  channelPostId?: number,\n) {\n  const global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    if (channelPostId) {\n      actions.focusMessage({ chatId: localChat.id, messageId: channelPostId });\n    } else {\n      actions.openChat({ id: localChat.id });\n    }\n    return;\n  }\n\n  const previousChat = selectCurrentChat(global);\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await callApi('getChatByUsername', username);\n  if (!chat) {\n    if (previousChat) {\n      actions.openChat({ id: previousChat.id });\n    }\n\n    actions.showNotification({ message: 'User does not exist' });\n\n    return;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  if (channelPostId) {\n    actions.focusMessage({ chatId: chat.id, messageId: channelPostId });\n  } else {\n    actions.openChat({ id: chat.id });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiVideo,\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MAX_MEDIA_FILES_FOR_ALBUM, MESSAGE_LIST_SLICE } from '../../../config';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport { areSortedArraysIntersecting, buildCollectionByKey, split } from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n} from '../../selectors';\nimport { rafPromise, throttle } from '../../../util/schedulers';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runThrottledForMarkRead = throttle((cb) => cb(), 1000, true);\n\naddReducer('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    // Let reducer return and update global\n    await Promise.resolve();\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddReducer('loadMessage', (global, actions, payload) => {\n  const { chatId, messageId, replyOriginForId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void loadMessage(chat, messageId, replyOriginForId);\n});\n\naddReducer('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n  };\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments, MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('editMessage', (global, actions, payload) => {\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddReducer('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(message.previousLocalId || message.id);\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddReducer('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'draft', draft);\n});\n\naddReducer('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n});\n\naddReducer('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddReducer('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddReducer('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddReducer('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteHistory', (global, actions, payload) => {\n  (async () => {\n    const { chatId, shouldDeleteForAll } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const maxId = chat.lastMessage && chat.lastMessage.id;\n\n    await callApi('deleteHistory', { chat, shouldDeleteForAll, maxId });\n\n    actions.openChat({ id: undefined });\n  })();\n});\n\naddReducer('markMessageListRead', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  const { maxId } = payload!;\n\n  runThrottledForMarkRead(() => {\n    void callApi('markMessageListRead', { chat, threadId, maxId });\n  });\n});\n\naddReducer('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddReducer('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddReducer('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddReducer('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddReducer('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddReducer('forwardMessages', (global) => {\n  const { fromChatId, messageIds, toChatId } = global.forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (fromChat && toChat && messages && messages.length) {\n    void forwardMessages(fromChat, toChat, messages);\n  }\n});\n\naddReducer('loadScheduledHistory', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { hash } = global.scheduledMessages.byChatId[chat.id] || {};\n\n  void loadScheduledHistory(chat, hash);\n});\n\naddReducer('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddReducer('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddReducer('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text: string;\n  entities: ApiMessageEntity[];\n  replyingTo: number;\n  attachment: ApiAttachment;\n  sticker: ApiSticker;\n  gif: ApiVideo;\n  poll: ApiNewPoll;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nfunction forwardMessages(\n  fromChat: ApiChat,\n  toChat: ApiChat,\n  messages: ApiMessage[],\n) {\n  callApi('forwardMessages', {\n    fromChat,\n    toChat,\n    messages,\n  });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const isUnique = (v: number, i: number, a: number[]) => a.indexOf(v) === i;\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: [\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ].filter(isUnique),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddReducer('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\naddReducer('loadMessageLink', (global, actions, payload) => {\n  const { messageId, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchMessageLink', { chat, message });\n\n    if (result) {\n      copyTextToClipboard(result.link);\n    }\n  })();\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat, historyHash?: number) {\n  const result = await callApi('fetchScheduledHistory', { chat, hash: historyHash });\n  if (!result) {\n    return;\n  }\n\n  const { hash, messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId, hash);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectEmojiKeywords, selectStickerSet } from '../../selectors';\n\nconst ADDED_SETS_THROTTLE = 500;\nconst ADDED_SETS_THROTTLE_CHUNK = 50;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('loadStickerSets', (global) => {\n  const { hash } = global.stickers.added || {};\n  void loadStickerSets(hash);\n});\n\naddReducer('loadAddedStickers', (global, actions) => {\n  const { setIds: addedSetIds } = global.stickers.added;\n  if (!addedSetIds || !addedSetIds.length) {\n    return;\n  }\n\n  (async () => {\n    for (let i = 0; i < addedSetIds.length; i++) {\n      actions.loadStickers({ stickerSetId: addedSetIds[i] });\n\n      if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n        await pause(ADDED_SETS_THROTTLE);\n      }\n    }\n  })();\n});\n\naddReducer('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddReducer('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddReducer('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddReducer('loadStickers', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  let { stickerSetAccessHash } = payload!;\n\n  if (!stickerSetAccessHash) {\n    const stickerSet = selectStickerSet(global, stickerSetId);\n    if (!stickerSet) {\n      return;\n    }\n\n    stickerSetAccessHash = stickerSet.accessHash;\n  }\n\n  void loadStickers(stickerSetId, stickerSetAccessHash);\n});\n\naddReducer('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n});\n\naddReducer('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddReducer('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddReducer('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddReducer('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddReducer('loadEmojiKeywords', (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n  let currentEmojiKeywords = selectEmojiKeywords(global, language);\n\n  if (currentEmojiKeywords && currentEmojiKeywords.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  (async () => {\n    const emojiKeywords = await callApi('fetchEmojiKeywords', {\n      language,\n      fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n    });\n\n    global = getGlobal();\n    currentEmojiKeywords = selectEmojiKeywords(global, language);\n\n    if (!emojiKeywords) {\n      setGlobal({\n        ...global,\n        emojiKeywords: {\n          ...global.emojiKeywords,\n          [language]: {\n            ...currentEmojiKeywords,\n            isLoading: false,\n          },\n        },\n      });\n\n      return;\n    }\n\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          isLoading: false,\n          version: emojiKeywords.version,\n          keywords: {\n            ...(currentEmojiKeywords && currentEmojiKeywords.keywords),\n            ...emojiKeywords.keywords,\n          },\n        },\n      },\n    });\n  })();\n});\n\nasync function loadStickerSets(hash = 0) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash = 0) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash = 0) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash = 0) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetId: string, accessHash: string) {\n  const stickerSet = await callApi('fetchStickers', { stickerSetId, accessHash });\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  let global = getGlobal();\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddReducer('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddReducer('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload!;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddReducer('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\nasync function searchStickers(query: string, hash = 0) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash = 0) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash = 0) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddReducer('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const newGlobal = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(newGlobal);\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddReducer('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const { nextOffsetId } = (resultsByType && resultsByType[type as ApiGlobalMessageSearchType]) || {};\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalUsers.map(({ id }) => id),\n      userIds: globalChats.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chatOrUser: chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addReducer, getGlobal, setGlobal, getDispatch,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiFormattedText, ApiUser, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  CHAT_LIST_LOAD_SLICE, DEBUG, MESSAGE_LIST_SLICE,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  replaceChatListIds,\n  replaceChats,\n  replaceUsers,\n  updateUsers,\n  updateChats,\n  updateChatListSecondaryInfo,\n  updateThreadInfos,\n  replaceThreadParam,\n} from '../../reducers';\nimport {\n  selectUser, selectChat, selectCurrentMessageList, selectDraft, selectChatMessage,\n} from '../../selectors';\nimport { isChatPrivate } from '../../helpers';\n\naddReducer('sync', (global, actions) => {\n  void sync(actions.afterSync);\n});\n\naddReducer('afterSync', (global, actions) => {\n  void afterSync(actions);\n});\n\nasync function sync(afterSyncCallback: () => void) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  await callApi('fetchCurrentUser');\n\n  // This fetches only active chats and clears archived chats, which will be fetched in `afterSync`\n  const savedUsers = await loadAndReplaceChats();\n  await loadAndReplaceMessages(savedUsers);\n\n  setGlobal({\n    ...getGlobal(),\n    lastSyncTime: Date.now(),\n  });\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH SYNC');\n  }\n\n  afterSyncCallback();\n}\n\nasync function afterSync(actions: GlobalActions) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START AFTER-SYNC');\n  }\n\n  actions.loadFavoriteStickers();\n\n  await Promise.all([\n    loadAndUpdateUsers(),\n    loadAndReplaceArchivedChats(),\n  ]);\n\n  await callApi('fetchCurrentUser');\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH AFTER-SYNC');\n  }\n}\n\nasync function loadAndReplaceChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    withPinned: true,\n  });\n  if (!result) {\n    return undefined;\n  }\n\n  let global = getGlobal();\n\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  const { currentUserId } = global;\n\n  const savedPrivateChatIds = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n    ...(currentUserId ? [currentUserId] : []),\n  ];\n\n  const savedUsers = savedPrivateChatIds\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  const savedChats = savedPrivateChatIds\n    .map((id) => selectChat(global, id))\n    .filter<ApiChat>(Boolean as any);\n\n  const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n  if (currentChatId) {\n    const selectedChat = selectChat(global, currentChatId);\n    if (selectedChat && !savedPrivateChatIds.includes(currentChatId)) {\n      savedChats.push(selectedChat);\n    }\n\n    if (isChatPrivate(currentChatId)) {\n      const selectedChatUser = selectUser(global, currentChatId);\n      if (selectedChatUser && !savedPrivateChatIds.includes(currentChatId)) {\n        savedUsers.push(selectedChatUser);\n      }\n    }\n  }\n\n  savedUsers.push(...result.users);\n  savedChats.push(...result.chats);\n\n  global = replaceChats(global, buildCollectionByKey(savedChats, 'id'));\n  global = replaceChatListIds(global, 'active', result.chatIds);\n\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n    },\n  };\n\n  global = updateChatListSecondaryInfo(global, 'active', result);\n\n  Object.keys(result.draftsById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId],\n    );\n  });\n\n  Object.keys(result.replyingToById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  setGlobal(global);\n\n  if (currentChatId && !global.chats.byId[currentChatId]) {\n    getDispatch().openChat({ id: undefined });\n  }\n\n  return savedUsers;\n}\n\nasync function loadAndReplaceArchivedChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    archived: true,\n    withPinned: true,\n  });\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = replaceChatListIds(global, 'archived', result.chatIds);\n  global = updateChatListSecondaryInfo(global, 'archived', result);\n  setGlobal(global);\n}\n\nasync function loadAndReplaceMessages(savedUsers?: ApiUser[]) {\n  let areMessagesLoaded = false;\n  let users = savedUsers || [];\n\n  let global = getGlobal();\n  const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId).map(Number);\n  const draftsByChatId = draftChatIds.reduce<Record<number, ApiFormattedText>>((acc, chatId) => {\n    const draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    return draft ? { ...acc, [chatId]: draft } : acc;\n  }, {});\n\n  if (currentChatId) {\n    const result = await loadTopMessages(global.chats.byId[currentChatId]);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const byId = buildCollectionByKey(result.messages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {\n            [currentChatId]: {\n              byId,\n              threadsById: {\n                [MAIN_THREAD_ID]: {\n                  ...(currentMessageListInfo && currentMessageListInfo.threadsById[MAIN_THREAD_ID]),\n                  listedIds,\n                  viewportIds: listedIds,\n                  outlyingIds: undefined,\n                },\n              },\n            },\n          },\n        },\n      };\n\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n      users = Array.prototype.concat(users, result.users);\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', draftsByChatId[chatId]);\n  });\n\n  if (savedUsers) {\n    global = replaceUsers(global, buildCollectionByKey(users, 'id'));\n  } else if (users) {\n    // If `fetchChats` has failed for some reason, we don't have saved chats, thus we can not replace\n    global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getDispatch().closeAudioPlayer();\n  }\n}\n\nasync function loadAndUpdateUsers() {\n  let global = getGlobal();\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  if (\n    (!contactIds || !contactIds.length)\n    && (!recentlyFoundChatIds || !recentlyFoundChatIds.length)\n  ) {\n    return;\n  }\n\n  const users = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n  ].map((id) => selectUser(global, id)).filter<ApiUser>(Boolean as any);\n\n  const updatedUsers = await callApi('fetchUsers', { users });\n  if (!updatedUsers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n  setGlobal(global);\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearchPeerId,\n  selectCurrentMediaSearch, selectCurrentMessageList, selectChat, selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport { SharedMediaType } from '../../../types';\n\naddReducer('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results ? results.nextOffsetId : undefined;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo ? threadInfo.topMessageId : undefined;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddReducer('searchMediaMessagesLocal', (global) => {\n  const peerId = selectCurrentMediaSearchPeerId(global);\n  const chatOrUser = peerId\n    ? global.users.byId[peerId] || global.chats.byId[peerId]\n    : undefined;\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chatOrUser || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults ? currentResults.nextOffsetId : undefined;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chatOrUser, type, offsetId);\n});\n\naddReducer('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chatOrUser: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || (query && query !== currentSearch.query)) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalTextSearchResults(global, chatOrUser.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chatOrUser: ApiChat | ApiUser,\n  type: SharedMediaType,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type,\n    limit: SHARED_MEDIA_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalMediaSearchResults(global, chatOrUser.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\n/**\n * @param timestamp start of target date in seconds\n */\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getDispatch().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateManagement, updateManagementProgress } from '../../reducers';\nimport { selectChat, selectCurrentMessageList } from '../../selectors';\nimport { isChatBasicGroup } from '../../helpers';\n\naddReducer('checkPublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n\n    const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n    global = getGlobal();\n    global = updateManagementProgress(\n      global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n    );\n    global = updateManagement(global, chatId, { isUsernameAvailable });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    setGlobal(global);\n\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    const result = await callApi('setChatUsername', { chat, username });\n\n    global = getGlobal();\n    global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { debounce } from '../../../util/schedulers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { isChatPrivate } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectUser } from '../../selectors';\nimport {\n  addChats, addUsers, updateChat, updateManagementProgress, updateUser, updateUsers,\n} from '../../reducers';\n\nconst runDebouncedForFetchFullUser = debounce((cb) => cb(), 500, false, true);\nconst TOP_PEERS_REQUEST_COOLDOWN = 60000; // 1 min\n\naddReducer('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  runDebouncedForFetchFullUser(() => callApi('fetchFullUser', { id, accessHash }));\n});\n\naddReducer('loadUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  (async () => {\n    const updatedUsers = await callApi('fetchUsers', { users: [user] });\n    if (!updatedUsers) {\n      return;\n    }\n\n    global = getGlobal();\n    global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n    setGlobal(global);\n  })();\n});\n\naddReducer('loadTopUsers', (global) => {\n  const { hash, lastRequestedAt } = global.topPeers;\n\n  if (!lastRequestedAt || Date.now() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers(hash);\n  }\n});\n\naddReducer('loadContactList', (global) => {\n  const { hash } = global.contactList || {};\n  void loadContactList(hash);\n});\n\naddReducer('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddReducer('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted, firstName, lastName,\n  } = payload!;\n\n  void updateContact(userId, isMuted, firstName, lastName);\n});\n\naddReducer('deleteUser', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteUser(userId);\n});\n\nasync function loadTopUsers(usersHash?: number) {\n  const result = await callApi('fetchTopUsers', { hash: usersHash });\n  if (!result) {\n    return;\n  }\n\n  const { hash, ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      hash,\n      userIds: ids,\n      lastRequestedAt: Date.now(),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList(hash?: number) {\n  const contactList = await callApi('fetchContactList', { hash });\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      hash: contactList.hash,\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: number,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getDispatch().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  const result = await callApi('updateContact', { phone: user.phoneNumber, firstName, lastName });\n\n  if (result) {\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n}\n\nasync function deleteUser(userId: number) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteUser', { id, accessHash });\n}\n\naddReducer('loadProfilePhotos', (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isChatPrivate(profileId);\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n\n  (async () => {\n    const result = await callApi('fetchProfilePhotos', user, chat);\n    if (!result || !result.photos) {\n      return;\n    }\n\n    let newGlobal = getGlobal();\n    if (isPrivate) {\n      newGlobal = updateUser(newGlobal, profileId, { photos: result.photos });\n    } else {\n      newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users!, 'id'));\n      newGlobal = updateChat(newGlobal, profileId, { photos: result.photos });\n    }\n\n    setGlobal(newGlobal);\n  })();\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport {\n  ApiPrivacyKey, PrivacyVisibility, ProfileEditProgress, IInputPrivacyRules, IInputPrivacyContact,\n  UPLOADING_WALLPAPER_SLUG,\n} from '../../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { selectUser } from '../../selectors';\nimport {\n  addUsers, addBlockedContact, updateChats, updateUser, removeBlockedContact, replaceSettings, updateNotifySettings,\n} from '../../reducers';\nimport { isChatPrivate } from '../../helpers';\n\naddReducer('updateProfile', (global, actions, payload) => {\n  const {\n    photo, firstName, lastName, bio: about, username,\n  } = payload!;\n\n  (async () => {\n    const { currentUserId } = global;\n    if (!currentUserId) {\n      return;\n    }\n\n    setGlobal({\n      ...getGlobal(),\n      profileEdit: {\n        progress: ProfileEditProgress.InProgress,\n      },\n    });\n\n    if (photo) {\n      await callApi('updateProfilePhoto', photo);\n    }\n\n    if (firstName || lastName || about) {\n      const result = await callApi('updateProfile', { firstName, lastName, about });\n      if (result) {\n        global = getGlobal();\n        const currentUser = currentUserId && selectUser(global, currentUserId);\n\n        if (currentUser) {\n          setGlobal(updateUser(\n            global,\n            currentUser.id,\n            {\n              firstName,\n              lastName,\n              fullInfo: {\n                ...currentUser.fullInfo,\n                bio: about,\n              },\n            },\n          ));\n        }\n      }\n    }\n\n    if (username) {\n      const result = await callApi('updateUsername', username);\n      if (result && currentUserId) {\n        setGlobal(updateUser(getGlobal(), currentUserId, { username }));\n      }\n    }\n\n    setGlobal({\n      ...getGlobal(),\n      profileEdit: {\n        progress: ProfileEditProgress.Complete,\n      },\n    });\n  })();\n});\n\naddReducer('checkUsername', (global, actions, payload) => {\n  const { username } = payload!;\n\n  (async () => {\n    // No need to check the username if profile update is already in progress\n    if (global.profileEdit && global.profileEdit.progress === ProfileEditProgress.InProgress) {\n      return;\n    }\n\n    setGlobal({\n      ...global,\n      profileEdit: {\n        progress: global.profileEdit ? global.profileEdit.progress : ProfileEditProgress.Idle,\n        isUsernameAvailable: undefined,\n      },\n    });\n\n    const isUsernameAvailable = await callApi('checkUsername', username);\n\n    global = getGlobal();\n    setGlobal({\n      ...global,\n      profileEdit: {\n        ...global.profileEdit!,\n        isUsernameAvailable,\n      },\n    });\n  })();\n});\n\naddReducer('loadWallpapers', () => {\n  (async () => {\n    const result = await callApi('fetchWallpapers', 0);\n    if (!result) {\n      return;\n    }\n\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      settings: {\n        ...global.settings,\n        loadedWallpapers: result.wallpapers,\n      },\n    });\n  })();\n});\n\naddReducer('uploadWallpaper', (global, actions, payload) => {\n  const file = payload;\n  const previewBlobUrl = URL.createObjectURL(file);\n\n  setGlobal({\n    ...global,\n    settings: {\n      ...global.settings,\n      loadedWallpapers: [\n        {\n          slug: UPLOADING_WALLPAPER_SLUG,\n          document: {\n            fileName: '',\n            size: file.size,\n            mimeType: file.type,\n            previewBlobUrl,\n          },\n        },\n        ...(global.settings.loadedWallpapers || []),\n      ],\n    },\n  });\n\n  (async () => {\n    const result = await callApi('uploadWallpaper', file);\n    if (!result) {\n      return;\n    }\n\n    const { wallpaper } = result;\n\n    global = getGlobal();\n    if (!global.settings.loadedWallpapers) {\n      return;\n    }\n\n    const firstWallpaper = global.settings.loadedWallpapers[0];\n    if (!firstWallpaper || firstWallpaper.slug !== UPLOADING_WALLPAPER_SLUG) {\n      return;\n    }\n\n    const withLocalMedia = {\n      ...wallpaper,\n      document: {\n        ...wallpaper.document,\n        previewBlobUrl,\n      },\n    };\n\n    setGlobal({\n      ...global,\n      settings: {\n        ...global.settings,\n        loadedWallpapers: [\n          withLocalMedia,\n          ...global.settings.loadedWallpapers.slice(1),\n        ],\n      },\n    });\n  })();\n});\n\naddReducer('loadBlockedContacts', () => {\n  (async () => {\n    const result = await callApi('fetchBlockedContacts');\n\n    if (!result) {\n      return;\n    }\n\n    let newGlobal = getGlobal();\n\n    if (result.users && result.users.length) {\n      newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users, 'id'));\n    }\n    if (result.chats && result.chats.length) {\n      newGlobal = updateChats(newGlobal, buildCollectionByKey(result.chats, 'id'));\n    }\n\n    newGlobal = {\n      ...newGlobal,\n      blocked: {\n        ...newGlobal.blocked,\n        ids: [...(newGlobal.blocked.ids || []), ...result.blockedIds],\n        totalCount: result.totalCount,\n      },\n    };\n\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('blockContact', (global, actions, payload) => {\n  const { contactId } = payload!;\n\n  (async () => {\n    const result = await callApi('blockContact', contactId);\n    if (!result) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal(addBlockedContact(newGlobal, contactId));\n  })();\n});\n\naddReducer('unblockContact', (global, actions, payload) => {\n  const { contactId } = payload!;\n  let accessHash: string | undefined;\n  const isPrivate = isChatPrivate(contactId);\n\n  if (isPrivate) {\n    const user = selectUser(global, contactId);\n    if (!user) {\n      return;\n    }\n\n    accessHash = user.accessHash;\n  }\n\n  (async () => {\n    const result = await callApi('unblockContact', contactId, accessHash);\n    if (!result) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal(removeBlockedContact(newGlobal, contactId));\n  })();\n});\n\naddReducer('loadAuthorizations', () => {\n  (async () => {\n    const result = await callApi('fetchAuthorizations');\n    if (!result) {\n      return;\n    }\n\n    setGlobal({\n      ...getGlobal(),\n      activeSessions: result,\n    });\n  })();\n});\n\naddReducer('terminateAuthorization', (global, actions, payload) => {\n  const { hash } = payload!;\n\n  (async () => {\n    const result = await callApi('terminateAuthorization', hash);\n    if (!result) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal({\n      ...newGlobal,\n      activeSessions: newGlobal.activeSessions.filter((session) => session.hash !== hash),\n    });\n  })();\n});\n\naddReducer('terminateAllAuthorizations', () => {\n  (async () => {\n    const result = await callApi('terminateAllAuthorizations');\n    if (!result) {\n      return;\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      activeSessions: global.activeSessions.filter((session) => session.isCurrent),\n    });\n  })();\n});\n\naddReducer('loadNotificationExceptions', () => {\n  callApi('fetchNotificationExceptions');\n});\n\naddReducer('loadNotificationSettings', () => {\n  (async () => {\n    const result = await callApi('fetchNotificationSettings');\n    if (!result) {\n      return;\n    }\n\n    setGlobal(replaceSettings(getGlobal(), result));\n  })();\n});\n\naddReducer('updateNotificationSettings', (global, actions, payload) => {\n  const { peerType, isSilent, shouldShowPreviews } = payload!;\n\n  (async () => {\n    const result = await callApi('updateNotificationSettings', peerType, { isSilent, shouldShowPreviews });\n\n    if (!result) {\n      return;\n    }\n\n    setGlobal(updateNotifySettings(getGlobal(), peerType, isSilent, shouldShowPreviews));\n  })();\n});\n\naddReducer('updateContactSignUpNotification', (global, actions, payload) => {\n  const { isSilent } = payload!;\n\n  (async () => {\n    const result = await callApi('updateContactSignUpNotification', isSilent);\n    if (!result) {\n      return;\n    }\n\n    setGlobal(replaceSettings(getGlobal(), { hasContactJoinedNotifications: !isSilent }));\n  })();\n});\n\naddReducer('loadLanguages', () => {\n  (async () => {\n    const result = await callApi('fetchLanguages');\n    if (!result) {\n      return;\n    }\n\n    setGlobal(replaceSettings(getGlobal(), { languages: result }));\n  })();\n});\n\naddReducer('loadPrivacySettings', () => {\n  (async () => {\n    const [\n      phoneNumberSettings, lastSeenSettings, profilePhotoSettings, forwardsSettings, chatInviteSettings,\n    ] = await Promise.all([\n      callApi('fetchPrivacySettings', 'phoneNumber'),\n      callApi('fetchPrivacySettings', 'lastSeen'),\n      callApi('fetchPrivacySettings', 'profilePhoto'),\n      callApi('fetchPrivacySettings', 'forwards'),\n      callApi('fetchPrivacySettings', 'chatInvite'),\n    ]);\n\n    if (\n      !phoneNumberSettings || !lastSeenSettings || !profilePhotoSettings || !forwardsSettings || !chatInviteSettings\n    ) {\n      return;\n    }\n\n    const global = getGlobal();\n\n    global.settings.privacy.phoneNumber = phoneNumberSettings;\n    global.settings.privacy.lastSeen = lastSeenSettings;\n    global.settings.privacy.profilePhoto = profilePhotoSettings;\n    global.settings.privacy.forwards = forwardsSettings;\n    global.settings.privacy.chatInvite = chatInviteSettings;\n\n    setGlobal(global);\n  })();\n});\n\naddReducer('setPrivacyVisibility', (global, actions, payload) => {\n  const { privacyKey, visibility } = payload!;\n\n  const {\n    privacy: { [privacyKey as ApiPrivacyKey]: settings },\n  } = global.settings;\n\n  if (!settings) {\n    return;\n  }\n\n  const rules = buildInputPrivacyRules(global, {\n    visibility,\n    allowedIds: [...settings.allowUserIds, ...settings.allowChatIds],\n    deniedIds: [...settings.blockUserIds, ...settings.blockChatIds],\n  });\n\n  (async () => {\n    const result = await callApi('setPrivacySettings', privacyKey, rules);\n\n    if (result) {\n      const newGlobal = getGlobal();\n\n      newGlobal.settings.privacy[privacyKey as ApiPrivacyKey] = result;\n\n      setGlobal(newGlobal);\n    }\n  })();\n});\n\naddReducer('setPrivacySettings', (global, actions, payload) => {\n  const { privacyKey, isAllowList, contactsIds } = payload!;\n  const {\n    privacy: { [privacyKey as ApiPrivacyKey]: settings },\n  } = global.settings;\n\n  if (!settings) {\n    return;\n  }\n\n  const rules = buildInputPrivacyRules(global, {\n    visibility: settings.visibility,\n    allowedIds: isAllowList ? contactsIds : [...settings.allowUserIds, ...settings.allowChatIds],\n    deniedIds: !isAllowList ? contactsIds : [...settings.blockUserIds, ...settings.blockChatIds],\n  });\n\n  (async () => {\n    const result = await callApi('setPrivacySettings', privacyKey, rules);\n\n    if (result) {\n      const newGlobal = getGlobal();\n\n      newGlobal.settings.privacy[privacyKey as ApiPrivacyKey] = result;\n\n      setGlobal(newGlobal);\n    }\n  })();\n});\n\nfunction buildInputPrivacyRules(global: GlobalState, {\n  visibility,\n  allowedIds,\n  deniedIds,\n}: {\n  visibility: PrivacyVisibility;\n  allowedIds: number[];\n  deniedIds: number[];\n}): IInputPrivacyRules {\n  const {\n    users: { byId: usersById },\n    chats: { byId: chatsById },\n  } = global;\n\n  const rules: IInputPrivacyRules = {\n    visibility,\n  };\n  let users: IInputPrivacyContact[];\n  let chats: IInputPrivacyContact[];\n\n  const collectUsers = (userId: number) => {\n    if (!isChatPrivate(userId)) {\n      return undefined;\n    }\n    const { id, accessHash } = usersById[userId] || {};\n    if (!id) {\n      return undefined;\n    }\n\n    return { id, accessHash };\n  };\n\n  const collectChats = (userId: number) => {\n    if (isChatPrivate(userId)) {\n      return undefined;\n    }\n    const chat = chatsById[userId];\n\n    return chat ? { id: chat.id } : undefined;\n  };\n\n  if (visibility === 'contacts' || visibility === 'nobody') {\n    users = allowedIds.map(collectUsers).filter(Boolean) as IInputPrivacyContact[];\n    chats = allowedIds.map(collectChats).filter(Boolean) as IInputPrivacyContact[];\n\n    if (users.length > 0) {\n      rules.allowedUsers = users;\n    }\n    if (chats.length > 0) {\n      rules.allowedChats = chats;\n    }\n  }\n\n  if (visibility === 'everybody' || visibility === 'contacts') {\n    users = deniedIds.map(collectUsers).filter(Boolean) as IInputPrivacyContact[];\n    chats = deniedIds.map(collectChats).filter(Boolean) as IInputPrivacyContact[];\n\n    if (users.length > 0) {\n      rules.blockedUsers = users;\n    }\n    if (chats.length > 0) {\n      rules.blockedChats = chats;\n    }\n  }\n\n  return rules;\n}\n","import { addReducer, getDispatch } from '../../../lib/teact/teactn';\n\nimport { ApiChat } from '../../../api/types';\n\nimport { RE_TME_INVITE_LINK, RE_TME_LINK } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChatMessage, selectCurrentChat } from '../../selectors';\n\naddReducer('clickInlineButton', (global, actions, payload) => {\n  const { button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.value });\n      break;\n    case 'url':\n      if (button.value.match(RE_TME_INVITE_LINK) || button.value.match(RE_TME_LINK)) {\n        actions.openTelegramLink({ url: button.value });\n      } else {\n        actions.toggleSafeLinkModal({ url: button.value });\n      }\n      break;\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, button.messageId, button.value);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal();\n      break;\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      const { messageId, value } = button;\n      if (!chat) {\n        return;\n      }\n\n      if (value) {\n        actions.getReceipt({ receiptMessageId: value, chatId: chat.id, messageId });\n      } else {\n        actions.getPaymentForm({ messageId });\n        actions.setInvoiceMessageInfo(selectChatMessage(global, chat.id, messageId));\n        actions.openPaymentModal({ messageId });\n      }\n      break;\n    }\n  }\n});\n\naddReducer('sendBotCommand', (global, actions, payload) => {\n  const { command } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  if (!currentUserId || !chat) {\n    return;\n  }\n\n  void sendBotCommand(chat, currentUserId, command);\n});\n\nasync function sendBotCommand(chat: ApiChat, currentUserId: number, command: string) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n  });\n}\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data: string) {\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n  });\n\n  if (!result || !result.message) {\n    return;\n  }\n\n  const { message, alert: isError } = result;\n\n  if (isError) {\n    getDispatch().showError({ error: { message } });\n  } else {\n    getDispatch().showNotification({ message });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddReducer('loadPasswordInfo', () => {\n  (async () => {\n    const result = await callApi('getPasswordInfo');\n    if (!result) {\n      return;\n    }\n\n    let global = getGlobal();\n    global = replaceSettings(global, { hasPassword: result.hasPassword });\n    global = updateTwoFaSettings(global, { hint: result.hint });\n    setGlobal(global);\n  })();\n});\n\naddReducer('checkPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('checkPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('clearPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('clearPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updatePassword', (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updateRecoveryEmail', (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddReducer('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { PaymentStep } from '../../../types/index';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectPaymentMessageId,\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n} from '../../selectors';\n\nimport { getStripeError } from '../../helpers/payments';\nimport { buildQueryString } from '../../../util/requestQuery';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setInvoiceMessageInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n} from '../../reducers';\n\naddReducer('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const messageId = selectPaymentMessageId(global);\n  if (!messageId) {\n    return;\n  }\n  validateRequestedInfo(messageId, requestInfo, saveInfo);\n});\n\nasync function validateRequestedInfo(messageId: number, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', { messageId, requestInfo, shouldSave });\n  if (!result) {\n    return;\n  }\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddReducer('getPaymentForm', (global, actions, payload) => {\n  const { messageId } = payload;\n  if (!messageId) {\n    return;\n  }\n  getPaymentForm(messageId);\n});\n\n\nasync function getPaymentForm(messageId: number) {\n  const result = await callApi('getPaymentForm', { messageId });\n  if (!result) {\n    return;\n  }\n  let global = setPaymentForm(getGlobal(), result);\n  let step = PaymentStep.PaymentInfo;\n  if (global.payment.invoice\n    && (global.payment.invoice.shippingAddressRequested\n    || global.payment.invoice.nameRequested\n    || global.payment.invoice.phoneRequested\n    || global.payment.invoice.emailRequested)) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n}\n\naddReducer('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  if (!messageId || !receiptMessageId || !chatId) {\n    return;\n  }\n  getReceipt(messageId, receiptMessageId, chatId);\n});\n\nasync function getReceipt(messageId: number, receiptMessageId: number, chatId: number) {\n  const result = await callApi('getReceipt', receiptMessageId);\n  if (!result) {\n    return;\n  }\n  let global = getGlobal();\n  const message = selectChatMessage(global, chatId, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddReducer('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddReducer('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddReducer('sendCredentialsInfo', (global, actions, payload) => {\n  const publishableKey = selectProviderPublishableKey(global);\n  if (!publishableKey) {\n    return;\n  }\n  const { credentials } = payload;\n  const { data } = credentials;\n  sendStipeCredentials(data, publishableKey);\n});\n\naddReducer('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const messageId = selectPaymentMessageId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const publishableKey = selectProviderPublishableKey(global);\n  const stripeCredentials = selectStripeCredentials(global);\n  if (!messageId || !publishableKey) {\n    return;\n  }\n  sendPaymentForm(messageId, {\n    save: saveCredentials,\n    data: stripeCredentials,\n  }, requestInfoId, shippingOptionId);\n});\n\nasync function sendStipeCredentials(data: {\n  cardNumber: string;\n  cardholder?: string;\n  expiryMonth: string;\n  expiryYear: string;\n  cvv: string;\n  country: string;\n  zip: string;\n},\npublishableKey: string) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  messageId: number,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    messageId, credentials, requestedInfoId, shippingOptionId,\n  });\n  if (result) {\n    const global = clearPayment(getGlobal());\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddReducer('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddReducer('setInvoiceMessageInfo', (global, actions, payload) => {\n  return setInvoiceMessageInfo(global, payload);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { showNewMessageNotification } from '../../../util/notifications';\nimport { updateAppBadge } from '../../../util/appBadge';\nimport {\n  updateChat,\n  replaceChatListIds,\n  updateChatListIds,\n  updateChatListType,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectCountNotMutedUnread,\n} from '../../selectors';\nimport { throttle } from '../../../util/schedulers';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1000;\nconst runThrottledForUpdateAppBadge = throttle((cb) => cb(), CURRENT_CHAT_UNREAD_DELAY, true);\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      const newGlobal = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(newGlobal);\n\n      const unreadCount = selectCountNotMutedUnread(newGlobal);\n      runThrottledForUpdateAppBadge(() => updateAppBadge(unreadCount));\n      break;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n      break;\n    }\n\n    case 'updateChatLeave': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      const { [listType]: listIds } = global.chats.listIds;\n\n      if (listIds) {\n        global = replaceChatListIds(global, listType, listIds.filter((listId) => listId !== update.id));\n      }\n\n      global = updateChat(global, update.id, { isNotJoined: true });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatInbox': {\n      setGlobal(updateChat(global, update.id, update.chat));\n\n      break;\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        const newGlobal = getGlobal();\n        const chat = selectChat(newGlobal, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(newGlobal, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      break;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        setGlobal(updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n          ...(update.message.hasUnreadMention && {\n            unreadMentionsCount: chat.unreadMentionsCount ? chat.unreadMentionsCount + 1 : 1,\n          }),\n        }));\n      }\n\n      const unreadCount = selectCountNotMutedUnread(getGlobal());\n      updateAppBadge(unreadCount);\n      showNewMessageNotification({ chat, message, isActiveChat });\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return;\n      }\n\n      ids.forEach((id) => {\n        const chatId = 'channelId' in update ? update.channelId : selectCommonBoxChatId(global, id);\n        const chat = selectChat(global, chatId);\n        if (chat && chat.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: chat.unreadMentionsCount - 1,\n          });\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return;\n      }\n\n      setGlobal(updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      }));\n\n      break;\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      global = {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (listType) {\n        const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n        let newOrderedPinnedIds = orderedPinnedIds || [];\n        if (!isPinned) {\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n        } else if (!newOrderedPinnedIds.includes(id)) {\n          // When moving pinned chats to archive, active ordered pinned ids don't get updated\n          // (to preserve chat pinned state when it returns from archive)\n          // If user already has max pinned chats, we should check for orderedIds\n          // that don't point to listed chats\n          if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n            const listIds = global.chats.listIds.active;\n            newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n          }\n\n          newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n        }\n\n        global = {\n          ...global,\n          chats: {\n            ...global.chats,\n            orderedPinnedIds: {\n              ...global.chats.orderedPinnedIds,\n              [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n            },\n          },\n        };\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      setGlobal(updateChatListType(global, id, folderId));\n\n      break;\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo && targetChat.fullInfo.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        setGlobal(updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        }));\n      }\n\n      break;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat && chat.photos) {\n        setGlobal(updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        }));\n      }\n      break;\n    }\n  }\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiUpdate, ApiMessage, ApiPollResult, ApiThreadInfo, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n} from '../../reducers';\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  isMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n} from '../../selectors';\nimport { getMessageContent, isChatPrivate, isMessageLocal } from '../../helpers';\n\nconst ANIMATION_DELAY = 350;\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const { chatId, id, message } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      setGlobal(global);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (isMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (message.isOutgoing && !(message.content && message.content.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!message.isOutgoing) {\n          setTimeout(() => {\n            setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n      }\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isChatPrivate(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const ids = Object.keys(global.messages.byChatId[chatId].byId).map(Number);\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message && message.content.poll) {\n        const updatedPoll = { ...message.content.poll, ...pollUpdate };\n\n        // Workaround for poll update bug: `chosen` option gets reset when someone votes after current user\n        const { results: updatedResults } = updatedPoll.results || {};\n        if (updatedResults && !updatedResults.some(((result) => result.isChosen))) {\n          const { results } = message.content.poll.results;\n          const chosenAnswers = results && results.filter((result) => result.isChosen);\n          if (chosenAnswers) {\n            chosenAnswers.forEach((chosenAnswer) => {\n              const chosenAnswerIndex = updatedResults.findIndex((result) => result.option === chosenAnswer.option);\n              if (chosenAnswerIndex >= 0) {\n                updatedPoll.results.results![chosenAnswerIndex].isChosen = true;\n              }\n            });\n          }\n        }\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOption = newResults.find((result) => result.option === option);\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n  }\n});\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: number, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first uread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const newGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(newGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = newGlobal;\n    }\n  }\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!firstMessageId && isMessageLocal(message)) {\n    return global;\n  }\n\n  if (threadInfo) {\n    global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n    if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n      global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n      if (!firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n      }\n\n      if (!threadInfo.lastMessageId) {\n        global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n          ...threadInfo,\n          lastMessageId: message.id,\n        });\n      }\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: number,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId] && chats.byId[chatId].lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: number) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: number | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    setGlobal(global);\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    unique(threadIdsToUpdate).forEach((threadId) => {\n      actions.requestThreadInfoUpdate({ chatId, threadId });\n    });\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: number[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: number | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, ApiUserStatus } from '../../../api/types';\n\nimport { deleteUser, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: [number, ApiUserStatus][] = [];\n\nfunction scheduleStatusUpdate(userId: number, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates.push([userId, statusUpdate]);\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  let global = getGlobal();\n  pendingStatusUpdates.forEach(([userId, statusUpdate]) => {\n    global = updateUser(global, userId, {\n      status: statusUpdate,\n    });\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = [];\n}\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'deleteUser': {\n      return deleteUser(global, update.id);\n    }\n\n    case 'updateUser': {\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\n\nimport { updateStickerSet } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import {\n  addReducer, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { ApiPrivacyKey } from '../../../types';\n\nimport { addBlockedContact, removeBlockedContact } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          hash: 0,\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updatePrivacy':\n      global.settings.privacy[update.key as ApiPrivacyKey] = update.rules;\n      break;\n  }\n\n  return undefined;\n});\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        id, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[id];\n\n      if (chat) {\n        global = updateChat(global, id, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, id, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { ChangeEvent } from 'react';\nimport React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport './Switcher.scss';\n\ntype OwnProps = {\n  id?: string;\n  name?: string;\n  value?: string;\n  label: string;\n  checked?: boolean;\n  disabled?: boolean;\n  inactive?: boolean;\n  noAnimation?: boolean;\n  onChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n  onCheck?: (isChecked: boolean) => void;\n};\n\nconst Switcher: FC<OwnProps> = ({\n  id,\n  name,\n  value,\n  label,\n  checked = false,\n  disabled,\n  inactive,\n  noAnimation,\n  onChange,\n  onCheck,\n}) => {\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (onChange) {\n      onChange(e);\n    }\n\n    if (onCheck) {\n      onCheck(e.currentTarget.checked);\n    }\n  }, [onChange, onCheck]);\n\n  const className = buildClassName(\n    'Switcher',\n    disabled && 'disabled',\n    inactive && 'inactive',\n    noAnimation && 'no-animation',\n  );\n\n  return (\n    <label className={className} title={label}>\n      <input\n        type=\"checkbox\"\n        id={id}\n        name={name}\n        value={value}\n        checked={checked}\n        disabled={disabled}\n        onChange={handleChange}\n      />\n      <span className=\"widget\" />\n    </label>\n  );\n};\n\nexport default memo(Switcher);\n","import React, {\n  FC, useCallback, useMemo, memo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LeftColumnContent, ISettings } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport { APP_NAME, APP_VERSION, FEEDBACK_URL } from '../../../config';\nimport { IS_MOBILE_SCREEN } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport { isChatArchived } from '../../../modules/helpers';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n  onOpenMenu: NoneToVoidFunction;\n  onCloseMenu: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  searchQuery?: string;\n  isLoading: boolean;\n  currentUserId?: number;\n  globalSearchChatId?: number;\n  searchDate?: number;\n  theme: ISettings['theme'];\n  animationLevel: 0 | 1 | 2;\n  chatsById?: Record<number, ApiChat>;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'openTipsChat' | 'setGlobalSearchDate' | 'setGlobalSearchChatId' | 'setSettingOption'\n)>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\nconst MENU_ANIMATION_DURATION = 300;\n\nconst LEGACY_VERSION = 'https://web.telegram.org/';\nconst WEBK_VERSION = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onOpenMenu,\n  onCloseMenu,\n  setGlobalSearchChatId,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  openChat,\n  openTipsChat,\n  setGlobalSearchDate,\n  setSettingOption,\n}) => {\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_MOBILE_SCREEN}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    switchTheme(newTheme, animationLevel > 0);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const [forceOpenDropdown, setForceOpenDropdown] = useState(false);\n\n  useHistoryBack((event, noAnimation, previousHistoryState) => {\n    if (previousHistoryState && previousHistoryState.type === 'left' && previousHistoryState.isMenuOpen\n      && noAnimation) {\n      setForceOpenDropdown(true);\n      setTimeout(() => setForceOpenDropdown(false), MENU_ANIMATION_DURATION);\n    }\n  });\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${APP_VERSION}`}\n          forceOpen={forceOpenDropdown}\n          onOpen={onOpenMenu}\n          onClose={onCloseMenu}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"animations\"\n            onClick={handleAnimationLevelChange}\n          >\n            <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n            <Switcher\n              id=\"animations\"\n              label=\"Toggle Animations\"\n              checked={animationLevel > 0}\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={openTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          <MenuItem\n            icon=\"char-K\"\n            href={WEBK_VERSION}\n          >\n            Switch to WebK\n          </MenuItem>\n          <MenuItem\n            icon=\"char-W\"\n            href={LEGACY_VERSION}\n          >\n            Switch to Webogram\n          </MenuItem>\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId } = global;\n    const { byId: chatsById } = global.chats;\n    const { theme, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme,\n      animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n    'openTipsChat',\n    'setGlobalSearchDate',\n    'setGlobalSearchChatId',\n    'setSettingOption',\n  ]),\n)(LeftMainHeader));\n","import React, { FC } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalState } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\n\nimport './ConnectionState.scss';\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst ConnectionState: FC<StateProps> = ({ connectionState }) => {\n  const lang = useLang();\n\n  const isConnecting = connectionState === 'connectionStateConnecting';\n\n  return isConnecting && (\n    <div id=\"ConnectionState\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">{lang('WaitingForNetwork')}</div>\n    </div>\n  );\n};\n\nexport default withGlobal(\n  (global): StateProps => pick(global, ['connectionState']),\n)(ConnectionState);\n","import { useRef } from '../lib/teact/teact';\n\nimport useThrottle from './useThrottle';\nimport useOnChange from './useOnChange';\nimport useForceUpdate from './useForceUpdate';\n\nexport default <R extends any, D extends any[]>(resolverFn: () => R, ms: number, dependencies: D) => {\n  const valueRef = useRef<R>();\n  const runThrottled = useThrottle(ms);\n  const forceUpdate = useForceUpdate();\n\n  useOnChange(() => {\n    let isSync = true;\n    runThrottled(() => {\n      valueRef.current = resolverFn();\n\n      if (!isSync) {\n        forceUpdate();\n      }\n    });\n    isSync = false;\n  }, dependencies);\n\n  return valueRef.current;\n};\n","import { useMemo } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\n\nexport default (ms: number) => {\n  return useMemo(() => {\n    return throttle((cb) => cb(), ms);\n  }, [ms]);\n};\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatFolder, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { NotifyException, NotifySettings } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { buildCollectionByKey, pick } from '../../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { getFolderUnreadDialogs } from '../../../modules/helpers';\nimport { selectNotifyExceptions, selectNotifySettings } from '../../../modules/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport useThrottledMemo from '../../../hooks/useThrottledMemo';\nimport useLang from '../../../hooks/useLang';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  chatFoldersById: Record<number, ApiChatFolder>;\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: number;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadChatFolders' | 'setActiveChatFolder' | 'openChat'>;\n\nconst INFO_THROTTLE = 3000;\nconst SAVED_MESSAGES_HOTKEY = '0';\n\nconst ChatFolders: FC<StateProps & DispatchProps> = ({\n  chatsById,\n  usersById,\n  chatFoldersById,\n  notifySettings,\n  notifyExceptions,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  loadChatFolders,\n  setActiveChatFolder,\n  openChat,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => chatFoldersById[id] || {}).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, orderedFolderIds]);\n\n  const folderCountersById = useThrottledMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    const chatIds = Object.keys(chatsById).map(Number);\n    const counters = displayedFolders.map((folder) => {\n      const {\n        unreadDialogsCount, hasActiveDialogs,\n      } = getFolderUnreadDialogs(chatsById, usersById, folder, chatIds, notifySettings, notifyExceptions) || {};\n\n      return {\n        id: folder.id,\n        badgeCount: unreadDialogsCount,\n        isBadgeActive: hasActiveDialogs,\n      };\n    });\n\n    return buildCollectionByKey(counters, 'id');\n  }, INFO_THROTTLE, [displayedFolders, chatsById, usersById, notifySettings, notifyExceptions]);\n\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return [\n      { title: lang('FilterAllChats') },\n      ...displayedFolders.map((folder) => ({\n        title: folder.title,\n        ...(folderCountersById && folderCountersById[folder.id]),\n      })),\n    ];\n  }, [displayedFolders, folderCountersById, lang]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index);\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(0);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1));\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1));\n        }\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInAllTabRef = useRef();\n  isNotInAllTabRef.current = activeChatFolder !== 0;\n  useEffect(() => (isNotInAllTabRef.current ? captureEscKeyListener(() => {\n    if (isNotInAllTabRef.current) {\n      setActiveChatFolder(0);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.metaKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder);\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  });\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ title }) => title === folderTabs![activeChatFolder].title);\n\n    if (!activeFolder || activeChatFolder === 0) {\n      return <ChatList folderType=\"all\" isActive={isActive} />;\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        noChatsText={lang('FilterNoChatsToDisplay')}\n        isActive={isActive}\n      />\n    );\n  }\n\n  return (\n    <div className=\"ChatFolders\">\n      {folderTabs && folderTabs.length ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={lang.isRtl ? 'slide-reversed' : 'slide'}\n        activeKey={activeChatFolder}\n        renderCount={folderTabs ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chats: { byId: chatsById },\n      users: { byId: usersById },\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n    } = global;\n\n    return {\n      chatsById,\n      usersById,\n      chatFoldersById,\n      orderedFolderIds,\n      lastSyncTime,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n      activeChatFolder,\n      currentUserId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadChatFolders',\n    'setActiveChatFolder',\n    'openChat',\n  ]),\n)(ChatFolders));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import React, {\n  FC, useCallback, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\nconst MENU_CLOSE_DELAY_MS = 750;\nlet closeTimeout: number | undefined;\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const handleClose = () => {\n    setIsMenuOpen(false);\n  };\n\n  const handleMouseEnter = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n  }, []);\n\n  const handleMouseLeave = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      setIsMenuOpen(false);\n    }, MENU_CLOSE_DELAY_MS);\n  }, []);\n\n  return (\n    <div\n      className={fabClassName}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import React, {\n  FC, memo, useState, useRef, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ConnectionState from '../ConnectionState';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n  onOpenMenu: NoneToVoidFunction;\n  onCloseMenu: NoneToVoidFunction;\n};\n\ntype StateProps = {};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps & StateProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  onSearchQuery,\n  onContentChange,\n  onReset,\n  onOpenMenu,\n  onCloseMenu,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const isMouseInside = useRef(false);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onOpenMenu={onOpenMenu}\n        onCloseMenu={onCloseMenu}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <ConnectionState />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useFlag from '../../hooks/useFlag';\n\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\n\nimport Transition, { ANIMATION_DURATION } from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\nimport { HistoryWrapper } from '../../util/history';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  activeChatFolder: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setGlobalSearchQuery' | 'setGlobalSearchChatId' | 'resetChatCreation' | 'setGlobalSearchDate' |\n  'loadPasswordInfo' | 'clearTwoFaError'\n)>;\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps & DispatchProps> = ({\n  searchQuery,\n  searchDate,\n  activeChatFolder,\n  setGlobalSearchQuery,\n  setGlobalSearchChatId,\n  resetChatCreation,\n  setGlobalSearchDate,\n  loadPasswordInfo,\n  clearTwoFaError,\n}) => {\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n\n  const setContentWithHistory = useCallback((contentKey: LeftColumnContent) => {\n    if (contentKey !== LeftColumnContent.ChatList\n      && contentKey !== LeftColumnContent.NewChannelStep2\n      && contentKey !== LeftColumnContent.NewGroupStep2) {\n      HistoryWrapper.pushState({\n        type: 'left',\n        contentKey,\n        isMenuOpen,\n      });\n    }\n    setContent(contentKey);\n  }, [isMenuOpen]);\n\n  const setSettingsScreenWithHistory = useCallback((screen: SettingsScreens, noPushState = false) => {\n    setSettingsScreen(screen);\n    if (!noPushState) {\n      HistoryWrapper.pushState({\n        type: 'left',\n        contentKey: LeftColumnContent.Settings,\n        screen,\n        isMenuOpen,\n      });\n    }\n  }, [isMenuOpen]);\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: boolean, noPushState = false) => {\n    if (\n      content === LeftColumnContent.NewGroupStep2\n      && !forceReturnToChatList\n    ) {\n      if (!noPushState) HistoryWrapper.back();\n      setContentWithHistory(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      if (!noPushState) {\n        HistoryWrapper.back();\n      }\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Language:\n          setSettingsScreenWithHistory(SettingsScreens.Main, noPushState);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreenWithHistory(SettingsScreens.General, noPushState);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreenWithHistory(SettingsScreens.GeneralChatBackground, noPushState);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyActiveSessions:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n          setSettingsScreenWithHistory(SettingsScreens.Privacy, noPushState);\n          return;\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreenWithHistory(SettingsScreens.PrivacyPhoneNumber, noPushState);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreenWithHistory(SettingsScreens.PrivacyLastSeen, noPushState);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreenWithHistory(SettingsScreens.PrivacyProfilePhoto, noPushState);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreenWithHistory(SettingsScreens.PrivacyForwarding, noPushState);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreenWithHistory(SettingsScreens.PrivacyGroupChats, noPushState);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreenWithHistory(SettingsScreens.TwoFaDisabled, noPushState);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreenWithHistory(SettingsScreens.TwoFaNewPassword, noPushState);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreenWithHistory(SettingsScreens.TwoFaNewPasswordConfirm, noPushState);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreenWithHistory(SettingsScreens.TwoFaNewPasswordHint, noPushState);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreenWithHistory(SettingsScreens.TwoFaNewPasswordEmail, noPushState);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreenWithHistory(SettingsScreens.TwoFaEnabled, noPushState);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreenWithHistory(SettingsScreens.TwoFaChangePasswordCurrent, noPushState);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreenWithHistory(SettingsScreens.TwoFaChangePasswordNew, noPushState);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreenWithHistory(SettingsScreens.TwoFaChangePasswordConfirm, noPushState);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreenWithHistory(SettingsScreens.TwoFaRecoveryEmailCurrentPassword, noPushState);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreenWithHistory(SettingsScreens.TwoFaRecoveryEmail, noPushState);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreenWithHistory(SettingsScreens.Folders, noPushState);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (!noPushState) {\n      HistoryWrapper.back();\n    }\n\n    if (content === LeftColumnContent.ChatList && activeChatFolder === 0) {\n      setContentWithHistory(LeftColumnContent.GlobalSearch);\n      return;\n    }\n\n    setContentWithHistory(LeftColumnContent.ChatList);\n    setContactsFilter('');\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchDate({ date: undefined });\n    setGlobalSearchChatId({ id: undefined });\n    resetChatCreation();\n    setTimeout(() => {\n      setLastResetTime(Date.now());\n    }, RESET_TRANSITION_DELAY_MS);\n  }, [\n    content, activeChatFolder, setContentWithHistory, settingsScreen, setSettingsScreenWithHistory,\n    setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId, resetChatCreation,\n  ]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(false);\n  useHistoryBack((event, noAnimation, previousHistoryState) => {\n    if (previousHistoryState && previousHistoryState.type === 'left') {\n      if (noAnimation) {\n        setShouldSkipTransition(true);\n        setTimeout(() => {\n          setShouldSkipTransition(false);\n        }, ANIMATION_DURATION[IS_MOBILE_SCREEN ? 'slide-layers' : 'push-slide']);\n      }\n      handleReset(false, true);\n    }\n  });\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContentWithHistory(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, setContentWithHistory, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || activeChatFolder === 0\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [activeChatFolder, content, handleReset],\n  );\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  return (\n    <Transition\n      id=\"LeftColumn\"\n      name={shouldSkipTransition ? 'none' : IS_MOBILE_SCREEN ? 'slide-layers' : 'push-slide'}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n    >\n      {(isActive) => {\n        switch (contentType) {\n          case ContentType.Archived:\n            return (\n              <ArchivedChats\n                isActive={isActive}\n                onReset={handleReset}\n              />\n            );\n          case ContentType.Settings:\n            return (\n              <Settings\n                currentScreen={settingsScreen}\n                onScreenSelect={setSettingsScreenWithHistory}\n                onReset={handleReset}\n                shouldSkipTransition={shouldSkipTransition}\n              />\n            );\n          case ContentType.NewChannel:\n            return (\n              <NewChat\n                key={lastResetTime}\n                isChannel\n                content={content}\n                onContentChange={setContentWithHistory}\n                onReset={handleReset}\n              />\n            );\n          case ContentType.NewGroup:\n            return (\n              <NewChat\n                key={lastResetTime}\n                content={content}\n                onContentChange={setContentWithHistory}\n                onReset={handleReset}\n              />\n            );\n          default:\n            return (\n              <LeftMain\n                content={content}\n                searchQuery={searchQuery}\n                searchDate={searchDate}\n                contactsFilter={contactsFilter}\n                onContentChange={setContentWithHistory}\n                onSearchQuery={handleSearchQuery}\n                onReset={handleReset}\n                shouldSkipTransition={shouldSkipTransition}\n                onOpenMenu={openMenu}\n                onCloseMenu={closeMenu}\n              />\n            );\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n    } = global;\n    return { searchQuery: query, searchDate: date, activeChatFolder };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setGlobalSearchQuery', 'setGlobalSearchChatId', 'resetChatCreation', 'setGlobalSearchDate',\n    'loadPasswordInfo', 'clearTwoFaError',\n  ]),\n)(LeftColumn));\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { IDimensions } from '../modules/helpers';\n\nimport { throttle } from '../util/schedulers';\nimport windowSize from '../util/windowSize';\n\nconst THROTTLE = 250;\n\nexport default () => {\n  const [size, setSize] = useState<IDimensions>(windowSize.get());\n\n  useEffect(() => {\n    const handleResize = throttle(() => {\n      setSize(windowSize.get());\n    }, THROTTLE, false);\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return size;\n};\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nconst SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nconst MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import React, {\n  FC,\n  memo,\n  useRef,\n  useCallback,\n  useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport { pick } from '../../util/iteratees';\nimport { isChatChannel, isChatSuperGroup } from '../../modules/helpers';\nimport {\n  selectChat,\n  selectIsChatBotNotStarted, selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canMute?: boolean;\n  canSelect?: boolean;\n  canLeave?: boolean;\n}\n\ntype DispatchProps = Pick<GlobalActions, 'joinChannel' | 'sendBotCommand' | 'openLocalTextSearch'>;\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canSubscribe,\n  canSearch,\n  canMute,\n  canSelect,\n  canLeave,\n  isRightColumnShown,\n  joinChannel,\n  sendBotCommand,\n  openLocalTextSearch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_MOBILE_SCREEN) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_MOBILE_SCREEN && canSubscribe && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleSubscribeClick}\n        >\n          {lang(isChannel ? 'Subscribe' : 'Join Group')}\n        </Button>\n      )}\n      {!IS_MOBILE_SCREEN && canStartBot && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleStartBot}\n        >\n          {lang('Start')}\n        </Button>\n      )}\n      {!IS_MOBILE_SCREEN && canSearch && (\n        <Button\n          round\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleSearchClick}\n          ariaLabel=\"Search in this chat\"\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n      {(IS_MOBILE_SCREEN || !canSubscribe) && (\n        <Button\n          ref={menuButtonRef}\n          className={isMenuOpen ? 'active' : ''}\n          round\n          ripple={!IS_MOBILE_SCREEN}\n          size=\"smaller\"\n          color=\"translucent\"\n          disabled={noMenu}\n          ariaLabel=\"More actions\"\n          onClick={handleHeaderMenuOpen}\n        >\n          <i className=\"icon-more\" />\n        </Button>\n      )}\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          isChannel={isChannel}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canMute={canMute}\n          canSelect={canSelect}\n          canLeave={canLeave}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (chat && chat.isRestricted) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canStartBot = Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && chat && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canSelect = !selectIsInSelectMode(global);\n    const canLeave = isMainThread && !canSubscribe;\n\n    const noMenu = !(\n      (IS_MOBILE_SCREEN && canSubscribe)\n      || (IS_MOBILE_SCREEN && canSearch)\n      || canMute\n      || canSelect\n      || canLeave\n    );\n\n    return {\n      noMenu,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canSubscribe,\n      canSearch,\n      canMute,\n      canSelect,\n      canLeave,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'joinChannel', 'sendBotCommand', 'openLocalTextSearch',\n  ]),\n)(HeaderActions));\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { ApiMessage } from '../api/types';\n\nimport { DEBUG } from '../config';\nimport { isWebpSupported } from '../util/environment';\nimport { EMPTY_IMAGE_DATA_URI, webpToPngBase64 } from '../util/webpToPng';\nimport { getMessageMediaThumbDataUri } from '../modules/helpers';\n\nexport default function useWebpThumbnail(message?: ApiMessage) {\n  const thumbnail = message && getMessageMediaThumbDataUri(message);\n  const { sticker } = (message && message.content) || {};\n  const shouldDecodeThumbnail = thumbnail && sticker && !isWebpSupported() && thumbnail.includes('image/webp');\n  const [thumbnailDecoded, setThumbnailDecoded] = useState(EMPTY_IMAGE_DATA_URI);\n  const messageId = message && message.id;\n\n  useLayoutEffect(() => {\n    if (!shouldDecodeThumbnail) {\n      return;\n    }\n\n    webpToPngBase64(`b64-${messageId}`, thumbnail!)\n      .then(setThumbnailDecoded)\n      .catch((err) => {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(err);\n        }\n      });\n  }, [messageId, shouldDecodeThumbnail, thumbnail]);\n\n  return shouldDecodeThumbnail ? thumbnailDecoded : thumbnail;\n}\n","import React, {\n  FC,\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef && containerRef.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        // @ts-ignore\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          // @ts-ignore\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSummaryText } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport RippleEffect from '../ui/RippleEffect';\nimport buildClassName from '../../util/buildClassName';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const lang = useLang();\n  const mediaThumbnail = useWebpThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = getMessageSummaryText(lang, message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div className=\"HeaderPinnedMessage\" onClick={onClick} dir={lang.isRtl ? 'rtl' : undefined}>\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">{renderText(text)}</p>\n        </div>\n\n        <RippleEffect />\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageAudio, getMessageKey, getMessageMediaHash, getSenderTitle,\n} from '../../modules/helpers';\nimport { selectSender } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusMessage' | 'closeAudioPlayer'>;\n\nconst AudioPlayer: FC<OwnProps & StateProps & DispatchProps> = ({\n  message, className, noUi, sender, focusMessage, closeAudioPlayer,\n}) => {\n  const lang = useLang();\n\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const { playPause, isPlaying } = useAudioPlayer(\n    getMessageKey(message), getMediaDuration(message)!, mediaData, undefined, undefined, true,\n  );\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n  }, [closeAudioPlayer, isPlaying, playPause]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  const audio = getMessageAudio(message);\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        ripple={!IS_MOBILE_SCREEN}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n\n    return { sender };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['focusMessage', 'closeAudioPlayer']),\n)(AudioPlayer);\n","import React, {\n  FC, useCallback, useMemo, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport {\n  ApiMessage,\n  ApiChat,\n  ApiTypingStatus,\n  MAIN_THREAD_ID, ApiUser,\n} from '../../api/types';\nimport { NotifyException, NotifySettings } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  EDITABLE_INPUT_ID,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n} from '../../config';\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport {\n  isChatPrivate,\n  isChatArchived,\n  getMessageKey,\n  getChatTitle,\n  getSenderTitle,\n  selectIsChatMuted,\n} from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectAllowedMessageActions,\n  selectIsRightColumnShown,\n  selectThreadTopMessageId,\n  selectThreadOriginChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectPinnedIds,\n  selectIsChatWithSelf,\n  selectForwardedSender,\n  selectScheduledIds,\n  selectIsInSelectMode,\n  selectIsChatWithBot,\n  selectNotifySettings,\n  selectNotifyExceptions,\n} from '../../modules/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport { pick } from '../../util/iteratees';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  chatsById?: Record<number, ApiChat>;\n  originChatId: number;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  isChatWithBot?: boolean;\n  lastSyncTime?: number;\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChatWithInfo' | 'pinMessage' | 'focusMessage' | 'openChat' | 'loadPinnedMessages' | 'toggleLeftColumn' |\n  'exitMessageSelectMode'\n)>;\n\nconst MiddleHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  chatsById,\n  originChatId,\n  messagesCount,\n  isChatWithSelf,\n  isChatWithBot,\n  lastSyncTime,\n  notifySettings,\n  notifyExceptions,\n  openChatWithInfo,\n  pinMessage,\n  focusMessage,\n  openChat,\n  loadPinnedMessages,\n  toggleLeftColumn,\n  exitMessageSelectMode,\n}) => {\n  const lang = useLang();\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds) ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = windowWidth >= MOBILE_SCREEN_MAX_WIDTH && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const handleBackClick = useCallback(() => {\n    if (IS_MOBILE_SCREEN) {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID);\n      if (messageInput) {\n        messageInput.blur();\n      }\n    }\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread') {\n      if (IS_MOBILE_SCREEN) {\n        openChat({ id: undefined });\n      } else {\n        toggleLeftColumn();\n      }\n\n      return;\n    }\n\n    if (messageListType === 'scheduled' && isSelectModeActive) {\n      exitMessageSelectMode();\n    }\n    openChat({ id: originChatId, threadId: MAIN_THREAD_ID });\n  }, [openChat, originChatId, threadId, messageListType, toggleLeftColumn, isSelectModeActive, exitMessageSelectMode]);\n\n  const unreadCount = useMemo(() => {\n    if (!isLeftColumnHideable || !chatsById) {\n      return undefined;\n    }\n\n    let isActive = false;\n\n    const totalCount = Object.values(chatsById).reduce((total, currentChat) => {\n      if (isChatArchived(currentChat)) {\n        return total;\n      }\n\n      const count = currentChat.unreadCount || 0;\n      if (\n        count && (!selectIsChatMuted(currentChat, notifySettings, notifyExceptions) || currentChat.unreadMentionsCount)\n      ) {\n        isActive = true;\n      }\n\n      return total + count;\n    }, 0);\n\n    if (!totalCount) {\n      return undefined;\n    }\n\n    return {\n      isActive,\n      totalCount,\n    };\n  }, [isLeftColumnHideable, chatsById, notifySettings, notifyExceptions]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(pinnedMessage && !shouldRenderAudioPlayer);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  function renderInfo() {\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount)}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount)}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount)}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {isLeftColumnHideable && renderBackButton(shouldShowCloseButton, unreadCount)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isChatPrivate(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              withFullInfo={isChatWithBot}\n              withMediaViewer\n              withUpdatingStatus\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              noRtl\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, unreadCountInfo?: typeof unreadCount) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={asClose ? 'Close' : 'Back'}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {unreadCountInfo && (\n          <div className={`unread-count ${unreadCountInfo.isActive ? 'active' : ''}`}>\n            {formatIntegerCompact(unreadCountInfo.totalCount)}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition name=\"slide-fade\" activeKey={messageListType === 'thread' ? threadId : 1}>\n        {renderInfo}\n      </Transition>\n\n      <div className=\"header-tools\">\n        {shouldRenderPinnedMessage && renderingPinnedMessage && !shouldRenderAudioPlayer && (\n          <HeaderPinnedMessage\n            key={chatId}\n            message={renderingPinnedMessage}\n            count={pinnedMessagesCount}\n            index={pinnedMessageIndex}\n            customTitle={renderingPinnedMessageTitle}\n            className={pinnedMessageClassNames}\n            onUnpinMessage={canUnpin ? handleUnpinMessage : undefined}\n            onClick={handlePinnedMessageClick}\n            onAllPinnedClick={handleAllPinnedClick}\n          />\n        )}\n        {shouldRenderAudioPlayer && renderingAudioMessage && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime } = global;\n    const { byId: chatsById } = global.chats;\n    const chat = selectChat(global, chatId);\n\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const originChat = selectThreadOriginChat(global, chatId, threadId);\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds && pinnedIds.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds && scheduledIds.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (threadInfo) {\n        messagesCount = threadInfo.messagesCount;\n      }\n    }\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      chatsById,\n      originChatId: originChat ? originChat.id : chatId,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isChatWithBot: chat && selectIsChatWithBot(global, chat),\n      lastSyncTime,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds && pinnedMessageIds.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChatWithInfo',\n    'pinMessage',\n    'focusMessage',\n    'openChat',\n    'loadPinnedMessages',\n    'toggleLeftColumn',\n    'exitMessageSelectMode',\n  ]),\n)(MiddleHeader));\n","import { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\n\nimport { getDayStart } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../modules/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: Number(getDayStart(messages[0].date * 1000)),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDatetime = Number(getDayStart(nextMessage.date * 1000));\n      if (currentDateGroup.datetime !== nextMessageDatetime) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDatetime,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useDebounce from '../../../hooks/useDebounce';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useDebounce(DEBOUNCE, false);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport { debounce } from '../util/schedulers';\n\nexport default function useDebounce(ms: number, shouldRunFirst?: boolean, shouldRunLast?: boolean) {\n  return useMemo(() => {\n    return debounce((cb) => cb(), ms, shouldRunFirst, shouldRunLast);\n  }, [ms, shouldRunFirst, shouldRunLast]);\n}\n","import { MutableRefObject } from 'react';\nimport React, { FC, useCallback, useRef } from '../../lib/teact/teact';\n\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../config';\nimport resetScroll from '../../util/resetScroll';\nimport { useIntersectionObserver, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useOnChange from '../../hooks/useOnChange';\n\ntype OwnProps = {\n  containerRef: MutableRefObject<HTMLDivElement | null>;\n  className: string;\n  messageIds: number[];\n  focusingId?: number;\n  loadMoreForwards?: NoneToVoidFunction;\n  loadMoreBackwards?: NoneToVoidFunction;\n  isViewportNewest?: boolean;\n  firstUnreadId?: number;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  children: any;\n};\n\nconst FAB_THRESHOLD = 50;\nconst TOOLS_FREEZE_TIMEOUT = 1000;\n\nconst MessageScroll: FC<OwnProps> = ({\n  containerRef,\n  className,\n  messageIds,\n  focusingId,\n  loadMoreForwards,\n  loadMoreBackwards,\n  isViewportNewest,\n  firstUnreadId,\n  onFabToggle,\n  onNotchToggle,\n  children,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useCallback(() => {\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current!;\n    const scrollBottom = scrollHeight - scrollTop - offsetHeight;\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= 0;\n\n    onFabToggle(firstUnreadId ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }, [messageIds, isViewportNewest, containerRef, onFabToggle, firstUnreadId, onNotchToggle]);\n\n  const {\n    observe: observeIntersection,\n    freeze: freezeForLoadMore,\n    unfreeze: unfreezeForLoadMore,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      resetScroll(containerRef.current!);\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      resetScroll(containerRef.current!);\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useOnChange(() => {\n    if (focusingId) {\n      freezeForLoadMore();\n    } else {\n      unfreezeForLoadMore();\n    }\n  }, [focusingId]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return (\n    <div className={className} teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {children}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default MessageScroll;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../modules/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMediaWithNoText = (photo || video) && !text;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (text) {\n    classNames.push('text');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video && video.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (photo || video) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo) {\n      classNames.push('media');\n    }\n  }\n\n  if (asForwarded && !customShape) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../modules/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : MIN_MEDIA_WIDTH;\n}\n\nexport function calculateMediaDimensions(message: ApiMessage) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto)\n    : calculateVideoDimensions(video!, isOwn, isForwarded);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport { IAlbum } from '../../../../types';\nimport { ApiMessage } from '../../../../api/types';\nimport { IDimensions } from '../../../../modules/helpers';\n\nimport { MOBILE_SCREEN_MAX_WIDTH } from '../../../../config';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nconst MAX_WIDTH_MOBILE_VW = 69;\nconst MAX_WIDTH_DESK_OWN_REM = 30;\nconst MAX_WIDTH_DESK_REM = 29;\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: IDimensions;\n};\n\nfunction getMaxWidth(isOwn: boolean, isForwarded: boolean, windowWidth: number) {\n  if (windowWidth <= MOBILE_SCREEN_MAX_WIDTH) {\n    return (windowWidth / 100) * MAX_WIDTH_MOBILE_VW - (isForwarded ? 1.625 : 0) * REM;\n  }\n\n  const maxWidth = isOwn ? MAX_WIDTH_DESK_OWN_REM : MAX_WIDTH_DESK_REM;\n\n  return (maxWidth - (isForwarded ? 1.625 : 0)) * REM;\n}\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as IDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction clamp(num: number, low: number, high: number) {\n  return num < low ? low : (num > high ? high : num);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1)));\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: IDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  album: IAlbum,\n  windowWidth: number,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getMaxWidth(isOwn, isForwarded, windowWidth);\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\n\nexport default function calculateAuthorWidth(text: string) {\n  if (!element) {\n    element = document.createElement('span');\n    element.style.font = '400 12px Roboto, \"Helvetica Neue\", \"Apple Color Emoji\", sans-serif';\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\nimport { FocusDirection } from '../../../../types';\n\n// This is the max scroll offset within existing viewport.\nconst FOCUS_MAX_OFFSET = 1500;\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: number,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'center',\n        FOCUS_MARGIN,\n        focusDirection === undefined ? FOCUS_MAX_OFFSET : RELOCATED_FOCUS_OFFSET,\n        focusDirection,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight]);\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, {\n  FC, memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\nimport { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../modules/selectors';\nimport { isChatChannel } from '../../modules/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { ObserveFn, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  targetUser?: ApiUser;\n  targetMessage?: ApiMessage;\n  targetChatId?: number;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  sender,\n  targetUser,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    sender,\n    targetUser,\n    targetMessage,\n    targetChatId,\n    isEmbedded ? { isEmbedded: true, asPlain: true } : undefined,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{renderText(content as string)}</span>;\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={`message${message.id}`}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const userId = message.senderId;\n    const { targetUserId, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const sender = chat && (isChatChannel(chat) || userId === message.chatId)\n      ? chat\n      : userId ? selectUser(global, userId) : undefined;\n\n    return {\n      sender,\n      ...(targetUserId && { targetUser: selectUser(global, targetUserId) }),\n      targetChatId,\n      targetMessage,\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import React, { FC, useRef } from '../../lib/teact/teact';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getMessageSummaryText,\n  getSenderTitle,\n  getMessageRoundVideo,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const pictogramId = message && `sticker-reply-thumb${message.id}`;\n  const mediaThumbnail = useWebpThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender && getSenderTitle(lang, sender);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('EmbeddedMessage', className)}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(pictogramId, mediaThumbnail, mediaBlobUrl, isRoundVideo)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderText(getMessageSummaryText(lang, message, Boolean(mediaThumbnail)))\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  id: string | undefined,\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img\n      id={id}\n      src={blobUrl || thumbDataUri}\n      width={width}\n      height={height}\n      alt=\"\"\n      className={isRoundVideo ? 'round' : ''}\n    />\n  );\n}\n\nexport default EmbeddedMessage;\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\n\nimport { formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: () => void;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <span className=\"MessageMeta\" dir={lang.isRtl ? 'rtl' : 'ltr'} onClick={onClick}>\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\">\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import React, { FC, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { MEMOJI_STICKER_ID } from '../../../config';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport buildClassName from '../../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useFlag from '../../../hooks/useFlag';\nimport useWebpThumbnail from '../../../hooks/useWebpThumbnail';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\nimport './Sticker.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const sticker = message.content.sticker!;\n  const { isAnimated, stickerSetId } = sticker;\n  const isMemojiSticker = stickerSetId === MEMOJI_STICKER_ID;\n\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const thumbDataUri = useWebpThumbnail(message);\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline', true),\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isAnimated ? isAnimationLoaded : isMediaLoaded;\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(isMediaReady, 'slow');\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n  );\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? openModal : undefined}>\n      {!isMediaReady && (\n        <img\n          id={`sticker-thumb-${message.id}`}\n          src={thumbDataUri}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isAnimated && shouldRenderFullMedia && (\n        <img\n          id={`sticker-${message.id}`}\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isAnimated && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          id={mediaHash}\n          animationData={mediaData as AnyLiteral}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markAnimationLoaded}\n        />\n      )}\n      <StickerSetModal\n        isOpen={isModalOpen}\n        fromSticker={sticker}\n        onClose={closeModal}\n      />\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_MOBILE_SCREEN } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../modules/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, fullMediaData?: string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_MOBILE_SCREEN && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","const SELECTED_APPENDIX_BACKGROUND = 'rgba(255,255,255,1)';\n\nexport default async (src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean) => {\n  return isSelected ? SELECTED_APPENDIX_BACKGROUND : getAppendixColorFromImage(src, isOwn);\n};\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import React, {\n  FC, useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  shouldAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  nonInteractive?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst CUSTOM_APPENDIX_ATTRIBUTE = 'data-has-custom-appendix';\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  shouldAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  nonInteractive,\n  shouldAffectAppendix,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad);\n  const shouldDownload = isDownloadAllowed && isIntersecting;\n  const {\n    mediaData, downloadProgress,\n  } = useMediaWithDownloadProgress(getMessageMediaHash(message, size), !shouldDownload);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbRef = useBlurredMediaThumbRef(message, fullMediaData);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(message, uploadProgress || downloadProgress, shouldDownload && !fullMediaData);\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasDownloadDisabled, 'slow');\n  const {\n    shouldRenderThumb, shouldRenderFullMedia, transitionClassNames,\n  } = useTransitionForMedia(fullMediaData, 'slow');\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {shouldRenderThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${width}px; height: ${height}px`}\n        />\n      )}\n      {shouldRenderFullMedia && (\n        <img\n          src={fullMediaData}\n          className={`full-media ${transitionClassNames}`}\n          width={width}\n          height={height}\n          alt=\"\"\n        />\n      )}\n      {shouldRenderSpinner && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {!fullMediaData && !isDownloadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring && (\n        <span className=\"message-upload-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import { RefObject } from 'react';\nimport { useCallback, useRef } from '../lib/teact/teact';\n\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport safePlay from '../util/safePlay';\n\nexport default function useHeavyAnimationCheckForVideo(playerRef: RefObject<HTMLVideoElement>, shouldPlay: boolean) {\n  const shouldPlayRef = useRef();\n  shouldPlayRef.current = shouldPlay;\n\n  const pause = useCallback(() => {\n    if (playerRef.current) {\n      playerRef.current.pause();\n    }\n  }, [playerRef]);\n\n  const play = useCallback(() => {\n    if (playerRef.current && shouldPlayRef.current) {\n      safePlay(playerRef.current);\n    }\n  }, [playerRef]);\n\n  useHeavyAnimationCheck(pause, play);\n}\n","import { useCallback, useRef } from '../../../../lib/teact/teact';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport safePlay from '../../../../util/safePlay';\n\nexport default (playerRef: { current: HTMLVideoElement | null }, isPlayAllowed = false) => {\n  const wasPlaying = useRef(false);\n  const isFrozen = useRef(false);\n\n  const freezePlaying = useCallback(() => {\n    isFrozen.current = true;\n\n    if (!isPlayAllowed || !playerRef.current) {\n      return;\n    }\n\n    if (!wasPlaying.current) {\n      wasPlaying.current = !playerRef.current.paused;\n    }\n\n    playerRef.current.pause();\n  }, [isPlayAllowed, playerRef]);\n\n  const unfreezePlaying = useCallback(() => {\n    // At this point HTMLVideoElement can be unmounted from the DOM\n    if (isPlayAllowed && playerRef.current && wasPlaying.current && document.body.contains(playerRef.current)) {\n      safePlay(playerRef.current);\n    }\n\n    wasPlaying.current = false;\n    isFrozen.current = false;\n  }, [isPlayAllowed, playerRef]);\n\n  const unfreezePlayingOnRaf = useCallback(() => {\n    fastRaf(unfreezePlaying);\n  }, [unfreezePlaying]);\n\n  if (!document.hasFocus()) {\n    freezePlaying();\n  }\n\n  useBackgroundMode(freezePlaying, unfreezePlayingOnRaf);\n};\n","import React, {\n  FC, useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  canMessagePlayVideoInline,\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useHeavyAnimationCheckForVideo from '../../../hooks/useHeavyAnimationCheckForVideo';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport usePauseOnInactive from './hooks/usePauseOnInactive';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n  const localBlobUrl = video.blobUrl;\n  const canPlayInline = Boolean(localBlobUrl) || canMessagePlayVideoInline(video);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad);\n  const shouldDownload = Boolean(isDownloadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(shouldAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message);\n  const { mediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldDownload,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(canPlayInline && isIntersecting && fullMediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!shouldAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || downloadProgress,\n    shouldDownload && (canPlayInline && !isBuffered),\n  );\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasDownloadDisabled);\n  const { shouldRenderThumb, transitionClassNames } = useTransitionForMedia(fullMediaData, 'slow');\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded);\n\n  useHeavyAnimationCheckForVideo(videoRef, Boolean(isInline && shouldAutoPlay));\n\n  usePauseOnInactive(videoRef, isPlayAllowed);\n\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (canPlayInline && !fullMediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    } else if (canPlayInline && fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, canPlayInline, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  const shouldRenderInlineVideo = isInline;\n  const shouldRenderHqPreview = !canPlayInline && mediaData;\n  const shouldRenderPlayButton = !canPlayInline || (isDownloadAllowed && !isPlayAllowed && !shouldRenderSpinner);\n  const shouldRenderDownloadButton = canPlayInline && !isDownloadAllowed;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {(!isInline || shouldRenderThumb)\n        && (\n          <canvas\n            ref={thumbRef}\n            className=\"thumbnail\"\n            // @ts-ignore teact feature\n            style={`width: ${width}px; height: ${height}px;`}\n          />\n        )}\n      {previewBlobUrl && (\n        <img\n          src={previewBlobUrl}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${width}px; height: ${height}px;`}\n          alt=\"\"\n        />\n      )}\n\n      {shouldRenderInlineVideo && (\n        <video\n          ref={videoRef}\n          className={videoClassName}\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {shouldRenderHqPreview && (\n        <img\n          src={mediaData}\n          className={`full-media ${transitionClassNames}`}\n          width={width}\n          height={height}\n          alt=\"\"\n        />\n      )}\n      {shouldRenderPlayButton && (\n        <i className=\"icon-large-play\" />\n      )}\n      {shouldRenderSpinner && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring && !canPlayInline ? (\n        <span className=\"message-upload-progress\">{Math.round(transferProgress * 100)}%</span>\n      ) : isTransferring && canPlayInline ? (\n        <span className=\"message-upload-progress\">...</span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(video.duration - playProgress)}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser, ApiContact } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openUserInfo'>;\n\nconst Contact: FC<OwnProps & StateProps & DispatchProps> = ({\n  contact, user, openUserInfo,\n}) => {\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n\n  const handleClick = useCallback(() => {\n    openUserInfo({ id: userId });\n  }, [openUserInfo, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', Boolean(userId) && 'interactive')}\n      onClick={userId ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    return {\n      user: selectUser(global, contact.userId),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n  ]),\n)(Contact);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useCallback, memo, useState,\n} from '../../lib/teact/teact';\n\nimport Checkbox from './Checkbox';\n\ntype IRadioOption = {\n  label: string;\n  subLabel?: string;\n  value: string;\n};\n\ntype OwnProps = {\n  id?: string;\n  options: IRadioOption[];\n  selected?: string[];\n  disabled?: boolean;\n  round?: boolean;\n  loadingOptions?: string[];\n  onChange: (value: string[]) => void;\n};\n\nconst CheckboxGroup: FC<OwnProps> = ({\n  id,\n  options,\n  selected = [],\n  disabled,\n  round,\n  loadingOptions,\n  onChange,\n}) => {\n  const [values, setValues] = useState<string[]>([]);\n\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const { value, checked } = event.currentTarget;\n    let newValues: string[];\n    if (checked) {\n      newValues = [...values, value];\n    } else {\n      newValues = values.filter((v) => v !== value);\n    }\n\n    setValues(newValues);\n    onChange(newValues);\n  }, [onChange, values]);\n\n  return (\n    <div id={id} className=\"radio-group\">\n      {options.map((option) => (\n        <Checkbox\n          label={option.label}\n          subLabel={option.subLabel}\n          value={option.value}\n          checked={selected.indexOf(option.value) !== -1}\n          disabled={disabled}\n          round={round}\n          isLoading={loadingOptions ? loadingOptions.indexOf(option.value) !== -1 : undefined}\n          onChange={handleChange}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(CheckboxGroup);\n","import React, {\n  FC, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result && result.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent < answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            // @ts-ignore\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderMessageText';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<number, ApiUser>;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('loadMessage' | 'openPollResults')>;\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  loadMessage,\n  onSendVote,\n  openPollResults,\n}) => {\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    if (\n      isSubmitting\n      && poll.results.results\n      && poll.results.results.some((result) => result.isChosen)\n    ) {\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question)}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\">\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { byId: usersById } = global.users;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadMessage', 'openPollResults']),\n)(Poll));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getMessageWebPage } from '../../../modules/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  shouldAutoLoad?: boolean;\n  inPreview?: boolean;\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  shouldAutoLoad,\n  inPreview,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  let isSquarePhoto = false;\n  if (webPage && webPage.photo) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n  } = webPage;\n\n  const isMediaInteractive = photo && onMediaClick && !isSquarePhoto && !webPage.hasDocument;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebPage',\n    photo\n      ? (isSquarePhoto && 'with-square-photo')\n      : (!inPreview && 'without-photo'),\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          nonInteractive={!isMediaInteractive}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      <div className=\"WebPage-text\">\n        <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n        {!inPreview && title && (\n          <p className=\"site-title\">{renderText(title)}</p>\n        )}\n        {truncatedDescription && (\n          <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n}) => {\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    description,\n    photoUrl,\n  } = invoice!;\n\n  return (\n    <div\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <p>{renderText(text, ['emoji', 'br'])}</p>\n      )}\n      <div className={`description ${photoUrl ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n          />\n        )}\n        {description && (\n          <p className=\"description-text\">{renderText(description, ['emoji', 'br'])}</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { OwnProps as PhotoProps } from '../Photo';\nimport { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport { GlobalActions } from '../../../../global/types';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../modules/selectors';\n\nimport { pick } from '../../../../util/iteratees';\n\ntype OwnProps = PhotoProps & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('toggleMessageSelection')>;\n\nexport default function withSelectControl(WrapedComponent: FC) {\n  const Component: FC<OwnProps & StateProps & DispatchProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      toggleMessageSelection,\n      dimensions,\n    } = props;\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e && e.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...props.dimensions,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : props.onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={\n          buildClassName(\n            'album-item-select-wrapper',\n            isSelected && 'is-selected',\n          )\n        }\n        // @ts-ignore\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrapedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n    (setGlobal, actions) => pick(actions, [\n      'toggleMessageSelection',\n    ]),\n  )(Component));\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\nimport { AlbumRectPart, IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent } from '../../../modules/helpers';\nimport { withGlobal } from '../../../lib/teact/teactn';\nimport { pick } from '../../../util/iteratees';\nimport withSelectControl from './hocs/withSelectControl';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'cancelSendingMessage'>;\n\nconst Album: FC<OwnProps & StateProps & DispatchProps> = ({\n  album,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  cancelSendingMessage,\n}) => {\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[message.previousLocalId || message.id];\n    const uploadProgress = fileUpload ? fileUpload.progress : undefined;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom)\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAutoPlay={shouldAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      // @ts-ignore\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      uploadsById: global.fileUploads.byMessageLocalId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'cancelSendingMessage',\n  ]),\n)(Album);\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS } from '../../common/helpers/mediaDimensions';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport buildClassName from '../../../util/buildClassName';\nimport useHeavyAnimationCheckForVideo from '../../../hooks/useHeavyAnimationCheckForVideo';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport usePauseOnInactive from './hooks/usePauseOnInactive';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport safePlay from '../../../util/safePlay';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  lastSyncTime?: number;\n};\n\nlet currentOnRelease: NoneToVoidFunction;\n\nfunction createCapture(onRelease: NoneToVoidFunction) {\n  return () => {\n    if (currentOnRelease) {\n      currentOnRelease();\n    }\n\n    currentOnRelease = onRelease;\n  };\n}\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad && shouldAutoPlay);\n  const shouldDownload = Boolean(isDownloadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldDownload,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = isDownloadAllowed && !isBuffered;\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasDownloadDisabled);\n  const { shouldRenderThumb, transitionClassNames } = useTransitionForMedia(mediaData, 'slow');\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const circumference = 94 * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `<svg width=\"200px\" height=\"200px\">\n          <circle cx=\"100\" cy=\"100\" r=\"94\" class=\"progress-circle\" transform=\"rotate(-90, 100, 100)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = () => {\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current!);\n\n    requestAnimationFrame(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  };\n\n  const capturePlaying = createCapture(stopPlaying);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useHeavyAnimationCheckForVideo(playerRef, shouldPlay);\n\n  usePauseOnInactive(playerRef, Boolean(mediaData));\n\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      playerEl.currentTime = 0;\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, mediaData]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {shouldRenderThumb && (\n        <div className=\"thumbnail-wrapper\">\n          <canvas\n            ref={thumbRef}\n            className=\"thumbnail\"\n            // @ts-ignore teact feature\n            style={`width: ${ROUND_VIDEO_DIMENSIONS}px; height: ${ROUND_VIDEO_DIMENSIONS}px`}\n          />\n        </div>\n      )}\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS}\n            height={ROUND_VIDEO_DIMENSIONS}\n            autoPlay\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={downloadProgress} />\n        </div>\n      )}\n      {!mediaData && !isDownloadAllowed && (\n        <i className=\"icon-large-play\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted-chat\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React, { FC } from '../../../lib/teact/teact';\n\nimport { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ button }: { button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'NOT_SUPPORTED'}\n              onClick={() => onClick({ button })}\n            >\n              {button.text}\n              {button.type === 'url' && <i className=\"icon-arrow-right\" />}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiMessage, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { isChatPrivate } from '../../../modules/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectThreadInfo } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  threadInfo: ApiThreadInfo;\n  usersById?: Record<number, ApiUser>;\n  chatsById?: Record<number, ApiChat>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openChat'>;\n\nconst CommentButton: FC<OwnProps & StateProps & DispatchProps> = ({\n  disabled, threadInfo, usersById, chatsById, openChat,\n}) => {\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  const recentRepliers = recentReplierIds && recentReplierIds.map((peerId) => {\n    return isChatPrivate(peerId) ? usersById![peerId] : chatsById![peerId];\n  }).filter(Boolean);\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isChatPrivate(user.id) ? user as ApiUser : undefined}\n              chat={!isChatPrivate(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }) => {\n    const { threadId, chatId } = message.threadInfo!;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId) || message.threadInfo!;\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    return {\n      threadInfo,\n      usersById,\n      chatsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n  ]),\n)(CommentButton));\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  memo,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../../global/types';\nimport {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiSticker,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { FocusDirection, IAlbum, MediaViewerOrigin } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectAnimatedEmoji,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectShouldAutoLoadMedia,\n  selectShouldAutoPlayMedia, selectShouldLoopStickers,\n} from '../../../modules/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isChatPrivate,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji, getSenderTitle, getUserColorKey,\n} from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useWindowSize from '../../../hooks/useWindowSize';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from '../../common/AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersectionForBottom: ObserveFn;\n  observeIntersectionForMedia: ObserveFn;\n  observeIntersectionForAnimatedStickers: ObserveFn;\n  album?: IAlbum;\n  withAvatar?: boolean;\n  withSenderName?: boolean;\n  threadId: number;\n  messageListType: MessageListType;\n  noComments: boolean;\n  appearanceOrder: number;\n} & MessagePositionProperties;\n\ntype StateProps = {\n  forceSenderName?: boolean;\n  sender?: ApiUser | ApiChat;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isChannel?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  isSingleEmoji?: boolean;\n  animatedEmoji?: ApiSticker;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  shouldAutoLoadMedia?: boolean;\n  shouldAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'focusMessage' | 'openMediaViewer' | 'openAudioPlayer' |\n  'openUserInfo' | 'openChat' |\n  'cancelSendingMessage' | 'markMessagesRead' |\n  'sendPollVote' | 'toggleMessageSelection' | 'setReplyingToId' | 'openForwardMenu' |\n  'clickInlineButton'\n)>;\n\nconst NBSP = '\\u00A0';\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>';\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\n\nconst Message: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  withAvatar,\n  withSenderName,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isLastInList,\n  forceSenderName,\n  sender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isForwarding,\n  isChatWithSelf,\n  isChannel,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  messageListType,\n  isPinnedList,\n  shouldAutoLoadMedia,\n  shouldAutoPlayMedia,\n  shouldLoopStickers,\n  focusMessage,\n  openMediaViewer,\n  openAudioPlayer,\n  openUserInfo,\n  openChat,\n  cancelSendingMessage,\n  markMessagesRead,\n  sendPollVote,\n  toggleMessageSelection,\n  setReplyingToId,\n  openForwardMenu,\n  clickInlineButton,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, false, true);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const { chatId, id: messageId, threadInfo } = message;\n\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const { forwardInfo, viaBotId } = message;\n  const asForwarded = forwardInfo && !isChatWithSelf && !forwardInfo.isLinkedChannelPost;\n  const isInDocumentGroup = !!message.groupedId && !message.isInAlbum;\n  const isAlbum = Boolean(album) && album!.messages.length > 1;\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice,\n  } = getMessageContent(message);\n  const customShape = getMessageCustomShape(message);\n  const textParts = renderMessageText(message, highlight, isEmojiOnlyMessage(customShape));\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    transitionClassNames,\n  );\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: message.threadInfo && message.threadInfo.messagesCount > 0,\n  });\n  const avatarPeer = forwardInfo && (isChatWithSelf || !sender) ? originSender : sender;\n  const senderPeer = forwardInfo ? originSender : sender;\n  const signature = (\n    (isChannel && message.adminTitle) || (forwardInfo && !asForwarded && forwardInfo.adminTitle) || undefined\n  );\n  const withCommentButton = message.threadInfo && (!isInDocumentGroup || isLastInDocumentGroup)\n    && messageListType === 'thread' && !noComments;\n  const withAppendix = contentClassName.includes('has-appendix');\n\n  useEnsureMessage(chatId, hasReply ? message.replyToMessageId : undefined, replyMessage, message.id);\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight);\n  useLayoutEffect(() => {\n    if (!appendixRef.current) {\n      return;\n    }\n\n    appendixRef.current.innerHTML = isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN;\n  }, [isOwn, withAppendix]);\n\n  const handleGroupDocumentMessagesSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    toggleMessageSelection({\n      messageId,\n      groupedId: message.groupedId,\n    });\n  }, [messageId, message.groupedId, toggleMessageSelection]);\n\n  const handleMessageSelect = useCallback((e?: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n    const params = isAlbum && album && album.messages\n      ? {\n        messageId,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: e && e.shiftKey,\n      }\n      : { messageId, withShift: e && e.shiftKey };\n    toggleMessageSelection(params);\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const handleContainerDoubleClick = useCallback(() => {\n    setReplyingToId({ messageId });\n  }, [setReplyingToId, messageId]);\n\n  const handleContentDoubleClick = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n  }, []);\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    if (isChatPrivate(avatarPeer.id)) {\n      openUserInfo({ id: avatarPeer.id });\n    } else {\n      openChat({ id: avatarPeer.id });\n    }\n  }, [avatarPeer, openUserInfo, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      return;\n    }\n\n    if (isChatPrivate(senderPeer.id)) {\n      openUserInfo({ id: senderPeer.id });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [senderPeer, openUserInfo, openChat]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openUserInfo({ id: botSender.id });\n  }, [botSender, openUserInfo]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({ chatId, threadId, messageId: message.replyToMessageId });\n  }, [focusMessage, chatId, threadId, message.replyToMessageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId, threadId, messageId, origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId: message.groupedId });\n  }, [openForwardMenu, chatId, message.groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId: message.groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n    focusMessage({\n      chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n    });\n  }, [focusMessage, forwardInfo, message, chatId, isInDocumentGroup]);\n\n  const lang = useLang();\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), album!, windowWidth) : undefined;\n  }, [isAlbum, windowWidth, isOwn, asForwarded, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS;\n      } else {\n        width = calculateMediaDimensions(message).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isChatPrivate(avatarPeer.id);\n    const avatarUser = avatarPeer && isAvatarPeerUser ? avatarPeer as ApiUser : undefined;\n    const avatarChat = avatarPeer && !isAvatarPeerUser ? avatarPeer as ApiChat : undefined;\n    const hiddenName = !avatarPeer && forwardInfo ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && !customShape && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n    const shouldInlineMeta = !webPage && !animatedEmoji && textParts;\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            isInline\n            sticker={animatedEmoji}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            isOwn={isOwn}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            message={message}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {!animatedEmoji && textParts && (\n          <p className={`text-content ${shouldInlineMeta ? 'with-meta' : ''}`} dir=\"auto\">\n            {textParts}\n            {shouldInlineMeta && (\n              <MessageMeta\n                message={message}\n                outgoingStatus={outgoingStatus}\n                signature={signature}\n                onClick={handleMessageSelect}\n              />\n            )}\n          </p>\n        )}\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && (\n          <Invoice\n            message={message}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const shouldRender = !customShape && (\n      (withSenderName && !photo && !video) || asForwarded || viaBotId || forceSenderName\n    ) && (!isInDocumentGroup || isFirstInDocumentGroup);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo && forwardInfo.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName(senderPeer && 'interactive', senderColor)}\n            onClick={senderPeer ? handleSenderClick : undefined}\n            dir=\"auto\"\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo && forwardInfo.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && (!isInDocumentGroup || isLastInDocumentGroup)\n  );\n  const canForward = canShowActionButton && isChannel && !isScheduled;\n  const canFocus = canShowActionButton && (\n    (forwardInfo && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn)) && forwardInfo.fromMessageId)\n    || isPinnedList\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={`message${messageId}`}\n      className={containerClassName}\n      // @ts-ignore teact feature\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onClick={isInSelectMode ? handleMessageSelect : undefined}\n      onDoubleClick={!isInSelectMode ? handleContainerDoubleClick : undefined}\n      onMouseDown={!isInSelectMode ? handleBeforeContextMenu : undefined}\n      onContextMenu={!isInSelectMode ? handleContextMenu : undefined}\n      onMouseEnter={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseEnter : undefined}\n      onMouseLeave={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleGroupDocumentMessagesSelect}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className=\"message-content-wrapper\"\n        onClick={isInSelectMode && isInDocumentGroup ? handleMessageSelect : undefined}\n      >\n        <div\n          className={contentClassName}\n          // @ts-ignore\n          style={style}\n          dir=\"auto\"\n        >\n          {withAppendix && (<div className=\"svg-appendix\" ref={appendixRef} />)}\n          {asForwarded && !customShape && (!isInDocumentGroup || isFirstInDocumentGroup) && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {(!isInDocumentGroup || isLastInDocumentGroup) && !(!webPage && !animatedEmoji && textParts) && (\n            <MessageMeta\n              message={message}\n              outgoingStatus={outgoingStatus}\n              signature={signature}\n              onClick={handleMessageSelect}\n            />\n          )}\n          {canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton message={message} disabled={noComments} />}\n          {contentClassName.includes('has-appendix') && <div className=\"svg-appendix\" ref={appendixRef} />}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickInlineButton} />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const { focusedMessage, forwardMessages, lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToMessageId, isOutgoing,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = canShowSender ? selectSender(global, message) : undefined;\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectSender(global, replyMessage);\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    let isSelected: boolean;\n\n    if (album && album.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    return {\n      forceSenderName,\n      sender,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n      isForwarding,\n      isChatWithSelf,\n      isChannel,\n      lastSyncTime,\n      highlight,\n      isSingleEmoji: Boolean(singleEmoji),\n      animatedEmoji: singleEmoji ? selectAnimatedEmoji(global, singleEmoji) : undefined,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        !!message.groupedId && !message.isInAlbum && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isPinnedList: messageListType === 'pinned',\n      shouldAutoLoadMedia: chat ? selectShouldAutoLoadMedia(global, message, chat, sender) : undefined,\n      shouldAutoPlayMedia: selectShouldAutoPlayMedia(global, message),\n      shouldLoopStickers: selectShouldLoopStickers(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'focusMessage',\n    'openMediaViewer',\n    'openAudioPlayer',\n    'cancelSendingMessage',\n    'openUserInfo',\n    'openChat',\n    'markMessagesRead',\n    'sendPollVote',\n    'toggleMessageSelection',\n    'setReplyingToId',\n    'openForwardMenu',\n    'clickInlineButton',\n  ]),\n)(Message));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiRestrictionReason, MAIN_THREAD_ID } from '../../api/types';\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_LIST_SLICE, SCHEDULED_WHEN_ONLINE } from '../../config';\nimport { IS_ANDROID, IS_MOBILE_SCREEN } from '../../util/environment';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages, selectCurrentMessageIds,\n} from '../../modules/selectors';\nimport {\n  getMessageOriginalId,\n  isActionMessage,\n  isChatChannel,\n  isChatPrivate,\n  isOwnMessage,\n} from '../../modules/helpers';\nimport {\n  compact,\n  flatten,\n  orderBy,\n  pick,\n} from '../../util/iteratees';\nimport {\n  fastRaf, debounce, onTickEnd,\n} from '../../util/schedulers';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages, MessageDateGroup, isAlbum } from './helpers/groupMessages';\nimport { ObserveFn, useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport resetScroll from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\nimport useLang, { LangFn } from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\n\nimport Loading from '../ui/Loading';\nimport MessageScroll from './MessageScroll';\nimport Message from './message/Message';\nimport ActionMessage from './ActionMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isChatWithSelf?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  lastMessage?: ApiMessage;\n  botDescription?: string;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadViewportMessages' | 'markMessageListRead' | 'markMessagesRead' | 'setScrollOffset'\n)>;\n\nconst BOTTOM_THRESHOLD = 100;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_MOBILE_SCREEN ? 300 : 500;\nconst FOCUSING_DURATION = 1000;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst FOCUSING_FADE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isChatLoaded,\n  isChannelChat,\n  canPost,\n  isChatWithSelf,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  animationLevel,\n  loadViewportMessages,\n  markMessageListRead,\n  markMessagesRead,\n  setScrollOffset,\n  lastMessage,\n  botDescription,\n  threadTopMessageId,\n  hasLinkedChat,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  // Updated every time (to be used from intersection callback closure)\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(!messageIds);\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n  const [hasFocusing, setHasFocusing] = useState<boolean>(Boolean(focusingId));\n\n  const areMessagesLoaded = Boolean(messageIds);\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n\n    // Updated only once (to preserve divider even after messages are read)\n    if (!memoUnreadDividerBeforeIdRef.current) {\n      memoUnreadDividerBeforeIdRef.current = firstUnreadId;\n    }\n  }, [firstUnreadId]);\n\n  const {\n    observe: observeIntersectionForMedia, freeze: freezeForMedia, unfreeze: unfreezeForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMessagesRead({ messageIds: mentionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n\n    if (focusingId) {\n      freezeForMedia();\n      freezeForReading();\n    } else {\n      unfreezeForReading();\n      unfreezeForMedia();\n    }\n  }, [focusingId]);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  useEffect(() => {\n    if (focusingId) {\n      setHasFocusing(true);\n    } else {\n      setTimeout(() => {\n        setHasFocusing(false);\n      }, FOCUSING_FADE_ANIMATION_DURATION);\n    }\n  }, [focusingId]);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  const [loadMoreBackwards, loadMoreForwards, loadMoreAround] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]: [\n    typeof messageIds, typeof isViewportNewest, typeof containerHeight\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    // During animation\n    if (!container.offsetParent) {\n      return;\n    }\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, FOCUSING_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current!;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    // If two messages come at once (e.g. via Quiz Bot) then the first message will update `scrollOffset`\n    // right away (before animation) which creates inconsistency until the animation completes.\n    // To workaround that, we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n    const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && (\n      scrollOffset - (prevContainerHeight || offsetHeight) - lastItemHeight <= BOTTOM_THRESHOLD\n    );\n\n    let newScrollTop!: number;\n\n    const hasFirstMessageChanged = messageIds && prevMessageIds && messageIds[0] !== prevMessageIds[0];\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    if (isAtBottom && hasLastMessageChanged && !hasFirstMessageChanged && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            undefined,\n            true,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(scrollHeight - newScrollTop, offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP);\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, newScrollTop);\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(scrollHeight - newScrollTop, offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  useEffect(() => {\n    if (!animationLevel || animationLevel > 0) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [animationLevel, isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isChatPrivate(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf);\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    !withUsers && 'no-avatars',\n    isChannelChat && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    isSelectModeActive && 'select-mode-active',\n    hasFocusing && 'has-focusing',\n    isScrolled && 'scrolled',\n  );\n\n  return (\n    <div ref={containerRef} className={className} onScroll={handleScroll}>\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botDescription ? (\n        <div className=\"empty rich\"><span>{renderText(lang(botDescription), ['br', 'emoji', 'links'])}</span></div>\n      ) : messageIds && !messageGroups ? (\n        <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageScroll\n          containerRef={containerRef}\n          className=\"messages-container\"\n          messageIds={messageIds || [lastMessage!.id]}\n          focusingId={focusingId}\n          loadMoreForwards={loadMoreForwards}\n          loadMoreBackwards={loadMoreBackwards}\n          isViewportNewest={isViewportNewest}\n          firstUnreadId={firstUnreadId}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        >\n          {renderMessages(\n            lang,\n            messageGroups || groupMessages([lastMessage!]),\n            observeIntersectionForReading,\n            observeIntersectionForMedia,\n            observeIntersectionForAnimatedStickers,\n            withUsers,\n            anchorIdRef,\n            memoUnreadDividerBeforeIdRef,\n            threadId,\n            type,\n            threadTopMessageId,\n            threadFirstMessageId,\n            hasLinkedChat,\n            messageGroups ? type === 'scheduled' : false,\n            !messageGroups || !shouldAnimateAppearanceRef.current,\n          )}\n        </MessageScroll>\n      ) : (\n        <Loading color=\"white\" />\n      )}\n    </div>\n  );\n};\n\nfunction renderMessages(\n  lang: LangFn,\n  messageGroups: MessageDateGroup[],\n  observeIntersectionForReading: ObserveFn,\n  observeIntersectionForMedia: ObserveFn,\n  observeIntersectionForAnimatedStickers: ObserveFn,\n  withUsers: boolean,\n  currentAnchorIdRef: { current: string | undefined },\n  memoFirstUnreadIdRef: { current: number | undefined },\n  threadId: number,\n  type: MessageListType,\n  threadTopMessageId?: number,\n  threadFirstMessageId?: number,\n  hasLinkedChat?: boolean,\n  isSchedule = false,\n  noAppearanceAnimation = false,\n) {\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + flatten(messageGroup.senderGroups).length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (senderGroup.length === 1 && !isAlbum(senderGroup[0]) && isActionMessage(senderGroup[0])) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoFirstUnreadIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return flatten(senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && currentAnchorIdRef.current === `message${message.previousLocalId}`) {\n          currentAnchorIdRef.current = `message${message.id}`;\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Scheduled messages can have local IDs in the middle of the list,\n        // and keys should be ordered, so we prefix it with a date.\n        // However, this may lead to issues if server date is not synchronized with the local one.\n        const key = type !== 'scheduled' ? originalId : `${message.date}_${originalId}`;\n\n        return compact([\n          message.id === memoFirstUnreadIdRef.current ? unreadDivider : undefined,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }));\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        teactFastList\n      >\n        <div className=\"sticky-date\" key=\"date-header\">\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {flatten(senderGroups)}\n      </div>\n    );\n  });\n\n  return flatten(dateGroups);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    let botDescription: string | undefined;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      const chatBot = selectChatBot(global, chatId)!;\n      if (chatBot.fullInfo) {\n        botDescription = chatBot.fullInfo.botDescription || 'NoMessages';\n      } else {\n        botDescription = 'Updating bot info...';\n      }\n    }\n\n    return {\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      animationLevel: global.settings.byKey.animationLevel,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n      botDescription,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadViewportMessages',\n    'markMessageListRead',\n    'markMessagesRead',\n    'setScrollOffset',\n  ]),\n)(MessageList));\n","import React, {\n  FC, useCallback, memo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../modules/selectors';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport { pick } from '../../util/iteratees';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ScrollDownButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n};\n\ntype StateProps = {\n  messageListType?: MessageListType;\n  unreadCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusLastMessage'>;\n\nconst FOCUS_MARGIN = 20;\n\nconst ScrollDownButton: FC<OwnProps & StateProps & DispatchProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  unreadCount,\n  focusLastMessage,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusLastMessage();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusLastMessage]);\n\n  const fabClassName = buildClassName(\n    'ScrollDownButton',\n    isShown && 'revealed',\n    !canPost && 'no-composer',\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <div className=\"ScrollDownButton-inner\">\n        <Button\n          color=\"secondary\"\n          round\n          onClick={handleClick}\n          ariaLabel={lang('AccDescrPageDown')}\n        >\n          <i className=\"icon-arrow-down\" />\n        </Button>\n        {Boolean(unreadCount) && (\n          <div className=\"unread-count\">{formatIntegerCompact(unreadCount!)}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    return {\n      messageListType,\n      unreadCount: chat && threadId === MAIN_THREAD_ID && messageListType === 'thread' ? chat.unreadCount : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['focusLastMessage']),\n)(ScrollDownButton));\n","import { ApiAttachment } from '../../../../api/types';\nimport { preloadImage, preloadVideo, createPosterForVideo } from '../../../../util/files';\n\nconst MAX_QUICK_VIDEO_SIZE = 10 * 1024 ** 2; // 10 MB\nconst MAX_QUICK_IMG_SIZE = 1280; // px\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let previewBlobUrl;\n\n  if (mimeType.startsWith('image/')) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n\n      if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE || mimeType !== 'image/jpeg') {\n        const newBlob = await squeezeImage(img);\n        if (newBlob) {\n          URL.revokeObjectURL(blobUrl);\n          return buildAttachment(filename, newBlob, true, options);\n        } else {\n          return buildAttachment(filename, blob, false, options);\n        }\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (mimeType.startsWith('video/')) {\n    // Videos < 10 MB are always sent in quick mode (in other clients).\n    // Quick mode for videos > 10 MB is not supported until client-side video squeezing is implemented.\n    if (size < MAX_QUICK_VIDEO_SIZE) {\n      const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n      quick = { width, height, duration };\n    }\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    previewBlobUrl,\n    ...options,\n  };\n}\n\nfunction squeezeImage(img: HTMLImageElement): Promise<Blob | null> {\n  return new Promise((resolve) => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d')!;\n\n    let { width, height } = img;\n\n    if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE) {\n      if (width >= height) {\n        height *= MAX_QUICK_IMG_SIZE / width;\n        width = MAX_QUICK_IMG_SIZE;\n      } else {\n        width *= MAX_QUICK_IMG_SIZE / height;\n        height = MAX_QUICK_IMG_SIZE;\n      }\n    }\n\n    canvas.width = width;\n    canvas.height = height;\n\n    ctx.drawImage(img, 0, 0, img.width, img.height, 0, 0, width, height);\n    canvas.toBlob(resolve, 'image/jpeg', 100);\n  });\n}\n","export default __webpack_public_path__ + \"8ccc0b555efcec3616377aea078dda16.js\";","// @ts-ignore\nimport encoderPath from 'file-loader!opus-recorder/dist/encoderWorker.min';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\ninterface OpusRecorder extends Omit<MediaRecorder, 'start' | 'ondataavailable'> {\n  new(options: AnyLiteral): OpusRecorder;\n\n  start(stream?: MediaStreamAudioSourceNode): void;\n\n  sourceNode: MediaStreamAudioSourceNode;\n\n  ondataavailable: (typedArray: Uint8Array) => void;\n}\n\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: OpusRecorder }>;\nlet OpusRecorder: OpusRecorder;\nlet mediaRecorder: OpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    // @ts-ignore\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: OpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import { StateHookSetter, useEffect } from '../../../../lib/teact/teact';\nimport { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nexport default (\n  insertTextAndUpdateCursor: (text: string, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && input.tagName === 'INPUT' && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const { items } = e.clipboardData;\n      const media = Array.from(items).find((item) => CLIPBOARD_ACCEPTED_TYPES.includes(item.type));\n      const file = media && media.getAsFile();\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n\n      if (!file && !pastedText) {\n        return;\n      }\n\n      e.preventDefault();\n\n      if (file && !editedMessage) {\n        const attachment = await buildAttachment(file.name, file, true);\n        setAttachments((attachments) => [\n          ...attachments,\n          attachment,\n        ]);\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText, input ? input.id : undefined);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments]);\n};\n","import { ApiFormattedText } from '../../../../api/types';\nimport { renderTextWithEntities } from '../../../common/helpers/renderMessageText';\n\nexport default function getMessageTextAsHtml(formattedText?: ApiFormattedText) {\n  const { text, entities } = formattedText || {};\n  if (!text) {\n    return '';\n  }\n\n  const result = renderTextWithEntities(\n    text,\n    entities,\n    undefined,\n    undefined,\n    true,\n  );\n\n  if (Array.isArray(result)) {\n    return result.join('');\n  }\n\n  return result;\n}\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\n\nimport { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_ID } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../helpers/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: number | undefined;\nlet currentThreadId: number | undefined;\n\nexport default (\n  draft: ApiFormattedText | undefined,\n  chatId: number,\n  threadId: number,\n  html: string,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  saveDraft: GlobalActions['saveDraft'],\n  clearDraft: GlobalActions['clearDraft'],\n) => {\n  const updateDraft = useCallback((draftChatId: number, draftThreadId: number) => {\n    if (htmlRef.current.length && !editedMessage) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(htmlRef.current!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (!draft) {\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(draft));\n\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId]);\n\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  // Subscribe and handle `window.blur`\n  useEffect(() => {\n    function handleBlur() {\n      if (chatId && threadId) {\n        updateDraft(chatId, threadId);\n      }\n    }\n\n    window.addEventListener('blur', handleBlur);\n\n    return () => {\n      window.removeEventListener('blur', handleBlur);\n    };\n  }, [chatId, threadId, updateDraft]);\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import React, {\n  FC, useRef, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Button, { OwnProps as ButtonProps } from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={IS_TOUCH_ENV ? onActivate : undefined}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AttachMenu = useModuleLoader(Bundles.Extra, 'AttachMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachMenu ? <AttachMenu {...props} /> : undefined;\n};\n\nexport default memo(AttachMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './CustomSendMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomSendMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomSend = useModuleLoader(Bundles.Extra, 'CustomSendMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomSend ? <CustomSend {...props} /> : undefined;\n};\n\nexport default memo(CustomSendMenuAsync);\n","import React, { FC } from '../../../lib/teact/teact';\nimport { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default StickerTooltipAsync;\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotKeyboardMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotKeyboardMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotKeyboardMenu = useModuleLoader(Bundles.Extra, 'BotKeyboardMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotKeyboardMenu ? <BotKeyboardMenu {...props} /> : undefined;\n};\n\nexport default memo(BotKeyboardMenuAsync);\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n} from '../../../modules/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { pick } from '../../../util/iteratees';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport { isChatPrivate } from '../../../modules/helpers';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setReplyingToId' | 'setEditingId' | 'focusMessage' | 'exitForwardMode'>;\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<StateProps & DispatchProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  setReplyingToId,\n  setEditingId,\n  focusMessage,\n  exitForwardMode,\n}) => {\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n  }, [replyingToId, editingId, forwardedMessagesCount, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, message]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? `${forwardedMessagesCount} forwarded messages`\n    : undefined;\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className}>\n      <div>\n        <Button round color=\"translucent\" ariaLabel=\"Cancel replying\" onClick={clearEmbedded}>\n          <i className=\"icon-close\" />\n        </Button>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={message}\n          sender={sender}\n          customText={customText}\n          title={editingId ? 'Edit Message' : undefined}\n          onClick={handleMessageClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      currentUserId,\n      forwardMessages: { fromChatId, toChatId, messageIds: forwardMessageIds },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n\n    let message;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = selectChatMessage(global, fromChatId!, forwardMessageIds![0]);\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = chatId === currentUserId;\n\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      sender = isChatPrivate(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n    }\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setReplyingToId',\n    'setEditingId',\n    'focusMessage',\n    'exitForwardMode',\n  ]),\n)(ComposerEmbeddedMessage));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import React, {\n  FC, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiMessage, ApiMessageEntityTypes, ApiWebPage } from '../../../api/types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n};\ntype DispatchProps = Pick<GlobalActions, 'loadWebPagePreview' | 'clearWebPagePreview' | 'toggleMessageWebPage'>;\n\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  loadWebPagePreview,\n  clearWebPagePreview,\n  toggleMessageWebPage,\n}) => {\n  const link = useMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities && entities.find(({ type }) => type === ApiMessageEntityTypes.TextUrl);\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  const handleClearWebpagePreview = () => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  };\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <Button round color=\"translucent\" ariaLabel=\"Clear Webpage Preview\" onClick={handleClearWebpagePreview}>\n          <i className=\"icon-close\" />\n        </Button>\n        <WebPage message={messageStub} inPreview />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadWebPagePreview', 'clearWebPagePreview', 'toggleMessageWebPage',\n  ]),\n)(WebPagePreview));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './CalendarModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CalendarModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CalendarModal = useModuleLoader(Bundles.Extra, 'CalendarModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CalendarModal ? <CalendarModal {...props} /> : undefined;\n};\n\nexport default memo(CalendarModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState, MessageListType } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { LangCode } from '../../../types';\n\nimport { EDITABLE_INPUT_ID, SCHEDULED_WHEN_ONLINE } from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_MOBILE_SCREEN, IS_EMOJI_SUPPORTED } from '../../../util/environment';\nimport {\n  selectChat,\n  selectIsChatWithBot,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatUser,\n  selectEmojiKeywords,\n} from '../../../modules/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatGroup,\n  isChatPrivate,\n  isChatAdmin,\n} from '../../../modules/helpers';\nimport { formatVoiceRecordDuration, getDayStartAt } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport insertHtmlInSelection from '../../../util/insertHtmlInSelection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport { isSelectionInsideInput } from './helpers/selection';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu.async';\nimport SymbolMenu from './SymbolMenu.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu.async';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport Portal from '../../ui/Portal';\nimport CalendarModal from '../../common/CalendarModal.async';\nimport PaymentModal from '../../payment/PaymentModal.async';\nimport ReceiptModal from '../../payment/ReceiptModal.async';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  editingMessage?: ApiMessage;\n  chat?: ApiChat;\n  draft?: ApiFormattedText;\n  isChatWithBot?: boolean;\n  isChatWithSelf?: boolean;\n  isRightColumnShown?: boolean;\n  isSelectModeActive?: boolean;\n  isForwarding?: boolean;\n  canSuggestMembers?: boolean;\n  isPollModalOpen?: boolean;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  botKeyboardMessageId?: number;\n  withScheduledButton?: boolean;\n  shouldSchedule?: boolean;\n  canScheduleUntilOnline?: boolean;\n  stickersForEmoji?: ApiSticker[];\n  groupChatMembers?: ApiChatMember[];\n  currentUserId?: number;\n  usersById?: Record<number, ApiUser>;\n  recentEmojis: string[];\n  lastSyncTime?: number;\n  contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n  shouldSuggestStickers?: boolean;\n  language: LangCode;\n  emojiKeywords?: Record<string, string[]>;\n} & Pick<GlobalState, 'connectionState'>;\n\ntype DispatchProps = Pick<GlobalActions, (\n  'sendMessage' | 'editMessage' | 'saveDraft' | 'forwardMessages' |\n  'clearDraft' | 'showError' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'openPollModal' | 'closePollModal' | 'loadScheduledHistory' | 'openChat' | 'closePaymentModal' |\n  'clearReceipt' | 'addRecentEmoji' | 'loadEmojiKeywords'\n)>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n}\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst CAPTION_MAX_LENGTH = 1024;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps & DispatchProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  canSuggestMembers,\n  isPollModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  botKeyboardMessageId,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  currentUserId,\n  usersById,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  language,\n  emojiKeywords,\n  recentEmojis,\n  sendMessage,\n  editMessage,\n  saveDraft,\n  clearDraft,\n  showError,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  forwardMessages,\n  openPollModal,\n  closePollModal,\n  loadScheduledHistory,\n  closePaymentModal,\n  openChat,\n  clearReceipt,\n  addRecentEmoji,\n  loadEmojiKeywords,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n  const [\n    scheduledMessageArgs, setScheduledMessageArgs,\n  ] = useState<GlobalState['messages']['contentToBeScheduled'] | undefined>();\n\n  // Cache for frequently updated state\n  const htmlRef = useRef<string>(html);\n  useEffect(() => {\n    htmlRef.current = html;\n  }, [html]);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID) {\n      loadScheduledHistory();\n    }\n  }, [chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) {\n      return;\n    }\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      setScheduledMessageArgs(contentToBeScheduled);\n      openCalendar();\n    }\n  }, [contentToBeScheduled, openCalendar]);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  const mainButtonState = editingMessage\n    ? MainButtonState.Edit\n    : !IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding\n      ? MainButtonState.Send\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, mentionFilter,\n    closeMentionTooltip, insertMention,\n    mentionFilteredMembers,\n  } = useMentionTooltip(\n    canSuggestMembers && !attachments.length,\n    html,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    currentUserId,\n    usersById,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const allowedAttachmentOptions = useMemo(() => {\n    return getAllowedAttachmentOptions(chat, isChatWithBot);\n  }, [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    recentEmojis,\n    undefined,\n    setHtml,\n    emojiKeywords,\n  );\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    const messageInput = document.getElementById(inputId)!;\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange)) {\n        if (IS_EMOJI_SUPPORTED) {\n          // Insertion will trigger `onChange` in MessageInput, so no need to setHtml in state\n          document.execCommand('insertText', false, text);\n        } else {\n          insertHtmlInSelection(newHtml);\n          messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        }\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    if (!IS_MOBILE_SCREEN) {\n      // If selection is outside of input, set cursor at the end of input\n      requestAnimationFrame(() => {\n        focusEditableElement(messageInput);\n      });\n    }\n  }, []);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, []);\n\n  const resetComposer = useCallback(() => {\n    setHtml('');\n    setAttachments([]);\n    closeStickerTooltip();\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_MOBILE_SCREEN) {\n      // @perf\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeCalendar, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu]);\n\n  // Handle chat change\n  const prevChatId = usePrevious(chatId);\n  useEffect(() => {\n    if (!prevChatId || chatId === prevChatId) {\n      return;\n    }\n\n    stopRecordingVoice();\n    resetComposer();\n  }, [chatId, prevChatId, resetComposer, stopRecordingVoice]);\n\n  const handleEditComplete = useEditing(htmlRef, setHtml, editingMessage, resetComposer, openDeleteModal, editMessage);\n  useDraft(draft, chatId, threadId, html, htmlRef, setHtml, editingMessage, saveDraft, clearDraft);\n  useClipboardPaste(insertTextAndUpdateCursor, setAttachments, editingMessage);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, []);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments([]);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    if (currentAttachments.length && text && text.length > CAPTION_MAX_LENGTH) {\n      const extraLength = text.length - CAPTION_MAX_LENGTH;\n      showError({\n        error: {\n          message: 'CAPTION_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n        },\n      });\n      return;\n    }\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = Math.floor(Date.now() / 1000);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showError({\n            error: {\n              message: `A wait of ${secondsRemaining} seconds is required before sending another message in this chat`,\n              isSlowMode: true,\n            },\n          });\n\n          const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n          messageInput.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n    if (isForwarding) {\n      forwardMessages();\n    }\n\n    lastMessageSendTimeSeconds.current = Math.floor(Date.now() / 1000);\n\n    clearDraft({ chatId, localOnly: true });\n\n    // Wait until message animation starts\n    requestAnimationFrame(resetComposer);\n  }, [\n    activeVoiceRecording, attachments, connectionState, chatId, slowMode, isForwarding, isAdmin,\n    sendMessage, stopRecordingVoice, resetComposer, clearDraft, showError, forwardMessages,\n  ]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ sticker });\n      openCalendar();\n    } else {\n      sendMessage({ sticker });\n      requestAnimationFrame(resetComposer);\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ gif });\n      openCalendar();\n    } else {\n      sendMessage({ gif });\n      requestAnimationFrame(resetComposer);\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ poll });\n      closePollModal();\n      openCalendar();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, openCalendar, sendMessage, shouldSchedule]);\n\n  const handleSilentSend = useCallback(() => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ isSilent: true });\n      openCalendar();\n    } else {\n      handleSend(true);\n    }\n  }, [handleSend, openCalendar, shouldSchedule]);\n\n  const handleMessageSchedule = useCallback((date: Date) => {\n    const { isSilent, ...restArgs } = scheduledMessageArgs || {};\n\n    // Scheduled time can not be less than 10 seconds in future\n    const scheduledAt = Math.round(Math.max(date.getTime(), Date.now() + 60 * 1000) / 1000);\n\n    if (!scheduledMessageArgs || Object.keys(restArgs).length === 0) {\n      handleSend(!!isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...scheduledMessageArgs,\n        scheduledAt,\n      });\n      requestAnimationFrame(resetComposer);\n    }\n    closeCalendar();\n  }, [closeCalendar, handleSend, resetComposer, scheduledMessageArgs, sendMessage]);\n\n  const handleMessageScheduleUntilOnline = useCallback(() => {\n    handleMessageSchedule(new Date(SCHEDULED_WHEN_ONLINE * 1000));\n  }, [handleMessageSchedule]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n  }, [closeCalendar]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_MOBILE_SCREEN || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_MOBILE_SCREEN) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover]);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        if (shouldSchedule) {\n          if (activeVoiceRecording) {\n            pauseRecordingVoice();\n          }\n          openCalendar();\n        } else {\n          handleSend();\n          requestAnimationFrame(resetComposer);\n        }\n        break;\n      case MainButtonState.Record:\n        startRecordingVoice();\n        break;\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, resetComposer, shouldSchedule, startRecordingVoice, handleEditComplete,\n    activeVoiceRecording, openCalendar, pauseRecordingVoice, handleSend,\n  ]);\n\n  const lang = useLang();\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && !allowedAttachmentOptions.canAttachMedia;\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = areVoiceMessagesNotAllowed\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  return (\n    <div className={className}>\n      {allowedAttachmentOptions.canAttachMedia && (\n        <Portal containerId=\"#middle-column-portals\">\n          <DropArea\n            isOpen={dropAreaState !== DropAreaState.None}\n            withQuick={[dropAreaState, prevDropAreaState].includes(DropAreaState.QuickFile)}\n            onHide={onDropHide}\n            onFileSelect={handleFileSelect}\n          />\n        </Portal>\n      )}\n      <AttachmentModal\n        attachments={attachments}\n        caption={attachments.length ? html : ''}\n        canSuggestMembers={canSuggestMembers}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        usersById={usersById}\n        recentEmojis={recentEmojis}\n        onCaptionUpdate={setHtml}\n        language={language}\n        addRecentEmoji={addRecentEmoji}\n        loadEmojiKeywords={loadEmojiKeywords}\n        onSend={shouldSchedule ? openCalendar : handleSend}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={Boolean(isPollModalOpen)}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      <PaymentModal\n        isOpen={Boolean(isPaymentModalOpen)}\n        onClose={closePaymentModal}\n      />\n      <ReceiptModal\n        isOpen={Boolean(isReceiptModalOpen)}\n        onClose={clearReceipt}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        filter={mentionFilter}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredChatMembers={mentionFilteredMembers}\n        usersById={usersById}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!allowedAttachmentOptions.canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {IS_MOBILE_SCREEN ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              <Spinner color=\"gray\" />\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={`${isSymbolMenuOpen ? 'activated' : ''}`}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && window.innerWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER ? '' : lang('Message')\n            }\n            shouldSetFocus={isSymbolMenuOpen}\n            shouldSupressFocus={IS_MOBILE_SCREEN && isSymbolMenuOpen}\n            shouldSupressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen}\n            onUpdate={setHtml}\n            onSend={mainButtonState === MainButtonState.Edit\n              ? handleEditComplete\n              : (shouldSchedule ? openCalendar : handleSend)}\n            onSupressedFocus={closeSymbolMenu}\n          />\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={`${isBotKeyboardOpen ? 'activated' : ''}`}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {!activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={`${isAttachMenuOpen ? 'activated' : ''}`}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openAttachMenu}\n              ariaLabel=\"Add an attachment\"\n            >\n              <i className=\"icon-attach\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <StickerTooltip\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n            loadEmojiKeywords={loadEmojiKeywords}\n            language={language}\n          />\n          <AttachMenu\n            isOpen={isAttachMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            onClose={closeAttachMenu}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          <SymbolMenu\n            isOpen={isSymbolMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={`${mainButtonState} ${activeVoiceRecording ? 'recording' : ''}`}\n        disabled={areVoiceMessagesNotAllowed}\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSilentSend={!isChatWithSelf ? handleSilentSend : undefined}\n          onScheduleSend={!shouldSchedule ? openCalendar : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={scheduledDefaultDate.getTime()}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        secondButtonLabel={canScheduleUntilOnline ? 'Send When Online' : undefined}\n        onClose={handleCloseCalendar}\n        onSubmit={handleMessageSchedule}\n        onSecondButtonClick={canScheduleUntilOnline ? handleMessageScheduleUntilOnline : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatUser = chat && selectChatUser(global, chat);\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language } = global.settings.byKey;\n    const emojiKeywords = selectEmojiKeywords(global, language);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      canScheduleUntilOnline: (\n        !isChatWithSelf && !isChatWithBot\n        && (chat && chatUser && isChatPrivate(chatId) && chatUser.status && Boolean(chatUser.status.wasOnline))\n      ),\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds && scheduledIds.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId: messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      canSuggestMembers: chat && isChatGroup(chat),\n      isPollModalOpen: global.isPollModalOpen,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat && chat.fullInfo && chat.fullInfo.members,\n      currentUserId: global.currentUserId,\n      usersById: global.users.byId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      shouldSuggestStickers: global.settings.byKey.shouldSuggestStickers,\n      recentEmojis: global.recentEmojis,\n      language,\n      emojiKeywords: emojiKeywords ? emojiKeywords.keywords : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'sendMessage',\n    'editMessage',\n    'saveDraft',\n    'clearDraft',\n    'showError',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'forwardMessages',\n    'openPollModal',\n    'closePollModal',\n    'closePaymentModal',\n    'clearReceipt',\n    'loadScheduledHistory',\n    'openChat',\n    'addRecentEmoji',\n    'loadEmojiKeywords',\n  ]),\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_IOS } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nexport default () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_IOS) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getDispatch();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(html) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({ emoji: html });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","export default function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection && selection.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n      selection.removeAllRanges();\n      selection.addRange(range);\n    }\n  }\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../../config';\nimport parseMessageInput from '../helpers/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../modules/helpers';\n\nexport default (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: () => void,\n  openDeleteModal: () => void,\n  editMessage: GlobalActions['editMessage'],\n) => {\n  // TODO useOnChange\n  // Handle editing message\n  useEffect(() => {\n    if (!editedMessage) {\n      setHtml('');\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(editedMessage.content.text));\n\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [editedMessage, setHtml]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer]);\n\n  return handleEditComplete;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import React, {\n  FC, useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  CONTENT_TYPES_FOR_QUICK_UPLOAD,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n} from '../../config';\nimport { IS_MOBILE_SCREEN, IS_TOUCH_ENV, MASK_IMAGE_DISABLED } from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n} from '../../modules/selectors';\nimport { getCanPostInChat, getMessageSendingRestrictionReason, isChatPrivate } from '../../modules/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport ScrollDownButton from './ScrollDownButton';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\n\nimport './MiddleColumn.scss';\n\ntype StateProps = {\n  chatId?: number;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  messageSendingRestrictionReason?: string;\n  hasPinnedOrAudioMessage?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openChat' | 'unpinAllMessages' | 'loadUser'>;\n\nconst CLOSE_ANIMATION_DURATION = IS_MOBILE_SCREEN ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction canBeQuicklyUploaded(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && CONTENT_TYPES_FOR_QUICK_UPLOAD.includes(item.type);\n}\n\nconst MiddleColumn: FC<StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  messageSendingRestrictionReason,\n  hasPinnedOrAudioMessage,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  animationLevel,\n  openChat,\n  unpinAllMessages,\n  loadUser,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const hasTools = hasPinnedOrAudioMessage && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION);\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && Array.from(items).every(canBeQuicklyUploaded);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openChat({ id: chatId });\n  }, [unpinAllMessages, openChat, closeUnpinModal, chatId]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    customBackground && 'custom-bg-image',\n    backgroundColor && 'custom-bg-color',\n    customBackground && isBackgroundBlurred && 'blurred',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const lang = useLang();\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      // @ts-ignore teact-feature\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n    >\n      <div\n        id=\"middle-column-bg\"\n        // @ts-ignore\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n            />\n            <Transition\n              name={animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={renderingMessageListType === 'thread' && renderingThreadId === MAIN_THREAD_ID ? 1 : 2}\n              shouldCleanup\n            >\n              {() => (\n                <>\n                  <MessageList\n                    key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    type={renderingMessageListType}\n                    canPost={renderingCanPost}\n                    hasTools={renderingHasTools}\n                    onFabToggle={setIsFabShown}\n                    onNotchToggle={setIsNotchShown}\n                  />\n                  <div className={footerClassName}>\n                    {renderingCanPost && (\n                      <Composer\n                        chatId={renderingChatId}\n                        threadId={renderingThreadId}\n                        messageListType={renderingMessageListType}\n                        dropAreaState={dropAreaState}\n                        onDropHide={handleHideDropArea}\n                      />\n                    )}\n                    {isPinnedMessageList && (\n                      <div className=\"unpin-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          color=\"secondary\"\n                          className=\"unpin-all-button\"\n                          onClick={handleOpenUnpinModal}\n                        >\n                          <i className=\"icon-unpin\" />\n                          <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                        </Button>\n                      </div>\n                    )}\n                    {!isPinnedMessageList && !renderingCanPost && messageSendingRestrictionReason && (\n                      <div className={messagingDisabledClassName}>\n                        <div className=\"messaging-disabled-inner\">\n                          <span>\n                            {messageSendingRestrictionReason}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n                    <MessageSelectToolbar\n                      messageListType={renderingMessageListType}\n                      isActive={isSelectModeActive}\n                      canPost={renderingCanPost}\n                    />\n                  </div>\n                </>\n              )}\n            </Transition>\n\n            <ScrollDownButton\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n            />\n          </div>\n          {IS_MOBILE_SCREEN && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { theme } = global.settings.byKey;\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chats: { listIds } } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_MOBILE_SCREEN && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate: isChatPrivate(chatId),\n      canPost: !isPinnedMessageList && (!chat || canPost) && (!isBotNotStarted || IS_MOBILE_SCREEN),\n      isPinnedMessageList,\n      messageSendingRestrictionReason: chat && getMessageSendingRestrictionReason(chat),\n      hasPinnedOrAudioMessage: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(pinnedIds && pinnedIds.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat', 'unpinAllMessages', 'loadUser',\n  ]),\n)(MiddleColumn));\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nexport default (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n} from '../../modules/selectors';\nimport { isChatAdmin, isChatChannel, isChatPrivate } from '../../modules/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal.async';\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  shouldSkipAnimation?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canManage?: boolean;\n  isChannel?: boolean;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalTextSearchQuery' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'searchTextMessagesLocal' | 'toggleManagement' | 'searchMessagesByDate'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupMembers,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n}\n\nconst RightHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  profileState,\n  managementScreen,\n  canManage,\n  isChannel,\n  onClose,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  setLocalTextSearchQuery,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  searchTextMessagesLocal,\n  toggleManagement,\n  searchMessagesByDate,\n  shouldSkipAnimation,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const backButtonRef = useRef<HTMLDivElement>(null);\n\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeCalendar();\n  }, [closeCalendar, searchMessagesByDate]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query, noPushState: true });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query, noPushState: true });\n  }, [setGifSearchQuery]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : undefined // Never reached\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={openCalendar}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_MOBILE_SCREEN\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    (shouldSkipTransition || shouldSkipAnimation) && 'no-transition',\n  );\n\n  // Add class in the next AF to synchronize with animation with Transition components\n  useEffect(() => {\n    backButtonRef.current!.classList.toggle('state-back', isBackButton);\n  }, [isBackButton]);\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div ref={backButtonRef} className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipAnimation) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent}\n      </Transition>\n      {!IS_MOBILE_SCREEN && (\n        <CalendarModal\n          isOpen={isCalendarOpen}\n          isPastMode\n          submitButtonLabel={lang('JumpToDate')}\n          onClose={closeCalendar}\n          onSubmit={handleJumpToDate}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isChatPrivate(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n\n    return {\n      canManage,\n      isChannel,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalTextSearchQuery',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'searchTextMessagesLocal',\n    'toggleManagement',\n    'searchMessagesByDate',\n  ]),\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiChatMember, ApiMessage, ApiUser } from '../../../api/types';\nimport { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../modules/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  usersById?: Record<number, ApiUser>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: number,\n  lastSyncTime?: number,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(groupChatMembers.map(({ userId }) => userId), usersById);\n  }, [groupChatMembers, usersById]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForMembers(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  let viewportIds: number[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForMembers(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  memberIds?: number[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    memberIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !memberIds || viewportIds[0] === memberIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      ).reverse();\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport {\n  ApiUser, ApiChat, ApiMediaFormat, ApiPhoto,\n} from '../../api/types';\n\nimport {\n  getChatAvatarHash, isDeletedUser, getUserColorKey, getChatTitle, isChatPrivate, getUserFullName,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport buildClassName from '../../util/buildClassName';\nimport { getFirstLetters } from '../../util/textFormat';\nimport useMedia from '../../hooks/useMedia';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\n\nimport './ProfilePhoto.scss';\n\ntype OwnProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isFirstPhoto?: boolean;\n  isSavedMessages?: boolean;\n  photo?: ApiPhoto;\n  lastSyncTime?: number;\n  onClick: NoneToVoidFunction;\n};\n\nconst ProfilePhoto: FC<OwnProps> = ({\n  chat,\n  user,\n  photo,\n  isFirstPhoto,\n  isSavedMessages,\n  lastSyncTime,\n  onClick,\n}) => {\n  const lang = useLang();\n  const isDeleted = user && isDeletedUser(user);\n\n  function getMediaHash(size: 'normal' | 'big' = 'big', forceAvatar?: boolean) {\n    if (photo && !forceAvatar) {\n      return `photo${photo.id}?size=c`;\n    }\n\n    let hash: string | undefined;\n    if (!isSavedMessages && !isDeleted) {\n      if (user) {\n        hash = getChatAvatarHash(user, size);\n      } else if (chat) {\n        hash = getChatAvatarHash(chat, size);\n      }\n    }\n\n    return hash;\n  }\n\n  const imageHash = getMediaHash();\n  const fullMediaData = useMedia(imageHash, false, ApiMediaFormat.BlobUrl, lastSyncTime);\n  const avatarThumbnailData = useMedia(\n    !fullMediaData && isFirstPhoto ? getMediaHash('normal', true) : undefined,\n    false,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const thumbDataUri = useBlurSync(!fullMediaData && photo && photo.thumbnail && photo.thumbnail.dataUri);\n  const imageSrc = fullMediaData || avatarThumbnailData || thumbDataUri;\n  const prevImageSrc = usePrevious(imageSrc);\n\n  let content: string | undefined = '';\n\n  if (isSavedMessages) {\n    content = <i className=\"icon-avatar-saved-messages\" />;\n  } else if (isDeleted) {\n    content = <i className=\"icon-avatar-deleted-account\" />;\n  } else if (imageSrc) {\n    content = <img src={imageSrc} className=\"avatar-media\" alt=\"\" decoding=\"async\" />;\n  } else if (!imageSrc && user) {\n    const userFullName = getUserFullName(user);\n    content = userFullName ? getFirstLetters(userFullName, 2) : undefined;\n  } else if (!imageSrc && chat) {\n    const title = getChatTitle(lang, chat);\n    content = title && getFirstLetters(title, isChatPrivate(chat.id) ? 2 : 1);\n  } else {\n    content = (\n      <div className=\"spinner-wrapper\">\n        <Spinner color=\"white\" />\n      </div>\n    );\n  }\n\n  const fullClassName = buildClassName(\n    'ProfilePhoto',\n    `color-bg-${getUserColorKey(user || chat)}`,\n    isSavedMessages && 'saved-messages',\n    isDeleted && 'deleted-account',\n    (!isSavedMessages && !(imageSrc)) && 'no-photo',\n  );\n\n  return (\n    <div className={fullClassName} onClick={imageSrc ? onClick : undefined}>\n      {prevImageSrc && imageSrc && prevImageSrc !== imageSrc && (\n        <img src={prevImageSrc} className=\"prev-avatar-media\" alt=\"\" decoding=\"async\" />\n      )}\n      {typeof content === 'string' ? renderText(content, ['hq_emoji']) : content}\n    </div>\n  );\n};\n\nexport default memo(ProfilePhoto);\n","import React, {\n  FC, useEffect, useCallback, memo, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiChat } from '../../api/types';\nimport { GlobalActions, GlobalState } from '../../global/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { selectChat, selectUser } from '../../modules/selectors';\nimport {\n  getUserFullName, getUserStatus, isChatChannel, isUserOnline,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport usePhotosPreload from './hooks/usePhotosPreload';\nimport useLang from '../../hooks/useLang';\n\nimport VerifiedIcon from '../common/VerifiedIcon';\nimport ProfilePhoto from './ProfilePhoto';\nimport Transition from '../ui/Transition';\n\nimport './ProfileInfo.scss';\n\ntype OwnProps = {\n  userId: number;\n  forceShowSelf?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  chat?: ApiChat;\n  isSavedMessages?: boolean;\n  animationLevel: 0 | 1 | 2;\n} & Pick<GlobalState, 'lastSyncTime'>;\n\ntype DispatchProps = Pick<GlobalActions, 'loadFullUser' | 'openMediaViewer'>;\n\nconst PrivateChatInfo: FC<OwnProps & StateProps & DispatchProps> = ({\n  user,\n  chat,\n  isSavedMessages,\n  lastSyncTime,\n  animationLevel,\n  loadFullUser,\n  openMediaViewer,\n}) => {\n  const { id: userId } = user || {};\n  const { id: chatId } = chat || {};\n  const fullName = user ? getUserFullName(user) : (chat ? chat.title : '');\n  const photos = (user ? user.photos : (chat ? chat.photos : undefined)) || [];\n  const slideAnimation = animationLevel >= 1 ? 'slide' : 'none';\n\n  const [currentPhotoIndex, setCurrentPhotoIndex] = useState(0);\n  const isFirst = isSavedMessages || photos.length <= 1 || currentPhotoIndex === 0;\n  const isLast = isSavedMessages || photos.length <= 1 || currentPhotoIndex === photos.length - 1;\n\n  // Deleting the last profile photo may result in an error\n  useEffect(() => {\n    if (currentPhotoIndex > photos.length) {\n      setCurrentPhotoIndex(Math.max(0, photos.length - 1));\n    }\n  }, [currentPhotoIndex, photos.length]);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime && userId) {\n      loadFullUser({ userId });\n    }\n  }, [userId, loadFullUser, lastSyncTime]);\n\n  usePhotosPreload(user || chat, photos, currentPhotoIndex);\n\n  const handleProfilePhotoClick = useCallback(() => {\n    openMediaViewer({\n      avatarOwnerId: userId || chatId,\n      profilePhotoIndex: currentPhotoIndex,\n      origin: MediaViewerOrigin.ProfileAvatar,\n    });\n  }, [openMediaViewer, userId, chatId, currentPhotoIndex]);\n\n  const selectPreviousMedia = useCallback(() => {\n    if (isFirst) {\n      return;\n    }\n\n    setCurrentPhotoIndex(currentPhotoIndex - 1);\n  }, [currentPhotoIndex, isFirst]);\n\n  const selectNextMedia = useCallback(() => {\n    if (isLast) {\n      return;\n    }\n\n    setCurrentPhotoIndex(currentPhotoIndex + 1);\n  }, [currentPhotoIndex, isLast]);\n\n  // Support for swipe gestures and closing on click\n  useEffect(() => {\n    const element = document.querySelector<HTMLDivElement>(\n      '.profile-slide-container > .active, .profile-slide-container > .to',\n    );\n    if (!element) {\n      return undefined;\n    }\n\n    return captureEvents(element, {\n      excludedClosestSelector: '.navigation',\n      onSwipe: IS_TOUCH_ENV ? (e, direction) => {\n        if (direction === SwipeDirection.Right) {\n          selectPreviousMedia();\n        } else if (direction === SwipeDirection.Left) {\n          selectNextMedia();\n        }\n      } : undefined,\n    });\n  }, [selectNextMedia, selectPreviousMedia]);\n\n  if (!user && !chat) {\n    return undefined;\n  }\n\n  function renderPhotoTabs() {\n    if (isSavedMessages || !photos || photos.length <= 1) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"photo-dashes\">\n        {photos.map((_, i) => (\n          <span className={`photo-dash ${i === currentPhotoIndex ? 'current' : ''}`} />\n        ))}\n      </div>\n    );\n  }\n\n  function renderPhoto() {\n    const photo = !isSavedMessages && photos && photos.length > 0 ? photos[currentPhotoIndex] : undefined;\n\n    return (\n      <ProfilePhoto\n        key={currentPhotoIndex}\n        user={user}\n        chat={chat}\n        photo={photo}\n        isSavedMessages={isSavedMessages}\n        isFirstPhoto={isFirst}\n        onClick={handleProfilePhotoClick}\n      />\n    );\n  }\n\n  function renderStatus() {\n    if (user) {\n      return (\n        <div className={`status ${isUserOnline(user) ? 'online' : ''}`}>\n          <span className=\"user-status\" dir=\"auto\">{getUserStatus(lang, user)}</span>\n        </div>\n      );\n    }\n\n    return (\n      <span className=\"status\" dir=\"auto\">{\n        isChatChannel(chat!)\n          ? lang('Subscribers', chat!.membersCount, 'i')\n          : lang('Members', chat!.membersCount, 'i')\n      }\n      </span>\n    );\n  }\n\n  const isVerifiedIconShown = (user && user.isVerified) || (chat && chat.isVerified);\n\n  return (\n    <div className=\"ProfileInfo\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"photo-wrapper\">\n        {renderPhotoTabs()}\n        <Transition activeKey={currentPhotoIndex} name={slideAnimation} className=\"profile-slide-container\">\n          {renderPhoto}\n        </Transition>\n\n        {!isFirst && (\n          <button\n            type=\"button\"\n            className=\"navigation prev\"\n            aria-label={lang('AccDescrPrevious')}\n            onClick={selectPreviousMedia}\n          />\n        )}\n        {!isLast && (\n          <button\n            type=\"button\"\n            className=\"navigation next\"\n            aria-label={lang('Next')}\n            onClick={selectNextMedia}\n          />\n        )}\n      </div>\n\n      <div className=\"info\" dir={lang.isRtl ? 'rtl' : 'auto'}>\n        {isSavedMessages ? (\n          <div className=\"title\">\n            <h3 dir=\"auto\">{lang('SavedMessages')}</h3>\n          </div>\n        ) : (\n          <div className=\"title\">\n            <h3 dir=\"auto\">{fullName && renderText(fullName)}</h3>\n            {isVerifiedIconShown && <VerifiedIcon />}\n          </div>\n        )}\n        {!isSavedMessages && renderStatus()}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId, forceShowSelf }): StateProps => {\n    const { lastSyncTime } = global;\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const isSavedMessages = !forceShowSelf && user && user.isSelf;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      lastSyncTime, user, chat, isSavedMessages, animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadFullUser', 'openMediaViewer']),\n)(PrivateChatInfo));\n","import {\n  ApiChat, ApiMediaFormat, ApiPhoto, ApiUser,\n} from '../../../api/types';\nimport { useEffect } from '../../../lib/teact/teact';\nimport * as mediaLoader from '../../../util/mediaLoader';\n\nconst PHOTOS_TO_PRELOAD = 4;\n\nexport default function usePhotosPreload(\n  profile: ApiUser | ApiChat | undefined,\n  photos: ApiPhoto[],\n  currentIndex: number,\n) {\n  useEffect(() => {\n    photos.slice(currentIndex, currentIndex + PHOTOS_TO_PRELOAD).forEach((photo) => {\n      const mediaData = mediaLoader.getFromMemory(`photo${photo.id}?size=c`);\n      if (!mediaData) {\n        mediaLoader.fetch(`photo${photo.id}?size=c`, ApiMediaFormat.BlobUrl);\n      }\n    });\n  }, [currentIndex, photos]);\n}\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../global/types';\nimport { ApiChat, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../modules/selectors';\nimport {\n  getChatDescription, getChatLink, getHasAdminRight, isChatChannel, isChatPrivate, isUserRightBanned,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\n\nimport SafeLink from '../common/SafeLink';\nimport ListItem from '../ui/ListItem';\nimport Switcher from '../ui/Switcher';\n\ntype OwnProps = {\n  chatOrUserId: number;\n  forceShowSelf?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  chat?: ApiChat;\n  canInviteUsers?: boolean;\n} & Pick<GlobalState, 'lastSyncTime'>;\n\ntype DispatchProps = Pick<GlobalActions, 'loadFullUser' | 'updateChatMutedState' | 'showNotification'>;\n\nconst ChatExtra: FC<OwnProps & StateProps & DispatchProps> = ({\n  lastSyncTime,\n  user,\n  chat,\n  forceShowSelf,\n  canInviteUsers,\n  loadFullUser,\n  showNotification,\n  updateChatMutedState,\n}) => {\n  const {\n    id: userId,\n    fullInfo,\n    username,\n    phoneNumber,\n    isSelf,\n  } = user || {};\n  const {\n    id: chatId,\n    isMuted: currentIsMuted,\n    username: chatUsername,\n  } = chat || {};\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime && userId) {\n      loadFullUser({ userId });\n    }\n  }, [loadFullUser, userId, lastSyncTime]);\n\n  const handleNotificationChange = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !currentIsMuted });\n  }, [chatId, currentIsMuted, updateChatMutedState]);\n\n  if (!chat || chat.isRestricted || (isSelf && !forceShowSelf)) {\n    return undefined;\n  }\n\n  function copy(text: string, entity: string) {\n    copyTextToClipboard(text);\n    showNotification({ message: `${entity} was copied` });\n  }\n\n  const formattedNumber = phoneNumber && formatPhoneNumberWithCode(phoneNumber);\n  const link = getChatLink(chat);\n  const url = link.indexOf('http') === 0 ? link : `http://${link}`;\n  const printedUsername = username || chatUsername;\n  const description = (fullInfo && fullInfo.bio) || getChatDescription(chat);\n\n  return (\n    <div className=\"ChatExtra\">\n      {formattedNumber && !!formattedNumber.length && (\n        <ListItem icon=\"phone\" multiline narrow ripple onClick={() => copy(formattedNumber, lang('Phone'))}>\n          <span className=\"title\" dir=\"auto\">{formattedNumber}</span>\n          <span className=\"subtitle\">{lang('Phone')}</span>\n        </ListItem>\n      )}\n      {printedUsername && (\n        <ListItem\n          icon=\"mention\"\n          multiline\n          narrow\n          ripple\n          onClick={() => copy(`@${printedUsername}`, lang('Username'))}\n        >\n          <span className=\"title\" dir=\"auto\">{renderText(printedUsername)}</span>\n          <span className=\"subtitle\">{lang('Username')}</span>\n        </ListItem>\n      )}\n      {description && !!description.length && (\n        <ListItem\n          icon=\"info\"\n          multiline\n          narrow\n          isStatic\n        >\n          <span className=\"title\" dir=\"auto\">\n            {renderText(description, ['br', 'links', 'emoji'])}\n          </span>\n          <span className=\"subtitle\">{lang(userId ? 'UserBio' : 'Info')}</span>\n        </ListItem>\n      )}\n      {canInviteUsers && !printedUsername && !!link.length && (\n        <ListItem icon=\"mention\" multiline narrow ripple onClick={() => copy(link, lang('SetUrlPlaceholder'))}>\n          <div className=\"title\">\n            <SafeLink url={url} className=\"title\" text={link} />\n          </div>\n          <span className=\"subtitle\">{lang('SetUrlPlaceholder')}</span>\n        </ListItem>\n      )}\n      <ListItem icon=\"unmute\" ripple onClick={handleNotificationChange}>\n        <span>{lang('Notifications')}</span>\n        <Switcher\n          id=\"group-notifications\"\n          label={userId ? 'Toggle User Notifications' : 'Toggle Chat Notifications'}\n          checked={!currentIsMuted}\n          inactive\n        />\n      </ListItem>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatOrUserId }): StateProps => {\n    const { lastSyncTime } = global;\n\n    const chat = chatOrUserId ? selectChat(global, chatOrUserId) : undefined;\n    const user = isChatPrivate(chatOrUserId) ? selectUser(global, chatOrUserId) : undefined;\n\n    const canInviteUsers = chat && (\n      (!isChatChannel(chat) && !isUserRightBanned(chat, 'inviteUsers'))\n      || getHasAdminRight(chat, 'inviteUsers')\n    );\n\n    return {\n      lastSyncTime, chat, user, canInviteUsers,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadFullUser', 'updateChatMutedState', 'showNotification',\n  ]),\n)(ChatExtra));\n","import React, {\n  FC, useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiMessage,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n} from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport {\n  MediaViewerOrigin, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  isChatAdmin, isChatChannel, isChatGroup, isChatPrivate,\n} from '../../modules/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from './ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from './ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: number;\n  userId?: number;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  resolvedUserId?: number;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  members?: ApiChatMember[];\n  usersById?: Record<number, ApiUser>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalMediaSearchType' | 'loadMoreMembers' | 'searchMediaMessagesLocal' | 'openMediaViewer' |\n  'openAudioPlayer' | 'openUserInfo' | 'focusMessage' | 'loadProfilePhotos'\n)>;\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\n\nconst Profile: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  isChannel,\n  resolvedUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasMembersTab,\n  areMembersHidden,\n  members,\n  usersById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  setLocalMediaSearchType,\n  loadMoreMembers,\n  searchMediaMessagesLocal,\n  openMediaViewer,\n  openAudioPlayer,\n  openUserInfo,\n  focusMessage,\n  loadProfilePhotos,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n  ]), [hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown, loadMoreMembers, searchMediaMessagesLocal, tabType, mediaSearchType, members,\n    usersById, chatMessages, foundIds, chatId, lastSyncTime,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n        }\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContents = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function renderSharedMedia() {\n    if (!viewportIds || !canRenderContents || !chatMessages) {\n      // This is just a single-frame delay so we do not show spinner\n      const noSpinner = isFirstTab && viewportIds && !canRenderContents;\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && <Spinner />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty_search');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty_search');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty_search');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              renderingFor=\"sharedMedia\"\n              message={chatMessages[id]}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          viewportIds!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item\"\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContents ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContents ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div className=\"shared-media\">\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-reversed' : 'slide'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderSharedMedia}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: number, resolvedUserId?: number) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo\n        userId={resolvedUserId || chatId}\n        forceShowSelf={resolvedUserId !== chatId}\n      />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} forceShowSelf={resolvedUserId !== chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > div.active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, userId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const chatMessages = selectChatMessages(global, userId || chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById } = global.users;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat && chat.fullInfo && chat.fullInfo.members;\n    const areMembersHidden = hasMembersTab && chat && chat.fullInfo && !chat.fullInfo.canViewMembers;\n\n    let resolvedUserId;\n    if (userId) {\n      resolvedUserId = userId;\n    } else if (isChatPrivate(chatId)) {\n      resolvedUserId = chatId;\n    }\n\n    return {\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasMembersTab,\n      areMembersHidden,\n      ...(hasMembersTab && members && {\n        members,\n        usersById,\n      }),\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat && chat.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalMediaSearchType',\n    'loadMoreMembers',\n    'searchMediaMessagesLocal',\n    'openMediaViewer',\n    'openAudioPlayer',\n    'openUserInfo',\n    'focusMessage',\n    'loadProfilePhotos',\n  ]),\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nexport default () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ManagementScreens, ProfileState, RightColumnContent } from '../../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../modules/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport { HistoryWrapper } from '../../util/history';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: number;\n  threadId?: number;\n  currentProfileUserId?: number;\n  isChatSelected: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'toggleChatInfo' | 'toggleManagement' | 'openUserInfo' |\n  'closeLocalTextSearch' | 'closePollResults' |\n  'setStickerSearchQuery' | 'setGifSearchQuery'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps & DispatchProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  currentProfileUserId,\n  isChatSelected,\n  toggleChatInfo,\n  toggleManagement,\n  openUserInfo,\n  closeLocalTextSearch,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  closePollResults,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<number | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo || contentKey === RightColumnContent.UserInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((noPushState = false) => {\n    switch (contentKey) {\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown) {\n          setProfileState(ProfileState.Profile);\n          if (!noPushState) break;\n        }\n        toggleChatInfo({ noPushState }, true);\n        break;\n      case RightColumnContent.UserInfo:\n        if (isScrolledDown) {\n          setProfileState(ProfileState.Profile);\n          if (!noPushState) break;\n        }\n        openUserInfo({ id: undefined });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement({ noPushState }, true);\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n            if (!noPushState) {\n              HistoryWrapper.back();\n            }\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            if (!noPushState) {\n              HistoryWrapper.back();\n            }\n\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.GroupRecentActions:\n            if (!noPushState) {\n              HistoryWrapper.back();\n            }\n\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch({ noPushState });\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined, noPushState });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined, noPushState });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults({ noPushState });\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, openUserInfo, closePollResults,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n  ]);\n\n  const handleClose = useCallback(() => {\n    close(false);\n  }, [close]);\n\n  useHistoryBack((event, noAnimation, previousHistoryState) => {\n    if (previousHistoryState && previousHistoryState.type === 'right') {\n      if (noAnimation) {\n        setShouldSkipTransition(true);\n        setTimeout(() => setShouldSkipTransition(false), COLUMN_CLOSE_DELAY_MS);\n      }\n      close(true);\n    }\n  });\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleManagementScreenSelect = useCallback((screen: ManagementScreens) => {\n    if (screen !== managementScreen) {\n      HistoryWrapper.pushState({ type: 'right', contentKey });\n      setManagementScreen(screen);\n    }\n  }, [contentKey, managementScreen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isOpen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevContentKey, prevChatId]) => {\n    if (\n      (prevContentKey === RightColumnContent.ChatInfo && contentKey === RightColumnContent.UserInfo)\n      || (prevContentKey === RightColumnContent.UserInfo && contentKey === RightColumnContent.ChatInfo)\n      || (prevChatId !== chatId)\n    ) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [contentKey, chatId]);\n\n  // eslint-disable-next-line consistent-return\n  function renderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.ChatInfo:\n      case RightColumnContent.UserInfo:\n        return (\n          <Profile\n            key={currentProfileUserId || chatId!}\n            chatId={chatId!}\n            userId={currentProfileUserId}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            onScreenSelect={handleManagementScreenSelect}\n            onChatMemberSelect={handleSelectChatMember}\n          />\n        );\n\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch />;\n      case RightColumnContent.PollResults:\n        return <PollResults />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={handleClose}\n          shouldSkipAnimation={shouldSkipTransition}\n        />\n        <Transition\n          name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      currentProfileUserId: global.users.selectedId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n    'toggleChatInfo',\n    'toggleManagement',\n    'closeLocalTextSearch',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'closePollResults',\n  ]),\n)(RightColumn));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ErrorsAsync: FC = ({ isOpen }) => {\n  const Errors = useModuleLoader(Bundles.Extra, 'Errors', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Errors ? <Errors /> : undefined;\n};\n\nexport default memo(ErrorsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './ForwardPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardPicker = useModuleLoader(Bundles.Extra, 'ForwardPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardPicker ? <ForwardPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardPickerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import React, {\n  FC, useEffect, memo, useState,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiMessage } from '../../api/types';\n\nimport '../../modules/actions/all';\nimport {\n  ANIMATION_END_DELAY, DEBUG, INACTIVE_MARKER, PAGE_TITLE, SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectChatMessage,\n  selectCountNotMutedUnread,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport buildClassName from '../../util/buildClassName';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport Notifications from './Notifications.async';\nimport Errors from './Errors.async';\nimport ForwardPicker from './ForwardPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  animationLevel: number;\n  lastSyncTime?: number;\n  isLeftColumnShown: boolean;\n  isRightColumnShown: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasErrors: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadAnimatedEmojis' | 'openChat'>;\n\nconst ANIMATION_DURATION = 350;\nconst NOTIFICATION_INTERVAL = 1000;\n\nlet rightColumnAnimationTimeout: number | undefined;\nlet notificationInterval: number | undefined;\n\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps & DispatchProps> = ({\n  lastSyncTime,\n  loadAnimatedEmojis,\n  openChat,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  animationLevel,\n  hasNotifications,\n  hasErrors,\n  audioMessage,\n  safeLinkModalUrl,\n}) => {\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadAnimatedEmojis();\n    }\n  }, [lastSyncTime, loadAnimatedEmojis]);\n\n  const [isHistoryAnimationDisabled, setIsHistoryAnimationDisabled] = useState(false);\n\n  const {\n    transitionClassNames: middleColumnTransitionClassNames,\n  } = useShowTransition(!isLeftColumnShown, undefined, true, undefined, isHistoryAnimationDisabled);\n\n  const {\n    transitionClassNames: rightColumnTransitionClassNames,\n  } = useShowTransition(isRightColumnShown, undefined, true, undefined, isHistoryAnimationDisabled);\n\n\n  const className = buildClassName(\n    middleColumnTransitionClassNames.replace(/([\\w-]+)/g, 'middle-column-$1'),\n    rightColumnTransitionClassNames.replace(/([\\w-]+)/g, 'right-column-$1'),\n    isHistoryAnimationDisabled && 'history-animation-disabled',\n  );\n\n  useEffect(() => {\n    // For animating Symbol Menu on mobile\n    document.body.classList.toggle('is-middle-column-open', className.includes('middle-column-open'));\n    // For animating components in portals (i.e. Notification)\n    document.body.classList.toggle('is-right-column-shown', className.includes('right-column-open'));\n  }, [className]);\n\n  // Add `body` classes when toggling right column\n  useEffect(() => {\n    if (animationLevel > 0) {\n      document.body.classList.add('animating-right-column');\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n\n      if (rightColumnAnimationTimeout) {\n        clearTimeout(rightColumnAnimationTimeout);\n        rightColumnAnimationTimeout = undefined;\n      }\n\n      rightColumnAnimationTimeout = window.setTimeout(() => {\n        document.body.classList.remove('animating-right-column');\n        rightColumnAnimationTimeout = undefined;\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [animationLevel, isRightColumnShown]);\n\n  useBackgroundMode(() => {\n    const initialUnread = selectCountNotMutedUnread(getGlobal());\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = selectCountNotMutedUnread(getGlobal()) - initialUnread;\n        if (newUnread > 0) {\n          document.title = `${newUnread} notification${newUnread > 1 ? 's' : ''}`;\n          updateIcon(true);\n        }\n      } else {\n        document.title = PAGE_TITLE;\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, () => {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      document.title = PAGE_TITLE;\n    }\n\n    updateIcon(false);\n  });\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  useHistoryBack((event, noAnimation) => {\n    const { state } = event;\n\n    if (state.type !== 'right') {\n      if (state.type === 'chat') {\n        const { chatId: id, threadId, messageListType: type } = state;\n\n        openChat({\n          id, threadId, type, noPushState: true,\n        }, true);\n      } else {\n        openChat({\n          id: undefined,\n          noPushState: true,\n        }, true);\n      }\n    }\n\n    // Must disable pane closing animation for back/forward gestures on iOS\n    if (noAnimation) {\n      setIsHistoryAnimationDisabled(true);\n\n      setTimeout(() => {\n        setIsHistoryAnimationDisabled(false);\n      }, SLIDE_TRANSITION_DURATION);\n    }\n  });\n\n  return (\n    <div id=\"Main\" className={className} onDrop={stopEvent} onDragOver={stopEvent}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardPicker isOpen={isForwardModalOpen} />\n      <Notifications isOpen={hasNotifications} />\n      <Errors isOpen={hasErrors} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      animationLevel: global.settings.byKey.animationLevel,\n      lastSyncTime: global.lastSyncTime,\n      isLeftColumnShown: global.isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasErrors: Boolean(global.errors.length),\n      audioMessage,\n      safeLinkModalUrl: global.safeLinkModalUrl,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadAnimatedEmojis', 'openChat']),\n)(Main));\n","import { getDispatch, getGlobal } from '../lib/teact/teactn';\n\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nif (!getGlobal().connectionState) {\n  getDispatch().initApi();\n}\n"],"sourceRoot":""}