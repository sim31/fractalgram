{"version":3,"file":"913.9b7f00e5e83821e94a56.js","mappings":"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","sources":["webpack://telegram-t/./src/modules/actions/ui/localSearch.ts","webpack://telegram-t/./src/modules/actions/ui/chats.ts","webpack://telegram-t/./src/modules/actions/ui/messages.ts","webpack://telegram-t/./src/versionNotification.txt","webpack://telegram-t/./src/modules/actions/ui/globalSearch.ts","webpack://telegram-t/./src/modules/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/modules/actions/ui/users.ts","webpack://telegram-t/./src/modules/actions/ui/misc.ts","webpack://telegram-t/./src/modules/actions/ui/payments.ts","webpack://telegram-t/./src/modules/actions/api/messages.ts","webpack://telegram-t/./src/modules/actions/api/symbols.ts","webpack://telegram-t/./src/modules/actions/api/globalSearch.ts","webpack://telegram-t/./src/modules/actions/api/localSearch.ts","webpack://telegram-t/./src/modules/actions/api/management.ts","webpack://telegram-t/./src/modules/actions/api/sync.ts","webpack://telegram-t/./src/modules/actions/api/users.ts","webpack://telegram-t/./src/modules/reducers/bots.ts","webpack://telegram-t/./src/modules/actions/api/bots.ts","webpack://telegram-t/./src/modules/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/modules/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/modules/reducers/reactions.ts","webpack://telegram-t/./src/modules/actions/api/reactions.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/util/areDeepEqual.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/hooks/useThrottledMemo.ts","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/hooks/useWindowSize.ts","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/HeaderActions.tsx","webpack://telegram-t/./src/hooks/useWebpThumbnail.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/hooks/useAsync.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/calls/group/GroupCallTopPane.tsx","webpack://telegram-t/./src/components/middle/UnreadCount.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useVideoAutoPause.ts","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/common/LocalAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./node_modules/opus-recorder/dist/encoderWorker.min.js","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/helpers/getMessageTextAsHtml.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/hooks/useDebouncedMemo.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/common/CalendarModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/insertHtmlInSelection.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/CallFallbackConfirm.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addReducer } from '../../../lib/teact/teactn';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddReducer('closeLocalTextSearch', closeLocalTextSearch);\n\naddReducer('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddReducer('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddReducer('openChat', (global, actions, payload) => {\n  const {\n    id, threadId = -1, type = 'thread', shouldReplaceHistory = false,\n  } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n\n    setGlobal(global);\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory);\n});\n\naddReducer('openPreviousChat', (global) => {\n  return updateCurrentMessageList(global, undefined);\n});\n\naddReducer('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddReducer('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddReducer('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddReducer('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage, MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\n// @ts-ignore\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddReducer('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddReducer('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddReducer('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddReducer('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddReducer('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddReducer('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n  } = payload!;\n\n  return {\n    ...global,\n    mediaViewer: {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    },\n    forwardMessages: {},\n  };\n});\n\naddReducer('closeMediaViewer', (global) => {\n  return {\n    ...global,\n    mediaViewer: {},\n  };\n});\n\naddReducer('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? global.audioPlayer.origin,\n      volume: volume ?? global.audioPlayer.volume,\n      playbackRate: playbackRate || global.audioPlayer.playbackRate,\n      isMuted: isMuted || global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddReducer('setAudioPlayerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      volume,\n    },\n  };\n});\n\naddReducer('setAudioPlayerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      playbackRate,\n    },\n  };\n});\n\naddReducer('setAudioPlayerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      isMuted,\n    },\n  };\n});\n\naddReducer('setAudioPlayerOrigin', (global, actions, payload) => {\n  const {\n    origin,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      origin,\n    },\n  };\n});\n\naddReducer('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {\n      volume: global.audioPlayer.volume,\n      playbackRate: global.audioPlayer.playbackRate,\n      isMuted: global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddReducer('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      const newGlobal = getGlobal();\n\n      setGlobal({\n        ...newGlobal,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    setGlobal({\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    });\n  }\n});\n\naddReducer('closePollResults', (global) => {\n  setGlobal({\n    ...global,\n    pollResults: {},\n  });\n});\n\naddReducer('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddReducer('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage();\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids?.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddReducer('openForwardMenu', (global, actions, payload) => {\n  const { fromChatId, messageIds, groupedId } = payload!;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n    },\n  };\n});\n\naddReducer('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddReducer('setForwardChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddReducer('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddReducer('cancelMessageMediaDownload', (global, actions, payload) => {\n  const { message } = payload!;\n\n  const byChatId = global.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  });\n});\n\naddReducer('downloadMessageMedia', (global, actions, payload) => {\n  const { message } = payload!;\n  if (!message) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: [...(global.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  });\n});\n\naddReducer('downloadSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message }));\n});\n\naddReducer('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddReducer('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddReducer('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddReducer('exitMessageSelectMode', exitMessageSelectMode);\n\naddReducer('openPollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: true,\n  };\n});\n\naddReducer('closePollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: false,\n  };\n});\n\naddReducer('checkVersionNotification', (global, actions) => {\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(global.serverTimeOffset),\n    content: {\n      text: parseMessageInput(versionNotification),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message,\n    version: currentVersion,\n  });\n});\n\naddReducer('createServiceNotification', (global, actions, payload) => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  setGlobal({\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  });\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddReducer('openReactorListModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    reactorModal: { chatId, messageId },\n  };\n});\n\naddReducer('closeReactorListModal', (global) => {\n  return {\n    ...global,\n    reactorModal: undefined,\n  };\n});\n\naddReducer('openSeenByModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    seenByModal: { chatId, messageId },\n  };\n});\n\naddReducer('closeSeenByModal', (global) => {\n  return {\n    ...global,\n    seenByModal: undefined,\n  };\n});\n","export default \"**Telegram Web Z was updated to version 1.30**\\n\\n👏 **Harder**\\n• Meet Message Reactions:\\n  - React to a message with ❤️🔥🎉😁😱🤩😢👎💩🤮 in the context menu.\\n  - Send a quick 👍 reaction by hovering over the bottom corner of a message.\\n  - You can change your default reaction to another emoji in Settings > General.\\n  - Group and Channel admins can enable and control reactions via their chat's Info Page > Edit > Reactions.\\n\\n• Interactive Emoji:\\n  - Added support for all interactive emoji, including fullscreen animations and sound effects. Try 🔥, 🍆, 🍑 and more.\\n  - Animations play simultaneously when both users have the chat open.\\n  – The “is watching…” status will appear when your chat partner is also seeing the animations.\\n\\n• Manage invite links for Groups and Channels:\\n  – Enable admin approval or limited duration and users.\\n\\n🤩 **Better**\\n• Better quality for uploaded profile pictures.\\n• Various UI improvements.\\n\\n🚀 **Faster**\\n• Several optimizations for older devices – no more freezing while typing.\\n\\n💪 **Stronger**\\n• Saved Messages now correctly renders in search results.\\n• Fixed missing icons for muted chats in the chat list.\\n• The context menu no longer flickers on older devices.\\n• Fix re-scheduling messages to a previous date.\\n\";","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddReducer('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddReducer('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddReducer('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddReducer('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { updateSelectedUserId, updateUserSearch } from '../../reducers';\n\naddReducer('openUserInfo', (global, actions, payload) => {\n  const { id } = payload!;\n\n  actions.openChat({ id });\n});\n\nconst clearSelectedUserId = (global: GlobalState) => updateSelectedUserId(global, undefined);\n\naddReducer('openChat', clearSelectedUserId);\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport { ApiError } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectCurrentMessageList } from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\n\nconst MAX_STORED_EMOJIS = 18; // Represents two rows of recent emojis\n\naddReducer('toggleChatInfo', (global) => {\n  return {\n    ...global,\n    isChatInfoShown: !global.isChatInfoShown,\n  };\n});\n\naddReducer('setLeftColumnWidth', (global, actions, payload) => {\n  const leftColumnWidth = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddReducer('resetLeftColumnWidth', (global) => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddReducer('toggleManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddReducer('requestNextManagementScreen', (global, actions, payload): GlobalState | undefined => {\n  const { screen } = payload || {};\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  };\n});\n\naddReducer('closeManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddReducer('openChat', (global) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    isLeftColumnShown: global.messages.messageLists.length === 0,\n  };\n});\n\naddReducer('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddReducer('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload!;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddReducer('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload!;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddReducer('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('dismissNotification', (global, actions, payload) => {\n  const newNotifications = global.notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddReducer('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddReducer('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\n\naddReducer('openPaymentModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      chatId,\n      messageId,\n      isPaymentModalOpen: true,\n    },\n  };\n});\n\naddReducer('closePaymentModal', (global) => {\n  const newGlobal = clearPayment(global);\n  return closeInvoice(newGlobal);\n});\n\naddReducer('addPaymentError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      error,\n    },\n  };\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/environment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n  updateSponsoredMessage,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n  selectUser,\n  selectSendAs,\n  selectSponsoredMessage,\n} from '../../selectors';\nimport { debounce, rafPromise } from '../../../util/schedulers';\nimport { isServiceNotificationMessage } from '../../helpers';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddReducer('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    // Let reducer return and update global\n    await Promise.resolve();\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddReducer('loadMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const message = await loadMessage(chat, messageId, replyOriginForId);\n    if (message && threadUpdate) {\n      const { lastMessageId, isDeleting } = threadUpdate;\n\n      setGlobal(updateThreadUnreadFromForwardedMessage(\n        getGlobal(),\n        message,\n        chatId,\n        lastMessageId,\n        isDeleting,\n      ));\n    }\n  })();\n});\n\naddReducer('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments, MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddReducer('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(message.previousLocalId || message.id);\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddReducer('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  return global;\n});\n\naddReducer('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddReducer('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddReducer('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddReducer('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddReducer('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteHistory', (global, actions, payload) => {\n  (async () => {\n    const { chatId, shouldDeleteForAll } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const maxId = chat.lastMessage?.id;\n\n    await callApi('deleteHistory', { chat, shouldDeleteForAll, maxId });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('reportMessages', (global, actions, payload) => {\n  (async () => {\n    const {\n      messageIds, reason, description,\n    } = payload!;\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return;\n    }\n\n    const { chatId } = currentMessageList;\n    const chat = selectChat(global, chatId)!;\n\n    const result = await callApi('reportMessages', {\n      peer: chat, messageIds, reason, description,\n    });\n\n    actions.showNotification({\n      message: result\n        ? 'Thank you! Your report will be reviewed by our team.'\n        : 'Error occured while submiting report. Please, try again later.',\n    });\n  })();\n});\n\naddReducer('sendMessageAction', (global, actions, payload) => {\n  (async () => {\n    const { action, chatId, threadId } = payload!;\n    if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n    const chat = selectChat(global, chatId)!;\n    if (!chat) return;\n\n    await callApi('sendMessageAction', {\n      peer: chat, threadId, action,\n    });\n  })();\n});\n\naddReducer('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const { maxId } = payload!;\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n\n  // TODO Support local marking read for threads\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddReducer('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddReducer('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddReducer('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddReducer('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddReducer('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddReducer('forwardMessages', (global, action, payload) => {\n  const { fromChatId, messageIds, toChatId } = global.forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages) {\n    return;\n  }\n\n  const { isSilent, scheduledAt } = payload;\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      messages: realMessages,\n      serverTimeOffset: getGlobal().serverTimeOffset,\n      isSilent,\n      scheduledAt,\n      sendAs,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage({\n        chat: toChat,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n});\n\naddReducer('loadScheduledHistory', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadScheduledHistory(chat);\n});\n\naddReducer('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddReducer('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddReducer('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  let global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  serverTimeOffset?: number;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddReducer('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\naddReducer('loadSeenBy', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchSeenBy', { chat, messageId });\n    if (!result) {\n      return;\n    }\n\n    setGlobal(updateChatMessage(getGlobal(), chatId, messageId, {\n      seenByUserIds: result,\n    }));\n  })();\n});\n\naddReducer('saveDefaultSendAs', (global, actions, payload) => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddReducer('loadSendAs', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchSendAs', { chat });\n    if (!result) {\n      global = updateChat(global, chatId, {\n        sendAsIds: [],\n      });\n      setGlobal(global);\n      return;\n    }\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = updateChat(global, chatId, {\n      sendAsIds: result.ids,\n    });\n    setGlobal(global);\n  })();\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat) {\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n\naddReducer('loadSponsoredMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchSponsoredMessages', { chat });\n    if (!result) {\n      return;\n    }\n\n    let newGlobal = updateSponsoredMessage(getGlobal(), chatId, result.messages[0]);\n    newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users, 'id'));\n    newGlobal = addChats(newGlobal, buildCollectionByKey(result.chats, 'id'));\n\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('viewSponsoredMessage', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectStickerSet } from '../../selectors';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('loadStickerSets', (global) => {\n  const { hash } = global.stickers.added || {};\n  void loadStickerSets(hash);\n});\n\naddReducer('loadAddedStickers', (global, actions) => {\n  const { setIds: addedSetIds } = global.stickers.added;\n  if (!addedSetIds || !addedSetIds.length) {\n    return;\n  }\n\n  (async () => {\n    for (let i = 0; i < addedSetIds.length; i++) {\n      actions.loadStickers({ stickerSetId: addedSetIds[i] });\n\n      if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n        await pause(ADDED_SETS_THROTTLE);\n      }\n    }\n  })();\n});\n\naddReducer('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddReducer('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddReducer('loadGreetingStickers', (global) => {\n  const { hash } = global.stickers.greeting || {};\n\n  (async () => {\n    const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n\n    if (!greeting) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal({\n      ...newGlobal,\n      stickers: {\n        ...newGlobal.stickers,\n        greeting: {\n          hash: greeting.hash,\n          stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n        },\n      },\n    });\n  })();\n});\n\naddReducer('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddReducer('loadStickers', (global, actions, payload) => {\n  const { stickerSetId, stickerSetShortName } = payload!;\n  let { stickerSetAccessHash } = payload!;\n\n  if (!stickerSetAccessHash && !stickerSetShortName) {\n    const stickerSet = selectStickerSet(global, stickerSetId);\n    if (!stickerSet) {\n      return;\n    }\n\n    stickerSetAccessHash = stickerSet.accessHash;\n  }\n\n  void loadStickers(stickerSetId, stickerSetAccessHash, stickerSetShortName);\n});\n\naddReducer('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n  void loadAnimatedEmojiEffects();\n});\n\naddReducer('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddReducer('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddReducer('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddReducer('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddReducer('loadEmojiKeywords', (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  (async () => {\n    const emojiKeywords = await callApi('fetchEmojiKeywords', {\n      language,\n      fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n    });\n\n    global = getGlobal();\n    currentEmojiKeywords = global.emojiKeywords[language];\n\n    if (!emojiKeywords) {\n      setGlobal({\n        ...global,\n        emojiKeywords: {\n          ...global.emojiKeywords,\n          [language]: {\n            ...currentEmojiKeywords,\n            isLoading: false,\n          },\n        },\n      });\n\n      return;\n    }\n\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          isLoading: false,\n          version: emojiKeywords.version,\n          keywords: {\n            ...(currentEmojiKeywords?.keywords),\n            ...emojiKeywords.keywords,\n          },\n        },\n      },\n    });\n  })();\n});\n\nasync function loadStickerSets(hash?: string) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash?: string) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash?: string) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetId: string, accessHash: string, stickerSetShortName?: string) {\n  const stickerSet = await callApi(\n    'fetchStickers',\n    { stickerSetShortName, stickerSetId, accessHash },\n  );\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  let global = getGlobal();\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nasync function loadAnimatedEmojiEffects() {\n  const stickerSet = await callApi('fetchAnimatedEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal({\n    ...getGlobal(),\n    animatedEmojiEffects: { ...set, stickers },\n  });\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddReducer('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddReducer('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload!;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddReducer('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddReducer('openStickerSetShortName', (global, actions, payload) => {\n  const { stickerSetShortName } = payload!;\n  return {\n    ...global,\n    openedStickerSetShortName: stickerSetShortName,\n  };\n});\n\nasync function searchStickers(query: string, hash?: string) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash?: string) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash?: string) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddReducer('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const newGlobal = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(newGlobal);\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddReducer('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalChats.map(({ id }) => id),\n      userIds: globalUsers.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chatOrUser: chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearchPeerId,\n  selectCurrentMediaSearch, selectCurrentMessageList, selectChat, selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport { SharedMediaType } from '../../../types';\n\naddReducer('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddReducer('searchMediaMessagesLocal', (global) => {\n  const peerId = selectCurrentMediaSearchPeerId(global);\n  const chatOrUser = peerId\n    ? global.users.byId[peerId] || global.chats.byId[peerId]\n    : undefined;\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chatOrUser || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chatOrUser, type, offsetId);\n});\n\naddReducer('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chatOrUser: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || (query && query !== currentSearch.query)) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalTextSearchResults(global, chatOrUser.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chatOrUser: ApiChat | ApiUser,\n  type: SharedMediaType,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type,\n    limit: SHARED_MEDIA_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalMediaSearchResults(global, chatOrUser.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\n/**\n * @param timestamp start of target date in seconds\n */\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getDispatch().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateChat, updateManagement, updateManagementProgress } from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport { isChatBasicGroup } from '../../helpers';\n\naddReducer('checkPublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n\n    const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n    global = getGlobal();\n    global = updateManagementProgress(\n      global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n    );\n    global = updateManagement(global, chatId, { isUsernameAvailable });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    setGlobal(global);\n\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    const result = await callApi('setChatUsername', { chat, username });\n\n    global = getGlobal();\n    global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddReducer('setEditingExportedInvite', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  setGlobal(updateManagement(global, chatId, { editingInvite: invite }));\n});\n\naddReducer('setOpenedInviteInfo', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  setGlobal(updateManagement(global, chatId, update));\n});\n\naddReducer('loadExportedChatInvites', (global, actions, payload) => {\n  const {\n    chatId, adminId, isRevoked, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  (async () => {\n    const result = await callApi('fetchExportedChatInvites', {\n      peer, admin, isRevoked, limit,\n    });\n    if (!result) {\n      return;\n    }\n    const update = isRevoked ? { revokedInvites: result } : { invites: result };\n\n    setGlobal(updateManagement(getGlobal(), chatId, update));\n  })();\n});\n\naddReducer('editExportedChatInvite', (global, actions, payload) => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  (async () => {\n    const result = await callApi('editExportedChatInvite', {\n      peer,\n      link,\n      isRevoked,\n      expireDate,\n      usageLimit,\n      isRequestNeeded,\n      title,\n    });\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    let invites = global.management.byChatId[chatId].invites || [];\n    const revokedInvites = global.management.byChatId[chatId].revokedInvites || [];\n    const { oldInvite, newInvite } = result;\n    invites = invites.filter((current) => current.link !== oldInvite.link);\n    if (newInvite.isRevoked) {\n      revokedInvites.unshift(newInvite);\n    } else {\n      invites.push(newInvite);\n    }\n    setGlobal(updateManagement(global, chatId, {\n      invites,\n      revokedInvites,\n    }));\n  })();\n});\n\naddReducer('exportChatInvite', (global, actions, payload) => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  (async () => {\n    const result = await callApi('exportChatInvite', {\n      peer,\n      expireDate,\n      usageLimit,\n      isRequestNeeded,\n      title,\n    });\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    const invites = global.management.byChatId[chatId].invites || [];\n    setGlobal(updateManagement(global, chatId, {\n      invites: [...invites, result],\n    }));\n  })();\n});\n\naddReducer('deleteExportedChatInvite', (global, actions, payload) => {\n  const {\n    chatId, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  (async () => {\n    const result = await callApi('deleteExportedChatInvite', {\n      peer,\n      link,\n    });\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    const managementState = global.management.byChatId[chatId];\n    setGlobal(updateManagement(global, chatId, {\n      invites: managementState?.invites?.filter((invite) => invite.link !== link),\n      revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n    }));\n  })();\n});\n\naddReducer('deleteRevokedExportedChatInvites', (global, actions, payload) => {\n  const {\n    chatId, adminId,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  (async () => {\n    const result = await callApi('deleteRevokedExportedChatInvites', {\n      peer,\n      admin,\n    });\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    setGlobal(updateManagement(global, chatId, {\n      revokedInvites: [],\n    }));\n  })();\n});\n\naddReducer('loadChatInviteImporters', (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  (async () => {\n    const result = await callApi('fetchChatInviteImporters', {\n      peer,\n      link,\n      offsetDate,\n      offsetUser,\n      limit,\n    });\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n    if (!currentInviteInfo?.invite) return;\n    setGlobal(updateManagement(global, chatId, {\n      inviteInfo: {\n        ...currentInviteInfo,\n        importers: result,\n      },\n    }));\n  })();\n});\n\naddReducer('loadChatJoinRequests', (global, actions, payload) => {\n  const {\n    chatId, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  (async () => {\n    const result = await callApi('fetchChatInviteImporters', {\n      peer,\n      offsetDate,\n      offsetUser,\n      limit,\n      isRequested: true,\n    });\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    setGlobal(updateChat(global, chatId, { joinRequests: result }));\n  })();\n});\n\naddReducer('hideChatJoinRequest', (global, actions, payload) => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  (async () => {\n    const result = await callApi('hideChatJoinRequest', {\n      peer,\n      user,\n      isApproved,\n    });\n\n    if (!result) return;\n    global = getGlobal();\n    const targetChat = selectChat(global, chatId);\n    if (!targetChat) return;\n    setGlobal(updateChat(global, chatId, {\n      joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n    }));\n  })();\n});\n\naddReducer('hideAllChatJoinRequests', (global, actions, payload) => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  (async () => {\n    const result = await callApi('hideAllChatJoinRequests', {\n      peer,\n      isApproved,\n      link,\n    });\n\n    if (!result) return;\n    global = getGlobal();\n    const targetChat = selectChat(global, chatId);\n    if (!targetChat) return;\n\n    setGlobal(updateChat(global, chatId, {\n      joinRequests: [],\n      fullInfo: {\n        ...targetChat.fullInfo,\n        recentRequesterIds: [],\n        requestsPending: 0,\n      },\n    }));\n  })();\n});\n","import {\n  addReducer, getGlobal, setGlobal, getDispatch,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiFormattedText, ApiMessage, ApiUser, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport {\n  CHAT_LIST_LOAD_SLICE, DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateAppBadge } from '../../../util/appBadge';\nimport {\n  replaceChatListIds,\n  replaceChats,\n  replaceUsers,\n  replaceUserStatuses,\n  updateUsers,\n  addUserStatuses,\n  updateChats,\n  updateChatListSecondaryInfo,\n  updateThreadInfos,\n  replaceThreadParam,\n  updateListedIds,\n  safeReplaceViewportIds,\n  addChatMessagesById,\n} from '../../reducers';\nimport {\n  selectUser,\n  selectChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectChatMessage,\n  selectThreadInfo,\n  selectCountNotMutedUnreadOptimized,\n  selectLastServiceNotification,\n} from '../../selectors';\nimport { isUserId } from '../../helpers';\n\naddReducer('sync', (global, actions) => {\n  void sync(actions.afterSync);\n});\n\naddReducer('afterSync', () => {\n  void afterSync();\n});\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 10 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\nasync function sync(afterSyncCallback: () => void) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  setGlobal({ ...getGlobal(), isSyncing: true });\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    setGlobal({ ...getGlobal(), isSyncing: false });\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  await callApi('fetchCurrentUser');\n\n  // This fetches only active chats and clears archived chats, which will be fetched in `afterSync`\n  const savedUsers = await loadAndReplaceChats();\n  await loadAndReplaceMessages(savedUsers);\n\n  setGlobal({\n    ...getGlobal(),\n    lastSyncTime: Date.now(),\n    isSyncing: false,\n  });\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH SYNC');\n  }\n\n  afterSyncCallback();\n}\n\nasync function afterSync() {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START AFTER-SYNC');\n  }\n\n  await Promise.all([\n    loadAndUpdateUsers(),\n    loadAndReplaceArchivedChats(),\n  ]);\n\n  await callApi('fetchCurrentUser');\n\n  updateAppBadge(selectCountNotMutedUnreadOptimized(getGlobal()));\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH AFTER-SYNC');\n  }\n}\n\nasync function loadAndReplaceChats() {\n  let global = getGlobal();\n\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    withPinned: true,\n    serverTimeOffset: global.serverTimeOffset,\n    lastLocalServiceMessage: selectLastServiceNotification(global)?.message,\n  });\n\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  const { currentUserId } = global;\n\n  const savedPrivateChatIds = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n    ...(currentUserId ? [currentUserId] : []),\n  ];\n\n  const savedUsers = savedPrivateChatIds\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  const savedChats = savedPrivateChatIds\n    .map((id) => selectChat(global, id))\n    .filter<ApiChat>(Boolean as any);\n\n  const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n  if (currentChatId) {\n    const selectedChat = selectChat(global, currentChatId);\n    if (selectedChat && !savedPrivateChatIds.includes(currentChatId)) {\n      savedChats.push(selectedChat);\n    }\n\n    if (isUserId(currentChatId)) {\n      const selectedChatUser = selectUser(global, currentChatId);\n      if (selectedChatUser && !savedPrivateChatIds.includes(currentChatId)) {\n        savedUsers.push(selectedChatUser);\n      }\n    }\n  }\n\n  savedUsers.push(...result.users);\n  savedChats.push(...result.chats);\n\n  global = replaceUserStatuses(global, result.userStatusesById);\n\n  global = replaceChats(global, buildCollectionByKey(savedChats, 'id'));\n  global = replaceChatListIds(global, 'active', result.chatIds);\n  global = updateChatListSecondaryInfo(global, 'active', result);\n\n  Object.keys(result.draftsById).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId]);\n  });\n\n  Object.keys(result.replyingToById).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  setGlobal(global);\n\n  if (currentChatId && !global.chats.byId[currentChatId]) {\n    getDispatch().openChat({ id: undefined });\n  }\n\n  return savedUsers;\n}\n\nasync function loadAndReplaceArchivedChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    archived: true,\n    withPinned: true,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addUserStatuses(global, result.userStatusesById);\n\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = replaceChatListIds(global, 'archived', result.chatIds);\n  global = updateChatListSecondaryInfo(global, 'archived', result);\n\n  setGlobal(global);\n}\n\nasync function loadAndReplaceMessages(savedUsers?: ApiUser[]) {\n  let areMessagesLoaded = false;\n  let users = savedUsers || [];\n\n  let global = getGlobal();\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, ApiFormattedText>>((acc, chatId) => {\n    const draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    if (draft) {\n      acc[chatId] = draft;\n    }\n\n    return acc;\n  }, {});\n\n  if (currentChatId) {\n    const result = await loadTopMessages(global.chats.byId[currentChatId]);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n        ? global.serviceNotifications.map(({ message }) => message)\n        : [];\n      const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n      const byId = buildCollectionByKey(allMessages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {},\n        },\n      };\n\n      global = addChatMessagesById(global, currentChatId, byId);\n      global = updateListedIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n      global = safeReplaceViewportIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin).map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin?.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo?.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n      users = Array.prototype.concat(users, result.users);\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', draftsByChatId[chatId]);\n  });\n\n  if (savedUsers) {\n    global = replaceUsers(global, buildCollectionByKey(users, 'id'));\n  } else if (users) {\n    // If `fetchChats` has failed for some reason, we don't have saved chats, thus we can not replace\n    global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getDispatch().closeAudioPlayer();\n  }\n}\n\nasync function loadAndUpdateUsers() {\n  let global = getGlobal();\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  if (\n    (!contactIds || !contactIds.length)\n    && (!recentlyFoundChatIds || !recentlyFoundChatIds.length)\n  ) {\n    return;\n  }\n\n  const users = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n  ].map((id) => selectUser(global, id)).filter<ApiUser>(Boolean as any);\n\n  const result = await callApi('fetchUsers', { users });\n  if (!result) {\n    return;\n  }\n\n  const { users: updatedUsers, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  setGlobal(global);\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { debounce, throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, pick, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport {\n  addChats, addUsers, replaceUserStatuses, updateChat, updateManagementProgress, updateUser, updateUsers,\n  updateUserSearch, updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\n\nconst runDebouncedForFetchFullUser = debounce((cb) => cb(), 500, false, true);\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddReducer('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  runDebouncedForFetchFullUser(() => callApi('fetchFullUser', { id, accessHash }));\n});\n\naddReducer('loadUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchUsers', { users: [user] });\n    if (!result) {\n      return;\n    }\n\n    const { users, userStatusesById } = result;\n\n    global = getGlobal();\n\n    global = updateUsers(global, buildCollectionByKey(users, 'id'));\n    setGlobal(replaceUserStatuses(global, {\n      ...global.users.statusesById,\n      ...userStatusesById,\n    }));\n\n    setGlobal(global);\n  })();\n});\n\naddReducer('loadTopUsers', (global) => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!lastRequestedAt || getServerTime(global.serverTimeOffset) - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers();\n  }\n});\n\naddReducer('loadContactList', () => {\n  void loadContactList();\n});\n\naddReducer('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddReducer('loadCommonChats', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  (async () => {\n    const maxId = user.commonChats?.maxId;\n    const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n    if (!result) {\n      return;\n    }\n\n    const { chats, chatIds, isFullyLoaded } = result;\n\n    global = getGlobal();\n    if (chats.length) {\n      global = addChats(global, buildCollectionByKey(chats, 'id'));\n    }\n    global = updateUser(global, user.id, {\n      commonChats: {\n        maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n        ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n        isFullyLoaded,\n      },\n    });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted, firstName, lastName,\n  } = payload!;\n\n  void updateContact(userId, isMuted, firstName, lastName);\n});\n\naddReducer('deleteContact', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteContact(userId);\n});\n\nasync function loadTopUsers() {\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList() {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: string,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getDispatch().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  let result;\n  if (user.phoneNumber) {\n    result = await callApi('updateContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('addContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n    });\n  }\n\n  if (result) {\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n}\n\nasync function deleteContact(userId: string) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n}\n\naddReducer('loadProfilePhotos', (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n\n  if (!user && !chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchProfilePhotos', user, chat);\n    if (!result || !result.photos) {\n      return;\n    }\n\n    let newGlobal = getGlobal();\n    if (isPrivate) {\n      newGlobal = updateUser(newGlobal, profileId, { photos: result.photos });\n    } else {\n      newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users!, 'id'));\n      newGlobal = updateChat(newGlobal, profileId, { photos: result.photos });\n    }\n\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\naddReducer('addContact', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  void callApi('addContact', pick(user, ['id', 'accessHash', 'firstName', 'lastName', 'phoneNumber']));\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import { GlobalState } from '../../global/types';\nimport { InlineBotSettings } from '../../types';\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiContact, ApiUser } from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  RE_TG_LINK, RE_TME_LINK,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList,\n  selectReplyingToId, selectSendAs, selectUser,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddReducer('clickInlineButton', (global, actions, payload) => {\n  const { button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.value });\n      break;\n    case 'url':\n      if (button.value.match(RE_TME_LINK) || button.value.match(RE_TG_LINK)) {\n        actions.openTelegramLink({ url: button.value });\n      } else {\n        actions.toggleSafeLinkModal({ url: button.value });\n      }\n      break;\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, button.messageId, button.value);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal();\n      break;\n    case 'requestSelfContact': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      const { messageId, value } = button;\n      if (!chat) {\n        return;\n      }\n\n      if (value) {\n        actions.getReceipt({ receiptMessageId: value, chatId: chat.id, messageId });\n      } else {\n        actions.getPaymentForm({ chat, messageId });\n        actions.setInvoiceMessageInfo(selectChatMessage(global, chat.id, messageId));\n        actions.openPaymentModal({ chatId: chat.id, messageId });\n      }\n      break;\n    }\n  }\n});\n\naddReducer('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentUserId || !chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId: chat.id, threadId, value: false });\n\n  void sendBotCommand(\n    chat, currentUserId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chatId),\n  );\n});\n\naddReducer('restartBot', (global, actions, payload) => {\n  const { chatId } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('unblockContact', bot.id, bot.accessHash);\n    if (!result) {\n      return;\n    }\n\n    setGlobal(removeBlockedContact(getGlobal(), bot.id));\n    void sendBotCommand(chat, currentUserId, '/start', undefined, selectSendAs(global, chatId));\n  })();\n});\n\naddReducer('loadTopInlineBots', (global) => {\n  const { lastRequestedAt } = global.topInlineBots;\n\n  if (lastRequestedAt && getServerTime(global.serverTimeOffset) - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchTopInlineBots');\n    if (!result) {\n      return;\n    }\n\n    const { ids, users } = result;\n\n    let newGlobal = getGlobal();\n    newGlobal = addUsers(newGlobal, buildCollectionByKey(users, 'id'));\n    newGlobal = {\n      ...newGlobal,\n      topInlineBots: {\n        ...newGlobal.topInlineBots,\n        userIds: ids,\n        lastRequestedAt: getServerTime(global.serverTimeOffset),\n      },\n    };\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('queryInlineBot', ((global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  (async () => {\n    let inlineBotData = global.inlineBots.byUsername[username];\n\n    if (inlineBotData === false) {\n      return;\n    }\n\n    if (inlineBotData === undefined) {\n      const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n      global = getGlobal();\n      if (!inlineBot || !chat) {\n        setGlobal(replaceInlineBotSettings(global, username, false));\n        return;\n      }\n\n      global = addUsers(global, { [inlineBot.id]: inlineBot });\n      global = addChats(global, { [chat.id]: chat });\n      inlineBotData = {\n        id: inlineBot.id,\n        query: '',\n        offset: '',\n        switchPm: undefined,\n        canLoadMore: true,\n        results: [],\n      };\n\n      global = replaceInlineBotSettings(global, username, inlineBotData);\n      setGlobal(global);\n    }\n\n    if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n      return;\n    }\n\n    void runDebouncedForSearch(() => {\n      searchInlineBot({\n        username,\n        inlineBotData: inlineBotData as InlineBotSettings,\n        chatId,\n        query,\n        offset,\n      });\n    });\n  })();\n}));\n\naddReducer('sendInlineBotResult', (global, actions, payload) => {\n  const { id, queryId } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  });\n});\n\naddReducer('resetInlineBot', (global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n});\n\naddReducer('startBot', (global, actions, payload) => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  (async () => {\n    await callApi('startBot', {\n      bot,\n      startParam: param,\n    });\n  })();\n});\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, currentUserId: string, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data: string) {\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { showDialog, showNotification, toggleSafeLinkModal } = getDispatch();\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' } });\n  } else if (message) {\n    showNotification({ message });\n  } else if (url) {\n    toggleSafeLinkModal({ url });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddReducer('loadPasswordInfo', () => {\n  (async () => {\n    const result = await callApi('getPasswordInfo');\n    if (!result) {\n      return;\n    }\n\n    let global = getGlobal();\n    global = replaceSettings(global, { hasPassword: result.hasPassword });\n    global = updateTwoFaSettings(global, { hint: result.hint });\n    setGlobal(global);\n  })();\n});\n\naddReducer('checkPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('checkPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('clearPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('clearPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updatePassword', (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updateRecoveryEmail', (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddReducer('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { PaymentStep } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  selectPaymentMessageId,\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectPaymentChatId,\n  selectChat,\n  selectPaymentFormId,\n} from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setInvoiceMessageInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n} from '../../reducers';\n\naddReducer('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  if (!chat || !messageId) {\n    return;\n  }\n  void validateRequestedInfo(chat, messageId, requestInfo, saveInfo);\n});\n\nasync function validateRequestedInfo(chat: ApiChat, messageId: number, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', {\n    chat, messageId, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddReducer('getPaymentForm', (global, actions, payload) => {\n  const { chat, messageId } = payload;\n  if (!chat || !messageId) {\n    return;\n  }\n  void getPaymentForm(chat, messageId);\n});\n\nasync function getPaymentForm(chat: ApiChat, messageId: number) {\n  const result = await callApi('getPaymentForm', { chat, messageId });\n  if (!result) {\n    return;\n  }\n  let global = setPaymentForm(getGlobal(), result);\n  let step = PaymentStep.PaymentInfo;\n  if (global.payment.invoice\n    && (global.payment.invoice.shippingAddressRequested\n    || global.payment.invoice.nameRequested\n    || global.payment.invoice.phoneRequested\n    || global.payment.invoice.emailRequested)) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n}\n\naddReducer('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  void getReceipt(chat, messageId, receiptMessageId);\n});\n\nasync function getReceipt(chat: ApiChat, messageId: number, receiptMessageId: number) {\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddReducer('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddReducer('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddReducer('sendCredentialsInfo', (global, actions, payload) => {\n  const publishableKey = selectProviderPublishableKey(global);\n  if (!publishableKey) {\n    return;\n  }\n  const { credentials } = payload;\n  const { data } = credentials;\n  void sendStripeCredentials(data, publishableKey);\n});\n\naddReducer('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  const formId = selectPaymentFormId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const publishableKey = selectProviderPublishableKey(global);\n  const stripeCredentials = selectStripeCredentials(global);\n  if (!chat || !messageId || !publishableKey || !formId) {\n    return;\n  }\n\n  void sendPaymentForm(chat, messageId, formId, {\n    save: saveCredentials,\n    data: stripeCredentials,\n  }, requestInfoId, shippingOptionId);\n});\n\nasync function sendStripeCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  },\n  publishableKey: string,\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  chat: ApiChat,\n  messageId: number,\n  formId: string,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    chat, messageId, formId, credentials, requestedInfoId, shippingOptionId,\n  });\n  if (result) {\n    const global = clearPayment(getGlobal());\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddReducer('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddReducer('setInvoiceMessageInfo', (global, actions, payload) => {\n  return setInvoiceMessageInfo(global, payload);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import { updateChatMessage } from './messages';\nimport { GlobalState } from '../../global/types';\nimport { selectChatMessage } from '../selectors';\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport windowSize from '../../util/windowSize';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  return x - ((global.isLeftColumnShown && !IS_SINGLE_COLUMN_LAYOUT)\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction(global: GlobalState, chatId: string, messageId: number, reaction: string) {\n  const { reactions } = selectChatMessage(global, chatId, messageId) || {};\n\n  if (!reactions) {\n    return global;\n  }\n\n  // Update UI without waiting for server response\n  let results = reactions.results.map((l) => (l.reaction === reaction\n    ? {\n      ...l,\n      count: l.isChosen ? l.count : l.count + 1,\n      isChosen: true,\n    } : (l.isChosen ? {\n      ...l,\n      isChosen: false,\n      count: l.count - 1,\n    } : l)))\n    .filter((l) => l.count > 0);\n\n  let { recentReactions } = reactions;\n\n  if (reaction && !results.some((l) => l.reaction === reaction)) {\n    const { currentUserId } = global;\n\n    results = [...results, {\n      reaction,\n      isChosen: true,\n      count: 1,\n    }];\n\n    if (reactions.canSeeList) {\n      recentReactions = [...(recentReactions || []), {\n        userId: currentUserId!,\n        reaction,\n      }];\n    }\n  }\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { ApiAppConfig, ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectDefaultReaction,\n  selectLocalAnimatedEmojiEffectByName,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction } from '../../reducers/reactions';\nimport { addUsers, updateChatMessage } from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\n\naddReducer('loadAvailableReactions', () => {\n  (async () => {\n    const result = await callApi('getAvailableReactions');\n\n    if (!result) {\n      return;\n    }\n\n    // Preload animations\n    result.forEach((availableReaction) => {\n      if (availableReaction.aroundAnimation) {\n        mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.Lottie);\n      }\n      if (availableReaction.centerIcon) {\n        mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.Lottie);\n      }\n    });\n\n    setGlobal({\n      ...getGlobal(),\n      availableReactions: result,\n    });\n  })();\n});\n\naddReducer('interactWithAnimatedEmoji', (global, actions, payload) => {\n  const {\n    emoji, x, y, localEffect, startSize, isReversed,\n  } = payload!;\n\n  return {\n    ...global,\n    activeEmojiInteraction: {\n      animatedEffect: emoji || localEffect,\n      x: subtractXForEmojiInteraction(global, x),\n      y,\n      startSize,\n      isReversed,\n    },\n  };\n});\n\naddReducer('sendEmojiInteraction', (global, actions, payload) => {\n  const {\n    messageId, chatId, emoji, interactions, localEffect,\n    x, y, startX, startY, startSize,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || (!emoji && !localEffect)) {\n    return undefined;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji || selectLocalAnimatedEmojiEffectByName(localEffect),\n    timestamps: interactions,\n  });\n\n  if (!global.activeEmojiInteraction) return undefined;\n\n  return {\n    ...global,\n    activeEmojiInteraction: {\n      ...global.activeEmojiInteraction,\n      endX: subtractXForEmojiInteraction(global, x),\n      endY: y,\n      ...(startX && { x: subtractXForEmojiInteraction(global, startX) }),\n      ...(startY && { y: startY }),\n      ...(startSize && { startSize }),\n    },\n  };\n});\n\naddReducer('sendDefaultReaction', (global, actions, payload) => {\n  const {\n    chatId, messageId, x, y,\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n\n  if (!reaction) return;\n\n  actions.sendReaction({\n    chatId,\n    messageId,\n    reaction,\n    x,\n    y,\n  });\n});\n\naddReducer('sendReaction', (global, actions, payload) => {\n  const {\n    chatId, messageId,\n  }: { messageId: number; chatId: string } = payload;\n\n  let { reaction } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  if (message.reactions?.results?.some((l) => l.reaction === reaction && l.isChosen)) {\n    reaction = undefined;\n  }\n\n  void callApi('sendReaction', { chat, messageId, reaction });\n\n  const { animationLevel } = global.settings.byKey;\n\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    global = {\n      ...global,\n      activeReactions: {\n        ...(reaction ? global.activeReactions : omit(global.activeReactions, [messageId])),\n        ...(reaction && {\n          [messageId]: {\n            reaction,\n            messageId,\n          },\n        }),\n      },\n    };\n  }\n\n  return addMessageReaction(global, chatId, messageId, reaction);\n});\n\naddReducer('openChat', (global) => {\n  return {\n    ...global,\n    activeReactions: {},\n  };\n});\n\naddReducer('stopActiveReaction', (global, actions, payload) => {\n  const { messageId, reaction } = payload;\n\n  if (global.activeReactions[messageId]?.reaction !== reaction) {\n    return global;\n  }\n\n  return {\n    ...global,\n    activeReactions: omit(global.activeReactions, [messageId]),\n  };\n});\n\naddReducer('setDefaultReaction', (global, actions, payload) => {\n  const { reaction } = payload;\n\n  (async () => {\n    const result = await callApi('setDefaultReaction', { reaction });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    setGlobal({\n      ...global,\n      appConfig: {\n        ...global.appConfig,\n        defaultReaction: reaction,\n      } as ApiAppConfig,\n    });\n  })();\n});\n\naddReducer('stopActiveEmojiInteraction', (global) => {\n  return {\n    ...global,\n    activeEmojiInteraction: undefined,\n  };\n});\n\naddReducer('loadReactors', (global, actions, payload) => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n\n  (async () => {\n    const result = await callApi('fetchMessageReactionsList', {\n      reaction,\n      chat,\n      messageId,\n      offset,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    if (result.users?.length) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    }\n\n    const { nextOffset, count, reactions } = result;\n\n    setGlobal(updateChatMessage(global, chatId, messageId, {\n      reactors: {\n        nextOffset,\n        count,\n        reactions: [\n          ...(message.reactors?.reactions || []),\n          ...reactions,\n        ],\n      },\n    }));\n  })();\n});\n\naddReducer('loadMessageReactions', (global, actions, payload) => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddReducer('sendWatchingEmojiInteraction', (global, actions, payload) => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !global.activeEmojiInteraction) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return {\n    ...global,\n    activeEmojiInteraction: {\n      ...global.activeEmojiInteraction,\n      x: subtractXForEmojiInteraction(global, x),\n      y,\n      startSize,\n      isReversed,\n    },\n  };\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutNewMessage } from '../../../util/notifications';\nimport { updateAppBadge } from '../../../util/appBadge';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectCountNotMutedUnreadOptimized,\n} from '../../selectors';\nimport { throttle } from '../../../util/schedulers';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1500;\n\nconst runThrottledForUpdateAppBadge = throttle((cb) => cb(), 500, true);\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      const newGlobal = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(newGlobal);\n\n      runThrottledForUpdateAppBadge(() => updateAppBadge(selectCountNotMutedUnreadOptimized(getGlobal())));\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n      break;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n      break;\n    }\n\n    case 'updateChatLeave': {\n      setGlobal(leaveChat(global, update.id));\n\n      break;\n    }\n\n    case 'updateChatInbox': {\n      setGlobal(updateChat(global, update.id, update.chat));\n\n      runThrottledForUpdateAppBadge(() => updateAppBadge(selectCountNotMutedUnreadOptimized(getGlobal())));\n\n      break;\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        const newGlobal = getGlobal();\n        const chat = selectChat(newGlobal, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(newGlobal, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      break;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        setGlobal(updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n          ...(update.message.hasUnreadMention && {\n            unreadMentionsCount: chat.unreadMentionsCount ? chat.unreadMentionsCount + 1 : 1,\n          }),\n        }));\n      }\n\n      updateAppBadge(selectCountNotMutedUnreadOptimized(getGlobal()));\n      notifyAboutNewMessage({\n        chat,\n        message,\n      });\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: chat.unreadMentionsCount - 1,\n          });\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return;\n      }\n\n      setGlobal(updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      }));\n\n      break;\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      global = {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (listType) {\n        const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n        let newOrderedPinnedIds = orderedPinnedIds || [];\n        if (!isPinned) {\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n        } else if (!newOrderedPinnedIds.includes(id)) {\n          // When moving pinned chats to archive, active ordered pinned ids don't get updated\n          // (to preserve chat pinned state when it returns from archive)\n          // If user already has max pinned chats, we should check for orderedIds\n          // that don't point to listed chats\n          if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n            const listIds = global.chats.listIds.active;\n            newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n          }\n\n          newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n        }\n\n        global = {\n          ...global,\n          chats: {\n            ...global.chats,\n            orderedPinnedIds: {\n              ...global.chats.orderedPinnedIds,\n              [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n            },\n          },\n        };\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      setGlobal(updateChatListType(global, id, folderId));\n\n      break;\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        setGlobal(updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        }));\n      }\n\n      break;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        setGlobal(updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        }));\n      }\n      break;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n        global = updateChat(global, chatId, { draftDate: date });\n\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n      break;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (chat) {\n        global = updateChat(global, chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            requestsPending,\n            recentRequesterIds,\n          },\n        });\n        setGlobal(global);\n        actions.loadChatJoinRequests({ chatId });\n      }\n    }\n  }\n});\n","export function areDeepEqual<T extends any>(value1: T, value2: T): boolean {\n  const type1 = typeof value1;\n  const type2 = typeof value2;\n  if (type1 !== type2) {\n    return false;\n  }\n\n  if (type1 !== 'object') {\n    return value1 === value2;\n  }\n\n  const isArray1 = Array.isArray(value1);\n  const isArray2 = Array.isArray(value2);\n\n  if (isArray1 !== isArray2) {\n    return false;\n  }\n\n  if (isArray1) {\n    const array1 = value1 as any[];\n    const array2 = value2 as any[];\n\n    if (array1.length !== array2.length) {\n      return false;\n    }\n\n    return array1.every((member1, i) => areDeepEqual(member1, array2[i]));\n  }\n\n  const object1 = value1 as AnyLiteral;\n  const object2 = value2 as AnyLiteral;\n  const keys1 = Object.keys(object1);\n\n  return keys1.every((key1) => areDeepEqual(object1[key1], object2[key1]));\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiUpdate, ApiMessage, ApiPollResult, ApiThreadInfo, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport { ActiveEmojiInteraction, GlobalActions, GlobalState } from '../../../global/types';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  isMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsChatWithBot,\n  selectIsServiceChatReady,\n  selectLocalAnimatedEmojiEffect,\n  selectLocalAnimatedEmoji,\n} from '../../selectors';\nimport { getMessageContent, isUserId, isMessageLocal } from '../../helpers';\n\nconst ANIMATION_DELAY = 350;\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      setGlobal(global);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (isMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (message.isOutgoing && !(message.content?.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n              isResizingContainer: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isMessageLocal(message as ApiMessage)) {\n          setTimeout(() => {\n            let delayedGlobal = getGlobal();\n            if (shouldForceReply) {\n              delayedGlobal = replaceThreadParam(delayedGlobal, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n            }\n            setGlobal(updateChatLastMessage(delayedGlobal, chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n      }\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n\n      if (global.activeEmojiInteraction || currentChatId !== update.id) return;\n\n      const localEmoji = selectLocalAnimatedEmoji(global, update.emoji);\n\n      global = {\n        ...global,\n        activeEmojiInteraction: {\n          animatedEffect: localEmoji ? selectLocalAnimatedEmojiEffect(localEmoji) : update.emoji,\n          messageId: update.messageId,\n        } as ActiveEmojiInteraction,\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      // Scroll down if bot message height is changed with an updated inline keyboard.\n      // A drawback: this will scroll down even if the previous scroll was not at bottom.\n      const chat = selectChat(global, chatId);\n      if (\n        chat\n        && !message.isOutgoing\n        && chat.lastMessage?.id === message.id\n        && selectIsChatWithBot(global, chat)\n        && isMessageInCurrentMessageList(global, chatId, message as ApiMessage)\n        && selectIsViewportNewest(global, chatId, message.threadInfo?.threadId || MAIN_THREAD_ID)\n      ) {\n        actions.focusLastMessage();\n      }\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, chatId, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread?.threadInfo) {\n        actions.markMessageListRead({ maxId: message.id });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, global);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const updatedPoll = { ...message.content.poll, ...pollUpdate };\n\n        // Workaround for poll update bug: `chosen` option gets reset when someone votes after current user\n        const { results: updatedResults } = updatedPoll.results || {};\n        if (updatedResults && !updatedResults.some(((result) => result.isChosen))) {\n          const { results } = message.content.poll.results;\n          const chosenAnswers = results && results.filter((result) => result.isChosen);\n          if (chosenAnswers) {\n            chosenAnswers.forEach((chosenAnswer) => {\n              const chosenAnswerIndex = updatedResults.findIndex((result) => result.option === chosenAnswer.option);\n              if (chosenAnswerIndex >= 0) {\n                updatedPoll.results.results![chosenAnswerIndex].isChosen = true;\n              }\n            });\n          }\n        }\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOption = newResults.find((result) => result.option === option);\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const currentReactions = message?.reactions;\n\n      // `updateMessageReactions` happens with an interval so we try to avoid redundant global state updates\n      if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n        return;\n      }\n\n      setGlobal(updateChatMessage(global, chatId, id, { reactions: update.reactions }));\n\n      break;\n    }\n  }\n});\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: string, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateThreadUnread(global: GlobalState, actions: GlobalActions, message: ApiMessage, isDeleting?: boolean) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, actions: GlobalActions, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n        global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n        if (!firstMessageId) {\n          global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n        }\n      }\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: threadInfo.messagesCount + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first unread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const newGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(newGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = newGlobal;\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId]?.lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    setGlobal(global);\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, ApiUserStatus } from '../../../api/types';\n\nimport { deleteContact, replaceUserStatuses, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  const global = getGlobal();\n\n  setGlobal(replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  }));\n\n  pendingStatusUpdates = {};\n}\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\n\nimport { updateStickerSet } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import {\n  addReducer, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { ApiPrivacyKey } from '../../../types';\n\nimport { addBlockedContact, removeBlockedContact } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updatePrivacy':\n      global.settings.privacy[update.key as ApiPrivacyKey] = update.rules;\n      break;\n  }\n\n  return undefined;\n});\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer, getGlobal } from '../../../lib/teact/teactn';\nimport { ApiUpdate } from '../../../api/types';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          actions.leaveGroupCall({ shouldRemove: true });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      return updateGroupCall(global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount);\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(global, groupCallId, participant.id, participant,\n            !!nextOffset || currentUserId === participant.id);\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n      return global;\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {() => connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ISettings, LeftColumnContent } from '../../../types';\nimport { ApiChat } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX, APP_NAME, APP_VERSION, FEEDBACK_URL,\n} from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport { selectCurrentMessageList, selectTheme } from '../../../modules/selectors';\nimport { isChatArchived } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport { disableHistoryBack } from '../../../hooks/useHistoryBack';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: 0 | 1 | 2;\n    chatsById?: Record<string, ApiChat>;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    isMessageListOpen: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing'>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\n\nconst PRODUCTION_HOSTNAME = 'web.telegram.org';\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isConnectionStatusMinimized,\n  isMessageListOpen,\n}) => {\n  const {\n    openChat,\n    openTipsChat,\n    setGlobalSearchDate,\n    setSettingOption, setGlobalSearchChatId,\n  } = getDispatch();\n\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized,\n  );\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleSwitchToWebK = () => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    disableHistoryBack();\n  };\n\n  const handleOpenTipsChat = () => {\n    openTipsChat({ langCode: lang.code });\n  };\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${APP_VERSION}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"animations\"\n            onClick={handleAnimationLevelChange}\n          >\n            <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n            <Switcher\n              id=\"animations\"\n              label=\"Toggle Animations\"\n              checked={animationLevel > 0}\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={handleOpenTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n                onClick={disableHistoryBack}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          {() => (\n            <ConnectionStatusOverlay\n              connectionStatus={connectionStatus}\n              connectionStatusText={connectionStatusText!}\n              onClick={toggleConnectionStatus}\n            />\n          )}\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId, connectionState, isSyncing } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isConnectionStatusMinimized,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n    };\n  },\n)(LeftMainHeader));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatFolder, ApiUser } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\nimport { NotifyException, NotifySettings, SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { getFolderUnreadDialogs } from '../../../modules/helpers';\nimport { selectNotifyExceptions, selectNotifySettings } from '../../../modules/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport useThrottledMemo from '../../../hooks/useThrottledMemo';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  allListIds: GlobalState['chats']['listIds'];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  chatFoldersById: Record<number, ApiChatFolder>;\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst INFO_THROTTLE = 3000;\nconst SAVED_MESSAGES_HOTKEY = '0';\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  allListIds,\n  chatsById,\n  usersById,\n  chatFoldersById,\n  notifySettings,\n  notifyExceptions,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  foldersDispatch,\n  onScreenSelect,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => chatFoldersById[id] || {}).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, orderedFolderIds]);\n\n  const folderCountersById = useThrottledMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    const counters = displayedFolders.map((folder) => {\n      const {\n        unreadDialogsCount, hasActiveDialogs,\n      } = getFolderUnreadDialogs(allListIds, chatsById, usersById, folder, notifySettings, notifyExceptions) || {};\n\n      return {\n        id: folder.id,\n        badgeCount: unreadDialogsCount,\n        isBadgeActive: hasActiveDialogs,\n      };\n    });\n\n    return buildCollectionByKey(counters, 'id');\n  }, INFO_THROTTLE, [displayedFolders, allListIds, chatsById, usersById, notifySettings, notifyExceptions]);\n\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return [\n      { title: lang.code === 'en' ? 'All' : lang('FilterAllChats'), id: ALL_FOLDER_ID },\n      ...displayedFolders.map((folder) => ({\n        title: folder.title,\n        ...(folderCountersById?.[folder.id]),\n      })),\n    ];\n  }, [displayedFolders, folderCountersById, lang]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(0);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1), { forceOnHeavyAnimation: true });\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1), { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInAllTabRef = useRef();\n  isNotInAllTabRef.current = activeChatFolder !== 0;\n  useEffect(() => (isNotInAllTabRef.current ? captureEscKeyListener(() => {\n    if (isNotInAllTabRef.current) {\n      setActiveChatFolder(0);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack(activeChatFolder !== 0, () => setActiveChatFolder(0, { forceOnHeavyAnimation: true }));\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  });\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n\n    if (!activeFolder || activeChatFolder === 0) {\n      return (\n        <ChatList\n          folderType=\"all\"\n          isActive={isActive}\n          foldersDispatch={foldersDispatch}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        isActive={isActive}\n        onScreenSelect={onScreenSelect}\n        foldersDispatch={foldersDispatch}\n      />\n    );\n  }\n\n  return (\n    <div className=\"ChatFolders\">\n      {folderTabs?.length ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={folderTabs ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: { listIds: allListIds, byId: chatsById },\n      users: { byId: usersById },\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    } = global;\n\n    return {\n      allListIds,\n      chatsById,\n      usersById,\n      chatFoldersById,\n      orderedFolderIds,\n      lastSyncTime,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(ChatFolders));\n","import { useState } from '../lib/teact/teact';\n\nimport useThrottle from './useThrottle';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport useFlag from './useFlag';\n\nexport default function useThrottledMemo<R extends any, D extends any[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const runThrottled = useThrottle(ms, true);\n  const [value, setValue] = useState<R>();\n  const [isFrozen, freeze, unfreeze] = useFlag();\n\n  useHeavyAnimationCheck(freeze, unfreeze);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    runThrottled(() => {\n      setValue(resolverFn());\n    });\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import React, {\n  FC, useCallback, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\nconst MENU_CLOSE_DELAY_MS = 750;\nlet closeTimeout: number | undefined;\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const handleClose = () => {\n    setIsMenuOpen(false);\n  };\n\n  const handleMouseEnter = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n  }, []);\n\n  const handleMouseLeave = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      setIsMenuOpen(false);\n    }, MENU_CLOSE_DELAY_MS);\n  }, []);\n\n  return (\n    <div\n      className={fabClassName}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nconst APP_OUTDATED_TIMEOUT = 3 * 24 * 60 * 60 * 1000; // 3 days\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const isMouseInside = useRef(false);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const [shouldRenderUpdateButton, updateButtonClassNames, handleUpdateClick] = useAppOutdatedCheck();\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders onScreenSelect={onScreenSelect} foldersDispatch={foldersDispatch} />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nfunction useAppOutdatedCheck() {\n  const [isAppOutdated, markIsAppOutdated] = useFlag(false);\n\n  useEffect(() => {\n    const timeout = window.setTimeout(markIsAppOutdated, APP_OUTDATED_TIMEOUT);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [markIsAppOutdated]);\n\n  const { shouldRender, transitionClassNames } = useShowTransition(isAppOutdated);\n\n  const handleUpdateClick = () => {\n    window.location.reload();\n  };\n\n  return [shouldRender, transitionClassNames, handleUpdateClick] as const;\n}\n\nexport default memo(LeftMain);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MAC_OS, LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport getKeyFromEvent from '../../util/getKeyFromEvent';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  activeChatFolder: number;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps> = ({\n  searchQuery,\n  searchDate,\n  activeChatFolder,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: boolean) => {\n    if (content === LeftColumnContent.NewGroupStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Language:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n        case SettingsScreens.QuickReaction:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyActiveSessions:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && activeChatFolder === 0) {\n      setContent(LeftColumnContent.GlobalSearch);\n      return;\n    }\n\n    setContent(LeftColumnContent.ChatList);\n    setContactsFilter('');\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchDate({ date: undefined });\n    setGlobalSearchChatId({ id: undefined });\n    resetChatCreation();\n    setTimeout(() => {\n      setLastResetTime(Date.now());\n    }, RESET_TRANSITION_DELAY_MS);\n  }, [\n    content, activeChatFolder, settingsScreen, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId,\n    resetChatCreation,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || activeChatFolder === 0\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [activeChatFolder, content, handleReset],\n  );\n\n  useEffect(() => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (((IS_MAC_OS && e.metaKey) || (!IS_MAC_OS && e.ctrlKey)) && e.shiftKey && getKeyFromEvent(e) === 'f') {\n        e.preventDefault();\n        setContent(LeftColumnContent.GlobalSearch);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [content]);\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, setLeftColumnWidth, resetLeftColumnWidth, leftColumnWidth);\n\n  const handleSettingsScreenSelect = (screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  };\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onContentChange={setContent}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent}\n                  onSearchQuery={handleSearchQuery}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n    } = global;\n    return {\n      searchQuery: query, searchDate: date, activeChatFolder, shouldSkipHistoryAnimations, leftColumnWidth,\n    };\n  },\n)(LeftColumn));\n","import { RefObject } from 'react';\nimport { useState, useEffect } from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport const useResize = (\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n) => {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  useEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    elementRef.current.style.width = `${initialWidth}px`;\n  }, [elementRef, initialWidth]);\n\n  const handleMouseUp = () => {\n    document.body.classList.remove('no-selection', 'cursor-ew-resize');\n  };\n\n  const initResize = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    document.body.classList.add('no-selection', 'cursor-ew-resize');\n\n    setInitialMouseX(event.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  };\n\n  const resetResize = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.preventDefault();\n    elementRef.current!.style.width = '';\n    onReset();\n  };\n\n  useEffect(() => {\n    if (!isActive) return;\n\n    const handleMouseMove = (event: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + event.clientX - initialMouseX);\n      elementRef.current!.style.width = `${newWidth}px`;\n    };\n\n    const stopDrag = () => {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      onResize(elementRef.current!.offsetWidth);\n      unmarkIsActive();\n    };\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive]);\n\n  return { initResize, resetResize, handleMouseUp };\n};\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nexport default (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\nimport windowSize from '../util/windowSize';\nimport { ApiDimensions } from '../api/types';\n\nconst THROTTLE = 250;\n\nexport default () => {\n  const [size, setSize] = useState<ApiDimensions>(windowSize.get());\n\n  useEffect(() => {\n    const handleResize = throttle(() => {\n      setSize(windowSize.get());\n    }, THROTTLE, false);\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return size;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import React, {\n  FC,\n  memo,\n  useRef,\n  useCallback,\n  useState,\n  useEffect,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { IAnchorPosition, ManagementScreens } from '../../types';\n\nimport {\n  ARE_CALLS_SUPPORTED, IS_MAC_OS, IS_PWA, IS_SINGLE_COLUMN_LAYOUT,\n} from '../../util/environment';\nimport getKeyFromEvent from '../../util/getKeyFromEvent';\nimport {\n  isChatBasicGroup, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatBot,\n  selectIsUserBlocked,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  canExpandActions: boolean;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n}\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  pendingJoinRequests,\n  isRightColumnShown,\n  canExpandActions,\n}) => {\n  const {\n    joinChannel,\n    sendBotCommand,\n    openLocalTextSearch,\n    restartBot,\n    openCallFallbackConfirm,\n    requestNextManagementScreen,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleJoinRequestsClick = useCallback(() => {\n    requestNextManagementScreen({ screen: ManagementScreens.JoinRequests });\n  }, [requestNextManagementScreen]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  useEffect(() => {\n    if (!canSearch) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (\n        IS_PWA && ((IS_MAC_OS && e.metaKey) || (!IS_MAC_OS && e.ctrlKey)) && !e.shiftKey && getKeyFromEvent(e) === 'f'\n      ) {\n        e.preventDefault();\n        handleSearchClick();\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [canSearch, handleSearchClick]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && (\n        <>\n          {canExpandActions && canSubscribe && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </Button>\n          )}\n          {canExpandActions && canStartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </Button>\n          )}\n          {canExpandActions && canRestartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </Button>\n          )}\n          {canSearch && (\n            <Button\n              round\n              ripple={isRightColumnShown}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleSearchClick}\n              ariaLabel=\"Search in this chat\"\n            >\n              <i className=\"icon-search\" />\n            </Button>\n          )}\n          {canCall && (\n            <Button\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={openCallFallbackConfirm}\n              ariaLabel=\"Call\"\n            >\n              <i className=\"icon-phone\" />\n            </Button>\n          )}\n        </>\n      )}\n      {Boolean(pendingJoinRequests) && (\n        <Button\n          round\n          className=\"badge-button\"\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleJoinRequestsClick}\n          ariaLabel={isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n        >\n          <i className=\"icon-user\" />\n          <div className=\"badge\">{pendingJoinRequests}</div>\n        </Button>\n      )}\n      <Button\n        ref={menuButtonRef}\n        className={isMenuOpen ? 'active' : ''}\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        disabled={noMenu}\n        ariaLabel=\"More actions\"\n        onClick={handleHeaderMenuOpen}\n      >\n        <i className=\"icon-more\" />\n      </Button>\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          withExtraActions={IS_SINGLE_COLUMN_LAYOUT || !canExpandActions}\n          isChannel={isChannel}\n          canStartBot={canStartBot}\n          canRestartBot={canRestartBot}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canCall={canCall}\n          canMute={canMute}\n          canLeave={canLeave}\n          canEnterVoiceChat={canEnterVoiceChat}\n          canCreateVoiceChat={canCreateVoiceChat}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (!chat || chat.isRestricted || selectIsInSelectMode(global)) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const bot = selectChatBot(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canCall = ARE_CALLS_SUPPORTED && isUserId(chat.id) && !isChatWithSelf && !bot;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canLeave = isMainThread && !canSubscribe;\n    const canEnterVoiceChat = ARE_CALLS_SUPPORTED && chat.isCallActive;\n    const canCreateVoiceChat = ARE_CALLS_SUPPORTED && !chat.isCallActive\n      && (chat.adminRights?.manageCall || (chat.isCreator && isChatBasicGroup(chat)));\n    const pendingJoinRequests = chat.fullInfo?.requestsPending;\n\n    return {\n      noMenu: false,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canRestartBot,\n      canSubscribe,\n      canSearch,\n      canCall,\n      canMute,\n      canLeave,\n      canEnterVoiceChat,\n      canCreateVoiceChat,\n      pendingJoinRequests,\n    };\n  },\n)(HeaderActions));\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { ApiMessage } from '../api/types';\n\nimport { DEBUG } from '../config';\nimport { isWebpSupported } from '../util/environment';\nimport { EMPTY_IMAGE_DATA_URI, webpToPngBase64 } from '../util/webpToPng';\nimport { getMessageMediaThumbDataUri } from '../modules/helpers';\n\nexport default function useWebpThumbnail(message?: ApiMessage) {\n  const thumbDataUri = message && getMessageMediaThumbDataUri(message);\n  const sticker = message?.content?.sticker;\n  const shouldDecodeThumbnail = thumbDataUri && sticker && !isWebpSupported() && thumbDataUri.includes('image/webp');\n  const [thumbnailDecoded, setThumbnailDecoded] = useState(EMPTY_IMAGE_DATA_URI);\n  const messageId = message?.id;\n\n  useLayoutEffect(() => {\n    if (!shouldDecodeThumbnail) {\n      return;\n    }\n\n    webpToPngBase64(`b64-${messageId}`, thumbDataUri!)\n      .then(setThumbnailDecoded)\n      .catch((err) => {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(err);\n        }\n      });\n  }, [messageId, shouldDecodeThumbnail, thumbDataUri]);\n\n  return shouldDecodeThumbnail ? thumbnailDecoded : thumbDataUri;\n}\n","import React, {\n  FC,\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        // @ts-ignore\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          // @ts-ignore\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../modules/helpers';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport RippleEffect from '../ui/RippleEffect';\nimport buildClassName from '../../util/buildClassName';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\n\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const lang = useLang();\n  const mediaThumbnail = useWebpThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = renderMessageSummary(lang, message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div className=\"HeaderPinnedMessage\" onClick={onClick} dir={lang.isRtl ? 'rtl' : undefined}>\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">{text}</p>\n        </div>\n\n        <RippleEffect />\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","export function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => URL.createObjectURL(blob))\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => URL.createObjectURL(blob))\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n) {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          canvas.getContext('2d')!.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nfunction steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport useMedia from './useMedia';\nimport { useAsync } from './useAsync';\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../modules/helpers';\nimport { getTranslation } from '../util/langProvider';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\n// @ts-ignore\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nexport default (message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat): MediaMetadata | undefined => {\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = (audio && audio.performer) || (sender && getSenderTitle(getTranslation, sender));\n  const album = (chat && getChatTitle(getTranslation, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => makeGoodArtwork(media, size), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes || audio.thumbnailSizes.length === 0) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport const useAsync = <T>(fn: () => Promise<T>, deps: any[], defaultValue?: T) => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<Error | undefined>();\n  const [result, setResult] = useState<T | undefined>(defaultValue);\n  useEffect(() => {\n    setIsLoading(true);\n    let wasCancelled = false;\n    fn().then((res) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setResult(res);\n    }, (err) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setError(err);\n    });\n    return () => {\n      wasCancelled = true;\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n  return { isLoading, error, result };\n};\n","import React, {\n  FC, useCallback, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { AudioOrigin } from '../../types';\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../modules/helpers';\nimport { selectChat, selectSender } from '../../modules/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport windowSize from '../../util/windowSize';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useLang from '../../hooks/useLang';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport renderText from '../common/helpers/renderText';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isMuted: boolean;\n};\n\nconst FAST_PLAYBACK_RATE = 1.8;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getDispatch();\n\n  const lang = useLang();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  // Prevent refresh by accidentally rotating device when listening to a voice message\n  const isVoicePlaying = isVoice && isPlaying;\n  useEffect(() => {\n    if (!isVoicePlaying) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isVoicePlaying]);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n    setAudioPlayerMuted({ isMuted: false });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerMuted, setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const handlePlaybackClick = useCallback(() => {\n    if (playbackRate === 1) {\n      setPlaybackRate(FAST_PLAYBACK_RATE);\n      setAudioPlayerPlaybackRate({ playbackRate: FAST_PLAYBACK_RATE });\n    } else {\n      setPlaybackRate(1);\n      setAudioPlayerPlaybackRate({ playbackRate: 1 });\n    }\n  }, [playbackRate, setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        className=\"player-button volume-button\"\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel=\"Volume\"\n        withClickPropagation\n      >\n        <i className={volumeIcon} onClick={handleVolumeClick} />\n        {!IS_IOS && (\n          <>\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </>\n        )}\n      </Button>\n\n      {isVoice && (\n        <Button\n          round\n          className={buildClassName('playback-button', playbackRate !== 1 && 'applied')}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          onClick={handlePlaybackClick}\n        >\n          <span className=\"playback-button-inner\">2Х</span>\n        </Button>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const { volume, playbackRate, isMuted } = global.audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiGroupCall, ApiUser } from '../../../api/types';\n\nimport { selectChatGroupCall } from '../../../modules/selectors/calls';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\n\nimport './GroupCallTopPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasPinnedOffset: boolean;\n};\n\ntype StateProps = {\n  groupCall?: ApiGroupCall;\n  isActive: boolean;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n};\n\nconst GroupCallTopPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  groupCall,\n  hasPinnedOffset,\n  usersById,\n  chatsById,\n}) => {\n  const {\n    joinGroupCall,\n    subscribeToGroupCallUpdates,\n  } = getDispatch();\n\n  const lang = useLang();\n\n  const handleJoinGroupCall = useCallback(() => {\n    joinGroupCall({\n      chatId,\n    });\n  }, [joinGroupCall, chatId]);\n\n  const participants = groupCall?.participants;\n\n  const fetchedParticipants = useMemo(() => {\n    if (participants) {\n      return Object.values(participants).filter((_, i) => i < 3).map(({ id, isUser }) => {\n        if (isUser) {\n          if (!usersById[id]) {\n            return undefined;\n          }\n          return { user: usersById[id] };\n        } else {\n          if (!chatsById[id]) {\n            return undefined;\n          }\n          return { chat: chatsById[id] };\n        }\n      }).filter(Boolean);\n    } else return [];\n  }, [chatsById, participants, usersById]);\n\n  useEffect(() => {\n    if (!groupCall?.id) return undefined;\n    if (!isActive && groupCall.isLoaded) return undefined;\n\n    subscribeToGroupCallUpdates({\n      id: groupCall.id,\n      subscribed: true,\n    });\n\n    return () => {\n      subscribeToGroupCallUpdates({\n        id: groupCall.id,\n        subscribed: false,\n      });\n    };\n  }, [groupCall?.id, groupCall?.isLoaded, isActive, subscribeToGroupCallUpdates]);\n\n  if (!groupCall) return undefined;\n\n  return (\n    <div\n      className={buildClassName(\n        'GroupCallTopPane',\n        hasPinnedOffset && 'has-pinned-offset',\n        !isActive && 'is-hidden',\n      )}\n      onClick={handleJoinGroupCall}\n    >\n      <div className=\"info\">\n        <span className=\"title\">{lang('VoipGroupVoiceChat')}</span>\n        <span className=\"participants\">{lang('Participants', groupCall.participantsCount || 0, 'i')}</span>\n      </div>\n      <div className=\"avatars\">\n        {fetchedParticipants.map((p) => {\n          if (!p) return undefined;\n          if (p.user) {\n            return <Avatar key={p.user.id} user={p.user} />;\n          } else {\n            return <Avatar key={p.chat.id} chat={p.chat} />;\n          }\n        })}\n      </div>\n      <Button round className=\"join\">\n        {lang('VoipChatJoin')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chat = selectChat(global, chatId)!;\n    const groupCall = selectChatGroupCall(global, chatId);\n    return {\n      groupCall,\n      usersById: global.users.byId,\n      chatsById: global.chats.byId,\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      isActive: ((!groupCall ? (chat && chat.isCallNotEmpty && chat.isCallActive)\n        : (groupCall.participantsCount > 0 && groupCall.isLoaded)))\n        && (global.groupCalls.activeGroupCallId !== groupCall?.id),\n    };\n  },\n)(GroupCallTopPane));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalState } from '../../global/types';\n\nimport { selectCountNotMutedUnreadOptimized } from '../../modules/selectors';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\ntype StateProps = {\n  unreadCount: number;\n};\n\nconst UnreadCount: FC<StateProps> = ({\n  unreadCount,\n}) => {\n  if (!unreadCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadCount)}</div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global: GlobalState): StateProps => {\n    return {\n      unreadCount: selectCountNotMutedUnreadOptimized(global),\n    };\n  },\n)(UnreadCount));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport { GlobalState, MessageListType } from '../../global/types';\nimport {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser, MAIN_THREAD_ID,\n} from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_ID,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isUserId,\n} from '../../modules/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../modules/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport UnreadCount from './UnreadCount';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  isChatWithBot?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isChatWithSelf,\n  isChatWithBot,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getDispatch();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID);\n      if (messageInput) {\n        messageInput.blur();\n      }\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    threadId, messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode, setBackButtonActive,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo={isChatWithBot}\n              withMediaViewer\n              withUpdatingStatus\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCount = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCount && <UnreadCount />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n      >\n        {renderInfo}\n      </Transition>\n\n      <GroupCallTopPane\n        hasPinnedOffset={\n          (shouldRenderPinnedMessage && !!renderingPinnedMessage)\n          || (shouldRenderAudioPlayer && !!renderingAudioMessage)\n        }\n        chatId={chatId}\n      />\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isAudioPlayerRendered && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const chat = selectChat(global, chatId);\n\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isChatWithBot: chat && selectIsChatWithBot(global, chat),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\n\nimport { getDayStart } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../modules/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: Number(getDayStart(messages[0].date * 1000)),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = Number(getDayStart(nextMessage.date * 1000));\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { RefObject } from 'react';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMessagesRead } = getDispatch();\n\n  const {\n    observe: observeIntersectionForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMessagesRead({ messageIds: mentionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  };\n}\n","import { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../modules/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMedia = photo || video;\n  const isMediaWithNoText = isMedia && !text;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (text) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (photo || video) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../modules/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, isForwarded, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport { IAlbum } from '../../../../types';\nimport { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction clamp(num: number, low: number, high: number) {\n  return num < low ? low : (num > high ? high : num);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1)));\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, isForwarded, false, noAvatars) - (isForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet element: HTMLSpanElement | undefined;\n\nexport default function calculateAuthorWidth(text: string) {\n  if (!element) {\n    element = document.createElement('span');\n    // eslint-disable-next-line max-len\n    element.style.font = IS_IOS\n      // eslint-disable-next-line max-len\n      ? '400 12px system-ui, -apple-system, BlinkMacSystemFont, \"Roboto\", \"Apple Color Emoji\", \"Helvetica Neue\", sans-serif'\n      : '400 12px \"Roboto\", -apple-system, \"Apple Color Emoji\", BlinkMacSystemFont, \"Helvetica Neue\", sans-serif';\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer]);\n}\n","import { RefObject } from 'react';\nimport React, { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getDispatch();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction(e: React.MouseEvent) {\n    const { x, y } = e.currentTarget.getBoundingClientRect();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    const { pageX: x, pageY: y } = e;\n\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap(e);\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]')) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, {\n  FC, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\nimport { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../modules/selectors';\nimport { isChatChannel } from '../../modules/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { ObserveFn, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter<ApiUser>(Boolean as any)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    isEmbedded ? { isEmbedded: true } : undefined,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{content}</span>;\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={`message${message.id}`}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import React, { FC, useRef } from '../../lib/teact/teact';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useLang from '../../hooks/useLang';\nimport { renderMessageSummary } from './helpers/renderMessageText';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  isProtected?: boolean;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const pictogramId = message && `sticker-reply-thumb${message.id}`;\n  const mediaThumbnail = useWebpThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender && getSenderTitle(lang, sender);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('EmbeddedMessage', className)}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(pictogramId, mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderMessageSummary(lang, message, Boolean(mediaThumbnail))\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  id: string | undefined,\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <>\n      <img\n        id={id}\n        src={blobUrl || thumbDataUri}\n        width={width}\n        height={height}\n        alt=\"\"\n        className={isRoundVideo ? 'round' : ''}\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </>\n  );\n}\n\nexport default EmbeddedMessage;\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { ActiveReaction } from '../../../global/types';\nimport { ApiAvailableReaction, ApiMediaFormat } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionAnimatedEmoji.scss';\n\ntype OwnProps = {\n  reaction: string;\n  activeReaction?: ActiveReaction;\n  isInMeta?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CENTER_ICON_SIZE = 30;\nconst EFFECT_SIZE = 100;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  activeReaction,\n  isInMeta,\n  availableReactions,\n}) => {\n  const { stopActiveReaction } = getDispatch();\n\n  const availableReaction = availableReactions?.find((r) => r.reaction === reaction);\n  const centerIconId = availableReaction?.centerIcon?.id;\n  const effectId = availableReaction?.aroundAnimation?.id;\n  const mediaDataCenterIcon = useMedia(`sticker${centerIconId}`, !centerIconId, ApiMediaFormat.Lottie);\n  const mediaDataEffect = useMedia(`sticker${effectId}`, !effectId, ApiMediaFormat.Lottie);\n\n  const shouldPlay = Boolean(activeReaction?.reaction === reaction && mediaDataCenterIcon && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    stopActiveReaction({ messageId: activeReaction?.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !shouldPlay || !isAnimationLoaded;\n\n  const className = buildClassName(\n    'ReactionAnimatedEmoji',\n    isInMeta && 'in-meta',\n    shouldRenderAnimation && 'is-animating',\n  );\n\n  return (\n    <div className={className}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} />}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={centerIconId}\n            id={`reaction_emoji_${centerIconId}`}\n            className={animationClassNames}\n            size={CENTER_ICON_SIZE}\n            animationData={mediaDataCenterIcon}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onLoad={markAnimationLoaded}\n            onEnded={unmarkAnimationLoaded}\n          />\n          <AnimatedSticker\n            key={effectId}\n            id={`reaction_effect_${effectId}`}\n            className={buildClassName('effect', animationClassNames)}\n            size={EFFECT_SIZE}\n            animationData={mediaDataEffect}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, {\n  FC, memo, useMemo,\n} from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\nimport { ActiveReaction } from '../../../global/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactions?: boolean;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick, withReactions,\n  activeReaction, withReactionOffset, availableReactions,\n}) => {\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const reactions = withReactions && message.reactions?.results.filter((l) => l.count > 0);\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  return (\n    <span\n      className={buildClassName('MessageMeta', withReactionOffset && 'reactions-offset')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n    >\n      {reactions && reactions.map((l) => (\n        <ReactionAnimatedEmoji\n          activeReaction={activeReaction}\n          reaction={l.reaction}\n          isInMeta\n          availableReactions={availableReactions}\n        />\n      ))}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import React, { FC, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { MEMOJI_STICKER_ID } from '../../../config';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useWebpThumbnail from '../../../hooks/useWebpThumbnail';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\nimport './Sticker.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const sticker = message.content.sticker!;\n  const { isAnimated, stickerSetId } = sticker;\n  const isMemojiSticker = stickerSetId === MEMOJI_STICKER_ID;\n\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const thumbDataUri = useWebpThumbnail(message);\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isAnimated ? isAnimationLoaded : isMediaLoaded;\n  const transitionClassNames = useMediaTransition(isMediaReady);\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n  );\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? openModal : undefined}>\n      {!isMediaReady && (\n        <img\n          id={`sticker-thumb-${message.id}`}\n          src={thumbDataUri}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isAnimated && (\n        <img\n          id={`sticker-${message.id}`}\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isAnimated && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          id={mediaHash}\n          animationData={mediaData}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markAnimationLoaded}\n        />\n      )}\n      <StickerSetModal\n        isOpen={isModalOpen}\n        fromSticker={sticker}\n        onClose={closeModal}\n      />\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../modules/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, fullMediaData?: string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import React, {\n  FC, useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ISettings } from '../../../types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst CUSTOM_APPENDIX_ATTRIBUTE = 'data-has-custom-appendix';\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbRef = useBlurredMediaThumbRef(message, fullMediaData);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, 'download'), !isDownloading);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(fullMediaData);\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        // @ts-ignore teact feature\n        style={`width: ${width}px; height: ${height}px`}\n      />\n      <img\n        src={fullMediaData}\n        className={`full-media ${transitionClassNames}`}\n        width={width}\n        height={height}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <i className={buildClassName('icon-download', downloadButtonClassNames)} />}\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import { useCallback, useRef } from '../../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../../util/schedulers';\nimport safePlay from '../../../../util/safePlay';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useHeavyAnimationCheck from '../../../../hooks/useHeavyAnimationCheck';\n\nexport default function useVideoAutoPause(playerRef: { current: HTMLVideoElement | null }, canPlay: boolean) {\n  const wasPlaying = useRef(playerRef.current?.paused);\n  const canPlayRef = useRef();\n  canPlayRef.current = canPlay;\n\n  const freezePlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    wasPlaying.current = !playerRef.current.paused;\n\n    if (wasPlaying.current) {\n      playerRef.current.pause();\n    }\n  }, [playerRef]);\n\n  const unfreezePlaying = useCallback(() => {\n    if (\n      playerRef.current && wasPlaying.current && canPlayRef.current\n      // At this point HTMLVideoElement can be unmounted from the DOM\n      && document.body.contains(playerRef.current)\n    ) {\n      safePlay(playerRef.current);\n    }\n  }, [playerRef]);\n\n  const unfreezePlayingOnRaf = useCallback(() => {\n    fastRaf(unfreezePlaying);\n  }, [unfreezePlaying]);\n\n  useBackgroundMode(freezePlaying, unfreezePlayingOnRaf);\n  useHeavyAnimationCheck(freezePlaying, unfreezePlaying);\n}\n","import React, {\n  FC, useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat, ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n  isDownloading,\n  isProtected,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const previewClassNames = useMediaTransition(previewBlobUrl);\n\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(isIntersecting && fullMediaData);\n  // Thumbnail is always rendered so we can only disable blur if we have preview\n  const thumbRef = useBlurredMediaThumbRef(message, previewBlobUrl);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!canAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isBuffered) || isDownloading,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(isLoadAllowed && !isPlayAllowed && !shouldRenderSpinner);\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = (videoRef.current?.duration) || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded, noAvatars);\n\n  useVideoAutoPause(videoRef, isInline);\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (isDownloading) {\n      getDispatch().cancelMessageMediaDownload({ message });\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, isDownloading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        // @ts-ignore teact feature\n        style={`width: ${width}px; height: ${height}px;`}\n      />\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        // @ts-ignore teact feature\n        style={`width: ${width}px; height: ${height}px;`}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isInline && (\n        <video\n          ref={videoRef}\n          className=\"full-media\"\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderPlayButton && <i className={buildClassName('icon-large-play', playButtonClassNames)} />}\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openUserInfo } = getDispatch();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n\n  const handleClick = useCallback(() => {\n    openUserInfo({ id: userId });\n  }, [openUserInfo, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', Boolean(userId) && 'interactive')}\n      onClick={userId ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import React, {\n  FC, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent < answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            // @ts-ignore\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderMessageText';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n  serverTimeOffset: number;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n  serverTimeOffset,\n}) => {\n  const { loadMessage, openPollResults } = getDispatch();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    if (\n      isSubmitting\n      && poll.results.results\n      && poll.results.results.some((result) => result.isChosen)\n    ) {\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\">\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n)(Poll));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../modules/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  let isSquarePhoto = false;\n  if (webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebPage',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          nonInteractive={!isMediaInteractive}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          theme={theme}\n        />\n      )}\n      <div className=\"WebPage-text\">\n        <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n        {!inPreview && title && (\n          <p className=\"site-title\">{renderText(title)}</p>\n        )}\n        {truncatedDescription && (\n          <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n        )}\n      </div>\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersection={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../modules/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n}) => {\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photoUrl,\n  } = invoice!;\n\n  return (\n    <div\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <p>{renderText(text, ['emoji', 'br'])}</p>\n      )}\n      <div className={`description ${photoUrl ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n          />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../../lib/teact/teactn';\n\nimport { OwnProps as PhotoProps } from '../Photo';\nimport { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../modules/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getDispatch();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...props.dimensions,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : props.onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        // @ts-ignore\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { GlobalState } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum, ISettings } from '../../../types';\nimport { AlbumRectPart, IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent } from '../../../modules/helpers';\nimport { getDispatch, getGlobal, withGlobal } from '../../../lib/teact/teactn';\nimport withSelectControl from './hocs/withSelectControl';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../modules/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getDispatch();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[message.previousLocalId || message.id];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      // @ts-ignore\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat, ApiMessage } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet currentOnRelease: NoneToVoidFunction;\n\nfunction createCapture(onRelease: NoneToVoidFunction) {\n  return () => {\n    if (currentOnRelease) {\n      currentOnRelease();\n    }\n\n    currentOnRelease = onRelease;\n  };\n}\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = (isLoadAllowed && !isBuffered) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(mediaData);\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = () => {\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current!);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  };\n\n  const capturePlaying = createCapture(stopPlaying);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useVideoAutoPause(playerRef, shouldPlay);\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getDispatch().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      <div className=\"thumbnail-wrapper\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n        />\n      </div>\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React, { FC } from '../../../lib/teact/teact';\n\nimport { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ button }: { button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'NOT_SUPPORTED'}\n              onClick={() => onClick({ button })}\n            >\n              {renderText(lang(button.text))}\n              {button.type === 'buy' && <i className=\"icon-card\" />}\n              {button.type === 'url' && !button.value!.match(RE_TME_LINK) && <i className=\"icon-arrow-right\" />}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, getGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../modules/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openChat } = getDispatch();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, getGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiUser,\n} from '../../../api/types';\nimport { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './Reactions.scss';\n\nconst MAX_REACTORS_AVATARS = 3;\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n}> = ({\n  reaction,\n  message,\n  activeReaction,\n  availableReactions,\n}) => {\n  const { sendReaction } = getDispatch();\n\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!recentReactions || reaction.count > MAX_REACTORS_AVATARS) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => recentReaction.reaction === reaction.reaction)\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction, recentReactions]);\n\n  const handleClick = useCallback(() => {\n    sendReaction({\n      reaction: reaction.isChosen ? undefined : reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, sendReaction]);\n\n  return (\n    <Button\n      className={buildClassName(reaction.isChosen && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReaction={activeReaction}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : formatIntegerCompact(reaction.count)}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction, ApiMessage } from '../../../api/types';\nimport { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n};\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  activeReaction,\n  availableReactions,\n  metaChildren,\n}) => {\n  return (\n    <div className={buildClassName('Reactions', isOutside && 'is-outside')}>\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={reaction.reaction}\n          reaction={reaction}\n          message={message}\n          activeReaction={activeReaction}\n          availableReactions={availableReactions}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import React, {\n  FC, memo, useEffect, useState,\n} from '../../lib/teact/teact';\n\nimport { ActiveEmojiInteraction } from '../../global/types';\n\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport getAnimationData, { ANIMATED_STICKERS_PATHS } from './helpers/animatedAssets';\nimport useAnimatedEmoji from './hooks/useAnimatedEmoji';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nconst QUALITY = 1;\n\ntype OwnProps = {\n  localSticker?: string;\n  localEffect?: string;\n  isOwn?: boolean;\n  soundId?: string;\n  observeIntersection?: ObserveFn;\n  size?: 'large' | 'medium' | 'small';\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteraction?: ActiveEmojiInteraction;\n};\n\nconst LocalAnimatedEmoji: FC<OwnProps> = ({\n  localSticker,\n  localEffect,\n  isOwn,\n  soundId,\n  size = 'medium',\n  observeIntersection,\n  messageId,\n  chatId,\n  activeEmojiInteraction,\n}) => {\n  const {\n    playKey,\n    ref,\n    style,\n    width,\n    handleClick,\n    markAnimationLoaded,\n  } = useAnimatedEmoji(size, chatId, messageId, soundId, activeEmojiInteraction, isOwn, localEffect);\n  const id = `local_emoji_${localSticker}`;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [localStickerAnimationData, setLocalStickerAnimationData] = useState<string>();\n  useEffect(() => {\n    if (localSticker) {\n      getAnimationData(localSticker as keyof typeof ANIMATED_STICKERS_PATHS).then((data) => {\n        setLocalStickerAnimationData(data);\n      });\n    }\n  }, [localSticker]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"AnimatedEmoji media-inner\"\n      // @ts-ignore teact feature\n      style={style}\n      onClick={handleClick}\n    >\n      {localStickerAnimationData && (\n        <AnimatedSticker\n          key={id}\n          id={id}\n          animationData={localStickerAnimationData}\n          size={width}\n          quality={QUALITY}\n          play={isIntersecting && playKey}\n          forceOnHeavyAnimation\n          noLoop\n          onLoad={markAnimationLoaded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(LocalAnimatedEmoji);\n","import React, {\n  FC,\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ActiveEmojiInteraction, ActiveReaction, MessageListType } from '../../../global/types';\nimport {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiSticker,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n} from '../../../api/types';\nimport {\n  AudioOrigin, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectAnimatedEmoji,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectMessageIdsByGroupId,\n  selectLocalAnimatedEmoji,\n  selectIsMessageProtected,\n  selectLocalAnimatedEmojiEffect,\n  selectDefaultReaction,\n} from '../../../modules/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n} from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from '../../common/AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport LocalAnimatedEmoji from '../../common/LocalAnimatedEmoji';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForMedia: ObserveFn;\n    observeIntersectionForAnimatedStickers: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    areReactionsInMeta?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsername?: string;\n  sender?: ApiUser | ApiChat;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  isSingleEmoji?: boolean;\n  animatedEmoji?: ApiSticker;\n  localSticker?: string;\n  localEffect?: string;\n  animatedEmojiEffect?: ApiSticker;\n  animatedEmojiSoundId?: string;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  threadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: string;\n  activeReaction?: ActiveReaction;\n  activeEmojiInteraction?: ActiveEmojiInteraction;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'in-meta'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsername,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  areReactionsInMeta,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  canReply,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  localSticker,\n  localEffect,\n  animatedEmojiEffect,\n  animatedEmojiSoundId,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReaction,\n  activeEmojiInteraction,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  threadInfo,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickInlineButton,\n    disableContextMenuHint,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const customShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = localSticker || animatedEmoji;\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !customShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1;\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const withCommentButton = threadInfo && !isInDocumentGroupNotLast && messageListType === 'thread' && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && defaultReaction && !isInDocumentGroupNotLast;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !sender) ? originSender : sender;\n  const senderPeer = forwardInfo ? originSender : sender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n  );\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    Boolean(activeReaction) && 'has-active-reaction',\n  );\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: threadInfo && threadInfo?.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const textParts = renderMessageText(message, highlight, isEmojiOnlyMessage(customShape));\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice,\n  } = getMessageContent(message);\n\n  let metaPosition!: MetaPosition;\n  if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (textParts && !hasAnimatedEmoji && !webPage) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (areReactionsInMeta) {\n    reactionsPosition = 'in-meta';\n  } else if (hasReactions) {\n    if (customShape || ((photo || video || hasAnimatedEmoji) && !textParts)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, noAvatars).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  const signature = (isChannel && message.adminTitle) || (!asForwarded && forwardInfo?.adminTitle) || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactions={reactionsPosition === 'in-meta'}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        activeReaction={activeReaction}\n        onClick={handleMetaClick}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReaction={activeReaction}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n    const textContentClass = buildClassName(\n      'text-content',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            isProtected={isProtected}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            size=\"small\"\n            isOwn={isOwn}\n            sticker={animatedEmoji}\n            effect={animatedEmojiEffect}\n            soundId={animatedEmojiSoundId}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        )}\n        {localSticker && (\n          <LocalAnimatedEmoji\n            size=\"small\"\n            isOwn={isOwn}\n            localSticker={localSticker}\n            localEffect={localEffect}\n            soundId={animatedEmojiSoundId}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {!hasAnimatedEmoji && textParts && (\n          <p className={textContentClass} dir=\"auto\">\n            {textParts}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </p>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {invoice && <Invoice message={message} />}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const shouldRender = !(customShape && !viaBotId) && (\n      (withSenderName && !photo && !video) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && customShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(customShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"auto\"\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      id={`message${messageId}`}\n      className={containerClassName}\n      // @ts-ignore teact feature\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          // @ts-ignore\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={threadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReaction && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji reaction={defaultReaction!} />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            activeReaction={activeReaction}\n            availableReactions={availableReactions}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const { focusedMessage, forwardMessages, lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, threadInfo,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const chatUsername = chat?.username;\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectSender(global, replyMessage);\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    let isSelected: boolean;\n\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualThreadInfo = threadInfo\n      ? selectThreadInfo(global, threadInfo.chatId, threadInfo.threadId) || threadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const localSticker = singleEmoji ? selectLocalAnimatedEmoji(global, singleEmoji) : undefined;\n\n    return {\n      theme: selectTheme(global),\n      chatUsername,\n      forceSenderName,\n      sender: canShowSender ? sender : undefined,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      canReply,\n      lastSyncTime,\n      highlight,\n      isSingleEmoji: Boolean(singleEmoji),\n      animatedEmoji: singleEmoji ? selectAnimatedEmoji(global, singleEmoji) : undefined,\n      animatedEmojiEffect: singleEmoji && isUserId(chatId) ? selectAnimatedEmojiEffect(global, singleEmoji) : undefined,\n      animatedEmojiSoundId: singleEmoji ? selectAnimatedEmojiSound(global, singleEmoji) : undefined,\n      localSticker,\n      localEffect: localSticker && isUserId(chatId) ? selectLocalAnimatedEmojiEffect(localSticker) : undefined,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        !!message.groupedId && !message.isInAlbum && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      threadInfo: actualThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: selectDefaultReaction(global, chatId),\n      activeReaction: global.activeReactions[id],\n      activeEmojiInteraction: global.activeEmojiInteraction,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n    };\n  },\n)(Message));\n","import React, { useCallback } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { isUserId } from '../../../../modules/helpers';\nimport { IAlbum, MediaViewerOrigin } from '../../../../types';\nimport {\n  ApiChat, ApiMessage, ApiUser, MAIN_THREAD_ID,\n} from '../../../../api/types';\nimport { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n) {\n  const {\n    openUserInfo, openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n  } = getDispatch();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    if (isUserId(avatarPeer.id)) {\n      openUserInfo({ id: avatarPeer.id });\n    } else {\n      openChat({ id: avatarPeer.id });\n    }\n  }, [avatarPeer, openUserInfo, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else if (isUserId(senderPeer.id)) {\n      openUserInfo({ id: senderPeer.id });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, openUserInfo, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openUserInfo({ id: botSender.id });\n  }, [botSender, openUserInfo]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId, threadId, messageId, origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId,\n        messageId: forwardInfo!.fromMessageId,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n  };\n}\n","import { RefObject } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { renderTextWithEntities } from '../../common/helpers/renderMessageText';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../modules/selectors';\nimport { getChatTitle, getUserFullName } from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Button from '../../ui/Button';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getDispatch();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  const handleClick = () => {\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId,\n          param: message.startParam,\n        });\n      }\n    }\n  };\n\n  return (\n    <div className=\"SponsoredMessage Message open\" key=\"sponsored-message\">\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <p className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">{lang('SponsoredMessage')}</span>\n            </span>\n          </p>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import { RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact, flatten } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport { getMessageOriginalId, isActionMessage, isOwnMessage } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport { isAlbum, MessageDateGroup } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\nimport { getDispatch } from '../../lib/teact/teactn';\n\ninterface OwnProps {\n  chatId: string;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  threadId: number;\n  type: MessageListType;\n  isReady: boolean;\n  areReactionsInMeta: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  chatId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  areReactionsInMeta,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  threadId,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getDispatch();\n\n  const {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + flatten(messageGroup.senderGroups).length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (senderGroup.length === 1 && !isAlbum(senderGroup[0]) && isActionMessage(senderGroup[0])) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return flatten(senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === `message${message.previousLocalId}`) {\n          anchorIdRef.current = `message${message.id}`;\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Scheduled messages can have local IDs in the middle of the list,\n        // and keys should be ordered, so we prefix it with a date.\n        // However, this may lead to issues if server date is not synchronized with the local one.\n        const key = type !== 'scheduled' ? originalId : `${message.date}_${originalId}`;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            areReactionsInMeta={areReactionsInMeta}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }));\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {flatten(senderGroups)}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {flatten(dateGroups)}\n      {isViewportNewest && <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import { RefObject } from 'react';\nimport { getDispatch } from '../../../lib/teact/teactn';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getDispatch();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] >= LOCAL_MESSAGE_ID_BASE;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useOnChange(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../modules/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getDispatch();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport useLang, { LangFn } from '../../hooks/useLang';\n\nimport './NoMessages.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf, type, isGroupChatJustCreated,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiMessage, ApiRestrictionReason, MAIN_THREAD_ID,\n} from '../../api/types';\nimport { MessageListType } from '../../global/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n} from '../../modules/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n} from '../../modules/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  lastMessage?: ApiMessage;\n  botDescription?: string;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 20;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  botDescription,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useOnChange(() => {\n    if (isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [chatId, isReady, isChannelChat, lastSyncTime]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useOnChange(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((l) => messagesById[l]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] >= LOCAL_MESSAGE_ID_BASE;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]: [\n    typeof messageIds, typeof isViewportNewest, typeof containerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To workaround that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botDescription ? (\n        <div className=\"empty\"><span>{renderText(lang(botDescription), ['br', 'emoji', 'links'])}</span></div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated) ? (\n        <NoMessages\n          chatId={chatId}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          chatId={chatId}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          areReactionsInMeta={isPrivate}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let botDescription: string | undefined;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botDescription = chatBot.fullInfo.botDescription || 'NoMessages';\n      } else {\n        botDescription = 'Updating bot info...';\n      }\n    }\n\n    return {\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      botDescription,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useDebounce from '../../../hooks/useDebounce';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useDebounce(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import React, {\n  FC, useCallback, memo, useRef,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../modules/selectors';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ScrollDownButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  messageListType?: MessageListType;\n  unreadCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst ScrollDownButton: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  unreadCount,\n  withExtraShift,\n}) => {\n  const { focusNextReply } = getDispatch();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    'ScrollDownButton',\n    isShown && 'revealed',\n    !canPost && 'no-composer',\n    withExtraShift && 'with-extra-shift',\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <div className=\"ScrollDownButton-inner\">\n        <Button\n          color=\"secondary\"\n          round\n          onClick={handleClick}\n          ariaLabel={lang('AccDescrPageDown')}\n        >\n          <i className=\"icon-arrow-down\" />\n        </Button>\n        {Boolean(unreadCount) && (\n          <div className=\"unread-count\">{formatIntegerCompact(unreadCount!)}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    return {\n      messageListType,\n      unreadCount: chat && threadId === MAIN_THREAD_ID && messageListType === 'thread' ? chat.unreadCount : undefined,\n    };\n  },\n)(ScrollDownButton));\n","import { ApiAttachment } from '../../../../api/types';\nimport { SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../../config';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n  fetchBlob,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let previewBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n\n      if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE || mimeType !== 'image/jpeg') {\n        const resizedUrl = await scaleImage(blobUrl, MAX_QUICK_IMG_SIZE / Math.max(width, height), 'image/jpeg');\n        URL.revokeObjectURL(blobUrl);\n        const newBlob = await fetchBlob(resizedUrl);\n        return buildAttachment(filename, newBlob, true, options);\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    previewBlobUrl,\n    ...options,\n  };\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","export default __webpack_public_path__ + \"c0155344d336103c2b6a0b28cc510750.js\";","// @ts-ignore\nimport encoderPath from 'file-loader!opus-recorder/dist/encoderWorker.min';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\ninterface IOpusRecorder extends Omit<MediaRecorder, 'start' | 'ondataavailable'> {\n  new(options: AnyLiteral): IOpusRecorder;\n\n  start(stream?: MediaStreamAudioSourceNode): void;\n\n  sourceNode: MediaStreamAudioSourceNode;\n\n  ondataavailable: (typedArray: Uint8Array) => void;\n}\n\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    // @ts-ignore\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nexport default () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n","import { StateHookSetter, useEffect } from '../../../../lib/teact/teact';\nimport { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nexport default (\n  insertTextAndUpdateCursor: (text: string, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const { items } = e.clipboardData;\n      const media = Array.from(items)\n        .find((item) => CLIPBOARD_ACCEPTED_TYPES.includes(item.type) && item.kind === 'file');\n      const file = media && media.getAsFile();\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n\n      e.preventDefault();\n\n      if (!file && !pastedText) {\n        return;\n      }\n\n      if (file && !editedMessage) {\n        const attachment = await buildAttachment(file.name, file, true);\n        setAttachments((attachments) => [\n          ...attachments,\n          attachment,\n        ]);\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments]);\n};\n","import { ApiFormattedText } from '../../../../api/types';\nimport { renderTextWithEntities } from '../../../common/helpers/renderMessageText';\n\nexport default function getMessageTextAsHtml(formattedText?: ApiFormattedText) {\n  const { text, entities } = formattedText || {};\n  if (!text) {\n    return '';\n  }\n\n  const result = renderTextWithEntities(\n    text,\n    entities,\n    undefined,\n    undefined,\n    true,\n  );\n\n  if (Array.isArray(result)) {\n    return result.join('');\n  }\n\n  return result;\n}\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiFormattedText, ApiMessage } from '../../../../api/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_ID } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: string | undefined;\nlet currentThreadId: number | undefined;\n\nexport default (\n  draft: ApiFormattedText | undefined,\n  chatId: string,\n  threadId: number,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n) => {\n  const { saveDraft, clearDraft } = getDispatch();\n\n  const updateDraft = useCallback((draftChatId: string, draftThreadId: number) => {\n    const currentHtml = htmlRef.current;\n    if (currentHtml.length && !editedMessage) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(currentHtml!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (!draft) {\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(draft));\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId]);\n\n  const html = htmlRef.current;\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n","import { useState } from '../lib/teact/teact';\n\nimport useDebounce from './useDebounce';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport useFlag from './useFlag';\n\nexport default function useDebouncedMemo<R extends any, D extends any[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const runDebounced = useDebounce(ms, true);\n  const [value, setValue] = useState<R>();\n  const [isFrozen, freeze, unfreeze] = useFlag();\n\n  useHeavyAnimationCheck(freeze, unfreeze);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    runDebounced(() => {\n      setValue(resolverFn());\n    });\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\nimport { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport useDebouncedMemo from '../../../../hooks/useDebouncedMemo';\n\nconst DEBOUNCE_MS = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: string,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot } = getDispatch();\n\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDebouncedMemo(() => parseBotQuery(html), DEBOUNCE_MS, [html]) || {};\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = usernameLowered ? inlineBots?.[usernameLowered] : undefined;\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [offset, chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results?.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: unmarkIsOpen,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nfunction parseBotQuery(html: string) {\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n    usernameLowered: result[1].toLowerCase(),\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  return tempEl.innerText;\n}\n","import {\n  useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotCommand } from '../../../../api/types';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport { throttle } from '../../../../util/schedulers';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\nconst RE_COMMAND = /^[\\w@]{1,32}\\s?/i;\n\nexport default function useBotCommandTooltip(\n  isAllowed: boolean,\n  html: string,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n\n  const getFilteredCommands = useCallback((filter) => {\n    if (!botCommands && !chatBotCommands) {\n      setFilteredBotCommands(undefined);\n\n      return;\n    }\n\n    runThrottled(() => {\n      const nextFilteredBotCommands = (botCommands || chatBotCommands || [])\n        .filter(({ command }) => !filter || command.includes(filter));\n      setFilteredBotCommands(\n        nextFilteredBotCommands && nextFilteredBotCommands.length ? nextFilteredBotCommands : undefined,\n      );\n    });\n  }, [botCommands, chatBotCommands]);\n\n  useEffect(() => {\n    if (!isAllowed || !html.length) {\n      unmarkIsOpen();\n      return;\n    }\n\n    const shouldShowCommands = html.startsWith('/');\n\n    if (shouldShowCommands) {\n      const filter = prepareForRegExp(html.substr(1)).match(RE_COMMAND);\n      getFilteredCommands(filter ? filter[0] : '');\n    } else {\n      unmarkIsOpen();\n    }\n  }, [getFilteredCommands, html, isAllowed, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (filteredBotCommands && filteredBotCommands.length) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [filteredBotCommands, markIsOpen, unmarkIsOpen]);\n\n  return {\n    isOpen,\n    close: unmarkIsOpen,\n    filteredBotCommands,\n  };\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import React, {\n  FC, useRef, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Button, { OwnProps as ButtonProps } from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={IS_TOUCH_ENV ? onActivate : undefined}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './CalendarModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CalendarModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CalendarModal = useModuleLoader(Bundles.Extra, 'CalendarModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CalendarModal ? <CalendarModal {...props} /> : undefined;\n};\n\nexport default memo(CalendarModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AttachMenu = useModuleLoader(Bundles.Extra, 'AttachMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachMenu ? <AttachMenu {...props} /> : undefined;\n};\n\nexport default memo(AttachMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './CustomSendMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomSendMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomSend = useModuleLoader(Bundles.Extra, 'CustomSendMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomSend ? <CustomSend {...props} /> : undefined;\n};\n\nexport default memo(CustomSendMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../modules/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickInlineButton } = getDispatch();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n  const [forceOpen, markForceOpen, unmarkForceOpen] = useFlag(true);\n\n  const handleClose = () => {\n    unmarkForceOpen();\n    onClose();\n  };\n\n  useEffect(() => {\n    markForceOpen();\n  }, [markForceOpen, message?.keyboardButtons]);\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen || forceOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={handleClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={handleClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'NOT_SUPPORTED'}\n                onClick={() => clickInlineButton({ button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n} from '../../../modules/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../modules/helpers';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    exitForwardMode,\n  } = getDispatch();\n\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n  }, [replyingToId, editingId, forwardedMessagesCount, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, message]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? `${forwardedMessagesCount} forwarded messages`\n    : undefined;\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Cancel replying\" onClick={clearEmbedded}>\n          <i className=\"icon-close\" />\n        </Button>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={message}\n          sender={sender}\n          customText={customText}\n          title={editingId ? 'Edit Message' : undefined}\n          onClick={handleMessageClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      currentUserId,\n      forwardMessages: { fromChatId, toChatId, messageIds: forwardMessageIds },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n\n    let message;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = selectChatMessage(global, fromChatId!, forwardMessageIds![0]);\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = chatId === currentUserId;\n\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n    }\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage, ApiMessageEntityTypes, ApiWebPage } from '../../../api/types';\nimport { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage, selectTheme } from '../../../modules/selectors';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDebouncedMemo from '../../../hooks/useDebouncedMemo';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getDispatch();\n\n  const link = useDebouncedMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities && entities.find(({ type }) => type === ApiMessageEntityTypes.TextUrl);\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, DEBOUNCE_MS, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  const handleClearWebpagePreview = () => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  };\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Clear Webpage Preview\" onClick={handleClearWebpagePreview}>\n          <i className=\"icon-close\" />\n        </Button>\n        <WebPage message={messageStub} inPreview theme={theme} />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState, MessageListType } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n  ApiBotCommand,\n} from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, EDITABLE_INPUT_ID, REPLIES_USER_ID, SCHEDULED_WHEN_ONLINE, SEND_MESSAGE_ACTION_INTERVAL,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatUser,\n  selectChatMessage,\n  selectUser,\n  selectUserStatus,\n} from '../../../modules/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isUserId,\n  isChatAdmin,\n  isChatSuperGroup,\n} from '../../../modules/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration, getDayStartAt } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport insertHtmlInSelection from '../../../util/insertHtmlInSelection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useOnChange from '../../../hooks/useOnChange';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport CalendarModal from '../../common/CalendarModal.async';\nimport Avatar from '../../common/Avatar';\nimport AttachMenu from './AttachMenu.async';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiFormattedText;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    isPollModalOpen?: boolean;\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    serverTimeOffset: number;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst CAPTION_MAX_LENGTH = 1024;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  isPollModalOpen,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  baseEmojiKeywords,\n  emojiKeywords,\n  serverTimeOffset,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    loadFullChat,\n  } = getDispatch();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const htmlRef = useStateRef(html);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n  const [\n    scheduledMessageArgs, setScheduledMessageArgs,\n  ] = useState<GlobalState['messages']['contentToBeScheduled'] | undefined>();\n  const { width: windowWidth } = windowSize.get();\n  const sendAsIds = chat?.sendAsIds;\n  const canShowSendAs = sendAsIds && (sendAsIds.length > 1 || !sendAsIds.includes(currentUserId!));\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsIds]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !chat.fullInfo && isReady && isChatSuperGroup(chat)) {\n      loadFullChat({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadFullChat]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useOnChange(([prevChatId, prevSendAsIds]) => {\n    // We only animate send-as button if `sendAsIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsIds && !prevSendAsIds);\n  }, [chatId, sendAsIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      setScheduledMessageArgs(contentToBeScheduled);\n      openCalendar();\n    }\n  }, [contentToBeScheduled, openCalendar]);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const mainButtonState = editingMessage ? MainButtonState.Edit\n    : (!IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding)\n      ? (shouldSchedule ? MainButtonState.Schedule : MainButtonState.Send)\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    htmlRef,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean((botCommands && botCommands.length) || (chatBotCommands && chatBotCommands.length)),\n    html,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    htmlRef,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    const messageInput = document.getElementById(inputId)!;\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [htmlRef]);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, [htmlRef]);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments(MEMO_EMPTY_ARRAY);\n    closeStickerTooltip();\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeCalendar, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu]);\n\n  // Handle chat change (ref is used to avoid redundant effect calls)\n  const stopRecordingVoiceRef = useRef<typeof stopRecordingVoice>();\n  stopRecordingVoiceRef.current = stopRecordingVoice;\n  useEffect(() => {\n    return () => {\n      stopRecordingVoiceRef.current!();\n      resetComposer();\n    };\n  }, [chatId, resetComposer, stopRecordingVoiceRef]);\n\n  const handleEditComplete = useEditing(htmlRef, setHtml, editingMessage, resetComposer, openDeleteModal);\n  useDraft(draft, chatId, threadId, htmlRef, setHtml, editingMessage);\n  useClipboardPaste(insertTextAndUpdateCursor, setAttachments, editingMessage);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, []);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    const maxLength = currentAttachments.length ? CAPTION_MAX_LENGTH : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = getServerTime(serverTimeOffset);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime(serverTimeOffset);\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, clearDraft, chatId, serverTimeOffset,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang, htmlRef,\n  ]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleActivateSymbolMenu = useCallback(() => {\n    closeBotCommandMenu();\n    closeSendAsMenu();\n    openSymbolMenu();\n  }, [closeBotCommandMenu, closeSendAsMenu, openSymbolMenu]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, shouldPreserveInput = false) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ sticker });\n      openCalendar();\n    } else {\n      sendMessage({ sticker });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ gif });\n      openCalendar();\n    } else {\n      sendMessage({ gif });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleInlineBotSelect = useCallback((inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    sendInlineBotResult({\n      id: inlineResult.id,\n      queryId: inlineResult.queryId,\n    });\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, connectionState, resetComposer, sendInlineBotResult]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ poll });\n      closePollModal();\n      openCalendar();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, openCalendar, sendMessage, shouldSchedule]);\n\n  const handleSilentSend = useCallback(() => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ isSilent: true });\n      openCalendar();\n    } else {\n      void handleSend(true);\n    }\n  }, [handleSend, openCalendar, shouldSchedule]);\n\n  const handleMessageSchedule = useCallback((date: Date, isWhenOnline = false) => {\n    const { isSilent, ...restArgs } = scheduledMessageArgs || {};\n\n    // Scheduled time can not be less than 10 seconds in future\n    const scheduledAt = Math.round(Math.max(date.getTime(), Date.now() + 60 * 1000) / 1000)\n      + (isWhenOnline ? 0 : serverTimeOffset);\n\n    if (!scheduledMessageArgs || Object.keys(restArgs).length === 0) {\n      void handleSend(!!isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...scheduledMessageArgs,\n        scheduledAt,\n      });\n      requestAnimationFrame(() => {\n        resetComposer();\n      });\n    }\n    closeCalendar();\n  }, [closeCalendar, handleSend, resetComposer, scheduledMessageArgs, sendMessage, serverTimeOffset]);\n\n  const handleMessageScheduleUntilOnline = useCallback(() => {\n    handleMessageSchedule(new Date(SCHEDULED_WHEN_ONLINE * 1000), true);\n  }, [handleMessageSchedule]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n  }, [closeCalendar]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu, closeBotCommandMenu]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record:\n        void startRecordingVoice();\n        break;\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        openCalendar();\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, startRecordingVoice, handleEditComplete,\n    activeVoiceRecording, openCalendar, pauseRecordingVoice,\n  ]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record && !canAttachMedia;\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = areVoiceMessagesNotAllowed\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? openCalendar\n      : handleSend;\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        attachments={attachments}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        recentEmojis={recentEmojis}\n        isReady={isReady}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        addRecentEmoji={addRecentEmoji}\n        onSend={shouldSchedule ? openCalendar : handleSend}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={Boolean(isPollModalOpen)}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsIds={sendAsIds}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {isChatWithBot && botCommands !== false && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={isSymbolMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={handleActivateSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            chatId={chatId}\n            threadId={threadId}\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && !attachments.length}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {!activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isAttachMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openAttachMenu}\n              ariaLabel=\"Add an attachment\"\n            >\n              <i className=\"icon-attach\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <AttachMenu\n            isOpen={isAttachMenuOpen}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            onClose={closeAttachMenu}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <SymbolMenu\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isSymbolMenuOpen}\n            canSendGifs={canSendGifs}\n            canSendStickers={canSendStickers}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSilentSend={!isChatWithSelf ? handleSilentSend : undefined}\n          onScheduleSend={!shouldSchedule ? openCalendar : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={scheduledDefaultDate.getTime()}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        secondButtonLabel={canScheduleUntilOnline ? lang('Schedule.SendWhenOnline') : undefined}\n        onClose={handleCloseCalendar}\n        onSubmit={handleMessageSchedule}\n        onSecondButtonClick={canScheduleUntilOnline ? handleMessageScheduleUntilOnline : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatUser = chat && selectChatUser(global, chat);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language, shouldSuggestStickers } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsIds && defaultSendAsId && chat.sendAsIds.includes(defaultSendAsId)\n      ? defaultSendAsId\n      : (chat?.adminRights?.anonymous ? chat?.id : undefined);\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      canScheduleUntilOnline: Boolean(\n        !isChatWithSelf && !isChatWithBot && chat && chatUser\n        && isUserId(chatId) && selectUserStatus(global, chatId)?.wasOnline,\n      ),\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      isPollModalOpen: global.isPollModalOpen,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      shouldSuggestStickers,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      serverTimeOffset: global.serverTimeOffset,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n      chatBotCommands: chat && chat.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot && chatBot.fullInfo ? (chatBot.fullInfo.botCommands || false) : undefined,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n    };\n  },\n)(Composer));\n","import { useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const cleanHtml = useMemo(() => prepareForRegExp(html).trim(), [html]);\n  const { loadStickersForEmoji, clearStickersForEmoji } = getDispatch();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({\n        emoji: IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1],\n      });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","export default function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection?.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n    } else {\n      range.collapse(false);\n    }\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../../../api/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../modules/helpers';\n\nexport default (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: () => void,\n  openDeleteModal: () => void,\n) => {\n  const { editMessage } = getDispatch();\n\n  // TODO useOnChange\n  // Handle editing message\n  useEffect(() => {\n    if (!editedMessage) {\n      setHtml('');\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(editedMessage.content.text));\n\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [editedMessage, setHtml]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer]);\n\n  return handleEditComplete;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { emojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(Bundles.Extra, 'EmojiInteractionAnimation', !emojiInteraction);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import React, {\n  FC, useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChatBannedRights, MAIN_THREAD_ID } from '../../api/types';\nimport {\n  MessageListType,\n  MessageList as GlobalMessageList,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport { ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTheme,\n} from '../../modules/selectors';\nimport {\n  getCanPostInChat, getMessageSendingRestrictionReason, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../modules/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport { createMessageHash } from '../../util/routing';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useOnChange from '../../hooks/useOnChange';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport ScrollDownButton from './ScrollDownButton';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\n\nimport './MiddleColumn.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  animationLevel?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  messageLists?: GlobalMessageList[];\n  isChannel?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  activeEmojiInteraction?: ActiveEmojiInteraction;\n};\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  messageLists,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteraction,\n}) => {\n  const {\n    openChat,\n    unpinAllMessages,\n    loadUser,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    closePaymentModal,\n    clearReceipt,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n  } = getDispatch();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const hasTools = hasPinnedOrAudioPlayer && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, CLOSE_ANIMATION_DURATION);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, CLOSE_ANIMATION_DURATION);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    animationLevel, currentTransitionKey, prevTransitionKey, chatId,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useOnChange(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (window.visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openChat({ id: chatId });\n  }, [unpinAllMessages, openChat, closeUnpinModal, chatId]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    customBackground && 'custom-bg-image',\n    backgroundColor && 'custom-bg-color',\n    customBackground && isBackgroundBlurred && 'blurred',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  useHistoryBack(\n    renderingChatId && renderingThreadId,\n    closeChat, undefined, undefined, undefined,\n    messageLists?.map(createMessageHash) || [],\n  );\n\n  useHistoryBack(isMobileSearchActive, closeLocalTextSearch);\n  useHistoryBack(isSelectModeActive, exitMessageSelectMode);\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && messageSendingRestrictionReason,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingCanStartBot || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      // @ts-ignore teact-feature\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        id=\"middle-column-bg\"\n        // @ts-ignore\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              {() => (\n                <>\n                  <MessageList\n                    key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    type={renderingMessageListType}\n                    canPost={renderingCanPost}\n                    hasTools={renderingHasTools}\n                    onFabToggle={setIsFabShown}\n                    onNotchToggle={setIsNotchShown}\n                    isReady={isReady}\n                    withBottomShift={withMessageListBottomShift}\n                  />\n                  <div className={footerClassName}>\n                    {renderingCanPost && (\n                      <Composer\n                        chatId={renderingChatId}\n                        threadId={renderingThreadId}\n                        messageListType={renderingMessageListType}\n                        dropAreaState={dropAreaState}\n                        onDropHide={handleHideDropArea}\n                        isReady={isReady}\n                      />\n                    )}\n                    {isPinnedMessageList && (\n                      <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          color=\"secondary\"\n                          className=\"unpin-all-button\"\n                          onClick={handleOpenUnpinModal}\n                        >\n                          <i className=\"icon-unpin\" />\n                          <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                        </Button>\n                      </div>\n                    )}\n                    {isMessagingDisabled && (\n                      <div className={messagingDisabledClassName}>\n                        <div className=\"messaging-disabled-inner\">\n                          <span>\n                            {messageSendingRestrictionReason}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n                    {IS_SINGLE_COLUMN_LAYOUT && renderingCanSubscribe && (\n                      <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"join-subscribe-button\"\n                          onClick={handleSubscribeClick}\n                        >\n                          {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                        </Button>\n                      </div>\n                    )}\n                    {IS_SINGLE_COLUMN_LAYOUT && renderingCanStartBot && (\n                      <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"join-subscribe-button\"\n                          onClick={handleStartBot}\n                        >\n                          {lang('BotStart')}\n                        </Button>\n                      </div>\n                    )}\n                    {IS_SINGLE_COLUMN_LAYOUT && renderingCanRestartBot && (\n                      <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"join-subscribe-button\"\n                          onClick={handleRestartBot}\n                        >\n                          {lang('BotRestart')}\n                        </Button>\n                      </div>\n                    )}\n                    <MessageSelectToolbar\n                      messageListType={renderingMessageListType}\n                      isActive={isSelectModeActive}\n                      canPost={renderingCanPost}\n                    />\n                    <PaymentModal\n                      isOpen={Boolean(isPaymentModalOpen)}\n                      onClose={closePaymentModal}\n                    />\n                    <ReceiptModal\n                      isOpen={Boolean(isReceiptModalOpen)}\n                      onClose={clearReceipt}\n                    />\n                    <SeenByModal isOpen={isSeenByModalOpen} />\n                    <ReactorListModal isOpen={isReactorListModalOpen} />\n                  </div>\n                </>\n              )}\n            </Transition>\n\n            <ScrollDownButton\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      {activeEmojiInteraction && (\n        <EmojiInteractionAnimation emojiInteraction={activeEmojiInteraction} />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const { messageLists } = global.messages;\n    const currentMessageList = selectCurrentMessageList(global);\n    const { isLeftColumnShown, chats: { listIds }, activeEmojiInteraction } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      isSeenByModalOpen: Boolean(global.seenByModal),\n      isReactorListModalOpen: Boolean(global.reactorModal),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      activeEmojiInteraction,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate: isUserId(chatId),\n      canPost: !isPinnedMessageList && (!chat || canPost) && !isBotNotStarted,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioPlayer: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      messageLists,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  animationLevel?: number,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n) {\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (animationLevel !== ANIMATION_LEVEL_MIN) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useOnChange(() => {\n    if (animationLevel === ANIMATION_LEVEL_MIN) {\n      setIsReady(true);\n    }\n  }, [animationLevel]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: animationLevel !== ANIMATION_LEVEL_MIN ? handleOpenEnd : undefined,\n    handleSlideStop: animationLevel !== ANIMATION_LEVEL_MIN ? handleSlideStop : undefined,\n  };\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ManagementScreens, ProfileState } from '../../types';\nimport { ApiExportedInvite } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  getCanAddContact, isChatAdmin, isChatChannel, isUserId,\n} from '../../modules/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport './RightHeader.scss';\nimport { getDayStartAt } from '../../util/dateFormat';\n\ntype OwnProps = {\n  chatId?: string;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isAddingChatMembers?: boolean;\n  shouldSkipAnimation?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n};\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  shouldSkipAnimation,\n  isEditingInvite,\n  currentInviteInfo,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    addContact,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const backButtonRef = useRef<HTMLDivElement>(null);\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n  }, [chatId, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    addContact({ userId });\n  }, [addContact, userId]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"danger\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Delete')}\n                  onClick={handleDeleteInviteClick}\n                >\n                  <i className=\"icon-delete\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon-add-user\" />\n                </Button>\n              )}\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipAnimation) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div ref={backButtonRef} className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipAnimation) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && global.management.byChatId[chatId]?.editingInvite);\n    const currentInviteInfo = chatId ? global.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      isChannel,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../modules/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: string,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [groupChatMembers, serverTimeOffset, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      ).reverse();\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import React, {\n  FC, useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  MAIN_THREAD_ID,\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport {\n  NewChatMembersProgress, ISettings, MediaViewerOrigin, ProfileState, ProfileTabType, SharedMediaType, AudioOrigin,\n} from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId,\n} from '../../modules/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../modules/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  userId?: string;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n  { type: 'voice', title: 'SharedVoiceTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  serverTimeOffset,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    openUserInfo,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    ...(hasCommonChatsTab ? [{\n      type: 'commonChats', title: 'SharedGroupsTab2',\n    }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown, loadMoreMembers, loadCommonChats, searchMediaMessagesLocal, tabType, mediaSearchType, members,\n    commonChatIds, usersById, userStatusesById, chatsById, chatMessages, foundIds, chatId, lastSyncTime,\n    serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContents = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSharedMedia() {\n    if (!viewportIds || !canRenderContents || !chatMessages) {\n      // This is just a single-frame delay, so we do not show spinner\n      const noSpinner = isFirstTab && viewportIds && !canRenderContents;\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && <Spinner />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              senderTitle={getSenderName(lang, chatMessages[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContents ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContents ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderSharedMedia}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId?: string) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, userId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const chatMessages = selectChatMessages(global, userId || chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat?.fullInfo?.members;\n    const areMembersHidden = hasMembersTab && chat && chat.fullInfo && !chat.fullInfo.canViewMembers;\n    const canAddMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (userId) {\n      resolvedUserId = userId;\n    } else if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n    }\n    if (resolvedUserId) {\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nexport default () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import React, {\n  FC, useCallback, useMemo, memo, useState, useEffect,\n} from '../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiChatMember, ApiUpdateConnectionStateType,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat } from '../../modules/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  connectionState?: ApiUpdateConnectionStateType;\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  connectionState,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery, loadContactList } = getDispatch();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useEffect(() => {\n    if (isActive && connectionState === 'connectionStateReady') {\n      loadContactList();\n    }\n  }, [connectionState, isActive, loadContactList]);\n\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress, connectionState } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n      connectionState,\n    };\n  },\n)(AddChatMembers));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../modules/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  currentProfileUserId?: string;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  currentProfileUserId,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    openUserInfo,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n  } = getDispatch();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo || contentKey === RightColumnContent.UserInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.UserInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        openUserInfo({ id: undefined }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ invite: undefined });\n            setEditingExportedInvite({ chatId, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, openUserInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevContentKey, prevChatId]) => {\n    if (\n      (prevContentKey === RightColumnContent.ChatInfo && contentKey === RightColumnContent.UserInfo)\n      || (prevContentKey === RightColumnContent.UserInfo && contentKey === RightColumnContent.ChatInfo)\n      || (prevChatId !== chatId)\n    ) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [contentKey, chatId]);\n\n  useHistoryBack(isChatSelected && (contentKey === RightColumnContent.ChatInfo\n    || contentKey === RightColumnContent.UserInfo || contentKey === RightColumnContent.Management\n    || contentKey === RightColumnContent.AddingMembers),\n  () => close(false), toggleChatInfo);\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            chatId={chatId!}\n            onNextStep={handleAppendingChatMembers}\n            isActive={isOpen && isActive}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n      case RightColumnContent.UserInfo:\n        return (\n          <Profile\n            key={currentProfileUserId || chatId!}\n            chatId={chatId!}\n            userId={currentProfileUserId}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            isActive={isOpen && isActive}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          shouldSkipAnimation={shouldSkipTransition || shouldSkipHistoryAnimations}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={RightColumnContent.ChatInfo}\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const nextManagementScreen = chatId ? global.management.byChatId[chatId]?.nextScreen : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      currentProfileUserId: global.users.selectedId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","export default function download(url: string, filename: string) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import { FC, memo, useEffect } from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { Thread } from '../../global/types';\nimport { ApiMediaFormat, ApiMessage } from '../../api/types';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaHash,\n} from '../../modules/helpers';\n\ntype StateProps = {\n  activeDownloads: Record<number, number[]>;\n  messages: Record<number, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst startedDownloads = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessageMediaDownload } = getDispatch();\n\n  useEffect(() => {\n    Object.entries(activeDownloads).forEach(([chatId, messageIds]) => {\n      const activeMessages = messageIds.map((id) => messages[Number(chatId)].byId[id]);\n      activeMessages.forEach((message) => {\n        const downloadHash = getMessageMediaHash(message, 'download');\n        if (!downloadHash) {\n          cancelMessageMediaDownload({ message });\n          return;\n        }\n\n        if (!startedDownloads.has(downloadHash)) {\n          const mediaData = mediaLoader.getFromMemory(downloadHash);\n          if (mediaData) {\n            startedDownloads.delete(downloadHash);\n            download(mediaData, getMessageContentFilename(message));\n            cancelMessageMediaDownload({ message });\n            return;\n          }\n\n          mediaLoader.fetch(downloadHash, ApiMediaFormat.BlobUrl, true).then((result) => {\n            startedDownloads.delete(downloadHash);\n            if (result) {\n              download(result, getMessageContentFilename(message));\n            }\n            cancelMessageMediaDownload({ message });\n          });\n\n          startedDownloads.add(downloadHash);\n        }\n      });\n    });\n  }, [\n    cancelMessageMediaDownload,\n    messages,\n    activeDownloads,\n  ]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = global.activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './ForwardPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardPicker = useModuleLoader(Bundles.Extra, 'ForwardPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardPicker ? <ForwardPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardPickerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  groupCallId?: string;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !groupCallId);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isOpen: boolean;\n};\n\nconst CallFallbackConfirmAsync: FC<OwnProps> = ({ isOpen }) => {\n  const CallFallbackConfirm = useModuleLoader(Bundles.Calls, 'CallFallbackConfirm', !isOpen);\n\n  return CallFallbackConfirm ? <CallFallbackConfirm isOpen={isOpen} /> : undefined;\n};\n\nexport default memo(CallFallbackConfirmAsync);\n","import React, {\n  FC, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { LangCode } from '../../types';\nimport { ApiMessage } from '../../api/types';\n\nimport '../../modules/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport {\n  selectChatMessage,\n  selectCountNotMutedUnreadOptimized,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n} from '../../modules/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport buildClassName from '../../util/buildClassName';\nimport { fastRaf } from '../../util/schedulers';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport stopEvent from '../../util/stopEvent';\nimport windowSize from '../../util/windowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport { LOCATION_HASH } from '../../hooks/useHistoryBack';\n\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardPicker from './ForwardPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport CallFallbackConfirm from '../calls/CallFallbackConfirm.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  lastSyncTime?: number;\n  isLeftColumnShown: boolean;\n  isRightColumnShown: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: number;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isCallFallbackConfirmOpen: boolean;\n  addedSetIds?: string[];\n};\n\nconst NOTIFICATION_INTERVAL = 1000;\n\nlet notificationInterval: number | undefined;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps> = ({\n  lastSyncTime,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  openedStickerSetShortName,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  isCallFallbackConfirmOpen,\n  addedSetIds,\n}) => {\n  const {\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    ensureTimeFormat,\n    openStickerSetShortName,\n    checkVersionNotification,\n    loadAppConfig,\n  } = getDispatch();\n  const isSynced = Boolean(lastSyncTime);\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isSynced) {\n      if (!addedSetIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      } else {\n        loadAddedStickers();\n      }\n    }\n  }, [isSynced, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (lastSyncTime && LOCATION_HASH.startsWith('#?tgaddr=')) {\n      processDeepLink(decodeURIComponent(LOCATION_HASH.substr('#?tgaddr='.length)));\n    }\n  }, [lastSyncTime]);\n\n  // Prevent refresh by accidentally rotating device when listening to a voice chat\n  useEffect(() => {\n    if (!activeGroupCallId) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [activeGroupCallId]);\n\n  const {\n    transitionClassNames: middleColumnTransitionClassNames,\n  } = useShowTransition(!isLeftColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const {\n    transitionClassNames: rightColumnTransitionClassNames,\n  } = useShowTransition(isRightColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const className = buildClassName(\n    middleColumnTransitionClassNames.replace(/([\\w-]+)/g, 'middle-column-$1'),\n    rightColumnTransitionClassNames.replace(/([\\w-]+)/g, 'right-column-$1'),\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  // Dispatch heavy transition event when opening middle column\n  useOnChange(([prevIsLeftColumnShown]) => {\n    if (prevIsLeftColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, dispatchHeavyAnimationEnd);\n  }, [isLeftColumnShown]);\n\n  // Dispatch heavy transition event and add body class when opening right column\n  useOnChange(([prevIsRightColumnShown]) => {\n    if (prevIsRightColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    fastRaf(() => {\n      document.body.classList.add('animating-right-column');\n    });\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n\n      fastRaf(() => {\n        document.body.classList.remove('animating-right-column');\n      });\n    });\n  }, [isRightColumnShown]);\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = selectCountNotMutedUnreadOptimized(getGlobal());\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = selectCountNotMutedUnreadOptimized(getGlobal()) - initialUnread;\n        if (newUnread > 0) {\n          updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n          updateIcon(true);\n        }\n      } else {\n        updatePageTitle(PAGE_TITLE);\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    openStickerSetShortName({ stickerSetShortName: undefined });\n  }, [openStickerSetShortName]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className} onDrop={stopEvent} onDragOver={stopEvent}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardPicker isOpen={isForwardModalOpen} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      {activeGroupCallId && (\n        <>\n          <GroupCall groupCallId={activeGroupCallId} />\n          <ActiveCallHeader groupCallId={activeGroupCallId} />\n        </>\n      )}\n      <DownloadManager />\n      <CallFallbackConfirm isOpen={isCallFallbackConfirmOpen} />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { settings: { byKey: { animationLevel, language, wasTimeFormatSetManually } } } = global;\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      lastSyncTime: global.lastSyncTime,\n      isLeftColumnShown: global.isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      safeLinkModalUrl: global.safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      openedStickerSetShortName: global.openedStickerSetShortName,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isCallFallbackConfirmOpen: Boolean(global.groupCalls.isFallbackConfirmOpen),\n      addedSetIds: global.stickers.added.setIds,\n    };\n  },\n)(Main));\n","import { getDispatch, getGlobal } from '../lib/teact/teactn';\n\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nif (!getGlobal().connectionState) {\n  getDispatch().initApi();\n}\n"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addReducer","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","type","shouldReplaceHistory","currentMessageList","replaceThreadParam","exitMessageSelectMode","messages","contentToBeScheduled","forwardMessages","toChatId","setGlobal","updateCurrentMessageList","isChatInfoShown","openChat","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","scrollOffset","messageId","paramName","chatMessages","selectChatMessages","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","selectAllowedMessageActions","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","MAIN_THREAD_ID","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","avatarOwnerId","profilePhotoIndex","origin","mediaViewer","volume","playbackRate","isMuted","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","newGlobal","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","messageListType","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","messageIds","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","closeMediaViewer","selectedMessages","openForwardMenu","message","byChatId","activeDownloads","filter","map","canDownload","forEach","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isPollModalOpen","currentVersion","APP_VERSION","slice","join","serviceNotifications","find","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","serverTimeOffset","content","text","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateSelectedUserId","updateUserSearch","globalUserIds","localUserIds","leftColumnWidth","management","isActive","screen","nextScreen","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","messageLists","action","emoji","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","push","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","payment","isPaymentModalOpen","clearPayment","closeInvoice","error","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","result","callApi","selectThreadOriginChat","limit","users","threadInfos","localMessages","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingIds","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","i","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","delete","isRestricted","Promise","resolve","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","replyMessage","selectChatMessage","updateChatMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","scheduledAt","noWebPage","selectNoWebPage","sendAs","selectSendAs","clearWebPagePreview","value","isSingle","attachments","isGrouped","restParams","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","Date","now","selectEditingMessage","setEditingId","get","previousLocalId","cancelApiProgress","draft","replyToMsgId","updateChat","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","currentUserId","minId","selectFirstUnreadId","unreadCount","readCount","count","l","countSortedIds","lastReadInboxMessageId","webPagePreview","loadWebPagePreview","options","option","offset","shouldResetVoters","unique","user","offsets","nextOffset","loadPollOptionResults","fromChat","toChat","sort","a","b","realMessages","m","isServiceNotificationMessage","poll","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","loadPinnedMessages","seenByUserIds","sendAsId","sendAsChat","selectUser","fullInfo","sendAsIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","searchThrottled","throttle","searchGifs","updateGifSearch","added","addedStickers","updateStickerSets","sets","loadStickerSets","setIds","addedSetIds","loadStickers","stickerSetId","pause","recentStickers","loadRecentStickers","favorite","favoriteStickers","loadFavoriteStickers","greeting","featured","featuredStickers","loadFeaturedStickers","stickerSetShortName","stickerSetAccessHash","stickerSet","selectStickerSet","accessHash","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","replaceAnimatedEmojis","loadAnimatedEmojis","animatedEmojiEffects","loadAnimatedEmojiEffects","saved","savedGifs","loadSavedGifs","unfave","unfaveSticker","installedDate","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","keywords","searchStickers","setsById","title","searchWords","updateStickersForEmoji","loadStickersForEmoji","openedStickerSetShortName","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","chatOrUser","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","searchChats","timestampPlusDay","foundIds","currentSearch","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","newFoundIds","updateLocalTextSearchResults","searchTextMessages","peerId","selectCurrentMediaSearchPeerId","selectCurrentMediaSearch","currentType","currentResults","SHARED_MEDIA_SLICE","updateLocalMediaSearchResults","searchSharedMedia","timestamp","getDispatch","searchMessagesByDate","ManagementProgress","username","updateManagementProgress","updateManagement","isUsernameAvailable","isChatBasicGroup","invite","editingInvite","update","inviteInfo","adminId","isRevoked","admin","revokedInvites","invites","link","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","current","managementState","offsetDate","offsetUserId","offsetUser","currentInviteInfo","importers","isRequested","joinRequests","userId","isApproved","targetChat","importer","recentRequesterIds","requestsPending","releaseStatusTimeout","loadAndReplaceArchivedChats","CHAT_LIST_LOAD_SLICE","archived","withPinned","updateUsers","addUserStatuses","userStatusesById","updateChats","replaceChatListIds","updateChatListSecondaryInfo","loadAndUpdateUsers","contactIds","contactList","updatedUsers","loadTopMessages","afterSyncCallback","DEBUG","console","log","isSyncing","savedUsers","lastLocalServiceMessage","selectLastServiceNotification","savedPrivateChatIds","savedChats","currentChatId","selectedChat","isUserId","selectedChatUser","replaceUserStatuses","replaceChats","draftsById","replyingToById","loadAndReplaceChats","areMessagesLoaded","currentThreadId","draftsByChatId","reduce","acc","newCurrentChatId","currentMessageListInfo","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","threadsById","Array","prototype","replaceUsers","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","sync","afterSync","all","updateAppBadge","selectCountNotMutedUnreadOptimized","runDebouncedForFetchFullUser","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","statusesById","topPeers","lastRequestedAt","loadTopUsers","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","isUserBot","commonChats","isFullyLoaded","updateUser","updateChatMutedState","phoneNumber","phone","updateContact","deleteContact","profileId","isPrivate","photos","userSearch","updateUserSearchFetchingStatus","searchUsers","pick","runDebouncedForSearch","sendBotCommand","command","button","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","toggleSafeLinkModal","showDialog","alert","isError","answerCallbackButton","openPollModal","getReceipt","receiptMessageId","getPaymentForm","setInvoiceMessageInfo","openPaymentModal","bot","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","queryId","resultId","botId","param","startParam","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","requestInfo","saveInfo","selectPaymentChatId","selectPaymentMessageId","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","validateRequestedInfo","setPaymentForm","step","invoice","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","setReceipt","receipt","publishableKey","selectProviderPublishableKey","credentials","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","shippingOptionId","saveCredentials","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","stripeCredentials","selectStripeCredentials","requestedInfoId","sendPaymentForm","save","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","localEffect","startSize","isReversed","activeEmojiInteraction","animatedEffect","interactions","startX","startY","emoticon","selectLocalAnimatedEmojiEffectByName","timestamps","endX","endY","reaction","selectDefaultReaction","sendReaction","reactions","some","isChosen","animationLevel","settings","byKey","ANIMATION_LEVEL_MAX","activeReactions","omit","recentReactions","canSeeList","addMessageReaction","appConfig","defaultReaction","reactors","runThrottledForUpdateAppBadge","areDeepEqual","value1","value2","type1","isArray1","isArray","array1","array2","every","member1","object1","object2","key1","noTopChatsRequest","selectIsChatListed","loadTopChats","newProfilePhoto","closeMessageNotifications","listType","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","senderId","isFromScheduled","hasUnreadMention","unreadMentionsCount","notifyAboutNewMessage","messageUpdate","channelId","selectCommonBoxChatId","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","active","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","photo","formattedText","loadChatJoinRequests","ANIMATION_DELAY","updateWithLocalMedia","isScheduled","currentMessage","video","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","isMessageLocal","addViewportId","messagesCount","firstUnreadId","updateChatLastMessage","force","currentLastMessage","findLastMessage","deleteMessages","newLastMessage","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","updateThreadInfo","newMessage","isMessageInCurrentMessageList","delayedGlobal","localEmoji","selectLocalAnimatedEmoji","selectLocalAnimatedEmojiEffect","scheduledIds","selectScheduledIds","selectIsChatWithBot","selectScheduledMessages","deleteChatScheduledMessages","thread","markMessageListRead","currentPinnedIds","selectPinnedIds","newPinnedIds","newTheadInfo","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","updatedPoll","updatedResults","chosenAnswers","chosenAnswer","chosenAnswerIndex","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOption","targetOptionIndex","updatedOption","votersCount","selectIsServiceChatReady","currentReactions","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","status","targetUser","isBlocked","addBlockedContact","privacy","key","rules","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","connectionState","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","updateGroupCall","participantsCount","groupCallId","participants","participant","updateGroupCallParticipant","useBeforeUnload","callback","useEffect","onBeforeUnload","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","ConnectionStatus","useConnectionStatus","lang","hasMiddleHeader","isMinimized","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","replace","connectionStatus","connectionStatusPosition","connectionStatusText","memo","onClick","useLang","dir","isRtl","Spinner","color","className","Transition","activeKey","name","Button","size","ANIMATION_LEVEL_OPTIONS","withGlobal","searchQuery","chatsById","isConnectionStatusMinimized","globalSearchChatId","searchDate","theme","selectTheme","isMessageListOpen","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","openTipsChat","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","isChatArchived","withOtherVersions","location","hostname","MainButton","onTrigger","isOpen","ripple","ariaLabel","buildClassName","handleSearchFocus","useCallback","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","stopPropagation","newTheme","shouldUseSystemTheme","switchTheme","handleAnimationLevelChange","newLevel","_","body","classList","toggle","isSearchFocused","searchInputPlaceholder","DropdownMenu","trigger","footer","APP_NAME","MenuItem","icon","Switcher","label","checked","noAnimation","langCode","href","FEEDBACK_URL","setPermanentWebVersion","clearWebsync","disableHistoryBack","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","allListIds","usersById","orderedFolderIds","activeChatFolder","shouldSkipHistoryAnimations","notifySettings","selectNotifySettings","notifyExceptions","selectNotifyExceptions","foldersDispatch","onScreenSelect","loadChatFolders","setActiveChatFolder","transitionRef","useRef","displayedFolders","folderCountersById","resolverFn","ms","dependencies","runThrottled","useThrottle","setValue","isFrozen","freeze","unfreeze","useFlag","useHeavyAnimationCheck","useOnChange","counters","unreadDialogsCount","hasActiveDialogs","getFolderUnreadDialogs","badgeCount","isBadgeActive","useThrottledMemo","folderTabs","ALL_FOLDER_ID","handleSwitchTab","forceOnHeavyAnimation","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInAllTabRef","captureEscKeyListener","useHistoryBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","ChatList","folderType","TabList","tabs","activeTab","onSwitchTab","ref","renderCount","props","LeftSearch","useModuleLoader","Bundles","Loading","ContactList","closeTimeout","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","handleMouseEnter","handleMouseLeave","onMouseEnter","onMouseLeave","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","onContentChange","isNewChatButtonShown","setIsNewChatButtonShown","isMouseInside","handleSelectSettings","handleSelectContacts","handleSelectNewChannel","handleSelectNewGroup","handleSelectArchived","autoCloseTimeout","shouldRenderUpdateButton","updateButtonClassNames","handleUpdateClick","isAppOutdated","markIsAppOutdated","timeout","reload","useAppOutdatedCheck","shouldCleanup","cleanupExceptionKey","fluid","pill","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","SettingsScreens","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","pickerSearchInput","getElementById","blur","handleSearchQuery","IS_MAC_OS","metaKey","getKeyFromEvent","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","style","remove","handleMouseMove","event","newWidth","ceil","clientX","stopDrag","offsetWidth","add","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","isChannel","onMouseDown","onMouseUp","onDoubleClick","setSize","handleResize","HeaderMenuContainer","isChatChannel","selectIsInSelectMode","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canCall","ARE_CALLS_SUPPORTED","canMute","canLeave","canEnterVoiceChat","isCallActive","canCreateVoiceChat","adminRights","manageCall","isCreator","pendingJoinRequests","canExpandActions","joinChannel","openLocalTextSearch","restartBot","openCallFallbackConfirm","requestNextManagementScreen","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","right","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleRestartBot","handleJoinRequestsClick","ManagementScreens","handleSearchClick","focus","searchInput","IS_PWA","disabled","anchor","withExtraActions","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","useWebpThumbnail","thumbDataUri","getMessageMediaThumbDataUri","shouldDecodeThumbnail","isWebpSupported","thumbnailDecoded","setThumbnailDecoded","EMPTY_IMAGE_DATA_URI","useLayoutEffect","webpToPngBase64","then","catch","drawRect","height","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","mediaThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","renderMessageSummary","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","ConfirmDialog","confirmLabel","confirmHandler","getPictogramDimensions","src","alt","renderPictogram","RippleEffect","scaleImage","image","ratio","outputType","Blob","URL","createObjectURL","img","Image","onload","scale","blob","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","Error","res","canvas","createElement","ctx","getContext","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","LOGO_DIMENSIONS","MINIMAL_SIZE","sender","audio","voice","fileName","artist","performer","getSenderTitle","getTranslation","album","getChatTitle","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","media","thumbnailSizes","AVATAR_FULL_DIMENSIONS","getCoverSize","fn","deps","defaultValue","setIsLoading","setError","setResult","wasCancelled","telegramLogoPath","resizeImage","makeGoodArtwork","useAsync","buildMediaMetadata","artwork","selectSender","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","isVoice","senderName","mediaData","mediaMetadata","useMessageMediaMetadata","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isFirst","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isVoicePlaying","handleClick","handleClose","clearMediaSession","handleVolumeChange","handleVolumeClick","handlePlaybackClick","volumeIcon","renderText","renderAudio","subtitle","renderVoice","withClickPropagation","RangeSlider","groupCall","selectChatGroupCall","isLoaded","isCallNotEmpty","hasPinnedOffset","joinGroupCall","subscribeToGroupCallUpdates","handleJoinGroupCall","fetchedParticipants","isUser","subscribed","p","Avatar","formatIntegerCompact","audioMessage","pinnedIds","state","isSelectModeActive","isChatWithBot","currentTransitionKey","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","openChatWithInfo","pinMessage","openPreviousChat","toggleLeftColumn","isBackButtonActive","pinnedMessageIndex","setPinnedMessageIndex","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_ID","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","useCurrentOrPrev","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","canRevealTools","componentEl","renderInfo","renderBackButton","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","noRtl","GroupChatInfo","asClose","withUnreadCount","isAudioPlayerRendered","getMessageKey","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStart","senderGroups","dateGroups","isInAlbum","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","IS_ANDROID","INTERSECTION_MARGIN_FOR_MEDIA","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","noAvatars","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","getMessageText","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","clamp","num","low","high","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","REM","minWidth","maxHeight","spacing","originalRatios","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","calculateAuthorWidth","font","whiteSpace","left","opacity","appendChild","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","onContextMenu","handleBeforeContextMenu","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","onRelease","handleMouseDown","preventMessageInputBlur","clearInterval","pageX","pageY","handleDoubleTap","target","contains","handleTap","handleContextMenu","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","container","clientY","isVisibleX","isVisibleY","handleSendQuickReaction","currentTarget","lastGroupElement","getLastElementInDocumentGroup","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","ContextMenuContainer","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isChat","senderUser","senderChat","observeIntersection","isEmbedded","appearanceOrder","isLastInList","useOnIntersect","noAppearanceAnimation","markShown","targetUsers","renderActionMessageText","isContextMenuOpen","contextMenuPosition","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","customText","isIntersecting","useIsIntersecting","pictogramId","isRoundVideo","getMessageRoundVideo","senderTitle","draggable","activeReaction","isInMeta","stopActiveReaction","r","centerIconId","effectId","mediaDataCenterIcon","mediaDataEffect","shouldPlay","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","AnimatedSticker","animationData","play","noLoop","onLoad","onEnded","outgoingStatus","signature","withReactions","withReactionOffset","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","views","formatTime","MessageOutgoingStatus","observeIntersectionForPlaying","shouldLoop","isModalOpen","openModal","closeModal","isAnimated","isMemojiSticker","MEMOJI_STICKER_ID","shouldLoad","mediaHash","getMessageMediaFormat","isMediaLoaded","isMediaReady","useMediaTransition","getStickerDimensions","thumbClassName","stickerClassName","fromSticker","useBlurredMediaThumbRef","fullMediaData","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","canAutoLoad","isSelected","uploadProgress","nonInteractive","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","loadProgress","useMediaWithLoadProgress","thumbRef","downloadProgress","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","usePrevious","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","contentEl","inSelectMode","getImageData","getAppendixColorFromImage","getCustomAppendixBg","appendixBg","setProperty","ProgressSpinner","useVideoAutoPause","playerRef","canPlay","wasPlaying","paused","canPlayRef","freezePlaying","unfreezePlaying","safePlay","unfreezePlayingOnRaf","fastRaf","useBackgroundMode","canAutoPlay","videoRef","getMessageWebPageVideo","isPlayAllowed","setIsPlayAllowed","previewClassNames","isInline","isBuffered","bufferingHandlers","useBuffering","shouldRenderPlayButton","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","duration","useVideoCleanup","cancelMessageMediaDownload","autoPlay","muted","loop","playsInline","onTimeUpdate","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","openUserInfo","formatPhoneNumberWithCode","getPercentage","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","isQuiz","getReadableVotersCount","isText","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","isSquarePhoto","handleMediaClick","siteName","displayUrl","isMediaInteractive","truncatedDescription","trimText","SafeLink","getMessageInvoice","amount","currency","isTest","photoUrl","formatCurrency","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","selectCanAutoLoadMedia","selectCanAutoPlayMedia","currentOnRelease","playingProgressRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","stopPlaying","capturePlaying","stopCurrentAudio","videoClassName","recentReplierIds","recentRepliers","hasUnread","recentReactors","recentReaction","isOutside","metaChildren","localSticker","soundId","playKey","useAnimatedEmoji","localStickerAnimationData","setLocalStickerAnimationData","getAnimationData","quality","APPENDIX_OWN","__html","APPENDIX_NOT_OWN","withSenderName","withAvatar","isLastInDocumentGroup","viaBotId","replyToChatId","isRepliesChat","isChatWithRepliesBot","chatUsername","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","botSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","selectIsDownloading","actualThreadInfo","isInDocumentGroup","documentGroupFirstMessageId","reactionMessage","selectIsMessageProtected","isSingleEmoji","animatedEmoji","selectAnimatedEmoji","animatedEmojiEffect","selectAnimatedEmojiEffect","animatedEmojiSoundId","selectAnimatedEmojiSound","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoLoadMedia","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","areReactionsInMeta","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","clickInlineButton","bottomMarkerRef","isLocal","hasReply","isReplyMessage","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","asForwarded","isLinkedChannelPost","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","withCommentButton","withQuickReactionButton","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","openMediaViewer","openAudioPlayer","markMessagesRead","sendPollVote","focusMessageInComments","replyToTopMessageId","channelPostId","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","contentClassName","hasComments","hasActionButton","classNames","isMedia","isMediaWithNoText","isViaBot","isRound","buildContentClassName","withAppendix","textParts","renderMessageText","metaPosition","reactionsPosition","calculatedWidth","noMediaCorners","extraPadding","adminTitle","metaSafeAuthorWidth","renderReactionsAndMeta","meta","onMouseMove","isAvatarPeerUser","avatarUser","avatarChat","hiddenName","renderAvatar","textContentClass","senderColor","getUserColorKey","renderSenderName","AnimatedEmoji","effect","forceLoadPreview","Audio","AudioOrigin","isSelectable","onPlay","onReadMedia","Document","renderContent","dangerouslySetInnerHTML","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","threshold","getUserFullName","chatInviteTitle","chatInviteHash","messageGroups","isViewportNewest","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","observeIntersectionForReading","throttleMs","margin","freezeForReading","unfreezeForReading","entries","mentionIds","entry","dataset","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","offsetHeight","scrollHeight","scrollTop","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_ID_BASE","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flatten","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","getMessageOriginalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","botDescription","isChatLoaded","isChannelChat","isGroupChat","isChatGroup","threadFirstMessageId","selectFirstMessageId","linkedChatId","hasTools","canPost","withBottomShift","setScrollOffset","loadSponsoredMessages","loadMessageReactions","scrollOffsetRef","selectScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","onTickEnd","listedMessages","orderBy","useInterval","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useDebounce","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","el","offsetTop","top","findStuckDate","useStickyDates","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","clientHeight","preservedItemElements","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","isAnimatingScroll","patchChromiumScroll","resetScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","onScroll","backgroundColor","withExtraShift","focusNextReply","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","FILE_EXT_REGEX","buildAttachment","filename","isQuick","mimeType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","preloadImage","resizedUrl","fetchBlob","SUPPORTED_VIDEO_CONTENT_TYPES","videoWidth","videoHeight","preloadVideo","createPosterForVideo","resetInput","applyIosAutoCapitalizationFix","inputEl","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","reject","onstop","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","getMessageTextAsHtml","useDebouncedMemo","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","RE_COMMAND","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","CalendarModal","AttachMenu","SymbolMenu","InlineBotTooltip","MentionTooltip","CustomSend","StickerTooltip","BotCommandTooltip","useMouseInside","isKeyboardSingleUse","forceOpen","markForceOpen","unmarkForceOpen","keyboardButtons","forwardMessageIds","forwardedMessagesCount","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","faded","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RegExp","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","linkEntity","ApiMessageEntityTypes","textMatch","renderingWebPage","webPageWithoutPhoto","messageStub","SendAsMenu","MainButtonState","chatUser","selectChatUser","REPLIES_USER_ID","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","anonymous","sendAsUser","editingMessage","canScheduleUntilOnline","selectUserStatus","wasOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","dropAreaState","onDropHide","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","addRecentEmoji","sendInlineBotResult","loadSendAs","appendixRef","html","setHtml","htmlRef","useStateRef","lastMessageSendTimeSeconds","prevDropAreaState","isCalendarOpen","openCalendar","closeCalendar","scheduledMessageArgs","setScheduledMessageArgs","canShowSendAs","sendMessageAction","useSendMessageAction","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsIds","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isAttachMenuOpen","openAttachMenu","closeAttachMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","SEND_MESSAGE_ACTION_INTERVAL","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetInlineBot","markIsOpen","unmarkIsOpen","innerText","getPlainText","parseBotQuery","prevQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","close","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","getFilteredCommands","nextFilteredBotCommands","prepareForRegExp","substr","useBotCommandTooltip","isCustomSendMenuOpen","canSendStickers","canSendGifs","canAttachMedia","canAttachPolls","canAttachEmbedLinks","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","isDisabled","cleanHtml","trim","clearStickersForEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","insertTextAndUpdateCursor","selection","getSelection","newHtml","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","collapse","removeAllRanges","addRange","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","removeSymbol","execCommand","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","stopRecordingVoiceRef","handleEditComplete","editedMessage","editMessage","hasMessageMedia","useEditing","saveDraft","updateDraft","draftChatId","draftThreadId","currentHtml","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevHtml","handleBlur","useDraft","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_MODAL_ID","items","kind","file","getAsFile","pastedText","getData","substring","useClipboardPaste","handleFileSelect","files","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","maxLength","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleActivateBotCommandMenu","handleActivateSymbolMenu","handleGifSelect","gif","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","handleSilentSend","handleMessageSchedule","isWhenOnline","restArgs","getTime","handleMessageScheduleUntilOnline","handleCloseCalendar","handleSearchOpen","handleSymbolMenuOpen","handleSendAsMenuOpen","handleAllScheduledClick","mainButtonHandler","areVoiceMessagesNotAllowed","prevEditedMessage","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","onSend","DropAreaState","withQuick","onHide","onFileSelect","caption","onCaptionUpdate","onFileAppend","onClear","selectedSendAsId","onInsertUserName","filteredUsers","onSelectResult","withUsername","MessageInput","forcedPlaceholder","canAutoFocus","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onStickerSelect","emojis","onEmojiSelect","onPollCreate","onGifSelect","onRemoveSymbol","onSearchOpen","onSilentSend","onScheduleSend","withTimePicker","maxAt","getDayStartAt","isFutureMode","secondButtonLabel","onSubmit","onSecondButtonClick","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","PaymentModal","ReceiptModal","SeenByModal","emojiInteraction","EmojiInteractionAnimation","ReactorListModal","CLOSE_ANIMATION_DURATION","isImage","isBlurred","isBackgroundBlurred","background","customBackground","patternColor","themes","isMobileSearchActive","isReceiptModalOpen","isSeenByModalOpen","isReactorListModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioPlayer","loadUser","closePaymentModal","clearReceipt","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","renderingHasTools","renderingIsFabShown","renderingIsChannel","prevTransitionKey","handleOpenEnd","handleSlideStop","setIsReady","forceUpdate","useForceUpdate","willSwitchMessageList","ANIMATION_LEVEL_MIN","propertyName","useIsReady","visualViewport","documentElement","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","forceSyncOnIOs","createMessageHash","isMessagingDisabled","withMessageListBottomShift","onTransitionEnd","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canAddContact","getCanAddContact","canManage","isEditingInvite","isColumnOpen","isSearch","isStickerSearch","isGifSearch","isPollResults","isAddingChatMembers","profileState","managementScreen","shouldSkipAnimation","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","addContact","setEditingExportedInvite","deleteExportedChatInvite","backButtonRef","handleEditInviteClick","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","handleAddContact","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","renderingContentKey","renderHeaderContent","autoFocusSearch","isBackButton","buttonClassName","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","reverse","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","isGroup","hasMembersTab","areMembersHidden","canViewMembers","canAddMembers","getHasAdminRight","canDeleteMembers","hasCommonChatsTab","resolvedUserId","isChatProtected","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","loadProfilePhotos","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContents","renderSharedMedia","noSpinner","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","teactOrderKey","contextActions","memberId","handler","forceShowSelf","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","currentProfileUserId","selectedId","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","setOpenedInviteInfo","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","prevContentKey","MediaViewer","download","click","startedDownloads","downloadHash","getMessageContentFilename","Notifications","Dialogs","ForwardPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","CallFallbackConfirm","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","updatePageTitle","nextTitle","wasTimeFormatSetManually","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isCallFallbackConfirmOpen","isFallbackConfirmOpen","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadAddedStickers","ensureTimeFormat","openStickerSetShortName","checkVersionNotification","loadAppConfig","isSynced","LOCATION_HASH","processDeepLink","decodeURIComponent","middleColumnTransitionClassNames","rightColumnTransitionClassNames","prevIsLeftColumnShown","dispatchHeavyAnimationEnd","waitForTransitionEnd","prevIsRightColumnShown","initialUnread","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","handleStickerSetModalClose","usePreventPinchZoomGesture","onDrop","onDragOver","initApi"],"sourceRoot":""}