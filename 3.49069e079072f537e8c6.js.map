{"version":3,"sources":["webpack:///./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack:///./src/components/mediaViewer/SenderInfo.tsx","webpack:///./src/components/mediaViewer/MediaViewerActions.tsx","webpack:///./src/components/mediaViewer/MediaViewerFooter.tsx","webpack:///./src/hooks/useFullscreen.ts","webpack:///./src/components/mediaViewer/helpers/formatFileSize.ts","webpack:///./src/components/mediaViewer/VideoPlayerControls.tsx","webpack:///./src/components/mediaViewer/VideoPlayer.tsx","webpack:///./src/components/mediaViewer/ZoomControls.tsx","webpack:///./src/components/mediaViewer/PanZoom.tsx","webpack:///./src/components/mediaViewer/MediaViewer.tsx","webpack:///./src/components/main/ForwardPicker.tsx","webpack:///./src/components/main/Errors.tsx","webpack:///./src/components/main/Notifications.tsx","webpack:///./src/components/main/SafeLinkModal.tsx","webpack:///./src/components/common/CalendarModal.tsx","webpack:///./src/components/common/DeleteMessageModal.tsx","webpack:///./src/components/common/PinMessageModal.tsx","webpack:///./src/components/common/UnpinAllMessagesModal.tsx","webpack:///./src/components/middle/DeleteSelectedMessagesModal.tsx","webpack:///./src/components/middle/MessageSelectToolbar.tsx","webpack:///./src/hooks/useSelectWithEnter.ts","webpack:///./src/components/left/search/LeftSearchResultChat.tsx","webpack:///./src/components/left/search/RecentContacts.tsx","webpack:///./src/components/left/search/ChatMessage.tsx","webpack:///./src/components/left/search/DateSuggest.tsx","webpack:///./src/components/left/search/ChatResults.tsx","webpack:///./src/components/left/search/ChatMessageResults.tsx","webpack:///./src/components/left/search/helpers/createMapStateToProps.ts","webpack:///./src/components/left/search/MediaResults.tsx","webpack:///./src/components/left/search/helpers/getSenderName.ts","webpack:///./src/components/left/search/LinkResults.tsx","webpack:///./src/components/left/search/FileResults.tsx","webpack:///./src/components/left/search/AudioResults.tsx","webpack:///./src/components/left/search/LeftSearch.tsx","webpack:///./src/hooks/useReducer.ts","webpack:///./src/hooks/reducers/useFoldersReducer.ts","webpack:///./src/hooks/reducers/useTwoFaReducer.ts","webpack:///./src/components/left/settings/SettingsHeader.tsx","webpack:///./src/components/left/settings/SettingsMain.tsx","webpack:///./src/components/ui/FloatingActionButton.tsx","webpack:///./src/components/common/UsernameInput.tsx","webpack:///./src/components/left/settings/SettingsEditProfile.tsx","webpack:///./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack:///./src/components/ui/ShowMoreButton.tsx","webpack:///./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack:///./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack:///./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack:///./src/components/left/settings/folders/SettingsFolders.tsx","webpack:///./src/components/ui/RangeSlider.tsx","webpack:///./src/components/middle/composer/StickerSetCoverAnimated.tsx","webpack:///./src/components/middle/composer/StickerSetCover.tsx","webpack:///./src/components/common/StickerButton.tsx","webpack:///./src/components/left/settings/SettingsStickerSet.tsx","webpack:///./src/components/left/settings/SettingsGeneral.tsx","webpack:///./src/util/systemFilesDialog.ts","webpack:///./src/util/colors.ts","webpack:///./src/components/left/settings/WallpaperTile.tsx","webpack:///./src/components/left/settings/SettingsGeneralBackground.tsx","webpack:///./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack:///./src/components/left/settings/SettingsNotifications.tsx","webpack:///./src/components/left/settings/SettingsPrivacy.tsx","webpack:///./src/components/left/settings/SettingsLanguage.tsx","webpack:///./src/components/left/settings/helper/privacy.ts","webpack:///./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack:///./src/components/left/settings/SettingsPrivacyActiveSessions.tsx","webpack:///./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaPassword.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack:///./src/components/common/Picker.tsx","webpack:///./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack:///./src/components/left/settings/Settings.tsx","webpack:///./src/components/left/main/ContactList.tsx","webpack:///./src/components/left/newChat/NewChatStep1.tsx","webpack:///./src/components/left/newChat/NewChatStep2.tsx","webpack:///./src/components/left/newChat/NewChat.tsx","webpack:///./src/components/left/ArchivedChats.tsx","webpack:///./src/util/scrollLock.ts","webpack:///./src/components/middle/message/helpers/copyOptions.ts","webpack:///./src/components/middle/message/MessageContextMenu.tsx","webpack:///./src/components/middle/message/ContextMenuContainer.tsx","webpack:///./src/components/common/StickerSetModal.tsx","webpack:///./src/components/middle/HeaderMenuContainer.tsx","webpack:///./src/components/middle/MobileSearch.tsx","webpack:///./src/util/findInViewport.ts","webpack:///./src/util/isFullyVisible.ts","webpack:///./src/components/middle/composer/MentionTooltip.tsx","webpack:///./src/components/middle/composer/AttachmentModal.tsx","webpack:///./src/components/middle/composer/PollModal.tsx","webpack:///./src/hooks/useMouseInside.ts","webpack:///./src/components/middle/composer/EmojiButton.tsx","webpack:///./src/components/middle/composer/EmojiCategory.tsx","webpack:///./src/components/middle/composer/EmojiPicker.tsx","webpack:///./src/components/middle/composer/StickerSet.tsx","webpack:///./src/components/middle/composer/StickerPicker.tsx","webpack:///./src/components/common/GifButton.tsx","webpack:///./src/components/middle/composer/GifPicker.tsx","webpack:///./src/components/middle/composer/SymbolMenuFooter.tsx","webpack:///./src/components/middle/composer/SymbolMenu.tsx","webpack:///./src/components/middle/composer/AttachMenu.tsx","webpack:///./src/components/middle/composer/StickerTooltip.tsx","webpack:///./src/components/middle/composer/BotKeyboardMenu.tsx","webpack:///./src/components/middle/composer/CustomSendMenu.tsx","webpack:///./src/components/middle/composer/EmojiTooltip.tsx","webpack:///./src/components/right/RightSearch.tsx","webpack:///./src/components/right/StickerSetResult.tsx","webpack:///./src/components/right/StickerSearch.tsx","webpack:///./src/components/right/GifSearch.tsx","webpack:///./src/components/right/PollAnswerResults.tsx","webpack:///./src/components/right/PollResults.tsx","webpack:///./src/components/right/management/ManageUser.tsx","webpack:///./src/components/right/management/ManageGroup.tsx","webpack:///./src/components/right/management/ManageGroupPermissions.tsx","webpack:///./src/components/right/management/ManageGroupRemovedUsers.tsx","webpack:///./src/components/right/management/ManageChannel.tsx","webpack:///./src/components/right/management/ManageChatPrivacyType.tsx","webpack:///./src/components/right/management/ManageDiscussion.tsx","webpack:///./src/components/right/management/ManageGroupUserPermissions.tsx","webpack:///./src/components/right/management/ManageChatAdministrators.tsx","webpack:///./src/components/right/management/ManageGroupRecentActions.tsx","webpack:///./src/components/right/management/ManageGroupAdminRights.tsx","webpack:///./src/components/right/management/ManageGroupMembers.tsx","webpack:///./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack:///./src/components/right/management/Management.tsx","webpack:///./src/components/middle/helpers/getCurrencySign.ts","webpack:///./src/components/common/helpers/detectCardType.ts","webpack:///./src/hooks/reducers/usePaymentReducer.ts","webpack:///./src/hooks/useFocusAfterAnimation.tsx","webpack:///./src/components/ui/Select.tsx","webpack:///./src/components/payment/ShippingInfo.tsx","webpack:///./src/components/payment/Shipping.tsx","webpack:///./src/components/payment/Checkout.tsx","webpack:///./src/components/payment/ExpiryInput.tsx","webpack:///./src/components/middle/helpers/inputFormatters.ts","webpack:///./src/assets/mastercard.svg","webpack:///./src/assets/visa.svg","webpack:///./src/components/payment/CardInput.tsx","webpack:///./src/components/payment/PaymentInfo.tsx","webpack:///./src/components/payment/PaymentModal.tsx","webpack:///./src/components/payment/ReceiptModal.tsx","webpack:///./src/components/common/helpers/animatedAssets.ts","webpack:///./src/assets/TwoFactorSetupMonkeyIdle.tgs","webpack:///./src/assets/TwoFactorSetupMonkeyTracking.tgs","webpack:///./src/assets/TwoFactorSetupMonkeyClose.tgs","webpack:///./src/assets/TwoFactorSetupMonkeyPeek.tgs","webpack:///./src/assets/FoldersAll.tgs","webpack:///./src/assets/FoldersNew.tgs","webpack:///./src/assets/DiscussionGroupsDucks.tgs","webpack:///./src/components/ui/CropModal.tsx","webpack:///./src/components/ui/AvatarEditable.tsx","webpack:///./src/components/common/PasswordMonkey.tsx","webpack:///./src/components/common/PasswordForm.tsx"],"names":["animateOpening","hasFooter","origin","bestImageData","message","mediaEl","fromImage","getNodes","width","windowWidth","windowSize","get","mediaSize","isVideo","photo","video","webPage","getMessageContent","Boolean","getVideoDimensions","getPhotoFullDimensions","AVATAR_FULL_DIMENSIONS","availableWidth","height","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","mql","window","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","topOffsetRem","matches","REM","getTopOffset","top","fromTop","left","fromLeft","fromWidth","fromHeight","getBoundingClientRect","MediaViewerOrigin","SharedMedia","Album","ScheduledAlbum","SearchResult","includes","uncovered","realWidth","realHeight","size","Math","max","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","ghost","createGhost","applyStyles","transform","applyShape","document","body","classList","add","requestAnimationFrame","appendChild","style","firstChild","objectFit","remove","clearShape","setTimeout","contains","removeChild","ANIMATION_END_DELAY","animateClosing","container","toImage","getElementById","querySelector","targetTop","el","display","rect","windowHeight","isElementInViewport","shouldFadeOut","Inline","ScheduledInline","isMessageImageFullyVisible","existingGhost","getElementsByClassName","ProfileAvatar","transition","transformOrigin","opacity","source","shouldAppendProfileInfo","createElement","img","Image","src","HTMLVideoElement","poster","profileInfo","cloneNode","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","parentElement","scrollTop","offsetHeight","element","styles","Object","assign","containerSelector","mediaSelector","MiddleHeaderAvatar","mediaEls","querySelectorAll","length","withGlobal","global","chatId","messageId","isAvatar","sender","isChatPrivate","selectUser","selectChat","selectChatMessage","selectSender","setGlobal","actions","pick","closeMediaViewer","focusMessage","handleFocusMessage","useCallback","lang","useLang","isFromChat","senderTitle","getSenderTitle","className","onClick","Avatar","key","chat","user","dir","renderText","formatMediaDateTime","date","MediaViewerActions","mediaData","isZoomed","fileName","onCloseMediaViewer","onForward","onZoomToggle","isVideoDownloadAllowed","setIsVideoDownloadAllowed","useState","videoMediaHash","getMessageMediaHash","undefined","videoBlobUrl","downloadProgress","useMediaWithDownloadProgress","useEffect","download","handleVideoDownloadClick","e","stopPropagation","isAllowed","MenuButton","useMemo","onTrigger","isOpen","Button","round","color","ariaLabel","IS_MOBILE_SCREEN","DropdownMenu","trigger","positionX","MenuItem","icon","href","ProgressSpinner","progress","noCross","MediaViewerFooter","text","isHideable","isMultiline","setIsMultiline","footerContent","checkIsMultiline","clientHeight","handleResize","throttle","addEventListener","removeEventListener","prop","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","getBrowserFullscreenElementProp","units","bytes","number","floor","log","toFixed","stopEvent","VideoPlayerControls","bufferedProgress","currentTime","duration","fileSize","isForceVisible","isForceMobileVersion","isPlayed","isFullscreenSupported","isFullscreen","onChangeFullscreen","onPlayPause","onSeek","isVisible","setVisibility","timeout","clearTimeout","downloadedPercent","totalSize","percentagePlayed","percentageBuffered","min","step","type","onInput","value","renderSeekLine","ripple","formatMediaDuration","renderTime","formatFileSize","memo","url","isGif","posterData","posterSize","isMediaViewerOpen","noPlay","onClose","videoRef","useRef","setIsPlayed","IS_TOUCH_ENV","IS_IOS","setCurrentTime","isControlsVisible","setIsControlsVisible","setFullscreen","exitFullscreen","elRef","setIsFullscreen","useLayoutEffect","listener","listenerEnter","listenerExit","current","PLATFORM_ENV","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreenStatus","isBuffered","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","pause","safePlay","togglePlayState","play","useVideoCleanup","handleMouseOver","handleMouseOut","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","handleSeek","Number","target","toggleControls","togglePayingStateBySpace","wrapperStyle","videoStyle","onMouseOver","onMouseOut","ref","autoPlay","playsInline","loop","muted","onEnded","onTimeUpdate","join","square","isShown","onChangeZoom","prevIsShown","usePrevious","inputRef","zoomLevel","setZoomLevel","isSeeking","handleStartSeek","handleStopSeek","buildClassName","disabled","onChange","onMouseDown","onMouseUp","INITIAL_MATRIX","SCALE_VALUES","1","1.5","2","2.5","3","children","noWrap","canPan","panDeltaX","panDeltaY","onPan","tunedZoomLevel","isDragging","setIsDragging","dragData","setDragData","dx","dy","x","y","matrixData","setMatrixData","panWrapperRef","panContainerRef","newZoomLevel","newPandx","newPandy","newMatrixData","areSortedArraysEqual","oldScale","wrapper","image","wrapperRect","imageRect","newImgWidth","newImgHeight","newImgX","newImgY","calculateSafeZoneOnZoom","toString","preventDefault","newDragData","pageX","pageY","onMouseMove","deltaX","deltaY","getNewMatrixData","renderPhoto","blobUrl","imageSize","canDrag","alt","draggable","Spinner","threadId","avatarOwnerId","profilePhotoIndex","mediaViewer","animationLevel","settings","byKey","senderId","avatarOwner","chatMessages","collectionIds","selectScheduledMessage","selectScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","animationKey","webPagePhoto","getMessageWebPagePhoto","getMessagePhoto","getMessageVideo","isWebPagePhoto","isPhoto","isFromSharedMedia","isFromSearch","slideAnimation","headerAnimation","isGhostAnimation","getMessageMediaFilename","prevSenderId","canPanZoomWrap","setCanPanZoomWrap","setIsZoomed","panDelta","setPanDelta","messageIds","getChatMediaMessageIds","selectedMediaMessageIndex","indexOf","isFirst","isLast","getMediaHash","full","photos","getChatAvatarHash","blobUrlPictogram","useMedia","ApiMediaFormat","BlobUrl","previewMediaHash","blobUrlPreview","startsWith","DataUri","fullMediaData","getMessageMediaFormat","localBlobUrl","thumbDataUri","useBlurSync","getMessageMediaThumbDataUri","photoDimensions","videoDimensions","toggle","forceUpdate","useForceUpdate","addListener","removeListener","prevMessage","prevOrigin","prevAvatarOwner","prevBestImageData","dispatchHeavyAnimationEvent","textParts","renderMessageText","timer","closeZoom","handleZoomToggle","handleZoomValue","level","canCloseZoom","close","handleFooterClick","handleForward","fromChatId","captureEscKeyListener","stopCurrentAudio","getMessageId","fromId","direction","index","selectPreviousMedia","selectNextMedia","handleKeyDown","shouldCloseOnVideo","captureEvents","excludedClosestSelector","onSwipe","SwipeDirection","Right","Left","handlePan","renderSlide","isActive","calculateMediaViewerDimensions","renderSenderInfo","ShowTransition","isRtl","Transition","activeKey","name","aria-label","chats","byId","chatsById","listIds","currentUserId","activeListIds","active","archivedListIds","archived","setForwardChatId","exitForwardMode","loadMoreChats","filter","setFilter","focus","blur","chatIds","sortChatIds","getCanPostInChat","MAIN_THREAD_ID","searchWords","getChatTitle","viewportIds","getMore","useInfiniteScroll","handleFilterChange","containerRef","useKeyboardListNavigation","modalHeader","InputText","onKeyDown","placeholder","Modal","header","InfiniteScroll","items","onLoadMore","noScrollRestore","map","ListItem","PrivateChatInfo","status","userId","GroupChatInfo","Loading","getErrorHeader","error","isSlowMode","errors","dismissError","title","getReadableErrorText","isText","notifications","dismissNotification","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","handleDismiss","renderingUrl","useCurrentOrPrev","ConfirmDialog","confirmLabel","confirmHandler","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","Date","fixedMinDate","getFullYear","getMonth","getDate","fixedMaxDate","formatInputTime","String","padStart","selectedAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","now","defaultSelectedDate","selectedDate","setSelectedDate","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","currentYear","currentMonth","currentDate","shouldDisableNextMonth","shouldDisablePrevMonth","calendarGrid","grid","setFullYear","setMonth","setDate","monthStartDay","getDay","i","push","gridDate","buildCalendarGrid","handleChangeHours","replace","hours","getTime","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","formatMonthAndYear","d","dateCopy","letter","role","tabIndex","handleDateSelect","inputMode","formatHumanDate","formatTime","formatSubmitLabel","isSchedule","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","contactName","getUserFirstOrLastName","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","album","deleteMessages","deleteScheduledMessages","handleDeleteMessageForAll","messages","shouldDeleteForAll","handleDeleteMessageForSelf","onEnter","isPrivateChat","isChatWithSelf","selectIsChatWithSelf","isChannel","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","selectCurrentChat","exitMessageSelectMode","messageListType","canDelete","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canPost","openForwardMenuForSelectedMessages","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useFlag","captureKeyboardListeners","onBackspace","onDelete","onEsc","prevSelectedMessagesCount","renderingSelectedMessagesCount","formattedMessagesCount","destructive","onSelect","buttonRef","activeElement","privateChatUserId","privateChatUser","isPinned","selectIsChatPinned","withUsername","contextActions","useChatContextActions","handleDelete","handleClick","useSelectWithEnter","avatarSize","DeleteChatModal","runThrottled","cb","userIds","topUserIds","topPeers","usersById","users","recentlyFoundChatIds","globalSearch","onReset","loadTopUsers","loadContactList","openChat","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","useHorizontalScroll","lastSyncTime","searchQuery","mediaThumbnail","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","withOnlineStatus","isSavedMessages","isSelf","isVerified","VerifiedIcon","Link","formatPastTimeShort","getMessageSummaryText","highlight","renderMessageSummary","searchDate","suggestions","match","formatDateToString","suggestion","latestYear","getSuggestionsFromDate","localContactIds","contactList","fetchingStatus","globalResults","localResults","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleLoadMore","LoadMoreDirection","Backwards","query","handleChatClick","handlePickerItemClick","MEMO_EMPTY_ARRAY","foundContactIds","fullName","getUserFullName","username","unique","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","NothingFound","description","PickerSelectedItem","chatOrUserId","clickArg","createMapStateToProps","props","currentType","isVoice","isLoading","searchChatId","handleSelectMedia","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","isMediaGrid","isMessageList","classNames","itemSelector","Media","idPrefix","getSenderName","senderName","isChatGroup","handleMessageFocus","shouldDrawDateDivider","toYearMonth","WebLink","onMessageClick","getMessageDocument","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","renderingFor","onPlay","TABS","GlobalSearchContent","ChatList","Links","Files","Music","Voice","CHAT_TABS","slice","TRANSITION_RENDER_COUNT","keys","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","content","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","useReducer","reducer","initialState","reducerRef","state","setState","action","currentState","INCLUDED_CHAT_TYPES","EXCLUDED_CHAT_TYPES","INCLUDE_FILTER_FIELDS","EXCLUDE_FILTER_FIELDS","selectChatFilters","mode","selectTemp","selectedChatIds","selectedChatTypes","includedChatIds","includeFilters","folder","excludedChatIds","excludeFilters","getSuggestedFolderName","filters","values","bots","groups","channels","contacts","nonContacts","INITIAL_STATE","chatFilter","foldersReducer","payload","isTouched","omit","folderId","currentPassword","password","hint","email","twoFaReducer","currentScreen","editedFolderId","onSaveFilter","signOut","deleteChatFolder","isSignOutDialogOpen","setIsSignOutDialogOpen","isDeleteFolderDialogOpen","setIsDeleteFolderDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","closeDeleteFolderConfirmation","handleSignOutMessage","handleDeleteFolderMessage","SettingsMenuButton","SettingsScreens","EditProfile","General","Notifications","Privacy","Language","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyForwarding","PrivacyGroupChats","PrivacyPhoneNumberAllowedContacts","PrivacyLastSeenAllowedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyForwardingAllowedContacts","PrivacyGroupChatsAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyForwardingDeniedContacts","PrivacyGroupChatsDeniedContacts","PrivacyActiveSessions","PrivacyBlockedUsers","TwoFaDisabled","TwoFaEnabled","TwoFaNewPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaChangePasswordHint","TwoFaNewPasswordEmail","TwoFaRecoveryEmail","TwoFaNewPasswordEmailCode","TwoFaRecoveryEmailCode","TwoFaCongratulations","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","Folders","FoldersCreateFolder","FoldersEditFolder","FoldersIncludedChats","FoldersExcludedChats","renderHeaderContent","confirmIsDestructive","currentUser","onScreenSelect","formatPhoneNumberWithCode","phoneNumber","FloatingActionButton","buttonClassName","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","debounce","currentUsername","asLink","isUsernameAvailable","checkUsername","setUsername","langPrefix","label","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","trim","isValid","isUsernameValid","success","readOnly","profileEdit","firstName","currentFirstName","lastName","currentLastName","fullInfo","bio","currentBio","currentAvatarHash","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setFirstName","setLastName","setBio","currentAvatarBlobUrl","ProfileEditProgress","InProgress","isUsernameError","isSaveButtonShown","Complete","handlePhotoChange","newPhoto","handleFirstNameChange","handleLastNameChange","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","UsernameInput","runThrottledForLoadRecommended","orderedIds","orderedFolderIds","foldersById","recommended","recommendedChatFolders","chatFolders","notifySettings","selectNotifySettings","notifyExceptions","selectNotifyExceptions","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","showError","animationData","setAnimationData","isAnimationLoaded","setIsAnimationLoaded","handleAnimationLoad","getAnimationData","then","handleCreateFolder","userFolders","subtitle","getFolderDescriptionText","handleCreateFolderFromRecommended","AnimatedSticker","STICKER_SIZE_FOLDER_SETTINGS","noLoop","onLoad","pill","fluid","narrow","multiline","ShowMoreButton","count","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","loadedActiveChatIds","loadedArchivedChatIds","dispatch","onAddIncludedChats","onAddExcludedChats","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","includedChatTypes","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","Set","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","listType","renderChats","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","find","typeKey","inactive","renderChatType","event","folderUpdate","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","onFilterChange","chatTypes","shouldMinimize","hasMaxChats","handleItemClick","newSelectedIds","splice","handleChatTypeClick","newSelectedChatTypes","selectedType","isMinimized","canClose","Checkbox","checked","isSelected","withChatType","orderedPinnedIds","archivedPinnedIds","activeChatArrays","prepareChatList","archivedChatArrays","pinnedChats","otherChats","displayedIds","newFilter","handleSelectedIdsChange","ids","handleSelectedChatTypesChange","newFilters","forEach","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","options","range","handleChange","trackWidth","possibleValuesLength","option","STICKER_SIZE_PICKER_HEADER","stickerSet","observeIntersection","isIntersecting","useIsIntersecting","mediaHash","lottieData","Lottie","shouldRenderFullMedia","useTransitionForMedia","getFirstLetters","hasThumbnail","sticker","noAnimate","onUnfaveClick","localMediaHash","stickerSelector","thumbnail","dataUri","previewBlobUrl","shouldPlay","isAnimated","markLoaded","unmarkLoaded","canAnimatedPlay","shouldRenderThumb","shouldRenderPreview","previewTransitionClassNames","fullClassName","emoji","data-sticker-id","isLowPriority","stickers","firstSticker","STICKER_SIZE_GENERAL_SETTINGS","ANIMATION_LEVEL_OPTIONS","stickerSetIds","added","setIds","stickerSetsById","setsById","messageTextSize","messageSendKeyCombo","shouldAutoDownloadMediaFromContacts","shouldAutoDownloadMediaInPrivateChats","shouldAutoDownloadMediaInGroups","shouldAutoDownloadMediaInChannels","shouldAutoPlayGifs","shouldAutoPlayVideos","shouldSuggestStickers","shouldLoopStickers","setSettingOption","loadStickerSets","loadAddedStickers","stickerSettingsRef","observe","observeIntersectionForCovers","useIntersectionObserver","rootRef","isModalOpen","openModal","closeModal","setSticker","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleAnimationLevelChange","newLevel","_","handleMessageTextSizeChange","newSize","documentElement","setProperty","handleStickerSetClick","stickerSets","installedDate","RadioGroup","selected","onCheck","isChecked","fromSticker","fileSelector","openSystemFilesDialog","accept","callback","noMultiple","setAttribute","removeAttribute","onchange","click","hex2rgb","param","parseInt","substring","rgb2hex","p0","p1","p2","rgb2hsb","r","g","h","s","v","hsb2rgb","f","p","q","t","getPatternColor","rgbColor","hue","saturation","wallpaper","theme","slug","thumbRef","useCanvasBlur","isDownloadAllowed","setIsDownloadAllowed","fullMedia","wasDownloadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","handleSelect","blob","fetchBlob","cacheApi","CUSTOM_BG_CACHE_NAME","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","files","handleUploadWallpaper","handleSetColor","handleResetToDefault","backgroundColor","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","async","defaultRGB","data","rgb","canvas","context","getContext","preloadImage","naturalHeight","naturalWidth","offsetWidth","drawImage","getImageData","blockSize","getAverageColor","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","onCapture","onDrag","onRelease","withCursor","hex","hueHex","w","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","data-color","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleContactNotificationChange","hasPassword","privacy","blocked","activeSessions","blockedCount","totalCount","sessionsCount","visibilityPrivacyPhoneNumber","visibility","visibilityPrivacyLastSeen","lastSeen","visibilityPrivacyProfilePhoto","profilePhoto","visibilityPrivacyForwarding","forwards","visibilityPrivacyGroupChats","chatInvite","loadPrivacySettings","loadBlockedContacts","loadAuthorizations","getVisibilityValue","languages","language","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","langCode","setLanguage","currentLangCode","navigator","toLowerCase","shortLangCode","substr","nativeName","buildOptions","loadingOption","getPrivacyKey","screen","privacySettings","allowUserIds","allowChatIds","blockUserIds","blockChatIds","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","reduce","result","membersCount","blockCount","handleVisibilityChange","getLocation","session","region","country","getDeviceEnvironment","deviceModel","platform","systemVersion","terminateAuthorization","terminateAllAuthorizations","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","handleTerminateSessionClick","hash","handleTerminateAllSessions","currentSession","isCurrent","otherSessions","renderSession","handler","dateActive","appName","ip","sessions","chatsByIds","usersByIds","blockedIds","unblockContact","handleUnblockClick","contactId","viewportOffset","isPrivate","CHAT_HEIGHT_PX","renderContact","animatedEmoji","selectAnimatedEmoji","AnimatedEmoji","expectedPassword","submitLabel","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","handleSubmit","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","onChangePasswordVisibility","onStart","FOCUS_DELAY_TIMEOUT_MS","shouldConfirm","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","codeLength","twoFaSettings","waitingEmailCodeLength","newValue","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","code","itemIds","filterPlaceholder","notFoundText","searchInputId","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","handleSelectedContactIdsChange","contactsIds","shouldSkipTransition","foldersState","foldersDispatch","twoFaState","twoFaDispatch","handleSaveFilter","renderCurrentSection","Main","renderCurrentSectionContent","contactIds","resultIds","sortUserIds","forceShowSelf","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","handleNextStep","creationProgress","creationError","chatCreation","memberIds","createGroupChat","createChannel","setTitle","about","setAbout","ChatCreationProgress","handleTitleChange","handleDescriptionChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","NewChannelStep2","NewGroupStep2","NewChannelStep1","NewGroupStep1","folderType","noChatsText","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","ArrowLeft","ArrowRight","PageUp","PageDown","End","Home","Tab","preventDefaultForScrollKeys","disableScrolling","passive","ontouchmove","onkeydown","enableScrolling","getCopyLabel","hasSelection","canImageBeCopied","MessageContextMenu","anchor","canSendNow","canReschedule","canReply","canEdit","canPin","canUnpin","canForward","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","onReply","onEdit","onPin","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCloseAnimationEnd","onCopyLink","copyOptions","afterEffect","getMessageText","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","mediaLoader","copyImageToClipboard","anchorNode","parentNode","clipboardText","copyTextToClipboard","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","positionY","useContextMenuPosition","Menu","noOptions","isScheduled","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadMessageLink","isMenuOpen","setIsMenuOpen","setIsDeleteModalOpen","isPinModalOpen","setIsPinModalOpen","isCalendarOpen","openCalendar","closeCalendar","closeMenu","closePinModal","handleCloseCalendar","handleReply","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleOpenCalendar","handleRescheduleMessage","scheduledAt","handleCopyLink","scheduledMaxDate","getDayStartAt","selectStickerSet","stickerSetId","loadStickers","toggleStickerSet","sendMessage","throttleMs","isDisabled","stickerSetAccessHash","isPreloadedGlobally","handleButtonClick","hasCloseButton","STICKER_SIZE_MODAL","isRestricted","isMuted","canDeleteChat","getCanDeleteChat","canSubscribe","canSearch","canMute","canLeave","onSubscribeChannel","onSearchClick","updateChatMutedState","enterMessageSelectMode","handleToggleMuteClick","handleSubscribe","handleSearch","handleSelectMessages","Portal","runDebouncedForSearch","results","selectCurrentTextSearch","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","searchMessagesByDate","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","Array","from","input","div","contentEditable","handleMessageSearchQueryChange","newQuery","handleJumpToDate","timestamp","valueOf","handleUp","newFocusIndex","handleDown","noPushState","SearchInput","findInViewport","selectorOrElements","margin","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y1","y2","isFullyVisible","onInsertUserName","filteredChatMembers","getSelectedIndex","newIndex","cycleRestrict","selectedMentionIndex","setSelectedMentionIndex","handleArrowKey","handleUserSelect","forceFocus","handleSelectMention","member","onUp","onDown","onTab","first","position","fastSmoothScroll","setItemVisible","prevChatMembers","renderedChatMembers","attachments","caption","canSuggestMembers","groupChatMembers","recentEmojis","onCaptionUpdate","addRecentEmoji","loadEmojiKeywords","onFileAppend","onClear","hideTimeoutRef","prevAttachments","renderingAttachments","isHovered","markHovered","unmarkHovered","isQuick","every","quick","isMentionTooltipOpen","mentionFilter","closeMentionTooltip","insertMention","mentionFilteredMembers","useMentionTooltip","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","sendAttachments","handleFilesDrop","dataTransfer","newFiles","file","CONTENT_TYPES_FOR_QUICK_UPLOAD","areAllPhotos","mimeType","areAllVideos","renderHeader","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","data-attach-description","attachment","File","filename","extension","getFileExtension","previewData","emojis","onEmojiSelect","MessageInput","html","editableInputId","onUpdate","shouldSetFocus","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","innerHTML","addNewOption","newOptions","list","scrollHeight","scrollTo","behavior","handleCreate","questionTrimmed","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","hidden","closeTimeout","useMouseInside","menuCloseTimeout","isMouseInside","native","names","IS_EMOJI_SUPPORTED","loading","category","allEmojis","useOnIntersect","emojisPerRow","ceil","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","headerRef","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","entries","entry","intersectingWithIndexes","newLeft","HEADER_BUTTON_WIDTH","fastSmoothScrollHorizontal","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","handleEmojiSelect","MENU_TRANSITION_DURATION","containerClassName","faded","STICKER_MARGIN","loadAndPlay","onStickerSelect","onStickerUnfave","stickersPerRow","STICKER_SIZE_PICKER","stickerSetIntersections","favorite","recentStickers","favoriteStickers","addedSetIds","canSendStickers","loadRecentStickers","loadFavoriteStickers","addRecentSticker","activeSetIndex","setActiveSetIndex","areAddedLoaded","allSets","noPopulatedSets","set","stickerSetEl","handleStickerSelect","handleStickerUnfave","gif","videoData","shouldRenderVideo","preload","savedGifs","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","SYMBOL_MENU_TAB_ICONS","Emoji","Stickers","GIFs","onRemoveSymbol","onSearchOpen","renderTabButton","handleSearchOpen","isActivated","allowedAttachmentOptions","setRecentEmojis","handleMouseEnter","handleMouseLeave","fastRaf","recentEmojisRef","renderContent","isFrom","onMouseEnter","onMouseLeave","noCloseOnBackdrop","onFileSelect","onPollCreate","handleQuickSelect","handleDocumentSelect","canAttachMedia","canAttachPolls","autoClose","forEmoji","clearStickersForEmoji","prevStickers","displayedStickers","clickInlineButton","keyboardButtons","row","button","onSilentSend","onScheduleSend","listEmojis","usePrevDuringAnimation","selectedIndex","setSelectedIndex","emojisCount","handleSelectEmoji","onLeft","onRight","messagesById","foundResults","senderUser","getGlobal","senderChat","forwardInfo","isChannelPost","orderBy","preloadBackwards","LastMessageMeta","selectShouldLoopStickers","isSomeModalOpen","onModalToggle","isAdded","areStickersLoaded","useOnChange","coverStickerIds","covers","otherStickers","handleAddClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","featured","featuredIds","loadFeaturedStickers","setIsModalOpen","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","searchMoreGifs","setGifSearchQuery","getAllowedAttachmentOptions","handleGifClick","hasResults","answer","voters","offsets","pollResults","offset","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","limit","shouldResetVoters","handleViewMoreClick","handleMemberClick","noStatusOrTyping","leftVotersCount","renderViewMoreButton","total","getMessagePoll","resultsByOption","buildCollectionByKey","management","updateContact","deleteUser","deleteHistory","closeManagement","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","currentIsMuted","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","withFullInfo","hasLinkedChannel","linkedChatId","isBasicGroup","canChangeInfo","getHasAdminRight","canBanUsers","togglePreHistoryHidden","updateChat","leaveChannel","deleteChannel","currentTitle","currentAbout","imageHash","handleClickEditType","ManagementScreens","ChatPrivacyType","handleClickDiscussion","Discussion","handleClickPermissions","GroupPermissions","handleClickAdministrators","ChatAdministrators","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","GroupMembers","handleTogglePreHistory","isPreHistoryHidden","isEnabled","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembers","handleDeleteGroup","isCreator","formatInteger","onChatMemberSelect","updateChatDefaultBannedRights","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handleRemovedUsersClick","GroupRemovedUsers","handleAddExceptionClick","GroupUserPermissionsCreate","handleExceptionMemberClick","promotedByUserId","GroupUserPermissions","handlePermissionChange","getUpdatedPermissionValue","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","members","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","sendMessages","blocking","sendMedia","sendPolls","embedLinks","inviteUsers","pinMessages","changeInfo","updateChatMemberBannedRights","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","isSignaturesShown","toggleSignatures","hasLinkedChat","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","ChannelSubscribers","handleDeleteChannel","selectManagement","checkPublicLink","updatePublicLink","updatePrivateLink","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","canUpdate","handleOptionChange","handleSave","handleRevokePrivateLink","langPrefix1","langPrefix2","SafeLink","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","handleUnlinkGroupSessions","channelId","Initial","handleLinkGroupSessions","renderLinkGroupHeader","linkedGroup","renderLinkGroupConfirmText","hasPrivateLink","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","teactOrderKey","isButtonsInOneRow","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","selectedChatMember","handleBanFromGroup","viewMessages","getControlIsDisabled","isOwner","handleAdminMemberClick","ChatAdminRights","getMemberStatus","promotedByUser","GroupRecentActions","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","adminRights","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","addAdmins","anonymous","maxLength","openUserInfo","memberId","managementType","selectCurrentManagementType","CURRENCIES","USD","EUR","GBP","JPY","RUB","UAH","INR","AED","getCurrencySign","currency","VISA","MASTERCARD1","MASTERCARD2","CardType","cards","Default","Visa","Mastercard","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","phone","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","getBillingCountry","countryCode","countryList","useFocusAfterAnimation","animationDuration","hasArrow","labelText","htmlFor","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handlePhoneChange","handleSaveInfoChange","shippingOptions","handleShippingSelect","amount","renderPaymentItem","main","renderCheckoutItem","invoiceContent","prices","shippingPrices","checkoutInfo","totalPrice","photoUrl","paymentMethod","paymentProvider","shippingAddress","shippingMethod","item","expiryInputRef","charAt","parts","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","savedInfo","invoice","nativeProvider","nativeParams","passwordMissing","payment","isProviderError","nameRequested","phoneRequested","emailRequested","shippingAddressRequested","flexible","phoneToProvider","emailToProvider","globalErrors","validateRequestedInfo","sendPaymentForm","setPaymentStep","sendCredentialsInfo","clearPaymentError","paymentState","paymentDispatch","currencySign","field","fieldError","getShippingError","handleErrorModalClose","PaymentStep","Checkout","shippingOption","getShippingPrices","totalPrices","concat","acc","cur","getTotalPrice","detectCardTypeText","findShippingOption","getCheckoutInfo","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","setStep","nextStep","ShippingInfo","Shipping","PaymentInfo","buttonText","cuurentStep","renderModalContent","renderError","optionId","receipt","mapedPrices","info","totalAmount","credentialsTitle","fullAddress","ANIMATED_STICKERS_PATHS","MonkeyIdle","MonkeyTracking","MonkeyClose","MonkeyPeek","FoldersAll","FoldersNew","DiscussionGroups","path","location","cropperResultOptions","quality","format","circle","Croppie","croppiePromise","cropper","isCroppieReady","setIsCroppieReady","imgFile","cropContainer","enableZoom","boundary","viewport","blobToDataUri","bind","err","DEBUG","console","initCropper","ensureCroppie","croppedImg","blobToFile","selectedFile","setSelectedFile","croppedBlobUrl","setCroppedBlobUrl","labelClassName","URL","revokeObjectURL","createObjectURL","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","STICKER_SIZE","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","closeMonkeyData","setCloseMonkeyData","peekMonkeyData","setPeekMonkeyData","isFirstMonkeyLoaded","setIsFirstMonkeyLoaded","isPeekShown","setIsPeekShown","handleFirstMonkeyLoad","STICKER_SIZE_TWO_FA","playSegment","onInputChange","setPassword","canSubmit","setCanSubmit","select","autoComplete","MIN_PASSWORD_LENGTH"],"mappings":"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","file":"3.49069e079072f537e8c6.js","sourcesContent":["import { ApiMessage } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport { getMessageContent, getPhotoFullDimensions, getVideoDimensions } from '../../../modules/helpers';\nimport {\n  AVATAR_FULL_DIMENSIONS,\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\n\nimport windowSize from '../../../util/windowSize';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean, origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n\n  let isVideo = false;\n  let mediaSize;\n  if (message) {\n    const { photo, video, webPage } = getMessageContent(message);\n    isVideo = Boolean(video);\n    mediaSize = video ? getVideoDimensions(video)! : getPhotoFullDimensions((photo || webPage!.photo)!)!;\n  } else {\n    mediaSize = AVATAR_FULL_DIMENSIONS;\n  }\n\n  // eslint-disable-next-line max-len\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, mediaSize.width, mediaSize.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.active .media-viewer-content img, .active .media-viewer-content video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin === MediaViewerOrigin.ProfileAvatar);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, shouldAppendProfileInfo = false) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (shouldAppendProfileInfo) {\n    ghost.classList.add('ProfileInfo');\n    const profileInfo = document.querySelector('#RightColumn .ProfileInfo .info');\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isElementInViewport(el: HTMLElement) {\n  if (el.style.display === 'none') {\n    return false;\n  }\n\n  const rect = el.getBoundingClientRect();\n  const { height: windowHeight } = windowSize.get();\n\n  return (rect.top <= windowHeight) && ((rect.top + rect.height) >= 0);\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter) {\n    topOffsetRem += mql.matches ? 0.875 : 3.375;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.active > .MessageList #album-media-${message!.id}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${message!.id}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${message!.id}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .ChatInfo .Avatar';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .active .ProfilePhoto';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.active > .MessageList #message${message!.id}`;\n      mediaSelector = '.message-content .full-media, .message-content .thumbnail';\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls && mediaEls[mediaEls.length - 1],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, ApiMessage, ApiUser } from '../../api/types';\n\nimport { getSenderTitle, isChatPrivate } from '../../modules/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: number;\n  messageId?: number;\n  isAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'closeMediaViewer' | 'focusMessage'>;\n\nconst SenderInfo: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId, messageId, sender, isAvatar, message, closeMediaViewer, focusMessage,\n}) => {\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n    focusMessage({ chatId, messageId });\n  }, [chatId, focusMessage, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const isFromChat = sender.id < 0;\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isFromChat ? (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar ? lang('lng_mediaview_profile_photo') : formatMediaDateTime(lang, message!.date * 1000)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    if (isAvatar && chatId) {\n      return {\n        sender: isChatPrivate(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return {};\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['closeMediaViewer', 'focusMessage']),\n)(SenderInfo);\n","import React, {\n  FC, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport download from '../../util/download';\nimport { getMessageMediaHash } from '../../modules/helpers';\nimport useMediaWithDownloadProgress from '../../hooks/useMediaWithDownloadProgress';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  isZoomed: boolean;\n  message?: ApiMessage;\n  fileName?: string;\n  isAvatar?: boolean;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  onZoomToggle: NoneToVoidFunction;\n};\n\nconst MediaViewerActions: FC<OwnProps> = ({\n  mediaData,\n  isVideo,\n  isZoomed,\n  message,\n  fileName,\n  isAvatar,\n  onCloseMediaViewer,\n  onForward,\n  onZoomToggle,\n}) => {\n  const [isVideoDownloadAllowed, setIsVideoDownloadAllowed] = useState(false);\n  const videoMediaHash = isVideo && message ? getMessageMediaHash(message, 'download') : undefined;\n  const {\n    mediaData: videoBlobUrl, downloadProgress,\n  } = useMediaWithDownloadProgress(videoMediaHash, !isVideoDownloadAllowed);\n\n  // Download with browser when fully loaded\n  useEffect(() => {\n    if (isVideoDownloadAllowed && videoBlobUrl) {\n      download(videoBlobUrl, fileName!);\n      setIsVideoDownloadAllowed(false);\n    }\n  }, [fileName, videoBlobUrl, isVideoDownloadAllowed]);\n\n  // Cancel download on slide change\n  useEffect(() => {\n    setIsVideoDownloadAllowed(false);\n  }, [videoMediaHash]);\n\n  const handleVideoDownloadClick = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    setIsVideoDownloadAllowed((isAllowed) => !isAllowed);\n  }, []);\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  if (IS_MOBILE_SCREEN) {\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {!isAvatar && (\n            <MenuItem\n              icon=\"forward\"\n              onClick={onForward}\n            >\n              {lang('Forward')}\n            </MenuItem>\n          )}\n          {isVideo ? (\n            <MenuItem\n              icon={isVideoDownloadAllowed ? 'close' : 'download'}\n              onClick={handleVideoDownloadClick}\n            >\n              {isVideoDownloadAllowed ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download'}\n            </MenuItem>\n          ) : (\n            <MenuItem\n              icon=\"download\"\n              href={mediaData}\n              download={fileName}\n            >\n              {lang('AccActionDownload')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        {isVideoDownloadAllowed && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {!isAvatar && (\n        <>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Forward')}\n            onClick={onForward}\n          >\n            <i className=\"icon-forward\" />\n          </Button>\n        </>\n      )}\n      {isVideo ? (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('AccActionDownload')}\n          onClick={handleVideoDownloadClick}\n        >\n          {isVideoDownloadAllowed ? (\n            <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleVideoDownloadClick} />\n          ) : (\n            <i className=\"icon-download\" />\n          )}\n        </Button>\n      ) : (\n        <Button\n          href={mediaData}\n          download={fileName}\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('AccActionDownload')}\n        >\n          <i className=\"icon-download\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={isZoomed ? 'Zoom Out' : 'Zoom In'}\n        onClick={onZoomToggle}\n      >\n        <i className={isZoomed ? 'icon-zoom-out' : 'icon-zoom-in'} />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default MediaViewerActions;\n","import React, { FC, useEffect, useState } from '../../lib/teact/teact';\nimport { throttle } from '../../util/schedulers';\nimport { TextPart } from '../common/helpers/renderMessageText';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHideable: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({ text = '', isHideable, onClick }) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  return (\n    <div className={`MediaViewerFooter ${isHideable ? 'hideable' : ''}`} onClick={stopEvent}>\n      {text && (\n        <div className=\"media-viewer-footer-content\" onClick={onClick}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\nimport { PLATFORM_ENV } from '../util/environment';\n\ntype RefType = {\n  current: HTMLElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreenStatus(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || PLATFORM_ENV === 'iOS')) {\n      return;\n    }\n\n    if (elRef.current.requestFullscreen) {\n      elRef.current.requestFullscreen();\n    } else if (elRef.current.webkitRequestFullscreen) {\n      elRef.current.webkitRequestFullscreen();\n    } else if (elRef.current.webkitEnterFullscreen) {\n      elRef.current.webkitEnterFullscreen();\n    } else if (elRef.current.mozRequestFullScreen) {\n      elRef.current.mozRequestFullScreen();\n    }\n\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.mozCancelFullScreen) {\n      document.mozCancelFullScreen();\n    } else if (document.webkitCancelFullScreen) {\n      document.webkitCancelFullScreen();\n    } else if (document.webkitExitFullscreen) {\n      document.webkitExitFullscreen();\n    }\n\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const listener = () => { setIsFullscreen(Boolean(prop && document[prop])); };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n    const video = elRef.current;\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && PLATFORM_ENV !== 'iOS') {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n\n  return '';\n}\n","const units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'];\n\nexport default (bytes: number) => {\n  const number = bytes === 0 ? 0 : Math.floor(Math.log(bytes) / Math.log(1024));\n\n  return `${(bytes / 1024 ** Math.floor(number)).toFixed(1)} ${units[number]}`;\n};\n","import React, { FC, useState, useEffect } from '../../lib/teact/teact';\n\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport formatFileSize from './helpers/formatFileSize';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './VideoPlayerControls.scss';\n\ntype IProps = {\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceVisible: boolean;\n  isForceMobileVersion?: boolean;\n  isPlayed: boolean;\n  isFullscreenSupported: boolean;\n  isFullscreen: boolean;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: OnChangeHandler;\n};\n\ntype OnChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => void;\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 800;\n\nconst VideoPlayerControls: FC<IProps> = ({\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceVisible,\n  isForceMobileVersion,\n  isPlayed,\n  isFullscreenSupported,\n  isFullscreen,\n  onChangeFullscreen,\n  onPlayPause,\n  onSeek,\n}) => {\n  const [isVisible, setVisibility] = useState(true);\n\n  useEffect(() => {\n    if (isForceVisible) {\n      setVisibility(isForceVisible);\n    }\n  }, [isForceVisible]);\n\n  useEffect(() => {\n    let timeout: number | undefined;\n\n    if (!isForceVisible) {\n      if (IS_MOBILE_SCREEN) {\n        setVisibility(false);\n      } else {\n        timeout = window.setTimeout(() => {\n          setVisibility(false);\n        }, HIDE_CONTROLS_TIMEOUT_MS);\n      }\n    }\n\n    return () => {\n      if (timeout) {\n        window.clearTimeout(timeout);\n      }\n    };\n  }, [isForceVisible]);\n\n  useEffect(() => {\n    if (isVisible || isForceVisible) {\n      document.body.classList.add('video-controls-visible');\n    }\n\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isForceVisible, isVisible]);\n\n  const lang = useLang();\n\n  if (!isVisible && !isForceVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className={`VideoPlayerControls ${isForceMobileVersion ? 'mobile' : ''}`} onClick={stopEvent}>\n      {renderSeekLine(currentTime, duration, bufferedProgress, onSeek)}\n      <Button\n        ariaLabel={lang('AccActionPlay')}\n        size=\"tiny\"\n        ripple={!IS_MOBILE_SCREEN}\n        color=\"translucent-white\"\n        className=\"play\"\n        onClick={onPlayPause}\n      >\n        <i className={isPlayed ? 'icon-pause' : 'icon-play'} />\n      </Button>\n      {renderTime(currentTime, duration)}\n      {bufferedProgress < 1 && renderFileSize(bufferedProgress, fileSize)}\n      {isFullscreenSupported && (\n        <Button\n          ariaLabel=\"Fullscreen\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"fullscreen\"\n          onClick={onChangeFullscreen}\n        >\n          <i className={`${isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'}`} />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderFileSize(downloadedPercent: number, totalSize: number) {\n  return (\n    <div className=\"player-file-size\">\n      {`${formatFileSize(totalSize * downloadedPercent)} / ${formatFileSize(totalSize)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(currentTime: number, duration: number, bufferedProgress: number, onSeek: OnChangeHandler) {\n  const percentagePlayed = (currentTime / duration) * 100;\n  const percentageBuffered = bufferedProgress * 100;\n\n  return (\n    <div className=\"player-seekline\">\n      <div className=\"player-seekline-track\">\n        <div\n          className=\"player-seekline-buffered\"\n          // @ts-ignore teact feature\n          style={`width: ${percentageBuffered || 0}%`}\n        />\n        <div\n          className=\"player-seekline-played\"\n          // @ts-ignore teact feature\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n        <input\n          min=\"0\"\n          max=\"100\"\n          step={0.01}\n          type=\"range\"\n          onInput={onSeek}\n          className=\"player-seekline-input\"\n          value={percentagePlayed || 0}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { IDimensions } from '../../modules/helpers';\n\nimport { IS_IOS, IS_MOBILE_SCREEN, IS_TOUCH_ENV } from '../../util/environment';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreenStatus from '../../hooks/useFullscreen';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport safePlay from '../../util/safePlay';\n\nimport VideoPlayerControls from './VideoPlayerControls';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: IDimensions;\n  downloadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  downloadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  onClose,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlayed, setIsPlayed] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [isControlsVisible, setIsControlsVisible] = useState(true);\n\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreenStatus(videoRef, setIsPlayed);\n\n  const { isBuffered, bufferedProgress, bufferingHandlers } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlayed(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlayed) {\n      videoRef.current!.pause();\n      setIsPlayed(false);\n    } else {\n      videoRef.current!.play();\n      setIsPlayed(true);\n    }\n  }, [isPlayed]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleMouseOver = useCallback(() => {\n    setIsControlsVisible(true);\n  }, []);\n\n  const handleMouseOut = useCallback(() => {\n    setIsControlsVisible(false);\n  }, []);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlayed(false);\n  }, []);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    e.stopPropagation();\n\n    videoRef.current!.currentTime = (Number(e.target.value) * videoRef.current!.duration) / 100;\n  }, []);\n\n  const toggleControls = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    setIsControlsVisible(!isControlsVisible);\n  }, [isControlsVisible]);\n\n  useEffect(() => {\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onClick={!isGif && IS_MOBILE_SCREEN ? toggleControls : undefined}\n      onMouseOver={!isGif ? handleMouseOver : undefined}\n      onMouseOut={!isGif ? handleMouseOut : undefined}\n    >\n      <div\n        // @ts-ignore\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          playsInline\n          loop={isGif}\n          // This is to force auto playing on mobiles\n          muted={isGif}\n          id=\"media-viewer-video\"\n          // @ts-ignore\n          style={videoStyle}\n          onEnded={handleEnded}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : downloadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlayed={isPlayed}\n          bufferedProgress={bufferedProgress}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={videoRef.current ? videoRef.current.duration : 0}\n          isForceVisible={!isPlayed || isControlsVisible}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPlayPause={togglePlayState}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ZoomControls.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onChangeZoom: (level: number, canCloseZoom?: boolean) => void;\n};\n\nexport const MAX_ZOOM_LEVEL = 3;\nexport const MIN_ZOOM_LEVEL = 1;\nconst ONE_STEP_PERCENT = 100 / (MAX_ZOOM_LEVEL - MIN_ZOOM_LEVEL);\nconst RESET_ZOOM_LEVEL = 1.5;\n\nconst ZoomControls: FC<OwnProps> = ({ isShown, onChangeZoom }) => {\n  const { transitionClassNames } = useShowTransition(isShown);\n  const prevIsShown = usePrevious<boolean>(isShown);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [zoomLevel, setZoomLevel] = useState(1);\n  const isSeeking = useRef<boolean>(false);\n\n  useEffect(() => {\n    if (isShown && !prevIsShown) {\n      setZoomLevel(RESET_ZOOM_LEVEL);\n    }\n  }, [isShown, prevIsShown]);\n\n  const handleZoomOut = () => {\n    if (inputRef.current) {\n      setZoomLevel(Math.max(MIN_ZOOM_LEVEL, zoomLevel - 0.5));\n    }\n  };\n\n  const handleZoomIn = () => {\n    if (inputRef.current) {\n      setZoomLevel(Math.min(MAX_ZOOM_LEVEL, zoomLevel + 0.5));\n    }\n  };\n\n  const handleStartSeek = useCallback(() => {\n    isSeeking.current = true;\n  }, []);\n\n  const handleStopSeek = useCallback(() => {\n    isSeeking.current = false;\n    if (zoomLevel === 1) {\n      onChangeZoom(zoomLevel, !isSeeking.current);\n    }\n  }, [onChangeZoom, zoomLevel]);\n\n  const handleSeeklineChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n    setZoomLevel(Math.min(MAX_ZOOM_LEVEL, Math.max(Number(e.target.value), MIN_ZOOM_LEVEL)));\n  };\n\n  useEffect(() => {\n    onChangeZoom(zoomLevel, !isSeeking.current);\n  }, [zoomLevel, onChangeZoom]);\n\n  const lang = useLang();\n\n  const className = buildClassName(\n    'ZoomControls',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className}>\n      <Button\n        disabled={zoomLevel === MIN_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel={lang('ZoomOut')}\n        className=\"zoom-out\"\n        ripple={!IS_MOBILE_SCREEN}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        disabled={zoomLevel === MAX_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel=\"Zoom In\"\n        className=\"zoom-in\"\n        ripple={!IS_MOBILE_SCREEN}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      <div className=\"seekline\">\n        <div className=\"seekline-track\">\n          <div\n            className=\"seekline-played\"\n            // @ts-ignore teact feature\n            style={`width: ${(zoomLevel - 1) * ONE_STEP_PERCENT}%`}\n          />\n          <input\n            ref={inputRef}\n            min={MIN_ZOOM_LEVEL}\n            max={MAX_ZOOM_LEVEL}\n            step=\"0.5\"\n            value={zoomLevel}\n            type=\"range\"\n            className=\"seekline-input\"\n            onChange={handleSeeklineChange}\n            onMouseDown={handleStartSeek}\n            onMouseUp={handleStopSeek}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ZoomControls);\n","/*\n  @source https://github.com/ajainarayanan/react-pan-zoom\n\n  Heavily inspired/lifted from this idea: https://stackoverflow.com/a/39311435/661768\n  without jqueryUI or jquery dependency.\n*/\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { areSortedArraysEqual } from '../../util/iteratees';\n\nimport './PanZoom.scss';\n\nexport interface IDragData {\n  x: number;\n  y: number;\n  dx: number;\n  dy: number;\n}\n\nexport interface OwnProps {\n  children: any;\n  className?: string;\n  noWrap: boolean;\n  canPan: boolean;\n  zoomLevel: number;\n  panDeltaX: number;\n  panDeltaY: number;\n  onPan?: (x: number, y: number) => void;\n}\n\nconst INITIAL_MATRIX = [\n  1, 0, 0, 1, 0, 0,\n];\n\nconst SCALE_VALUES = {\n  1: 1,\n  1.5: 1.5,\n  2: 2.2,\n  2.5: 3.3,\n  3: 5.5,\n};\n\nconst ZOOM_SAFE_AREA = 150;\n\nfunction calculateSafeZoneOnZoom(oldScale: number, matrixData: number[], wrapper: HTMLDivElement | null) {\n  const image = wrapper && wrapper.querySelector('.active img');\n  if (!wrapper || !image) {\n    return matrixData;\n  }\n  const wrapperRect = wrapper.getBoundingClientRect();\n  const imageRect = image.getBoundingClientRect();\n\n  const newImgWidth = (imageRect.width / oldScale) * matrixData[0];\n  const newImgHeight = (imageRect.height / oldScale) * matrixData[3];\n  const newImgX = (wrapperRect.width - newImgWidth) / 2 + matrixData[4];\n  const newImgY = (wrapperRect.height - newImgHeight) / 2 + matrixData[5];\n  if (wrapperRect.width && wrapperRect.width - ZOOM_SAFE_AREA < newImgX) {\n    matrixData[4] -= newImgX + wrapperRect.width - ZOOM_SAFE_AREA;\n  } else if (newImgWidth && newImgWidth + newImgX < ZOOM_SAFE_AREA) {\n    matrixData[4] -= newImgWidth + newImgX - ZOOM_SAFE_AREA;\n  }\n  if (wrapperRect.height && wrapperRect.height - ZOOM_SAFE_AREA < newImgY) {\n    matrixData[5] -= newImgY + wrapperRect.height - ZOOM_SAFE_AREA;\n  } else if (newImgHeight && newImgHeight + newImgY < ZOOM_SAFE_AREA) {\n    matrixData[5] -= newImgHeight + newImgY - ZOOM_SAFE_AREA;\n  }\n\n  return matrixData;\n}\n\nconst PanZoom: FC<OwnProps> = ({\n  children,\n  className,\n  noWrap,\n  canPan,\n  zoomLevel,\n  panDeltaX,\n  panDeltaY,\n  onPan,\n}) => {\n  const tunedZoomLevel = SCALE_VALUES[zoomLevel as keyof typeof SCALE_VALUES] || zoomLevel;\n  const [isDragging, setIsDragging] = useState<boolean>(false);\n  const [dragData, setDragData] = useState<IDragData>({\n    dx: panDeltaX, dy: panDeltaY, x: 0, y: 0,\n  });\n  // [zoom, skew, skew, zoom, dx, dy] - see https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix()\n  const [matrixData, setMatrixData] = useState<number[]>(INITIAL_MATRIX);\n  // Used to set cursor while moving.\n  // eslint-disable-next-line no-null/no-null\n  const panWrapperRef = useRef<HTMLDivElement>(null);\n  // Used to set transform for pan.\n  // eslint-disable-next-line no-null/no-null\n  const panContainerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const newZoomLevel = tunedZoomLevel || matrixData[0];\n    const newPandx = panDeltaX || matrixData[4];\n    const newPandy = panDeltaY || matrixData[5];\n\n    const newMatrixData = [...matrixData];\n    if (matrixData[0] !== newZoomLevel) {\n      newMatrixData[0] = newZoomLevel || newMatrixData[0];\n      newMatrixData[3] = newZoomLevel || newMatrixData[3];\n    }\n    if (matrixData[4] !== newPandx) {\n      newMatrixData[4] = newPandx;\n    }\n    if (matrixData[5] !== newPandy) {\n      newMatrixData[5] = newPandy;\n    }\n\n    if (!areSortedArraysEqual(matrixData, newMatrixData)) {\n      setMatrixData(calculateSafeZoneOnZoom(matrixData[0], newMatrixData, panWrapperRef.current));\n    }\n    // eslint-disable-next-line\n  }, [panDeltaX, panDeltaY, tunedZoomLevel]);\n\n  useEffect(() => {\n    if (!canPan) {\n      setMatrixData(INITIAL_MATRIX);\n    }\n  }, [canPan]);\n\n  useEffect(() => {\n    if (panContainerRef.current) {\n      panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n    }\n  }, [noWrap, matrixData]);\n\n  const handleMouseDown = (e: React.MouseEvent<EventTarget>) => {\n    if (!canPan) {\n      return;\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n\n    const offsetX = matrixData[4];\n    const offsetY = matrixData[5];\n    const newDragData: IDragData = {\n      dx: offsetX,\n      dy: offsetY,\n      x: e.pageX,\n      y: e.pageY,\n    };\n    setDragData(newDragData);\n    setIsDragging(true);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.add('move');\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.remove('move');\n    }\n\n    if (onPan) {\n      onPan(matrixData[4], matrixData[5]);\n    }\n  };\n\n  function getNewMatrixData(x: number, y: number): number[] {\n    const newMatrixData = [...matrixData];\n    const deltaX = dragData.x - x;\n    const deltaY = dragData.y - y;\n    newMatrixData[4] = dragData.dx - deltaX;\n    newMatrixData[5] = dragData.dy - deltaY;\n\n    return newMatrixData;\n  }\n\n  const handleMouseMove = (e: React.MouseEvent<EventTarget>) => {\n    if (isDragging) {\n      const newMatrixData = getNewMatrixData(e.pageX, e.pageY);\n      setMatrixData(newMatrixData);\n\n      if (panContainerRef.current) {\n        panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n      }\n    }\n  };\n\n  if (noWrap) {\n    return children;\n  }\n\n  return (\n    <div\n      ref={panWrapperRef}\n      className={`pan-wrapper ${className || ''}`}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onMouseMove={handleMouseMove}\n    >\n      <div\n        ref={panContainerRef}\n        className=\"pan-container\"\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PanZoom);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiChat, ApiMediaFormat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { IS_IOS, IS_MOBILE_SCREEN, IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  AVATAR_FULL_DIMENSIONS,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  calculateMediaViewerDimensions,\n} from '../common/helpers/mediaDimensions';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  getChatAvatarHash,\n  getChatMediaMessageIds,\n  getMessageMediaFilename,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  IDimensions,\n} from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaWithDownloadProgress from '../../hooks/useMediaWithDownloadProgress';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport usePrevious from '../../hooks/usePrevious';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport SenderInfo from './SenderInfo';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\nimport ZoomControls from './ZoomControls';\nimport PanZoom from './PanZoom';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: number;\n  threadId?: number;\n  messageId?: number;\n  senderId?: number;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  profilePhotoIndex?: number;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  animationLevel: 0 | 1 | 2;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openMediaViewer' | 'closeMediaViewer' | 'openForwardMenu' | 'focusMessage'>;\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageId,\n  senderId,\n  origin,\n  avatarOwner,\n  profilePhotoIndex,\n  message,\n  chatMessages,\n  collectionIds,\n  openMediaViewer,\n  closeMediaViewer,\n  openForwardMenu,\n  focusMessage,\n  animationLevel,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const animationKey = useRef<number>(null);\n  const isOpen = Boolean(avatarOwner || messageId);\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const isWebPagePhoto = Boolean(webPagePhoto);\n  const isPhoto = Boolean(photo || webPagePhoto);\n  const isVideo = Boolean(video);\n  const isGif = video ? video.isGif : undefined;\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n  const slideAnimation = animationLevel >= 1 ? 'mv-slide' : 'none';\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2;\n  const fileName = avatarOwner\n    ? `avatar${avatarOwner.id}-${profilePhotoIndex}.jpg`\n    : message && getMessageMediaFilename(message);\n  const prevSenderId = usePrevious<number | undefined>(senderId);\n  const [canPanZoomWrap, setCanPanZoomWrap] = useState(false);\n  const [isZoomed, setIsZoomed] = useState<boolean>(false);\n  const [zoomLevel, setZoomLevel] = useState<number>(1);\n  const [panDelta, setPanDelta] = useState({ x: 0, y: 0 });\n\n  const messageIds = useMemo(() => {\n    return isWebPagePhoto && messageId\n      ? [messageId]\n      : getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n  }, [isWebPagePhoto, messageId, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaMessageIndex = messageId ? messageIds.indexOf(messageId) : -1;\n  const isFirst = selectedMediaMessageIndex === 0 || selectedMediaMessageIndex === -1;\n  const isLast = selectedMediaMessageIndex === messageIds.length - 1 || selectedMediaMessageIndex === -1;\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaMessageIndex;\n  }\n\n  function getMediaHash(full?: boolean) {\n    if (avatarOwner && profilePhotoIndex !== undefined) {\n      const { photos } = avatarOwner;\n      return photos && photos[profilePhotoIndex]\n        ? `photo${photos[profilePhotoIndex].id}?size=c`\n        : getChatAvatarHash(avatarOwner, full ? 'big' : 'normal');\n    }\n\n    return message && getMessageMediaHash(message, full ? 'viewerFull' : 'viewerPreview');\n  }\n\n  const blobUrlPictogram = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const previewMediaHash = getMediaHash();\n  const blobUrlPreview = useMedia(\n    previewMediaHash,\n    undefined,\n    avatarOwner && previewMediaHash && previewMediaHash.startsWith('profilePhoto')\n      ? ApiMediaFormat.DataUri\n      : ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const { mediaData: fullMediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaData)) || blobUrlPreview || blobUrlPictogram;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n\n  const photoDimensions = isPhoto ? getPhotoFullDimensions((\n    isWebPagePhoto ? getMessageWebPagePhoto(message!) : getMessagePhoto(message!)\n  )!) : undefined;\n  const videoDimensions = isVideo ? getVideoDimensions(getMessageVideo(message!)!) : undefined;\n\n  useEffect(() => {\n    if (!IS_MOBILE_SCREEN) {\n      return;\n    }\n\n    document.body.classList.toggle('is-media-viewer-open', isOpen);\n  }, [isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevOrigin = usePrevious(origin);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && !prevMessage && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      const textParts = message ? renderMessageText(message) : undefined;\n      const hasFooter = Boolean(textParts);\n      animateOpening(hasFooter, origin!, bestImageData!, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, origin, prevOrigin,\n    message, prevMessage, prevAvatarOwner, bestImageData, prevBestImageData,\n  ]);\n\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (isZoomed) {\n      setCanPanZoomWrap(true);\n    } else {\n      timer = window.setTimeout(() => {\n        setCanPanZoomWrap(false);\n      }, ANIMATION_DURATION);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [isZoomed]);\n\n  const closeZoom = () => {\n    setIsZoomed(false);\n    setZoomLevel(1);\n    setPanDelta({ x: 0, y: 0 });\n  };\n\n  const handleZoomToggle = useCallback(() => {\n    setIsZoomed(!isZoomed);\n    setZoomLevel(!isZoomed ? 1.5 : 1);\n    if (isZoomed) {\n      setPanDelta({ x: 0, y: 0 });\n    }\n  }, [isZoomed]);\n\n  const handleZoomValue = useCallback((level: number, canCloseZoom = false) => {\n    setZoomLevel(level);\n    if (level === 1 && canCloseZoom) {\n      closeZoom();\n    }\n  }, []);\n\n  const close = useCallback(() => {\n    closeMediaViewer();\n    closeZoom();\n  }, [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    close();\n    focusMessage({ chatId, threadId, messageId });\n  }, [close, chatId, threadId, focusMessage, messageId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    closeZoom();\n  }, [openForwardMenu, chatId, messageId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    if (isZoomed) {\n      closeZoom();\n    } else {\n      close();\n    }\n  }) : undefined), [close, isOpen, isZoomed]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const getMessageId = useCallback((fromId: number, direction: number): number => {\n    let index = messageIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < messageIds.length - 1)) {\n      index += direction;\n    }\n\n    return messageIds[index];\n  }, [messageIds]);\n\n  const selectPreviousMedia = useCallback(() => {\n    if (isFirst) {\n      return;\n    }\n\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: messageId ? getMessageId(messageId, -1) : undefined,\n      origin,\n    });\n  }, [chatId, threadId, getMessageId, isFirst, messageId, openMediaViewer, origin]);\n\n  const selectNextMedia = useCallback(() => {\n    if (isLast) {\n      return;\n    }\n\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: messageId ? getMessageId(messageId, 1) : undefined,\n      origin,\n    });\n  }, [chatId, threadId, getMessageId, isLast, messageId, openMediaViewer, origin]);\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          selectPreviousMedia();\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          selectNextMedia();\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  });\n\n  // Support for swipe gestures and closing on click\n  useEffect(() => {\n    const element = document.querySelector<HTMLDivElement>('.slide-container > .active, .slide-container > .to');\n    if (!element) {\n      return undefined;\n    }\n\n    const shouldCloseOnVideo = isGif && !IS_IOS;\n\n    return captureEvents(element, {\n      // eslint-disable-next-line max-len\n      excludedClosestSelector: `.backdrop, .navigation, .media-viewer-head, .media-viewer-footer${!shouldCloseOnVideo ? ', .VideoPlayer' : ''}`,\n      onClick: () => {\n        if (!isZoomed) {\n          close();\n        }\n      },\n      onSwipe: IS_TOUCH_ENV ? (e, direction) => {\n        if (direction === SwipeDirection.Right) {\n          selectPreviousMedia();\n        } else if (direction === SwipeDirection.Left) {\n          selectNextMedia();\n        } else {\n          close();\n        }\n      } : undefined,\n    });\n  }, [close, isGif, isZoomed, selectNextMedia, selectPreviousMedia, canPanZoomWrap]);\n\n  const handlePan = useCallback((x: number, y: number) => {\n    setPanDelta({ x, y });\n  }, []);\n\n  const lang = useLang();\n\n  function renderSlide(isActive: boolean) {\n    if (avatarOwner) {\n      return (\n        <div key={chatId} className=\"media-viewer-content\">\n          {renderPhoto(\n            fullMediaData || blobUrlPreview,\n            calculateMediaViewerDimensions(AVATAR_FULL_DIMENSIONS, false),\n            !IS_MOBILE_SCREEN && !isZoomed,\n          )}\n        </div>\n      );\n    } else if (message) {\n      const textParts = renderMessageText(message);\n      const hasFooter = Boolean(textParts);\n\n      return (\n        <div key={messageId} className={`media-viewer-content ${hasFooter ? 'has-footer' : ''}`}>\n          {isPhoto && renderPhoto(\n            localBlobUrl || fullMediaData || blobUrlPreview || blobUrlPictogram,\n            message && calculateMediaViewerDimensions(photoDimensions!, hasFooter),\n            !IS_MOBILE_SCREEN && !isZoomed,\n          )}\n          {isVideo && (\n            <VideoPlayer\n              key={messageId}\n              url={localBlobUrl || fullMediaData}\n              isGif={isGif}\n              posterData={bestImageData}\n              posterSize={message && calculateMediaViewerDimensions(videoDimensions!, hasFooter, true)}\n              downloadProgress={downloadProgress}\n              fileSize={video!.size}\n              isMediaViewerOpen={isOpen}\n              noPlay={!isActive}\n              onClose={close}\n            />\n          )}\n          {textParts && (\n            <MediaViewerFooter\n              text={textParts}\n              onClick={handleFooterClick}\n              isHideable={isVideo}\n            />\n          )}\n        </div>\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderSenderInfo() {\n    return (\n      <SenderInfo\n        key={avatarOwner ? avatarOwner.id : messageId}\n        chatId={avatarOwner ? avatarOwner.id : chatId}\n        messageId={messageId}\n        isAvatar={Boolean(avatarOwner)}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      className={isZoomed ? 'zoomed' : ''}\n      isOpen={isOpen}\n    >\n      {() => (\n        <>\n          <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {IS_MOBILE_SCREEN && (\n              <Button\n                className=\"media-viewer-close\"\n                round\n                size=\"smaller\"\n                color=\"translucent-white\"\n                ariaLabel={lang('Close')}\n                onClick={close}\n              >\n                <i className=\"icon-close\" />\n              </Button>\n            )}\n            <Transition activeKey={animationKey.current!} name={headerAnimation}>\n              {renderSenderInfo}\n            </Transition>\n            <MediaViewerActions\n              mediaData={fullMediaData || blobUrlPreview}\n              isVideo={isVideo}\n              isZoomed={isZoomed}\n              message={message}\n              fileName={fileName}\n              onCloseMediaViewer={close}\n              onForward={handleForward}\n              onZoomToggle={handleZoomToggle}\n              isAvatar={Boolean(avatarOwner)}\n            />\n          </div>\n          <PanZoom\n            noWrap={!canPanZoomWrap}\n            canPan={isZoomed}\n            panDeltaX={panDelta.x}\n            panDeltaY={panDelta.y}\n            zoomLevel={zoomLevel}\n            onPan={handlePan}\n          >\n            <Transition\n              className=\"slide-container\"\n              activeKey={selectedMediaMessageIndex}\n              name={slideAnimation}\n            >\n              {renderSlide}\n            </Transition>\n          </PanZoom>\n          {!isFirst && (\n            <button\n              type=\"button\"\n              className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n              aria-label={lang('AccDescrPrevious')}\n              dir={lang.isRtl ? 'rtl' : undefined}\n              onClick={selectPreviousMedia}\n            />\n          )}\n          {!isLast && (\n            <button\n              type=\"button\"\n              className={`navigation next ${isVideo && !isGif && 'inline'}`}\n              aria-label={lang('Next')}\n              dir={lang.isRtl ? 'rtl' : undefined}\n              onClick={selectNextMedia}\n            />\n          )}\n          <ZoomControls\n            isShown={isZoomed}\n            onChangeZoom={handleZoomValue}\n          />\n        </>\n      )}\n    </ShowTransition>\n  );\n};\n\nfunction renderPhoto(blobUrl?: string, imageSize?: IDimensions, canDrag?: boolean) {\n  return blobUrl\n    ? (\n      <img\n        src={blobUrl}\n        alt=\"\"\n        // @ts-ignore teact feature\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n        draggable={Boolean(canDrag)}\n      />\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        // @ts-ignore teact feature\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n    } = global.mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && messageId)) {\n        return { animationLevel };\n      }\n\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message) {\n        return { animationLevel };\n      }\n\n      return {\n        chatId,\n        messageId,\n        senderId: message.senderId,\n        origin,\n        message,\n        animationLevel,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        messageId: -1,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        profilePhotoIndex: profilePhotoIndex || 0,\n        animationLevel,\n        origin,\n      };\n    }\n\n    if (!(chatId && threadId && messageId)) {\n      return { animationLevel };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, messageId);\n    } else {\n      message = selectChatMessage(global, chatId, messageId);\n    }\n\n    if (!message) {\n      return { animationLevel };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      senderId: message.senderId,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openMediaViewer', 'closeMediaViewer', 'openForwardMenu', 'focusMessage',\n  ]),\n)(MediaViewer));\n","import React, {\n  FC, useMemo, useState, memo, useRef, useEffect, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport {\n  getCanPostInChat, getChatTitle, isChatPrivate, sortChatIds,\n} from '../../modules/helpers';\nimport searchWords from '../../util/searchWords';\nimport { pick } from '../../util/iteratees';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './ForwardPicker.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  activeListIds?: number[];\n  archivedListIds?: number[];\n  orderedPinnedIds?: number[];\n  currentUserId?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setForwardChatId' | 'exitForwardMode' | 'loadMoreChats'>;\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\nconst MODAL_HIDE_DELAY_MS = 300;\n\nconst ForwardPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  currentUserId,\n  isOpen,\n  setForwardChatId,\n  exitForwardMode,\n  loadMoreChats,\n}) => {\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (isOpen) {\n      if (!IS_MOBILE_SCREEN) {\n        setTimeout(() => {\n          requestAnimationFrame(() => {\n            if (inputRef.current) {\n              inputRef.current.focus();\n            }\n          });\n        }, FOCUS_DELAY_MS);\n      }\n    } else {\n      if (inputRef.current) {\n        inputRef.current.blur();\n      }\n\n      setTimeout(() => {\n        setFilter('');\n      }, MODAL_HIDE_DELAY_MS);\n    }\n  }, [isOpen]);\n\n  const chatIds = useMemo(() => {\n    const listIds = [\n      ...activeListIds || [],\n      ...archivedListIds || [],\n    ];\n\n    return sortChatIds([\n      ...listIds.filter((id) => {\n        const chat = chatsById[id];\n        if (!chat) {\n          return true;\n        }\n\n        if (!getCanPostInChat(chat, MAIN_THREAD_ID)) {\n          return false;\n        }\n\n        if (!filter) {\n          return true;\n        }\n\n        return searchWords(getChatTitle(lang, chatsById[id], undefined, id === currentUserId), filter);\n      }),\n    ], chatsById, undefined, currentUserId ? [currentUserId] : undefined);\n  }, [activeListIds, archivedListIds, chatsById, currentUserId, filter, lang]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(loadMoreChats, chatIds, Boolean(filter));\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFilter(e.currentTarget.value);\n  }, []);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds) {\n      setForwardChatId({ id: viewportIds[index] });\n    }\n  }, '.ListItem-button', true);\n\n  const modalHeader = (\n    <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel={lang('Close')}\n        onClick={exitForwardMode}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <InputText\n        ref={inputRef}\n        value={filter}\n        onChange={handleFilterChange}\n        onKeyDown={handleKeyDown}\n        placeholder={lang('ForwardTo')}\n      />\n    </div>\n  );\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={exitForwardMode}\n      className=\"ForwardPicker\"\n      header={modalHeader}\n    >\n      {viewportIds && viewportIds.length ? (\n        <InfiniteScroll\n          className=\"picker-list custom-scroll\"\n          items={viewportIds}\n          onLoadMore={getMore}\n          noScrollRestore={Boolean(filter)}\n          ref={containerRef}\n          onKeyDown={handleKeyDown}\n        >\n          {viewportIds.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable force-rounded-corners\"\n              onClick={() => setForwardChatId({ id })}\n            >\n              {isChatPrivate(id) ? (\n                <PrivateChatInfo status={id === currentUserId ? lang('SavedMessagesInfo') : undefined} userId={id} />\n              ) : (\n                <GroupChatInfo chatId={id} />\n              )}\n            </ListItem>\n          ))}\n        </InfiniteScroll>\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\">Sorry, nothing found.</p>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      currentUserId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setForwardChatId', 'exitForwardMode', 'loadMoreChats']),\n)(ForwardPicker));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiError } from '../../api/types';\n\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './Errors.scss';\n\ntype StateProps = {\n  errors: ApiError[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'dismissError'>;\n\nconst Errors: FC<StateProps & DispatchProps> = ({ errors, dismissError }) => {\n  const lang = useLang();\n\n  if (!errors.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Errors\">\n      {errors.map((error) => (\n        <Modal\n          isOpen\n          onClose={dismissError}\n          className=\"error\"\n          title={getErrorHeader(error)}\n        >\n          <p>{getReadableErrorText(error)}</p>\n          <Button isText onClick={dismissError}>{lang('OK')}</Button>\n        </Modal>\n      ))}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['errors']),\n  (setGlobal, actions): DispatchProps => pick(actions, ['dismissError']),\n)(Errors));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiNotification } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\n\nimport Notification from '../ui/Notification';\nimport renderText from '../common/helpers/renderText';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'dismissNotification'>;\n\nconst Notifications: FC<StateProps & DispatchProps> = ({ notifications, dismissNotification }) => {\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({ message }) => (\n        <Notification\n          message={renderText(message, ['emoji', 'br', 'links'])}\n          onDismiss={dismissNotification}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['notifications']),\n  (setGlobal, actions): DispatchProps => pick(actions, ['dismissNotification']),\n)(Notifications));\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'toggleSafeLinkModal'>;\n\nconst SafeLinkModal: FC<OwnProps & DispatchProps> = ({ url, toggleSafeLinkModal }) => {\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(url);\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, ['toggleSafeLinkModal']),\n)(SafeLinkModal));\n","import React, {\n  FC, memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport {\n  formatMonthAndYear, formatHumanDate, formatTime,\n} from '../../util/dateFormat';\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport useLang, { LangFn } from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nexport type OwnProps = {\n  selectedAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = ['M', 'T', 'W', 'T', 'F', 'S', 'S'];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n  const defaultSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const maxDate = maxAt ? new Date(maxAt) : undefined;\n\n  const [selectedDate, setSelectedDate] = useState<Date>(defaultSelectedDate);\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(defaultSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(defaultSelectedDate.getMinutes()),\n  );\n\n  const currentYear = selectedDate.getFullYear();\n  const currentMonth = selectedDate.getMonth();\n  const currentDate = selectedDate.getDate();\n\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedDate(defaultSelectedDate);\n    }\n  }, [isOpen, defaultSelectedDate]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const calendarGrid = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  function handlePrevMonth() {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n\n      return dateCopy;\n    });\n  }\n\n  function handleSubmit() {\n    onSubmit(selectedDate);\n  }\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {formatMonthAndYear(lang, selectedDate, IS_MOBILE_SCREEN)}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((letter) => (\n            <div className=\"day-button faded weekday\">\n              <span>{letter}</span>\n            </div>\n          ))}\n          {calendarGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, isFutureMode ? now : undefined, isPastMode ? now : maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                gridDate === currentDate && 'selected',\n              )}\n            >\n              {!!gridDate && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {withTimePicker ? formatSubmitLabel(lang, selectedDate) : submitButtonLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const grid: number[] = [];\n\n  const date = new Date();\n  date.setFullYear(year);\n  date.setMonth(month);\n  date.setDate(1);\n\n  const monthStartDay = date.getDay();\n  // Fill empty cells\n  for (let i = 1; i < monthStartDay; i++) {\n    grid.push(0);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    grid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  return grid;\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day, 0, 0, 0, 0);\n  const fixedMinDate = minDate && new Date(minDate.getFullYear(), minDate.getMonth(), minDate.getDate(), 0, 0, 0, 0);\n  const fixedMaxDate = maxDate && new Date(maxDate.getFullYear(), maxDate.getMonth(), maxDate.getDate(), 0, 0, 0, 0);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatHumanDate(lang, date, true);\n\n  if (day === 'Today') {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', day).replace('%@', formatTime(date));\n}\n\nexport default memo(CalendarModal);\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../api/types';\nimport { IAlbum } from '../../types';\n\nimport { GlobalActions } from '../../global/types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  isChatPrivate,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteMessages' | 'deleteScheduledMessages'>;\n\nconst DeleteMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n  deleteMessages,\n  deleteScheduledMessages,\n}) => {\n  const handleDeleteMessageForAll = useCallback(() => {\n    const messageIds = album && album.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [deleteMessages, message.id, onClose, album]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    const messageIds = album && album.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName && lang('Conversation.DeleteMessagesFor', renderText(contactName))}\n          {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isChatPrivate(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'deleteMessages', 'deleteScheduledMessages',\n  ]),\n)(DeleteMessageModal));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../modules/selectors';\nimport {\n  isChatPrivate,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: number;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'pinMessage'>;\n\nconst PinMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  messageId,\n  chatId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n  pinMessage,\n}) => {\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, chatId, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [chatId, messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n        {lang('DialogPin')}\n      </Button>\n      {canPinForAll && (\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n          {contactName\n            ? lang('Conversation.PinMessagesFor', contactName)\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n        </Button>\n      )}\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isChatPrivate(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = !!chat && isChatChannel(chat);\n    const isGroup = !!chat && isChatBasicGroup(chat);\n    const isSuperGroup = !!chat && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isChatPrivate(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['pinMessage']),\n)(PinMessageModal));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: number;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n        {lang('DialogUnpin')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { selectCanDeleteSelectedMessages, selectCurrentChat, selectUser } from '../../modules/selectors';\nimport {\n  isChatPrivate,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteMessages' | 'exitMessageSelectMode' | 'deleteScheduledMessages'>;\n\nconst DeleteSelectedMessagesModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n  deleteMessages,\n  deleteScheduledMessages,\n  exitMessageSelectMode,\n}) => {\n  const handleDeleteMessageForAll = useCallback(() => {\n    deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: true });\n    exitMessageSelectMode();\n    onClose();\n  }, [deleteMessages, exitMessageSelectMode, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: false });\n    }\n\n    exitMessageSelectMode();\n    onClose();\n  }, [\n    isSchedule, exitMessageSelectMode, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages,\n  ]);\n\n  const lang = useLang();\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName\n            ? lang('ChatList.DeleteForEveryone', renderText(contactName))\n            : lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isChatPrivate(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'deleteMessages',\n    'deleteScheduledMessages',\n    'exitMessageSelectMode',\n  ]),\n)(DeleteSelectedMessagesModal));\n","import React, { FC, memo, useEffect } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCurrentMessageList,\n  selectSelectedMessagesCount,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport useFlag from '../../hooks/useFlag';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport DeleteSelectedMessagesModal from './DeleteSelectedMessagesModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'exitMessageSelectMode' | 'openForwardMenuForSelectedMessages'>;\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps & DispatchProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  exitMessageSelectMode,\n  openForwardMenuForSelectedMessages,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: openDeleteModal,\n        onDelete: openDeleteModal,\n        onEsc: exitMessageSelectMode,\n      })\n      : undefined;\n  }, [isActive, isDeleteModalOpen, openDeleteModal, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const lang = useLang();\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount);\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={exitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {!!selectedMessagesCount && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && (\n              <MenuItem\n                icon=\"forward\"\n                ariaLabel=\"Forward Messages\"\n                onClick={openForwardMenuForSelectedMessages}\n              >\n                <span className=\"item-text\">\n                  {lang('Forward')}\n                </span>\n              </MenuItem>\n            )}\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={openDeleteModal}\n              disabled={!canDeleteMessages}\n              ariaLabel={lang('EditAdminGroupDeleteMessages')}\n            >\n              <span className=\"item-text\">\n                {lang('Delete')}\n              </span>\n            </MenuItem>\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessagesModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { type: messageListType } = selectCurrentMessageList(global) || {};\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n\n    return {\n      isSchedule: messageListType === 'scheduled',\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['exitMessageSelectMode', 'openForwardMenuForSelectedMessages']),\n)(MessageSelectToolbar));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nexport default (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isChatPrivate, getPrivateChatUserId } from '../../../modules/helpers';\nimport { selectChat, selectUser, selectIsChatPinned } from '../../../modules/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: number;\n  withUsername?: boolean;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  isPinned?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  privateChatUser,\n  isPinned,\n  withUsername,\n  onClick,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    privateChatUser,\n    isPinned,\n    handleDelete: openDeleteModal,\n  });\n\n  const handleClick = () => {\n    onClick(chatId);\n  };\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isChatPrivate(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n\n    return {\n      chat,\n      privateChatUser,\n      isPinned,\n    };\n  },\n)(LeftSearchResultChat));\n","import React, {\n  FC, useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: number[];\n  usersById: Record<number, ApiUser>;\n  recentlyFoundChatIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadTopUsers' | 'loadContactList' | 'openChat' | 'addRecentlyFoundChatId' | 'clearRecentlyFoundChats'\n)>;\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps & DispatchProps> = ({\n  topUserIds, usersById, recentlyFoundChatIds,\n  onReset, loadTopUsers, loadContactList, openChat,\n  addRecentlyFoundChatId, clearRecentlyFoundChats,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n      // Loading full contact list for quick local search before user enters the query\n      loadContactList();\n    });\n  }, [loadTopUsers, loadContactList]);\n\n  useHorizontalScroll(topUsersRef, !topUserIds);\n\n  const handleClick = useCallback(\n    (id: number) => {\n      openChat({ id });\n      onReset();\n      setTimeout(() => {\n        addRecentlyFoundChatId({ id });\n      }, SEARCH_CLOSE_TIMEOUT_MS);\n    },\n    [openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={clearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global.globalSearch;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadTopUsers',\n    'loadContactList',\n    'openChat',\n    'addRecentlyFoundChatId',\n    'clearRecentlyFoundChats',\n  ]),\n)(RecentContacts));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\n\nimport { IS_MOBILE_SCREEN } from '../../../util/environment';\nimport {\n  getChatTitle,\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageSummaryText,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../modules/helpers';\nimport { selectChat, selectUser } from '../../../modules/selectors';\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\nimport useMedia from '../../../hooks/useMedia';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport VerifiedIcon from '../../common/VerifiedIcon';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: number;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusMessage'>;\n\nconst ChatMessage: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  focusMessage,\n  lastSyncTime,\n}) => {\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!IS_MOBILE_SCREEN}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        withOnlineStatus\n        isSavedMessages={privateChatUser && privateChatUser.isSelf}\n        lastSyncTime={lastSyncTime}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{renderText(getChatTitle(lang, chat, privateChatUser))}</h3>\n            {chat.isVerified && <VerifiedIcon />}\n          </div>\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderMessageSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderMessageSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderText(getMessageSummaryText(lang, message));\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={isRoundVideo ? 'round' : undefined} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderText(getMessageSummaryText(lang, message, true), ['emoji', 'highlight'], { highlight: searchQuery })}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n      lastSyncTime: global.lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'focusMessage',\n  ]),\n)(ChatMessage));\n","import React, { FC, memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser, ApiChat, ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_MOBILE_SCREEN } from '../../../util/environment';\nimport searchWords from '../../../util/searchWords';\nimport { unique, pick } from '../../../util/iteratees';\nimport { getUserFullName, getMessageSummaryText, sortChatIds } from '../../../modules/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  localContactIds?: number[];\n  localChatIds?: number[];\n  localUserIds?: number[];\n  globalChatIds?: number[];\n  globalUserIds?: number[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<number, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'addRecentlyFoundChatId' | 'searchMessagesGlobal' | 'setGlobalSearchChatId'\n)>;\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 3;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, usersById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect, openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n}) => {\n  const lang = useLang();\n\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: number) => {\n      openChat({ id });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!IS_MOBILE_SCREEN) {\n        onReset();\n      }\n    },\n    [currentUserId, openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: number) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const foundContactIds = localContactIds\n      ? localContactIds.filter((id) => {\n        const user = usersById[id];\n        if (!user) {\n          return false;\n        }\n\n        const fullName = getUserFullName(user);\n        return (fullName && searchWords(fullName, searchQuery)) || searchWords(user.username, searchQuery);\n      })\n      : [];\n\n    return [\n      ...(currentUserId && searchWords(lang('SavedMessages'), searchQuery) ? [currentUserId] : []),\n      ...sortChatIds(unique([\n        ...foundContactIds,\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById),\n    ];\n  }, [searchQuery, localContactIds, currentUserId, lang, localChatIds, localUserIds, chatsById, usersById]);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(unique([...globalChatIds, ...globalUserIds]), chatsById, true);\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_').map(Number);\n\n        return (\n          globalMessagesByChatId && globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId]\n        );\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = getMessageSummaryText(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {!!localResults.length && (\n        <div className=\"chat-selection no-selection no-scrollbar\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {!!localResults.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {!!globalResults.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {!!foundMessages.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n        usersById,\n      };\n    }\n\n    const { currentUserId, messages, lastSyncTime } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = global.globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const { foundIds } = (resultsByType && resultsByType.text) || {};\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      usersById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n    'addRecentlyFoundChatId',\n    'searchMessagesGlobal',\n    'setGlobalSearchChatId',\n  ]),\n)(ChatResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { getMessageSummaryText } from '../../../modules/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport DateSuggest from './DateSuggest';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<number, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<number, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal')>;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  currentUserId,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  searchMessagesGlobal,\n  onSearchDateSelect,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n          chatId: currentUserId,\n        });\n      });\n    }\n  }, [currentUserId, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_').map(Number);\n\n        return (\n          globalMessagesByChatId && globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId]\n        );\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = getMessageSummaryText(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {!!foundMessages.length && foundMessages.map(renderFoundMessage)}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const { fetchingStatus, resultsByType } = global.globalSearch;\n\n    const { foundIds } = (resultsByType && resultsByType.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['searchMessagesGlobal']),\n)(ChatMessageResults));\n","import { GlobalState } from '../../../../global/types';\nimport {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\n\nexport type StateProps = {\n  isLoading?: boolean;\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  globalMessagesByChatId?: Record<number, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: number;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = global.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props && props.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const { foundIds } = (resultsByType && resultsByType[currentType]) || {};\n\n    return {\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'openMediaViewer')>;\n\nconst CURRENT_TYPE = 'media';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  openMediaViewer,\n}) => {\n  const lang = useLang();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n\n      return globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((messageId: number, chatId: number) => {\n    openMediaViewer({\n      chatId,\n      messageId,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={message.id}\n            idPrefix=\"search-media\"\n            message={message}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'openMediaViewer',\n  ]),\n)(MediaResults));\n","import { ApiChat, ApiMessage, ApiUser } from '../../../../api/types';\nimport {\n  getChatTitle,\n  getSenderTitle,\n  isChatPrivate,\n  isChatGroup,\n} from '../../../../modules/helpers';\nimport { LangFn } from '../../../../hooks/useLang';\n\nexport function getSenderName(\n  lang: LangFn, message: ApiMessage, chatsById: Record<number, ApiChat>, usersById: Record<number, ApiUser>,\n) {\n  const { senderId } = message;\n  if (!senderId) {\n    return undefined;\n  }\n\n  const sender = isChatPrivate(senderId) ? usersById[senderId] : chatsById[senderId];\n\n  let senderName = getSenderTitle(lang, sender);\n\n  const chat = chatsById[message.chatId];\n  if (chat) {\n    if (isChatPrivate(senderId) && (sender as ApiUser).isSelf) {\n      senderName = `${lang('FromYou')} → ${getChatTitle(lang, chat)}`;\n    } else if (isChatGroup(chat)) {\n      senderName += ` → ${getChatTitle(lang, chat)}`;\n    }\n  }\n\n  return senderName;\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage')>;\n\nconst CURRENT_TYPE = 'links';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n\n      return globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: number) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n  ]),\n)(LinkResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../modules/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage')>;\n\nconst CURRENT_TYPE = 'documents';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n      const message = globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: number) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n  ]),\n)(FileResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage' | 'openAudioPlayer')>;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  isVoice,\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n  openAudioPlayer,\n}) => {\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n\n      return globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: number) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: number) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            message={message}\n            renderingFor=\"searchResult\"\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n    'openAudioPlayer',\n  ]),\n)(AudioResults));\n","import React, {\n  FC, memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport UserChatResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('setGlobalSearchContent' | 'setGlobalSearchDate')>;\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  setGlobalSearchContent,\n  setGlobalSearchDate,\n  onReset,\n}) => {\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slide-reversed' : 'slide'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <UserChatResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = global.globalSearch;\n\n    return { currentContent, chatId };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setGlobalSearchContent', 'setGlobalSearchDate']),\n)(LeftSearch));\n","import { useState, useCallback, useRef } from '../lib/teact/teact';\n\nexport type ReducerAction<Actions> = { type: Actions; payload?: any };\nexport type StateReducer<State, Actions> = (state: State, action: ReducerAction<Actions>) => State;\nexport type Dispatch<Actions> = (action: ReducerAction<Actions>) => void;\n\nexport default function useReducer<State, Actions>(\n  reducer: StateReducer<State, Actions>,\n  initialState: State,\n) {\n  const reducerRef = useRef(reducer);\n  const [state, setState] = useState<State>(initialState);\n\n  const dispatch = useCallback((action: ReducerAction<Actions>) => {\n    setState((currentState) => reducerRef.current(currentState, action));\n  }, []);\n\n  return [\n    state,\n    dispatch,\n  ] as [State, Dispatch<Actions>];\n}\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\nimport { ApiChatFolder } from '../../api/types';\nimport { pick, omit } from '../../util/iteratees';\n\nexport type FolderChatType = {\n  icon: string;\n  title: string;\n  key: keyof Pick<ApiChatFolder, (\n    'contacts' | 'nonContacts' | 'groups' | 'channels' | 'bots' |\n    'excludeMuted' | 'excludeArchived' | 'excludeRead'\n  )>;\n};\n\nexport const INCLUDED_CHAT_TYPES: FolderChatType[] = [\n  { icon: 'user', title: 'FilterContacts', key: 'contacts' },\n  { icon: 'non-contacts', title: 'FilterNonContacts', key: 'nonContacts' },\n  { icon: 'group', title: 'FilterGroups', key: 'groups' },\n  { icon: 'channel', title: 'FilterChannels', key: 'channels' },\n  { icon: 'bots', title: 'FilterBots', key: 'bots' },\n];\n\nexport const EXCLUDED_CHAT_TYPES: FolderChatType[] = [\n  { icon: 'mute', title: 'FilterMuted', key: 'excludeMuted' },\n  { icon: 'archive', title: 'FilterArchived', key: 'excludeArchived' },\n  { icon: 'readchats', title: 'FilterRead', key: 'excludeRead' },\n];\n\nconst INCLUDE_FILTER_FIELDS: Array<keyof FolderIncludeFilters> = [\n  'includedChatIds', 'bots', 'channels', 'groups', 'contacts', 'nonContacts',\n];\nconst EXCLUDE_FILTER_FIELDS: Array<keyof FolderExcludeFilters> = [\n  'excludedChatIds', 'excludeArchived', 'excludeMuted', 'excludeRead',\n];\n\nexport function selectChatFilters(state: FoldersState, mode: 'included' | 'excluded', selectTemp?: boolean) {\n  let selectedChatIds: number[] = [];\n  let selectedChatTypes: FolderChatType['key'][] = [];\n\n  if (mode === 'included') {\n    const {\n      includedChatIds,\n      ...includeFilters\n    } = selectTemp\n      ? state.includeFilters || {}\n      : pick(\n        state.folder,\n        INCLUDE_FILTER_FIELDS,\n      );\n\n    selectedChatIds = includedChatIds || [];\n    selectedChatTypes = (Object.keys(includeFilters) as Array<keyof typeof includeFilters>)\n      .filter((key) => Boolean(includeFilters[key]));\n  } else {\n    const {\n      excludedChatIds,\n      ...excludeFilters\n    } = selectTemp\n      ? state.excludeFilters || {}\n      : pick(\n        state.folder,\n        EXCLUDE_FILTER_FIELDS,\n      );\n\n    selectedChatIds = excludedChatIds || [];\n    selectedChatTypes = (Object.keys(excludeFilters) as Array<keyof typeof excludeFilters>)\n      .filter((key) => Boolean(excludeFilters[key]));\n  }\n\n  return {\n    selectedChatIds,\n    selectedChatTypes,\n  };\n}\n\nfunction getSuggestedFolderName(includeFilters?: FolderIncludeFilters) {\n  if (includeFilters) {\n    const {\n      includedChatIds,\n      ...filters\n    } = includeFilters;\n\n    if (\n      Object.values(filters).filter(Boolean).length > 1\n      || (includedChatIds && includedChatIds.length)\n    ) {\n      return '';\n    }\n\n    if (filters.bots) {\n      return 'Bots';\n    } else if (filters.groups) {\n      return 'Groups';\n    } else if (filters.channels) {\n      return 'Channels';\n    } else if (filters.contacts) {\n      return 'Contacts';\n    } else if (filters.nonContacts) {\n      return 'Non-Contacts';\n    }\n  }\n\n  return '';\n}\n\ntype FolderIncludeFilters = Pick<ApiChatFolder, (\n  'includedChatIds' | 'bots' | 'channels' | 'groups' | 'contacts' | 'nonContacts'\n)>;\ntype FolderExcludeFilters = Pick<ApiChatFolder, 'excludedChatIds' | 'excludeArchived' | 'excludeMuted' | 'excludeRead'>;\n\nexport type FoldersState = {\n  mode: 'create' | 'edit';\n  isLoading?: boolean;\n  isTouched?: boolean;\n  error?: string;\n  folderId?: number;\n  chatFilter: string;\n  folder: Omit<ApiChatFolder, 'id' | 'description' | 'emoticon'>;\n  includeFilters?: FolderIncludeFilters;\n  excludeFilters?: FolderExcludeFilters;\n};\nexport type FoldersActions = (\n  'setTitle' | 'saveFilters' | 'editFolder' | 'reset' | 'setChatFilter' | 'setIsLoading' | 'setError' |\n  'editIncludeFilters' | 'editExcludeFilters' | 'setIncludeFilters' | 'setExcludeFilters'\n);\nexport type FolderEditDispatch = Dispatch<FoldersActions>;\n\nconst INITIAL_STATE: FoldersState = {\n  mode: 'create',\n  chatFilter: '',\n  folder: {\n    title: '',\n    includedChatIds: [],\n    excludedChatIds: [],\n  },\n};\n\nconst foldersReducer: StateReducer<FoldersState, FoldersActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setTitle':\n      return {\n        ...state,\n        folder: {\n          ...state.folder,\n          title: action.payload,\n        },\n        isTouched: true,\n      };\n    case 'editIncludeFilters':\n      return {\n        ...state,\n        includeFilters: pick(\n          state.folder,\n          INCLUDE_FILTER_FIELDS,\n        ),\n      };\n    case 'editExcludeFilters':\n      return {\n        ...state,\n        excludeFilters: pick(\n          state.folder,\n          EXCLUDE_FILTER_FIELDS,\n        ),\n      };\n    case 'setIncludeFilters':\n      return {\n        ...state,\n        includeFilters: action.payload,\n        chatFilter: '',\n      };\n    case 'setExcludeFilters':\n      return {\n        ...state,\n        excludeFilters: action.payload,\n        chatFilter: '',\n      };\n    case 'saveFilters':\n      if (state.includeFilters) {\n        return {\n          ...state,\n          folder: {\n            ...omit(state.folder, INCLUDE_FILTER_FIELDS),\n            title: state.folder.title ? state.folder.title : getSuggestedFolderName(state.includeFilters),\n            ...state.includeFilters,\n          },\n          includeFilters: undefined,\n          chatFilter: '',\n          isTouched: true,\n        };\n      } else if (state.excludeFilters) {\n        return {\n          ...state,\n          folder: {\n            ...omit(state.folder, EXCLUDE_FILTER_FIELDS),\n            ...state.excludeFilters,\n          },\n          excludeFilters: undefined,\n          chatFilter: '',\n          isTouched: true,\n        };\n      } else {\n        return state;\n      }\n    case 'editFolder': {\n      const { id: folderId, description, ...folder } = action.payload;\n\n      return {\n        mode: 'edit',\n        folderId,\n        folder,\n        chatFilter: '',\n      };\n    }\n    case 'setChatFilter': {\n      return {\n        ...state,\n        chatFilter: action.payload,\n      };\n    }\n    case 'setIsLoading': {\n      return {\n        ...state,\n        isLoading: action.payload,\n      };\n    }\n    case 'setError': {\n      return {\n        ...state,\n        error: action.payload,\n      };\n    }\n    case 'reset':\n      return INITIAL_STATE;\n    default:\n      return state;\n  }\n};\n\nexport default () => {\n  return useReducer(foldersReducer, INITIAL_STATE);\n};\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nexport default () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n","import React, {\n  FC, useCallback, useMemo, memo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_MOBILE_SCREEN } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'signOut' | 'deleteChatFolder'>;\n\nconst SettingsHeader: FC<OwnProps & DispatchProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  signOut,\n  deleteChatFolder,\n}) => {\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n  const [isDeleteFolderDialogOpen, setIsDeleteFolderDialogOpen] = useState(false);\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(true);\n  }, []);\n\n  const closeDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(false);\n  }, []);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteFolderConfirmation();\n    deleteChatFolder({ id: editedFolderId });\n    onReset();\n  }, [editedFolderId, closeDeleteFolderConfirmation, deleteChatFolder, onReset]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_MOBILE_SCREEN}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('EnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n\n            {editedFolderId && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  Delete Folder\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersExcludedChats:\n        return (\n          <div className=\"settings-main-header\">\n            {currentScreen === SettingsScreens.FoldersIncludedChats ? (\n              <h3>{lang('FilterInclude')}</h3>\n            ) : (\n              <h3>{lang('FilterExclude')}</h3>\n            )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('SETTINGS')}</h3>\n\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text=\"Are you sure you want to log out?\"\n        confirmLabel=\"Log Out\"\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isDeleteFolderDialogOpen}\n        onClose={closeDeleteFolderConfirmation}\n        text=\"Are you sure you want to delete this folder?\"\n        confirmLabel=\"Delete\"\n        confirmHandler={handleDeleteFolderMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, ['signOut', 'deleteChatFolder']),\n)(SettingsHeader));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { SettingsScreens } from '../../../types';\nimport { ApiUser } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { getUserFullName } from '../../../modules/helpers';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  currentUser?: ApiUser;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  currentUser,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <div className=\"settings-current-user\">\n            <Avatar user={currentUser} size=\"jumbo\" />\n            <p className=\"name\">{getUserFullName(currentUser)}</p>\n            <p className=\"phone\">{formatPhoneNumberWithCode(currentUser.phoneNumber)}</p>\n          </div>\n        )}\n        <ListItem\n          icon=\"edit\"\n          onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n        >\n          {lang('lng_settings_information')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"settings\"\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n\n    return {\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n    };\n  },\n)(SettingsMain));\n","import React, { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport Button, { OwnProps as ButtonProps } from './Button';\n\nimport './FloatingActionButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  className?: string;\n  color?: ButtonProps['color'];\n  ariaLabel?: ButtonProps['ariaLabel'];\n  disabled?: boolean;\n  onClick: () => void;\n  children: any;\n};\n\nconst FloatingActionButton: FC<OwnProps> = ({\n  isShown,\n  className,\n  color = 'primary',\n  ariaLabel,\n  disabled,\n  onClick,\n  children,\n}) => {\n  const buttonClassName = buildClassName(\n    'FloatingActionButton',\n    isShown && 'revealed',\n    className,\n  );\n\n  return (\n    <Button\n      className={buttonClassName}\n      color={color}\n      round\n      disabled={disabled}\n      onClick={isShown && !disabled ? onClick : undefined}\n      ariaLabel={ariaLabel}\n      tabIndex={-1}\n    >\n      {children}\n    </Button>\n  );\n};\n\nexport default FloatingActionButton;\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\n\nimport { debounce } from '../../util/schedulers';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkUsername: AnyToVoidFunction;\n  onChange: (value: string | false) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX = 'https://t.me/';\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username);\n}\n\nconst SettingsEditProfile: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkUsername,\n  onChange,\n}) => {\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, `${label} is too short`];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, `${label} is too long`];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, `${label} contains invalid characters`];\n    }\n\n    if (isUsernameAvailable === undefined) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      isUsernameAvailable ? lang(`${langPrefix}Available`, 'Username') : undefined,\n      isUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, isUsernameAvailable, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n    e.target.value = `${asLink ? LINK_PREFIX : ''}${newUsername}`;\n\n    const isValid = isUsernameValid(newUsername);\n\n    if (isValid) {\n      runDebouncedForCheckUsername(() => {\n        checkUsername({ username: newUsername });\n      });\n    }\n\n    if (onChange) {\n      onChange(isValid ? newUsername : false);\n    }\n  }, [asLink, checkUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n    />\n  );\n};\n\nexport default memo(SettingsEditProfile);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport { selectUser } from '../../../modules/selectors';\nimport { getChatAvatarHash } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport renderText from '../../common/helpers/renderText';\nimport UsernameInput from '../../common/UsernameInput';\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  currentUsername?: string;\n  progress?: ProfileEditProgress;\n  isUsernameAvailable?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadCurrentUser' | 'updateProfile' | 'checkUsername'\n)>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst MAX_BIO_LENGTH = 70;\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\nconst ERROR_BIO_TOO_LONG = 'Bio can\\' be longer than 70 characters';\n\nconst SettingsEditProfile: FC<StateProps & DispatchProps> = ({\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  currentUsername,\n  progress,\n  isUsernameAvailable,\n  loadCurrentUser,\n  updateProfile,\n  checkUsername,\n}) => {\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [username, setUsername] = useState<string | false>(currentUsername || '');\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = username === false;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || isUsernameAvailable === true;\n  }, [photo, isProfileFieldsTouched, isUsernameError, isUsernameAvailable]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setUsername(value);\n    setIsUsernameTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    if (trimmedBio.length > MAX_BIO_LENGTH) {\n      setError(ERROR_BIO_TOO_LONG);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    username, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-edit-profile\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <InputText\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            error={error === ERROR_BIO_TOO_LONG ? error : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={username || ''}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkUsername={checkUsername}\n            onChange={handleUsernameChange}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {username && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">https://t.me/{username}</span>\n            </p>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const { progress, isUsernameAvailable } = global.profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    if (!currentUser) {\n      return {\n        progress,\n        isUsernameAvailable,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      username: currentUsername,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      currentUsername,\n      progress,\n      isUsernameAvailable,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadCurrentUser',\n    'updateProfile',\n    'checkUsername',\n  ]),\n)(SettingsEditProfile));\n","import React, {\n  FC, memo, useMemo, useCallback, useState, useEffect,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\nimport { ApiChatFolder, ApiChat, ApiUser } from '../../../../api/types';\nimport { NotifyException, NotifySettings } from '../../../../types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { pick } from '../../../../util/iteratees';\nimport { selectNotifyExceptions, selectNotifySettings } from '../../../../modules/selectors';\nimport { throttle } from '../../../../util/schedulers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport { getFolderDescriptionText } from '../../../../modules/helpers';\nimport useLang from '../../../../hooks/useLang';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\ntype OwnProps = {\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  orderedFolderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadRecommendedChatFolders' | 'addChatFolder' | 'showError'>;\n\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst MAX_ALLOWED_FOLDERS = 10;\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps & DispatchProps> = ({\n  onCreateFolder,\n  onEditFolder,\n  chatsById,\n  usersById,\n  orderedFolderIds,\n  foldersById,\n  recommendedChatFolders,\n  notifySettings,\n  notifyExceptions,\n  loadRecommendedChatFolders,\n  addChatFolder,\n  showError,\n}) => {\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersAll').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showError({\n        error: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n        },\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, showError, onCreateFolder]);\n\n  const lang = useLang();\n\n  const userFolders = useMemo(() => {\n    if (!orderedFolderIds) {\n      return undefined;\n    }\n\n    const chatIds = Object.keys(chatsById).map(Number);\n\n    return orderedFolderIds.map((id) => {\n      const folder = foldersById[id];\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(\n          lang, chatsById, usersById, folder, chatIds, notifySettings, notifyExceptions,\n        ),\n      };\n    });\n  }, [orderedFolderIds, chatsById, foldersById, usersById, notifySettings, notifyExceptions, lang]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showError({\n        error: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n        },\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, addChatFolder, showError]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header\">\n        <div className=\"settings-content-icon\">\n          {animationData && (\n            <AnimatedSticker\n              id=\"settingsFoldersMain\"\n              size={STICKER_SIZE_FOLDER_SETTINGS}\n              animationData={animationData}\n              play={isAnimationLoaded}\n              noLoop\n              onLoad={handleAnimationLoad}\n            />\n          )}\n        </div>\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n          className=\"with-icon mb-2\"\n          color=\"primary\"\n          size=\"smaller\"\n          pill\n          fluid\n          onClick={handleCreateFolder}\n          isRtl={lang.isRtl}\n        >\n          <i className=\"icon-add\" />\n          {lang('CreateNewFilter')}\n        </Button>\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        {userFolders && userFolders.length ? userFolders.map((folder) => (\n          <ListItem\n            className=\"mb-2\"\n            narrow\n            multiline\n            onClick={() => onEditFolder(foldersById[folder.id])}\n          >\n            <span className=\"title\">{folder.title}</span>\n            <span className=\"subtitle\">{folder.subtitle}</span>\n          </ListItem>\n        )) : userFolders && !userFolders.length ? (\n          <p className=\"settings-item-description my-4\" dir=\"auto\">\n            You have no folders yet.\n          </p>\n        ) : <Loading />}\n      </div>\n\n      {(recommendedChatFolders && !!recommendedChatFolders.length) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{folder.title}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: { byId: chatsById },\n      users: { byId: usersById },\n    } = global;\n\n    const {\n      orderedIds: orderedFolderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      chatsById,\n      usersById,\n      orderedFolderIds,\n      foldersById,\n      recommendedChatFolders,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadRecommendedChatFolders', 'addChatFolder', 'showError']),\n)(SettingsFoldersMain));\n","import React, { FC } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import React, {\n  FC, memo, useCallback, useState, useEffect, useMemo,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { pick, findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isChatPrivate } from '../../../../modules/helpers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport {\n  FoldersState,\n  FolderEditDispatch,\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: number[];\n  loadedArchivedChatIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'editChatFolder' | 'addChatFolder' | 'loadMoreChats'>;\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'Please select at least one chat for this folder.';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps & DispatchProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  onReset,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n  editChatFolder,\n  addChatFolder,\n  loadMoreChats,\n}) => {\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersNew').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...loadedActiveChatIds || [],\n      ...loadedArchivedChatIds || [],\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  useEffect(() => {\n    if (\n      visibleIncludedChatIds.length < includedChatIds.length\n      || visibleExcludedChatIds.length < excludedChatIds.length\n    ) {\n      loadMoreChats({ listType: 'active' });\n    }\n  }, [\n    loadMoreChats,\n    excludedChatIds.length,\n    includedChatIds.length,\n    visibleExcludedChatIds.length,\n    visibleIncludedChatIds.length,\n  ]);\n\n  const lang = useLang();\n\n  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }\n\n  function handleSubmit() {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isChatPrivate(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-content-header\">\n          <div className=\"settings-content-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"settingsFoldersEdit\"\n                size={STICKER_SIZE_FOLDER_SETTINGS}\n                animationData={animationData}\n                play={isAnimationLoaded && String(state.folderId)}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {state.error}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={!!state.isTouched}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { listIds } = global.chats;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['editChatFolder', 'addChatFolder', 'loadMoreChats']),\n)(SettingsFoldersEdit));\n","import React, {\n  FC, useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\n\nimport { isChatPrivate } from '../../../../modules/helpers';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n  FolderChatType,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: number[];\n  selectedIds: number[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: number[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n  onLoadMore: () => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_CHATS = 100;\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\nconst SettingsFoldersChatsPicker: FC<OwnProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  onLoadMore,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n  const hasMaxChats = selectedIds.length >= MAX_CHATS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: number) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: number) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        onClick={() => handleItemClick(id)}\n        ripple\n        disabled={!isSelected && hasMaxChats}\n      >\n        {isChatPrivate(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(onLoadMore, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        {!hasMaxChats ? (\n          <InputText\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={lang('Search')}\n          />\n        ) : (\n          <p className=\"max-items-reached\" dir=\"auto\">\n            {`Sorry, you can't add more than ${MAX_CHATS} chats.`}\n          </p>\n        )}\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <>\n            <h4 key=\"header1\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChatTypes')}\n            </h4>\n            {chatTypes.map(renderChatType)}\n            <div key=\"divider\" className=\"picker-list-divider\" />\n            <h4 key=\"header2\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </>\n        )}\n\n        {viewportIds && viewportIds.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(SettingsFoldersChatsPicker);\n","import React, {\n  FC, memo, useMemo, useCallback,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\nimport { ApiChat } from '../../../../api/types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { pick } from '../../../../util/iteratees';\nimport searchWords from '../../../../util/searchWords';\nimport { prepareChatList, getChatTitle } from '../../../../modules/helpers';\nimport {\n  FoldersState,\n  FolderEditDispatch,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\n\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  listIds?: number[];\n  orderedPinnedIds?: number[];\n  archivedListIds?: number[];\n  archivedPinnedIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadMoreChats'>;\n\nconst SettingsFoldersChatFilters: FC<OwnProps & StateProps & DispatchProps> = ({\n  mode,\n  state,\n  dispatch,\n  chatsById,\n  listIds,\n  orderedPinnedIds,\n  archivedListIds,\n  archivedPinnedIds,\n  loadMoreChats,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n  const chats = useMemo(() => {\n    const activeChatArrays = listIds\n      ? prepareChatList(chatsById, listIds, orderedPinnedIds, 'all')\n      : undefined;\n    const archivedChatArrays = archivedListIds\n      ? prepareChatList(chatsById, archivedListIds, archivedPinnedIds, 'archived')\n      : undefined;\n\n    if (!activeChatArrays && !archivedChatArrays) {\n      return undefined;\n    }\n\n    return [\n      ...(activeChatArrays\n        ? [...activeChatArrays.pinnedChats, ...activeChatArrays.otherChats]\n        : []\n      ),\n      ...(archivedChatArrays ? archivedChatArrays.otherChats : []),\n    ];\n  }, [chatsById, listIds, orderedPinnedIds, archivedListIds, archivedPinnedIds]);\n\n  const displayedIds = useMemo(() => {\n    if (!chats) {\n      return undefined;\n    }\n\n    return chats\n      .filter((chat) => (\n        !chatFilter\n        || searchWords(getChatTitle(lang, chat), chatFilter)\n        || selectedChatIds.includes(chat.id)\n      ))\n      .map(({ id }) => id);\n  }, [chats, chatFilter, lang, selectedChatIds]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: number[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n      onLoadMore={loadMoreChats}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n    } = global;\n\n    return {\n      chatsById,\n      listIds: listIds.active,\n      orderedPinnedIds: orderedPinnedIds.active,\n      archivedPinnedIds: orderedPinnedIds.archived,\n      archivedListIds: listIds.archived,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadMoreChats']),\n)(SettingsFoldersChatFilters));\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { FoldersState, FolderEditDispatch } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  state,\n  dispatch,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(SettingsScreens.FoldersIncludedChats);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(SettingsScreens.FoldersExcludedChats);\n  }, [dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useCallback, useMemo, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport './RangeSlider.scss';\n\ntype OwnProps = {\n  options?: string[];\n  range?: { min: number; max: number; step?: number };\n  label?: string;\n  value: number;\n  disabled?: boolean;\n  onChange: (value: number) => void;\n};\n\nconst RangeSlider: FC<OwnProps> = ({\n  options,\n  range,\n  label,\n  value,\n  disabled,\n  onChange,\n}) => {\n  const lang = useLang();\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    onChange(Number(event.currentTarget.value));\n  }, [onChange]);\n\n  const className = buildClassName(\n    'RangeSlider',\n    disabled && 'disabled',\n  );\n\n  const trackWidth = useMemo(() => {\n    if (options) {\n      return (value / (options.length - 1)) * 100;\n    } else if (range) {\n      const possibleValuesLength = (range.max - range.min) / (range.step || 1);\n      return ((value - range.min) / possibleValuesLength) * 100;\n    }\n    return 0;\n  }, [value, options, range]);\n\n  const [min, max, step] = useMemo(() => {\n    if (options) {\n      return [0, options.length - 1, 1];\n    } else if (range) {\n      return [range.min, range.max, range.step || 1];\n    }\n\n    return [0, 0, 0];\n  }, [range, options]);\n\n  return (\n    <div className={className}>\n      {label && (\n        <div className=\"slider-top-row\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <span className=\"label\" dir=\"auto\">{label}</span>\n          {range && (\n            <span className=\"value\" dir=\"auto\">{value}</span>\n          )}\n        </div>\n      )}\n      <div className=\"slider-main\">\n        <div\n          className=\"slider-fill-track\"\n          // @ts-ignore\n          style={`width: ${trackWidth}%`}\n        />\n        <input\n          min={min}\n          max={max}\n          value={value}\n          step={step}\n          type=\"range\"\n          onChange={handleChange}\n        />\n        {options && (\n          <div className=\"slider-options\">\n            {options.map((option, index) => (\n              <div\n                className={buildClassName('slider-option no-selection', index === value && 'active')}\n                onClick={() => onChange(index)}\n              >\n                {option}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(RangeSlider);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\ntype OwnProps = {\n  size?: number;\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCoverAnimated: FC<OwnProps> = ({\n  size = STICKER_SIZE_PICKER_HEADER,\n  stickerSet,\n  observeIntersection,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHash = `stickerSet${stickerSet.id}`;\n  const lottieData = useMedia(mediaHash, !isIntersecting, ApiMediaFormat.Lottie);\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(lottieData, 'slow');\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {!shouldRenderFullMedia && getFirstLetters(stickerSet.title, 2)}\n      {shouldRenderFullMedia && lottieData && (\n        <AnimatedSticker\n          id={mediaHash}\n          size={size}\n          animationData={lottieData}\n          className={transitionClassNames}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCoverAnimated);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiStickerSet } from '../../../api/types';\n\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport { getFirstLetters } from '../../../util/textFormat';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({ stickerSet, observeIntersection }) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaData = useMedia(stickerSet.hasThumbnail && `stickerSet${stickerSet.id}`, !isIntersecting);\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(mediaData, 'slow');\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {!shouldRenderFullMedia && getFirstLetters(stickerSet.title, 2)}\n      {shouldRenderFullMedia && (\n        <img src={mediaData} className={transitionClassNames} alt=\"\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiSticker } from '../../api/types';\n\nimport { useIsIntersecting, ObserveFn } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useTransitionForMedia from '../../hooks/useTransitionForMedia';\nimport useFlag from '../../hooks/useFlag';\nimport buildClassName from '../../util/buildClassName';\n\nimport AnimatedSticker from './AnimatedSticker';\nimport Button from '../ui/Button';\n\nimport './StickerButton.scss';\n\ntype OwnProps = {\n  sticker: ApiSticker;\n  size: number;\n  observeIntersection: ObserveFn;\n  noAnimate?: boolean;\n  title?: string;\n  className?: string;\n  onClick?: (arg: any) => void;\n  clickArg?: any;\n  onUnfaveClick?: (sticker: ApiSticker) => void;\n};\n\nconst StickerButton: FC<OwnProps> = ({\n  sticker, size, observeIntersection, noAnimate, title, className, onClick, clickArg, onUnfaveClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const localMediaHash = `sticker${sticker.id}`;\n  const stickerSelector = `sticker-button-${sticker.id}`;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const thumbDataUri = sticker.thumbnail ? sticker.thumbnail.dataUri : undefined;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !isIntersecting, ApiMediaFormat.BlobUrl);\n\n  const shouldPlay = isIntersecting && !noAnimate;\n  const lottieData = useMedia(sticker.isAnimated && localMediaHash, !shouldPlay, ApiMediaFormat.Lottie);\n  const [isAnimationLoaded, markLoaded, unmarkLoaded] = useFlag(Boolean(lottieData));\n  const canAnimatedPlay = isAnimationLoaded && shouldPlay;\n\n  const {\n    shouldRenderThumb,\n    shouldRenderFullMedia: shouldRenderPreview,\n    transitionClassNames: previewTransitionClassNames,\n  } = useTransitionForMedia(previewBlobUrl || canAnimatedPlay, 'slow');\n\n  // To avoid flickering\n  useEffect(() => {\n    if (!shouldPlay) {\n      unmarkLoaded();\n    }\n  }, [unmarkLoaded, shouldPlay]);\n\n  function handleClick() {\n    if (onClick) {\n      onClick(clickArg);\n    }\n  }\n\n  function handleUnfaveClick(e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) {\n    e.stopPropagation();\n    e.preventDefault();\n\n    onUnfaveClick!(sticker);\n  }\n\n  const fullClassName = buildClassName(\n    'StickerButton',\n    sticker.isAnimated && 'animated',\n    stickerSelector,\n    className,\n  );\n\n  const style = shouldRenderThumb && thumbDataUri ? `background-image: url('${thumbDataUri}');` : '';\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      title={title || (sticker && sticker.emoji)}\n      // @ts-ignore\n      style={style}\n      data-sticker-id={sticker.id}\n      onClick={handleClick}\n    >\n      {shouldRenderPreview && !canAnimatedPlay && (\n        // eslint-disable-next-line jsx-a11y/alt-text\n        <img src={previewBlobUrl} className={previewTransitionClassNames} />\n      )}\n      {shouldPlay && lottieData && (\n        <AnimatedSticker\n          id={localMediaHash}\n          animationData={lottieData}\n          play\n          size={size}\n          isLowPriority\n          onLoad={markLoaded}\n        />\n      )}\n      {onUnfaveClick && (\n        <Button\n          className=\"sticker-unfave-button\"\n          color=\"dark\"\n          round\n          onClick={handleUnfaveClick}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerButton);\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../../config';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport StickerSetCoverAnimated from '../../middle/composer/StickerSetCoverAnimated';\nimport StickerSetCover from '../../middle/composer/StickerSetCover';\nimport StickerButton from '../../common/StickerButton';\n\nimport './SettingsStickerSet.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst SettingsStickerSet: FC<OwnProps> = ({\n  stickerSet,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  const firstSticker = stickerSet.stickers && stickerSet.stickers[0];\n\n  if (stickerSet.hasThumbnail || !firstSticker) {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        inactive={!firstSticker}\n        onClick={() => firstSticker && onClick(firstSticker)}\n      >\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          {stickerSet.isAnimated ? (\n            <StickerSetCoverAnimated\n              size={STICKER_SIZE_GENERAL_SETTINGS}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          )}\n        </Button>\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  } else {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        onClick={() => onClick(firstSticker)}\n      >\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          observeIntersection={observeIntersection}\n        />\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  }\n};\n\nexport default memo(SettingsStickerSet);\n","import React, {\n  FC, useCallback, memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ISettings } from '../../../types';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { IS_MAC_OS, IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsStickerSet from './SettingsStickerSet';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = ISettings['byKey'] & {\n  stickerSetIds?: string[];\n  stickerSetsById?: Record<string, ApiStickerSet>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setSettingOption' | 'loadStickerSets' | 'loadAddedStickers'>;\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst SettingsGeneral: FC<OwnProps & StateProps & DispatchProps> = ({\n  onScreenSelect,\n  stickerSetIds,\n  stickerSetsById,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  shouldAutoDownloadMediaFromContacts,\n  shouldAutoDownloadMediaInPrivateChats,\n  shouldAutoDownloadMediaInGroups,\n  shouldAutoDownloadMediaInChannels,\n  shouldAutoPlayGifs,\n  shouldAutoPlayVideos,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  setSettingOption,\n  loadStickerSets,\n  loadAddedStickers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [sticker, setSticker] = useState<ApiSticker>();\n\n  const lang = useLang();\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  useEffect(() => {\n    loadStickerSets();\n  }, [loadStickerSets]);\n\n  useEffect(() => {\n    if (stickerSetIds && stickerSetIds.length) {\n      loadAddedStickers();\n    }\n  }, [stickerSetIds, loadAddedStickers]);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleStickerSetClick = useCallback((value: ApiSticker) => {\n    setSticker(value);\n    openModal();\n  }, [openModal]);\n\n  const stickerSets = stickerSetIds && stickerSetIds.map((id: string) => {\n    return stickerSetsById && stickerSetsById[id] && stickerSetsById[id].installedDate ? stickerSetsById[id] : false;\n  }).filter(Boolean);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          // TODO Remove memo-killer\n          range={{ min: 12, max: 20 }}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={(value) => setSettingOption({ messageSendKeyCombo: value })}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoDownloadMedia')}</h4>\n\n        <Checkbox\n          label={lang('Contacts')}\n          checked={shouldAutoDownloadMediaFromContacts}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaFromContacts: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutodownloadPrivateChats')}\n          checked={shouldAutoDownloadMediaInPrivateChats}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaInPrivateChats: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutodownloadGroupChats')}\n          checked={shouldAutoDownloadMediaInGroups}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaInGroups: isChecked })}\n        />\n        <Checkbox\n          label={lang('FilterChannels')}\n          checked={shouldAutoDownloadMediaInChannels}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaInChannels: isChecked })}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={shouldAutoPlayGifs}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoPlayGifs: isChecked })}\n        />\n        <Checkbox\n          label={lang('VideosTitle')}\n          checked={shouldAutoPlayVideos}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoPlayVideos: isChecked })}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AccDescrStickers')}</h4>\n\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={(isChecked) => setSettingOption({ shouldSuggestStickers: isChecked })}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={(isChecked) => setSettingOption({ shouldLoopStickers: isChecked })}\n        />\n\n        <div className=\"mt-4\" ref={stickerSettingsRef}>\n          {stickerSets && stickerSets.map((stickerSet: ApiStickerSet) => (\n            <SettingsStickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersectionForCovers}\n              onClick={handleStickerSetClick}\n            />\n          ))}\n        </div>\n        {sticker && (\n          <StickerSetModal\n            isOpen={isModalOpen}\n            fromSticker={sticker}\n            onClose={closeModal}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey,\n        [\n          'messageTextSize',\n          'animationLevel',\n          'messageSendKeyCombo',\n          'shouldAutoDownloadMediaFromContacts',\n          'shouldAutoDownloadMediaInPrivateChats',\n          'shouldAutoDownloadMediaInGroups',\n          'shouldAutoDownloadMediaInChannels',\n          'shouldAutoPlayGifs',\n          'shouldAutoPlayVideos',\n          'shouldSuggestStickers',\n          'shouldLoopStickers',\n        ]),\n      stickerSetIds: global.stickers.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setSettingOption', 'loadStickerSets', 'loadAddedStickers',\n  ]),\n)(SettingsGeneral));\n","let fileSelector: HTMLInputElement;\n\nexport function openSystemFilesDialog(accept = '*', callback: (e: Event) => void, noMultiple = false) {\n  if (!fileSelector) {\n    fileSelector = document.createElement('input');\n    fileSelector.setAttribute('type', 'file');\n  }\n\n  fileSelector.setAttribute('accept', accept);\n\n  if (noMultiple) {\n    fileSelector.removeAttribute('multiple');\n  } else {\n    fileSelector.setAttribute('multiple', 'multiple');\n  }\n\n  // eslint-disable-next-line no-null/no-null\n  fileSelector.onchange = null;\n  fileSelector.value = '';\n  fileSelector.onchange = callback;\n\n  fileSelector.click();\n}\n","/* eslint-disable eqeqeq */\n/* eslint-disable prefer-template */\n/* eslint-disable prefer-const */\n/* eslint-disable prefer-destructuring */\n/* eslint-disable one-var */\n/* eslint-disable one-var-declaration-per-line */\n\nimport { preloadImage } from './files';\n\n/**\n * HEX > RGB\n * input: 'xxxxxx' (ex. 'ed15fa') case-insensitive\n * output: [r, g, b] ([0-255, 0-255, 0-255])\n */\nexport function hex2rgb(param: string): [number, number, number] {\n  return [\n    parseInt(param.substring(0, 2), 16),\n    parseInt(param.substring(2, 4), 16),\n    parseInt(param.substring(4, 6), 16),\n  ];\n}\n\n/**\n * RGB > HEX\n * input: [r, g, b] ([0-255, 0-255, 0-255])\n * output: 'xxxxxx' (ex. 'ff0000')\n */\nexport function rgb2hex(param: [number, number, number]) {\n  const p0 = param[0].toString(16);\n  const p1 = param[1].toString(16);\n  const p2 = param[2].toString(16);\n  return (p0.length == 1 ? '0' + p0 : p0) + (p1.length == 1 ? '0' + p1 : p1) + (p2.length == 1 ? '0' + p2 : p2);\n}\n\n/**\n * Converts an RGB color value to HSV. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and v in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSV representation\n */\nexport function rgb2hsb([r, g, b]: [number, number, number]): [number, number, number] {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  let max = Math.max(r, g, b), min = Math.min(r, g, b);\n  let h!: number, s: number, v: number = max;\n\n  let d = max - min;\n  s = max == 0 ? 0 : d / max;\n\n  if (max == min) {\n    h = 0; // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return [h, s, v];\n}\n\n/**\n * Converts an HSV color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes h, s, and v are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param   Number  h       The hue\n * @param   Number  s       The saturation\n * @param   Number  v       The value\n * @return  Array           The RGB representation\n */\nexport function hsb2rgb([h, s, v]: [number, number, number]): [number, number, number] {\n  let r!: number, g!: number, b!: number;\n\n  let i = Math.floor(h * 6);\n  let f = h * 6 - i;\n  let p = v * (1 - s);\n  let q = v * (1 - f * s);\n  let t = v * (1 - (1 - f) * s);\n\n  switch (i % 6) {\n    case 0:\n      r = v;\n      g = t;\n      b = p;\n      break;\n    case 1:\n      r = q;\n      g = v;\n      b = p;\n      break;\n    case 2:\n      r = p;\n      g = v;\n      b = t;\n      break;\n    case 3:\n      r = p;\n      g = q;\n      b = v;\n      break;\n    case 4:\n      r = t;\n      g = p;\n      b = v;\n      break;\n    case 5:\n      r = v;\n      g = p;\n      b = q;\n      break;\n  }\n\n  return [\n    Math.round(r * 255),\n    Math.round(g * 255),\n    Math.round(b * 255),\n  ];\n}\n\nexport async function getAverageColor(url: string): Promise<[number, number, number]> {\n  // Only visit every 5 pixels\n  const blockSize = 5;\n  const defaultRGB: [number, number, number] = [0, 0, 0];\n  let data;\n  let width;\n  let height;\n  let i = -4;\n  let length;\n  let rgb: [number, number, number] = [0, 0, 0];\n  let count = 0;\n\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext && canvas.getContext('2d');\n  if (!context) {\n    return defaultRGB;\n  }\n\n  const image = await preloadImage(url);\n  height = image.naturalHeight || image.offsetHeight || image.height;\n  width = image.naturalWidth || image.offsetWidth || image.width;\n  canvas.height = height;\n  canvas.width = width;\n\n  context.drawImage(image, 0, 0);\n\n  try {\n    data = context.getImageData(0, 0, width, height);\n  } catch (e) {\n    return defaultRGB;\n  }\n\n  length = data.data.length;\n\n  // eslint-disable-next-line no-cond-assign\n  while ((i += blockSize * 4) < length) {\n    ++count;\n    rgb[0] += data.data[i];\n    rgb[1] += data.data[i + 1];\n    rgb[2] += data.data[i + 2];\n  }\n\n  rgb[0] = Math.floor(rgb[0] / count);\n  rgb[1] = Math.floor(rgb[1] / count);\n  rgb[2] = Math.floor(rgb[2] / count);\n\n  return rgb;\n}\n\n// eslint-disable-next-line max-len\n// Function was adapted from https://github.com/telegramdesktop/tdesktop/blob/35ff621b5b52f7e3553fb0f990ea13ade7101b8e/Telegram/SourceFiles/data/data_wall_paper.cpp#L518\nexport function getPatternColor(rgbColor: [number, number, number]) {\n  let [hue, saturation, value] = rgb2hsb(rgbColor);\n\n  saturation = Math.min(1, saturation + 0.05 + 0.1 * (1 - saturation));\n  value = value > 0.5\n    ? Math.max(0, value * 0.65)\n    : Math.max(0, Math.min(1, 1 - value * 0.65));\n\n  return `hsla(${hue * 360}, ${saturation * 100}%, ${value * 100}%, .4)`;\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport { ApiWallpaper } from '../../../api/types';\nimport { ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(\n    document.thumbnail && document.thumbnail.dataUri,\n    Boolean(previewBlobUrl),\n    true,\n  );\n  const {\n    shouldRenderThumb, shouldRenderFullMedia, transitionClassNames,\n  } = useTransitionForMedia(previewBlobUrl || localBlobUrl, 'slow');\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, downloadProgress,\n  } = useMediaWithDownloadProgress(localMediaHash, !isDownloadAllowed);\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isDownloadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasDownloadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        {shouldRenderThumb && (\n          <canvas\n            ref={thumbRef}\n            className=\"thumbnail\"\n          />\n        )}\n        {shouldRenderFullMedia && (\n          <img\n            src={previewBlobUrl || localBlobUrl}\n            className={`full-media ${transitionClassNames}`}\n            alt=\"\"\n          />\n        )}\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={downloadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import React, {\n  FC, memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadWallpapers' | 'uploadWallpaper' | 'setThemeSettings'\n)>;\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps & DispatchProps> = ({\n  onScreenSelect,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n  loadWallpapers,\n  uploadWallpaper,\n  setThemeSettings,\n}) => {\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      uploadWallpaper(files[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper && currentWallpaper.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  const isUploading = loadedWallpapers && loadedWallpapers[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { theme } = global.settings.byKey;\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadWallpapers', 'uploadWallpaper', 'setThemeSettings',\n  ]),\n)(SettingsGeneralBackground));\n","import { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport { captureEvents, RealTouchEvent } from '../../../util/captureEvents';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setThemeSettings'>;\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps & DispatchProps> = ({\n  theme,\n  backgroundColor,\n  setThemeSettings,\n}) => {\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            // @ts-ignore\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            // @ts-ignore\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            // @ts-ignore\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { theme } = global.settings.byKey;\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setThemeSettings']),\n)(SettingsGeneralBackground));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadNotificationSettings' | 'updateContactSignUpNotification' | 'updateNotificationSettings'\n)>;\n\nconst SettingsNotifications: FC<StateProps & DispatchProps> = ({\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  loadNotificationSettings,\n  updateContactSignUpNotification,\n  updateNotificationSettings,\n}) => {\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          subLabel={lang(hasPrivateChatsNotifications ? 'NotificationsEnabled' : 'NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'contact', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'PreviewEnabled' : 'PreviewDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'contact', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'NotificationsEnabled' : 'NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'group', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          subLabel={lang(hasGroupMessagePreview ? 'PreviewEnabled' : 'PreviewDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'group', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          subLabel={lang(hasBroadcastNotifications ? 'NotificationsEnabled' : 'NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'broadcast', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          subLabel={lang(hasBroadcastMessagePreview ? 'PreviewEnabled' : 'PreviewDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'broadcast', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  return {\n    hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n    hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n    hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n    hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n    hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n    hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n    hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n  };\n},\n(setGlobal, actions): DispatchProps => pick(actions, [\n  'loadNotificationSettings',\n  'updateContactSignUpNotification',\n  'updateNotificationSettings',\n]))(SettingsNotifications));\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { PrivacyVisibility, SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  hasPassword?: boolean;\n  blockedCount: number;\n  sessionsCount: number;\n  visibilityPrivacyPhoneNumber?: PrivacyVisibility;\n  visibilityPrivacyLastSeen?: PrivacyVisibility;\n  visibilityPrivacyProfilePhoto?: PrivacyVisibility;\n  visibilityPrivacyForwarding?: PrivacyVisibility;\n  visibilityPrivacyGroupChats?: PrivacyVisibility;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadBlockedContacts' | 'loadAuthorizations' | 'loadPrivacySettings'>;\n\nconst SettingsPrivacy: FC<OwnProps & StateProps & DispatchProps> = ({\n  onScreenSelect,\n  hasPassword,\n  blockedCount,\n  sessionsCount,\n  visibilityPrivacyPhoneNumber,\n  visibilityPrivacyLastSeen,\n  visibilityPrivacyProfilePhoto,\n  visibilityPrivacyForwarding,\n  visibilityPrivacyGroupChats,\n  loadPrivacySettings,\n  loadBlockedContacts,\n  loadAuthorizations,\n}) => {\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings]);\n\n  const lang = useLang();\n\n  function getVisibilityValue(visibility?: PrivacyVisibility) {\n    switch (visibility) {\n      case 'everybody':\n        return lang('P2PEverybody');\n\n      case 'contacts':\n        return lang('P2PContacts');\n\n      case 'nobody':\n        return lang('P2PNobody');\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('BlockedUsers')}</span>\n            {blockedCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang('Users', blockedCount)}\n              </span>\n            )}\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyActiveSessions)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('SessionsTitle')}</span>\n            {sessionsCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {sessionsCount === 1 ? '1 session' : `${sessionsCount} sessions`}\n              </span>\n            )}\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: { hasPassword },\n        privacy,\n      },\n      blocked,\n      activeSessions,\n    } = global;\n\n    return {\n      hasPassword,\n      blockedCount: blocked.totalCount,\n      sessionsCount: activeSessions.length,\n      visibilityPrivacyPhoneNumber: privacy.phoneNumber && privacy.phoneNumber.visibility,\n      visibilityPrivacyLastSeen: privacy.lastSeen && privacy.lastSeen.visibility,\n      visibilityPrivacyProfilePhoto: privacy.profilePhoto && privacy.profilePhoto.visibility,\n      visibilityPrivacyForwarding: privacy.forwards && privacy.forwards.visibility,\n      visibilityPrivacyGroupChats: privacy.chatInvite && privacy.chatInvite.visibility,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadBlockedContacts', 'loadAuthorizations', 'loadPrivacySettings',\n  ]),\n)(SettingsPrivacy));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ISettings } from '../../../types';\nimport { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\nimport { pick } from '../../../util/iteratees';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport useFlag from '../../../hooks/useFlag';\n\ntype StateProps = Pick<ISettings, 'languages' | 'language'>;\n\ntype DispatchProps = Pick<GlobalActions, 'loadLanguages' | 'setSettingOption'>;\n\nconst SettingsLanguage: FC<StateProps & DispatchProps> = ({\n  languages,\n  language,\n  loadLanguages,\n  setSettingOption,\n}) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  // TODO Throttle\n  useEffect(() => {\n    loadLanguages();\n  }, [loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    setLanguage(langCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode });\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  return (\n    <div className=\"settings-content settings-item settings-language custom-scroll\">\n      {options ? (\n        <RadioGroup\n          name=\"keyboard-send-settings\"\n          options={options}\n          selected={selectedLanguage}\n          loadingOption={isLoading ? selectedLanguage : undefined}\n          onChange={handleChange}\n        />\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      languages: global.settings.byKey.languages,\n      language: global.settings.byKey.language,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadLanguages', 'setSettingOption',\n  ]),\n)(SettingsLanguage));\n","import { ApiPrivacyKey, SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n  }\n\n  return undefined;\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport { pick } from '../../../util/iteratees';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport { getPrivacyKey } from './helper/privacy';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = Partial<ApiPrivacySettings> & {\n  chatsById?: Record<number, ApiChat>;\n  usersById?: Record<number, ApiUser>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setPrivacyVisibility'>;\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps & DispatchProps> = ({\n  screen,\n  onScreenSelect,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n  setPrivacyVisibility,\n}) => {\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            onClick={() => { onScreenSelect(allowedContactsScreen); }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            onClick={() => { onScreenSelect(deniedContactsScreen); }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {};\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setPrivacyVisibility']),\n)(SettingsPrivacyVisibility));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiSession } from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype StateProps = {\n  activeSessions: ApiSession[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadAuthorizations' | 'terminateAuthorization' | 'terminateAllAuthorizations'\n)>;\n\nconst SettingsPrivacyActiveSessions: FC<StateProps & DispatchProps> = ({\n  activeSessions,\n  loadAuthorizations,\n  terminateAuthorization,\n  terminateAllAuthorizations,\n}) => {\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  useEffect(() => {\n    loadAuthorizations();\n  }, [loadAuthorizations]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const currentSession = useMemo(() => {\n    return activeSessions.find((session) => session.isCurrent);\n  }, [activeSessions]);\n\n  const otherSessions = useMemo(() => {\n    return activeSessions.filter((session) => !session.isCurrent);\n  }, [activeSessions]);\n\n  const lang = useLang();\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive>\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.appName}</span>\n            <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        <ListItem\n          className=\"destructive mb-0\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('TerminateAllSessions')}\n        </ListItem>\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessions: ApiSession[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>Other Sessions</h4>\n\n        {sessions.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(session: ApiSession) {\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.appName}</span>\n          <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n          <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {currentSession && renderCurrentSession(currentSession)}\n\n      {otherSessions && renderOtherSessions(otherSessions)}\n\n      {otherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text=\"Are you sure you want to terminate all other sessions?\"\n          confirmLabel=\"Terminate All Other Sessions\"\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n        />\n      )};\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nfunction getDeviceEnvironment(session: ApiSession) {\n  return `${session.deviceModel}${session.deviceModel ? ', ' : ''} ${session.platform} ${session.systemVersion}`;\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      activeSessions: global.activeSessions,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadAuthorizations', 'terminateAuthorization', 'terminateAllAuthorizations',\n  ]),\n)(SettingsPrivacyActiveSessions));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { pick } from '../../../util/iteratees';\nimport {\n  getChatTitle, getUserFullName, isChatPrivate,\n} from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\n\ntype StateProps = {\n  chatsByIds: Record<number, ApiChat>;\n  usersByIds: Record<number, ApiUser>;\n  blockedIds: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'unblockContact'>;\n\nconst SettingsPrivacyBlockedUsers: FC<StateProps & DispatchProps> = ({\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  unblockContact,\n}) => {\n  const handleUnblockClick = useCallback((contactId: number) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  const lang = useLang();\n\n  function renderContact(contactId: number, i: number, viewportOffset: number) {\n    const isPrivate = isChatPrivate(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item',\n      isPrivate ? 'private' : 'group',\n    );\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\" dir=\"auto\">\n          <h3 dir=\"auto\">{renderText((isPrivate ? getUserFullName(user) : getChatTitle(lang, chat!)) || '')}</h3>\n          {user && user.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(user.phoneNumber)}</div>\n          )}\n          {user && !user.phoneNumber && user.username && (\n            <div className=\"contact-username\" dir=\"auto\">@{user.username}</div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds && blockedIds.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">\n              List is empty\n            </div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={() => {\n        }}\n        className=\"not-implemented\"\n        ariaLabel=\"Add a blocked user\"\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['unblockContact']),\n)(SettingsPrivacyBlockedUsers));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps & StateProps> = ({ animatedEmoji, onScreenSelect }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <ListItem\n          icon=\"edit\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaEnabled));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../../lib/teact/teact';\n\nimport useLang from '../../../../hooks/useLang';\n\nimport PasswordMonkey from '../../../common/PasswordMonkey';\nimport PasswordForm from '../../../common/PasswordForm';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsTwoFaPassword: FC<OwnProps> = ({\n  error,\n  isLoading,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaPassword);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps & StateProps> = ({ animatedEmoji, onStart }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaStart));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_MOBILE_SCREEN, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_MOBILE_SCREEN ? 550 : 400;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = () => {\n    onSubmit();\n  };\n\n  const handleSkipConfirm = () => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  };\n\n  const lang = useLang();\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps & StateProps> = ({ animatedEmoji, onScreenSelect }) => {\n  const lang = useLang();\n\n  const handleClick = () => {\n    onScreenSelect(SettingsScreens.Privacy);\n  };\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🥳'),\n  };\n})(SettingsTwoFaCongratulations));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_MOBILE_SCREEN, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_MOBILE_SCREEN ? 550 : 400;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const lang = useLang();\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  };\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { pick } from '../../../../util/iteratees';\nimport { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from './SettingsTwoFaPassword';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\ntype DispatchProps = Pick<GlobalActions, (\n  'updatePassword' | 'updateRecoveryEmail' | 'clearPassword' | 'provideTwoFaEmailCode' |\n  'checkPassword' | 'clearTwoFaError'\n)>;\n\nconst SettingsTwoFa: FC<OwnProps & StateProps & DispatchProps> = ({\n  currentScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  onScreenSelect,\n  updatePassword,\n  checkPassword,\n  clearTwoFaError,\n  updateRecoveryEmail,\n  provideTwoFaEmailCode,\n  clearPassword,\n}) => {\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('EnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'updatePassword', 'updateRecoveryEmail', 'clearPassword', 'provideTwoFaEmailCode',\n    'checkPassword', 'clearTwoFaError',\n  ]),\n)(SettingsTwoFa));\n","import React, {\n  FC, useCallback, useRef, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport { isChatPrivate } from '../../modules/helpers';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport GroupChatInfo from './GroupChatInfo';\nimport PickerSelectedItem from './PickerSelectedItem';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Loading from '../ui/Loading';\n\nimport './Picker.scss';\n\ntype OwnProps = {\n  itemIds: number[];\n  selectedIds: number[];\n  filterValue?: string;\n  filterPlaceholder?: string;\n  notFoundText?: string;\n  searchInputId?: string;\n  isLoading?: boolean;\n  onSelectedIdsChange: (ids: number[]) => void;\n  onFilterChange: (value: string) => void;\n  onLoadMore?: () => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\nconst Picker: FC<OwnProps> = ({\n  itemIds,\n  selectedIds,\n  filterValue,\n  filterPlaceholder,\n  notFoundText,\n  searchInputId,\n  isLoading,\n  onSelectedIdsChange,\n  onFilterChange,\n  onLoadMore,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const shouldMinimize = selectedIds.length > MAX_FULL_ITEMS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: number) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n    onFilterChange('');\n  }, [selectedIds, onSelectedIdsChange, onFilterChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(onLoadMore, itemIds, Boolean(filterValue));\n\n  const lang = useLang();\n\n  return (\n    <div className=\"Picker\">\n      <div className=\"picker-header custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        <InputText\n          id={searchInputId}\n          ref={inputRef}\n          value={filterValue}\n          onChange={handleFilterChange}\n          placeholder={filterPlaceholder || lang('SelectChat')}\n        />\n      </div>\n\n      {viewportIds && viewportIds.length ? (\n        <InfiniteScroll\n          className=\"picker-list custom-scroll\"\n          items={viewportIds}\n          onLoadMore={getMore}\n        >\n          {viewportIds.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={() => handleItemClick(id)}\n              ripple\n            >\n              <Checkbox label=\"\" checked={selectedIds.includes(id)} />\n              {isChatPrivate(id) ? (\n                <PrivateChatInfo userId={id} />\n              ) : (\n                <GroupChatInfo chatId={id} />\n              )}\n            </ListItem>\n          ))}\n        </InfiniteScroll>\n      ) : !isLoading && viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\">{notFoundText || 'Sorry, nothing found.'}</p>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(Picker);\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport { pick } from '../../../util/iteratees';\nimport searchWords from '../../../util/searchWords';\nimport { getPrivacyKey } from './helper/privacy';\nimport {\n  getChatTitle, isChatGroup, isChatPrivate, prepareChatList,\n} from '../../../modules/helpers';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  chatsById: Record<number, ApiChat>;\n  listIds?: number[];\n  orderedPinnedIds?: number[];\n  archivedListIds?: number[];\n  archivedPinnedIds?: number[];\n  settings?: ApiPrivacySettings;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setPrivacySettings'>;\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps & DispatchProps> = ({\n  currentUserId,\n  isAllowList,\n  screen,\n  settings,\n  chatsById,\n  listIds,\n  orderedPinnedIds,\n  archivedListIds,\n  archivedPinnedIds,\n  setPrivacySettings,\n  onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<number[]>(selectedContactIds);\n\n  const chats = useMemo(() => {\n    const activeChatArrays = listIds\n      ? prepareChatList(chatsById, listIds, orderedPinnedIds, 'all')\n      : undefined;\n    const archivedChatArrays = archivedListIds\n      ? prepareChatList(chatsById, archivedListIds, archivedPinnedIds, 'archived')\n      : undefined;\n\n    if (!activeChatArrays && !archivedChatArrays) {\n      return undefined;\n    }\n\n    return [\n      ...(activeChatArrays\n        ? [\n          ...activeChatArrays.pinnedChats,\n          ...activeChatArrays.otherChats,\n        ]\n        : []\n      ),\n      ...(archivedChatArrays ? archivedChatArrays.otherChats : []),\n    ];\n  }, [chatsById, listIds, orderedPinnedIds, archivedListIds, archivedPinnedIds]);\n\n  const displayedIds = useMemo(() => {\n    if (!chats) {\n      return undefined;\n    }\n\n    return chats\n      .filter((chat) => (\n        ((isChatPrivate(chat.id) && chat.id !== currentUserId) || isChatGroup(chat))\n        && (\n          !searchQuery\n        || searchWords(getChatTitle(lang, chat), searchQuery)\n        || selectedContactIds.includes(chat.id)\n        )\n      ))\n      .map(({ id }) => id);\n  }, [chats, currentUserId, lang, searchQuery, selectedContactIds]);\n\n  const handleSelectedContactIdsChange = useCallback((value: number[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen),\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysShareWithPlaceholder') : lang('NeverShareWithPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysShareWithTitle') : lang('NeverShareWithTitle')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      currentUserId,\n      chatsById,\n      listIds: listIds.active,\n      orderedPinnedIds: orderedPinnedIds.active,\n      archivedPinnedIds: orderedPinnedIds.archived,\n      archivedListIds: listIds.archived,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setPrivacySettings']),\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_MOBILE_SCREEN } from '../../../util/environment';\nimport useFoldersReducer from '../../../hooks/reducers/useFoldersReducer';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsPrivacyActiveSessions from './SettingsPrivacyActiveSessions';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: () => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  currentScreen,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent() {\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.PrivacyActiveSessions:\n        return (\n          <SettingsPrivacyActiveSessions />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility screen={currentScreen} onScreenSelect={onScreenSelect} />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersExcludedChats:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            onScreenSelect={onScreenSelect}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection() {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent()}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : IS_MOBILE_SCREEN ? 'slide-layers' : 'push-slide'}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import React, {\n  FC, useEffect, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser } from '../../../api/types';\n\nimport { IS_MOBILE_SCREEN } from '../../../util/environment';\nimport { throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { pick } from '../../../util/iteratees';\nimport { getUserFullName, sortUserIds } from '../../../modules/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  filter: string;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  contactIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'openChat'>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ContactList: FC<OwnProps & StateProps & DispatchProps> = ({\n  filter, usersById, contactIds, loadContactList, openChat,\n}) => {\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  const handleClick = useCallback(\n    (id: number) => {\n      openChat({ id });\n    },\n    [openChat],\n  );\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const resultIds = filter ? contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, filter);\n    }) : contactIds;\n\n    return sortUserIds(resultIds, usersById);\n  }, [filter, usersById, contactIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds && viewportIds.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            onClick={() => handleClick(id)}\n            ripple={!IS_MOBILE_SCREEN}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n\n    return {\n      usersById,\n      contactIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'openChat']),\n)(ContactList));\n","import React, {\n  FC, useCallback, useEffect, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport { pick, unique } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { getUserFullName, sortChatIds } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  selectedMemberIds: number[];\n  onSelectedMemberIdsChange: (ids: number[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  usersById: Record<number, ApiUser>;\n  chatsById: Record<number, ApiChat>;\n  localContactIds?: number[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: number[];\n  globalUserIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'setGlobalSearchQuery'>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst NewChatStep1: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  currentUserId,\n  usersById,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  loadContactList,\n  setGlobalSearchQuery,\n}) => {\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = localContactIds\n      ? sortChatIds(localContactIds.filter((id) => id !== currentUserId), chatsById)\n      : [];\n\n    if (!searchQuery) {\n      return contactIds;\n    }\n\n    const foundContactIds = contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, searchQuery);\n    });\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [\n    localContactIds, searchQuery, localUserIds, globalUserIds, usersById, chatsById, selectedMemberIds, currentUserId,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n    const { currentUserId } = global;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = global.globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      currentUserId,\n      usersById,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus && fetchingStatus.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'setGlobalSearchQuery']),\n)(NewChatStep1));\n","import React, {\n  FC, useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ChatCreationProgress } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  memberIds: number[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'createGroupChat' | 'createChannel'>;\n\n// TODO @implement\nconst MAX_USERS_FOR_LEGACY_CHAT = 199; // Accounting for current user\n\nconst NewChatStep2: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  memberIds,\n  onReset,\n  creationProgress,\n  creationError,\n  createGroupChat,\n  createChannel,\n}) => {\n  const lang = useLang();\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (memberIds.length > MAX_USERS_FOR_LEGACY_CHAT) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, createGroupChat, photo, chatTitleEmptyError, chatTooManyUsersError]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = creationError || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = global.chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'createGroupChat', 'createChannel',\n  ]),\n)(NewChatStep2));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { IS_MOBILE_SCREEN } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<number[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={IS_MOBILE_SCREEN ? 'slide-layers' : 'push-slide'}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {() => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({ isActive, onReset }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('ArchivedChats')}</h3>\n      </div>\n      <ChatList folderType=\"archived\" noChatsText=\"Archive is empty.\" isActive={isActive} />\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","const IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nconst preventDefault = (e: Event) => {\n  e.preventDefault();\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key]) {\n    preventDefault(e);\n  }\n}\n\nexport function disableScrolling() {\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  window.ontouchmove = preventDefault; // mobile\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  // eslint-disable-next-line no-null/no-null\n  window.ontouchmove = null;\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import { ApiMediaFormat, ApiMessage } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport { getMessageMediaHash, getMessagePhoto, getMessageText } from '../../../../modules/helpers';\nimport { CLIPBOARD_ITEM_SUPPORTED, copyImageToClipboard, copyTextToClipboard } from '../../../../util/clipboard';\n\ntype ICopyOptions = {\n  label: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage, afterEffect?: () => void, onCopyLink?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message);\n  const mediaHash = getMessageMediaHash(message, 'inline')!;\n  const canImageBeCopied = photo && mediaHash && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      handler: () => {\n        mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl).then(copyImageToClipboard);\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection\n      && selection.anchorNode\n      && selection.anchorNode.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection, canImageBeCopied),\n      handler: () => {\n        const clipboardText = hasSelection && selection ? selection.toString() : text;\n        copyTextToClipboard(clipboardText);\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      handler: () => {\n        onCopyLink();\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean, canImageBeCopied: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n\n  if (canImageBeCopied) {\n    return 'lng_context_copy_text';\n  }\n\n  return 'Copy';\n}\n","import React, { FC, useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport { dispatchHeavyAnimationEvent } from '../../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  onReply: () => void;\n  onEdit: () => void;\n  onPin: () => void;\n  onUnpin: () => void;\n  onForward: () => void;\n  onDelete: () => void;\n  onFaveSticker: () => void;\n  onUnfaveSticker: () => void;\n  onSelect: () => void;\n  onSend: () => void;\n  onReschedule: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n};\n\nconst ANIMATION_DURATION = 200;\nconst SCROLLBAR_WIDTH = 10;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  isOpen,\n  message,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canEdit,\n  canPin,\n  canUnpin,\n  canDelete,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  onReply,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n}) => {\n  useEffect(() => {\n    dispatchHeavyAnimationEvent(ANIMATION_DURATION);\n  }, [isOpen]);\n\n  const copyOptions = getMessageCopyOptions(message, onClose, canCopyLink ? onCopyLink : undefined);\n\n  const getTriggerElement = useCallback(() => {\n    return document.querySelector(`.active > .MessageList div[data-message-id=\"${message.id}\"]`);\n  }, [message.id]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const { positionX, positionY, style } = useContextMenuPosition(\n    anchor,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    SCROLLBAR_WIDTH,\n    (document.querySelector('.MiddleHeader') as HTMLElement).offsetHeight,\n  );\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      className=\"MessageContextMenu fluid\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n      {canReschedule && (\n        <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n      )}\n      {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n      {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n      {canFaveSticker && (\n        <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n      )}\n      {canUnfaveSticker && (\n        <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n      )}\n      {canCopy && copyOptions.map((options) => (\n        <MenuItem key={options.label} icon=\"copy\" onClick={options.handler}>{lang(options.label)}</MenuItem>\n      ))}\n      {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n      {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n      {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n      {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n      {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n    </Menu>\n  );\n};\n\nexport default MessageContextMenu;\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum, IAnchorPosition } from '../../../types';\nimport { selectAllowedMessageActions, selectCurrentMessageList } from '../../../modules/selectors';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { pick } from '../../../util/iteratees';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport CalendarModal from '../../common/CalendarModal';\nimport { getDayStartAt } from '../../../util/dateFormat';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setReplyingToId' | 'setEditingId' | 'pinMessage' | 'openForwardMenu' |\n  'faveSticker' | 'unfaveSticker' | 'toggleMessageSelection' | 'sendScheduledMessages' | 'rescheduleMessage' |\n  'loadMessageLink'\n)>;\n\nconst ContextMenuContainer: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  messageListType,\n  message,\n  album,\n  anchor,\n  onClose,\n  onCloseAnimationEnd,\n  noOptions,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canPin,\n  canUnpin,\n  canDelete,\n  canEdit,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  setReplyingToId,\n  setEditingId,\n  pinMessage,\n  openForwardMenu,\n  faveSticker,\n  unfaveSticker,\n  toggleMessageSelection,\n  sendScheduledMessages,\n  rescheduleMessage,\n  loadMessageLink,\n}) => {\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    onClose();\n  }, [closeCalendar, onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album && album.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    openCalendar();\n  }, [openCalendar]);\n\n  const handleRescheduleMessage = useCallback((date: Date) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt: Math.round(date.getTime() / 1000),\n    });\n  }, [message.chatId, message.id, rescheduleMessage]);\n\n  const handleCopyLink = useCallback(() => {\n    loadMessageLink({\n      messageId: message.id,\n      chatId: message.chatId,\n    });\n    closeMenu();\n  }, [closeMenu, loadMessageLink, message.chatId, message.id]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={['ContextMenuContainer', transitionClassNames].join(' ')}>\n      <MessageContextMenu\n        message={message}\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canPin={canPin}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={message.date * 1000}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        onClose={handleCloseCalendar}\n        onSubmit={handleRescheduleMessage}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n\n    return {\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canEdit: !isPinned && canEdit,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy,\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setReplyingToId',\n    'setEditingId',\n    'pinMessage',\n    'openForwardMenu',\n    'faveSticker',\n    'unfaveSticker',\n    'toggleMessageSelection',\n    'sendScheduledMessages',\n    'rescheduleMessage',\n    'loadMessageLink',\n  ]),\n)(ContextMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiSticker, ApiStickerSet } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport { STICKER_SIZE_MODAL } from '../../config';\nimport { pick } from '../../util/iteratees';\nimport { selectStickerSet } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker: ApiSticker;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  stickerSet?: ApiStickerSet;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadStickers' | 'toggleStickerSet' | 'sendMessage'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSet,\n  onClose,\n  loadStickers,\n  toggleStickerSet,\n  sendMessage,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen) {\n      const { stickerSetId, stickerSetAccessHash } = fromSticker;\n      loadStickers({ stickerSetId, stickerSetAccessHash });\n    }\n  }, [isOpen, fromSticker, loadStickers]);\n\n  const handleSelect = useCallback((sticker: ApiSticker) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    sendMessage({ sticker });\n    onClose();\n  }, [onClose, sendMessage]);\n\n  const handleButtonClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId: fromSticker.stickerSetId });\n    onClose();\n  }, [fromSticker.stickerSetId, onClose, toggleStickerSet]);\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={stickerSet ? stickerSet.title : lang('AccDescrStickerSet')}\n    >\n      {stickerSet && stickerSet.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            {stickerSet.stickers.map((sticker) => (\n              <StickerButton\n                sticker={sticker}\n                size={STICKER_SIZE_MODAL}\n                observeIntersection={observeIntersection}\n                onClick={handleSelect}\n                clickArg={sticker}\n              />\n            ))}\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={stickerSet.installedDate ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {lang(\n                stickerSet.installedDate ? 'StickerPack.RemoveStickerCount' : 'StickerPack.AddStickerCount',\n                stickerSet.count,\n                'i',\n              )}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal(\n  (global, { fromSticker }: OwnProps) => {\n    return { stickerSet: selectStickerSet(global, fromSticker.stickerSetId) };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadStickers',\n    'toggleStickerSet',\n    'sendMessage',\n  ]),\n)(StickerSetModal));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport { selectChat } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { isChatPrivate, getCanDeleteChat } from '../../modules/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport DeleteChatModal from '../common/DeleteChatModal';\n\nimport './HeaderMenuContainer.scss';\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatMutedState' | 'enterMessageSelectMode'>;\n\nexport type OwnProps = {\n  chatId: number;\n  threadId: number;\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canMute?: boolean;\n  canSelect?: boolean;\n  canLeave?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  canDeleteChat?: boolean;\n};\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  isOpen,\n  anchor,\n  isChannel,\n  canSubscribe,\n  canSearch,\n  canMute,\n  canSelect,\n  canLeave,\n  chat,\n  isPrivate,\n  isMuted,\n  canDeleteChat,\n  onSubscribeChannel,\n  onSearchClick,\n  onClose,\n  onCloseAnimationEnd,\n  updateChatMutedState,\n  enterMessageSelectMode,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {IS_MOBILE_SCREEN && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'Subscribe' : 'Join Group')}\n            </MenuItem>\n          )}\n          {IS_MOBILE_SCREEN && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {canSelect && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {lang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={handleDelete}\n            >\n              {lang(isPrivate\n                ? 'Delete'\n                : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n            </MenuItem>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n\n    return {\n      chat,\n      isMuted: chat.isMuted,\n      isPrivate: isChatPrivate(chat.id),\n      canDeleteChat: getCanDeleteChat(chat),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'updateChatMutedState',\n    'enterMessageSelectMode',\n  ]),\n)(HeaderMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChat } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport { debounce } from '../../util/schedulers';\nimport { selectCurrentTextSearch, selectCurrentChat } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\nimport CalendarModal from '../common/CalendarModal';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalTextSearchQuery' | 'searchTextMessagesLocal' | 'closeLocalTextSearch' | 'searchMessagesByDate' |\n  'focusMessage'\n)>;\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps & DispatchProps> = ({\n  isActive,\n  chat,\n  query,\n  totalCount,\n  foundIds,\n  setLocalTextSearchQuery,\n  searchTextMessagesLocal,\n  focusMessage,\n  closeLocalTextSearch,\n  searchMessagesByDate,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat && foundIds && foundIds.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1] });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat, focusMessage, foundIds]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeCalendar();\n  }, [closeCalendar, searchMessagesByDate]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1 - newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1 - newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const lang = useLang();\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={() => closeLocalTextSearch({ noPushState: true })}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds && foundIds.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={openCalendar}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        isPastMode\n        submitButtonLabel={lang('JumpToDate')}\n        onClose={closeCalendar}\n        onSubmit={handleJumpToDate}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      foundIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalTextSearchQuery',\n    'searchTextMessagesLocal',\n    'focusMessage',\n    'closeLocalTextSearch',\n    'searchMessagesByDate',\n  ]),\n)(MobileSearchFooter));\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement>,\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import React, {\n  FC, useCallback, useEffect, useState, useRef, memo,\n} from '../../../lib/teact/teact';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport { ApiChatMember, ApiUser } from '../../../api/types';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport captureKeyboardListeners from '../../../util/captureKeyboardListeners';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport cycleRestrict from '../../../util/cycleRestrict';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.chat-item-clickable',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  filter: string;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredChatMembers?: ApiChatMember[];\n  usersById?: Record<number, ApiUser>;\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  filter,\n  onClose,\n  onInsertUserName,\n  usersById,\n  filteredChatMembers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!filteredChatMembers) {\n      return -1;\n    }\n    const membersCount = filteredChatMembers!.length;\n    return cycleRestrict(membersCount, newIndex);\n  }, [filteredChatMembers]);\n\n  const [selectedMentionIndex, setSelectedMentionIndex] = useState(-1);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedMentionIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedMentionIndex, getSelectedIndex]);\n\n  const handleUserSelect = useCallback((userId: number, forceFocus = false) => {\n    const user = usersById && usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [usersById, onInsertUserName]);\n\n  const handleSelectMention = useCallback((e: KeyboardEvent) => {\n    if (filteredChatMembers && filteredChatMembers.length && selectedMentionIndex > -1) {\n      const member = filteredChatMembers[selectedMentionIndex];\n      if (member) {\n        e.preventDefault();\n        handleUserSelect(member.userId, true);\n      }\n    }\n  }, [filteredChatMembers, selectedMentionIndex, handleUserSelect]);\n\n  useEffect(() => (isOpen ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: (e: KeyboardEvent) => handleArrowKey(1, e),\n    onEnter: handleSelectMention,\n    onTab: handleSelectMention,\n  }) : undefined), [isOpen, onClose, handleArrowKey, handleSelectMention]);\n\n  useEffect(() => {\n    if (filteredChatMembers && !filteredChatMembers.length) {\n      onClose();\n    }\n  }, [filteredChatMembers, onClose]);\n\n  useEffect(() => {\n    setSelectedMentionIndex(0);\n  }, [filter]);\n\n  useEffect(() => {\n    setItemVisible(selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  const prevChatMembers = usePrevious(\n    filteredChatMembers && filteredChatMembers.length\n      ? filteredChatMembers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredChatMembers && !filteredChatMembers.length\n    ? prevChatMembers\n    : filteredChatMembers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers && renderedChatMembers.map(({ userId }, index) => (\n        <ListItem\n          key={userId}\n          className=\"chat-item-clickable scroll-item\"\n          onClick={() => handleUserSelect(userId)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={userId}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAttachment, ApiChatMember, ApiUser } from '../../../api/types';\nimport { LangCode } from '../../../types';\n\nimport { CONTENT_TYPES_FOR_QUICK_UPLOAD, EDITABLE_INPUT_MODAL_ID } from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport File from '../../common/File';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\n\nimport './AttachmentModal.scss';\n\nexport type OwnProps = {\n  attachments: ApiAttachment[];\n  caption: string;\n  canSuggestMembers?: boolean;\n  canSuggestEmoji?: boolean;\n  currentUserId?: number;\n  groupChatMembers?: ApiChatMember[];\n  usersById?: Record<number, ApiUser>;\n  recentEmojis: string[];\n  language: LangCode;\n  addRecentEmoji: AnyToVoidFunction;\n  loadEmojiKeywords: AnyToVoidFunction;\n  onCaptionUpdate: (html: string) => void;\n  onSend: () => void;\n  onFileAppend: (files: File[], isQuick: boolean) => void;\n  onClear: () => void;\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\n\nconst AttachmentModal: FC<OwnProps> = ({\n  attachments,\n  caption,\n  canSuggestMembers,\n  groupChatMembers,\n  currentUserId,\n  usersById,\n  recentEmojis,\n  language,\n  onCaptionUpdate,\n  addRecentEmoji,\n  loadEmojiKeywords,\n  onSend,\n  onFileAppend,\n  onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const hideTimeoutRef = useRef<number>(null);\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const isOpen = Boolean(attachments.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n  const isQuick = renderingAttachments && renderingAttachments.every((a) => a.quick);\n  const lang = useLang();\n\n  const {\n    isMentionTooltipOpen, mentionFilter,\n    closeMentionTooltip, insertMention,\n    mentionFilteredMembers,\n  } = useMentionTooltip(\n    canSuggestMembers && isOpen,\n    caption,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    groupChatMembers,\n    currentUserId,\n    usersById,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    isOpen,\n    caption,\n    recentEmojis,\n    EDITABLE_INPUT_MODAL_ID,\n    onCaptionUpdate,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  const sendAttachments = useCallback(() => {\n    if (isOpen) {\n      onSend();\n    }\n  }, [isOpen, onSend]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches('.drop-target') && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest('.AttachmentModal.hovered')) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer: { files } } = e;\n\n    if (files && files.length) {\n      const newFiles = isQuick\n        ? Array.from(files).filter((file) => {\n          return file.type && CONTENT_TYPES_FOR_QUICK_UPLOAD.includes(file.type);\n        })\n        : Array.from(files);\n\n      onFileAppend(newFiles, false);\n    }\n  }, [isQuick, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n    }\n  }\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const areAllPhotos = renderingAttachments.every((a) => a.mimeType.startsWith('image/'));\n  const areAllVideos = renderingAttachments.every((a) => a.mimeType.startsWith('video/'));\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={sendAttachments}\n        >\n          {lang('Send')}\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={`AttachmentModal ${isHovered ? 'hovered' : ''}`}\n    >\n      <div\n        className=\"drop-target\"\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n      >\n        {isQuick ? (\n          <div className=\"media-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              attachment.mimeType.startsWith('image/')\n                ? <img src={attachment.blobUrl} alt=\"\" />\n                : <video src={attachment.blobUrl} autoPlay muted loop />\n            ))}\n          </div>\n        ) : (\n          <div className=\"document-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              <File\n                name={attachment.filename}\n                extension={getFileExtension(attachment.filename, attachment.mimeType)}\n                previewData={attachment.previewBlobUrl}\n                size={attachment.size}\n                smaller\n              />\n            ))}\n          </div>\n        )}\n\n        <div className=\"attachment-caption-wrapper\">\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            onClose={closeMentionTooltip}\n            filter={mentionFilter}\n            onInsertUserName={insertMention}\n            filteredChatMembers={mentionFilteredMembers}\n            usersById={usersById}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            language={language}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n            loadEmojiKeywords={loadEmojiKeywords}\n          />\n          <MessageInput\n            id=\"caption-input-text\"\n            html={caption}\n            editableInputId={EDITABLE_INPUT_MODAL_ID}\n            placeholder={lang('Caption')}\n            onUpdate={onCaptionUpdate}\n            onSend={onSend}\n            shouldSetFocus={isOpen}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AttachmentModal);\n","import { ChangeEvent, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({ isOpen, onSend, onClear }) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(false);\n  const [solution, setSolution] = useState<string>();\n  const [correctOption, setCorrectOption] = useState<string>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(false);\n      setSolution('');\n      setCorrectOption('');\n      setHasErrors(false);\n    }\n  }, [isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(String(index) === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [correctOption],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(newValue);\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)]) && (\n      <p className=\"error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={(e) => setQuestion(e.currentTarget.value)}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">Options</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        <Checkbox\n          label={lang('PollAnonymous')}\n          checked={isAnonymous}\n          onChange={handleIsAnonymousChange}\n        />\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">Solution</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\n\nconst MENU_CLOSE_TIMEOUT = 250;\nlet closeTimeout: number | undefined;\n\nexport default function useMouseInside(\n  isOpen: boolean, onClose: NoneToVoidFunction, menuCloseTimeout = MENU_CLOSE_TIMEOUT,\n) {\n  const isMouseInside = useRef(false);\n\n  useEffect(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    if (isOpen && !IS_TOUCH_ENV) {\n      closeTimeout = window.setTimeout(() => {\n        if (!isMouseInside.current) {\n          onClose();\n        }\n      }, menuCloseTimeout * 2);\n    }\n  }, [isOpen, menuCloseTimeout, onClose]);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n  }, []);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        onClose();\n      }\n    }, menuCloseTimeout);\n  }, [menuCloseTimeout, onClose]);\n\n  return [handleMouseEnter, handleMouseLeave];\n}\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({ emoji, focus, onClick }) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  return (\n    <div\n      className={`EmojiButton ${focus ? 'focus' : ''}`}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED\n        ? <span className=\"font-emoji\">{emoji.native}</span>\n        : <img src={`./img-apple-64/${emoji.image}.png`} alt=\"\" loading=\"lazy\" />}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { IS_MOBILE_SCREEN } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 9;\nconst EMOJI_MARGIN = 4;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const { transitionClassNames } = useShowTransition(shouldRender, undefined, undefined, 'slow');\n\n  const lang = useLang();\n\n  const emojisPerRow = IS_MOBILE_SCREEN\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\" dir=\"auto\">\n        {lang(category.id === 'recent' ? 'RecentStickers' : `Emoji${index}`)}\n      </p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        // @ts-ignore\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { MENU_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_MOBILE_SCREEN } from '../../../util/environment';\nimport {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n  uncompressEmoji,\n} from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className, onEmojiSelect, recentEmojis,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  useHorizontalScroll(headerRef, !IS_MOBILE_SCREEN);\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis && recentEmojis.length) {\n      themeCategories.unshift({\n        id: 'recent',\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = document.getElementById(`emoji-category-${index}`)!;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!emojis || !canRenderContents) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div ref={containerRef} className=\"EmojiPicker-main no-selection no-scrollbar\">\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json') as unknown as Promise<EmojiModule>;\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_MOBILE_SCREEN } from '../../../util/environment';\nimport windowSize from '../../../util/windowSize';\nimport StickerButton from '../../common/StickerButton';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n  onStickerUnfave: (sticker: ApiSticker) => void;\n};\n\nconst STICKERS_PER_ROW_ON_DESKTOP = 5;\nconst STICKER_MARGIN = IS_MOBILE_SCREEN ? 8 : 16;\nconst MOBILE_CONTAINER_PADDING = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  observeIntersection,\n  shouldRender,\n  onStickerSelect,\n  onStickerUnfave,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const { transitionClassNames } = useShowTransition(shouldRender, undefined, undefined, 'slow');\n\n  const stickersPerRow = IS_MOBILE_SCREEN\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (STICKER_SIZE_PICKER + STICKER_MARGIN))\n    : STICKERS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(stickerSet.count / stickersPerRow) * (STICKER_SIZE_PICKER + STICKER_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`sticker-set-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\">{stickerSet.title}</p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        // @ts-ignore\n        style={`height: ${height}px;`}\n      >\n        {shouldRender && stickerSet.stickers && stickerSet.stickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            noAnimate={!loadAndPlay}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n            onUnfaveClick={stickerSet.id === 'favorite' ? onStickerUnfave : undefined}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiStickerSet, ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION, STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport StickerSetCoverAnimated from './StickerSetCoverAnimated';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  shouldPlay?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadStickerSets' | 'loadRecentStickers' | 'loadFavoriteStickers' |\n  'addRecentSticker' | 'loadAddedStickers' | 'unfaveSticker'\n)>;\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  addedSetIds,\n  stickerSetsById,\n  shouldPlay,\n  onStickerSelect,\n  loadStickerSets,\n  loadRecentStickers,\n  loadFavoriteStickers,\n  loadAddedStickers,\n  addRecentSticker,\n  unfaveSticker,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return [\n      {\n        id: 'recent',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      },\n      {\n        id: 'favorite',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      },\n      ...addedSetIds.map((id) => stickerSetsById[id]).filter(Boolean),\n    ];\n  }, [addedSetIds, lang, recentStickers, favoriteStickers, stickerSetsById]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers && set.stickers.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadStickerSets();\n      loadRecentStickers();\n      loadFavoriteStickers();\n    }\n  }, [loadAndPlay, loadFavoriteStickers, loadRecentStickers, loadStickerSets]);\n\n  useEffect(() => {\n    if (addedSetIds && addedSetIds.length) {\n      loadAddedStickers();\n    }\n  }, [addedSetIds, loadAddedStickers]);\n\n  useHorizontalScroll(headerRef);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    onStickerSelect(sticker);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers && stickerSet.stickers[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    if (stickerSet.id === 'recent' || stickerSet.id === 'favorite' || stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === 'recent' || stickerSet.id === 'favorite'}\n          color=\"translucent\"\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === 'recent' ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === 'favorite' ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.isAnimated ? (\n            <StickerSetCoverAnimated\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          observeIntersection={observeIntersectionForCovers}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets || !canSendStickers) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">Sending stickers is not allowed in this chat.</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">You have no saved Stickers.</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        {allSets.map(renderCover)}\n      </div>\n      <div ref={containerRef} className=\"StickerPicker-main no-scrollbar\">\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(shouldPlay && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n    } = global.stickers;\n\n    return {\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      shouldPlay: global.settings.byKey.shouldLoopStickers,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadStickerSets',\n    'loadRecentStickers',\n    'loadFavoriteStickers',\n    'loadAddedStickers',\n    'addRecentSticker',\n    'unfaveSticker',\n  ]),\n)(StickerPicker));\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiVideo } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useTransitionForMedia from '../../hooks/useTransitionForMedia';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\n\nimport Spinner from '../ui/Spinner';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  onClick: (gif: ApiVideo) => void;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif, observeIntersection, isDisabled, onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const hasThumbnail = gif.thumbnail && !!gif.thumbnail.dataUri;\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail && gif.thumbnail.dataUri, Boolean(previewBlobUrl));\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { transitionClassNames } = useTransitionForMedia(hasThumbnail || previewBlobUrl || videoData, 'slow');\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n\n  useVideoCleanup(videoRef, [shouldRenderVideo]);\n\n  const handleClick = useCallback(\n    () => onClick({\n      ...gif,\n      blobUrl: videoData,\n    }),\n    [onClick, gif, videoData],\n  );\n\n  const className = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    transitionClassNames,\n    localMediaHash,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      onClick={handleClick}\n    >\n      {hasThumbnail && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n      )}\n      {!hasThumbnail && previewBlobUrl && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"thumbnail\"\n        />\n      )}\n      {(shouldRenderVideo || previewBlobUrl) && (\n        <video\n          ref={videoRef}\n          autoPlay\n          loop\n          muted\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        >\n          <source src={videoData} />\n        </video>\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || hasThumbnail ? 'white' : 'black'} />\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import React, {\n  FC, useEffect, memo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs: boolean;\n  onGifSelect: (gif: ApiVideo) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadSavedGifs'>;\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  onGifSelect,\n  loadSavedGifs,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div ref={containerRef} className={buildClassName('GifPicker no-scrollbar', className)}>\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={onGifSelect}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      savedGifs: global.gifs.saved.gifs,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadSavedGifs']),\n)(GifPicker));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'Stickers',\n  'GIFs',\n}\n\n// Getting enum string values for display in Tabs.\n// See: https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings\nexport const SYMBOL_MENU_TAB_TITLES = Object.values(SymbolMenuTabs)\n  .filter((value): value is string => typeof value === 'string');\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={SYMBOL_MENU_TAB_TITLES[tab]}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {renderTabButton(SymbolMenuTabs.Emoji)}\n      {renderTabButton(SymbolMenuTabs.Stickers)}\n      {renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {activeTab === SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiSticker, ApiVideo } from '../../../api/types';\n\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport { IS_MOBILE_SCREEN, IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onStickerSelect: (sticker: ApiSticker) => void;\n  onGifSelect: (gif: ApiVideo) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: AnyToVoidFunction;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps> = ({\n  isOpen, allowedAttachmentOptions,\n  onLoad, onClose,\n  onEmojiSelect, onStickerSelect, onGifSelect,\n  onRemoveSymbol, onSearchOpen, addRecentEmoji,\n}) => {\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  useLayoutEffect(() => {\n    if (!IS_MOBILE_SCREEN) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, activeTab, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => {\n      return [...emojis, name];\n    });\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const lang = useLang();\n\n  const { canSendStickers, canSendGifs } = allowedAttachmentOptions;\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={onStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={SYMBOL_MENU_TAB_TITLES.length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {IS_MOBILE_SCREEN && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n      />\n    </>\n  );\n\n  if (IS_MOBILE_SCREEN) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const className = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n    );\n\n    return (\n      <Portal>\n        <div className={className}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SymbolMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(SymbolMenu);\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { CONTENT_TYPES_FOR_QUICK_UPLOAD } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  onFileSelect: (files: File[], isQuick: boolean) => void;\n  onPollCreate: () => void;\n  onClose: () => void;\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  isOpen, allowedAttachmentOptions, onFileSelect, onPollCreate, onClose,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const handleFileSelect = useCallback((e: Event, isQuick: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      onFileSelect(Array.from(files), isQuick);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      CONTENT_TYPES_FOR_QUICK_UPLOAD,\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const lang = useLang();\n\n  const { canAttachMedia, canAttachPolls } = allowedAttachmentOptions;\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"AttachMenu fluid\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n      {!canAttachMedia && (\n        <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n      )}\n      {canAttachMedia && (\n        <>\n          <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n            {lang('AttachmentMenu.PhotoOrVideo')}\n          </MenuItem>\n          <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n        </>\n      )}\n      {canAttachPolls && (\n        <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(AttachMenu);\n","import React, {\n  FC, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'clearStickersForEmoji'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  onStickerSelect,\n  stickers,\n  clearStickersForEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(clearStickersForEmoji) : undefined), [isOpen, clearStickersForEmoji]);\n\n  const handleMouseEnter = () => {\n    document.body.classList.add('no-select');\n  };\n\n  const handleMouseLeave = () => {\n    document.body.classList.remove('no-select');\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers && displayedStickers.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n\n    return { stickers };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['clearStickersForEmoji']),\n)(StickerTooltip));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../modules/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('clickInlineButton')>;\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen, message, onClose, clickInlineButton,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"KeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'NOT_SUPPORTED'}\n                onClick={() => clickInlineButton({ button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'clickInlineButton',\n  ]),\n)(BotKeyboardMenu));\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onSilentSend?: NoneToVoidFunction;\n  onScheduleSend?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen, onSilentSend, onScheduleSend, onClose, onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      className=\"CustomSendMenu\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSilentSend && <MenuItem icon=\"mute\" onClick={onSilentSend}>{lang('SendWithoutSound')}</MenuItem>}\n      {onScheduleSend && <MenuItem icon=\"schedule\" onClick={onScheduleSend}>{lang('ScheduleMessage')}</MenuItem>}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport captureKeyboardListeners from '../../../util/captureKeyboardListeners';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\nimport { LangCode } from '../../../types';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  language: LangCode;\n  onEmojiSelect: (text: string) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: AnyToVoidFunction;\n  loadEmojiKeywords: AnyToVoidFunction;\n  emojis: Emoji[];\n};\n\nconst CLOSE_DURATION = 350;\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  language,\n  emojis,\n  onClose,\n  onEmojiSelect,\n  addRecentEmoji,\n  loadEmojiKeywords,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: Emoji[] = usePrevDuringAnimation(emojis.length ? emojis : undefined, CLOSE_DURATION) || [];\n\n  const [selectedIndex, setSelectedIndex] = useState(-1);\n\n  useEffect(() => {\n    loadEmojiKeywords({ language });\n  }, [loadEmojiKeywords, language]);\n\n  useEffect(() => {\n    setSelectedIndex(0);\n  }, [emojis]);\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!emojis.length) {\n      return -1;\n    }\n\n    const emojisCount = emojis.length;\n    return cycleRestrict(emojisCount, newIndex);\n  }, [emojis]);\n\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedIndex, getSelectedIndex]);\n\n  const handleSelectEmoji = useCallback((e: KeyboardEvent) => {\n    if (emojis.length && selectedIndex > -1) {\n      const emoji = emojis[selectedIndex];\n      if (emoji) {\n        e.preventDefault();\n        onEmojiSelect(emoji.native);\n        addRecentEmoji({ emoji: emoji.id });\n      }\n    }\n  }, [addRecentEmoji, emojis, onEmojiSelect, selectedIndex]);\n\n  useEffect(() => (isOpen ? captureKeyboardListeners({\n    onEsc: onClose,\n    onLeft: (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: (e: KeyboardEvent) => handleArrowKey(1, e),\n    onEnter: handleSelectEmoji,\n  }) : undefined), [handleArrowKey, handleSelectEmoji, isOpen, onClose]);\n\n  const handleMouseEnter = () => {\n    document.body.classList.add('no-select');\n  };\n\n  const handleMouseLeave = () => {\n    document.body.classList.remove('no-select');\n  };\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          <EmojiButton\n            key={emoji.id}\n            emoji={emoji}\n            focus={selectedIndex === index}\n            onClick={onEmojiSelect}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import React, {\n  FC, useMemo, memo, useRef,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiUser, ApiChat } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../modules/selectors';\nimport {\n  getMessageSummaryText,\n  getChatTitle,\n  getUserFullName,\n  isChatChannel,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport { orderBy, pick } from '../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: number;\n  threadId: number;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchTextMessagesLocal' | 'focusMessage'>;\n\ninterface Result {\n  message: ApiMessage;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  onClick: NoneToVoidFunction;\n}\n\nconst RightSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  searchTextMessagesLocal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n\n  const foundResults = useMemo(() => {\n    if (!query || !foundIds || !foundIds.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const results = foundIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean) as Result[];\n\n    return orderBy(results, ({ message }) => message.date, 'desc');\n  }, [chatId, threadId, focusMessage, foundIds, chat, messagesById, query]);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: Result) => {\n    const title = senderChat ? getChatTitle(lang, senderChat) : getUserFullName(senderUser);\n    const text = getMessageSummaryText(lang, message);\n\n    return (\n      <ListItem\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} />\n        <div className=\"info\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{title && renderText(title)}</h3>\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {renderText(text, ['emoji', 'highlight'], { highlight: query })}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    if (foundResults && foundResults[index]) {\n      foundResults[index].onClick();\n    }\n  }, '.ListItem-button', true);\n\n  return (\n    <InfiniteScroll\n      className=\"RightSearch custom-scroll\"\n      items={foundResults}\n      preloadBackwards={0}\n      onLoadMore={searchTextMessagesLocal}\n      noFastList\n      onKeyDown={handleKeyDown}\n      ref={containerRef}\n    >\n      <p className=\"helper-text\" dir=\"auto\">\n        {!query ? (\n          lang('lng_dlg_search_for_messages')\n        ) : (totalCount === 0 || !foundResults.length) ? (\n          lang('lng_search_no_results')\n        ) : totalCount === 1 ? (\n          '1 message found'\n        ) : (\n          `${(foundResults.length && (totalCount || foundResults.length))} messages found`\n        )}\n      </p>\n      {foundResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, ['searchTextMessagesLocal', 'focusMessage']),\n)(RightSearch));\n","import React, {\n  FC, useEffect, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiStickerSet } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { pick } from '../../util/iteratees';\nimport { selectShouldLoopStickers, selectStickerSet } from '../../modules/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport useOnChange from '../../hooks/useOnChange';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isSomeModalOpen: boolean;\n  onModalToggle: (isOpen: boolean) => void;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadStickers' | 'toggleStickerSet'>;\n\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps & DispatchProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  loadStickers, toggleStickerSet, isSomeModalOpen, onModalToggle,\n}) => {\n  const lang = useLang();\n  const isAdded = set && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set && set.stickers);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useOnChange(() => {\n    onModalToggle(isModalOpen);\n  }, [isModalOpen, onModalToggle]);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...set.covers || [], ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY) {\n      loadStickers({ stickerSetId });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main\">\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen || isSomeModalOpen}\n            onClick={openModal}\n          />\n        ))}\n      </div>\n      {canRenderStickers && (\n        <StickerSetModal\n          isOpen={isModalOpen}\n          fromSticker={displayedStickers[0]}\n          onClose={closeModal}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadStickers', 'toggleStickerSet']),\n)(StickerSetResult));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadFeaturedStickers'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<StateProps & DispatchProps> = ({\n  query,\n  featuredIds,\n  resultIds,\n  loadFeaturedStickers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadFeaturedStickers']),\n)(StickerSearch));\n","import React, {\n  FC, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n} from '../../modules/selectors';\nimport { getAllowedAttachmentOptions } from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchMoreGifs' | 'sendMessage' | 'setGifSearchQuery'>;\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<StateProps & DispatchProps> = ({\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  searchMoreGifs,\n  sendMessage,\n  setGifSearchQuery,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const { canSendGifs } = getAllowedAttachmentOptions(chat, isChatWithBot);\n\n  const handleGifClick = useCallback((gif: ApiVideo) => {\n    if (canSendGifs) {\n      sendMessage({ gif });\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, sendMessage, setGifSearchQuery]);\n\n  const lang = useLang();\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={handleGifClick}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={searchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['searchMoreGifs', 'sendMessage', 'setGifSearchQuery']),\n)(GifSearch));\n","import React, {\n  FC, useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport { pick } from '../../util/iteratees';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: number[];\n  offset: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadPollOptionResults' | 'openChat' | 'closePollResults'>;\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n  loadPollOptionResults,\n  openChat,\n  closePollResults,\n}) => {\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = global.pollResults;\n\n    return {\n      voters: voters && voters[answer.option],\n      offset: (offsets && offsets[answer.option]) || '',\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, ['loadPollOptionResults', 'openChat', 'closePollResults']),\n)(PollAnswerResults));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage } from '../../modules/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<StateProps> = ({\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{summary.question}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {lastSyncTime && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n      lastSyncTime,\n    } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { selectChat, selectUser } from '../../../modules/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: number;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  chat: ApiChat;\n  progress?: ManagementProgress;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'updateContact' | 'deleteUser' | 'deleteHistory' | 'closeManagement' | 'openChat'\n)>;\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps & DispatchProps> = ({\n  userId,\n  user,\n  chat,\n  progress,\n  updateContact,\n  deleteUser,\n  deleteHistory,\n  closeManagement,\n  openChat,\n}) => {\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n  const currentIsMuted = chat ? chat.isMuted : undefined;\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!currentIsMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!currentIsMuted);\n  }, [currentIsMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteHistory({\n      chatId: chat.id,\n      shouldDeleteForAll: false,\n    });\n    deleteUser({ userId });\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.id, closeDeleteDialog, closeManagement, deleteHistory, deleteUser, openChat, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId)!;\n    const { progress } = global.management;\n\n    return {\n      user, chat, progress,\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, [\n    'updateContact', 'deleteUser', 'closeManagement', 'openChat', 'deleteHistory',\n  ]),\n)(ManageUser));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport { ApiChat, ApiChatBannedRights, ApiMediaFormat } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatBasicGroup } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat } from '../../../modules/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'togglePreHistoryHidden' | 'updateChat' | 'closeManagement' |\n  'deleteHistory' | 'leaveChannel' | 'deleteChannel' | 'openChat'\n)>;\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\n\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = 8;\n\nconst ManageGroup: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  onScreenSelect,\n  togglePreHistoryHidden,\n  updateChat,\n  deleteHistory,\n  leaveChannel,\n  deleteChannel,\n  closeManagement,\n  openChat,\n}) => {\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = [\n      'sendMessages',\n      'sendMedia',\n      'embedLinks',\n      'sendPolls',\n      'changeInfo',\n      'inviteUsers',\n      'pinMessages',\n    ].filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = (chat.fullInfo && chat.fullInfo.adminMembers && chat.fullInfo.adminMembers.length) || 0;\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteHistory({ chatId: chat.id, shouldDeleteForAll: false });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, deleteHistory, leaveChannel, deleteChannel, openChat,\n  ]);\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline ripple onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem icon=\"message\" multiline ripple onClick={handleClickDiscussion}>\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            ripple\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT}\n            </span>\n          </ListItem>\n          <ListItem icon=\"admin\" multiline ripple onClick={handleClickAdministrators}>\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline ripple onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount!)}</span>\n          </ListItem>\n\n          {chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\">\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const hasLinkedChannel = Boolean(chat.fullInfo && chat.fullInfo.linkedChatId);\n\n    return {\n      chat,\n      progress,\n      isBasicGroup: isChatBasicGroup(chat),\n      hasLinkedChannel,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: getHasAdminRight(chat, 'banUsers'),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'togglePreHistoryHidden', 'updateChat', 'closeManagement',\n    'deleteHistory', 'leaveChannel', 'deleteChannel', 'openChat',\n  ]),\n)(ManageGroup));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatDefaultBannedRights'>;\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\n\nfunction getLangKeyForBannedRightKey(key: string) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps & DispatchProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  updateChatDefaultBannedRights,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  useEffect(() => {\n    setPermissions((chat && chat.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [chat]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatBannedRights]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => !!bannedRights);\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, key) => {\n      if (\n        !bannedRights[key as keyof ApiChatBannedRights]\n        || (defaultBannedRights && defaultBannedRights[key as keyof ApiChatBannedRights])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        <div className=\"section\">\n          <ListItem icon=\"delete-user\" multiline ripple narrow onClick={handleRemovedUsersClick}>\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            ripple\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              ripple\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat, currentUserId: global.currentUserId };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatDefaultBannedRights']),\n)(ManageGroupPermissions));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { getUserFullName } from '../../../modules/helpers';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: number;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<number, ApiUser>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatMemberBannedRights'>;\n\nconst ManageGroupRemovedUsers: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  usersById,\n  updateChatMemberBannedRights,\n}) => {\n  const lang = useLang();\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang('NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n\n    return { chat, usersById };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatMemberBannedRights']),\n)(ManageGroupRemovedUsers));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport { ApiChat, ApiMediaFormat } from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { getChatAvatarHash, getHasAdminRight } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'toggleSignatures' | 'updateChat' | 'closeManagement' | 'leaveChannel' | 'deleteChannel' | 'openChat'\n)>;\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\n\nconst ManageChannel: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  onScreenSelect,\n  updateChat,\n  toggleSignatures,\n  closeManagement,\n  leaveChannel,\n  deleteChannel,\n  openChat,\n}) => {\n  const currentTitle = chat ? (chat.title || '') : '';\n  const currentAbout = chat && chat.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat && chat.fullInfo && chat.fullInfo.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = (chat && chat.fullInfo && chat.fullInfo.adminMembers && chat.fullInfo.adminMembers.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" ripple multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem icon=\"message\" multiline ripple onClick={handleClickDiscussion} disabled={!canChangeInfo}>\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          <ListItem icon=\"admin\" multiline ripple onClick={handleClickAdministrators}>\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline ripple onClick={handleClickSubscribers}>\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount!, 'i')}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const isSignaturesShown = Boolean(chat && chat.isSignaturesShown);\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'toggleSignatures', 'updateChat', 'closeManagement', 'leaveChannel', 'deleteChannel', 'openChat',\n  ]),\n)(ManageChannel));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { selectChat, selectManagement } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport { isChatChannel } from '../../../modules/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: number;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'checkPublicLink' | 'updatePublicLink' | 'updatePrivateLink'\n)>;\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkPublicLink,\n  updatePublicLink,\n  updatePrivateLink,\n}) => {\n  const isPublic = Boolean(chat.username);\n  const privateLink = chat.fullInfo && chat.fullInfo.inviteLink;\n\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [username, setUsername] = useState();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n\n  const canUpdate = (\n    (privacyType === 'public' && username && isUsernameAvailable)\n    || (privacyType === 'private' && isPublic)\n  );\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleOptionChange = useCallback((value: string) => {\n    setPrivacyType(value as PrivacyType);\n  }, []);\n\n  const handleSave = useCallback(() => {\n    updatePublicLink({ username: privacyType === 'public' ? username : '' });\n  }, [privacyType, updatePublicLink, username]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={chat.username}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkUsername={checkPublicLink}\n              onChange={setUsername}\n            />\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: global.management.progress,\n      isUsernameAvailable,\n    };\n  },\n  (setGlobal, actions) => pick(actions, [\n    'checkPublicLink', 'updatePublicLink', 'updatePrivateLink',\n  ]),\n)(ManageChatPrivacyType));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { selectChat } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport getAnimationData from '../../common/helpers/animatedAssets';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../modules/helpers';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<number, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: number[];\n  isChannel?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadGroupsForDiscussion' | 'linkDiscussionGroup' | 'unlinkDiscussionGroup'>;\n\nconst ManageDiscussion: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n  loadGroupsForDiscussion,\n  linkDiscussionGroup,\n  unlinkDiscussionGroup,\n}) => {\n  const [linkedGroupId, setLinkedGroupId] = useState<number>();\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const lang = useLang();\n  const linkedChatId = linkedChat && linkedChat.id;\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('DiscussionGroups').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const onDiscussionClick = (groupId: number) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n      // return renderText(\n      //   lang('DiscussionLinkGroupPublicAlert', linkedChat.title, chat!.title),\n      //   ['br', 'simple_markdown'],\n      // );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n    // return renderText(\n    //   lang('DiscussionLinkGroupPrivateAlert', linkedChat.title, chat!.title),\n    //   ['br', 'simple_markdown'],\n    // );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => { onDiscussionClick(id); }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n          isButtonsInOneRow\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"section-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"discussionGroupsDucks\"\n                size={STICKER_SIZE_DISCUSSION_GROUPS}\n                animationData={animationData}\n                play={isAnimationLoaded}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat && chat.fullInfo && chat.fullInfo.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadGroupsForDiscussion', 'linkDiscussionGroup', 'unlinkDiscussionGroup',\n  ]),\n)(ManageDiscussion));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: number;\n  selectedChatMemberId?: number;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatMemberBannedRights'>;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  updateChatMemberBannedRights,\n  isFormFullyDisabled,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat && chat.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember && selectedChatMember.bannedRights) || (chat && chat.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setIsLoading(false);\n  }, [chat, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatBannedRights]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, permissions, updateChatMemberBannedRights]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatBannedRights) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              disabled={getControlIsDisabled('sendStickers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              disabled={getControlIsDisabled('sendPolls')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              disabled={getControlIsDisabled('embedLinks')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              disabled={getControlIsDisabled('pinMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div className=\"section\">\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatMemberBannedRights']),\n)(ManageGroupUserPermissions));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\nimport { getUserFullName, isChatChannel } from '../../../modules/helpers';\n\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: number;\n  isChannel: boolean;\n  usersById: Record<number, ApiUser>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  usersById,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const lang = useLang();\n\n  function handleRecentActionsClick() {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang, usersById]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem icon=\"recent\" multiline ripple onClick={handleRecentActionsClick}>\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n      usersById,\n    };\n  },\n  // (setGlobal, actions): DispatchProps => pick(actions, ['togglePreHistoryHidden', 'updateChat']),\n)(ManageChatAdministrators));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: number;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat }) => {\n  const lang = useLang();\n\n  const adminMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { selectChat } from '../../../modules/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: number;\n  selectedChatMemberId?: number;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<number, ApiUser>;\n  currentUserId?: number;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatAdmin'>;\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps & DispatchProps> = ({\n  selectedChatMemberId,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isFormFullyDisabled,\n  updateChatAdmin,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return undefined;\n    }\n\n    return chat.fullInfo.adminMembers.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat && chat.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember && selectedChatMember.adminRights) || {});\n    setCustomTitle(((selectedChatMember && selectedChatMember.customTitle) || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(false);\n    setIsLoading(false);\n  }, [selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [chat, selectedChatMemberId, permissions, customTitle, updateChatAdmin]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedChatMemberId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedChatMemberId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (!selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!!permissions.changeInfo}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={!!permissions.postMessages}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={!!permissions.editMessages}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={!!permissions.deleteMessages}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={!!permissions.banUsers}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!!permissions.inviteUsers}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!!permissions.pinMessages}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={!!permissions.addAdmins}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={!!permissions.anonymous}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedChatMemberId && !isFormFullyDisabled && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isDismissConfirmationDialogOpen}\n        onClose={closeDismissConfirmationDialog}\n        text=\"Are you sure you want to dismiss this admin?\"\n        confirmLabel=\"Dismiss\"\n        confirmHandler={handleDismissAdmin}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isFormFullyDisabled,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatAdmin']),\n)(ManageGroupAdminRights));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatMember, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { selectChat } from '../../../modules/selectors';\nimport { sortUserIds, isChatChannel } from '../../../modules/helpers';\nimport { pick } from '../../../util/iteratees';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: number;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openUserInfo'>;\n\nconst ManageGroupMembers: FC<OwnProps & StateProps & DispatchProps> = ({\n  members,\n  usersById,\n  isChannel,\n  openUserInfo,\n}) => {\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(members.map(({ userId }) => userId), usersById);\n  }, [members, usersById]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => handleMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const members = chat && chat.fullInfo && chat.fullInfo.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      isChannel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n  ]),\n)(ManageGroupMembers));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatMember, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { sortUserIds, isChatChannel } from '../../../modules/helpers';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number) => void;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(members.filter((member) => !member.isOwner).map(({ userId }) => userId), usersById);\n  }, [members, usersById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: number) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const members = chat && chat.fullInfo && chat.fullInfo.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      isChannel,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens, ManagementType } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../modules/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageGroupRemovedUsers from './ManageGroupRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\n\nexport type OwnProps = {\n  chatId: number;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: number;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return <ManageUser key={chatId} userId={chatId} />;\n        case 'group':\n          return <ManageGroup key={chatId} chatId={chatId} onScreenSelect={onScreenSelect} />;\n        case 'channel':\n          return <ManageChannel key={chatId} chatId={chatId} onScreenSelect={onScreenSelect} />;\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType chatId={chatId} />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageGroupRemovedUsers chatId={chatId} />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n        />\n      );\n\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers chatId={chatId} />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const CURRENCIES: Record<string, string> = {\n  USD: '$',\n  EUR: '€',\n  GBP: '£',\n  JPY: '¥',\n  RUB: '₽',\n  UAH: '₴',\n  INR: '₹',\n  AED: 'د.إ',\n};\n\nexport function getCurrencySign(currency: string | undefined): string {\n  if (!currency) {\n    return '';\n  }\n  return CURRENCIES[currency] || '';\n}\n","const VISA = /^4[0-9]{12}(?:[0-9]{1,3})?$/;\nconst MASTERCARD1 = /^5[1-5][0-9]{11,14}$/;\nconst MASTERCARD2 = /^2[2-7][0-9]{11,14}$/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\nimport { countryList } from '../../util/phoneNumber';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload,\n        billingCountry: getBillingCountry(action.payload),\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.countryIso2) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: getBillingCountry(action.payload.countryIso2),\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nfunction getBillingCountry(countryCode: string) {\n  const country = countryList.find(({ id }) => id === countryCode);\n  return country ? country.name : '';\n}\n\nexport default () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n","import { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import { ChangeEvent, RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: any;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import React, {\n  FC, useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\nimport { countryList } from '../../util/phoneNumber';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label=\"Address1 (Street)\"\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label=\"Address2 (Street)\"\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label=\"City\"\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              error={formErrors.city}\n            />\n            <InputText\n              label=\"State\"\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label=\"Country\"\n              placeholder=\"Country\"\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n            >\n              {countryList.map(({ name, id }) => (\n                <option\n                  value={id}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label=\"Post Code\"\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label=\"Full name\"\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label=\"Email\"\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label=\"Phone number\"\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import React, {\n  FC, useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport { ShippingOption } from '../../types/index';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  useEffect(() => {\n    if (!shippingOptions || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: `${currency} ${String(amount / 100)}`,\n    value,\n  }))), [shippingOptions, currency]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>Select shipping method</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import React, {\n  FC, memo,\n} from '../../lib/teact/teact';\n\nimport { Price } from '../../types';\n\nimport './Checkout.scss';\n\nexport type OwnProps = {\n  invoiceContent?: {\n    title?: string;\n    description?: string;\n    text?: string;\n    photoUrl?: string;\n  };\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  shippingPrices?: Price[];\n  currency?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  invoiceContent,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const { photoUrl, title, text } = (invoiceContent || {});\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n  return (\n    <div className=\"Checkout\">\n      <div className=\"description has-image\">\n        { photoUrl && (\n          <img src={photoUrl} alt=\"\" />\n        )}\n        <div className=\"text\">\n          <h5>{ title }</h5>\n          <p>{ text }</p>\n        </div>\n      </div>\n      <div className=\"price-info\">\n        { prices && prices.map((item) => (\n          renderPaymentItem(item.label, item.amount, currency, false)\n        )) }\n        { shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(item.label, item.amount, currency, false)\n        )) }\n        { totalPrice !== undefined && (\n          renderPaymentItem('Total', totalPrice, currency, true)\n        ) }\n      </div>\n      <div className=\"invoice-info\">\n        {paymentMethod && renderCheckoutItem('icon-card', paymentMethod, 'Payment method')}\n        {paymentProvider && renderCheckoutItem('stripe-provider', paymentProvider, 'Payment provider')}\n        {shippingAddress && renderCheckoutItem('icon-location', shippingAddress, 'Shipping address')}\n        {name && renderCheckoutItem('icon-user', name, 'Name')}\n        {phone && renderCheckoutItem('icon-phone', phone, 'Phone number')}\n        {shippingMethod && renderCheckoutItem('icon-truck', shippingMethod, 'Shipping method')}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPaymentItem(title: string, value: number, currency?: string, main = false) {\n  return (\n    <div className={`price-info-item ${main ? 'price-info-item-main' : ''}`}>\n      <div className=\"title\">\n        { title }\n      </div>\n      <div className=\"value\">\n        { `${currency || ''} ${(value / 100).toFixed(2)}` }\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem(icon: string, title: string, data: string) {\n  return (\n    <div className=\"checkout-info-item\">\n      <i className={icon}> </i>\n      <div className=\"info\">\n        <div className=\"title\">\n          { title }\n        </div>\n        <p className=\"data\">\n          { data }\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Checkout);\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  // eslint-disable-next-line no-null/no-null\n  const expiryInputRef = useRef<HTMLInputElement>(null);\n\n  const handleKeyDown = useCallback((e) => {\n    if (e.key === 'Backspace' && value.charAt(value.length - 1) === '/') {\n      const newValue = value.slice(0, value.length - 1);\n      if (expiryInputRef.current) {\n        expiryInputRef.current.value = newValue;\n      }\n    }\n  }, [value]);\n\n  const handleChange = useCallback((e) => {\n    onChange(formatCardExpiry(e.target.value));\n  }, [onChange]);\n\n  return (\n    <InputText\n      label=\"Expiry date\"\n      ref={expiryInputRef}\n      onChange={handleChange}\n      onKeyDown={handleKeyDown}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      maxLength={MAX_FIELD_LENGTH}\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts && parts[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts && parts[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","export default __webpack_public_path__ + \"mastercard.4216118edafe23cc2dec7b8807ba4622.svg\";","export default __webpack_public_path__ + \"visa.e5a7c336e1deb4b92a636e2e053878c4.svg\";","import React, {\n  FC, memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\n// @ts-ignore\nimport mastercardIconPath from '../../assets/mastercard.svg';\n// @ts-ignore\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n    if (cardNumberRef.current) {\n      cardNumberRef.current.value = newValue;\n    }\n  }, [onChange, cardNumberRef]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <span className=\"left-addon\">{cardIcon}</span>\n      <InputText\n        ref={cardNumberRef}\n        label=\"Card number\"\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-left-addon' : ''}\n        error={error}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n      />\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import React, {\n  FC, useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\nimport { countryList } from '../../util/phoneNumber';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    dispatch({ type: 'changeCvvCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label=\"Name on card\"\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label=\"CVV code\"\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            error={formErrors.cvv}\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label=\"Country\"\n            placeholder=\"Country\"\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ name }) => (\n                <option\n                  value={name}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label=\"Post Code\"\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            error={formErrors.billingZip}\n          />\n        )}\n        { canSaveCredentials && (\n          <Checkbox\n            label={lang('PaymentCardSavePaymentInformation')}\n            checked={state.saveCredentials}\n            onChange={handleChangeSaveCredentials}\n          />\n        ) }\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../global/types';\nimport { PaymentStep, ShippingOption, Price } from '../../types';\nimport { ApiError } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport { getCurrencySign } from '../middle/helpers/getCurrencySign';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport { getShippingError } from '../../modules/helpers/payments';\nimport usePaymentReducer, { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  nameRequested?: boolean;\n  shippingAddressRequested?: boolean;\n  phoneRequested?: boolean;\n  emailRequested?: boolean;\n  flexible?: boolean;\n  phoneToProvider?: boolean;\n  emailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  globalErrors?: ApiError[];\n};\n\ntype GlobalStateProps = Pick<GlobalState['payment'], 'step' | 'shippingOptions' |\n'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoiceContent' |\n'error'>;\n\ntype DispatchProps = Pick<GlobalActions, 'validateRequestedInfo' | 'sendPaymentForm' | 'setPaymentStep'\n| 'sendCredentialsInfo' | 'clearPaymentError' >;\n\nconst Invoice: FC<OwnProps & StateProps & GlobalStateProps & DispatchProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  nameRequested,\n  shippingAddressRequested,\n  phoneRequested,\n  emailRequested,\n  phoneToProvider,\n  emailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoiceContent,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  error,\n  globalErrors,\n  validateRequestedInfo,\n  sendPaymentForm,\n  setPaymentStep,\n  sendCredentialsInfo,\n  clearPaymentError,\n}) => {\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const currencySign = getCurrencySign(currency);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useEffect(() => {\n    if (step || error || globalErrors) {\n      setIsLoading(false);\n    }\n  }, [step, error, globalErrors]);\n\n  useEffect(() => {\n    if (error && error.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.fieldError,\n        },\n      });\n      return;\n    }\n    if (globalErrors && globalErrors.length) {\n      const errors = getShippingError(globalErrors);\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          ...errors,\n        },\n      });\n    }\n  }, [error, globalErrors, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingAddress || {}),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping);\n  }, [step, paymentState.shipping, prices, shippingOptions]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <Button\n          isText\n          onClick={clearPaymentError}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(cuurentStep: PaymentStep) {\n    switch (cuurentStep) {\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(shippingAddressRequested)}\n            needEmail={Boolean(emailRequested || emailToProvider)}\n            needPhone={Boolean(phoneRequested || phoneToProvider)}\n            needName={Boolean(nameRequested)}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currencySign}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n          />\n        );\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            prices={prices}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoiceContent={invoiceContent}\n            checkoutInfo={checkoutInfo}\n            currency={currencySign}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  const handleButtonClick = useCallback(() => {\n    setIsLoading(true);\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return validateRequest();\n      case PaymentStep.Shipping:\n        return setStep(PaymentStep.PaymentInfo);\n      case PaymentStep.PaymentInfo:\n        return sendCredentials();\n      case PaymentStep.Checkout:\n        return sendForm();\n      default:\n        return () => {};\n    }\n  }, [step, validateRequest, setStep, sendCredentials, sendForm]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('Checkout.PayPrice', `${currencySign}${(totalPrice / 100).toFixed(2)}`);\n      default:\n        return lang('Next');\n    }\n  }, [step, lang, currencySign, totalPrice]);\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <p>\n          Sorry, Telegram T doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <Button\n          isText\n          onClick={onClose}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"PaymentModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={onClose}\n          ariaLabel=\"Close\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          {() => (\n            <div className=\"content custom-scroll\">\n              {renderModalContent(step)}\n            </div>\n          )}\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      <div className=\"footer\">\n        <Button\n          type=\"submit\"\n          onClick={handleButtonClick}\n          disabled={isLoading}\n          isLoading={isLoading}\n        >\n          {buttonText}\n        </Button>\n      </div>\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContent,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n    } = global.payment;\n\n    const isProviderError = Boolean(invoice && (!nativeProvider || nativeProvider !== DEFAULT_PROVIDER));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      nameRequested,\n      phoneRequested,\n      emailRequested,\n      shippingAddressRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n    } = (invoice || {});\n\n    return {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      nameRequested,\n      shippingAddressRequested,\n      phoneRequested,\n      emailRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoiceContent,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      globalErrors: global.errors,\n    };\n  },\n  (setGlobal, actions): DispatchProps => {\n    return pick(actions, [\n      'validateRequestedInfo',\n      'sendPaymentForm',\n      'setPaymentStep',\n      'sendCredentialsInfo',\n      'clearPaymentError',\n    ]);\n  },\n)(Invoice));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option ? option.prices : undefined;\n}\n\nfunction getTotalPrice(prices: Price[] = [], shippingOptions: ShippingOption[] | undefined, shippingOption: string) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = 0;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = `${cardTypeText} *${state.cardNumber.slice(-4)}`;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption ? shippingOption.title : undefined;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nfunction getCredentials(paymentState: FormState) {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, {\n  FC, memo, useMemo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { Price } from '../../types';\nimport { ApiShippingAddress } from '../../api/types/payments';\n\nimport useLang from '../../hooks/useLang';\nimport { getCurrencySign } from '../middle/helpers/getCurrencySign';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photoUrl?: string;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  totalAmount,\n  currency,\n  info,\n  photoUrl,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n  const currencySign = getCurrencySign(currency);\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={onClose}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            invoiceContent={{\n              photoUrl,\n              text,\n              title,\n            }}\n            checkoutInfo={checkoutInfo}\n            currency={currencySign}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = global.payment;\n    const {\n      currency,\n      prices: mapedPrices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices: mapedPrices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress && shippingAddress.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    paymentProvider: 'Stripe',\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import { ApiMediaFormat } from '../../../api/types';\n\nimport * as mediaLoader from '../../../util/mediaLoader';\n\n// @ts-ignore\nimport MonkeyIdle from '../../../assets/TwoFactorSetupMonkeyIdle.tgs';\n// @ts-ignore\nimport MonkeyTracking from '../../../assets/TwoFactorSetupMonkeyTracking.tgs';\n// @ts-ignore\nimport MonkeyClose from '../../../assets/TwoFactorSetupMonkeyClose.tgs';\n// @ts-ignore\nimport MonkeyPeek from '../../../assets/TwoFactorSetupMonkeyPeek.tgs';\n// @ts-ignore\nimport FoldersAll from '../../../assets/FoldersAll.tgs';\n// @ts-ignore\nimport FoldersNew from '../../../assets/FoldersNew.tgs';\n// @ts-ignore\nimport DiscussionGroups from '../../../assets/DiscussionGroupsDucks.tgs';\n\nexport const ANIMATED_STICKERS_PATHS = {\n  MonkeyIdle,\n  MonkeyTracking,\n  MonkeyClose,\n  MonkeyPeek,\n  FoldersAll,\n  FoldersNew,\n  DiscussionGroups,\n};\n\nexport default function getAnimationData(name: keyof typeof ANIMATED_STICKERS_PATHS) {\n  const path = ANIMATED_STICKERS_PATHS[name].replace(window.location.origin, '');\n\n  return mediaLoader.fetch(`file${path}`, ApiMediaFormat.Lottie);\n}\n","export default __webpack_public_path__ + \"TwoFactorSetupMonkeyIdle.dea4a492c144df84ddab778dc8a3f0cd.tgs\";","export default __webpack_public_path__ + \"TwoFactorSetupMonkeyTracking.eb5a7a6f166fb7589c12e6248561fb58.tgs\";","export default __webpack_public_path__ + \"TwoFactorSetupMonkeyClose.604c4c833d322b7e6c3ea19bef058241.tgs\";","export default __webpack_public_path__ + \"TwoFactorSetupMonkeyPeek.1905436b042520363d7e59f5d7f903ab.tgs\";","export default __webpack_public_path__ + \"FoldersAll.3f9f9e243d19f0fbf9aaaff11cbd4572.tgs\";","export default __webpack_public_path__ + \"FoldersNew.9a40d71c0c8be70f5bd14ff2d7bc1593.tgs\";","export default __webpack_public_path__ + \"DiscussionGroupsDucks.9ea453d1be9d1b0ee77a992f8e587485.tgs\";","import React, {\n  FC, useEffect, useState, memo,\n} from '../../lib/teact/teact';\n\nimport { DEBUG } from '../../config';\nimport { blobToFile, blobToDataUri } from '../../util/files';\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\nimport Modal from './Modal';\nimport Loading from './Loading';\n\nimport './CropModal.scss';\n\n// Change to 'base64' to get base64-encoded string\nconst cropperResultOptions: Croppie.ResultOptions & { type: 'blob' } = {\n  type: 'blob',\n  quality: 0.8,\n  format: 'jpeg',\n  circle: false,\n};\n\ntype ICroppie = typeof import('croppie');\nlet Croppie: ICroppie;\nlet croppiePromise: Promise<{ default: ICroppie }>;\n\nasync function ensureCroppie() {\n  if (!croppiePromise) {\n    croppiePromise = import('../../lib/croppie') as unknown as Promise<{ default: ICroppie }>;\n    Croppie = (await croppiePromise).default;\n  }\n\n  return croppiePromise;\n}\n\nlet cropper: Croppie;\n\nasync function initCropper(imgFile: File) {\n  try {\n    const cropContainer = document.getElementById('avatar-crop');\n    if (!cropContainer) {\n      return;\n    }\n\n    const { offsetWidth, offsetHeight } = cropContainer;\n\n    cropper = new Croppie(cropContainer, {\n      enableZoom: true,\n      boundary: {\n        width: offsetWidth,\n        height: offsetHeight,\n      },\n      viewport: {\n        width: offsetWidth - 16,\n        height: offsetHeight - 16,\n        type: 'circle',\n      },\n    });\n\n    const dataUri = await blobToDataUri(imgFile);\n    await cropper.bind({ url: dataUri });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n}\n\ntype OwnProps = {\n  file?: File;\n  onChange: (file: File) => void;\n  onClose: () => void;\n};\n\nconst CropModal: FC<OwnProps> = ({ file, onChange, onClose }: OwnProps) => {\n  const [isCroppieReady, setIsCroppieReady] = useState(false);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    if (!isCroppieReady) {\n      ensureCroppie().then(() => setIsCroppieReady(true));\n\n      return;\n    }\n\n    initCropper(file);\n  }, [file, isCroppieReady]);\n\n  const lang = useLang();\n\n  async function handleCropClick() {\n    if (!cropper) {\n      return;\n    }\n\n    const result: Blob | string = await cropper.result(cropperResultOptions);\n    const croppedImg = typeof result === 'string' ? result : blobToFile(result, 'avatar.jpg');\n\n    onChange(croppedImg);\n  }\n\n  return (\n    <Modal\n      isOpen={Boolean(file)}\n      onClose={onClose}\n      title=\"Drag to reposition\"\n      className=\"CropModal\"\n      hasCloseButton\n    >\n      {isCroppieReady ? (\n        <div id=\"avatar-crop\" />\n      ) : (\n        <Loading />\n      )}\n      <Button\n        className=\"confirm-button\"\n        round\n        color=\"primary\"\n        onClick={handleCropClick}\n        ariaLabel={lang('CropImage')}\n      >\n        <i className=\"icon-check\" />\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(CropModal);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target || !target.files || !target.files[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  function handleAvatarCrop(croppedImg: File) {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }\n\n  function handleModalClose() {\n    setSelectedFile(undefined);\n  }\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n","import React, {\n  FC, useState, useEffect, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport getAnimationData from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\nconst STICKER_SIZE = IS_MOBILE_SCREEN ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [closeMonkeyData, setCloseMonkeyData] = useState<Record<string, any>>();\n  const [peekMonkeyData, setPeekMonkeyData] = useState<Record<string, any>>();\n  const [isFirstMonkeyLoaded, setIsFirstMonkeyLoaded] = useState(false);\n  const [isPeekShown, setIsPeekShown] = useState(false);\n\n  useEffect(() => {\n    if (!closeMonkeyData) {\n      getAnimationData('MonkeyClose').then(setCloseMonkeyData);\n    } else {\n      setTimeout(() => setIsPeekShown(true), PEEK_MONKEY_SHOW_DELAY);\n    }\n  }, [closeMonkeyData]);\n\n  useEffect(() => {\n    if (!peekMonkeyData) {\n      getAnimationData('MonkeyPeek').then(setPeekMonkeyData);\n    }\n  }, [peekMonkeyData]);\n\n  const handleFirstMonkeyLoad = useCallback(() => setIsFirstMonkeyLoaded(true), []);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      {closeMonkeyData && (\n        <AnimatedSticker\n          id=\"closeMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'hidden' : 'shown'}\n          animationData={closeMonkeyData}\n          playSegment={SEGMENT_COVER_EYES}\n          noLoop\n          onLoad={handleFirstMonkeyLoad}\n        />\n      )}\n      {peekMonkeyData && (\n        <AnimatedSticker\n          id=\"peekMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'shown' : 'hidden'}\n          animationData={peekMonkeyData}\n          playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n          noLoop\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { MIN_PASSWORD_LENGTH } from '../../config';\nimport { IS_TOUCH_ENV, IS_MOBILE_SCREEN } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  submitLabel?: string;\n  error?: string;\n  hint?: string;\n  placeholder?: string;\n  isLoading?: boolean;\n  isPasswordVisible?: boolean;\n  clearError: NoneToVoidFunction;\n  onChangePasswordVisibility: (state: boolean) => void;\n  onInputChange?: (password: string) => void;\n  onSubmit: (password: string) => void;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_MOBILE_SCREEN ? 550 : 400;\n\nconst PasswordForm: FC<OwnProps> = ({\n  isLoading = false,\n  isPasswordVisible,\n  error,\n  hint,\n  placeholder = 'Password',\n  submitLabel = 'Next',\n  clearError,\n  onChangePasswordVisibility,\n  onInputChange,\n  onSubmit,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const lang = useLang();\n\n  const [password, setPassword] = useState('');\n  const [canSubmit, setCanSubmit] = useState(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (error) {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n        inputRef.current!.select();\n      });\n    }\n  }, [error]);\n\n  function onPasswordChange(e: ChangeEvent<HTMLInputElement>) {\n    if (error) {\n      clearError();\n    }\n\n    const { target } = e;\n    setPassword(target.value);\n    setCanSubmit(target.value.length >= MIN_PASSWORD_LENGTH);\n    if (onInputChange) {\n      onInputChange(target.value);\n    }\n  }\n\n  function togglePasswordVisibility() {\n    onChangePasswordVisibility(!isPasswordVisible);\n  }\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    if (isLoading) {\n      return;\n    }\n\n    if (canSubmit) {\n      onSubmit(password);\n    }\n  }\n\n  return (\n    <form action=\"\" onSubmit={handleSubmit} autoComplete=\"off\">\n      <div\n        className={buildClassName('input-group password-input', password && 'touched', error && 'error')}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <input\n          ref={inputRef}\n          className=\"form-control\"\n          type={isPasswordVisible ? 'text' : 'password'}\n          id=\"sign-in-password\"\n          value={password || ''}\n          autoComplete=\"current-password\"\n          onChange={onPasswordChange}\n          dir=\"auto\"\n        />\n        <label>{error || hint || placeholder}</label>\n        <div\n          className=\"toggle-password\"\n          onClick={togglePasswordVisibility}\n          role=\"button\"\n          tabIndex={0}\n          title=\"Toggle password visibility\"\n        >\n          <i className={isPasswordVisible ? 'icon-eye' : 'icon-eye-closed'} />\n        </div>\n      </div>\n      {canSubmit && (\n        <Button type=\"submit\" ripple isLoading={isLoading}>\n          {submitLabel}\n        </Button>\n      )}\n    </form>\n  );\n};\n\nexport default memo(PasswordForm);\n"],"sourceRoot":""}