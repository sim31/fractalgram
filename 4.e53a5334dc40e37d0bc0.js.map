{"version":3,"sources":["webpack:///./src/modules/actions/ui/chats.ts","webpack:///./src/modules/actions/ui/messages.ts","webpack:///./src/modules/actions/ui/globalSearch.ts","webpack:///./src/modules/actions/ui/localSearch.ts","webpack:///./src/modules/actions/ui/stickerSearch.ts","webpack:///./src/modules/actions/ui/users.ts","webpack:///./src/modules/actions/ui/settings.ts","webpack:///./src/modules/actions/ui/misc.ts","webpack:///./src/modules/actions/ui/payments.ts","webpack:///./src/modules/actions/api/chats.ts","webpack:///./src/modules/actions/api/messages.ts","webpack:///./src/modules/actions/api/symbols.ts","webpack:///./src/modules/actions/api/globalSearch.ts","webpack:///./src/modules/actions/api/sync.ts","webpack:///./src/modules/actions/api/localSearch.ts","webpack:///./src/modules/actions/api/management.ts","webpack:///./src/modules/actions/api/users.ts","webpack:///./src/modules/actions/api/settings.ts","webpack:///./src/modules/actions/api/bots.ts","webpack:///./src/modules/actions/api/twoFaSettings.ts","webpack:///./src/modules/actions/api/payments.ts","webpack:///./src/util/requestQuery.ts","webpack:///./src/modules/actions/apiUpdaters/chats.ts","webpack:///./src/modules/actions/apiUpdaters/messages.ts","webpack:///./src/modules/actions/apiUpdaters/users.ts","webpack:///./src/modules/actions/apiUpdaters/symbols.ts","webpack:///./src/modules/actions/apiUpdaters/misc.ts","webpack:///./src/modules/actions/apiUpdaters/settings.ts","webpack:///./src/modules/actions/apiUpdaters/twoFaSettings.ts","webpack:///./src/components/ui/Switcher.tsx","webpack:///./src/components/left/main/LeftMainHeader.tsx","webpack:///./src/components/left/ConnectionState.tsx","webpack:///./src/hooks/useThrottledMemo.ts","webpack:///./src/hooks/useThrottle.ts","webpack:///./src/components/left/main/ChatFolders.tsx","webpack:///./src/components/left/search/LeftSearch.async.tsx","webpack:///./src/components/left/main/ContactList.async.tsx","webpack:///./src/components/left/NewChatButton.tsx","webpack:///./src/components/left/main/LeftMain.tsx","webpack:///./src/components/left/settings/Settings.async.tsx","webpack:///./src/components/left/newChat/NewChat.async.tsx","webpack:///./src/components/left/ArchivedChats.async.tsx","webpack:///./src/components/left/LeftColumn.tsx","webpack:///./src/hooks/useWindowSize.ts","webpack:///./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack:///./src/components/middle/HeaderMenuContainer.async.tsx","webpack:///./src/components/middle/HeaderActions.tsx","webpack:///./src/hooks/useWebpThumbnail.ts","webpack:///./src/components/middle/PinnedMessageNavigation.tsx","webpack:///./src/components/middle/HeaderPinnedMessage.tsx","webpack:///./src/components/middle/AudioPlayer.tsx","webpack:///./src/components/middle/MiddleHeader.tsx","webpack:///./src/components/middle/helpers/groupMessages.ts","webpack:///./src/components/middle/hooks/useStickyDates.ts","webpack:///./src/hooks/useDebounce.ts","webpack:///./src/components/middle/MessageScroll.tsx","webpack:///./src/components/middle/message/helpers/buildContentClassName.ts","webpack:///./src/components/middle/message/helpers/mediaDimensions.ts","webpack:///./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack:///./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack:///./src/components/middle/message/hooks/useFocusMessage.ts","webpack:///./src/components/middle/message/ContextMenuContainer.async.tsx","webpack:///./src/components/middle/ActionMessage.tsx","webpack:///./src/components/common/EmbeddedMessage.tsx","webpack:///./src/components/middle/message/MessageMeta.tsx","webpack:///./src/components/middle/message/Sticker.tsx","webpack:///./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack:///./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack:///./src/components/middle/message/Photo.tsx","webpack:///./src/hooks/useHeavyAnimationCheckForVideo.ts","webpack:///./src/components/middle/message/hooks/usePauseOnInactive.ts","webpack:///./src/components/middle/message/Video.tsx","webpack:///./src/components/middle/message/Contact.tsx","webpack:///./src/components/ui/CheckboxGroup.tsx","webpack:///./src/components/middle/message/PollOption.tsx","webpack:///./src/components/middle/message/Poll.tsx","webpack:///./src/components/middle/message/WebPage.tsx","webpack:///./src/components/middle/message/Invoice.tsx","webpack:///./src/components/middle/message/hocs/withSelectControl.tsx","webpack:///./src/components/middle/message/Album.tsx","webpack:///./src/components/middle/message/RoundVideo.tsx","webpack:///./src/components/middle/message/InlineButtons.tsx","webpack:///./src/components/middle/message/CommentButton.tsx","webpack:///./src/components/middle/message/Message.tsx","webpack:///./src/components/middle/MessageList.tsx","webpack:///./src/components/middle/ScrollDownButton.tsx","webpack:///./src/components/middle/composer/helpers/buildAttachment.ts","webpack:///./node_modules/opus-recorder/dist/encoderWorker.min.js","webpack:///./src/util/voiceRecording.ts","webpack:///./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack:///./src/components/middle/composer/helpers/getMessageTextAsHtml.ts","webpack:///./src/components/middle/composer/hooks/useDraft.ts","webpack:///./src/components/common/DeleteMessageModal.async.tsx","webpack:///./src/components/ui/ResponsiveHoverButton.tsx","webpack:///./src/components/middle/composer/AttachMenu.async.tsx","webpack:///./src/components/middle/composer/SymbolMenu.async.tsx","webpack:///./src/components/middle/composer/MentionTooltip.async.tsx","webpack:///./src/components/middle/composer/CustomSendMenu.async.tsx","webpack:///./src/components/middle/composer/StickerTooltip.async.tsx","webpack:///./src/components/middle/composer/BotKeyboardMenu.async.tsx","webpack:///./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack:///./src/components/middle/composer/AttachmentModal.async.tsx","webpack:///./src/components/middle/composer/PollModal.async.tsx","webpack:///./src/components/middle/composer/DropArea.async.tsx","webpack:///./src/components/middle/composer/WebPagePreview.tsx","webpack:///./src/components/common/CalendarModal.async.tsx","webpack:///./src/components/payment/PaymentModal.async.tsx","webpack:///./src/components/payment/ReceiptModal.async.tsx","webpack:///./src/components/middle/composer/Composer.tsx","webpack:///./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack:///./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack:///./src/util/insertHtmlInSelection.ts","webpack:///./src/util/deleteLastCharacterOutsideSelection.ts","webpack:///./src/components/middle/composer/hooks/useEditing.ts","webpack:///./src/components/middle/MobileSearch.async.tsx","webpack:///./src/components/middle/MessageSelectToolbar.async.tsx","webpack:///./src/components/common/UnpinAllMessagesModal.async.tsx","webpack:///./src/components/middle/MiddleColumn.tsx","webpack:///./src/hooks/useCustomBackground.ts","webpack:///./src/components/right/RightHeader.tsx","webpack:///./src/components/right/hooks/useProfileViewportIds.ts","webpack:///./src/components/right/hooks/useProfileState.ts","webpack:///./src/components/right/ProfilePhoto.tsx","webpack:///./src/components/right/ProfileInfo.tsx","webpack:///./src/components/right/hooks/usePhotosPreload.ts","webpack:///./src/components/right/ChatExtra.tsx","webpack:///./src/components/right/Profile.tsx","webpack:///./src/components/right/hooks/useTransitionFixes.ts","webpack:///./src/hooks/useCacheBuster.ts","webpack:///./src/components/right/RightSearch.async.tsx","webpack:///./src/components/right/management/Management.async.tsx","webpack:///./src/components/right/StickerSearch.async.tsx","webpack:///./src/components/right/GifSearch.async.tsx","webpack:///./src/components/right/PollResults.async.tsx","webpack:///./src/components/right/RightColumn.tsx","webpack:///./src/components/mediaViewer/MediaViewer.async.tsx","webpack:///./src/components/main/Notifications.async.tsx","webpack:///./src/components/main/Errors.async.tsx","webpack:///./src/components/main/ForwardPicker.async.tsx","webpack:///./src/components/main/SafeLinkModal.async.tsx","webpack:///./src/components/main/HistoryCalendar.async.tsx","webpack:///./src/components/main/Main.tsx","webpack:///./src/bundles/main.ts"],"names":["window","addEventListener","e","state","chatId","id","threadId","messageListType","type","getDispatch","openChat","noPushState","addReducer","global","actions","payload","currentMessageList","selectCurrentMessageList","exitMessageSelectMode","messages","contentToBeScheduled","undefined","forwardMessages","toChatId","setGlobal","history","pushState","updateCurrentMessageList","isChatInfoShown","chatCreation","blurTimeout","scrollOffset","replaceThreadParam","messageId","paramName","chatMessages","selectChatMessages","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","selectAllowedMessageActions","canEdit","targetIndexDelta","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","indexOf","toString","length","Number","MAIN_THREAD_ID","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","avatarOwnerId","profilePhotoIndex","origin","mediaViewer","audioPlayer","selectIsRightColumnShown","pollResults","voters","setTimeout","newGlobal","getGlobal","noHighlight","groupedId","groupedChatId","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","includes","direction","Down","Up","loadViewportMessages","fromChatId","messageIds","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","closeMediaViewer","selectedMessages","openForwardMenu","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","message","IS_TOUCH_ENV","isPollModalOpen","query","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","filter","unshift","pop","content","updateGlobalSearchContent","updateLocalTextSearch","replaceLocalTextSearchResults","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","stickers","search","resultIds","gifs","offsetId","results","updateSelectedUserId","replaceSettings","theme","settings","replaceThemeSettings","management","byChatId","isActive","IS_MOBILE_SCREEN","isLeftColumnShown","action","emoji","recentEmojis","newEmojis","sticker","recent","hash","newStickers","s","notification","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","push","error","getReadableErrorText","newErrors","errors","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","payment","isPaymentModalOpen","clearPayment","closeInvoice","runThrottledForLoadChats","throttle","cb","runThrottledForLoadTopChats","runDebouncedForLoadFullChat","debounce","async","loadChats","listType","offsetDate","result","callApi","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","orderedPinnedIds","chatIds","shift","addUsers","buildCollectionByKey","users","updateChats","updateChatListIds","updateChatListSecondaryInfo","draftsById","map","forEach","replyingToById","isFullyLoaded","loadFullChat","fullInfo","updateChat","openChatByUsername","username","channelPostId","localChat","selectChatByUsername","isMin","previousChat","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","byId","listIds","active","currentChatId","pinnedChats","otherChats","prepareChatList","chatToPreload","find","currentUserId","hasUnreadMark","toggleChatUnread","isChatSummaryOnly","requestChatUpdate","user","selectUser","selectThreadTopMessageId","requestThreadInfoUpdate","selectSupportChat","TIPS_USERNAME","oldestChat","selectIsChatPinned","sort","chat1","chat2","date","force","isMuted","title","about","photo","memberIds","progress","ChatCreationProgress","InProgress","createdChannel","channelId","accessHash","Complete","Error","createChannel","createdChat","createGroupChat","folderId","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","isChatArchived","chatFolders","loadChatFolders","recommendedChatFolders","recommended","loadRecommendedChatFolders","emoticon","orderedIds","maxId","recommendedId","description","newFolder","createChatFolder","Math","max","apply","deleteChatFolder","unreadCount","match","RE_TME_INVITE_LINK","exec","RE_TME_LINK","isEnabled","isChatBasicGroup","bannedRights","userId","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembers","isDismissed","updateManagementProgress","ManagementProgress","Promise","all","groups","addedById","reduce","group","addChats","forDiscussionIds","channel","fullChat","isPreHistoryHidden","linkedChatId","activeChatFolder","offset","uploadProgressCallbacks","Map","runThrottledForMarkRead","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","Backwards","Around","round","MESSAGE_LIST_SLICE","Forwards","selectThreadOriginChat","threadInfos","addChatMessagesById","updateOutlyingIds","updateListedIds","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","localId","progressCallback","attachment","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","rafPromise","delete","isRestricted","resolve","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","MESSAGE_DELETED","replyMessage","selectChatMessage","updateChatMessage","replyToMessageId","loadMessage","scheduledAt","clearWebPagePreview","value","noWebPage","selectNoWebPage","isSingle","attachments","isGrouped","restParams","text","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","Date","now","selectEditingMessage","setEditingId","get","previousLocalId","cancelApiProgress","apiUpdate","draft","replyToMsgId","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","webPagePreview","loadWebPagePreview","options","option","shouldResetVoters","v","a","offsets","nextOffset","loadPollOptionResults","fromChat","toChat","b","scheduledMessages","historyHash","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","loadPinnedMessages","copyTextToClipboard","link","searchThrottled","searchGifs","updateGifSearch","added","addedStickers","updateStickerSets","sets","loadStickerSets","setIds","addedSetIds","loadStickers","stickerSetId","recentStickers","loadRecentStickers","favorite","favoriteStickers","loadFavoriteStickers","featured","featuredStickers","loadFeaturedStickers","stickerSetAccessHash","stickerSet","selectStickerSet","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","replaceAnimatedEmojis","loadAnimatedEmojis","saved","savedGifs","loadSavedGifs","unfave","unfaveSticker","installedDate","language","currentEmojiKeywords","selectEmojiKeywords","isLoading","emojiKeywords","fromVersion","version","keywords","setsById","searchWords","searchStickers","updateStickersForEmoji","loadStickersForEmoji","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","chatOrUser","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","loadAndReplaceArchivedChats","updateUsers","replaceChatListIds","loadAndUpdateUsers","userIds","contactIds","contactList","updatedUsers","localChats","localUsers","globalChats","globalUsers","searchChats","timestampPlusDay","foundIds","currentSearch","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","newFoundIds","updateLocalTextSearchResults","searchTextMessages","peerId","selectCurrentMediaSearchPeerId","selectCurrentMediaSearch","currentType","currentResults","SHARED_MEDIA_SLICE","updateLocalMediaSearchResults","searchSharedMedia","timestamp","searchMessagesByDate","updateManagement","isUsernameAvailable","afterSyncCallback","DEBUG","console","log","savedUsers","savedPrivateChatIds","savedChats","selectedChat","isChatPrivate","selectedChatUser","replaceChats","loadAndReplaceChats","areMessagesLoaded","draftsByChatId","acc","lastReadInboxMessageId","newCurrentChatId","currentMessageListInfo","threadsById","Array","prototype","concat","replaceUsers","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","sync","afterSync","runDebouncedForFetchFullUser","buildInputPrivacyRules","visibility","allowedIds","deniedIds","usersById","chatsById","rules","collectUsers","collectChats","allowedUsers","allowedChats","blockedUsers","blockedChats","lastRequestedAt","topPeers","usersHash","loadTopUsers","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","updateChatMutedState","phone","phoneNumber","updateUser","updateContact","deleteUser","profileId","isPrivate","photos","button","sendBotCommand","command","openTelegramLink","toggleSafeLinkModal","data","alert","isError","showError","answerCallbackButton","openPollModal","getReceipt","receiptMessageId","getPaymentForm","setInvoiceMessageInfo","openPaymentModal","bio","profileEdit","ProfileEditProgress","currentUser","Idle","loadedWallpapers","wallpapers","file","previewBlobUrl","URL","createObjectURL","slug","UPLOADING_WALLPAPER_SLUG","document","fileName","size","mimeType","wallpaper","firstWallpaper","withLocalMedia","blocked","blockedIds","contactId","addBlockedContact","removeBlockedContact","activeSessions","session","isCurrent","peerType","shouldShowPreviews","updateNotifySettings","hasContactJoinedNotifications","languages","phoneNumberSettings","lastSeenSettings","profilePhotoSettings","forwardsSettings","chatInviteSettings","privacy","lastSeen","profilePhoto","forwards","chatInvite","privacyKey","allowUserIds","allowChatIds","blockUserIds","blockChatIds","isAllowList","contactsIds","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","requestInfo","saveInfo","selectPaymentMessageId","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","PaymentInfo","validateRequestedInfo","setPaymentForm","step","invoice","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","ShippingInfo","setReceipt","receipt","publishableKey","selectProviderPublishableKey","credentials","k","join","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","Checkout","sendStipeCredentials","shippingOptionId","saveCredentials","requestInfoId","selectPaymentRequestId","stripeCredentials","selectStripeCredentials","requestedInfoId","sendPaymentForm","save","runThrottledForUpdateAppBadge","update","noTopChatsRequest","selectIsChatListed","loadTopChats","newProfilePhoto","selectCountNotMutedUnread","updateAppBadge","isNotJoined","listId","typingStatus","senderId","isFromScheduled","isActiveChat","hasUnreadMention","unreadMentionsCount","showNewMessageNotification","messageUpdate","selectCommonBoxChatId","targetChat","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","updateChatListType","chatFoldersById","newChatFoldersById","pick","newOrderedIds","orderedId","folders","replacedMembers","addedMember","deletedMemberId","shouldUpdate","some","deleteIndex","isOwner","isAdmin","membersCount","formattedText","updateWithLocalMedia","isScheduled","currentMessage","video","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","updateScheduledMessage","updateListedAndViewportIds","firstUnreadId","selectFirstUnreadId","addViewportId","firstMessageId","selectThreadByMessage","isMessageLocal","updateChatLastMessage","currentLastMessage","findLastMessage","isDeleting","deleteMessages","newLastMessage","threadIdsToUpdate","unique","deleteChatMessages","chatsIdsToUpdate","commonBoxChatId","updateThreadInfo","newMessage","isMessageInCurrentMessageList","isOutgoing","scheduledIds","selectScheduledIds","selectScheduledMessages","deleteChatScheduledMessages","currentPinnedIds","selectPinnedIds","newTheadInfo","messagesById","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","poll","updatedPoll","updatedResults","isChosen","chosenAnswers","chosenAnswer","chosenAnswerIndex","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","newResults","targetOption","targetOptionIndex","updatedOption","votersCount","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","status","targetUser","isBlocked","key","addNotifyException","twoFaSettings","memo","name","label","checked","disabled","inactive","noAnimation","onChange","onCheck","handleChange","useCallback","currentTarget","className","buildClassName","ANIMATION_LEVEL_OPTIONS","withGlobal","searchQuery","animationLevel","byKey","globalSearchChatId","searchDate","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","setGlobalSearchChatId","onReset","openTipsChat","setGlobalSearchDate","setSettingOption","lang","useLang","hasMenu","LeftColumnContent","ChatList","clearedDateSearchParam","clearedChatSearchParam","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","MainButton","onTrigger","isOpen","Button","ripple","color","onClick","ariaLabel","handleSearchFocus","handleSelectSaved","handleDarkModeToggle","stopPropagation","newTheme","switchTheme","handleAnimationLevelChange","newLevel","_","body","classList","toggle","isSearchFocused","GlobalSearch","Contacts","searchInputPlaceholder","DropdownMenu","trigger","footer","APP_NAME","APP_VERSION","MenuItem","icon","toLowerCase","href","FEEDBACK_URL","localStorage","setItem","JSON","stringify","SearchInput","inputId","parentContainerClassName","focused","placeholder","autoComplete","canClose","onFocus","PickerSelectedItem","isMinimized","clickArg","chatOrUserId","connectionState","dir","isRtl","Spinner","resolverFn","ms","dependencies","valueRef","useRef","runThrottled","useThrottle","forceUpdate","useForceUpdate","useOnChange","isSync","current","orderedFolderIds","notifySettings","selectNotifySettings","notifyExceptions","selectNotifyExceptions","setActiveChatFolder","transitionRef","useEffect","displayedFolders","folderCountersById","useThrottledMemo","counters","unreadDialogsCount","hasActiveDialogs","getFolderUnreadDialogs","badgeCount","isBadgeActive","folderTabs","handleSwitchTab","captureEvents","onSwipe","SwipeDirection","Left","min","Right","isNotInAllTabRef","captureEscKeyListener","handleKeyDown","metaKey","startsWith","digit","preventDefault","removeEventListener","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","folderType","noChatsText","TabList","tabs","activeTab","onSwitchTab","Transition","ref","activeKey","renderCount","props","LeftSearch","useModuleLoader","Bundles","Extra","Loading","ContactList","closeTimeout","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","fabClassName","handleMouseEnter","handleMouseLeave","onMouseEnter","onMouseLeave","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","onContentChange","isNewChatButtonShown","setIsNewChatButtonShown","isMouseInside","handleSelectSettings","Settings","handleSelectContacts","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","handleSelectArchived","Archived","autoCloseTimeout","NewChat","ContentType","ArchivedChats","RENDER_COUNT","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","SettingsScreens","Main","setContactsFilter","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","pickerSearchInput","getElementById","blur","EditProfile","Folders","General","Notifications","Privacy","Language","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyForwarding","PrivacyGroupChats","PrivacyActiveSessions","PrivacyBlockedUsers","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","handleSearchQuery","currentScreen","onScreenSelect","isChannel","setSize","windowSize","handleResize","calculateMiddleFooterTransforms","windowWidth","canPost","sidePadding","MOBILE_SCREEN_MAX_WIDTH","messageListWidth","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","leftColumnWidth","rightColumnWidth","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","HeaderMenuContainer","isChatChannel","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canMute","canSelect","selectIsInSelectMode","canLeave","joinChannel","openLocalTextSearch","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","x","right","y","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleSearchClick","querySelector","focus","searchInput","fluid","anchor","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","useWebpThumbnail","getMessageMediaThumbDataUri","shouldDecodeThumbnail","isWebpSupported","thumbnailDecoded","setThumbnailDecoded","EMPTY_IMAGE_DATA_URI","useLayoutEffect","webpToPngBase64","then","catch","drawRect","width","height","radius","count","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","style","transform","svg","div","defs","innerHTML","onUnpinMessage","onAllPinnedClick","mediaThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","getMessageSummaryText","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","useFlag","handleUnpinMessage","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","src","alt","renderPictogram","renderText","RippleEffect","sender","selectSender","noUi","senderName","getSenderTitle","mediaData","mediaLoader","playPause","isPlaying","useAudioPlayer","getMessageKey","getMediaDuration","handleClick","handleClose","audio","getMessageAudio","performer","renderAudio","subtitle","renderVoice","audioMessage","originChat","messagesCount","pinnedIds","isSelectModeActive","originChatId","isChatWithBot","selectIsChatWithBot","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","openChatWithInfo","pinMessage","toggleLeftColumn","pinnedMessageIndex","setPinnedMessageIndex","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","getChatTitle","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","handleBackClick","messageInput","EDITABLE_INPUT_ID","currentChat","selectIsChatMuted","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","useCurrentOrPrev","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessageTitle","canRevealTools","renderInfo","renderBackButton","PrivateChatInfo","withFullInfo","withMediaViewer","withUpdatingStatus","noRtl","GroupChatInfo","asClose","unreadCountInfo","formatIntegerCompact","componentEl","add","remove","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStart","senderGroups","dateGroups","isInAlbum","mainMessage","albumId","nextMessage","nextMessageDatetime","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","useStickyDates","isScrolled","markIsScrolled","runDebounced","shouldRunFirst","shouldRunLast","updateStickyDates","container","hasTools","contains","fastRaf","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","scrollTop","el","offsetTop","offsetHeight","top","findStuckDate","MessageScroll","focusingId","loadMoreForwards","loadMoreBackwards","isViewportNewest","onFabToggle","onNotchToggle","children","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","toggleScrollTools","scrollHeight","scrollBottom","isAtBottom","observe","observeIntersection","freeze","freezeForLoadMore","unfreeze","unfreezeForLoadMore","useIntersectionObserver","rootRef","margin","MESSAGE_LIST_SENSITIVE_AREA","entries","triggerEntry","isIntersecting","target","resetScroll","useOnIntersect","observeIntersectionForFab","freezeForFab","unfreezeForFab","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","isFocusing","teactFastList","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","getMessageText","stretchFactor","finalWidth","finalHeight","isSmall","AlbumRectPart","accumulate","list","initValue","accumulator","item","clamp","num","low","high","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","album","ratios","proportions","ratio","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","REM","getMaxWidth","minWidth","maxHeight","spacing","originalRatios","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","calculateAuthorWidth","createElement","font","whiteSpace","position","left","opacity","appendChild","offsetWidth","useFocusMessage","elementRef","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","ContextMenuContainer","targetUserId","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isEmbedded","appearanceOrder","isLastInList","noAppearanceAnimation","markShown","renderActionMessageText","asPlain","isContextMenuOpen","contextMenuPosition","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","isContextMenuShown","data-message-id","onMouseDown","onContextMenu","EmbeddedMessage","customText","useIsIntersecting","pictogramId","isRoundVideo","getMessageRoundVideo","senderTitle","outgoingStatus","signature","views","isEdited","formatTime","MessageOutgoingStatus","Sticker","observeIntersectionForPlaying","shouldLoop","isModalOpen","openModal","closeModal","isAnimated","isMemojiSticker","MEMOJI_STICKER_ID","shouldLoad","shouldPlay","mediaHash","getMessageMediaFormat","isMediaLoaded","isAnimationLoaded","markAnimationLoaded","isMediaReady","shouldRenderFullMedia","useTransitionForMedia","getStickerDimensions","thumbClassName","stickerClassName","AnimatedSticker","animationData","play","noLoop","onLoad","fromSticker","useBlurredMediaThumbRef","fullMediaData","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","inSelectMode","isSelected","img","Image","onload","canvas","ctx","getContext","drawImage","getImageData","getAppendixColorFromImage","Photo","shouldAutoLoad","isInSelectMode","uploadProgress","nonInteractive","shouldAffectAppendix","onCancelUpload","localBlobUrl","isDownloadAllowed","setIsDownloadAllowed","shouldDownload","downloadProgress","useMediaWithDownloadProgress","thumbRef","isUploading","isTransferring","transferProgress","getMediaTransferState","wasDownloadDisabled","usePrevious","shouldRenderSpinner","spinnerClassNames","shouldRenderThumb","isAllowed","contentEl","getCustomAppendixBg","appendixBg","setProperty","setAttribute","ProgressSpinner","useHeavyAnimationCheckForVideo","playerRef","shouldPlayRef","safePlay","useHeavyAnimationCheck","isPlayAllowed","wasPlaying","isFrozen","freezePlaying","paused","unfreezePlaying","unfreezePlayingOnRaf","hasFocus","useBackgroundMode","Video","shouldAutoPlay","videoRef","canPlayInline","canMessagePlayVideoInline","setIsPlayAllowed","isInline","isBuffered","bufferingHandlers","useBuffering","playProgress","setPlayProgress","handleTimeUpdate","currentTime","usePauseOnInactive","useVideoCleanup","videoClassName","shouldRenderInlineVideo","shouldRenderHqPreview","shouldRenderPlayButton","shouldRenderDownloadButton","autoPlay","muted","loop","playsInline","onTimeUpdate","isGif","formatMediaDuration","duration","contact","openUserInfo","Avatar","formatPhoneNumberWithCode","selected","loadingOptions","setValues","event","newValues","Checkbox","subLabel","getPercentage","toFixed","PollOption","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","r","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","floor","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","RadioGroup","loadingOption","isQuiz","getReadableVotersCount","isText","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","isSquarePhoto","handleMediaClick","siteName","displayUrl","isMediaInteractive","hasDocument","truncatedDescription","trimText","data-initial","SafeLink","getMessageInvoice","photoUrl","withSelectControl","WrapedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","shiftKey","newProps","PhotoWithSelect","VideoWithSelect","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","currentOnRelease","RoundVideo","playingProgressRef","shouldSpinnerRender","isActivated","setIsActivated","setProgress","playerEl","playingProgressEl","stopPlaying","requestAnimationFrame","capturePlaying","onRelease","ROUND_VIDEO_DIMENSIONS","onEnded","InlineButtons","recentReplierIds","recentRepliers","hasUnread","data-cnt","handleDocumentGroupMouseEnter","lastGroupElement","getLastElementInDocumentGroup","handleDocumentGroupMouseLeave","removeAttribute","nextElementSibling","withSenderName","withAvatar","viaBotId","forceSenderName","isAnonymousOwnMessage","originSender","botSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","every","selectOutgoingStatus","isSingleEmoji","animatedEmoji","selectAnimatedEmoji","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","shouldAutoLoadMedia","selectShouldAutoLoadMedia","shouldAutoPlayMedia","selectShouldAutoPlayMedia","shouldLoopStickers","selectShouldLoopStickers","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","openMediaViewer","openAudioPlayer","markMessagesRead","sendPollVote","clickInlineButton","bottomMarkerRef","appendixRef","hasReply","isReplyMessage","hasThread","asForwarded","isLinkedChannelPost","isInDocumentGroup","voice","getMessageCustomShape","textParts","renderMessageText","containerClassName","contentClassName","hasComments","classNames","isMediaWithNoText","isViaBot","isRound","buildContentClassName","avatarPeer","senderPeer","adminTitle","withCommentButton","withAppendix","handleGroupDocumentMessagesSelect","handleContainerDoubleClick","handleContentDoubleClick","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","MediaViewerOrigin","ScheduledInline","Inline","handleAudioPlay","handleAlbumMediaClick","albumMessageId","ScheduledAlbum","Album","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","fromMessageId","calculatedWidth","noMediaCorners","extraPadding","metaSafeAuthorWidth","canShowActionButton","canForward","canFocus","isChannelPost","onDoubleClick","data-last-message-id","data-has-unread-mention","isAvatarPeerUser","avatarUser","avatarChat","hiddenName","renderAvatar","shouldInlineMeta","senderColor","getUserColorKey","renderSenderName","AnimatedEmoji","Audio","isSelectable","onPlay","onReadMedia","Document","renderContent","INTERSECTION_THROTTLE_FOR_MEDIA","IS_ANDROID","INTERSECTION_MARGIN_FOR_MEDIA","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","withLastMessageWhenPreloading","botDescription","chatBot","selectChatBot","isChatLoaded","isChannelChat","threadFirstMessageId","selectFirstMessageId","hasLinkedChat","markMessageListRead","setScrollOffset","openHistoryCalendar","scrollOffsetRef","selectScrollOffset","anchorIdRef","anchorTopRef","listItemElementsRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","hasFocusing","setHasFocusing","onTickEnd","freezeForMedia","unfreezeForMedia","throttleMs","observeIntersectionForReading","freezeForReading","unfreezeForReading","mentionIds","entry","dataset","messageGroups","listedMessages","orderBy","loadMoreAround","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","clientHeight","preservedItemElements","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","shouldForceScroll","lastItemElement","lastItemHeight","newScrollTop","hasFirstMessageChanged","hasLastMessageChanged","isAlreadyFocusing","isResized","unreadDivider","isAnimatingScroll","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","withUsers","onScroll","currentAnchorIdRef","isSchedule","messageCountToAnimate","messageGroup","flatten","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","getMessageOriginalId","SCHEDULED_WHEN_ONLINE","formatHumanDate","renderMessages","focusLastMessage","messageElements","lastMessageElement","buildAttachment","filename","blob","isQuick","quick","preloadImage","newBlob","toBlob","squeezeImage","revokeObjectURL","videoWidth","videoHeight","preloadVideo","createPosterForVideo","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","startedAt","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","volume","subscribeToAnalyzer","stop","reject","onstop","Blob","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","getMessageTextAsHtml","currentThreadId","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","AttachMenu","SymbolMenu","MentionTooltip","CustomSend","StickerTooltipAsync","StickerTooltip","BotKeyboardMenu","forwardMessageIds","forwardedMessagesCount","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","AttachmentModal","PollModal","DropArea","RE_LINK","RegExp","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","parseMessageInput","linkEntity","ApiMessageEntityTypes","TextUrl","textMatch","renderingWebPage","webPageWithoutPhoto","messageStub","CalendarModal","PaymentModal","MainButtonState","ReceiptModal","chatUser","selectChatUser","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","editingMessage","canScheduleUntilOnline","wasOnline","withScheduledButton","shouldSchedule","botKeyboardMessageId","canSuggestMembers","isChatGroup","stickersForEmoji","groupChatMembers","isReceiptModalOpen","shouldSuggestStickers","dropAreaState","onDropHide","editMessage","saveDraft","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","closePaymentModal","clearReceipt","addRecentEmoji","loadEmojiKeywords","html","setHtml","lastMessageSendTimeSeconds","prevDropAreaState","isCalendarOpen","openCalendar","closeCalendar","scheduledMessageArgs","setScheduledMessageArgs","htmlRef","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isAttachMenuOpen","openAttachMenu","closeAttachMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_IOS","voiceRecording","tickVolume","boxShadow","useVoiceRecording","mainButtonState","Edit","IS_VOICE_RECORDING_SUPPORTED","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","mentionFilter","closeMentionTooltip","insertMention","mentionFilteredMembers","useMentionTooltip","isCustomSendMenuOpen","allowedAttachmentOptions","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","clearStickersForEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","canSendStickers","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","insertTextAndUpdateCursor","selection","getSelection","newHtml","replace","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","execCommand","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","removeAllRanges","addRange","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","removeSymbol","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","prevChatId","handleEditComplete","editedMessage","hasMessageMedia","useEditing","updateDraft","draftChatId","draftThreadId","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevHtml","handleBlur","useDraft","handlePaste","clipboardData","input","activeElement","tagName","EDITABLE_INPUT_MODAL_ID","items","media","getAsFile","pastedText","getData","substring","useClipboardPaste","handleFileSelect","files","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleStickerSelect","handleGifSelect","gif","handlePollSend","handleSilentSend","handleMessageSchedule","restArgs","getTime","handleMessageScheduleUntilOnline","handleCloseCalendar","handleSearchOpen","handleSymbolMenuOpen","handleAllScheduledClick","mainButtonHandler","areVoiceMessagesNotAllowed","canAttachMedia","prevEditedMessage","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","onSend","Portal","DropAreaState","None","withQuick","QuickFile","onHide","onFileSelect","caption","onCaptionUpdate","onFileAppend","onClear","onInsertUserName","filteredChatMembers","canAttachEmbedLinks","faded","MessageInput","innerWidth","shouldSetFocus","shouldSupressFocus","shouldSupressTextFormatter","onUpdate","onSupressedFocus","formatVoiceRecordDuration","onStickerSelect","emojis","onEmojiSelect","onPollCreate","onGifSelect","onRemoveSymbol","onSearchOpen","onSilentSend","onScheduleSend","withTimePicker","maxAt","getDayStartAt","isFutureMode","secondButtonLabel","onSubmit","onSecondButtonClick","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","CLOSE_ANIMATION_DURATION","canBeQuicklyUploaded","kind","CONTENT_TYPES_FOR_QUICK_UPLOAD","isBlurred","isBackgroundBlurred","background","customBackground","backgroundColor","patternColor","themes","isMobileSearchActive","getCanPostInChat","isBotNotStarted","isPinnedMessageList","messageSendingRestrictionReason","getMessageSendingRestrictionReason","hasPinnedOrAudioMessage","loadUser","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanPost","renderingHasTools","renderingIsFabShown","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","customBackgroundValue","settingValue","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","useCustomBackground","MASK_IMAGE_DISABLED","messagingDisabledClassName","footerClassName","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","ANIMATION_LEVEL_MAX","shouldCleanup","onUnpin","runDebouncedForSearch","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canManage","isCreator","isColumnOpen","isSearch","isStickerSearch","isGifSearch","isPollResults","profileState","managementScreen","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","backButtonRef","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","shouldSkipTransition","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","ManagementScreens","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","GroupMembers","ManageGroupMembers","renderingContentKey","renderHeaderContent","isBackButton","buttonClassName","useProfileViewportIds","loadMoreMembers","searchMessages","tabType","mediaSearchType","resultType","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","currentResultType","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","isOnTop","useInfiniteScrollForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","useInfiniteScrollForSharedMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","noProfileInfo","forSharedMediaType","messageIdsRef","getMessageContentIds","reverse","runThrottledForScroll","isScrollingProgrammatically","isFirstPhoto","isSavedMessages","isDeleted","isDeletedUser","getMediaHash","forceAvatar","getChatAvatarHash","imageHash","ApiMediaFormat","BlobUrl","avatarThumbnailData","useBlurSync","dataUri","imageSrc","prevImageSrc","decoding","userFullName","getUserFullName","getFirstLetters","fullClassName","forceShowSelf","loadFullUser","fullName","slideAnimation","currentPhotoIndex","setCurrentPhotoIndex","isFirst","isLast","profile","currentIndex","usePhotosPreload","handleProfilePhotoClick","ProfileAvatar","selectPreviousMedia","selectNextMedia","excludedClosestSelector","renderPhoto","isVerifiedIconShown","isVerified","renderPhotoTabs","aria-label","VerifiedIcon","isUserOnline","getUserStatus","canInviteUsers","isUserRightBanned","getHasAdminRight","currentIsMuted","chatUsername","handleNotificationChange","copy","entity","formattedNumber","getChatLink","printedUsername","getChatDescription","ListItem","multiline","narrow","isStatic","TABS","buildInfiniteScrollItemSelector","isGroup","hasMembersTab","areMembersHidden","canViewMembers","resolvedUserId","onProfileStateChange","setLocalMediaSearchType","searchMediaMessagesLocal","loadProfilePhotos","setActiveTab","useEffectWithPrevDeps","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContents","renderSharedMedia","noSpinner","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","renderingFor","teactOrderKey","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","renderProfileInfo","shouldRestoreHeight","onStart","onStop","big","RightSearch","Management","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","selectRightColumnContentKey","currentProfileUserId","selectedId","isChatSelected","toggleChatInfo","closeLocalTextSearch","closePollResults","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","UserInfo","isOverlaying","close","GroupType","handleSelectChatMember","memberId","isPromoted","onChatMemberSelect","prevContentKey","MediaViewer","Errors","ForwardPicker","SafeLinkModal","HistoryCalendar","rightColumnAnimationTimeout","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasErrors","isHistoryCalendarOpen","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","middleColumnTransitionClassNames","rightColumnTransitionClassNames","stopEvent","initialUnread","clearInterval","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","onDrop","onDragOver","initApi"],"mappings":"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","file":"4.e53a5334dc40e37d0bc0.js","sourcesContent":["import { addReducer, getDispatch, setGlobal } from '../../../lib/teact/teactn';\nimport {\n  exitMessageSelectMode,\n  updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\nwindow.addEventListener('popstate', (e) => {\n  if (!e.state) {\n    return;\n  }\n\n  const { chatId: id, threadId, messageListType: type } = e.state;\n\n  getDispatch().openChat({\n    id, threadId, type, noPushState: true,\n  });\n});\n\naddReducer('openChat', (global, actions, payload) => {\n  const {\n    id, threadId = -1, type = 'thread', noPushState,\n  } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    global = exitMessageSelectMode(global);\n\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n\n    setGlobal(global);\n\n    if (!noPushState) {\n      window.history.pushState({ chatId: id, threadId, messageListType: type }, '');\n    }\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type);\n});\n\naddReducer('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddReducer('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId, selectIsViewportNewest, selectReplyingToId,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\n\nconst FOCUS_DURATION = 2000;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\n\nlet blurTimeout: number | undefined;\n\naddReducer('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddReducer('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddReducer('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddReducer('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddReducer('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat && chat.lastMessage ? chat.lastMessage.id : undefined;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo ? threadInfo.lastMessageId : undefined;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddReducer('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n  } = payload!;\n\n  return {\n    ...global,\n    mediaViewer: {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    },\n    forwardMessages: {},\n  };\n});\n\naddReducer('closeMediaViewer', (global) => {\n  return {\n    ...global,\n    mediaViewer: {},\n  };\n});\n\naddReducer('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n    },\n  };\n});\n\naddReducer('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {},\n  };\n});\n\naddReducer('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      const newGlobal = getGlobal();\n\n      setGlobal({\n        ...newGlobal,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    setGlobal({\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    });\n  }\n});\n\naddReducer('closePollResults', (global) => {\n  setGlobal({\n    ...global,\n    pollResults: {},\n  });\n});\n\naddReducer('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat && chat.lastMessage ? chat.lastMessage.id : undefined;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo ? threadInfo.lastMessageId : undefined;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddReducer('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids && ids.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight);\n  global = updateFocusDirection(global, undefined);\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddReducer('openForwardMenu', (global, actions, payload) => {\n  const { fromChatId, messageIds, groupedId } = payload!;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n    },\n  };\n});\n\naddReducer('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddReducer('setForwardChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddReducer('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddReducer('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddReducer('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddReducer('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddReducer('exitMessageSelectMode', exitMessageSelectMode);\n\naddReducer('openPollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: true,\n  };\n});\n\naddReducer('closePollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: false,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddReducer('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddReducer('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddReducer('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddReducer('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\n\naddReducer('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddReducer('closeLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n});\n\naddReducer('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddReducer('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { updateSelectedUserId } from '../../reducers';\n\naddReducer('openUserInfo', (global, actions, payload) => {\n  const { id } = payload!;\n\n  actions.openChat({ id });\n});\n\nconst clearSelectedUserId = (global: GlobalState) => updateSelectedUserId(global, undefined);\n\naddReducer('openChat', clearSelectedUserId);\n","import { addReducer } from '../../../lib/teact/teactn';\nimport { ISettings, IThemeSettings, ThemeKey } from '../../../types';\nimport { replaceSettings, replaceThemeSettings } from '../../reducers';\n\naddReducer('setSettingOption', (global, actions, payload?: Partial<ISettings>) => {\n  return replaceSettings(global, payload);\n});\n\naddReducer('setThemeSettings', (global, actions, payload: { theme: ThemeKey } & Partial<IThemeSettings>) => {\n  const { theme, ...settings } = payload;\n\n  return replaceThemeSettings(global, theme, settings);\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { IS_MOBILE_SCREEN } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectCurrentMessageList } from '../../selectors';\n\nconst MAX_STORED_EMOJIS = 18; // Represents two rows of recent emojis\n\naddReducer('toggleChatInfo', (global) => {\n  return {\n    ...global,\n    isChatInfoShown: !global.isChatInfoShown,\n  };\n});\n\naddReducer('toggleManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddReducer('closeManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddReducer('openChat', (global, actions, payload) => {\n  if (!IS_MOBILE_SCREEN) {\n    return undefined;\n  }\n\n  const { id } = payload!;\n\n  return {\n    ...global,\n    isLeftColumnShown: id === undefined,\n  };\n});\n\naddReducer('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddReducer('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload!;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddReducer('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload!;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: 0,\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddReducer('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('dismissNotification', (global) => {\n  const newNotifications = [...global.notifications];\n\n  newNotifications.pop();\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('showError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if (!getReadableErrorText(error)) {\n    return global;\n  }\n\n  const newErrors = [...global.errors];\n  const existingErrorIndex = newErrors.findIndex((err) => err.message === error.message);\n  if (existingErrorIndex !== -1) {\n    newErrors.splice(existingErrorIndex, 1);\n  }\n\n  newErrors.push(error);\n\n  return {\n    ...global,\n    errors: newErrors,\n  };\n});\n\naddReducer('dismissError', (global) => {\n  const newErrors = [...global.errors];\n\n  newErrors.pop();\n\n  return {\n    ...global,\n    errors: newErrors,\n  };\n});\n\naddReducer('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddReducer('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddReducer('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\nimport {\n  clearPayment, closeInvoice,\n} from '../../reducers';\n\naddReducer('openPaymentModal', (global, actions, payload) => {\n  const { messageId } = payload;\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      messageId,\n      isPaymentModalOpen: true,\n    },\n  };\n});\n\naddReducer('closePaymentModal', (global) => {\n  const newGlobal = clearPayment(global);\n  return closeInvoice(newGlobal);\n});\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiUser, ApiChatFolder, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ChatCreationProgress, ManagementProgress } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  ARCHIVED_FOLDER_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  CHAT_LIST_LOAD_SLICE,\n  RE_TME_INVITE_LINK,\n  RE_TME_LINK,\n  TIPS_USERNAME,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addChats,\n  addUsers,\n  replaceThreadParam,\n  updateChatListIds,\n  updateChats,\n  updateChat,\n  updateChatListSecondaryInfo,\n  updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChat,\n  selectUser,\n  selectChatListType,\n  selectIsChatPinned,\n  selectChatFolder,\n  selectSupportChat,\n  selectChatByUsername,\n  selectThreadTopMessageId,\n  selectCurrentMessageList,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport {\n  isChatSummaryOnly, isChatArchived, prepareChatList, isChatBasicGroup,\n} from '../../helpers';\n\nconst TOP_CHATS_PRELOAD_PAUSE = 100;\n// We expect this ID does not exist\nconst TMP_CHAT_ID = -1;\n\nconst runThrottledForLoadChats = throttle((cb) => cb(), 1000, true);\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddReducer('preloadTopChatMessages', (global, actions) => {\n  (async () => {\n    const preloadedChatIds: number[] = [];\n\n    for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n      await pause(TOP_CHATS_PRELOAD_PAUSE);\n\n      const {\n        byId,\n        listIds: { active: listIds },\n        orderedPinnedIds: { active: orderedPinnedIds },\n      } = getGlobal().chats;\n      if (!listIds) {\n        return;\n      }\n\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n      const { pinnedChats, otherChats } = prepareChatList(byId, listIds, orderedPinnedIds);\n      const topChats = [...pinnedChats, ...otherChats];\n      const chatToPreload = topChats.find(({ id }) => id !== currentChatId && !preloadedChatIds.includes(id));\n      if (!chatToPreload) {\n        return;\n      }\n\n      preloadedChatIds.push(chatToPreload.id);\n\n      actions.loadViewportMessages({ chatId: chatToPreload.id, threadId: MAIN_THREAD_ID });\n    }\n  })();\n});\n\naddReducer('openChat', (global, actions, payload) => {\n  const { id, threadId } = payload!;\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat && chat.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      actions.requestThreadInfoUpdate({ chatId: id, threadId });\n    }\n  }\n});\n\naddReducer('openSupportChat', (global, actions) => {\n  const chat = selectSupportChat(global);\n\n  actions.openChat({ id: chat ? chat.id : TMP_CHAT_ID });\n\n  if (chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchChat', { type: 'support' });\n    if (result) {\n      actions.openChat({ id: result.chatId });\n    }\n  })();\n});\n\naddReducer('openTipsChat', (global, actions) => {\n  actions.openChatByUsername({ username: TIPS_USERNAME });\n});\n\naddReducer('loadMoreChats', (global, actions, payload) => {\n  const { listType = 'active' } = payload!;\n  const listIds = global.chats.listIds[listType as ('active' | 'archived')];\n  const isFullyLoaded = global.chats.isFullyLoaded[listType as ('active' | 'archived')];\n\n  if (isFullyLoaded) {\n    return;\n  }\n\n  const oldestChat = listIds\n    ? listIds\n      .map((id) => global.chats.byId[id])\n      .filter((chat) => Boolean(chat && chat.lastMessage) && !selectIsChatPinned(global, chat.id))\n      .sort((chat1, chat2) => (chat1.lastMessage!.date - chat2.lastMessage!.date))[0]\n    : undefined;\n\n  if (oldestChat) {\n    runThrottledForLoadChats(() => loadChats(listType, oldestChat.id, oldestChat.lastMessage!.date));\n  } else {\n    runThrottledForLoadChats(() => loadChats(listType));\n  }\n});\n\naddReducer('loadFullChat', (global, actions, payload) => {\n  const { chatId, force } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(chat);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(chat));\n  }\n});\n\naddReducer('loadTopChats', () => {\n  runThrottledForLoadTopChats(() => loadChats('active'));\n});\n\naddReducer('requestChatUpdate', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', chat);\n});\n\naddReducer('updateChatMutedState', (global, actions, payload) => {\n  const { chatId, isMuted } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatMutedState', { chat, isMuted });\n});\n\naddReducer('createChannel', (global, actions, payload) => {\n  const {\n    title, about, photo, memberIds,\n  } = payload!;\n\n  const members = (memberIds as number[])\n    .map((id: number) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createChannel(title, members, about, photo);\n});\n\naddReducer('joinChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (channelId && accessHash) {\n    void callApi('joinChannel', { channelId, accessHash });\n  }\n});\n\naddReducer('leaveChannel', (global, actions, payload) => {\n  (async () => {\n    const { chatId } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const { id: channelId, accessHash } = chat;\n\n    if (channelId && accessHash) {\n      await callApi('leaveChannel', { channelId, accessHash });\n    }\n\n    actions.openChat({ id: undefined });\n  })();\n});\n\naddReducer('deleteChannel', (global, actions, payload) => {\n  (async () => {\n    const { chatId } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const { id: channelId, accessHash } = chat;\n\n    if (channelId && accessHash) {\n      await callApi('deleteChannel', { channelId, accessHash });\n    }\n\n    actions.openChat({ id: undefined });\n  })();\n});\n\naddReducer('createGroupChat', (global, actions, payload) => {\n  const { title, memberIds, photo } = payload!;\n  const members = (memberIds as number[])\n    .map((id: number) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createGroupChat(title, members, photo);\n});\n\naddReducer('toggleChatPinned', (global, actions, payload) => {\n  const { id, folderId } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddReducer('toggleChatArchived', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddReducer('loadChatFolders', () => {\n  void loadChatFolders();\n});\n\naddReducer('loadRecommendedChatFolders', () => {\n  void loadRecommendedChatFolders();\n});\n\naddReducer('editChatFolder', (global, actions, payload) => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddReducer('addChatFolder', (global, actions, payload) => {\n  const { folder } = payload!;\n  const { orderedIds } = global.chatFolders;\n  const maxId = orderedIds && orderedIds.length ? Math.max.apply(Math.max, orderedIds) : ARCHIVED_FOLDER_ID;\n\n  void createChatFolder(folder, maxId);\n});\n\naddReducer('deleteChatFolder', (global, actions, payload) => {\n  const { id } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void deleteChatFolder(id);\n  }\n});\n\naddReducer('toggleChatUnread', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddReducer('openTelegramLink', (global, actions, payload) => {\n  const { url } = payload!;\n  let match = RE_TME_INVITE_LINK.exec(url);\n\n  if (match) {\n    const hash = match[1];\n\n    (async () => {\n      const chat = await callApi('openChatByInvite', hash);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    })();\n  } else {\n    match = RE_TME_LINK.exec(url)!;\n\n    const username = match[1];\n    const channelPostId = match[2] ? Number(match[2]) : undefined;\n\n    void openChatByUsername(actions, username, channelPostId);\n  }\n});\n\naddReducer('openChatByUsername', (global, actions, payload) => {\n  const { username } = payload!;\n\n  void openChatByUsername(actions, username);\n});\n\naddReducer('togglePreHistoryHidden', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  let chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    void callApi('togglePreHistoryHidden', { chat, isEnabled });\n  })();\n});\n\naddReducer('updateChatDefaultBannedRights', (global, actions, payload) => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddReducer('updateChatMemberBannedRights', (global, actions, payload) => {\n  const { chatId, userId, bannedRights } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n    const isBanned = !!bannedRights.viewMessages;\n    const isUnblocked = !Object.keys(bannedRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(members && isBanned && {\n          members: members.filter((m) => m.userId !== userId),\n        }),\n        ...(members && !isBanned && {\n          members: members.map((m) => (\n            m.userId === userId\n              ? { ...m, bannedRights }\n              : m\n          )),\n        }),\n        ...(isUnblocked && kickedMembers && {\n          kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChatAdmin', (global, actions, payload) => {\n  const {\n    chatId, userId, adminRights, customTitle,\n  } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatAdmin', {\n      chat, user, adminRights, customTitle,\n    });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { adminMembers } = chatAfterUpdate.fullInfo;\n\n    const isDismissed = !Object.keys(adminRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(adminMembers && isDismissed && {\n          adminMembers: adminMembers.filter((m) => m.userId !== userId),\n        }),\n        ...(adminMembers && !isDismissed && {\n          adminMembers: adminMembers.map((m) => (\n            m.userId === userId\n              ? { ...m, adminRights, customTitle }\n              : m\n          )),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChat', (global, actions, payload) => {\n  const {\n    chatId, title, about, photo,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n    await Promise.all([\n      chat.title !== title\n        ? callApi('updateChatTitle', chat, title)\n        : undefined,\n      chat.fullInfo && chat.fullInfo.about !== about\n        ? callApi('updateChatAbout', chat, about)\n        : undefined,\n      photo\n        ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n        : undefined,\n    ]);\n\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n  })();\n});\n\naddReducer('toggleSignatures', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddReducer('loadGroupsForDiscussion', () => {\n  (async () => {\n    const groups = await callApi('fetchGroupsForDiscussion');\n    if (!groups) {\n      return;\n    }\n\n    const addedById = groups.reduce((result, group) => {\n      if (group) {\n        result[group.id] = group;\n      }\n\n      return result;\n    }, {} as Record<number, ApiChat>);\n\n    const global = addChats(getGlobal(), addedById);\n    setGlobal({\n      ...global,\n      chats: {\n        ...global.chats,\n        forDiscussionIds: Object.keys(addedById).map(Number),\n      },\n    });\n  })();\n});\n\naddReducer('linkDiscussionGroup', (global, actions, payload) => {\n  const { channelId, chatId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  let chat = selectChat(global, chatId);\n  if (!channel || !chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    let { fullInfo } = chat;\n    if (!fullInfo) {\n      const fullChat = await callApi('fetchFullChat', chat);\n      if (!fullChat) {\n        return;\n      }\n\n      fullInfo = fullChat.fullInfo;\n    }\n\n    if (fullInfo.isPreHistoryHidden) {\n      await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n    }\n\n    void callApi('setDiscussionGroup', { channel, chat });\n  })();\n});\n\naddReducer('unlinkDiscussionGroup', (global, actions, payload) => {\n  const { channelId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo && channel.fullInfo.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  (async () => {\n    await callApi('setDiscussionGroup', { channel });\n    if (chat) {\n      loadFullChat(chat);\n    }\n  })();\n});\n\n\naddReducer('setActiveChatFolder', (global, actions, payload) => {\n  return {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      activeChatFolder: payload,\n    },\n  };\n});\n\naddReducer('loadMoreMembers', (global) => {\n  (async () => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    if (!chat || isChatBasicGroup(chat)) {\n      return;\n    }\n\n    const offset = (chat.fullInfo && chat.fullInfo.members && chat.fullInfo.members.length) || undefined;\n    const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n    if (!result) {\n      return;\n    }\n\n    const { members, users } = result;\n    if (!members || !members.length) {\n      return;\n    }\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n    global = updateChat(global, chat.id, {\n      fullInfo: {\n        ...chat.fullInfo,\n        members: [\n          ...((chat.fullInfo || {}).members || []),\n          ...(members || []),\n        ],\n      },\n    });\n    setGlobal(global);\n  })();\n});\n\nasync function loadChats(listType: 'active' | 'archived', offsetId?: number, offsetDate?: number) {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: getGlobal().chats.orderedPinnedIds[listType] === undefined,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChatListIds(global, listType, chatIds);\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  Object.keys(result.draftsById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId],\n    );\n  });\n\n  Object.keys(result.replyingToById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nasync function loadFullChat(chat: ApiChat) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return;\n  }\n\n  const { users, fullInfo } = result;\n\n  let global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n  global = updateChat(global, chat.id, { fullInfo });\n\n  setGlobal(global);\n}\n\nasync function createChannel(title: string, users: ApiUser[], about?: string, photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChannel = await callApi('createChannel', { title, about, users });\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  let global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: channelId });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n}\n\nasync function createGroupChat(title: string, users: ApiUser[], photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChat = await callApi('createGroupChat', { title, users });\n  if (!createdChat) {\n    return;\n  }\n\n  const { id: chatId } = createdChat;\n\n  let global = getGlobal();\n  global = updateChat(global, chatId, createdChat);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: chatId });\n\n  if (chatId && photo) {\n    await callApi('editChatPhoto', { chatId, photo });\n  }\n}\n\nasync function loadChatFolders() {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    });\n  }\n}\n\nasync function loadRecommendedChatFolders() {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    });\n  }\n}\n\nasync function createChatFolder(folder: ApiChatFolder, maxId: number) {\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    });\n  }\n}\n\nasync function deleteChatFolder(id: number) {\n  await callApi('deleteChatFolder', id);\n}\n\nasync function openChatByUsername(\n  actions: GlobalActions,\n  username: string,\n  channelPostId?: number,\n) {\n  const global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    if (channelPostId) {\n      actions.focusMessage({ chatId: localChat.id, messageId: channelPostId });\n    } else {\n      actions.openChat({ id: localChat.id });\n    }\n    return;\n  }\n\n  const previousChat = selectCurrentChat(global);\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await callApi('getChatByUsername', username);\n  if (!chat) {\n    if (previousChat) {\n      actions.openChat({ id: previousChat.id });\n    }\n\n    actions.showNotification({ message: 'User does not exist' });\n\n    return;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  if (channelPostId) {\n    actions.focusMessage({ chatId: chat.id, messageId: channelPostId });\n  } else {\n    actions.openChat({ id: chat.id });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiVideo,\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MAX_MEDIA_FILES_FOR_ALBUM, MESSAGE_LIST_SLICE } from '../../../config';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport { areSortedArraysIntersecting, buildCollectionByKey, split } from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n} from '../../selectors';\nimport { rafPromise, throttle } from '../../../util/schedulers';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runThrottledForMarkRead = throttle((cb) => cb(), 1000, true);\n\naddReducer('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    // Let reducer return and update global\n    await Promise.resolve();\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddReducer('loadMessage', (global, actions, payload) => {\n  const { chatId, messageId, replyOriginForId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void loadMessage(chat, messageId, replyOriginForId);\n});\n\naddReducer('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n  };\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments, MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('editMessage', (global, actions, payload) => {\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddReducer('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(message.previousLocalId || message.id);\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddReducer('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'draft', draft);\n});\n\naddReducer('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n});\n\naddReducer('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddReducer('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddReducer('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddReducer('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteHistory', (global, actions, payload) => {\n  (async () => {\n    const { chatId, shouldDeleteForAll } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const maxId = chat.lastMessage && chat.lastMessage.id;\n\n    await callApi('deleteHistory', { chat, shouldDeleteForAll, maxId });\n\n    actions.openChat({ id: undefined });\n  })();\n});\n\naddReducer('markMessageListRead', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  const { maxId } = payload!;\n\n  runThrottledForMarkRead(() => {\n    void callApi('markMessageListRead', { chat, threadId, maxId });\n  });\n});\n\naddReducer('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddReducer('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddReducer('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddReducer('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddReducer('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddReducer('forwardMessages', (global) => {\n  const { fromChatId, messageIds, toChatId } = global.forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (fromChat && toChat && messages && messages.length) {\n    void forwardMessages(fromChat, toChat, messages);\n  }\n});\n\naddReducer('loadScheduledHistory', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { hash } = global.scheduledMessages.byChatId[chat.id] || {};\n\n  void loadScheduledHistory(chat, hash);\n});\n\naddReducer('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddReducer('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddReducer('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text: string;\n  entities: ApiMessageEntity[];\n  replyingTo: number;\n  attachment: ApiAttachment;\n  sticker: ApiSticker;\n  gif: ApiVideo;\n  poll: ApiNewPoll;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nfunction forwardMessages(\n  fromChat: ApiChat,\n  toChat: ApiChat,\n  messages: ApiMessage[],\n) {\n  callApi('forwardMessages', {\n    fromChat,\n    toChat,\n    messages,\n  });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const isUnique = (v: number, i: number, a: number[]) => a.indexOf(v) === i;\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: [\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ].filter(isUnique),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddReducer('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\naddReducer('loadMessageLink', (global, actions, payload) => {\n  const { messageId, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchMessageLink', { chat, message });\n\n    if (result) {\n      copyTextToClipboard(result.link);\n    }\n  })();\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat, historyHash?: number) {\n  const result = await callApi('fetchScheduledHistory', { chat, hash: historyHash });\n  if (!result) {\n    return;\n  }\n\n  const { hash, messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId, hash);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectEmojiKeywords, selectStickerSet } from '../../selectors';\n\nconst ADDED_SETS_THROTTLE = 500;\nconst ADDED_SETS_THROTTLE_CHUNK = 50;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('loadStickerSets', (global) => {\n  const { hash } = global.stickers.added || {};\n  void loadStickerSets(hash);\n});\n\naddReducer('loadAddedStickers', (global, actions) => {\n  const { setIds: addedSetIds } = global.stickers.added;\n  if (!addedSetIds || !addedSetIds.length) {\n    return;\n  }\n\n  (async () => {\n    for (let i = 0; i < addedSetIds.length; i++) {\n      actions.loadStickers({ stickerSetId: addedSetIds[i] });\n\n      if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n        await pause(ADDED_SETS_THROTTLE);\n      }\n    }\n  })();\n});\n\naddReducer('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddReducer('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddReducer('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddReducer('loadStickers', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  let { stickerSetAccessHash } = payload!;\n\n  if (!stickerSetAccessHash) {\n    const stickerSet = selectStickerSet(global, stickerSetId);\n    if (!stickerSet) {\n      return;\n    }\n\n    stickerSetAccessHash = stickerSet.accessHash;\n  }\n\n  void loadStickers(stickerSetId, stickerSetAccessHash);\n});\n\naddReducer('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n});\n\naddReducer('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddReducer('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddReducer('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddReducer('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddReducer('loadEmojiKeywords', (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n  let currentEmojiKeywords = selectEmojiKeywords(global, language);\n\n  if (currentEmojiKeywords && currentEmojiKeywords.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  (async () => {\n    const emojiKeywords = await callApi('fetchEmojiKeywords', {\n      language,\n      fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n    });\n\n    global = getGlobal();\n    currentEmojiKeywords = selectEmojiKeywords(global, language);\n\n    if (!emojiKeywords) {\n      setGlobal({\n        ...global,\n        emojiKeywords: {\n          ...global.emojiKeywords,\n          [language]: {\n            ...currentEmojiKeywords,\n            isLoading: false,\n          },\n        },\n      });\n\n      return;\n    }\n\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          isLoading: false,\n          version: emojiKeywords.version,\n          keywords: {\n            ...(currentEmojiKeywords && currentEmojiKeywords.keywords),\n            ...emojiKeywords.keywords,\n          },\n        },\n      },\n    });\n  })();\n});\n\nasync function loadStickerSets(hash = 0) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash = 0) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash = 0) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash = 0) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetId: string, accessHash: string) {\n  const stickerSet = await callApi('fetchStickers', { stickerSetId, accessHash });\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  let global = getGlobal();\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddReducer('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddReducer('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload!;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddReducer('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\nasync function searchStickers(query: string, hash = 0) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash = 0) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash = 0) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddReducer('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const newGlobal = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(newGlobal);\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddReducer('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const { nextOffsetId } = (resultsByType && resultsByType[type as ApiGlobalMessageSearchType]) || {};\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalUsers.map(({ id }) => id),\n      userIds: globalChats.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chatOrUser: chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addReducer, getGlobal, setGlobal, getDispatch,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiFormattedText, ApiUser, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  CHAT_LIST_LOAD_SLICE, DEBUG, MESSAGE_LIST_SLICE,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  replaceChatListIds,\n  replaceChats,\n  replaceUsers,\n  updateUsers,\n  updateChats,\n  updateChatListSecondaryInfo,\n  updateThreadInfos,\n  replaceThreadParam,\n} from '../../reducers';\nimport {\n  selectUser, selectChat, selectCurrentMessageList, selectDraft, selectChatMessage,\n} from '../../selectors';\nimport { isChatPrivate } from '../../helpers';\n\naddReducer('sync', (global, actions) => {\n  void sync(actions.afterSync);\n});\n\naddReducer('afterSync', (global, actions) => {\n  void afterSync(actions);\n});\n\nasync function sync(afterSyncCallback: () => void) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  await callApi('fetchCurrentUser');\n\n  // This fetches only active chats and clears archived chats, which will be fetched in `afterSync`\n  const savedUsers = await loadAndReplaceChats();\n  await loadAndReplaceMessages(savedUsers);\n\n  setGlobal({\n    ...getGlobal(),\n    lastSyncTime: Date.now(),\n  });\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH SYNC');\n  }\n\n  afterSyncCallback();\n}\n\nasync function afterSync(actions: GlobalActions) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START AFTER-SYNC');\n  }\n\n  actions.loadFavoriteStickers();\n\n  await Promise.all([\n    loadAndUpdateUsers(),\n    loadAndReplaceArchivedChats(),\n  ]);\n\n  await callApi('fetchCurrentUser');\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH AFTER-SYNC');\n  }\n}\n\nasync function loadAndReplaceChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    withPinned: true,\n  });\n  if (!result) {\n    return undefined;\n  }\n\n  let global = getGlobal();\n\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  const { currentUserId } = global;\n\n  const savedPrivateChatIds = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n    ...(currentUserId ? [currentUserId] : []),\n  ];\n\n  const savedUsers = savedPrivateChatIds\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  const savedChats = savedPrivateChatIds\n    .map((id) => selectChat(global, id))\n    .filter<ApiChat>(Boolean as any);\n\n  const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n  if (currentChatId) {\n    const selectedChat = selectChat(global, currentChatId);\n    if (selectedChat && !savedPrivateChatIds.includes(currentChatId)) {\n      savedChats.push(selectedChat);\n    }\n\n    if (isChatPrivate(currentChatId)) {\n      const selectedChatUser = selectUser(global, currentChatId);\n      if (selectedChatUser && !savedPrivateChatIds.includes(currentChatId)) {\n        savedUsers.push(selectedChatUser);\n      }\n    }\n  }\n\n  savedUsers.push(...result.users);\n  savedChats.push(...result.chats);\n\n  global = replaceChats(global, buildCollectionByKey(savedChats, 'id'));\n  global = replaceChatListIds(global, 'active', result.chatIds);\n\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n    },\n  };\n\n  global = updateChatListSecondaryInfo(global, 'active', result);\n\n  Object.keys(result.draftsById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId],\n    );\n  });\n\n  Object.keys(result.replyingToById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  setGlobal(global);\n\n  if (currentChatId && !global.chats.byId[currentChatId]) {\n    getDispatch().openChat({ id: undefined });\n  }\n\n  return savedUsers;\n}\n\nasync function loadAndReplaceArchivedChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    archived: true,\n    withPinned: true,\n  });\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = replaceChatListIds(global, 'archived', result.chatIds);\n  global = updateChatListSecondaryInfo(global, 'archived', result);\n  setGlobal(global);\n}\n\nasync function loadAndReplaceMessages(savedUsers?: ApiUser[]) {\n  let areMessagesLoaded = false;\n  let users = savedUsers || [];\n\n  let global = getGlobal();\n  const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId).map(Number);\n  const draftsByChatId = draftChatIds.reduce<Record<number, ApiFormattedText>>((acc, chatId) => {\n    const draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    return draft ? { ...acc, [chatId]: draft } : acc;\n  }, {});\n\n  if (currentChatId) {\n    const result = await loadTopMessages(global.chats.byId[currentChatId]);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const byId = buildCollectionByKey(result.messages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {\n            [currentChatId]: {\n              byId,\n              threadsById: {\n                [MAIN_THREAD_ID]: {\n                  ...(currentMessageListInfo && currentMessageListInfo.threadsById[MAIN_THREAD_ID]),\n                  listedIds,\n                  viewportIds: listedIds,\n                  outlyingIds: undefined,\n                },\n              },\n            },\n          },\n        },\n      };\n\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n      users = Array.prototype.concat(users, result.users);\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', draftsByChatId[chatId]);\n  });\n\n  if (savedUsers) {\n    global = replaceUsers(global, buildCollectionByKey(users, 'id'));\n  } else if (users) {\n    // If `fetchChats` has failed for some reason, we don't have saved chats, thus we can not replace\n    global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getDispatch().closeAudioPlayer();\n  }\n}\n\nasync function loadAndUpdateUsers() {\n  let global = getGlobal();\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  if (\n    (!contactIds || !contactIds.length)\n    && (!recentlyFoundChatIds || !recentlyFoundChatIds.length)\n  ) {\n    return;\n  }\n\n  const users = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n  ].map((id) => selectUser(global, id)).filter<ApiUser>(Boolean as any);\n\n  const updatedUsers = await callApi('fetchUsers', { users });\n  if (!updatedUsers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n  setGlobal(global);\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearchPeerId,\n  selectCurrentMediaSearch, selectCurrentMessageList, selectChat, selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport { SharedMediaType } from '../../../types';\n\naddReducer('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results ? results.nextOffsetId : undefined;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo ? threadInfo.topMessageId : undefined;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddReducer('searchMediaMessagesLocal', (global) => {\n  const peerId = selectCurrentMediaSearchPeerId(global);\n  const chatOrUser = peerId\n    ? global.users.byId[peerId] || global.chats.byId[peerId]\n    : undefined;\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chatOrUser || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults ? currentResults.nextOffsetId : undefined;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chatOrUser, type, offsetId);\n});\n\naddReducer('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chatOrUser: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || (query && query !== currentSearch.query)) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalTextSearchResults(global, chatOrUser.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chatOrUser: ApiChat | ApiUser,\n  type: SharedMediaType,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type,\n    limit: SHARED_MEDIA_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalMediaSearchResults(global, chatOrUser.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\n/**\n * @param timestamp start of target date in seconds\n */\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getDispatch().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateManagement, updateManagementProgress } from '../../reducers';\nimport { selectChat, selectCurrentMessageList } from '../../selectors';\nimport { isChatBasicGroup } from '../../helpers';\n\naddReducer('checkPublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n\n    const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n    global = getGlobal();\n    global = updateManagementProgress(\n      global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n    );\n    global = updateManagement(global, chatId, { isUsernameAvailable });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    setGlobal(global);\n\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    const result = await callApi('setChatUsername', { chat, username });\n\n    global = getGlobal();\n    global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { debounce } from '../../../util/schedulers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { isChatPrivate } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectUser } from '../../selectors';\nimport {\n  addChats, addUsers, updateChat, updateManagementProgress, updateUser, updateUsers,\n} from '../../reducers';\n\nconst runDebouncedForFetchFullUser = debounce((cb) => cb(), 500, false, true);\nconst TOP_PEERS_REQUEST_COOLDOWN = 60000; // 1 min\n\naddReducer('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  runDebouncedForFetchFullUser(() => callApi('fetchFullUser', { id, accessHash }));\n});\n\naddReducer('loadUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  (async () => {\n    const updatedUsers = await callApi('fetchUsers', { users: [user] });\n    if (!updatedUsers) {\n      return;\n    }\n\n    global = getGlobal();\n    global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n    setGlobal(global);\n  })();\n});\n\naddReducer('loadTopUsers', (global) => {\n  const { hash, lastRequestedAt } = global.topPeers;\n\n  if (!lastRequestedAt || Date.now() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers(hash);\n  }\n});\n\naddReducer('loadContactList', (global) => {\n  const { hash } = global.contactList || {};\n  void loadContactList(hash);\n});\n\naddReducer('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddReducer('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted, firstName, lastName,\n  } = payload!;\n\n  void updateContact(userId, isMuted, firstName, lastName);\n});\n\naddReducer('deleteUser', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteUser(userId);\n});\n\nasync function loadTopUsers(usersHash?: number) {\n  const result = await callApi('fetchTopUsers', { hash: usersHash });\n  if (!result) {\n    return;\n  }\n\n  const { hash, ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      hash,\n      userIds: ids,\n      lastRequestedAt: Date.now(),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList(hash?: number) {\n  const contactList = await callApi('fetchContactList', { hash });\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      hash: contactList.hash,\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: number,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getDispatch().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  const result = await callApi('updateContact', { phone: user.phoneNumber, firstName, lastName });\n\n  if (result) {\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n}\n\nasync function deleteUser(userId: number) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteUser', { id, accessHash });\n}\n\naddReducer('loadProfilePhotos', (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isChatPrivate(profileId);\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n\n  (async () => {\n    const result = await callApi('fetchProfilePhotos', user, chat);\n    if (!result || !result.photos) {\n      return;\n    }\n\n    let newGlobal = getGlobal();\n    if (isPrivate) {\n      newGlobal = updateUser(newGlobal, profileId, { photos: result.photos });\n    } else {\n      newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users!, 'id'));\n      newGlobal = updateChat(newGlobal, profileId, { photos: result.photos });\n    }\n\n    setGlobal(newGlobal);\n  })();\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport {\n  ApiPrivacyKey, PrivacyVisibility, ProfileEditProgress, IInputPrivacyRules, IInputPrivacyContact,\n  UPLOADING_WALLPAPER_SLUG,\n} from '../../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { selectUser } from '../../selectors';\nimport {\n  addUsers, addBlockedContact, updateChats, updateUser, removeBlockedContact, replaceSettings, updateNotifySettings,\n} from '../../reducers';\nimport { isChatPrivate } from '../../helpers';\n\naddReducer('updateProfile', (global, actions, payload) => {\n  const {\n    photo, firstName, lastName, bio: about, username,\n  } = payload!;\n\n  (async () => {\n    const { currentUserId } = global;\n    if (!currentUserId) {\n      return;\n    }\n\n    setGlobal({\n      ...getGlobal(),\n      profileEdit: {\n        progress: ProfileEditProgress.InProgress,\n      },\n    });\n\n    if (photo) {\n      await callApi('updateProfilePhoto', photo);\n    }\n\n    if (firstName || lastName || about) {\n      const result = await callApi('updateProfile', { firstName, lastName, about });\n      if (result) {\n        global = getGlobal();\n        const currentUser = currentUserId && selectUser(global, currentUserId);\n\n        if (currentUser) {\n          setGlobal(updateUser(\n            global,\n            currentUser.id,\n            {\n              firstName,\n              lastName,\n              fullInfo: {\n                ...currentUser.fullInfo,\n                bio: about,\n              },\n            },\n          ));\n        }\n      }\n    }\n\n    if (username) {\n      const result = await callApi('updateUsername', username);\n      if (result && currentUserId) {\n        setGlobal(updateUser(getGlobal(), currentUserId, { username }));\n      }\n    }\n\n    setGlobal({\n      ...getGlobal(),\n      profileEdit: {\n        progress: ProfileEditProgress.Complete,\n      },\n    });\n  })();\n});\n\naddReducer('checkUsername', (global, actions, payload) => {\n  const { username } = payload!;\n\n  (async () => {\n    // No need to check the username if profile update is already in progress\n    if (global.profileEdit && global.profileEdit.progress === ProfileEditProgress.InProgress) {\n      return;\n    }\n\n    setGlobal({\n      ...global,\n      profileEdit: {\n        progress: global.profileEdit ? global.profileEdit.progress : ProfileEditProgress.Idle,\n        isUsernameAvailable: undefined,\n      },\n    });\n\n    const isUsernameAvailable = await callApi('checkUsername', username);\n\n    global = getGlobal();\n    setGlobal({\n      ...global,\n      profileEdit: {\n        ...global.profileEdit!,\n        isUsernameAvailable,\n      },\n    });\n  })();\n});\n\naddReducer('loadWallpapers', () => {\n  (async () => {\n    const result = await callApi('fetchWallpapers', 0);\n    if (!result) {\n      return;\n    }\n\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      settings: {\n        ...global.settings,\n        loadedWallpapers: result.wallpapers,\n      },\n    });\n  })();\n});\n\naddReducer('uploadWallpaper', (global, actions, payload) => {\n  const file = payload;\n  const previewBlobUrl = URL.createObjectURL(file);\n\n  setGlobal({\n    ...global,\n    settings: {\n      ...global.settings,\n      loadedWallpapers: [\n        {\n          slug: UPLOADING_WALLPAPER_SLUG,\n          document: {\n            fileName: '',\n            size: file.size,\n            mimeType: file.type,\n            previewBlobUrl,\n          },\n        },\n        ...(global.settings.loadedWallpapers || []),\n      ],\n    },\n  });\n\n  (async () => {\n    const result = await callApi('uploadWallpaper', file);\n    if (!result) {\n      return;\n    }\n\n    const { wallpaper } = result;\n\n    global = getGlobal();\n    if (!global.settings.loadedWallpapers) {\n      return;\n    }\n\n    const firstWallpaper = global.settings.loadedWallpapers[0];\n    if (!firstWallpaper || firstWallpaper.slug !== UPLOADING_WALLPAPER_SLUG) {\n      return;\n    }\n\n    const withLocalMedia = {\n      ...wallpaper,\n      document: {\n        ...wallpaper.document,\n        previewBlobUrl,\n      },\n    };\n\n    setGlobal({\n      ...global,\n      settings: {\n        ...global.settings,\n        loadedWallpapers: [\n          withLocalMedia,\n          ...global.settings.loadedWallpapers.slice(1),\n        ],\n      },\n    });\n  })();\n});\n\naddReducer('loadBlockedContacts', () => {\n  (async () => {\n    const result = await callApi('fetchBlockedContacts');\n\n    if (!result) {\n      return;\n    }\n\n    let newGlobal = getGlobal();\n\n    if (result.users && result.users.length) {\n      newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users, 'id'));\n    }\n    if (result.chats && result.chats.length) {\n      newGlobal = updateChats(newGlobal, buildCollectionByKey(result.chats, 'id'));\n    }\n\n    newGlobal = {\n      ...newGlobal,\n      blocked: {\n        ...newGlobal.blocked,\n        ids: [...(newGlobal.blocked.ids || []), ...result.blockedIds],\n        totalCount: result.totalCount,\n      },\n    };\n\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('blockContact', (global, actions, payload) => {\n  const { contactId } = payload!;\n\n  (async () => {\n    const result = await callApi('blockContact', contactId);\n    if (!result) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal(addBlockedContact(newGlobal, contactId));\n  })();\n});\n\naddReducer('unblockContact', (global, actions, payload) => {\n  const { contactId } = payload!;\n  let accessHash: string | undefined;\n  const isPrivate = isChatPrivate(contactId);\n\n  if (isPrivate) {\n    const user = selectUser(global, contactId);\n    if (!user) {\n      return;\n    }\n\n    accessHash = user.accessHash;\n  }\n\n  (async () => {\n    const result = await callApi('unblockContact', contactId, accessHash);\n    if (!result) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal(removeBlockedContact(newGlobal, contactId));\n  })();\n});\n\naddReducer('loadAuthorizations', () => {\n  (async () => {\n    const result = await callApi('fetchAuthorizations');\n    if (!result) {\n      return;\n    }\n\n    setGlobal({\n      ...getGlobal(),\n      activeSessions: result,\n    });\n  })();\n});\n\naddReducer('terminateAuthorization', (global, actions, payload) => {\n  const { hash } = payload!;\n\n  (async () => {\n    const result = await callApi('terminateAuthorization', hash);\n    if (!result) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal({\n      ...newGlobal,\n      activeSessions: newGlobal.activeSessions.filter((session) => session.hash !== hash),\n    });\n  })();\n});\n\naddReducer('terminateAllAuthorizations', () => {\n  (async () => {\n    const result = await callApi('terminateAllAuthorizations');\n    if (!result) {\n      return;\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      activeSessions: global.activeSessions.filter((session) => session.isCurrent),\n    });\n  })();\n});\n\naddReducer('loadNotificationExceptions', () => {\n  callApi('fetchNotificationExceptions');\n});\n\naddReducer('loadNotificationSettings', () => {\n  (async () => {\n    const result = await callApi('fetchNotificationSettings');\n    if (!result) {\n      return;\n    }\n\n    setGlobal(replaceSettings(getGlobal(), result));\n  })();\n});\n\naddReducer('updateNotificationSettings', (global, actions, payload) => {\n  const { peerType, isSilent, shouldShowPreviews } = payload!;\n\n  (async () => {\n    const result = await callApi('updateNotificationSettings', peerType, { isSilent, shouldShowPreviews });\n\n    if (!result) {\n      return;\n    }\n\n    setGlobal(updateNotifySettings(getGlobal(), peerType, isSilent, shouldShowPreviews));\n  })();\n});\n\naddReducer('updateContactSignUpNotification', (global, actions, payload) => {\n  const { isSilent } = payload!;\n\n  (async () => {\n    const result = await callApi('updateContactSignUpNotification', isSilent);\n    if (!result) {\n      return;\n    }\n\n    setGlobal(replaceSettings(getGlobal(), { hasContactJoinedNotifications: !isSilent }));\n  })();\n});\n\naddReducer('loadLanguages', () => {\n  (async () => {\n    const result = await callApi('fetchLanguages');\n    if (!result) {\n      return;\n    }\n\n    setGlobal(replaceSettings(getGlobal(), { languages: result }));\n  })();\n});\n\naddReducer('loadPrivacySettings', () => {\n  (async () => {\n    const [\n      phoneNumberSettings, lastSeenSettings, profilePhotoSettings, forwardsSettings, chatInviteSettings,\n    ] = await Promise.all([\n      callApi('fetchPrivacySettings', 'phoneNumber'),\n      callApi('fetchPrivacySettings', 'lastSeen'),\n      callApi('fetchPrivacySettings', 'profilePhoto'),\n      callApi('fetchPrivacySettings', 'forwards'),\n      callApi('fetchPrivacySettings', 'chatInvite'),\n    ]);\n\n    if (\n      !phoneNumberSettings || !lastSeenSettings || !profilePhotoSettings || !forwardsSettings || !chatInviteSettings\n    ) {\n      return;\n    }\n\n    const global = getGlobal();\n\n    global.settings.privacy.phoneNumber = phoneNumberSettings;\n    global.settings.privacy.lastSeen = lastSeenSettings;\n    global.settings.privacy.profilePhoto = profilePhotoSettings;\n    global.settings.privacy.forwards = forwardsSettings;\n    global.settings.privacy.chatInvite = chatInviteSettings;\n\n    setGlobal(global);\n  })();\n});\n\naddReducer('setPrivacyVisibility', (global, actions, payload) => {\n  const { privacyKey, visibility } = payload!;\n\n  const {\n    privacy: { [privacyKey as ApiPrivacyKey]: settings },\n  } = global.settings;\n\n  if (!settings) {\n    return;\n  }\n\n  const rules = buildInputPrivacyRules(global, {\n    visibility,\n    allowedIds: [...settings.allowUserIds, ...settings.allowChatIds],\n    deniedIds: [...settings.blockUserIds, ...settings.blockChatIds],\n  });\n\n  (async () => {\n    const result = await callApi('setPrivacySettings', privacyKey, rules);\n\n    if (result) {\n      const newGlobal = getGlobal();\n\n      newGlobal.settings.privacy[privacyKey as ApiPrivacyKey] = result;\n\n      setGlobal(newGlobal);\n    }\n  })();\n});\n\naddReducer('setPrivacySettings', (global, actions, payload) => {\n  const { privacyKey, isAllowList, contactsIds } = payload!;\n  const {\n    privacy: { [privacyKey as ApiPrivacyKey]: settings },\n  } = global.settings;\n\n  if (!settings) {\n    return;\n  }\n\n  const rules = buildInputPrivacyRules(global, {\n    visibility: settings.visibility,\n    allowedIds: isAllowList ? contactsIds : [...settings.allowUserIds, ...settings.allowChatIds],\n    deniedIds: !isAllowList ? contactsIds : [...settings.blockUserIds, ...settings.blockChatIds],\n  });\n\n  (async () => {\n    const result = await callApi('setPrivacySettings', privacyKey, rules);\n\n    if (result) {\n      const newGlobal = getGlobal();\n\n      newGlobal.settings.privacy[privacyKey as ApiPrivacyKey] = result;\n\n      setGlobal(newGlobal);\n    }\n  })();\n});\n\nfunction buildInputPrivacyRules(global: GlobalState, {\n  visibility,\n  allowedIds,\n  deniedIds,\n}: {\n  visibility: PrivacyVisibility;\n  allowedIds: number[];\n  deniedIds: number[];\n}): IInputPrivacyRules {\n  const {\n    users: { byId: usersById },\n    chats: { byId: chatsById },\n  } = global;\n\n  const rules: IInputPrivacyRules = {\n    visibility,\n  };\n  let users: IInputPrivacyContact[];\n  let chats: IInputPrivacyContact[];\n\n  const collectUsers = (userId: number) => {\n    if (!isChatPrivate(userId)) {\n      return undefined;\n    }\n    const { id, accessHash } = usersById[userId] || {};\n    if (!id) {\n      return undefined;\n    }\n\n    return { id, accessHash };\n  };\n\n  const collectChats = (userId: number) => {\n    if (isChatPrivate(userId)) {\n      return undefined;\n    }\n    const chat = chatsById[userId];\n\n    return chat ? { id: chat.id } : undefined;\n  };\n\n  if (visibility === 'contacts' || visibility === 'nobody') {\n    users = allowedIds.map(collectUsers).filter(Boolean) as IInputPrivacyContact[];\n    chats = allowedIds.map(collectChats).filter(Boolean) as IInputPrivacyContact[];\n\n    if (users.length > 0) {\n      rules.allowedUsers = users;\n    }\n    if (chats.length > 0) {\n      rules.allowedChats = chats;\n    }\n  }\n\n  if (visibility === 'everybody' || visibility === 'contacts') {\n    users = deniedIds.map(collectUsers).filter(Boolean) as IInputPrivacyContact[];\n    chats = deniedIds.map(collectChats).filter(Boolean) as IInputPrivacyContact[];\n\n    if (users.length > 0) {\n      rules.blockedUsers = users;\n    }\n    if (chats.length > 0) {\n      rules.blockedChats = chats;\n    }\n  }\n\n  return rules;\n}\n\naddReducer('updateIsOnline', (global, actions, payload) => {\n  callApi('updateIsOnline', payload);\n});\n","import { addReducer, getDispatch } from '../../../lib/teact/teactn';\n\nimport { ApiChat } from '../../../api/types';\n\nimport { RE_TME_INVITE_LINK, RE_TME_LINK } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChatMessage, selectCurrentChat } from '../../selectors';\n\naddReducer('clickInlineButton', (global, actions, payload) => {\n  const { button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.value });\n      break;\n    case 'url':\n      if (button.value.match(RE_TME_INVITE_LINK) || button.value.match(RE_TME_LINK)) {\n        actions.openTelegramLink({ url: button.value });\n      } else {\n        actions.toggleSafeLinkModal({ url: button.value });\n      }\n      break;\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, button.messageId, button.value);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal();\n      break;\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      const { messageId, value } = button;\n      if (!chat) {\n        return;\n      }\n\n      if (value) {\n        actions.getReceipt({ receiptMessageId: value, chatId: chat.id, messageId });\n      } else {\n        actions.getPaymentForm({ messageId });\n        actions.setInvoiceMessageInfo(selectChatMessage(global, chat.id, messageId));\n        actions.openPaymentModal({ messageId });\n      }\n      break;\n    }\n  }\n});\n\naddReducer('sendBotCommand', (global, actions, payload) => {\n  const { command } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  if (!currentUserId || !chat) {\n    return;\n  }\n\n  void sendBotCommand(chat, currentUserId, command);\n});\n\nasync function sendBotCommand(chat: ApiChat, currentUserId: number, command: string) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n  });\n}\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data: string) {\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n  });\n\n  if (!result || !result.message) {\n    return;\n  }\n\n  const { message, alert: isError } = result;\n\n  if (isError) {\n    getDispatch().showError({ error: { message } });\n  } else {\n    getDispatch().showNotification({ message });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddReducer('loadPasswordInfo', () => {\n  (async () => {\n    const result = await callApi('getPasswordInfo');\n    if (!result) {\n      return;\n    }\n\n    let global = getGlobal();\n    global = replaceSettings(global, { hasPassword: result.hasPassword });\n    global = updateTwoFaSettings(global, { hint: result.hint });\n    setGlobal(global);\n  })();\n});\n\naddReducer('checkPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('checkPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('clearPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('clearPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updatePassword', (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updateRecoveryEmail', (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddReducer('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { PaymentStep } from '../../../types/index';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectPaymentMessageId,\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n} from '../../selectors';\n\nimport { getStripeError } from '../../helpers/payments';\nimport { buildQueryString } from '../../../util/requestQuery';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setInvoiceMessageInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n} from '../../reducers';\n\naddReducer('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const messageId = selectPaymentMessageId(global);\n  if (!messageId) {\n    return;\n  }\n  validateRequestedInfo(messageId, requestInfo, saveInfo);\n});\n\nasync function validateRequestedInfo(messageId: number, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', { messageId, requestInfo, shouldSave });\n  if (!result) {\n    return;\n  }\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddReducer('getPaymentForm', (global, actions, payload) => {\n  const { messageId } = payload;\n  if (!messageId) {\n    return;\n  }\n  getPaymentForm(messageId);\n});\n\n\nasync function getPaymentForm(messageId: number) {\n  const result = await callApi('getPaymentForm', { messageId });\n  if (!result) {\n    return;\n  }\n  let global = setPaymentForm(getGlobal(), result);\n  let step = PaymentStep.PaymentInfo;\n  if (global.payment.invoice\n    && (global.payment.invoice.shippingAddressRequested\n    || global.payment.invoice.nameRequested\n    || global.payment.invoice.phoneRequested\n    || global.payment.invoice.emailRequested)) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n}\n\naddReducer('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  if (!messageId || !receiptMessageId || !chatId) {\n    return;\n  }\n  getReceipt(messageId, receiptMessageId, chatId);\n});\n\nasync function getReceipt(messageId: number, receiptMessageId: number, chatId: number) {\n  const result = await callApi('getReceipt', receiptMessageId);\n  if (!result) {\n    return;\n  }\n  let global = getGlobal();\n  const message = selectChatMessage(global, chatId, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddReducer('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddReducer('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddReducer('sendCredentialsInfo', (global, actions, payload) => {\n  const publishableKey = selectProviderPublishableKey(global);\n  if (!publishableKey) {\n    return;\n  }\n  const { credentials } = payload;\n  const { data } = credentials;\n  sendStipeCredentials(data, publishableKey);\n});\n\naddReducer('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const messageId = selectPaymentMessageId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const publishableKey = selectProviderPublishableKey(global);\n  const stripeCredentials = selectStripeCredentials(global);\n  if (!messageId || !publishableKey) {\n    return;\n  }\n  sendPaymentForm(messageId, {\n    save: saveCredentials,\n    data: stripeCredentials,\n  }, requestInfoId, shippingOptionId);\n});\n\nasync function sendStipeCredentials(data: {\n  cardNumber: string;\n  cardholder?: string;\n  expiryMonth: string;\n  expiryYear: string;\n  cvv: string;\n  country: string;\n  zip: string;\n},\npublishableKey: string) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  messageId: number,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    messageId, credentials, requestedInfoId, shippingOptionId,\n  });\n  if (result) {\n    const global = clearPayment(getGlobal());\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddReducer('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddReducer('setInvoiceMessageInfo', (global, actions, payload) => {\n  return setInvoiceMessageInfo(global, payload);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { showNewMessageNotification } from '../../../util/notifications';\nimport { updateAppBadge } from '../../../util/appBadge';\nimport {\n  updateChat,\n  replaceChatListIds,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectCountNotMutedUnread,\n} from '../../selectors';\nimport { throttle } from '../../../util/schedulers';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1000;\nconst runThrottledForUpdateAppBadge = throttle((cb) => cb(), CURRENT_CHAT_UNREAD_DELAY, true);\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      const newGlobal = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(newGlobal);\n\n      const unreadCount = selectCountNotMutedUnread(newGlobal);\n      runThrottledForUpdateAppBadge(() => updateAppBadge(unreadCount));\n      break;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n      break;\n    }\n\n    case 'updateChatLeave': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      const { [listType]: listIds } = global.chats.listIds;\n\n      if (listIds) {\n        global = replaceChatListIds(global, listType, listIds.filter((listId) => listId !== update.id));\n      }\n\n      global = updateChat(global, update.id, { isNotJoined: true });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatInbox': {\n      setGlobal(updateChat(global, update.id, update.chat));\n\n      break;\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        const newGlobal = getGlobal();\n        const chat = selectChat(newGlobal, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(newGlobal, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      break;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        setGlobal(updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n          ...(update.message.hasUnreadMention && {\n            unreadMentionsCount: chat.unreadMentionsCount ? chat.unreadMentionsCount + 1 : 1,\n          }),\n        }));\n      }\n\n      const unreadCount = selectCountNotMutedUnread(getGlobal());\n      updateAppBadge(unreadCount);\n      showNewMessageNotification({ chat, message, isActiveChat });\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return;\n      }\n\n      ids.forEach((id) => {\n        const chatId = 'channelId' in update ? update.channelId : selectCommonBoxChatId(global, id);\n        const chat = selectChat(global, chatId);\n        if (chat && chat.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: chat.unreadMentionsCount - 1,\n          });\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return;\n      }\n\n      setGlobal(updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      }));\n\n      break;\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      global = {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (listType) {\n        const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n        let newOrderedPinnedIds = orderedPinnedIds || [];\n        if (!isPinned) {\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n        } else if (!newOrderedPinnedIds.includes(id)) {\n          // When moving pinned chats to archive, active ordered pinned ids don't get updated\n          // (to preserve chat pinned state when it returns from archive)\n          // If user already has max pinned chats, we should check for orderedIds\n          // that don't point to listed chats\n          if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n            const listIds = global.chats.listIds.active;\n            newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n          }\n\n          newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n        }\n\n        global = {\n          ...global,\n          chats: {\n            ...global.chats,\n            orderedPinnedIds: {\n              ...global.chats.orderedPinnedIds,\n              [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n            },\n          },\n        };\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      setGlobal(updateChatListType(global, id, folderId));\n\n      break;\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo && targetChat.fullInfo.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        setGlobal(updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        }));\n      }\n\n      break;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat && chat.photos) {\n        setGlobal(updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        }));\n      }\n      break;\n    }\n\n    case 'draftMessage': {\n      const { chatId, formattedText, replyingToId } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n\n        setGlobal(global);\n      }\n    }\n  }\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiUpdate, ApiMessage, ApiPollResult, ApiThreadInfo, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n} from '../../reducers';\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  isMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n} from '../../selectors';\nimport { getMessageContent, isChatPrivate, isMessageLocal } from '../../helpers';\n\nconst ANIMATION_DELAY = 350;\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const { chatId, id, message } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      setGlobal(global);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (isMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (message.isOutgoing && !(message.content && message.content.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isMessageLocal(message as ApiMessage)) {\n          setTimeout(() => {\n            setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n      }\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isChatPrivate(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const ids = Object.keys(global.messages.byChatId[chatId].byId).map(Number);\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message && message.content.poll) {\n        const updatedPoll = { ...message.content.poll, ...pollUpdate };\n\n        // Workaround for poll update bug: `chosen` option gets reset when someone votes after current user\n        const { results: updatedResults } = updatedPoll.results || {};\n        if (updatedResults && !updatedResults.some(((result) => result.isChosen))) {\n          const { results } = message.content.poll.results;\n          const chosenAnswers = results && results.filter((result) => result.isChosen);\n          if (chosenAnswers) {\n            chosenAnswers.forEach((chosenAnswer) => {\n              const chosenAnswerIndex = updatedResults.findIndex((result) => result.option === chosenAnswer.option);\n              if (chosenAnswerIndex >= 0) {\n                updatedPoll.results.results![chosenAnswerIndex].isChosen = true;\n              }\n            });\n          }\n        }\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOption = newResults.find((result) => result.option === option);\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n  }\n});\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: number, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat && chat.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first uread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const newGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(newGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = newGlobal;\n    }\n  }\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!firstMessageId && isMessageLocal(message)) {\n    return global;\n  }\n\n  if (threadInfo) {\n    global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n    if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n      global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n      if (!firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n      }\n\n      if (!threadInfo.lastMessageId) {\n        global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n          ...threadInfo,\n          lastMessageId: message.id,\n        });\n      }\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: number,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId] && chats.byId[chatId].lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: number) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: number | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    setGlobal(global);\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    unique(threadIdsToUpdate).forEach((threadId) => {\n      actions.requestThreadInfoUpdate({ chatId, threadId });\n    });\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: number[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: number | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, ApiUserStatus } from '../../../api/types';\n\nimport { deleteUser, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: [number, ApiUserStatus][] = [];\n\nfunction scheduleStatusUpdate(userId: number, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates.push([userId, statusUpdate]);\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  let global = getGlobal();\n  pendingStatusUpdates.forEach(([userId, statusUpdate]) => {\n    global = updateUser(global, userId, {\n      status: statusUpdate,\n    });\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = [];\n}\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'deleteUser': {\n      return deleteUser(global, update.id);\n    }\n\n    case 'updateUser': {\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\n\nimport { updateStickerSet } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import {\n  addReducer, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { ApiPrivacyKey } from '../../../types';\n\nimport { addBlockedContact, removeBlockedContact } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          hash: 0,\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updatePrivacy':\n      global.settings.privacy[update.key as ApiPrivacyKey] = update.rules;\n      break;\n  }\n\n  return undefined;\n});\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        id, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[id];\n\n      if (chat) {\n        global = updateChat(global, id, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, id, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { ChangeEvent } from 'react';\nimport React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport './Switcher.scss';\n\ntype OwnProps = {\n  id?: string;\n  name?: string;\n  value?: string;\n  label: string;\n  checked?: boolean;\n  disabled?: boolean;\n  inactive?: boolean;\n  noAnimation?: boolean;\n  onChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n  onCheck?: (isChecked: boolean) => void;\n};\n\nconst Switcher: FC<OwnProps> = ({\n  id,\n  name,\n  value,\n  label,\n  checked = false,\n  disabled,\n  inactive,\n  noAnimation,\n  onChange,\n  onCheck,\n}) => {\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (onChange) {\n      onChange(e);\n    }\n\n    if (onCheck) {\n      onCheck(e.currentTarget.checked);\n    }\n  }, [onChange, onCheck]);\n\n  const className = buildClassName(\n    'Switcher',\n    disabled && 'disabled',\n    inactive && 'inactive',\n    noAnimation && 'no-animation',\n  );\n\n  return (\n    <label className={className} title={label}>\n      <input\n        type=\"checkbox\"\n        id={id}\n        name={name}\n        value={value}\n        checked={checked}\n        disabled={disabled}\n        onChange={handleChange}\n      />\n      <span className=\"widget\" />\n    </label>\n  );\n};\n\nexport default memo(Switcher);\n","import React, {\n  FC, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LeftColumnContent, ISettings } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport { APP_NAME, APP_VERSION, FEEDBACK_URL } from '../../../config';\nimport { IS_MOBILE_SCREEN } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport { isChatArchived } from '../../../modules/helpers';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport useLang from '../../../hooks/useLang';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  searchQuery?: string;\n  isLoading: boolean;\n  currentUserId?: number;\n  globalSearchChatId?: number;\n  searchDate?: number;\n  theme: ISettings['theme'];\n  animationLevel: 0 | 1 | 2;\n  chatsById?: Record<number, ApiChat>;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'openTipsChat' | 'setGlobalSearchDate' | 'setGlobalSearchChatId' | 'setSettingOption'\n)>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\n\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\nconst PERMANENT_VERSION_KEY = 'kz_version';\n\nconst LeftMainHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  setGlobalSearchChatId,\n  onReset,\n  searchQuery,\n  isLoading,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  openChat,\n  openTipsChat,\n  setGlobalSearchDate,\n  setSettingOption,\n}) => {\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_MOBILE_SCREEN}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName('animated-menu-icon', !hasMenu && 'state-back')} />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    switchTheme(newTheme, animationLevel > 0);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleSwitchToWebK = () => {\n    localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify('K'));\n  };\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} alpha ${APP_VERSION}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"animations\"\n            onClick={handleAnimationLevelChange}\n          >\n            <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n            <Switcher\n              id=\"animations\"\n              label=\"Toggle Animations\"\n              checked={animationLevel > 0}\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={openTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          <MenuItem\n            icon=\"char-K\"\n            href={WEBK_VERSION_URL}\n            onClick={handleSwitchToWebK}\n          >\n            Switch to K Version\n          </MenuItem>\n          <MenuItem\n            icon=\"char-W\"\n            href={LEGACY_VERSION_URL}\n          >\n            Switch to Old Version\n          </MenuItem>\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId } = global;\n    const { byId: chatsById } = global.chats;\n    const { theme, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme,\n      animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n    'openTipsChat',\n    'setGlobalSearchDate',\n    'setGlobalSearchChatId',\n    'setSettingOption',\n  ]),\n)(LeftMainHeader));\n","import React, { FC } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalState } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\n\nimport './ConnectionState.scss';\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst ConnectionState: FC<StateProps> = ({ connectionState }) => {\n  const lang = useLang();\n\n  const isConnecting = connectionState === 'connectionStateConnecting';\n\n  return isConnecting && (\n    <div id=\"ConnectionState\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">{lang('WaitingForNetwork')}</div>\n    </div>\n  );\n};\n\nexport default withGlobal(\n  (global): StateProps => pick(global, ['connectionState']),\n)(ConnectionState);\n","import { useRef } from '../lib/teact/teact';\n\nimport useThrottle from './useThrottle';\nimport useOnChange from './useOnChange';\nimport useForceUpdate from './useForceUpdate';\n\nexport default <R extends any, D extends any[]>(resolverFn: () => R, ms: number, dependencies: D) => {\n  const valueRef = useRef<R>();\n  const runThrottled = useThrottle(ms);\n  const forceUpdate = useForceUpdate();\n\n  useOnChange(() => {\n    let isSync = true;\n    runThrottled(() => {\n      valueRef.current = resolverFn();\n\n      if (!isSync) {\n        forceUpdate();\n      }\n    });\n    isSync = false;\n  }, dependencies);\n\n  return valueRef.current;\n};\n","import { useMemo } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\n\nexport default (ms: number) => {\n  return useMemo(() => {\n    return throttle((cb) => cb(), ms);\n  }, [ms]);\n};\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatFolder, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { NotifyException, NotifySettings } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { buildCollectionByKey, pick } from '../../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { getFolderUnreadDialogs } from '../../../modules/helpers';\nimport { selectNotifyExceptions, selectNotifySettings } from '../../../modules/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport useThrottledMemo from '../../../hooks/useThrottledMemo';\nimport useLang from '../../../hooks/useLang';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  chatFoldersById: Record<number, ApiChatFolder>;\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: number;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadChatFolders' | 'setActiveChatFolder' | 'openChat'>;\n\nconst INFO_THROTTLE = 3000;\nconst SAVED_MESSAGES_HOTKEY = '0';\n\nconst ChatFolders: FC<StateProps & DispatchProps> = ({\n  chatsById,\n  usersById,\n  chatFoldersById,\n  notifySettings,\n  notifyExceptions,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  loadChatFolders,\n  setActiveChatFolder,\n  openChat,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => chatFoldersById[id] || {}).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, orderedFolderIds]);\n\n  const folderCountersById = useThrottledMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    const chatIds = Object.keys(chatsById).map(Number);\n    const counters = displayedFolders.map((folder) => {\n      const {\n        unreadDialogsCount, hasActiveDialogs,\n      } = getFolderUnreadDialogs(chatsById, usersById, folder, chatIds, notifySettings, notifyExceptions) || {};\n\n      return {\n        id: folder.id,\n        badgeCount: unreadDialogsCount,\n        isBadgeActive: hasActiveDialogs,\n      };\n    });\n\n    return buildCollectionByKey(counters, 'id');\n  }, INFO_THROTTLE, [displayedFolders, chatsById, usersById, notifySettings, notifyExceptions]);\n\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return [\n      { title: lang('FilterAllChats') },\n      ...displayedFolders.map((folder) => ({\n        title: folder.title,\n        ...(folderCountersById && folderCountersById[folder.id]),\n      })),\n    ];\n  }, [displayedFolders, folderCountersById, lang]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index);\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(0);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1));\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1));\n        }\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInAllTabRef = useRef();\n  isNotInAllTabRef.current = activeChatFolder !== 0;\n  useEffect(() => (isNotInAllTabRef.current ? captureEscKeyListener(() => {\n    if (isNotInAllTabRef.current) {\n      setActiveChatFolder(0);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.metaKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder);\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  });\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ title }) => title === folderTabs![activeChatFolder].title);\n\n    if (!activeFolder || activeChatFolder === 0) {\n      return <ChatList folderType=\"all\" isActive={isActive} />;\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        noChatsText={lang('FilterNoChatsToDisplay')}\n        isActive={isActive}\n      />\n    );\n  }\n\n  return (\n    <div className=\"ChatFolders\">\n      {folderTabs && folderTabs.length ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={lang.isRtl ? 'slide-reversed' : 'slide'}\n        activeKey={activeChatFolder}\n        renderCount={folderTabs ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chats: { byId: chatsById },\n      users: { byId: usersById },\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n    } = global;\n\n    return {\n      chatsById,\n      usersById,\n      chatFoldersById,\n      orderedFolderIds,\n      lastSyncTime,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n      activeChatFolder,\n      currentUserId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadChatFolders',\n    'setActiveChatFolder',\n    'openChat',\n  ]),\n)(ChatFolders));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import React, {\n  FC, useCallback, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\nconst MENU_CLOSE_DELAY_MS = 750;\nlet closeTimeout: number | undefined;\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const handleClose = () => {\n    setIsMenuOpen(false);\n  };\n\n  const handleMouseEnter = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n  }, []);\n\n  const handleMouseLeave = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      setIsMenuOpen(false);\n    }, MENU_CLOSE_DELAY_MS);\n  }, []);\n\n  return (\n    <div\n      className={fabClassName}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import React, {\n  FC, memo, useState, useRef, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ConnectionState from '../ConnectionState';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps & StateProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  onSearchQuery,\n  onContentChange,\n  onReset,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const isMouseInside = useRef(false);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n      />\n      <ConnectionState />\n      <Transition name=\"zoom-fade\" renderCount={TRANSITION_RENDER_COUNT} activeKey={content}>\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  activeChatFolder: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setGlobalSearchQuery' | 'setGlobalSearchChatId' | 'resetChatCreation' | 'setGlobalSearchDate' |\n  'loadPasswordInfo' | 'clearTwoFaError'\n)>;\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps & DispatchProps> = ({\n  searchQuery,\n  searchDate,\n  activeChatFolder,\n  setGlobalSearchQuery,\n  setGlobalSearchChatId,\n  resetChatCreation,\n  setGlobalSearchDate,\n  loadPasswordInfo,\n  clearTwoFaError,\n}) => {\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: boolean) => {\n    if (\n      content === LeftColumnContent.NewGroupStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Language:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyActiveSessions:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && activeChatFolder === 0) {\n      setContent(LeftColumnContent.GlobalSearch);\n      return;\n    }\n\n    setContent(LeftColumnContent.ChatList);\n    setContactsFilter('');\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchDate({ date: undefined });\n    setGlobalSearchChatId({ id: undefined });\n    resetChatCreation();\n    setTimeout(() => {\n      setLastResetTime(Date.now());\n    }, RESET_TRANSITION_DELAY_MS);\n  }, [\n    content, activeChatFolder, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId, resetChatCreation,\n    settingsScreen,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, setGlobalSearchQuery, searchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || activeChatFolder === 0\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [activeChatFolder, content, handleReset],\n  );\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  return (\n    <Transition\n      id=\"LeftColumn\"\n      name={IS_MOBILE_SCREEN ? 'slide-layers' : 'push-slide'}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n    >\n      {(isActive) => {\n        switch (contentType) {\n          case ContentType.Archived:\n            return (\n              <ArchivedChats\n                isActive={isActive}\n                onReset={handleReset}\n              />\n            );\n          case ContentType.Settings:\n            return (\n              <Settings\n                currentScreen={settingsScreen}\n                onScreenSelect={setSettingsScreen}\n                onReset={handleReset}\n              />\n            );\n          case ContentType.NewChannel:\n            return (\n              <NewChat\n                key={lastResetTime}\n                isChannel\n                content={content}\n                onContentChange={setContent}\n                onReset={handleReset}\n              />\n            );\n          case ContentType.NewGroup:\n            return (\n              <NewChat\n                key={lastResetTime}\n                content={content}\n                onContentChange={setContent}\n                onReset={handleReset}\n              />\n            );\n          default:\n            return (\n              <LeftMain\n                content={content}\n                searchQuery={searchQuery}\n                searchDate={searchDate}\n                contactsFilter={contactsFilter}\n                onContentChange={setContent}\n                onSearchQuery={handleSearchQuery}\n                onReset={handleReset}\n              />\n            );\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n    } = global;\n    return { searchQuery: query, searchDate: date, activeChatFolder };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setGlobalSearchQuery', 'setGlobalSearchChatId', 'resetChatCreation', 'setGlobalSearchDate',\n    'loadPasswordInfo', 'clearTwoFaError',\n  ]),\n)(LeftColumn));\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { IDimensions } from '../modules/helpers';\n\nimport { throttle } from '../util/schedulers';\nimport windowSize from '../util/windowSize';\n\nconst THROTTLE = 250;\n\nexport default () => {\n  const [size, setSize] = useState<IDimensions>(windowSize.get());\n\n  useEffect(() => {\n    const handleResize = throttle(() => {\n      setSize(windowSize.get());\n    }, THROTTLE, false);\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return size;\n};\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nconst SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nconst MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import React, {\n  FC,\n  memo,\n  useRef,\n  useCallback,\n  useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport { pick } from '../../util/iteratees';\nimport { isChatChannel, isChatSuperGroup } from '../../modules/helpers';\nimport {\n  selectChat,\n  selectIsChatBotNotStarted, selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canMute?: boolean;\n  canSelect?: boolean;\n  canLeave?: boolean;\n}\n\ntype DispatchProps = Pick<GlobalActions, 'joinChannel' | 'sendBotCommand' | 'openLocalTextSearch'>;\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canSubscribe,\n  canSearch,\n  canMute,\n  canSelect,\n  canLeave,\n  isRightColumnShown,\n  joinChannel,\n  sendBotCommand,\n  openLocalTextSearch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_MOBILE_SCREEN) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_MOBILE_SCREEN && canSubscribe && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleSubscribeClick}\n        >\n          {lang(isChannel ? 'Subscribe' : 'Join Group')}\n        </Button>\n      )}\n      {!IS_MOBILE_SCREEN && canStartBot && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleStartBot}\n        >\n          {lang('Start')}\n        </Button>\n      )}\n      {!IS_MOBILE_SCREEN && canSearch && (\n        <Button\n          round\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleSearchClick}\n          ariaLabel=\"Search in this chat\"\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n      {(IS_MOBILE_SCREEN || !canSubscribe) && (\n        <Button\n          ref={menuButtonRef}\n          className={isMenuOpen ? 'active' : ''}\n          round\n          ripple={!IS_MOBILE_SCREEN}\n          size=\"smaller\"\n          color=\"translucent\"\n          disabled={noMenu}\n          ariaLabel=\"More actions\"\n          onClick={handleHeaderMenuOpen}\n        >\n          <i className=\"icon-more\" />\n        </Button>\n      )}\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          isChannel={isChannel}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canMute={canMute}\n          canSelect={canSelect}\n          canLeave={canLeave}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (chat && chat.isRestricted) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canStartBot = Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && chat && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canSelect = !selectIsInSelectMode(global);\n    const canLeave = isMainThread && !canSubscribe;\n\n    const noMenu = !(\n      (IS_MOBILE_SCREEN && canSubscribe)\n      || (IS_MOBILE_SCREEN && canSearch)\n      || canMute\n      || canSelect\n      || canLeave\n    );\n\n    return {\n      noMenu,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canSubscribe,\n      canSearch,\n      canMute,\n      canSelect,\n      canLeave,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'joinChannel', 'sendBotCommand', 'openLocalTextSearch',\n  ]),\n)(HeaderActions));\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { ApiMessage } from '../api/types';\n\nimport { DEBUG } from '../config';\nimport { isWebpSupported } from '../util/environment';\nimport { EMPTY_IMAGE_DATA_URI, webpToPngBase64 } from '../util/webpToPng';\nimport { getMessageMediaThumbDataUri } from '../modules/helpers';\n\nexport default function useWebpThumbnail(message?: ApiMessage) {\n  const thumbnail = message && getMessageMediaThumbDataUri(message);\n  const { sticker } = (message && message.content) || {};\n  const shouldDecodeThumbnail = thumbnail && sticker && !isWebpSupported() && thumbnail.includes('image/webp');\n  const [thumbnailDecoded, setThumbnailDecoded] = useState(EMPTY_IMAGE_DATA_URI);\n  const messageId = message && message.id;\n\n  useLayoutEffect(() => {\n    if (!shouldDecodeThumbnail) {\n      return;\n    }\n\n    webpToPngBase64(`b64-${messageId}`, thumbnail!)\n      .then(setThumbnailDecoded)\n      .catch((err) => {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(err);\n        }\n      });\n  }, [messageId, shouldDecodeThumbnail, thumbnail]);\n\n  return shouldDecodeThumbnail ? thumbnailDecoded : thumbnail;\n}\n","import React, {\n  FC,\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef && containerRef.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        // @ts-ignore\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          // @ts-ignore\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSummaryText } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport RippleEffect from '../ui/RippleEffect';\nimport buildClassName from '../../util/buildClassName';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const lang = useLang();\n  const mediaThumbnail = useWebpThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = getMessageSummaryText(lang, message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div className=\"HeaderPinnedMessage\" onClick={onClick} dir={lang.isRtl ? 'rtl' : undefined}>\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">{renderText(text)}</p>\n        </div>\n\n        <RippleEffect />\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageAudio, getMessageKey, getMessageMediaHash, getSenderTitle,\n} from '../../modules/helpers';\nimport { selectSender } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusMessage' | 'closeAudioPlayer'>;\n\nconst AudioPlayer: FC<OwnProps & StateProps & DispatchProps> = ({\n  message, className, noUi, sender, focusMessage, closeAudioPlayer,\n}) => {\n  const lang = useLang();\n\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const { playPause, isPlaying } = useAudioPlayer(\n    getMessageKey(message), getMediaDuration(message)!, mediaData, undefined, undefined, true,\n  );\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n  }, [closeAudioPlayer, isPlaying, playPause]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  const audio = getMessageAudio(message);\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        ripple={!IS_MOBILE_SCREEN}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n\n    return { sender };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['focusMessage', 'closeAudioPlayer']),\n)(AudioPlayer);\n","import React, {\n  FC, useCallback, useMemo, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport {\n  ApiMessage,\n  ApiChat,\n  ApiTypingStatus,\n  MAIN_THREAD_ID, ApiUser,\n} from '../../api/types';\nimport { NotifyException, NotifySettings } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  EDITABLE_INPUT_ID,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n} from '../../config';\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport {\n  isChatPrivate,\n  isChatArchived,\n  getMessageKey,\n  getChatTitle,\n  getSenderTitle,\n  selectIsChatMuted,\n} from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectAllowedMessageActions,\n  selectIsRightColumnShown,\n  selectThreadTopMessageId,\n  selectThreadOriginChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectPinnedIds,\n  selectIsChatWithSelf,\n  selectForwardedSender,\n  selectScheduledIds,\n  selectIsInSelectMode,\n  selectIsChatWithBot,\n  selectNotifySettings,\n  selectNotifyExceptions,\n} from '../../modules/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport { pick } from '../../util/iteratees';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  chatsById?: Record<number, ApiChat>;\n  originChatId: number;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  isChatWithBot?: boolean;\n  lastSyncTime?: number;\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChatWithInfo' | 'pinMessage' | 'focusMessage' | 'openChat' | 'loadPinnedMessages' | 'toggleLeftColumn' |\n  'exitMessageSelectMode'\n)>;\n\nconst MiddleHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  chatsById,\n  originChatId,\n  messagesCount,\n  isChatWithSelf,\n  isChatWithBot,\n  lastSyncTime,\n  notifySettings,\n  notifyExceptions,\n  openChatWithInfo,\n  pinMessage,\n  focusMessage,\n  openChat,\n  loadPinnedMessages,\n  toggleLeftColumn,\n  exitMessageSelectMode,\n}) => {\n  const lang = useLang();\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds) ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = windowWidth >= MOBILE_SCREEN_MAX_WIDTH && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const handleBackClick = useCallback(() => {\n    if (IS_MOBILE_SCREEN) {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID);\n      if (messageInput) {\n        messageInput.blur();\n      }\n    }\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread') {\n      if (IS_MOBILE_SCREEN) {\n        openChat({ id: undefined });\n      } else {\n        toggleLeftColumn();\n      }\n\n      return;\n    }\n\n    if (messageListType === 'scheduled' && isSelectModeActive) {\n      exitMessageSelectMode();\n    }\n    openChat({ id: originChatId, threadId: MAIN_THREAD_ID });\n  }, [openChat, originChatId, threadId, messageListType, toggleLeftColumn, isSelectModeActive, exitMessageSelectMode]);\n\n  const unreadCount = useMemo(() => {\n    if (!isLeftColumnHideable || !chatsById) {\n      return undefined;\n    }\n\n    let isActive = false;\n\n    const totalCount = Object.values(chatsById).reduce((total, currentChat) => {\n      if (isChatArchived(currentChat)) {\n        return total;\n      }\n\n      const count = currentChat.unreadCount || 0;\n      if (\n        count && (!selectIsChatMuted(currentChat, notifySettings, notifyExceptions) || currentChat.unreadMentionsCount)\n      ) {\n        isActive = true;\n      }\n\n      return total + count;\n    }, 0);\n\n    if (!totalCount) {\n      return undefined;\n    }\n\n    return {\n      isActive,\n      totalCount,\n    };\n  }, [isLeftColumnHideable, chatsById, notifySettings, notifyExceptions]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(pinnedMessage && !shouldRenderAudioPlayer);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  function renderInfo() {\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount)}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount)}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount)}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {isLeftColumnHideable && renderBackButton(shouldShowCloseButton, unreadCount)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isChatPrivate(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              withFullInfo={isChatWithBot}\n              withMediaViewer\n              withUpdatingStatus\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              noRtl\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, unreadCountInfo?: typeof unreadCount) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={asClose ? 'Close' : 'Back'}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {unreadCountInfo && (\n          <div className={`unread-count ${unreadCountInfo.isActive ? 'active' : ''}`}>\n            {formatIntegerCompact(unreadCountInfo.totalCount)}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition name=\"slide-fade\" activeKey={messageListType === 'thread' ? threadId : 1}>\n        {renderInfo}\n      </Transition>\n\n      <div className=\"header-tools\">\n        {shouldRenderPinnedMessage && renderingPinnedMessage && !shouldRenderAudioPlayer && (\n          <HeaderPinnedMessage\n            key={chatId}\n            message={renderingPinnedMessage}\n            count={pinnedMessagesCount}\n            index={pinnedMessageIndex}\n            customTitle={renderingPinnedMessageTitle}\n            className={pinnedMessageClassNames}\n            onUnpinMessage={canUnpin ? handleUnpinMessage : undefined}\n            onClick={handlePinnedMessageClick}\n            onAllPinnedClick={handleAllPinnedClick}\n          />\n        )}\n        {shouldRenderAudioPlayer && renderingAudioMessage && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime } = global;\n    const { byId: chatsById } = global.chats;\n    const chat = selectChat(global, chatId);\n\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const originChat = selectThreadOriginChat(global, chatId, threadId);\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds && pinnedIds.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds && scheduledIds.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (threadInfo) {\n        messagesCount = threadInfo.messagesCount;\n      }\n    }\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      chatsById,\n      originChatId: originChat ? originChat.id : chatId,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isChatWithBot: chat && selectIsChatWithBot(global, chat),\n      lastSyncTime,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds && pinnedMessageIds.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChatWithInfo',\n    'pinMessage',\n    'focusMessage',\n    'openChat',\n    'loadPinnedMessages',\n    'toggleLeftColumn',\n    'exitMessageSelectMode',\n  ]),\n)(MiddleHeader));\n","import { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\n\nimport { getDayStart } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../modules/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: Number(getDayStart(messages[0].date * 1000)),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDatetime = Number(getDayStart(nextMessage.date * 1000));\n      if (currentDateGroup.datetime !== nextMessageDatetime) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDatetime,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useDebounce from '../../../hooks/useDebounce';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useDebounce(DEBOUNCE, false);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport { debounce } from '../util/schedulers';\n\nexport default function useDebounce(ms: number, shouldRunFirst?: boolean, shouldRunLast?: boolean) {\n  return useMemo(() => {\n    return debounce((cb) => cb(), ms, shouldRunFirst, shouldRunLast);\n  }, [ms, shouldRunFirst, shouldRunLast]);\n}\n","import { MutableRefObject } from 'react';\nimport React, { FC, useCallback, useRef } from '../../lib/teact/teact';\n\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../config';\nimport resetScroll from '../../util/resetScroll';\nimport { useIntersectionObserver, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useOnChange from '../../hooks/useOnChange';\n\ntype OwnProps = {\n  containerRef: MutableRefObject<HTMLDivElement | null>;\n  className: string;\n  messageIds: number[];\n  focusingId?: number;\n  loadMoreForwards?: NoneToVoidFunction;\n  loadMoreBackwards?: NoneToVoidFunction;\n  isViewportNewest?: boolean;\n  firstUnreadId?: number;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  children: any;\n};\n\nconst FAB_THRESHOLD = 50;\nconst TOOLS_FREEZE_TIMEOUT = 100;\n\nconst MessageScroll: FC<OwnProps> = ({\n  containerRef,\n  className,\n  messageIds,\n  focusingId,\n  loadMoreForwards,\n  loadMoreBackwards,\n  isViewportNewest,\n  firstUnreadId,\n  onFabToggle,\n  onNotchToggle,\n  children,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useCallback(() => {\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current!;\n    const scrollBottom = scrollHeight - scrollTop - offsetHeight;\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= 0;\n\n    onFabToggle(firstUnreadId ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }, [messageIds, isViewportNewest, containerRef, onFabToggle, firstUnreadId, onNotchToggle]);\n\n  const {\n    observe: observeIntersection,\n    freeze: freezeForLoadMore,\n    unfreeze: unfreezeForLoadMore,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      resetScroll(containerRef.current!);\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      resetScroll(containerRef.current!);\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  const isFocusing = Boolean(focusingId);\n  useOnChange(() => {\n    if (isFocusing) {\n      freezeForLoadMore();\n    } else {\n      unfreezeForLoadMore();\n    }\n  }, [isFocusing]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return (\n    <div className={className} teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {children}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default MessageScroll;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../modules/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMediaWithNoText = (photo || video) && !text;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (text) {\n    classNames.push('text');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video && video.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (photo || video) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo) {\n      classNames.push('media');\n    }\n  }\n\n  if (asForwarded && !customShape) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../modules/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : MIN_MEDIA_WIDTH;\n}\n\nexport function calculateMediaDimensions(message: ApiMessage) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto)\n    : calculateVideoDimensions(video!, isOwn, isForwarded);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport { IAlbum } from '../../../../types';\nimport { ApiMessage } from '../../../../api/types';\nimport { IDimensions } from '../../../../modules/helpers';\n\nimport { MOBILE_SCREEN_MAX_WIDTH } from '../../../../config';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nconst MAX_WIDTH_MOBILE_VW = 69;\nconst MAX_WIDTH_DESK_OWN_REM = 30;\nconst MAX_WIDTH_DESK_REM = 29;\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: IDimensions;\n};\n\nfunction getMaxWidth(isOwn: boolean, isForwarded: boolean, windowWidth: number) {\n  if (windowWidth <= MOBILE_SCREEN_MAX_WIDTH) {\n    return (windowWidth / 100) * MAX_WIDTH_MOBILE_VW - (isForwarded ? 1.625 : 0) * REM;\n  }\n\n  const maxWidth = isOwn ? MAX_WIDTH_DESK_OWN_REM : MAX_WIDTH_DESK_REM;\n\n  return (maxWidth - (isForwarded ? 1.625 : 0)) * REM;\n}\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as IDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction clamp(num: number, low: number, high: number) {\n  return num < low ? low : (num > high ? high : num);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1)));\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: IDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  album: IAlbum,\n  windowWidth: number,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getMaxWidth(isOwn, isForwarded, windowWidth);\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\n\nexport default function calculateAuthorWidth(text: string) {\n  if (!element) {\n    element = document.createElement('span');\n    element.style.font = '400 12px Roboto, \"Helvetica Neue\", \"Apple Color Emoji\", sans-serif';\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\nimport { FocusDirection } from '../../../../types';\n\n// This is the max scroll offset within existing viewport.\nconst FOCUS_MAX_OFFSET = 1500;\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: number,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'center',\n        FOCUS_MARGIN,\n        focusDirection === undefined ? FOCUS_MAX_OFFSET : RELOCATED_FOCUS_OFFSET,\n        focusDirection,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight]);\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, {\n  FC, memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\nimport { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../modules/selectors';\nimport { isChatChannel } from '../../modules/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { ObserveFn, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  targetUser?: ApiUser;\n  targetMessage?: ApiMessage;\n  targetChatId?: number;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  sender,\n  targetUser,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    sender,\n    targetUser,\n    targetMessage,\n    targetChatId,\n    isEmbedded ? { isEmbedded: true, asPlain: true } : undefined,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{renderText(content as string)}</span>;\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={`message${message.id}`}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const userId = message.senderId;\n    const { targetUserId, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const sender = chat && (isChatChannel(chat) || userId === message.chatId)\n      ? chat\n      : userId ? selectUser(global, userId) : undefined;\n\n    return {\n      sender,\n      ...(targetUserId && { targetUser: selectUser(global, targetUserId) }),\n      targetChatId,\n      targetMessage,\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import React, { FC, useRef } from '../../lib/teact/teact';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getMessageSummaryText,\n  getSenderTitle,\n  getMessageRoundVideo,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const pictogramId = message && `sticker-reply-thumb${message.id}`;\n  const mediaThumbnail = useWebpThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender && getSenderTitle(lang, sender);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('EmbeddedMessage', className)}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(pictogramId, mediaThumbnail, mediaBlobUrl, isRoundVideo)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderText(getMessageSummaryText(lang, message, Boolean(mediaThumbnail)))\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  id: string | undefined,\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img\n      id={id}\n      src={blobUrl || thumbDataUri}\n      width={width}\n      height={height}\n      alt=\"\"\n      className={isRoundVideo ? 'round' : ''}\n    />\n  );\n}\n\nexport default EmbeddedMessage;\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\n\nimport { formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: () => void;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <span className=\"MessageMeta\" dir={lang.isRtl ? 'rtl' : 'ltr'} onClick={onClick}>\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\">\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import React, { FC, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { MEMOJI_STICKER_ID } from '../../../config';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport buildClassName from '../../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useFlag from '../../../hooks/useFlag';\nimport useWebpThumbnail from '../../../hooks/useWebpThumbnail';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\nimport './Sticker.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const sticker = message.content.sticker!;\n  const { isAnimated, stickerSetId } = sticker;\n  const isMemojiSticker = stickerSetId === MEMOJI_STICKER_ID;\n\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const thumbDataUri = useWebpThumbnail(message);\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline', true),\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isAnimated ? isAnimationLoaded : isMediaLoaded;\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(isMediaReady, 'slow');\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n  );\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? openModal : undefined}>\n      {!isMediaReady && (\n        <img\n          id={`sticker-thumb-${message.id}`}\n          src={thumbDataUri}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isAnimated && shouldRenderFullMedia && (\n        <img\n          id={`sticker-${message.id}`}\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isAnimated && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          id={mediaHash}\n          animationData={mediaData as AnyLiteral}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markAnimationLoaded}\n        />\n      )}\n      <StickerSetModal\n        isOpen={isModalOpen}\n        fromSticker={sticker}\n        onClose={closeModal}\n      />\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_MOBILE_SCREEN } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../modules/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, fullMediaData?: string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_MOBILE_SCREEN && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","const SELECTED_APPENDIX_BACKGROUND = 'rgba(255,255,255,1)';\n\nexport default async (src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean) => {\n  return isSelected ? SELECTED_APPENDIX_BACKGROUND : getAppendixColorFromImage(src, isOwn);\n};\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import React, {\n  FC, useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  shouldAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  nonInteractive?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst CUSTOM_APPENDIX_ATTRIBUTE = 'data-has-custom-appendix';\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  shouldAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  nonInteractive,\n  shouldAffectAppendix,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad);\n  const shouldDownload = isDownloadAllowed && isIntersecting;\n  const {\n    mediaData, downloadProgress,\n  } = useMediaWithDownloadProgress(getMessageMediaHash(message, size), !shouldDownload);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbRef = useBlurredMediaThumbRef(message, fullMediaData);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(message, uploadProgress || downloadProgress, shouldDownload && !fullMediaData);\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasDownloadDisabled, 'slow');\n  const {\n    shouldRenderThumb, shouldRenderFullMedia, transitionClassNames,\n  } = useTransitionForMedia(fullMediaData, 'slow');\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {shouldRenderThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${width}px; height: ${height}px`}\n        />\n      )}\n      {shouldRenderFullMedia && (\n        <img\n          src={fullMediaData}\n          className={`full-media ${transitionClassNames}`}\n          width={width}\n          height={height}\n          alt=\"\"\n        />\n      )}\n      {shouldRenderSpinner && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {!fullMediaData && !isDownloadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring && (\n        <span className=\"message-upload-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import { RefObject } from 'react';\nimport { useCallback, useRef } from '../lib/teact/teact';\n\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport safePlay from '../util/safePlay';\n\nexport default function useHeavyAnimationCheckForVideo(playerRef: RefObject<HTMLVideoElement>, shouldPlay: boolean) {\n  const shouldPlayRef = useRef();\n  shouldPlayRef.current = shouldPlay;\n\n  const pause = useCallback(() => {\n    if (playerRef.current) {\n      playerRef.current.pause();\n    }\n  }, [playerRef]);\n\n  const play = useCallback(() => {\n    if (playerRef.current && shouldPlayRef.current) {\n      safePlay(playerRef.current);\n    }\n  }, [playerRef]);\n\n  useHeavyAnimationCheck(pause, play);\n}\n","import { useCallback, useRef } from '../../../../lib/teact/teact';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport safePlay from '../../../../util/safePlay';\n\nexport default (playerRef: { current: HTMLVideoElement | null }, isPlayAllowed = false) => {\n  const wasPlaying = useRef(false);\n  const isFrozen = useRef(false);\n\n  const freezePlaying = useCallback(() => {\n    isFrozen.current = true;\n\n    if (!isPlayAllowed || !playerRef.current) {\n      return;\n    }\n\n    if (!wasPlaying.current) {\n      wasPlaying.current = !playerRef.current.paused;\n    }\n\n    playerRef.current.pause();\n  }, [isPlayAllowed, playerRef]);\n\n  const unfreezePlaying = useCallback(() => {\n    // At this point HTMLVideoElement can be unmounted from the DOM\n    if (isPlayAllowed && playerRef.current && wasPlaying.current && document.body.contains(playerRef.current)) {\n      safePlay(playerRef.current);\n    }\n\n    wasPlaying.current = false;\n    isFrozen.current = false;\n  }, [isPlayAllowed, playerRef]);\n\n  const unfreezePlayingOnRaf = useCallback(() => {\n    fastRaf(unfreezePlaying);\n  }, [unfreezePlaying]);\n\n  if (!document.hasFocus()) {\n    freezePlaying();\n  }\n\n  useBackgroundMode(freezePlaying, unfreezePlayingOnRaf);\n};\n","import React, {\n  FC, useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  canMessagePlayVideoInline,\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useHeavyAnimationCheckForVideo from '../../../hooks/useHeavyAnimationCheckForVideo';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport usePauseOnInactive from './hooks/usePauseOnInactive';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n  const localBlobUrl = video.blobUrl;\n  const canPlayInline = Boolean(localBlobUrl) || canMessagePlayVideoInline(video);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad);\n  const shouldDownload = Boolean(isDownloadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(shouldAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message);\n  const { mediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldDownload,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(canPlayInline && isIntersecting && fullMediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!shouldAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || downloadProgress,\n    shouldDownload && (canPlayInline && !isBuffered),\n  );\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasDownloadDisabled);\n  const { shouldRenderThumb, transitionClassNames } = useTransitionForMedia(fullMediaData, 'slow');\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded);\n\n  useHeavyAnimationCheckForVideo(videoRef, Boolean(isInline && shouldAutoPlay));\n\n  usePauseOnInactive(videoRef, isPlayAllowed);\n\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (canPlayInline && !fullMediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    } else if (canPlayInline && fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, canPlayInline, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  const shouldRenderInlineVideo = isInline;\n  const shouldRenderHqPreview = !canPlayInline && mediaData;\n  const shouldRenderPlayButton = !canPlayInline || (isDownloadAllowed && !isPlayAllowed && !shouldRenderSpinner);\n  const shouldRenderDownloadButton = canPlayInline && !isDownloadAllowed;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {(!isInline || shouldRenderThumb)\n        && (\n          <canvas\n            ref={thumbRef}\n            className=\"thumbnail\"\n            // @ts-ignore teact feature\n            style={`width: ${width}px; height: ${height}px;`}\n          />\n        )}\n      {previewBlobUrl && (\n        <img\n          src={previewBlobUrl}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${width}px; height: ${height}px;`}\n          alt=\"\"\n        />\n      )}\n\n      {shouldRenderInlineVideo && (\n        <video\n          ref={videoRef}\n          className={videoClassName}\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {shouldRenderHqPreview && (\n        <img\n          src={mediaData}\n          className={`full-media ${transitionClassNames}`}\n          width={width}\n          height={height}\n          alt=\"\"\n        />\n      )}\n      {shouldRenderPlayButton && (\n        <i className=\"icon-large-play\" />\n      )}\n      {shouldRenderSpinner && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring && !canPlayInline ? (\n        <span className=\"message-upload-progress\">{Math.round(transferProgress * 100)}%</span>\n      ) : isTransferring && canPlayInline ? (\n        <span className=\"message-upload-progress\">...</span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(video.duration - playProgress)}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser, ApiContact } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openUserInfo'>;\n\nconst Contact: FC<OwnProps & StateProps & DispatchProps> = ({\n  contact, user, openUserInfo,\n}) => {\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n\n  const handleClick = useCallback(() => {\n    openUserInfo({ id: userId });\n  }, [openUserInfo, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', Boolean(userId) && 'interactive')}\n      onClick={userId ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    return {\n      user: selectUser(global, contact.userId),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n  ]),\n)(Contact);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useCallback, memo, useState,\n} from '../../lib/teact/teact';\n\nimport Checkbox from './Checkbox';\n\ntype IRadioOption = {\n  label: string;\n  subLabel?: string;\n  value: string;\n};\n\ntype OwnProps = {\n  id?: string;\n  options: IRadioOption[];\n  selected?: string[];\n  disabled?: boolean;\n  round?: boolean;\n  loadingOptions?: string[];\n  onChange: (value: string[]) => void;\n};\n\nconst CheckboxGroup: FC<OwnProps> = ({\n  id,\n  options,\n  selected = [],\n  disabled,\n  round,\n  loadingOptions,\n  onChange,\n}) => {\n  const [values, setValues] = useState<string[]>([]);\n\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const { value, checked } = event.currentTarget;\n    let newValues: string[];\n    if (checked) {\n      newValues = [...values, value];\n    } else {\n      newValues = values.filter((v) => v !== value);\n    }\n\n    setValues(newValues);\n    onChange(newValues);\n  }, [onChange, values]);\n\n  return (\n    <div id={id} className=\"radio-group\">\n      {options.map((option) => (\n        <Checkbox\n          label={option.label}\n          subLabel={option.subLabel}\n          value={option.value}\n          checked={selected.indexOf(option.value) !== -1}\n          disabled={disabled}\n          round={round}\n          isLoading={loadingOptions ? loadingOptions.indexOf(option.value) !== -1 : undefined}\n          onChange={handleChange}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(CheckboxGroup);\n","import React, {\n  FC, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result && result.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent < answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            // @ts-ignore\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderMessageText';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<number, ApiUser>;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('loadMessage' | 'openPollResults')>;\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  loadMessage,\n  onSendVote,\n  openPollResults,\n}) => {\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    if (\n      isSubmitting\n      && poll.results.results\n      && poll.results.results.some((result) => result.isChosen)\n    ) {\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question)}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\">\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { byId: usersById } = global.users;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadMessage', 'openPollResults']),\n)(Poll));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getMessageWebPage } from '../../../modules/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  shouldAutoLoad?: boolean;\n  inPreview?: boolean;\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  shouldAutoLoad,\n  inPreview,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  let isSquarePhoto = false;\n  if (webPage && webPage.photo) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n  } = webPage;\n\n  const isMediaInteractive = photo && onMediaClick && !isSquarePhoto && !webPage.hasDocument;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebPage',\n    photo\n      ? (isSquarePhoto && 'with-square-photo')\n      : (!inPreview && 'without-photo'),\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          nonInteractive={!isMediaInteractive}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      <div className=\"WebPage-text\">\n        <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n        {!inPreview && title && (\n          <p className=\"site-title\">{renderText(title)}</p>\n        )}\n        {truncatedDescription && (\n          <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n}) => {\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    description,\n    photoUrl,\n  } = invoice!;\n\n  return (\n    <div\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <p>{renderText(text, ['emoji', 'br'])}</p>\n      )}\n      <div className={`description ${photoUrl ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n          />\n        )}\n        {description && (\n          <p className=\"description-text\">{renderText(description, ['emoji', 'br'])}</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { OwnProps as PhotoProps } from '../Photo';\nimport { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport { GlobalActions } from '../../../../global/types';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../modules/selectors';\n\nimport { pick } from '../../../../util/iteratees';\n\ntype OwnProps = PhotoProps & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('toggleMessageSelection')>;\n\nexport default function withSelectControl(WrapedComponent: FC) {\n  const Component: FC<OwnProps & StateProps & DispatchProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      toggleMessageSelection,\n      dimensions,\n    } = props;\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e && e.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...props.dimensions,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : props.onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={\n          buildClassName(\n            'album-item-select-wrapper',\n            isSelected && 'is-selected',\n          )\n        }\n        // @ts-ignore\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrapedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n    (setGlobal, actions) => pick(actions, [\n      'toggleMessageSelection',\n    ]),\n  )(Component));\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\nimport { AlbumRectPart, IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent } from '../../../modules/helpers';\nimport { withGlobal } from '../../../lib/teact/teactn';\nimport { pick } from '../../../util/iteratees';\nimport withSelectControl from './hocs/withSelectControl';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'cancelSendingMessage'>;\n\nconst Album: FC<OwnProps & StateProps & DispatchProps> = ({\n  album,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  cancelSendingMessage,\n}) => {\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[message.previousLocalId || message.id];\n    const uploadProgress = fileUpload ? fileUpload.progress : undefined;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom)\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAutoPlay={shouldAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      // @ts-ignore\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      uploadsById: global.fileUploads.byMessageLocalId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'cancelSendingMessage',\n  ]),\n)(Album);\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS } from '../../common/helpers/mediaDimensions';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport buildClassName from '../../../util/buildClassName';\nimport useHeavyAnimationCheckForVideo from '../../../hooks/useHeavyAnimationCheckForVideo';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport usePauseOnInactive from './hooks/usePauseOnInactive';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport safePlay from '../../../util/safePlay';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  lastSyncTime?: number;\n};\n\nlet currentOnRelease: NoneToVoidFunction;\n\nfunction createCapture(onRelease: NoneToVoidFunction) {\n  return () => {\n    if (currentOnRelease) {\n      currentOnRelease();\n    }\n\n    currentOnRelease = onRelease;\n  };\n}\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad && shouldAutoPlay);\n  const shouldDownload = Boolean(isDownloadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldDownload,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = isDownloadAllowed && !isBuffered;\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasDownloadDisabled);\n  const { shouldRenderThumb, transitionClassNames } = useTransitionForMedia(mediaData, 'slow');\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const circumference = 94 * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `<svg width=\"200px\" height=\"200px\">\n          <circle cx=\"100\" cy=\"100\" r=\"94\" class=\"progress-circle\" transform=\"rotate(-90, 100, 100)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = () => {\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current!);\n\n    requestAnimationFrame(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  };\n\n  const capturePlaying = createCapture(stopPlaying);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useHeavyAnimationCheckForVideo(playerRef, shouldPlay);\n\n  usePauseOnInactive(playerRef, Boolean(mediaData));\n\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      playerEl.currentTime = 0;\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, mediaData]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {shouldRenderThumb && (\n        <div className=\"thumbnail-wrapper\">\n          <canvas\n            ref={thumbRef}\n            className=\"thumbnail\"\n            // @ts-ignore teact feature\n            style={`width: ${ROUND_VIDEO_DIMENSIONS}px; height: ${ROUND_VIDEO_DIMENSIONS}px`}\n          />\n        </div>\n      )}\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS}\n            height={ROUND_VIDEO_DIMENSIONS}\n            autoPlay\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={downloadProgress} />\n        </div>\n      )}\n      {!mediaData && !isDownloadAllowed && (\n        <i className=\"icon-large-play\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted-chat\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React, { FC } from '../../../lib/teact/teact';\n\nimport { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ button }: { button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'NOT_SUPPORTED'}\n              onClick={() => onClick({ button })}\n            >\n              {button.text}\n              {button.type === 'url' && <i className=\"icon-arrow-right\" />}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiMessage, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { isChatPrivate } from '../../../modules/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectThreadInfo } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  threadInfo: ApiThreadInfo;\n  usersById?: Record<number, ApiUser>;\n  chatsById?: Record<number, ApiChat>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openChat'>;\n\nconst CommentButton: FC<OwnProps & StateProps & DispatchProps> = ({\n  disabled, threadInfo, usersById, chatsById, openChat,\n}) => {\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  const recentRepliers = recentReplierIds && recentReplierIds.map((peerId) => {\n    return isChatPrivate(peerId) ? usersById![peerId] : chatsById![peerId];\n  }).filter(Boolean);\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isChatPrivate(user.id) ? user as ApiUser : undefined}\n              chat={!isChatPrivate(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }) => {\n    const { threadId, chatId } = message.threadInfo!;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId) || message.threadInfo!;\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    return {\n      threadInfo,\n      usersById,\n      chatsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n  ]),\n)(CommentButton));\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  memo,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../../global/types';\nimport {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiSticker,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { FocusDirection, IAlbum, MediaViewerOrigin } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectAnimatedEmoji,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectShouldAutoLoadMedia,\n  selectShouldAutoPlayMedia, selectShouldLoopStickers,\n} from '../../../modules/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isChatPrivate,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji, getSenderTitle, getUserColorKey,\n} from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useWindowSize from '../../../hooks/useWindowSize';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from '../../common/AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersectionForBottom: ObserveFn;\n  observeIntersectionForMedia: ObserveFn;\n  observeIntersectionForAnimatedStickers: ObserveFn;\n  album?: IAlbum;\n  withAvatar?: boolean;\n  withSenderName?: boolean;\n  threadId: number;\n  messageListType: MessageListType;\n  noComments: boolean;\n  appearanceOrder: number;\n} & MessagePositionProperties;\n\ntype StateProps = {\n  forceSenderName?: boolean;\n  sender?: ApiUser | ApiChat;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isChannel?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  isSingleEmoji?: boolean;\n  animatedEmoji?: ApiSticker;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  shouldAutoLoadMedia?: boolean;\n  shouldAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'focusMessage' | 'openMediaViewer' | 'openAudioPlayer' |\n  'openUserInfo' | 'openChat' |\n  'cancelSendingMessage' | 'markMessagesRead' |\n  'sendPollVote' | 'toggleMessageSelection' | 'setReplyingToId' | 'openForwardMenu' |\n  'clickInlineButton' | 'disableContextMenuHint'\n)>;\n\nconst NBSP = '\\u00A0';\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>';\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\n\nconst Message: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  withAvatar,\n  withSenderName,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isLastInList,\n  forceSenderName,\n  sender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isForwarding,\n  isChatWithSelf,\n  isChannel,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  messageListType,\n  isPinnedList,\n  shouldAutoLoadMedia,\n  shouldAutoPlayMedia,\n  shouldLoopStickers,\n  focusMessage,\n  openMediaViewer,\n  openAudioPlayer,\n  openUserInfo,\n  openChat,\n  cancelSendingMessage,\n  markMessagesRead,\n  sendPollVote,\n  toggleMessageSelection,\n  setReplyingToId,\n  openForwardMenu,\n  clickInlineButton,\n  disableContextMenuHint,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, false, true);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const { chatId, id: messageId, threadInfo } = message;\n\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const { forwardInfo, viaBotId } = message;\n  const asForwarded = forwardInfo && !isChatWithSelf && !forwardInfo.isLinkedChannelPost;\n  const isInDocumentGroup = !!message.groupedId && !message.isInAlbum;\n  const isAlbum = Boolean(album) && album!.messages.length > 1;\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice,\n  } = getMessageContent(message);\n  const customShape = getMessageCustomShape(message);\n  const textParts = renderMessageText(message, highlight, isEmojiOnlyMessage(customShape));\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    transitionClassNames,\n  );\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: message.threadInfo && message.threadInfo.messagesCount > 0,\n  });\n  const avatarPeer = forwardInfo && (isChatWithSelf || !sender) ? originSender : sender;\n  const senderPeer = forwardInfo ? originSender : sender;\n  const signature = (\n    (isChannel && message.adminTitle) || (forwardInfo && !asForwarded && forwardInfo.adminTitle) || undefined\n  );\n  const withCommentButton = message.threadInfo && (!isInDocumentGroup || isLastInDocumentGroup)\n    && messageListType === 'thread' && !noComments;\n  const withAppendix = contentClassName.includes('has-appendix');\n\n  useEnsureMessage(chatId, hasReply ? message.replyToMessageId : undefined, replyMessage, message.id);\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight);\n  useLayoutEffect(() => {\n    if (!appendixRef.current) {\n      return;\n    }\n\n    appendixRef.current.innerHTML = isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN;\n  }, [isOwn, withAppendix]);\n\n  const handleGroupDocumentMessagesSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    toggleMessageSelection({\n      messageId,\n      groupedId: message.groupedId,\n    });\n  }, [messageId, message.groupedId, toggleMessageSelection]);\n\n  const handleMessageSelect = useCallback((e?: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n    const params = isAlbum && album && album.messages\n      ? {\n        messageId,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: e && e.shiftKey,\n      }\n      : { messageId, withShift: e && e.shiftKey };\n    toggleMessageSelection(params);\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const handleContainerDoubleClick = useCallback(() => {\n    setReplyingToId({ messageId });\n  }, [setReplyingToId, messageId]);\n\n  const handleContentDoubleClick = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n  }, []);\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    if (isChatPrivate(avatarPeer.id)) {\n      openUserInfo({ id: avatarPeer.id });\n    } else {\n      openChat({ id: avatarPeer.id });\n    }\n  }, [avatarPeer, openUserInfo, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      return;\n    }\n\n    if (isChatPrivate(senderPeer.id)) {\n      openUserInfo({ id: senderPeer.id });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [senderPeer, openUserInfo, openChat]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openUserInfo({ id: botSender.id });\n  }, [botSender, openUserInfo]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({ chatId, threadId, messageId: message.replyToMessageId });\n  }, [focusMessage, chatId, threadId, message.replyToMessageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId, threadId, messageId, origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId: message.groupedId });\n  }, [openForwardMenu, chatId, message.groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId: message.groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n    focusMessage({\n      chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n    });\n  }, [focusMessage, forwardInfo, message, chatId, isInDocumentGroup]);\n\n  const lang = useLang();\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), album!, windowWidth) : undefined;\n  }, [isAlbum, windowWidth, isOwn, asForwarded, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS;\n      } else {\n        width = calculateMediaDimensions(message).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isChatPrivate(avatarPeer.id);\n    const avatarUser = avatarPeer && isAvatarPeerUser ? avatarPeer as ApiUser : undefined;\n    const avatarChat = avatarPeer && !isAvatarPeerUser ? avatarPeer as ApiChat : undefined;\n    const hiddenName = !avatarPeer && forwardInfo ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && !customShape && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n    const shouldInlineMeta = !webPage && !animatedEmoji && textParts;\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            isInline\n            sticker={animatedEmoji}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            isOwn={isOwn}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            message={message}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {!animatedEmoji && textParts && (\n          <p className={`text-content ${shouldInlineMeta ? 'with-meta' : ''}`} dir=\"auto\">\n            {textParts}\n            {shouldInlineMeta && (\n              <MessageMeta\n                message={message}\n                outgoingStatus={outgoingStatus}\n                signature={signature}\n                onClick={handleMessageSelect}\n              />\n            )}\n          </p>\n        )}\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && (\n          <Invoice\n            message={message}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const shouldRender = !customShape && (\n      (withSenderName && !photo && !video) || asForwarded || viaBotId || forceSenderName\n    ) && (!isInDocumentGroup || isFirstInDocumentGroup);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo && forwardInfo.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName(senderPeer && 'interactive', senderColor)}\n            onClick={senderPeer ? handleSenderClick : undefined}\n            dir=\"auto\"\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo && forwardInfo.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && (!isInDocumentGroup || isLastInDocumentGroup)\n  );\n  const canForward = canShowActionButton && isChannel && !isScheduled;\n  const canFocus = canShowActionButton && (\n    (forwardInfo && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn)) && forwardInfo.fromMessageId)\n    || isPinnedList\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={`message${messageId}`}\n      className={containerClassName}\n      // @ts-ignore teact feature\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onClick={isInSelectMode ? handleMessageSelect : undefined}\n      onDoubleClick={!isInSelectMode ? handleContainerDoubleClick : undefined}\n      onMouseDown={!isInSelectMode ? handleBeforeContextMenu : undefined}\n      onContextMenu={!isInSelectMode ? handleContextMenu : undefined}\n      onMouseEnter={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseEnter : undefined}\n      onMouseLeave={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleGroupDocumentMessagesSelect}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className=\"message-content-wrapper\"\n        onClick={isInSelectMode && isInDocumentGroup ? handleMessageSelect : undefined}\n      >\n        <div\n          className={contentClassName}\n          // @ts-ignore\n          style={style}\n          dir=\"auto\"\n        >\n          {withAppendix && (<div className=\"svg-appendix\" ref={appendixRef} />)}\n          {asForwarded && !customShape && (!isInDocumentGroup || isFirstInDocumentGroup) && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {(!isInDocumentGroup || isLastInDocumentGroup) && !(!webPage && !animatedEmoji && textParts) && (\n            <MessageMeta\n              message={message}\n              outgoingStatus={outgoingStatus}\n              signature={signature}\n              onClick={handleMessageSelect}\n            />\n          )}\n          {canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton message={message} disabled={noComments} />}\n          {contentClassName.includes('has-appendix') && <div className=\"svg-appendix\" ref={appendixRef} />}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickInlineButton} />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const { focusedMessage, forwardMessages, lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToMessageId, isOutgoing,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = canShowSender ? selectSender(global, message) : undefined;\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectSender(global, replyMessage);\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    let isSelected: boolean;\n\n    if (album && album.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    return {\n      forceSenderName,\n      sender,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n      isForwarding,\n      isChatWithSelf,\n      isChannel,\n      lastSyncTime,\n      highlight,\n      isSingleEmoji: Boolean(singleEmoji),\n      animatedEmoji: singleEmoji ? selectAnimatedEmoji(global, singleEmoji) : undefined,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        !!message.groupedId && !message.isInAlbum && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isPinnedList: messageListType === 'pinned',\n      shouldAutoLoadMedia: chat ? selectShouldAutoLoadMedia(global, message, chat, sender) : undefined,\n      shouldAutoPlayMedia: selectShouldAutoPlayMedia(global, message),\n      shouldLoopStickers: selectShouldLoopStickers(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'focusMessage',\n    'openMediaViewer',\n    'openAudioPlayer',\n    'cancelSendingMessage',\n    'openUserInfo',\n    'openChat',\n    'markMessagesRead',\n    'sendPollVote',\n    'toggleMessageSelection',\n    'setReplyingToId',\n    'openForwardMenu',\n    'clickInlineButton',\n    'disableContextMenuHint',\n  ]),\n)(Message));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiRestrictionReason, MAIN_THREAD_ID } from '../../api/types';\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_LIST_SLICE, SCHEDULED_WHEN_ONLINE } from '../../config';\nimport { IS_ANDROID, IS_MOBILE_SCREEN } from '../../util/environment';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n} from '../../modules/selectors';\nimport {\n  getMessageOriginalId,\n  isActionMessage,\n  isChatChannel,\n  isChatPrivate,\n  isOwnMessage,\n} from '../../modules/helpers';\nimport {\n  compact,\n  flatten,\n  orderBy,\n  pick,\n} from '../../util/iteratees';\nimport {\n  fastRaf, debounce, onTickEnd,\n} from '../../util/schedulers';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages, MessageDateGroup, isAlbum } from './helpers/groupMessages';\nimport { ObserveFn, useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport resetScroll from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\nimport useLang, { LangFn } from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\n\nimport Loading from '../ui/Loading';\nimport MessageScroll from './MessageScroll';\nimport Message from './message/Message';\nimport ActionMessage from './ActionMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isChatWithSelf?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  lastMessage?: ApiMessage;\n  botDescription?: string;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadViewportMessages' | 'markMessageListRead' | 'markMessagesRead' | 'setScrollOffset' | 'openHistoryCalendar'\n)>;\n\nconst BOTTOM_THRESHOLD = 100;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_MOBILE_SCREEN ? 300 : 500;\nconst FOCUSING_DURATION = 1000;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst FOCUSING_FADE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isChatLoaded,\n  isChannelChat,\n  canPost,\n  isChatWithSelf,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  animationLevel,\n  loadViewportMessages,\n  markMessageListRead,\n  markMessagesRead,\n  setScrollOffset,\n  lastMessage,\n  botDescription,\n  threadTopMessageId,\n  hasLinkedChat,\n  openHistoryCalendar,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  // Updated every time (to be used from intersection callback closure)\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(!messageIds);\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n  const [hasFocusing, setHasFocusing] = useState<boolean>(Boolean(focusingId));\n\n  const areMessagesLoaded = Boolean(messageIds);\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n\n    // Updated only once (to preserve divider even after messages are read)\n    if (!memoUnreadDividerBeforeIdRef.current) {\n      memoUnreadDividerBeforeIdRef.current = firstUnreadId;\n    }\n  }, [firstUnreadId]);\n\n  const {\n    observe: observeIntersectionForMedia, freeze: freezeForMedia, unfreeze: unfreezeForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMessagesRead({ messageIds: mentionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n\n    if (focusingId) {\n      freezeForMedia();\n      freezeForReading();\n    } else {\n      unfreezeForReading();\n      unfreezeForMedia();\n    }\n  }, [focusingId]);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  useEffect(() => {\n    if (focusingId) {\n      setHasFocusing(true);\n    } else {\n      setTimeout(() => {\n        setHasFocusing(false);\n      }, FOCUSING_FADE_ANIMATION_DURATION);\n    }\n  }, [focusingId]);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  const [loadMoreBackwards, loadMoreForwards, loadMoreAround] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]: [\n    typeof messageIds, typeof isViewportNewest, typeof containerHeight\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    // During animation\n    if (!container.offsetParent) {\n      return;\n    }\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, FOCUSING_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current!;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    // If two messages come at once (e.g. via Quiz Bot) then the first message will update `scrollOffset`\n    // right away (before animation) which creates inconsistency until the animation completes.\n    // To workaround that, we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n    const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && (\n      scrollOffset - (prevContainerHeight || offsetHeight) - lastItemHeight <= BOTTOM_THRESHOLD\n    );\n\n    let newScrollTop!: number;\n\n    const hasFirstMessageChanged = messageIds && prevMessageIds && messageIds[0] !== prevMessageIds[0];\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    if (isAtBottom && hasLastMessageChanged && !hasFirstMessageChanged && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            undefined,\n            true,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(scrollHeight - newScrollTop, offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP);\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, newScrollTop);\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(scrollHeight - newScrollTop, offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  useEffect(() => {\n    if (!animationLevel || animationLevel > 0) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [animationLevel, isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isChatPrivate(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf);\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    !withUsers && 'no-avatars',\n    isChannelChat && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    isSelectModeActive && 'select-mode-active',\n    hasFocusing && 'has-focusing',\n    isScrolled && 'scrolled',\n  );\n\n  return (\n    <div ref={containerRef} className={className} onScroll={handleScroll}>\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botDescription ? (\n        <div className=\"empty rich\"><span>{renderText(lang(botDescription), ['br', 'emoji', 'links'])}</span></div>\n      ) : messageIds && !messageGroups ? (\n        <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageScroll\n          containerRef={containerRef}\n          className=\"messages-container\"\n          messageIds={messageIds || [lastMessage!.id]}\n          focusingId={focusingId}\n          loadMoreForwards={loadMoreForwards}\n          loadMoreBackwards={loadMoreBackwards}\n          isViewportNewest={isViewportNewest}\n          firstUnreadId={firstUnreadId}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        >\n          {renderMessages(\n            lang,\n            messageGroups || groupMessages([lastMessage!]),\n            observeIntersectionForReading,\n            observeIntersectionForMedia,\n            observeIntersectionForAnimatedStickers,\n            withUsers,\n            anchorIdRef,\n            memoUnreadDividerBeforeIdRef,\n            threadId,\n            type,\n            threadTopMessageId,\n            threadFirstMessageId,\n            hasLinkedChat,\n            messageGroups ? type === 'scheduled' : false,\n            !messageGroups || !shouldAnimateAppearanceRef.current,\n            openHistoryCalendar,\n          )}\n        </MessageScroll>\n      ) : (\n        <Loading color=\"white\" />\n      )}\n    </div>\n  );\n};\n\nfunction renderMessages(\n  lang: LangFn,\n  messageGroups: MessageDateGroup[],\n  observeIntersectionForReading: ObserveFn,\n  observeIntersectionForMedia: ObserveFn,\n  observeIntersectionForAnimatedStickers: ObserveFn,\n  withUsers: boolean,\n  currentAnchorIdRef: { current: string | undefined },\n  memoFirstUnreadIdRef: { current: number | undefined },\n  threadId: number,\n  type: MessageListType,\n  threadTopMessageId: number | undefined,\n  threadFirstMessageId: number | undefined,\n  hasLinkedChat: boolean | undefined,\n  isSchedule: boolean,\n  noAppearanceAnimation: boolean,\n  openHistoryCalendar: Function,\n) {\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + flatten(messageGroup.senderGroups).length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (senderGroup.length === 1 && !isAlbum(senderGroup[0]) && isActionMessage(senderGroup[0])) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoFirstUnreadIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return flatten(senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && currentAnchorIdRef.current === `message${message.previousLocalId}`) {\n          currentAnchorIdRef.current = `message${message.id}`;\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Scheduled messages can have local IDs in the middle of the list,\n        // and keys should be ordered, so we prefix it with a date.\n        // However, this may lead to issues if server date is not synchronized with the local one.\n        const key = type !== 'scheduled' ? originalId : `${message.date}_${originalId}`;\n\n        return compact([\n          message.id === memoFirstUnreadIdRef.current ? unreadDivider : undefined,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }));\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {flatten(senderGroups)}\n      </div>\n    );\n  });\n\n  return flatten(dateGroups);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    let botDescription: string | undefined;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      const chatBot = selectChatBot(global, chatId)!;\n      if (chatBot.fullInfo) {\n        botDescription = chatBot.fullInfo.botDescription || 'NoMessages';\n      } else {\n        botDescription = 'Updating bot info...';\n      }\n    }\n\n    return {\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      animationLevel: global.settings.byKey.animationLevel,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n      botDescription,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadViewportMessages',\n    'markMessageListRead',\n    'markMessagesRead',\n    'setScrollOffset',\n    'openHistoryCalendar',\n  ]),\n)(MessageList));\n","import React, {\n  FC, useCallback, memo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../modules/selectors';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport { pick } from '../../util/iteratees';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ScrollDownButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n};\n\ntype StateProps = {\n  messageListType?: MessageListType;\n  unreadCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusLastMessage'>;\n\nconst FOCUS_MARGIN = 20;\n\nconst ScrollDownButton: FC<OwnProps & StateProps & DispatchProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  unreadCount,\n  focusLastMessage,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusLastMessage();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusLastMessage]);\n\n  const fabClassName = buildClassName(\n    'ScrollDownButton',\n    isShown && 'revealed',\n    !canPost && 'no-composer',\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <div className=\"ScrollDownButton-inner\">\n        <Button\n          color=\"secondary\"\n          round\n          onClick={handleClick}\n          ariaLabel={lang('AccDescrPageDown')}\n        >\n          <i className=\"icon-arrow-down\" />\n        </Button>\n        {Boolean(unreadCount) && (\n          <div className=\"unread-count\">{formatIntegerCompact(unreadCount!)}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    return {\n      messageListType,\n      unreadCount: chat && threadId === MAIN_THREAD_ID && messageListType === 'thread' ? chat.unreadCount : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['focusLastMessage']),\n)(ScrollDownButton));\n","import { ApiAttachment } from '../../../../api/types';\nimport { preloadImage, preloadVideo, createPosterForVideo } from '../../../../util/files';\n\nconst MAX_QUICK_VIDEO_SIZE = 10 * 1024 ** 2; // 10 MB\nconst MAX_QUICK_IMG_SIZE = 1280; // px\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let previewBlobUrl;\n\n  if (mimeType.startsWith('image/')) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n\n      if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE || mimeType !== 'image/jpeg') {\n        const newBlob = await squeezeImage(img);\n        if (newBlob) {\n          URL.revokeObjectURL(blobUrl);\n          return buildAttachment(filename, newBlob, true, options);\n        } else {\n          return buildAttachment(filename, blob, false, options);\n        }\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (mimeType.startsWith('video/')) {\n    // Videos < 10 MB are always sent in quick mode (in other clients).\n    // Quick mode for videos > 10 MB is not supported until client-side video squeezing is implemented.\n    if (size < MAX_QUICK_VIDEO_SIZE) {\n      const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n      quick = { width, height, duration };\n    }\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    previewBlobUrl,\n    ...options,\n  };\n}\n\nfunction squeezeImage(img: HTMLImageElement): Promise<Blob | null> {\n  return new Promise((resolve) => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d')!;\n\n    let { width, height } = img;\n\n    if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE) {\n      if (width >= height) {\n        height *= MAX_QUICK_IMG_SIZE / width;\n        width = MAX_QUICK_IMG_SIZE;\n      } else {\n        width *= MAX_QUICK_IMG_SIZE / height;\n        height = MAX_QUICK_IMG_SIZE;\n      }\n    }\n\n    canvas.width = width;\n    canvas.height = height;\n\n    ctx.drawImage(img, 0, 0, img.width, img.height, 0, 0, width, height);\n    canvas.toBlob(resolve, 'image/jpeg', 100);\n  });\n}\n","export default __webpack_public_path__ + \"8ccc0b555efcec3616377aea078dda16.js\";","// @ts-ignore\nimport encoderPath from 'file-loader!opus-recorder/dist/encoderWorker.min';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\ninterface OpusRecorder extends Omit<MediaRecorder, 'start' | 'ondataavailable'> {\n  new(options: AnyLiteral): OpusRecorder;\n\n  start(stream?: MediaStreamAudioSourceNode): void;\n\n  sourceNode: MediaStreamAudioSourceNode;\n\n  ondataavailable: (typedArray: Uint8Array) => void;\n}\n\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: OpusRecorder }>;\nlet OpusRecorder: OpusRecorder;\nlet mediaRecorder: OpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    // @ts-ignore\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: OpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import { StateHookSetter, useEffect } from '../../../../lib/teact/teact';\nimport { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nexport default (\n  insertTextAndUpdateCursor: (text: string, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && input.tagName === 'INPUT' && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const { items } = e.clipboardData;\n      const media = Array.from(items).find((item) => CLIPBOARD_ACCEPTED_TYPES.includes(item.type));\n      const file = media && media.getAsFile();\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n\n      if (!file && !pastedText) {\n        return;\n      }\n\n      e.preventDefault();\n\n      if (file && !editedMessage) {\n        const attachment = await buildAttachment(file.name, file, true);\n        setAttachments((attachments) => [\n          ...attachments,\n          attachment,\n        ]);\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText, input ? input.id : undefined);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments]);\n};\n","import { ApiFormattedText } from '../../../../api/types';\nimport { renderTextWithEntities } from '../../../common/helpers/renderMessageText';\n\nexport default function getMessageTextAsHtml(formattedText?: ApiFormattedText) {\n  const { text, entities } = formattedText || {};\n  if (!text) {\n    return '';\n  }\n\n  const result = renderTextWithEntities(\n    text,\n    entities,\n    undefined,\n    undefined,\n    true,\n  );\n\n  if (Array.isArray(result)) {\n    return result.join('');\n  }\n\n  return result;\n}\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\n\nimport { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_ID } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../helpers/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: number | undefined;\nlet currentThreadId: number | undefined;\n\nexport default (\n  draft: ApiFormattedText | undefined,\n  chatId: number,\n  threadId: number,\n  html: string,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  saveDraft: GlobalActions['saveDraft'],\n  clearDraft: GlobalActions['clearDraft'],\n) => {\n  const updateDraft = useCallback((draftChatId: number, draftThreadId: number) => {\n    if (htmlRef.current.length && !editedMessage) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(htmlRef.current!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (!draft) {\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(draft));\n\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId]);\n\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  // Subscribe and handle `window.blur`\n  useEffect(() => {\n    function handleBlur() {\n      if (chatId && threadId) {\n        updateDraft(chatId, threadId);\n      }\n    }\n\n    window.addEventListener('blur', handleBlur);\n\n    return () => {\n      window.removeEventListener('blur', handleBlur);\n    };\n  }, [chatId, threadId, updateDraft]);\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import React, {\n  FC, useRef, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Button, { OwnProps as ButtonProps } from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={IS_TOUCH_ENV ? onActivate : undefined}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AttachMenu = useModuleLoader(Bundles.Extra, 'AttachMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachMenu ? <AttachMenu {...props} /> : undefined;\n};\n\nexport default memo(AttachMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './CustomSendMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomSendMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomSend = useModuleLoader(Bundles.Extra, 'CustomSendMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomSend ? <CustomSend {...props} /> : undefined;\n};\n\nexport default memo(CustomSendMenuAsync);\n","import React, { FC } from '../../../lib/teact/teact';\nimport { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default StickerTooltipAsync;\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotKeyboardMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotKeyboardMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotKeyboardMenu = useModuleLoader(Bundles.Extra, 'BotKeyboardMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotKeyboardMenu ? <BotKeyboardMenu {...props} /> : undefined;\n};\n\nexport default memo(BotKeyboardMenuAsync);\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n} from '../../../modules/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { pick } from '../../../util/iteratees';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport { isChatPrivate } from '../../../modules/helpers';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setReplyingToId' | 'setEditingId' | 'focusMessage' | 'exitForwardMode'>;\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<StateProps & DispatchProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  setReplyingToId,\n  setEditingId,\n  focusMessage,\n  exitForwardMode,\n}) => {\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n  }, [replyingToId, editingId, forwardedMessagesCount, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, message]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? `${forwardedMessagesCount} forwarded messages`\n    : undefined;\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className}>\n      <div>\n        <Button round color=\"translucent\" ariaLabel=\"Cancel replying\" onClick={clearEmbedded}>\n          <i className=\"icon-close\" />\n        </Button>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={message}\n          sender={sender}\n          customText={customText}\n          title={editingId ? 'Edit Message' : undefined}\n          onClick={handleMessageClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      currentUserId,\n      forwardMessages: { fromChatId, toChatId, messageIds: forwardMessageIds },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n\n    let message;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = selectChatMessage(global, fromChatId!, forwardMessageIds![0]);\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = chatId === currentUserId;\n\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      sender = isChatPrivate(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n    }\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setReplyingToId',\n    'setEditingId',\n    'focusMessage',\n    'exitForwardMode',\n  ]),\n)(ComposerEmbeddedMessage));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import React, {\n  FC, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiMessage, ApiMessageEntityTypes, ApiWebPage } from '../../../api/types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n};\ntype DispatchProps = Pick<GlobalActions, 'loadWebPagePreview' | 'clearWebPagePreview' | 'toggleMessageWebPage'>;\n\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  loadWebPagePreview,\n  clearWebPagePreview,\n  toggleMessageWebPage,\n}) => {\n  const link = useMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities && entities.find(({ type }) => type === ApiMessageEntityTypes.TextUrl);\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  const handleClearWebpagePreview = () => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  };\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <Button round color=\"translucent\" ariaLabel=\"Clear Webpage Preview\" onClick={handleClearWebpagePreview}>\n          <i className=\"icon-close\" />\n        </Button>\n        <WebPage message={messageStub} inPreview />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadWebPagePreview', 'clearWebPagePreview', 'toggleMessageWebPage',\n  ]),\n)(WebPagePreview));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './CalendarModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CalendarModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CalendarModal = useModuleLoader(Bundles.Extra, 'CalendarModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CalendarModal ? <CalendarModal {...props} /> : undefined;\n};\n\nexport default memo(CalendarModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState, MessageListType } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { LangCode } from '../../../types';\n\nimport { EDITABLE_INPUT_ID, SCHEDULED_WHEN_ONLINE } from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_MOBILE_SCREEN, IS_EMOJI_SUPPORTED } from '../../../util/environment';\nimport {\n  selectChat,\n  selectIsChatWithBot,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatUser,\n  selectEmojiKeywords,\n} from '../../../modules/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatGroup,\n  isChatPrivate,\n  isChatAdmin,\n} from '../../../modules/helpers';\nimport { formatVoiceRecordDuration, getDayStartAt } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport insertHtmlInSelection from '../../../util/insertHtmlInSelection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport { isSelectionInsideInput } from './helpers/selection';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu.async';\nimport SymbolMenu from './SymbolMenu.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu.async';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport Portal from '../../ui/Portal';\nimport CalendarModal from '../../common/CalendarModal.async';\nimport PaymentModal from '../../payment/PaymentModal.async';\nimport ReceiptModal from '../../payment/ReceiptModal.async';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  editingMessage?: ApiMessage;\n  chat?: ApiChat;\n  draft?: ApiFormattedText;\n  isChatWithBot?: boolean;\n  isChatWithSelf?: boolean;\n  isRightColumnShown?: boolean;\n  isSelectModeActive?: boolean;\n  isForwarding?: boolean;\n  canSuggestMembers?: boolean;\n  isPollModalOpen?: boolean;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  botKeyboardMessageId?: number;\n  withScheduledButton?: boolean;\n  shouldSchedule?: boolean;\n  canScheduleUntilOnline?: boolean;\n  stickersForEmoji?: ApiSticker[];\n  groupChatMembers?: ApiChatMember[];\n  currentUserId?: number;\n  usersById?: Record<number, ApiUser>;\n  recentEmojis: string[];\n  lastSyncTime?: number;\n  contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n  shouldSuggestStickers?: boolean;\n  language: LangCode;\n  emojiKeywords?: Record<string, string[]>;\n} & Pick<GlobalState, 'connectionState'>;\n\ntype DispatchProps = Pick<GlobalActions, (\n  'sendMessage' | 'editMessage' | 'saveDraft' | 'forwardMessages' |\n  'clearDraft' | 'showError' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'openPollModal' | 'closePollModal' | 'loadScheduledHistory' | 'openChat' | 'closePaymentModal' |\n  'clearReceipt' | 'addRecentEmoji' | 'loadEmojiKeywords'\n)>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n}\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst CAPTION_MAX_LENGTH = 1024;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps & DispatchProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  canSuggestMembers,\n  isPollModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  botKeyboardMessageId,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  currentUserId,\n  usersById,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  language,\n  emojiKeywords,\n  recentEmojis,\n  sendMessage,\n  editMessage,\n  saveDraft,\n  clearDraft,\n  showError,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  forwardMessages,\n  openPollModal,\n  closePollModal,\n  loadScheduledHistory,\n  closePaymentModal,\n  openChat,\n  clearReceipt,\n  addRecentEmoji,\n  loadEmojiKeywords,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n  const [\n    scheduledMessageArgs, setScheduledMessageArgs,\n  ] = useState<GlobalState['messages']['contentToBeScheduled'] | undefined>();\n\n  // Cache for frequently updated state\n  const htmlRef = useRef<string>(html);\n  useEffect(() => {\n    htmlRef.current = html;\n  }, [html]);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID) {\n      loadScheduledHistory();\n    }\n  }, [chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) {\n      return;\n    }\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      setScheduledMessageArgs(contentToBeScheduled);\n      openCalendar();\n    }\n  }, [contentToBeScheduled, openCalendar]);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  const mainButtonState = editingMessage\n    ? MainButtonState.Edit\n    : !IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding\n      ? MainButtonState.Send\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, mentionFilter,\n    closeMentionTooltip, insertMention,\n    mentionFilteredMembers,\n  } = useMentionTooltip(\n    canSuggestMembers && !attachments.length,\n    html,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    currentUserId,\n    usersById,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const allowedAttachmentOptions = useMemo(() => {\n    return getAllowedAttachmentOptions(chat, isChatWithBot);\n  }, [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    recentEmojis,\n    undefined,\n    setHtml,\n    emojiKeywords,\n  );\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    const messageInput = document.getElementById(inputId)!;\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange)) {\n        if (IS_EMOJI_SUPPORTED) {\n          // Insertion will trigger `onChange` in MessageInput, so no need to setHtml in state\n          document.execCommand('insertText', false, text);\n        } else {\n          insertHtmlInSelection(newHtml);\n          messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        }\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    if (!IS_MOBILE_SCREEN) {\n      // If selection is outside of input, set cursor at the end of input\n      requestAnimationFrame(() => {\n        focusEditableElement(messageInput);\n      });\n    }\n  }, []);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, []);\n\n  const resetComposer = useCallback(() => {\n    setHtml('');\n    setAttachments([]);\n    closeStickerTooltip();\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_MOBILE_SCREEN) {\n      // @perf\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeCalendar, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu]);\n\n  // Handle chat change\n  const prevChatId = usePrevious(chatId);\n  useEffect(() => {\n    if (!prevChatId || chatId === prevChatId) {\n      return;\n    }\n\n    stopRecordingVoice();\n    resetComposer();\n  }, [chatId, prevChatId, resetComposer, stopRecordingVoice]);\n\n  const handleEditComplete = useEditing(htmlRef, setHtml, editingMessage, resetComposer, openDeleteModal, editMessage);\n  useDraft(draft, chatId, threadId, html, htmlRef, setHtml, editingMessage, saveDraft, clearDraft);\n  useClipboardPaste(insertTextAndUpdateCursor, setAttachments, editingMessage);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, []);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments([]);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    if (currentAttachments.length && text && text.length > CAPTION_MAX_LENGTH) {\n      const extraLength = text.length - CAPTION_MAX_LENGTH;\n      showError({\n        error: {\n          message: 'CAPTION_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n        },\n      });\n      return;\n    }\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = Math.floor(Date.now() / 1000);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showError({\n            error: {\n              message: `A wait of ${secondsRemaining} seconds is required before sending another message in this chat`,\n              isSlowMode: true,\n            },\n          });\n\n          const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n          messageInput.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n    if (isForwarding) {\n      forwardMessages();\n    }\n\n    lastMessageSendTimeSeconds.current = Math.floor(Date.now() / 1000);\n\n    clearDraft({ chatId, localOnly: true });\n\n    // Wait until message animation starts\n    requestAnimationFrame(resetComposer);\n  }, [\n    activeVoiceRecording, attachments, connectionState, chatId, slowMode, isForwarding, isAdmin,\n    sendMessage, stopRecordingVoice, resetComposer, clearDraft, showError, forwardMessages,\n  ]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ sticker });\n      openCalendar();\n    } else {\n      sendMessage({ sticker });\n      requestAnimationFrame(resetComposer);\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ gif });\n      openCalendar();\n    } else {\n      sendMessage({ gif });\n      requestAnimationFrame(resetComposer);\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ poll });\n      closePollModal();\n      openCalendar();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, openCalendar, sendMessage, shouldSchedule]);\n\n  const handleSilentSend = useCallback(() => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ isSilent: true });\n      openCalendar();\n    } else {\n      handleSend(true);\n    }\n  }, [handleSend, openCalendar, shouldSchedule]);\n\n  const handleMessageSchedule = useCallback((date: Date) => {\n    const { isSilent, ...restArgs } = scheduledMessageArgs || {};\n\n    // Scheduled time can not be less than 10 seconds in future\n    const scheduledAt = Math.round(Math.max(date.getTime(), Date.now() + 60 * 1000) / 1000);\n\n    if (!scheduledMessageArgs || Object.keys(restArgs).length === 0) {\n      handleSend(!!isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...scheduledMessageArgs,\n        scheduledAt,\n      });\n      requestAnimationFrame(resetComposer);\n    }\n    closeCalendar();\n  }, [closeCalendar, handleSend, resetComposer, scheduledMessageArgs, sendMessage]);\n\n  const handleMessageScheduleUntilOnline = useCallback(() => {\n    handleMessageSchedule(new Date(SCHEDULED_WHEN_ONLINE * 1000));\n  }, [handleMessageSchedule]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n  }, [closeCalendar]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_MOBILE_SCREEN || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_MOBILE_SCREEN) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover]);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        if (shouldSchedule) {\n          if (activeVoiceRecording) {\n            pauseRecordingVoice();\n          }\n          openCalendar();\n        } else {\n          handleSend();\n          requestAnimationFrame(resetComposer);\n        }\n        break;\n      case MainButtonState.Record:\n        startRecordingVoice();\n        break;\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, resetComposer, shouldSchedule, startRecordingVoice, handleEditComplete,\n    activeVoiceRecording, openCalendar, pauseRecordingVoice, handleSend,\n  ]);\n\n  const lang = useLang();\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && !allowedAttachmentOptions.canAttachMedia;\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = areVoiceMessagesNotAllowed\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : (shouldSchedule ? openCalendar : handleSend);\n\n  return (\n    <div className={className}>\n      {allowedAttachmentOptions.canAttachMedia && (\n        <Portal containerId=\"#middle-column-portals\">\n          <DropArea\n            isOpen={dropAreaState !== DropAreaState.None}\n            withQuick={[dropAreaState, prevDropAreaState].includes(DropAreaState.QuickFile)}\n            onHide={onDropHide}\n            onFileSelect={handleFileSelect}\n          />\n        </Portal>\n      )}\n      <AttachmentModal\n        attachments={attachments}\n        caption={attachments.length ? html : ''}\n        canSuggestMembers={canSuggestMembers}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        usersById={usersById}\n        recentEmojis={recentEmojis}\n        onCaptionUpdate={setHtml}\n        language={language}\n        emojiKeywords={emojiKeywords}\n        addRecentEmoji={addRecentEmoji}\n        loadEmojiKeywords={loadEmojiKeywords}\n        onSend={shouldSchedule ? openCalendar : handleSend}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={Boolean(isPollModalOpen)}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      <PaymentModal\n        isOpen={Boolean(isPaymentModalOpen)}\n        onClose={closePaymentModal}\n      />\n      <ReceiptModal\n        isOpen={Boolean(isReceiptModalOpen)}\n        onClose={clearReceipt}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        filter={mentionFilter}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredChatMembers={mentionFilteredMembers}\n        usersById={usersById}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!allowedAttachmentOptions.canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {IS_MOBILE_SCREEN ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              <Spinner color=\"gray\" />\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={`${isSymbolMenuOpen ? 'activated' : ''}`}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && window.innerWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER ? '' : lang('Message')\n            }\n            shouldSetFocus={isSymbolMenuOpen}\n            shouldSupressFocus={IS_MOBILE_SCREEN && isSymbolMenuOpen}\n            shouldSupressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSupressedFocus={closeSymbolMenu}\n          />\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={`${isBotKeyboardOpen ? 'activated' : ''}`}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {!activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={`${isAttachMenuOpen ? 'activated' : ''}`}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openAttachMenu}\n              ariaLabel=\"Add an attachment\"\n            >\n              <i className=\"icon-attach\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <StickerTooltip\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n            loadEmojiKeywords={loadEmojiKeywords}\n            language={language}\n          />\n          <AttachMenu\n            isOpen={isAttachMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            onClose={closeAttachMenu}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          <SymbolMenu\n            isOpen={isSymbolMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={`${mainButtonState} ${activeVoiceRecording ? 'recording' : ''}`}\n        disabled={areVoiceMessagesNotAllowed}\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSilentSend={!isChatWithSelf ? handleSilentSend : undefined}\n          onScheduleSend={!shouldSchedule ? openCalendar : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={scheduledDefaultDate.getTime()}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        secondButtonLabel={canScheduleUntilOnline ? 'Send When Online' : undefined}\n        onClose={handleCloseCalendar}\n        onSubmit={handleMessageSchedule}\n        onSecondButtonClick={canScheduleUntilOnline ? handleMessageScheduleUntilOnline : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatUser = chat && selectChatUser(global, chat);\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language } = global.settings.byKey;\n    const emojiKeywords = selectEmojiKeywords(global, language);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      canScheduleUntilOnline: (\n        !isChatWithSelf && !isChatWithBot\n        && (chat && chatUser && isChatPrivate(chatId) && chatUser.status && Boolean(chatUser.status.wasOnline))\n      ),\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds && scheduledIds.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId: messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      canSuggestMembers: chat && isChatGroup(chat),\n      isPollModalOpen: global.isPollModalOpen,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat && chat.fullInfo && chat.fullInfo.members,\n      currentUserId: global.currentUserId,\n      usersById: global.users.byId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      shouldSuggestStickers: global.settings.byKey.shouldSuggestStickers,\n      recentEmojis: global.recentEmojis,\n      language,\n      emojiKeywords: emojiKeywords ? emojiKeywords.keywords : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'sendMessage',\n    'editMessage',\n    'saveDraft',\n    'clearDraft',\n    'showError',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'forwardMessages',\n    'openPollModal',\n    'closePollModal',\n    'closePaymentModal',\n    'clearReceipt',\n    'loadScheduledHistory',\n    'openChat',\n    'addRecentEmoji',\n    'loadEmojiKeywords',\n  ]),\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_IOS } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nexport default () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_IOS) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getDispatch();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(html) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({ emoji: html });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","export default function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection && selection.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n      selection.removeAllRanges();\n      selection.addRange(range);\n    }\n  }\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../../config';\nimport parseMessageInput from '../helpers/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../modules/helpers';\n\nexport default (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: () => void,\n  openDeleteModal: () => void,\n  editMessage: GlobalActions['editMessage'],\n) => {\n  // TODO useOnChange\n  // Handle editing message\n  useEffect(() => {\n    if (!editedMessage) {\n      setHtml('');\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(editedMessage.content.text));\n\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [editedMessage, setHtml]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer]);\n\n  return handleEditComplete;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import React, {\n  FC, useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  CONTENT_TYPES_FOR_QUICK_UPLOAD,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n} from '../../config';\nimport { IS_MOBILE_SCREEN, IS_TOUCH_ENV, MASK_IMAGE_DISABLED } from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n} from '../../modules/selectors';\nimport { getCanPostInChat, getMessageSendingRestrictionReason, isChatPrivate } from '../../modules/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport ScrollDownButton from './ScrollDownButton';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\n\nimport './MiddleColumn.scss';\n\ntype StateProps = {\n  chatId?: number;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  messageSendingRestrictionReason?: string;\n  hasPinnedOrAudioMessage?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openChat' | 'unpinAllMessages' | 'loadUser'>;\n\nconst CLOSE_ANIMATION_DURATION = IS_MOBILE_SCREEN ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction canBeQuicklyUploaded(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && CONTENT_TYPES_FOR_QUICK_UPLOAD.includes(item.type);\n}\n\nconst MiddleColumn: FC<StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  messageSendingRestrictionReason,\n  hasPinnedOrAudioMessage,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  animationLevel,\n  openChat,\n  unpinAllMessages,\n  loadUser,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const hasTools = hasPinnedOrAudioMessage && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION);\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && Array.from(items).every(canBeQuicklyUploaded);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openChat({ id: chatId });\n  }, [unpinAllMessages, openChat, closeUnpinModal, chatId]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    customBackground && 'custom-bg-image',\n    backgroundColor && 'custom-bg-color',\n    customBackground && isBackgroundBlurred && 'blurred',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const lang = useLang();\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      // @ts-ignore teact-feature\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n    >\n      <div\n        id=\"middle-column-bg\"\n        // @ts-ignore\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n            />\n            <Transition\n              name={animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={renderingMessageListType === 'thread' && renderingThreadId === MAIN_THREAD_ID ? 1 : 2}\n              shouldCleanup\n            >\n              {() => (\n                <>\n                  <MessageList\n                    key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    type={renderingMessageListType}\n                    canPost={renderingCanPost}\n                    hasTools={renderingHasTools}\n                    onFabToggle={setIsFabShown}\n                    onNotchToggle={setIsNotchShown}\n                  />\n                  <div className={footerClassName}>\n                    {renderingCanPost && (\n                      <Composer\n                        chatId={renderingChatId}\n                        threadId={renderingThreadId}\n                        messageListType={renderingMessageListType}\n                        dropAreaState={dropAreaState}\n                        onDropHide={handleHideDropArea}\n                      />\n                    )}\n                    {isPinnedMessageList && (\n                      <div className=\"unpin-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          color=\"secondary\"\n                          className=\"unpin-all-button\"\n                          onClick={handleOpenUnpinModal}\n                        >\n                          <i className=\"icon-unpin\" />\n                          <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                        </Button>\n                      </div>\n                    )}\n                    {!isPinnedMessageList && !renderingCanPost && messageSendingRestrictionReason && (\n                      <div className={messagingDisabledClassName}>\n                        <div className=\"messaging-disabled-inner\">\n                          <span>\n                            {messageSendingRestrictionReason}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n                    <MessageSelectToolbar\n                      messageListType={renderingMessageListType}\n                      isActive={isSelectModeActive}\n                      canPost={renderingCanPost}\n                    />\n                  </div>\n                </>\n              )}\n            </Transition>\n\n            <ScrollDownButton\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n            />\n          </div>\n          {IS_MOBILE_SCREEN && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { theme } = global.settings.byKey;\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chats: { listIds } } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_MOBILE_SCREEN && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate: isChatPrivate(chatId),\n      canPost: !isPinnedMessageList && (!chat || canPost) && (!isBotNotStarted || IS_MOBILE_SCREEN),\n      isPinnedMessageList,\n      messageSendingRestrictionReason: chat && getMessageSendingRestrictionReason(chat),\n      hasPinnedOrAudioMessage: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(pinnedIds && pinnedIds.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat', 'unpinAllMessages', 'loadUser',\n  ]),\n)(MiddleColumn));\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nexport default (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n} from '../../modules/selectors';\nimport { isChatAdmin, isChatChannel, isChatPrivate } from '../../modules/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport './RightHeader.scss';\nimport { getDayStartAt } from '../../util/dateFormat';\n\ntype OwnProps = {\n  chatId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canManage?: boolean;\n  isChannel?: boolean;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalTextSearchQuery' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'searchTextMessagesLocal' | 'toggleManagement' | 'openHistoryCalendar'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupMembers,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n}\n\nconst RightHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  profileState,\n  managementScreen,\n  canManage,\n  isChannel,\n  onClose,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  setLocalTextSearchQuery,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  searchTextMessagesLocal,\n  toggleManagement,\n  openHistoryCalendar,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const backButtonRef = useRef<HTMLDivElement>(null);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : undefined // Never reached\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_MOBILE_SCREEN\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    shouldSkipTransition && 'no-transition',\n  );\n\n  // Add class in the next AF to synchronize with animation with Transition components\n  useEffect(() => {\n    backButtonRef.current!.classList.toggle('state-back', isBackButton);\n  }, [isBackButton]);\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div ref={backButtonRef} className={buttonClassName} />\n      </Button>\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isChatPrivate(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n\n    return {\n      canManage,\n      isChannel,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalTextSearchQuery',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'searchTextMessagesLocal',\n    'toggleManagement',\n    'openHistoryCalendar',\n  ]),\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiChatMember, ApiMessage, ApiUser } from '../../../api/types';\nimport { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../modules/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  usersById?: Record<number, ApiUser>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: number,\n  lastSyncTime?: number,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(groupChatMembers.map(({ userId }) => userId), usersById);\n  }, [groupChatMembers, usersById]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForMembers(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  let viewportIds: number[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForMembers(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  memberIds?: number[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    memberIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !memberIds || viewportIds[0] === memberIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      ).reverse();\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport {\n  ApiUser, ApiChat, ApiMediaFormat, ApiPhoto,\n} from '../../api/types';\n\nimport {\n  getChatAvatarHash, isDeletedUser, getUserColorKey, getChatTitle, isChatPrivate, getUserFullName,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport buildClassName from '../../util/buildClassName';\nimport { getFirstLetters } from '../../util/textFormat';\nimport useMedia from '../../hooks/useMedia';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\n\nimport './ProfilePhoto.scss';\n\ntype OwnProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isFirstPhoto?: boolean;\n  isSavedMessages?: boolean;\n  photo?: ApiPhoto;\n  lastSyncTime?: number;\n  onClick: NoneToVoidFunction;\n};\n\nconst ProfilePhoto: FC<OwnProps> = ({\n  chat,\n  user,\n  photo,\n  isFirstPhoto,\n  isSavedMessages,\n  lastSyncTime,\n  onClick,\n}) => {\n  const lang = useLang();\n  const isDeleted = user && isDeletedUser(user);\n\n  function getMediaHash(size: 'normal' | 'big' = 'big', forceAvatar?: boolean) {\n    if (photo && !forceAvatar) {\n      return `photo${photo.id}?size=c`;\n    }\n\n    let hash: string | undefined;\n    if (!isSavedMessages && !isDeleted) {\n      if (user) {\n        hash = getChatAvatarHash(user, size);\n      } else if (chat) {\n        hash = getChatAvatarHash(chat, size);\n      }\n    }\n\n    return hash;\n  }\n\n  const imageHash = getMediaHash();\n  const fullMediaData = useMedia(imageHash, false, ApiMediaFormat.BlobUrl, lastSyncTime);\n  const avatarThumbnailData = useMedia(\n    !fullMediaData && isFirstPhoto ? getMediaHash('normal', true) : undefined,\n    false,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const thumbDataUri = useBlurSync(!fullMediaData && photo && photo.thumbnail && photo.thumbnail.dataUri);\n  const imageSrc = fullMediaData || avatarThumbnailData || thumbDataUri;\n  const prevImageSrc = usePrevious(imageSrc);\n\n  let content: string | undefined = '';\n\n  if (isSavedMessages) {\n    content = <i className=\"icon-avatar-saved-messages\" />;\n  } else if (isDeleted) {\n    content = <i className=\"icon-avatar-deleted-account\" />;\n  } else if (imageSrc) {\n    content = <img src={imageSrc} className=\"avatar-media\" alt=\"\" decoding=\"async\" />;\n  } else if (!imageSrc && user) {\n    const userFullName = getUserFullName(user);\n    content = userFullName ? getFirstLetters(userFullName, 2) : undefined;\n  } else if (!imageSrc && chat) {\n    const title = getChatTitle(lang, chat);\n    content = title && getFirstLetters(title, isChatPrivate(chat.id) ? 2 : 1);\n  } else {\n    content = (\n      <div className=\"spinner-wrapper\">\n        <Spinner color=\"white\" />\n      </div>\n    );\n  }\n\n  const fullClassName = buildClassName(\n    'ProfilePhoto',\n    `color-bg-${getUserColorKey(user || chat)}`,\n    isSavedMessages && 'saved-messages',\n    isDeleted && 'deleted-account',\n    (!isSavedMessages && !(imageSrc)) && 'no-photo',\n  );\n\n  return (\n    <div className={fullClassName} onClick={imageSrc ? onClick : undefined}>\n      {prevImageSrc && imageSrc && prevImageSrc !== imageSrc && (\n        <img src={prevImageSrc} className=\"prev-avatar-media\" alt=\"\" decoding=\"async\" />\n      )}\n      {typeof content === 'string' ? renderText(content, ['hq_emoji']) : content}\n    </div>\n  );\n};\n\nexport default memo(ProfilePhoto);\n","import React, {\n  FC, useEffect, useCallback, memo, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiChat } from '../../api/types';\nimport { GlobalActions, GlobalState } from '../../global/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { selectChat, selectUser } from '../../modules/selectors';\nimport {\n  getUserFullName, getUserStatus, isChatChannel, isUserOnline,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport usePhotosPreload from './hooks/usePhotosPreload';\nimport useLang from '../../hooks/useLang';\n\nimport VerifiedIcon from '../common/VerifiedIcon';\nimport ProfilePhoto from './ProfilePhoto';\nimport Transition from '../ui/Transition';\n\nimport './ProfileInfo.scss';\n\ntype OwnProps = {\n  userId: number;\n  forceShowSelf?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  chat?: ApiChat;\n  isSavedMessages?: boolean;\n  animationLevel: 0 | 1 | 2;\n} & Pick<GlobalState, 'lastSyncTime'>;\n\ntype DispatchProps = Pick<GlobalActions, 'loadFullUser' | 'openMediaViewer'>;\n\nconst PrivateChatInfo: FC<OwnProps & StateProps & DispatchProps> = ({\n  user,\n  chat,\n  isSavedMessages,\n  lastSyncTime,\n  animationLevel,\n  loadFullUser,\n  openMediaViewer,\n}) => {\n  const { id: userId } = user || {};\n  const { id: chatId } = chat || {};\n  const fullName = user ? getUserFullName(user) : (chat ? chat.title : '');\n  const photos = (user ? user.photos : (chat ? chat.photos : undefined)) || [];\n  const slideAnimation = animationLevel >= 1 ? 'slide' : 'none';\n\n  const [currentPhotoIndex, setCurrentPhotoIndex] = useState(0);\n  const isFirst = isSavedMessages || photos.length <= 1 || currentPhotoIndex === 0;\n  const isLast = isSavedMessages || photos.length <= 1 || currentPhotoIndex === photos.length - 1;\n\n  // Deleting the last profile photo may result in an error\n  useEffect(() => {\n    if (currentPhotoIndex > photos.length) {\n      setCurrentPhotoIndex(Math.max(0, photos.length - 1));\n    }\n  }, [currentPhotoIndex, photos.length]);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime && userId) {\n      loadFullUser({ userId });\n    }\n  }, [userId, loadFullUser, lastSyncTime]);\n\n  usePhotosPreload(user || chat, photos, currentPhotoIndex);\n\n  const handleProfilePhotoClick = useCallback(() => {\n    openMediaViewer({\n      avatarOwnerId: userId || chatId,\n      profilePhotoIndex: currentPhotoIndex,\n      origin: MediaViewerOrigin.ProfileAvatar,\n    });\n  }, [openMediaViewer, userId, chatId, currentPhotoIndex]);\n\n  const selectPreviousMedia = useCallback(() => {\n    if (isFirst) {\n      return;\n    }\n\n    setCurrentPhotoIndex(currentPhotoIndex - 1);\n  }, [currentPhotoIndex, isFirst]);\n\n  const selectNextMedia = useCallback(() => {\n    if (isLast) {\n      return;\n    }\n\n    setCurrentPhotoIndex(currentPhotoIndex + 1);\n  }, [currentPhotoIndex, isLast]);\n\n  // Support for swipe gestures and closing on click\n  useEffect(() => {\n    const element = document.querySelector<HTMLDivElement>(\n      '.profile-slide-container > .active, .profile-slide-container > .to',\n    );\n    if (!element) {\n      return undefined;\n    }\n\n    return captureEvents(element, {\n      excludedClosestSelector: '.navigation',\n      onSwipe: IS_TOUCH_ENV ? (e, direction) => {\n        if (direction === SwipeDirection.Right) {\n          selectPreviousMedia();\n        } else if (direction === SwipeDirection.Left) {\n          selectNextMedia();\n        }\n      } : undefined,\n    });\n  }, [selectNextMedia, selectPreviousMedia]);\n\n  if (!user && !chat) {\n    return undefined;\n  }\n\n  function renderPhotoTabs() {\n    if (isSavedMessages || !photos || photos.length <= 1) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"photo-dashes\">\n        {photos.map((_, i) => (\n          <span className={`photo-dash ${i === currentPhotoIndex ? 'current' : ''}`} />\n        ))}\n      </div>\n    );\n  }\n\n  function renderPhoto() {\n    const photo = !isSavedMessages && photos && photos.length > 0 ? photos[currentPhotoIndex] : undefined;\n\n    return (\n      <ProfilePhoto\n        key={currentPhotoIndex}\n        user={user}\n        chat={chat}\n        photo={photo}\n        isSavedMessages={isSavedMessages}\n        isFirstPhoto={isFirst}\n        onClick={handleProfilePhotoClick}\n      />\n    );\n  }\n\n  function renderStatus() {\n    if (user) {\n      return (\n        <div className={`status ${isUserOnline(user) ? 'online' : ''}`}>\n          <span className=\"user-status\" dir=\"auto\">{getUserStatus(lang, user)}</span>\n        </div>\n      );\n    }\n\n    return (\n      <span className=\"status\" dir=\"auto\">{\n        isChatChannel(chat!)\n          ? lang('Subscribers', chat!.membersCount, 'i')\n          : lang('Members', chat!.membersCount, 'i')\n      }\n      </span>\n    );\n  }\n\n  const isVerifiedIconShown = (user && user.isVerified) || (chat && chat.isVerified);\n\n  return (\n    <div className=\"ProfileInfo\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"photo-wrapper\">\n        {renderPhotoTabs()}\n        <Transition activeKey={currentPhotoIndex} name={slideAnimation} className=\"profile-slide-container\">\n          {renderPhoto}\n        </Transition>\n\n        {!isFirst && (\n          <button\n            type=\"button\"\n            className=\"navigation prev\"\n            aria-label={lang('AccDescrPrevious')}\n            onClick={selectPreviousMedia}\n          />\n        )}\n        {!isLast && (\n          <button\n            type=\"button\"\n            className=\"navigation next\"\n            aria-label={lang('Next')}\n            onClick={selectNextMedia}\n          />\n        )}\n      </div>\n\n      <div className=\"info\" dir={lang.isRtl ? 'rtl' : 'auto'}>\n        {isSavedMessages ? (\n          <div className=\"title\">\n            <h3 dir=\"auto\">{lang('SavedMessages')}</h3>\n          </div>\n        ) : (\n          <div className=\"title\">\n            <h3 dir=\"auto\">{fullName && renderText(fullName)}</h3>\n            {isVerifiedIconShown && <VerifiedIcon />}\n          </div>\n        )}\n        {!isSavedMessages && renderStatus()}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId, forceShowSelf }): StateProps => {\n    const { lastSyncTime } = global;\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const isSavedMessages = !forceShowSelf && user && user.isSelf;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      lastSyncTime, user, chat, isSavedMessages, animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadFullUser', 'openMediaViewer']),\n)(PrivateChatInfo));\n","import {\n  ApiChat, ApiMediaFormat, ApiPhoto, ApiUser,\n} from '../../../api/types';\nimport { useEffect } from '../../../lib/teact/teact';\nimport * as mediaLoader from '../../../util/mediaLoader';\n\nconst PHOTOS_TO_PRELOAD = 4;\n\nexport default function usePhotosPreload(\n  profile: ApiUser | ApiChat | undefined,\n  photos: ApiPhoto[],\n  currentIndex: number,\n) {\n  useEffect(() => {\n    photos.slice(currentIndex, currentIndex + PHOTOS_TO_PRELOAD).forEach((photo) => {\n      const mediaData = mediaLoader.getFromMemory(`photo${photo.id}?size=c`);\n      if (!mediaData) {\n        mediaLoader.fetch(`photo${photo.id}?size=c`, ApiMediaFormat.BlobUrl);\n      }\n    });\n  }, [currentIndex, photos]);\n}\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../global/types';\nimport { ApiChat, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../modules/selectors';\nimport {\n  getChatDescription, getChatLink, getHasAdminRight, isChatChannel, isChatPrivate, isUserRightBanned,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\n\nimport SafeLink from '../common/SafeLink';\nimport ListItem from '../ui/ListItem';\nimport Switcher from '../ui/Switcher';\n\ntype OwnProps = {\n  chatOrUserId: number;\n  forceShowSelf?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  chat?: ApiChat;\n  canInviteUsers?: boolean;\n} & Pick<GlobalState, 'lastSyncTime'>;\n\ntype DispatchProps = Pick<GlobalActions, 'loadFullUser' | 'updateChatMutedState' | 'showNotification'>;\n\nconst ChatExtra: FC<OwnProps & StateProps & DispatchProps> = ({\n  lastSyncTime,\n  user,\n  chat,\n  forceShowSelf,\n  canInviteUsers,\n  loadFullUser,\n  showNotification,\n  updateChatMutedState,\n}) => {\n  const {\n    id: userId,\n    fullInfo,\n    username,\n    phoneNumber,\n    isSelf,\n  } = user || {};\n  const {\n    id: chatId,\n    isMuted: currentIsMuted,\n    username: chatUsername,\n  } = chat || {};\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime && userId) {\n      loadFullUser({ userId });\n    }\n  }, [loadFullUser, userId, lastSyncTime]);\n\n  const handleNotificationChange = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !currentIsMuted });\n  }, [chatId, currentIsMuted, updateChatMutedState]);\n\n  if (!chat || chat.isRestricted || (isSelf && !forceShowSelf)) {\n    return undefined;\n  }\n\n  function copy(text: string, entity: string) {\n    copyTextToClipboard(text);\n    showNotification({ message: `${entity} was copied` });\n  }\n\n  const formattedNumber = phoneNumber && formatPhoneNumberWithCode(phoneNumber);\n  const link = getChatLink(chat);\n  const url = link.indexOf('http') === 0 ? link : `http://${link}`;\n  const printedUsername = username || chatUsername;\n  const description = (fullInfo && fullInfo.bio) || getChatDescription(chat);\n\n  return (\n    <div className=\"ChatExtra\">\n      {formattedNumber && !!formattedNumber.length && (\n        <ListItem icon=\"phone\" multiline narrow ripple onClick={() => copy(formattedNumber, lang('Phone'))}>\n          <span className=\"title\" dir=\"auto\">{formattedNumber}</span>\n          <span className=\"subtitle\">{lang('Phone')}</span>\n        </ListItem>\n      )}\n      {printedUsername && (\n        <ListItem\n          icon=\"mention\"\n          multiline\n          narrow\n          ripple\n          onClick={() => copy(`@${printedUsername}`, lang('Username'))}\n        >\n          <span className=\"title\" dir=\"auto\">{renderText(printedUsername)}</span>\n          <span className=\"subtitle\">{lang('Username')}</span>\n        </ListItem>\n      )}\n      {description && !!description.length && (\n        <ListItem\n          icon=\"info\"\n          multiline\n          narrow\n          isStatic\n        >\n          <span className=\"title\" dir=\"auto\">\n            {renderText(description, ['br', 'links', 'emoji'])}\n          </span>\n          <span className=\"subtitle\">{lang(userId ? 'UserBio' : 'Info')}</span>\n        </ListItem>\n      )}\n      {canInviteUsers && !printedUsername && !!link.length && (\n        <ListItem icon=\"mention\" multiline narrow ripple onClick={() => copy(link, lang('SetUrlPlaceholder'))}>\n          <div className=\"title\">\n            <SafeLink url={url} className=\"title\" text={link} />\n          </div>\n          <span className=\"subtitle\">{lang('SetUrlPlaceholder')}</span>\n        </ListItem>\n      )}\n      <ListItem icon=\"unmute\" ripple onClick={handleNotificationChange}>\n        <span>{lang('Notifications')}</span>\n        <Switcher\n          id=\"group-notifications\"\n          label={userId ? 'Toggle User Notifications' : 'Toggle Chat Notifications'}\n          checked={!currentIsMuted}\n          inactive\n        />\n      </ListItem>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatOrUserId }): StateProps => {\n    const { lastSyncTime } = global;\n\n    const chat = chatOrUserId ? selectChat(global, chatOrUserId) : undefined;\n    const user = isChatPrivate(chatOrUserId) ? selectUser(global, chatOrUserId) : undefined;\n\n    const canInviteUsers = chat && (\n      (!isChatChannel(chat) && !isUserRightBanned(chat, 'inviteUsers'))\n      || getHasAdminRight(chat, 'inviteUsers')\n    );\n\n    return {\n      lastSyncTime, chat, user, canInviteUsers,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadFullUser', 'updateChatMutedState', 'showNotification',\n  ]),\n)(ChatExtra));\n","import React, {\n  FC, useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiMessage,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n} from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport {\n  MediaViewerOrigin, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  isChatAdmin, isChatChannel, isChatGroup, isChatPrivate,\n} from '../../modules/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from './ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from './ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: number;\n  userId?: number;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  resolvedUserId?: number;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  members?: ApiChatMember[];\n  usersById?: Record<number, ApiUser>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalMediaSearchType' | 'loadMoreMembers' | 'searchMediaMessagesLocal' | 'openMediaViewer' |\n  'openAudioPlayer' | 'openUserInfo' | 'focusMessage' | 'loadProfilePhotos'\n)>;\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\n\nconst Profile: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  isChannel,\n  resolvedUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasMembersTab,\n  areMembersHidden,\n  members,\n  usersById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  setLocalMediaSearchType,\n  loadMoreMembers,\n  searchMediaMessagesLocal,\n  openMediaViewer,\n  openAudioPlayer,\n  openUserInfo,\n  focusMessage,\n  loadProfilePhotos,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n  ]), [hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown, loadMoreMembers, searchMediaMessagesLocal, tabType, mediaSearchType, members,\n    usersById, chatMessages, foundIds, chatId, lastSyncTime,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n        }\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContents = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function renderSharedMedia() {\n    if (!viewportIds || !canRenderContents || !chatMessages) {\n      // This is just a single-frame delay so we do not show spinner\n      const noSpinner = isFirstTab && viewportIds && !canRenderContents;\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && <Spinner />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty_search');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty_search');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty_search');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              renderingFor=\"sharedMedia\"\n              message={chatMessages[id]}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          viewportIds!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item\"\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContents ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContents ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div className=\"shared-media\">\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-reversed' : 'slide'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderSharedMedia}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: number, resolvedUserId?: number) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo\n        userId={resolvedUserId || chatId}\n        forceShowSelf={resolvedUserId !== chatId}\n      />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} forceShowSelf={resolvedUserId !== chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > div.active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, userId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const chatMessages = selectChatMessages(global, userId || chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById } = global.users;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat && chat.fullInfo && chat.fullInfo.members;\n    const areMembersHidden = hasMembersTab && chat && chat.fullInfo && !chat.fullInfo.canViewMembers;\n\n    let resolvedUserId;\n    if (userId) {\n      resolvedUserId = userId;\n    } else if (isChatPrivate(chatId)) {\n      resolvedUserId = chatId;\n    }\n\n    return {\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasMembersTab,\n      areMembersHidden,\n      ...(hasMembersTab && members && {\n        members,\n        usersById,\n      }),\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat && chat.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalMediaSearchType',\n    'loadMoreMembers',\n    'searchMediaMessagesLocal',\n    'openMediaViewer',\n    'openAudioPlayer',\n    'openUserInfo',\n    'focusMessage',\n    'loadProfilePhotos',\n  ]),\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nexport default () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ManagementScreens, ProfileState, RightColumnContent } from '../../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../modules/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: number;\n  threadId?: number;\n  currentProfileUserId?: number;\n  isChatSelected: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'toggleChatInfo' | 'toggleManagement' | 'openUserInfo' |\n  'closeLocalTextSearch' | 'closePollResults' |\n  'setStickerSearchQuery' | 'setGifSearchQuery'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps & DispatchProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  currentProfileUserId,\n  isChatSelected,\n  toggleChatInfo,\n  toggleManagement,\n  openUserInfo,\n  closeLocalTextSearch,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  closePollResults,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<number | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo || contentKey === RightColumnContent.UserInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback(() => {\n    switch (contentKey) {\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo();\n        break;\n      case RightColumnContent.UserInfo:\n        if (isScrolledDown) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        openUserInfo({ id: undefined });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, openUserInfo, closePollResults,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isOpen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevContentKey, prevChatId]) => {\n    if (\n      (prevContentKey === RightColumnContent.ChatInfo && contentKey === RightColumnContent.UserInfo)\n      || (prevContentKey === RightColumnContent.UserInfo && contentKey === RightColumnContent.ChatInfo)\n      || (prevChatId !== chatId)\n    ) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [contentKey, chatId]);\n\n  // eslint-disable-next-line consistent-return\n  function renderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.ChatInfo:\n      case RightColumnContent.UserInfo:\n        return (\n          <Profile\n            key={currentProfileUserId || chatId!}\n            chatId={chatId!}\n            userId={currentProfileUserId}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n          />\n        );\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch />;\n      case RightColumnContent.PollResults:\n        return <PollResults />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n        />\n        <Transition\n          name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      currentProfileUserId: global.users.selectedId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n    'toggleChatInfo',\n    'toggleManagement',\n    'closeLocalTextSearch',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'closePollResults',\n  ]),\n)(RightColumn));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ErrorsAsync: FC = ({ isOpen }) => {\n  const Errors = useModuleLoader(Bundles.Extra, 'Errors', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Errors ? <Errors /> : undefined;\n};\n\nexport default memo(ErrorsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './ForwardPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardPicker = useModuleLoader(Bundles.Extra, 'ForwardPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardPicker ? <ForwardPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardPickerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import React, { FC, useEffect, memo } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiMessage } from '../../api/types';\n\nimport '../../modules/actions/all';\nimport {\n  ANIMATION_END_DELAY, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectChatMessage,\n  selectCountNotMutedUnread,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport buildClassName from '../../util/buildClassName';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\n\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport Notifications from './Notifications.async';\nimport Errors from './Errors.async';\nimport ForwardPicker from './ForwardPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  animationLevel: number;\n  lastSyncTime?: number;\n  isLeftColumnShown: boolean;\n  isRightColumnShown: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasErrors: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadAnimatedEmojis' | 'loadNotificationSettings' | 'loadNotificationExceptions' | 'updateIsOnline'\n)>;\n\nconst ANIMATION_DURATION = 350;\nconst NOTIFICATION_INTERVAL = 1000;\n\nlet rightColumnAnimationTimeout: number | undefined;\nlet notificationInterval: number | undefined;\n\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps & DispatchProps> = ({\n  lastSyncTime,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  animationLevel,\n  hasNotifications,\n  hasErrors,\n  audioMessage,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  loadAnimatedEmojis,\n  loadNotificationSettings,\n  loadNotificationExceptions,\n  updateIsOnline,\n}) => {\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n    }\n  }, [lastSyncTime, loadAnimatedEmojis, loadNotificationExceptions, loadNotificationSettings, updateIsOnline]);\n\n  const {\n    transitionClassNames: middleColumnTransitionClassNames,\n  } = useShowTransition(!isLeftColumnShown, undefined, true);\n\n  const {\n    transitionClassNames: rightColumnTransitionClassNames,\n  } = useShowTransition(isRightColumnShown, undefined, true);\n\n  const className = buildClassName(\n    middleColumnTransitionClassNames.replace(/([\\w-]+)/g, 'middle-column-$1'),\n    rightColumnTransitionClassNames.replace(/([\\w-]+)/g, 'right-column-$1'),\n  );\n\n  useEffect(() => {\n    // For animating Symbol Menu on mobile\n    document.body.classList.toggle('is-middle-column-open', className.includes('middle-column-open'));\n    // For animating components in portals (i.e. Notification)\n    document.body.classList.toggle('is-right-column-shown', className.includes('right-column-open'));\n  }, [className]);\n\n  // Add `body` classes when toggling right column\n  useEffect(() => {\n    if (animationLevel > 0) {\n      document.body.classList.add('animating-right-column');\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n\n      if (rightColumnAnimationTimeout) {\n        clearTimeout(rightColumnAnimationTimeout);\n        rightColumnAnimationTimeout = undefined;\n      }\n\n      rightColumnAnimationTimeout = window.setTimeout(() => {\n        document.body.classList.remove('animating-right-column');\n        rightColumnAnimationTimeout = undefined;\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [animationLevel, isRightColumnShown]);\n\n  useBackgroundMode(() => {\n    updateIsOnline(false);\n  }, () => {\n    updateIsOnline(true);\n  });\n\n  // Browser tab indicators\n  useBackgroundMode(() => {\n    const initialUnread = selectCountNotMutedUnread(getGlobal());\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = selectCountNotMutedUnread(getGlobal()) - initialUnread;\n        if (newUnread > 0) {\n          document.title = `${newUnread} notification${newUnread > 1 ? 's' : ''}`;\n          updateIcon(true);\n        }\n      } else {\n        document.title = PAGE_TITLE;\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, () => {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      document.title = PAGE_TITLE;\n    }\n\n    updateIcon(false);\n  });\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  return (\n    <div id=\"Main\" className={className} onDrop={stopEvent} onDragOver={stopEvent}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardPicker isOpen={isForwardModalOpen} />\n      <Notifications isOpen={hasNotifications} />\n      <Errors isOpen={hasErrors} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      animationLevel: global.settings.byKey.animationLevel,\n      lastSyncTime: global.lastSyncTime,\n      isLeftColumnShown: global.isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasErrors: Boolean(global.errors.length),\n      audioMessage,\n      safeLinkModalUrl: global.safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadAnimatedEmojis', 'loadNotificationSettings', 'loadNotificationExceptions', 'updateIsOnline',\n  ]),\n)(Main));\n","import { getDispatch, getGlobal } from '../lib/teact/teactn';\n\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nif (!getGlobal().connectionState) {\n  getDispatch().initApi();\n}\n"],"sourceRoot":""}