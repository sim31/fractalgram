{"version":3,"sources":["webpack:///./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack:///./src/components/mediaViewer/SenderInfo.tsx","webpack:///./src/components/mediaViewer/MediaViewerActions.tsx","webpack:///./src/components/mediaViewer/MediaViewerFooter.tsx","webpack:///./src/hooks/useFullscreen.ts","webpack:///./src/components/mediaViewer/helpers/formatFileSize.ts","webpack:///./src/components/mediaViewer/VideoPlayerControls.tsx","webpack:///./src/components/mediaViewer/VideoPlayer.tsx","webpack:///./src/components/mediaViewer/ZoomControls.tsx","webpack:///./src/components/mediaViewer/PanZoom.tsx","webpack:///./src/components/mediaViewer/MediaViewer.tsx","webpack:///./src/components/main/ForwardPicker.tsx","webpack:///./src/components/main/Errors.tsx","webpack:///./src/components/main/Notifications.tsx","webpack:///./src/components/main/SafeLinkModal.tsx","webpack:///./src/components/common/CalendarModal.tsx","webpack:///./src/components/main/HistoryCalendar.tsx","webpack:///./src/components/common/DeleteMessageModal.tsx","webpack:///./src/components/common/PinMessageModal.tsx","webpack:///./src/components/common/UnpinAllMessagesModal.tsx","webpack:///./src/components/middle/DeleteSelectedMessagesModal.tsx","webpack:///./src/components/middle/MessageSelectToolbar.tsx","webpack:///./src/hooks/useSelectWithEnter.ts","webpack:///./src/components/left/search/LeftSearchResultChat.tsx","webpack:///./src/components/left/search/RecentContacts.tsx","webpack:///./src/components/left/search/ChatMessage.tsx","webpack:///./src/components/left/search/DateSuggest.tsx","webpack:///./src/components/left/search/ChatResults.tsx","webpack:///./src/components/left/search/ChatMessageResults.tsx","webpack:///./src/components/left/search/helpers/createMapStateToProps.ts","webpack:///./src/components/left/search/MediaResults.tsx","webpack:///./src/components/left/search/helpers/getSenderName.ts","webpack:///./src/components/left/search/LinkResults.tsx","webpack:///./src/components/left/search/FileResults.tsx","webpack:///./src/components/left/search/AudioResults.tsx","webpack:///./src/components/left/search/LeftSearch.tsx","webpack:///./src/hooks/useReducer.ts","webpack:///./src/hooks/reducers/useFoldersReducer.ts","webpack:///./src/hooks/reducers/useTwoFaReducer.ts","webpack:///./src/components/left/settings/SettingsHeader.tsx","webpack:///./src/components/left/settings/SettingsMain.tsx","webpack:///./src/components/ui/FloatingActionButton.tsx","webpack:///./src/components/common/UsernameInput.tsx","webpack:///./src/components/left/settings/SettingsEditProfile.tsx","webpack:///./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack:///./src/components/ui/ShowMoreButton.tsx","webpack:///./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack:///./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack:///./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack:///./src/components/left/settings/folders/SettingsFolders.tsx","webpack:///./src/components/ui/RangeSlider.tsx","webpack:///./src/components/middle/composer/StickerSetCoverAnimated.tsx","webpack:///./src/components/middle/composer/StickerSetCover.tsx","webpack:///./src/components/common/StickerButton.tsx","webpack:///./src/components/left/settings/SettingsStickerSet.tsx","webpack:///./src/components/left/settings/SettingsGeneral.tsx","webpack:///./src/util/systemFilesDialog.ts","webpack:///./src/util/colors.ts","webpack:///./src/components/left/settings/WallpaperTile.tsx","webpack:///./src/components/left/settings/SettingsGeneralBackground.tsx","webpack:///./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack:///./src/components/left/settings/SettingsNotifications.tsx","webpack:///./src/components/left/settings/SettingsPrivacy.tsx","webpack:///./src/components/left/settings/SettingsLanguage.tsx","webpack:///./src/components/left/settings/helper/privacy.ts","webpack:///./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack:///./src/components/left/settings/SettingsPrivacyActiveSessions.tsx","webpack:///./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaPassword.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack:///./src/components/common/Picker.tsx","webpack:///./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack:///./src/components/left/settings/Settings.tsx","webpack:///./src/components/left/main/ContactList.tsx","webpack:///./src/components/left/newChat/NewChatStep1.tsx","webpack:///./src/components/left/newChat/NewChatStep2.tsx","webpack:///./src/components/left/newChat/NewChat.tsx","webpack:///./src/components/left/ArchivedChats.tsx","webpack:///./src/util/scrollLock.ts","webpack:///./src/components/middle/message/helpers/copyOptions.ts","webpack:///./src/components/middle/message/MessageContextMenu.tsx","webpack:///./src/components/middle/message/ContextMenuContainer.tsx","webpack:///./src/components/common/StickerSetModal.tsx","webpack:///./src/components/middle/HeaderMenuContainer.tsx","webpack:///./src/components/middle/MobileSearch.tsx","webpack:///./src/util/findInViewport.ts","webpack:///./src/util/isFullyVisible.ts","webpack:///./src/components/middle/composer/MentionTooltip.tsx","webpack:///./src/components/middle/composer/AttachmentModal.tsx","webpack:///./src/components/middle/composer/PollModal.tsx","webpack:///./src/hooks/useMouseInside.ts","webpack:///./src/components/middle/composer/EmojiButton.tsx","webpack:///./src/components/middle/composer/EmojiCategory.tsx","webpack:///./src/components/middle/composer/EmojiPicker.tsx","webpack:///./src/components/middle/composer/StickerSet.tsx","webpack:///./src/components/middle/composer/StickerPicker.tsx","webpack:///./src/components/common/GifButton.tsx","webpack:///./src/components/middle/composer/GifPicker.tsx","webpack:///./src/components/middle/composer/SymbolMenuFooter.tsx","webpack:///./src/components/middle/composer/SymbolMenu.tsx","webpack:///./src/components/middle/composer/AttachMenu.tsx","webpack:///./src/components/middle/composer/StickerTooltip.tsx","webpack:///./src/components/middle/composer/BotKeyboardMenu.tsx","webpack:///./src/components/middle/composer/CustomSendMenu.tsx","webpack:///./src/components/middle/composer/EmojiTooltip.tsx","webpack:///./src/components/right/RightSearch.tsx","webpack:///./src/components/right/StickerSetResult.tsx","webpack:///./src/components/right/StickerSearch.tsx","webpack:///./src/components/right/GifSearch.tsx","webpack:///./src/components/right/PollAnswerResults.tsx","webpack:///./src/components/right/PollResults.tsx","webpack:///./src/components/right/management/ManageUser.tsx","webpack:///./src/components/right/management/ManageGroup.tsx","webpack:///./src/components/right/management/ManageGroupPermissions.tsx","webpack:///./src/components/right/management/ManageGroupRemovedUsers.tsx","webpack:///./src/components/right/management/ManageChannel.tsx","webpack:///./src/components/right/management/ManageChatPrivacyType.tsx","webpack:///./src/components/right/management/ManageDiscussion.tsx","webpack:///./src/components/right/management/ManageGroupUserPermissions.tsx","webpack:///./src/components/right/management/ManageChatAdministrators.tsx","webpack:///./src/components/right/management/ManageGroupRecentActions.tsx","webpack:///./src/components/right/management/ManageGroupAdminRights.tsx","webpack:///./src/components/right/management/ManageGroupMembers.tsx","webpack:///./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack:///./src/components/right/management/Management.tsx","webpack:///./src/components/middle/helpers/getCurrencySign.ts","webpack:///./src/components/common/helpers/detectCardType.ts","webpack:///./src/hooks/reducers/usePaymentReducer.ts","webpack:///./src/hooks/useFocusAfterAnimation.tsx","webpack:///./src/components/ui/Select.tsx","webpack:///./src/components/payment/ShippingInfo.tsx","webpack:///./src/components/payment/Shipping.tsx","webpack:///./src/components/payment/Checkout.tsx","webpack:///./src/components/payment/ExpiryInput.tsx","webpack:///./src/components/middle/helpers/inputFormatters.ts","webpack:///./src/assets/mastercard.svg","webpack:///./src/assets/visa.svg","webpack:///./src/components/payment/CardInput.tsx","webpack:///./src/components/payment/PaymentInfo.tsx","webpack:///./src/components/payment/PaymentModal.tsx","webpack:///./src/components/payment/ReceiptModal.tsx","webpack:///./src/components/common/helpers/animatedAssets.ts","webpack:///./src/assets/TwoFactorSetupMonkeyIdle.tgs","webpack:///./src/assets/TwoFactorSetupMonkeyTracking.tgs","webpack:///./src/assets/TwoFactorSetupMonkeyClose.tgs","webpack:///./src/assets/TwoFactorSetupMonkeyPeek.tgs","webpack:///./src/assets/FoldersAll.tgs","webpack:///./src/assets/FoldersNew.tgs","webpack:///./src/assets/DiscussionGroupsDucks.tgs","webpack:///./src/components/ui/CropModal.tsx","webpack:///./src/components/ui/AvatarEditable.tsx","webpack:///./src/components/common/PasswordMonkey.tsx","webpack:///./src/components/common/PasswordForm.tsx"],"names":["animateOpening","hasFooter","origin","bestImageData","message","mediaEl","fromImage","getNodes","width","windowWidth","windowSize","get","mediaSize","isVideo","photo","video","webPage","getMessageContent","Boolean","getVideoDimensions","getPhotoFullDimensions","AVATAR_FULL_DIMENSIONS","availableWidth","height","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","mql","window","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","topOffsetRem","matches","REM","getTopOffset","top","fromTop","left","fromLeft","fromWidth","fromHeight","getBoundingClientRect","MediaViewerOrigin","SharedMedia","Album","ScheduledAlbum","SearchResult","includes","uncovered","realWidth","realHeight","size","Math","max","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","ghost","createGhost","applyStyles","transform","applyShape","document","body","classList","add","requestAnimationFrame","appendChild","style","firstChild","objectFit","remove","clearShape","setTimeout","contains","removeChild","ANIMATION_END_DELAY","animateClosing","container","toImage","getElementById","querySelector","targetTop","el","display","rect","windowHeight","isElementInViewport","shouldFadeOut","Inline","ScheduledInline","isMessageImageFullyVisible","existingGhost","getElementsByClassName","ProfileAvatar","transition","transformOrigin","opacity","source","shouldAppendProfileInfo","createElement","img","Image","src","HTMLVideoElement","poster","profileInfo","cloneNode","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","parentElement","scrollTop","offsetHeight","element","styles","Object","assign","containerSelector","mediaSelector","MiddleHeaderAvatar","mediaEls","querySelectorAll","length","withGlobal","global","chatId","messageId","isAvatar","sender","isChatPrivate","selectUser","selectChat","selectChatMessage","selectSender","setGlobal","actions","pick","closeMediaViewer","focusMessage","handleFocusMessage","useCallback","lang","useLang","isFromChat","senderTitle","getSenderTitle","className","onClick","Avatar","key","chat","user","dir","renderText","formatMediaDateTime","date","MediaViewerActions","mediaData","isZoomed","fileName","onCloseMediaViewer","onForward","onZoomToggle","isDownloadStarted","downloadProgress","handleDownloadClick","useMediaDownload","getMessageMediaHash","undefined","MenuButton","useMemo","onTrigger","isOpen","Button","round","color","ariaLabel","IS_SINGLE_COLUMN_LAYOUT","DropdownMenu","trigger","positionX","MenuItem","icon","href","download","ProgressSpinner","progress","noCross","MediaViewerFooter","text","isHidden","isForVideo","isMultiline","setIsMultiline","useState","useEffect","footerContent","checkIsMultiline","clientHeight","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","prop","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","getBrowserFullscreenElementProp","units","bytes","number","floor","log","toFixed","stopEvent","VideoPlayerControls","bufferedProgress","currentTime","duration","fileSize","isForceVisible","isForceMobileVersion","isPlayed","isFullscreenSupported","isFullscreen","onChangeFullscreen","onPlayPause","onSeek","isVisible","setVisibility","timeout","clearTimeout","downloadedPercent","totalSize","percentagePlayed","percentageBuffered","min","step","type","onInput","value","renderSeekLine","ripple","formatMediaDuration","renderTime","formatFileSize","memo","url","isGif","posterData","posterSize","isMediaViewerOpen","noPlay","onClose","videoRef","useRef","setIsPlayed","IS_TOUCH_ENV","IS_IOS","setCurrentTime","isControlsVisible","setIsControlsVisible","setFullscreen","exitFullscreen","elRef","setIsFullscreen","useLayoutEffect","listener","listenerEnter","listenerExit","current","PLATFORM_ENV","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreenStatus","isBuffered","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","pause","safePlay","togglePlayState","play","useVideoCleanup","handleMouseOver","handleMouseOut","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","handleSeek","Number","target","toggleControls","togglePayingStateBySpace","wrapperStyle","videoStyle","onMouseOver","onMouseOut","ref","autoPlay","playsInline","loop","muted","onEnded","onDoubleClick","onTimeUpdate","join","square","isShown","onChangeZoom","prevIsShown","usePrevious","inputRef","zoomLevel","setZoomLevel","isSeeking","handleStartSeek","handleStopSeek","disabled","onChange","onMouseDown","onMouseUp","INITIAL_MATRIX","SCALE_VALUES","1","1.5","2","2.5","3","children","noWrap","canPan","panDeltaX","panDeltaY","onPan","tunedZoomLevel","isDragging","setIsDragging","dragData","setDragData","dx","dy","x","y","matrixData","setMatrixData","panWrapperRef","panContainerRef","newZoomLevel","newPandx","newPandy","newMatrixData","areSortedArraysEqual","oldScale","wrapper","image","wrapperRect","imageRect","newImgWidth","newImgHeight","newImgX","newImgY","calculateSafeZoneOnZoom","toString","preventDefault","newDragData","pageX","pageY","onMouseMove","deltaX","deltaY","getNewMatrixData","renderPhoto","blobUrl","imageSize","canDrag","alt","draggable","Spinner","threadId","avatarOwnerId","profilePhotoIndex","mediaViewer","animationLevel","settings","byKey","senderId","avatarOwner","chatMessages","collectionIds","selectScheduledMessage","selectScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","animationKey","webPagePhoto","getMessageWebPagePhoto","getMessagePhoto","getMessageVideo","isWebPagePhoto","isPhoto","isFromSharedMedia","isFromSearch","slideAnimation","headerAnimation","isGhostAnimation","getMessageMediaFilename","prevSenderId","canPanZoomWrap","setCanPanZoomWrap","setIsZoomed","panDelta","setPanDelta","isFooterHidden","setIsFooterHidden","messageIds","getChatMediaMessageIds","selectedMediaMessageIndex","indexOf","isFirst","isLast","getMediaHash","full","photos","getChatAvatarHash","blobUrlPictogram","useMedia","ApiMediaFormat","BlobUrl","previewMediaHash","blobUrlPreview","startsWith","DataUri","fullMediaData","useMediaWithDownloadProgress","getMessageMediaFormat","localBlobUrl","thumbDataUri","useBlurSync","getMessageMediaThumbDataUri","photoDimensions","videoDimensions","toggle","forceUpdate","useForceUpdate","addListener","removeListener","prevMessage","prevOrigin","prevAvatarOwner","prevBestImageData","dispatchHeavyAnimationEvent","textParts","renderMessageText","timer","closeZoom","handleZoomToggle","handleZoomValue","level","canCloseZoom","close","handleFooterClick","handleForward","fromChatId","captureEscKeyListener","stopCurrentAudio","getMessageId","fromId","direction","index","selectPreviousMedia","selectNextMedia","handleKeyDown","shouldCloseOnVideo","captureEvents","excludedClosestSelector","onSwipe","SwipeDirection","Right","Left","handlePan","handleToggleFooterVisibility","renderSlide","isActive","calculateMediaViewerDimensions","renderSenderInfo","ShowTransition","isRtl","Transition","activeKey","name","aria-label","serverTimeOffset","chats","byId","chatsById","listIds","currentUserId","activeListIds","active","archivedListIds","archived","setForwardChatId","exitForwardMode","loadMoreChats","filter","setFilter","focus","blur","chatIds","sortChatIds","getCanPostInChat","MAIN_THREAD_ID","searchWords","getChatTitle","viewportIds","getMore","useInfiniteScroll","handleFilterChange","containerRef","useKeyboardListNavigation","modalHeader","InputText","onKeyDown","placeholder","Modal","header","InfiniteScroll","items","onLoadMore","noScrollRestore","map","ListItem","PrivateChatInfo","status","userId","GroupChatInfo","Loading","getErrorHeader","error","isSlowMode","errors","dismissError","title","getReadableErrorText","isText","notifications","dismissNotification","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","handleDismiss","renderingUrl","useCurrentOrPrev","ConfirmDialog","confirmLabel","confirmHandler","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","Date","fixedMinDate","getFullYear","getMonth","getDate","fixedMaxDate","formatInputTime","String","padStart","selectedAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","now","defaultSelectedDate","selectedDate","setSelectedDate","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","currentYear","currentMonth","currentDate","shouldDisableNextMonth","shouldDisablePrevMonth","calendarGrid","grid","setFullYear","setMonth","setDate","monthStartDay","getDay","i","push","gridDate","buildCalendarGrid","handleChangeHours","replace","hours","getTime","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","formatMonthAndYear","d","dateCopy","letter","role","tabIndex","handleDateSelect","inputMode","formatHumanDate","formatTime","formatSubmitLabel","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","isSchedule","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","contactName","getUserFirstOrLastName","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","album","deleteMessages","deleteScheduledMessages","handleDeleteMessageForAll","messages","shouldDeleteForAll","handleDeleteMessageForSelf","onEnter","isPrivateChat","isChatWithSelf","selectIsChatWithSelf","isChannel","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","selectCurrentChat","exitMessageSelectMode","messageListType","canDelete","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canPost","openForwardMenuForSelectedMessages","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useFlag","captureKeyboardListeners","onBackspace","onDelete","onEsc","prevSelectedMessagesCount","renderingSelectedMessagesCount","formattedMessagesCount","destructive","onSelect","buttonRef","activeElement","privateChatUserId","privateChatUser","isPinned","selectIsChatPinned","isMuted","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","withUsername","contextActions","useChatContextActions","handleDelete","handleClick","useSelectWithEnter","avatarSize","DeleteChatModal","runThrottled","cb","userIds","topUserIds","topPeers","usersById","users","recentlyFoundChatIds","globalSearch","onReset","loadTopUsers","loadContactList","openChat","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","useHorizontalScroll","lastSyncTime","searchQuery","mediaThumbnail","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","withOnlineStatus","isSavedMessages","isSelf","isVerified","VerifiedIcon","Link","formatPastTimeShort","getMessageSummaryText","highlight","renderMessageSummary","searchDate","suggestions","match","formatDateToString","suggestion","latestYear","getSuggestionsFromDate","localContactIds","contactList","fetchingStatus","globalResults","localResults","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleLoadMore","LoadMoreDirection","Backwards","query","handleChatClick","handlePickerItemClick","MEMO_EMPTY_ARRAY","foundContactIds","fullName","getUserFullName","username","unique","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","NothingFound","description","PickerSelectedItem","chatOrUserId","clickArg","createMapStateToProps","props","currentType","isVoice","theme","selectTheme","isLoading","searchChatId","handleSelectMedia","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","isMediaGrid","isMessageList","itemSelector","Media","idPrefix","getSenderName","senderName","isChatGroup","handleMessageFocus","shouldDrawDateDivider","toYearMonth","WebLink","onMessageClick","getMessageDocument","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","onPlay","TABS","GlobalSearchContent","ChatList","Links","Files","Music","Voice","CHAT_TABS","slice","TRANSITION_RENDER_COUNT","keys","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","content","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","useReducer","reducer","initialState","reducerRef","state","setState","action","currentState","INCLUDED_CHAT_TYPES","EXCLUDED_CHAT_TYPES","INCLUDE_FILTER_FIELDS","EXCLUDE_FILTER_FIELDS","selectChatFilters","mode","selectTemp","selectedChatIds","selectedChatTypes","includedChatIds","includeFilters","folder","excludedChatIds","excludeFilters","getSuggestedFolderName","filters","values","bots","groups","channels","contacts","nonContacts","INITIAL_STATE","chatFilter","foldersReducer","payload","isTouched","omit","folderId","currentPassword","password","hint","email","twoFaReducer","currentScreen","editedFolderId","onSaveFilter","signOut","deleteChatFolder","isSignOutDialogOpen","setIsSignOutDialogOpen","isDeleteFolderDialogOpen","setIsDeleteFolderDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","closeDeleteFolderConfirmation","handleSignOutMessage","handleDeleteFolderMessage","SettingsMenuButton","SettingsScreens","EditProfile","General","Notifications","Privacy","Language","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyForwarding","PrivacyGroupChats","PrivacyPhoneNumberAllowedContacts","PrivacyLastSeenAllowedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyForwardingAllowedContacts","PrivacyGroupChatsAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyForwardingDeniedContacts","PrivacyGroupChatsDeniedContacts","PrivacyActiveSessions","PrivacyBlockedUsers","TwoFaDisabled","TwoFaEnabled","TwoFaNewPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaChangePasswordHint","TwoFaNewPasswordEmail","TwoFaRecoveryEmail","TwoFaNewPasswordEmailCode","TwoFaRecoveryEmailCode","TwoFaCongratulations","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","Folders","FoldersCreateFolder","FoldersEditFolder","FoldersIncludedChats","FoldersExcludedChats","renderHeaderContent","confirmIsDestructive","currentUser","onScreenSelect","formatPhoneNumberWithCode","phoneNumber","FloatingActionButton","buttonClassName","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","debounce","currentUsername","asLink","isUsernameAvailable","checkUsername","setUsername","langPrefix","label","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","trim","isValid","isUsernameValid","success","readOnly","profileEdit","firstName","currentFirstName","lastName","currentLastName","fullInfo","bio","currentBio","currentAvatarHash","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setFirstName","setLastName","setBio","currentAvatarBlobUrl","ProfileEditProgress","InProgress","isUsernameError","isSaveButtonShown","Complete","handlePhotoChange","newPhoto","handleFirstNameChange","handleLastNameChange","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","UsernameInput","runThrottledForLoadRecommended","orderedIds","orderedFolderIds","foldersById","recommended","recommendedChatFolders","chatFolders","notifySettings","notifyExceptions","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","showError","animationData","setAnimationData","isAnimationLoaded","setIsAnimationLoaded","handleAnimationLoad","getAnimationData","then","handleCreateFolder","userFolders","subtitle","getFolderDescriptionText","handleCreateFolderFromRecommended","AnimatedSticker","STICKER_SIZE_FOLDER_SETTINGS","noLoop","onLoad","pill","fluid","narrow","multiline","ShowMoreButton","count","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","loadedActiveChatIds","loadedArchivedChatIds","dispatch","onAddIncludedChats","onAddExcludedChats","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","includedChatTypes","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","Set","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","listType","renderChats","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","find","typeKey","inactive","renderChatType","event","folderUpdate","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","onFilterChange","chatTypes","shouldMinimize","hasMaxChats","handleItemClick","newSelectedIds","splice","handleChatTypeClick","newSelectedChatTypes","selectedType","isMinimized","canClose","Checkbox","checked","isSelected","withChatType","orderedPinnedIds","archivedPinnedIds","activeChatArrays","prepareChatList","archivedChatArrays","pinnedChats","otherChats","displayedIds","newFilter","handleSelectedIdsChange","ids","handleSelectedChatTypesChange","newFilters","forEach","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","options","range","handleChange","trackWidth","possibleValuesLength","option","STICKER_SIZE_PICKER_HEADER","stickerSet","observeIntersection","isIntersecting","useIsIntersecting","mediaHash","lottieData","Lottie","shouldRenderFullMedia","useTransitionForMedia","getFirstLetters","hasThumbnail","sticker","noAnimate","onUnfaveClick","localMediaHash","stickerSelector","thumbnail","dataUri","previewBlobUrl","shouldPlay","isAnimated","markLoaded","unmarkLoaded","canAnimatedPlay","shouldRenderThumb","shouldRenderPreview","previewTransitionClassNames","fullClassName","emoji","data-sticker-id","isLowPriority","stickers","firstSticker","STICKER_SIZE_GENERAL_SETTINGS","ANIMATION_LEVEL_OPTIONS","stickerSetIds","added","setIds","stickerSetsById","setsById","messageTextSize","messageSendKeyCombo","shouldAutoDownloadMediaFromContacts","shouldAutoDownloadMediaInPrivateChats","shouldAutoDownloadMediaInGroups","shouldAutoDownloadMediaInChannels","shouldAutoPlayGifs","shouldAutoPlayVideos","shouldSuggestStickers","shouldLoopStickers","setSettingOption","loadStickerSets","loadAddedStickers","stickerSettingsRef","observe","observeIntersectionForCovers","useIntersectionObserver","rootRef","isModalOpen","openModal","closeModal","setSticker","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleAnimationLevelChange","newLevel","_","handleMessageTextSizeChange","newSize","documentElement","setProperty","handleStickerSetClick","stickerSets","installedDate","RadioGroup","selected","onCheck","isChecked","fromSticker","fileSelector","openSystemFilesDialog","accept","callback","noMultiple","setAttribute","removeAttribute","onchange","click","hex2rgb","param","parseInt","substring","rgb2hex","p0","p1","p2","rgb2hsb","r","g","h","s","v","hsb2rgb","f","p","q","t","getPatternColor","rgbColor","hue","saturation","wallpaper","slug","thumbRef","useCanvasBlur","isDownloadAllowed","setIsDownloadAllowed","fullMedia","wasDownloadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","handleSelect","blob","fetchBlob","cacheApi","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","files","handleUploadWallpaper","handleSetColor","handleResetToDefault","backgroundColor","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","async","defaultRGB","data","rgb","canvas","context","getContext","preloadImage","naturalHeight","naturalWidth","offsetWidth","drawImage","getImageData","blockSize","getAverageColor","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","onCapture","onDrag","onRelease","withCursor","hex","hueHex","w","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","data-color","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleContactNotificationChange","hasPassword","isSensitiveEnabled","canChangeSensitive","privacy","blocked","activeSessions","blockedCount","totalCount","sessionsCount","visibilityPrivacyPhoneNumber","visibility","visibilityPrivacyLastSeen","lastSeen","visibilityPrivacyProfilePhoto","profilePhoto","visibilityPrivacyForwarding","forwards","visibilityPrivacyGroupChats","chatInvite","loadPrivacySettings","loadBlockedContacts","loadAuthorizations","loadContentSettings","updateContentSettings","getVisibilityValue","languages","language","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","langCode","setLanguage","currentLangCode","navigator","toLowerCase","shortLangCode","substr","nativeName","buildOptions","loadingOption","getPrivacyKey","screen","privacySettings","allowUserIds","allowChatIds","blockUserIds","blockChatIds","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","reduce","result","membersCount","blockCount","handleVisibilityChange","getLocation","session","region","country","getDeviceEnvironment","deviceModel","platform","systemVersion","terminateAuthorization","terminateAllAuthorizations","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","handleTerminateSessionClick","hash","handleTerminateAllSessions","currentSession","isCurrent","otherSessions","renderSession","handler","dateActive","appName","ip","sessions","chatsByIds","usersByIds","blockedIds","unblockContact","handleUnblockClick","contactId","viewportOffset","isPrivate","CHAT_HEIGHT_PX","renderContact","animatedEmoji","selectAnimatedEmoji","AnimatedEmoji","expectedPassword","submitLabel","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","handleSubmit","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","onChangePasswordVisibility","onStart","FOCUS_DELAY_TIMEOUT_MS","shouldConfirm","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","codeLength","twoFaSettings","waitingEmailCodeLength","newValue","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","code","itemIds","filterPlaceholder","notFoundText","searchInputId","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","handleSelectedContactIdsChange","contactsIds","foldersState","foldersDispatch","twoFaState","twoFaDispatch","handleSaveFilter","renderCurrentSection","Main","renderCurrentSectionContent","contactIds","resultIds","sortUserIds","forceShowSelf","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","handleNextStep","creationProgress","creationError","chatCreation","memberIds","createGroupChat","createChannel","setTitle","about","setAbout","ChatCreationProgress","handleTitleChange","handleDescriptionChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","NewChannelStep2","NewGroupStep2","NewChannelStep1","NewGroupStep1","folderType","noChatsText","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","ArrowLeft","ArrowRight","PageUp","PageDown","End","Home","Tab","preventDefaultForScrollKeys","disableScrolling","passive","ontouchmove","onkeydown","enableScrolling","getCopyLabel","hasSelection","canImageBeCopied","MessageContextMenu","anchor","canSendNow","canReschedule","canReply","canEdit","canPin","canUnpin","canForward","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","onReply","onEdit","onPin","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCloseAnimationEnd","onCopyLink","copyOptions","afterEffect","getMessageText","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","mediaLoader","copyImageToClipboard","anchorNode","parentNode","clipboardText","copyTextToClipboard","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","positionY","useContextMenuPosition","Menu","noOptions","isScheduled","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadMessageLink","isMenuOpen","setIsMenuOpen","setIsDeleteModalOpen","isPinModalOpen","setIsPinModalOpen","isCalendarOpen","openCalendar","closeCalendar","closeMenu","closePinModal","handleCloseCalendar","handleReply","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleOpenCalendar","handleRescheduleMessage","scheduledAt","handleCopyLink","scheduledMaxDate","getDayStartAt","selectStickerSet","stickerSetId","loadStickers","toggleStickerSet","sendMessage","throttleMs","isDisabled","stickerSetAccessHash","isPreloadedGlobally","handleButtonClick","hasCloseButton","STICKER_SIZE_MODAL","isRestricted","canDeleteChat","getCanDeleteChat","canSubscribe","canSearch","canMute","canLeave","onSubscribeChannel","onSearchClick","updateChatMutedState","enterMessageSelectMode","handleToggleMuteClick","handleSubscribe","handleSearch","handleSelectMessages","Portal","runDebouncedForSearch","results","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","Array","from","input","div","contentEditable","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","SearchInput","findInViewport","selectorOrElements","margin","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y1","y2","isFullyVisible","onInsertUserName","filteredChatMembers","getSelectedIndex","newIndex","cycleRestrict","selectedMentionIndex","setSelectedMentionIndex","handleArrowKey","handleUserSelect","forceFocus","handleSelectMention","member","onUp","onDown","onTab","first","position","fastSmoothScroll","setItemVisible","prevChatMembers","renderedChatMembers","attachments","caption","canSuggestMembers","groupChatMembers","recentEmojis","emojiKeywords","onCaptionUpdate","addRecentEmoji","loadEmojiKeywords","onFileAppend","onClear","hideTimeoutRef","prevAttachments","renderingAttachments","isHovered","markHovered","unmarkHovered","isQuick","every","quick","isMentionTooltipOpen","mentionFilter","closeMentionTooltip","insertMention","mentionFilteredMembers","useMentionTooltip","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","sendAttachments","handleFilesDrop","dataTransfer","newFiles","file","CONTENT_TYPES_FOR_QUICK_UPLOAD","areAllPhotos","mimeType","areAllVideos","renderHeader","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","data-attach-description","attachment","File","filename","extension","getFileExtension","previewData","emojis","onEmojiSelect","MessageInput","html","editableInputId","onUpdate","shouldSetFocus","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","innerHTML","addNewOption","newOptions","list","scrollHeight","scrollTo","behavior","handleCreate","questionTrimmed","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","hidden","closeTimeout","useMouseInside","menuCloseTimeout","isMouseInside","native","names","IS_EMOJI_SUPPORTED","loading","category","allEmojis","useOnIntersect","emojisPerRow","ceil","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","headerRef","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","entries","entry","intersectingWithIndexes","newLeft","HEADER_BUTTON_WIDTH","fastSmoothScrollHorizontal","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","handleEmojiSelect","MENU_TRANSITION_DURATION","containerClassName","faded","STICKER_MARGIN","loadAndPlay","onStickerSelect","onStickerUnfave","stickersPerRow","STICKER_SIZE_PICKER","stickerSetIntersections","favorite","recentStickers","favoriteStickers","addedSetIds","canSendStickers","loadRecentStickers","loadFavoriteStickers","addRecentSticker","activeSetIndex","setActiveSetIndex","areAddedLoaded","allSets","noPopulatedSets","set","stickerSetEl","handleStickerSelect","handleStickerUnfave","gif","videoData","shouldRenderVideo","preload","savedGifs","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","SYMBOL_MENU_TAB_ICONS","Emoji","Stickers","GIFs","onRemoveSymbol","onSearchOpen","renderTabButton","handleSearchOpen","isActivated","allowedAttachmentOptions","setRecentEmojis","handleMouseEnter","handleMouseLeave","fastRaf","recentEmojisRef","renderContent","isFrom","onMouseEnter","onMouseLeave","noCloseOnBackdrop","onFileSelect","onPollCreate","handleQuickSelect","handleDocumentSelect","canAttachMedia","canAttachPolls","autoClose","forEmoji","clearStickersForEmoji","prevStickers","displayedStickers","clickInlineButton","keyboardButtons","row","button","onSilentSend","onScheduleSend","listEmojis","usePrevDuringAnimation","selectedIndex","setSelectedIndex","emojisCount","handleSelectEmoji","onLeft","onRight","messagesById","foundResults","senderUser","getGlobal","senderChat","forwardInfo","isChannelPost","orderBy","preloadBackwards","LastMessageMeta","selectShouldLoopStickers","isSomeModalOpen","onModalToggle","isAdded","areStickersLoaded","useOnChange","coverStickerIds","covers","otherStickers","handleAddClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","featured","featuredIds","loadFeaturedStickers","setIsModalOpen","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","searchMoreGifs","setGifSearchQuery","getAllowedAttachmentOptions","handleGifClick","hasResults","answer","voters","offsets","pollResults","offset","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","limit","shouldResetVoters","handleViewMoreClick","handleMemberClick","noStatusOrTyping","leftVotersCount","renderViewMoreButton","total","getMessagePoll","resultsByOption","buildCollectionByKey","management","updateContact","deleteUser","deleteHistory","closeManagement","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","withFullInfo","hasLinkedChannel","linkedChatId","isBasicGroup","canChangeInfo","getHasAdminRight","canBanUsers","togglePreHistoryHidden","updateChat","leaveChannel","deleteChannel","currentTitle","currentAbout","imageHash","handleClickEditType","ManagementScreens","ChatPrivacyType","handleClickDiscussion","Discussion","handleClickPermissions","GroupPermissions","handleClickAdministrators","ChatAdministrators","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","GroupMembers","handleTogglePreHistory","isPreHistoryHidden","isEnabled","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembers","handleDeleteGroup","isCreator","formatInteger","onChatMemberSelect","updateChatDefaultBannedRights","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handleRemovedUsersClick","GroupRemovedUsers","handleAddExceptionClick","GroupUserPermissionsCreate","handleExceptionMemberClick","promotedByUserId","GroupUserPermissions","handlePermissionChange","getUpdatedPermissionValue","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","members","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","sendMessages","blocking","sendMedia","sendPolls","embedLinks","inviteUsers","pinMessages","changeInfo","updateChatMemberBannedRights","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","isSignaturesShown","toggleSignatures","hasLinkedChat","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","ChannelSubscribers","handleDeleteChannel","selectManagement","checkPublicLink","updatePublicLink","updatePrivateLink","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","canUpdate","handleOptionChange","handleSave","handleRevokePrivateLink","langPrefix1","langPrefix2","SafeLink","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","handleUnlinkGroupSessions","channelId","Initial","handleLinkGroupSessions","renderLinkGroupHeader","linkedGroup","renderLinkGroupConfirmText","hasPrivateLink","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","teactOrderKey","isButtonsInOneRow","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","selectedChatMember","handleBanFromGroup","viewMessages","getControlIsDisabled","isOwner","handleAdminMemberClick","ChatAdminRights","getMemberStatus","promotedByUser","GroupRecentActions","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","adminRights","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","addAdmins","anonymous","maxLength","openUserInfo","memberId","managementType","selectCurrentManagementType","CURRENCIES","USD","EUR","GBP","JPY","RUB","UAH","INR","AED","getCurrencySign","currency","VISA","MASTERCARD1","MASTERCARD2","CardType","cards","Default","Visa","Mastercard","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","phone","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","getBillingCountry","countryCode","countryList","useFocusAfterAnimation","animationDuration","hasArrow","labelText","htmlFor","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handlePhoneChange","handleSaveInfoChange","shippingOptions","handleShippingSelect","amount","renderPaymentItem","main","renderCheckoutItem","invoiceContent","prices","shippingPrices","checkoutInfo","totalPrice","photoUrl","paymentMethod","paymentProvider","shippingAddress","shippingMethod","item","expiryInputRef","charAt","parts","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","savedInfo","invoice","nativeProvider","nativeParams","passwordMissing","payment","isProviderError","nameRequested","phoneRequested","emailRequested","shippingAddressRequested","flexible","phoneToProvider","emailToProvider","globalErrors","validateRequestedInfo","sendPaymentForm","setPaymentStep","sendCredentialsInfo","clearPaymentError","paymentState","paymentDispatch","currencySign","field","fieldError","getShippingError","handleErrorModalClose","PaymentStep","Checkout","shippingOption","getShippingPrices","totalPrices","concat","acc","cur","getTotalPrice","detectCardTypeText","findShippingOption","getCheckoutInfo","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","setStep","nextStep","ShippingInfo","Shipping","PaymentInfo","buttonText","cuurentStep","renderModalContent","renderError","optionId","receipt","mapedPrices","info","totalAmount","credentialsTitle","fullAddress","ANIMATED_STICKERS_PATHS","MonkeyIdle","MonkeyTracking","MonkeyClose","MonkeyPeek","FoldersAll","FoldersNew","DiscussionGroups","path","location","cropperResultOptions","quality","format","circle","Croppie","croppiePromise","cropper","isCroppieReady","setIsCroppieReady","imgFile","cropContainer","enableZoom","boundary","viewport","blobToDataUri","bind","err","DEBUG","console","initCropper","ensureCroppie","croppedImg","blobToFile","selectedFile","setSelectedFile","croppedBlobUrl","setCroppedBlobUrl","labelClassName","URL","revokeObjectURL","createObjectURL","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","STICKER_SIZE","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","closeMonkeyData","setCloseMonkeyData","peekMonkeyData","setPeekMonkeyData","isFirstMonkeyLoaded","setIsFirstMonkeyLoaded","isPeekShown","setIsPeekShown","handleFirstMonkeyLoad","STICKER_SIZE_TWO_FA","playSegment","onInputChange","setPassword","canSubmit","setCanSubmit","select","autoComplete","MIN_PASSWORD_LENGTH"],"mappings":"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","file":"3.1ccc05074f2327367b24.js","sourcesContent":["import { ApiMessage } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport { getMessageContent, getPhotoFullDimensions, getVideoDimensions } from '../../../modules/helpers';\nimport {\n  AVATAR_FULL_DIMENSIONS,\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\n\nimport windowSize from '../../../util/windowSize';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean, origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n\n  let isVideo = false;\n  let mediaSize;\n  if (message) {\n    const { photo, video, webPage } = getMessageContent(message);\n    isVideo = Boolean(video);\n    mediaSize = video ? getVideoDimensions(video)! : getPhotoFullDimensions((photo || webPage!.photo)!)!;\n  } else {\n    mediaSize = AVATAR_FULL_DIMENSIONS;\n  }\n\n  // eslint-disable-next-line max-len\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, mediaSize.width, mediaSize.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.active .media-viewer-content img, .active .media-viewer-content video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin === MediaViewerOrigin.ProfileAvatar);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, shouldAppendProfileInfo = false) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (shouldAppendProfileInfo) {\n    ghost.classList.add('ProfileInfo');\n    const profileInfo = document.querySelector('#RightColumn .ProfileInfo .info');\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isElementInViewport(el: HTMLElement) {\n  if (el.style.display === 'none') {\n    return false;\n  }\n\n  const rect = el.getBoundingClientRect();\n  const { height: windowHeight } = windowSize.get();\n\n  return (rect.top <= windowHeight) && ((rect.top + rect.height) >= 0);\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter) {\n    topOffsetRem += mql.matches ? 0.875 : 3.375;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.active > .MessageList #album-media-${message!.id}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${message!.id}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${message!.id}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .ChatInfo .Avatar';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .active .ProfilePhoto';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.active > .MessageList #message${message!.id}`;\n      mediaSelector = '.message-content .full-media, .message-content .thumbnail';\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls && mediaEls[mediaEls.length - 1],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, ApiMessage, ApiUser } from '../../api/types';\n\nimport { getSenderTitle, isChatPrivate } from '../../modules/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: number;\n  messageId?: number;\n  isAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'closeMediaViewer' | 'focusMessage'>;\n\nconst SenderInfo: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId, messageId, sender, isAvatar, message, closeMediaViewer, focusMessage,\n}) => {\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n    focusMessage({ chatId, messageId });\n  }, [chatId, focusMessage, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const isFromChat = sender.id < 0;\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isFromChat ? (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar ? lang('lng_mediaview_profile_photo') : formatMediaDateTime(lang, message!.date * 1000)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    if (isAvatar && chatId) {\n      return {\n        sender: isChatPrivate(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return {};\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['closeMediaViewer', 'focusMessage']),\n)(SenderInfo);\n","import React, { FC, useMemo } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getMessageMediaHash } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport useMediaDownload from '../../hooks/useMediaDownload';\n\nimport './MediaViewerActions.scss';\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  isZoomed: boolean;\n  message?: ApiMessage;\n  fileName?: string;\n  isAvatar?: boolean;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  onZoomToggle: NoneToVoidFunction;\n};\n\nconst MediaViewerActions: FC<OwnProps> = ({\n  mediaData,\n  isVideo,\n  isZoomed,\n  message,\n  fileName,\n  isAvatar,\n  onCloseMediaViewer,\n  onForward,\n  onZoomToggle,\n}) => {\n  const {\n    isDownloadStarted,\n    downloadProgress,\n    handleDownloadClick,\n  } = useMediaDownload(message && isVideo ? getMessageMediaHash(message, 'download') : undefined);\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {!isAvatar && (\n            <MenuItem\n              icon=\"forward\"\n              onClick={onForward}\n            >\n              {lang('Forward')}\n            </MenuItem>\n          )}\n          {isVideo ? (\n            <MenuItem\n              icon={isDownloadStarted ? 'close' : 'download'}\n              onClick={handleDownloadClick}\n            >\n              {isDownloadStarted ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download'}\n            </MenuItem>\n          ) : (\n            <MenuItem\n              icon=\"download\"\n              href={mediaData}\n              download={fileName}\n            >\n              {lang('AccActionDownload')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        {isDownloadStarted && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {!isAvatar && (\n        <>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Forward')}\n            onClick={onForward}\n          >\n            <i className=\"icon-forward\" />\n          </Button>\n        </>\n      )}\n      {isVideo ? (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('AccActionDownload')}\n          onClick={handleDownloadClick}\n        >\n          {isDownloadStarted ? (\n            <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n          ) : (\n            <i className=\"icon-download\" />\n          )}\n        </Button>\n      ) : (\n        <Button\n          href={mediaData}\n          download={fileName}\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('AccActionDownload')}\n        >\n          <i className=\"icon-download\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={isZoomed ? 'Zoom Out' : 'Zoom In'}\n        onClick={onZoomToggle}\n      >\n        <i className={isZoomed ? 'icon-zoom-out' : 'icon-zoom-in'} />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default MediaViewerActions;\n","import React, { FC, useEffect, useState } from '../../lib/teact/teact';\n\nimport { throttle } from '../../util/schedulers';\nimport { TextPart } from '../common/helpers/renderMessageText';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHidden?: boolean;\n  isForVideo: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isHidden, isForVideo, onClick,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {text && (\n        <div className=\"media-viewer-footer-content\" onClick={!IS_SINGLE_COLUMN_LAYOUT ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\nimport { PLATFORM_ENV } from '../util/environment';\n\ntype RefType = {\n  current: HTMLElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreenStatus(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || PLATFORM_ENV === 'iOS')) {\n      return;\n    }\n\n    if (elRef.current.requestFullscreen) {\n      elRef.current.requestFullscreen();\n    } else if (elRef.current.webkitRequestFullscreen) {\n      elRef.current.webkitRequestFullscreen();\n    } else if (elRef.current.webkitEnterFullscreen) {\n      elRef.current.webkitEnterFullscreen();\n    } else if (elRef.current.mozRequestFullScreen) {\n      elRef.current.mozRequestFullScreen();\n    }\n\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.mozCancelFullScreen) {\n      document.mozCancelFullScreen();\n    } else if (document.webkitCancelFullScreen) {\n      document.webkitCancelFullScreen();\n    } else if (document.webkitExitFullscreen) {\n      document.webkitExitFullscreen();\n    }\n\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const listener = () => { setIsFullscreen(Boolean(prop && document[prop])); };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n    const video = elRef.current;\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && PLATFORM_ENV !== 'iOS') {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n\n  return '';\n}\n","const units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'];\n\nexport default (bytes: number) => {\n  const number = bytes === 0 ? 0 : Math.floor(Math.log(bytes) / Math.log(1024));\n\n  return `${(bytes / 1024 ** Math.floor(number)).toFixed(1)} ${units[number]}`;\n};\n","import React, { FC, useState, useEffect } from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport formatFileSize from './helpers/formatFileSize';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './VideoPlayerControls.scss';\n\ntype IProps = {\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceVisible: boolean;\n  isForceMobileVersion?: boolean;\n  isPlayed: boolean;\n  isFullscreenSupported: boolean;\n  isFullscreen: boolean;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: OnChangeHandler;\n};\n\ntype OnChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => void;\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 800;\n\nconst VideoPlayerControls: FC<IProps> = ({\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceVisible,\n  isForceMobileVersion,\n  isPlayed,\n  isFullscreenSupported,\n  isFullscreen,\n  onChangeFullscreen,\n  onPlayPause,\n  onSeek,\n}) => {\n  const [isVisible, setVisibility] = useState(true);\n\n  useEffect(() => {\n    if (isForceVisible) {\n      setVisibility(isForceVisible);\n    }\n  }, [isForceVisible]);\n\n  useEffect(() => {\n    let timeout: number | undefined;\n\n    if (!isForceVisible) {\n      if (IS_SINGLE_COLUMN_LAYOUT) {\n        setVisibility(false);\n      } else {\n        timeout = window.setTimeout(() => {\n          setVisibility(false);\n        }, HIDE_CONTROLS_TIMEOUT_MS);\n      }\n    }\n\n    return () => {\n      if (timeout) {\n        window.clearTimeout(timeout);\n      }\n    };\n  }, [isForceVisible]);\n\n  useEffect(() => {\n    if (isVisible || isForceVisible) {\n      document.body.classList.add('video-controls-visible');\n    }\n\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isForceVisible, isVisible]);\n\n  const lang = useLang();\n\n  if (!isVisible && !isForceVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className={`VideoPlayerControls ${isForceMobileVersion ? 'mobile' : ''}`} onClick={stopEvent}>\n      {renderSeekLine(currentTime, duration, bufferedProgress, onSeek)}\n      <Button\n        ariaLabel={lang('AccActionPlay')}\n        size=\"tiny\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent-white\"\n        className=\"play\"\n        onClick={onPlayPause}\n      >\n        <i className={isPlayed ? 'icon-pause' : 'icon-play'} />\n      </Button>\n      {renderTime(currentTime, duration)}\n      {bufferedProgress < 1 && renderFileSize(bufferedProgress, fileSize)}\n      {isFullscreenSupported && (\n        <Button\n          ariaLabel=\"Fullscreen\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"fullscreen\"\n          onClick={onChangeFullscreen}\n        >\n          <i className={`${isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'}`} />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderFileSize(downloadedPercent: number, totalSize: number) {\n  return (\n    <div className=\"player-file-size\">\n      {`${formatFileSize(totalSize * downloadedPercent)} / ${formatFileSize(totalSize)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(currentTime: number, duration: number, bufferedProgress: number, onSeek: OnChangeHandler) {\n  const percentagePlayed = (currentTime / duration) * 100;\n  const percentageBuffered = bufferedProgress * 100;\n\n  return (\n    <div className=\"player-seekline\">\n      <div className=\"player-seekline-track\">\n        <div\n          className=\"player-seekline-buffered\"\n          // @ts-ignore teact feature\n          style={`width: ${percentageBuffered || 0}%`}\n        />\n        <div\n          className=\"player-seekline-played\"\n          // @ts-ignore teact feature\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n        <input\n          min=\"0\"\n          max=\"100\"\n          step={0.01}\n          type=\"range\"\n          onInput={onSeek}\n          className=\"player-seekline-input\"\n          value={percentagePlayed || 0}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { IDimensions } from '../../modules/helpers';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreenStatus from '../../hooks/useFullscreen';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport safePlay from '../../util/safePlay';\n\nimport VideoPlayerControls from './VideoPlayerControls';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: IDimensions;\n  downloadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  downloadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  onClose,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlayed, setIsPlayed] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [isControlsVisible, setIsControlsVisible] = useState(true);\n\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreenStatus(videoRef, setIsPlayed);\n\n  const { isBuffered, bufferedProgress, bufferingHandlers } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlayed(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlayed) {\n      videoRef.current!.pause();\n      setIsPlayed(false);\n    } else {\n      videoRef.current!.play();\n      setIsPlayed(true);\n    }\n  }, [isPlayed]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleMouseOver = useCallback(() => {\n    setIsControlsVisible(true);\n  }, []);\n\n  const handleMouseOut = useCallback(() => {\n    setIsControlsVisible(false);\n  }, []);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlayed(false);\n  }, []);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    e.stopPropagation();\n\n    videoRef.current!.currentTime = (Number(e.target.value) * videoRef.current!.duration) / 100;\n  }, []);\n\n  const toggleControls = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    setIsControlsVisible(!isControlsVisible);\n  }, [isControlsVisible]);\n\n  useEffect(() => {\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onClick={!isGif && IS_SINGLE_COLUMN_LAYOUT ? toggleControls : undefined}\n      onMouseOver={!isGif ? handleMouseOver : undefined}\n      onMouseOut={!isGif ? handleMouseOut : undefined}\n    >\n      <div\n        // @ts-ignore\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          playsInline\n          loop={isGif}\n          // This is to force auto playing on mobiles\n          muted={isGif}\n          id=\"media-viewer-video\"\n          // @ts-ignore\n          style={videoStyle}\n          onEnded={handleEnded}\n          onClick={!IS_SINGLE_COLUMN_LAYOUT ? togglePlayState : undefined}\n          onDoubleClick={handleFullscreenChange}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : downloadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlayed={isPlayed}\n          bufferedProgress={bufferedProgress}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={videoRef.current ? videoRef.current.duration : 0}\n          isForceVisible={!isPlayed || isControlsVisible}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPlayPause={togglePlayState}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ZoomControls.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onChangeZoom: (level: number, canCloseZoom?: boolean) => void;\n};\n\nexport const MAX_ZOOM_LEVEL = 3;\nexport const MIN_ZOOM_LEVEL = 1;\nconst ONE_STEP_PERCENT = 100 / (MAX_ZOOM_LEVEL - MIN_ZOOM_LEVEL);\nconst RESET_ZOOM_LEVEL = 1.5;\n\nconst ZoomControls: FC<OwnProps> = ({ isShown, onChangeZoom }) => {\n  const { transitionClassNames } = useShowTransition(isShown);\n  const prevIsShown = usePrevious<boolean>(isShown);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [zoomLevel, setZoomLevel] = useState(1);\n  const isSeeking = useRef<boolean>(false);\n\n  useEffect(() => {\n    if (isShown && !prevIsShown) {\n      setZoomLevel(RESET_ZOOM_LEVEL);\n    }\n  }, [isShown, prevIsShown]);\n\n  const handleZoomOut = () => {\n    if (inputRef.current) {\n      setZoomLevel(Math.max(MIN_ZOOM_LEVEL, zoomLevel - 0.5));\n    }\n  };\n\n  const handleZoomIn = () => {\n    if (inputRef.current) {\n      setZoomLevel(Math.min(MAX_ZOOM_LEVEL, zoomLevel + 0.5));\n    }\n  };\n\n  const handleStartSeek = useCallback(() => {\n    isSeeking.current = true;\n  }, []);\n\n  const handleStopSeek = useCallback(() => {\n    isSeeking.current = false;\n    if (zoomLevel === 1) {\n      onChangeZoom(zoomLevel, !isSeeking.current);\n    }\n  }, [onChangeZoom, zoomLevel]);\n\n  const handleSeeklineChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n    setZoomLevel(Math.min(MAX_ZOOM_LEVEL, Math.max(Number(e.target.value), MIN_ZOOM_LEVEL)));\n  };\n\n  useEffect(() => {\n    onChangeZoom(zoomLevel, !isSeeking.current);\n  }, [zoomLevel, onChangeZoom]);\n\n  const lang = useLang();\n\n  const className = buildClassName(\n    'ZoomControls',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className}>\n      <Button\n        disabled={zoomLevel === MIN_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel={lang('ZoomOut')}\n        className=\"zoom-out\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        disabled={zoomLevel === MAX_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel=\"Zoom In\"\n        className=\"zoom-in\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      <div className=\"seekline\">\n        <div className=\"seekline-track\">\n          <div\n            className=\"seekline-played\"\n            // @ts-ignore teact feature\n            style={`width: ${(zoomLevel - 1) * ONE_STEP_PERCENT}%`}\n          />\n          <input\n            ref={inputRef}\n            min={MIN_ZOOM_LEVEL}\n            max={MAX_ZOOM_LEVEL}\n            step=\"0.5\"\n            value={zoomLevel}\n            type=\"range\"\n            className=\"seekline-input\"\n            onChange={handleSeeklineChange}\n            onMouseDown={handleStartSeek}\n            onMouseUp={handleStopSeek}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ZoomControls);\n","/*\n  @source https://github.com/ajainarayanan/react-pan-zoom\n\n  Heavily inspired/lifted from this idea: https://stackoverflow.com/a/39311435/661768\n  without jqueryUI or jquery dependency.\n*/\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { areSortedArraysEqual } from '../../util/iteratees';\n\nimport './PanZoom.scss';\n\nexport interface IDragData {\n  x: number;\n  y: number;\n  dx: number;\n  dy: number;\n}\n\nexport interface OwnProps {\n  children: any;\n  className?: string;\n  noWrap: boolean;\n  canPan: boolean;\n  zoomLevel: number;\n  panDeltaX: number;\n  panDeltaY: number;\n  onPan?: (x: number, y: number) => void;\n}\n\nconst INITIAL_MATRIX = [\n  1, 0, 0, 1, 0, 0,\n];\n\nconst SCALE_VALUES = {\n  1: 1,\n  1.5: 1.5,\n  2: 2.2,\n  2.5: 3.3,\n  3: 5.5,\n};\n\nconst ZOOM_SAFE_AREA = 150;\n\nfunction calculateSafeZoneOnZoom(oldScale: number, matrixData: number[], wrapper: HTMLDivElement | null) {\n  const image = wrapper && wrapper.querySelector('.active img');\n  if (!wrapper || !image) {\n    return matrixData;\n  }\n  const wrapperRect = wrapper.getBoundingClientRect();\n  const imageRect = image.getBoundingClientRect();\n\n  const newImgWidth = (imageRect.width / oldScale) * matrixData[0];\n  const newImgHeight = (imageRect.height / oldScale) * matrixData[3];\n  const newImgX = (wrapperRect.width - newImgWidth) / 2 + matrixData[4];\n  const newImgY = (wrapperRect.height - newImgHeight) / 2 + matrixData[5];\n  if (wrapperRect.width && wrapperRect.width - ZOOM_SAFE_AREA < newImgX) {\n    matrixData[4] -= newImgX + wrapperRect.width - ZOOM_SAFE_AREA;\n  } else if (newImgWidth && newImgWidth + newImgX < ZOOM_SAFE_AREA) {\n    matrixData[4] -= newImgWidth + newImgX - ZOOM_SAFE_AREA;\n  }\n  if (wrapperRect.height && wrapperRect.height - ZOOM_SAFE_AREA < newImgY) {\n    matrixData[5] -= newImgY + wrapperRect.height - ZOOM_SAFE_AREA;\n  } else if (newImgHeight && newImgHeight + newImgY < ZOOM_SAFE_AREA) {\n    matrixData[5] -= newImgHeight + newImgY - ZOOM_SAFE_AREA;\n  }\n\n  return matrixData;\n}\n\nconst PanZoom: FC<OwnProps> = ({\n  children,\n  className,\n  noWrap,\n  canPan,\n  zoomLevel,\n  panDeltaX,\n  panDeltaY,\n  onPan,\n}) => {\n  const tunedZoomLevel = SCALE_VALUES[zoomLevel as keyof typeof SCALE_VALUES] || zoomLevel;\n  const [isDragging, setIsDragging] = useState<boolean>(false);\n  const [dragData, setDragData] = useState<IDragData>({\n    dx: panDeltaX, dy: panDeltaY, x: 0, y: 0,\n  });\n  // [zoom, skew, skew, zoom, dx, dy] - see https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix()\n  const [matrixData, setMatrixData] = useState<number[]>(INITIAL_MATRIX);\n  // Used to set cursor while moving.\n  // eslint-disable-next-line no-null/no-null\n  const panWrapperRef = useRef<HTMLDivElement>(null);\n  // Used to set transform for pan.\n  // eslint-disable-next-line no-null/no-null\n  const panContainerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const newZoomLevel = tunedZoomLevel || matrixData[0];\n    const newPandx = panDeltaX || matrixData[4];\n    const newPandy = panDeltaY || matrixData[5];\n\n    const newMatrixData = [...matrixData];\n    if (matrixData[0] !== newZoomLevel) {\n      newMatrixData[0] = newZoomLevel || newMatrixData[0];\n      newMatrixData[3] = newZoomLevel || newMatrixData[3];\n    }\n    if (matrixData[4] !== newPandx) {\n      newMatrixData[4] = newPandx;\n    }\n    if (matrixData[5] !== newPandy) {\n      newMatrixData[5] = newPandy;\n    }\n\n    if (!areSortedArraysEqual(matrixData, newMatrixData)) {\n      setMatrixData(calculateSafeZoneOnZoom(matrixData[0], newMatrixData, panWrapperRef.current));\n    }\n    // eslint-disable-next-line\n  }, [panDeltaX, panDeltaY, tunedZoomLevel]);\n\n  useEffect(() => {\n    if (!canPan) {\n      setMatrixData(INITIAL_MATRIX);\n    }\n  }, [canPan]);\n\n  useEffect(() => {\n    if (panContainerRef.current) {\n      panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n    }\n  }, [noWrap, matrixData]);\n\n  const handleMouseDown = (e: React.MouseEvent<EventTarget>) => {\n    if (!canPan) {\n      return;\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n\n    const offsetX = matrixData[4];\n    const offsetY = matrixData[5];\n    const newDragData: IDragData = {\n      dx: offsetX,\n      dy: offsetY,\n      x: e.pageX,\n      y: e.pageY,\n    };\n    setDragData(newDragData);\n    setIsDragging(true);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.add('move');\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.remove('move');\n    }\n\n    if (onPan) {\n      onPan(matrixData[4], matrixData[5]);\n    }\n  };\n\n  function getNewMatrixData(x: number, y: number): number[] {\n    const newMatrixData = [...matrixData];\n    const deltaX = dragData.x - x;\n    const deltaY = dragData.y - y;\n    newMatrixData[4] = dragData.dx - deltaX;\n    newMatrixData[5] = dragData.dy - deltaY;\n\n    return newMatrixData;\n  }\n\n  const handleMouseMove = (e: React.MouseEvent<EventTarget>) => {\n    if (isDragging) {\n      const newMatrixData = getNewMatrixData(e.pageX, e.pageY);\n      setMatrixData(newMatrixData);\n\n      if (panContainerRef.current) {\n        panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n      }\n    }\n  };\n\n  if (noWrap) {\n    return children;\n  }\n\n  return (\n    <div\n      ref={panWrapperRef}\n      className={`pan-wrapper ${className || ''}`}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onMouseMove={handleMouseMove}\n    >\n      <div\n        ref={panContainerRef}\n        className=\"pan-container\"\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PanZoom);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiChat, ApiMediaFormat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  AVATAR_FULL_DIMENSIONS,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  calculateMediaViewerDimensions,\n} from '../common/helpers/mediaDimensions';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  getChatAvatarHash,\n  getChatMediaMessageIds,\n  getMessageMediaFilename,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  IDimensions,\n} from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaWithDownloadProgress from '../../hooks/useMediaWithDownloadProgress';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport usePrevious from '../../hooks/usePrevious';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport SenderInfo from './SenderInfo';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\nimport ZoomControls from './ZoomControls';\nimport PanZoom from './PanZoom';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: number;\n  threadId?: number;\n  messageId?: number;\n  senderId?: number;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  profilePhotoIndex?: number;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  animationLevel: 0 | 1 | 2;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openMediaViewer' | 'closeMediaViewer' | 'openForwardMenu' | 'focusMessage'>;\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageId,\n  senderId,\n  origin,\n  avatarOwner,\n  profilePhotoIndex,\n  message,\n  chatMessages,\n  collectionIds,\n  openMediaViewer,\n  closeMediaViewer,\n  openForwardMenu,\n  focusMessage,\n  animationLevel,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const animationKey = useRef<number>(null);\n  const isOpen = Boolean(avatarOwner || messageId);\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const isWebPagePhoto = Boolean(webPagePhoto);\n  const isPhoto = Boolean(photo || webPagePhoto);\n  const isVideo = Boolean(video);\n  const isGif = video ? video.isGif : undefined;\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n  const slideAnimation = animationLevel >= 1 ? 'mv-slide' : 'none';\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2;\n  const fileName = avatarOwner\n    ? `avatar${avatarOwner.id}-${profilePhotoIndex}.jpg`\n    : message && getMessageMediaFilename(message);\n  const prevSenderId = usePrevious<number | undefined>(senderId);\n  const [canPanZoomWrap, setCanPanZoomWrap] = useState(false);\n  const [isZoomed, setIsZoomed] = useState<boolean>(false);\n  const [zoomLevel, setZoomLevel] = useState<number>(1);\n  const [panDelta, setPanDelta] = useState({ x: 0, y: 0 });\n  const [isFooterHidden, setIsFooterHidden] = useState<boolean>(false);\n\n  const messageIds = useMemo(() => {\n    return isWebPagePhoto && messageId\n      ? [messageId]\n      : getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n  }, [isWebPagePhoto, messageId, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaMessageIndex = messageId ? messageIds.indexOf(messageId) : -1;\n  const isFirst = selectedMediaMessageIndex === 0 || selectedMediaMessageIndex === -1;\n  const isLast = selectedMediaMessageIndex === messageIds.length - 1 || selectedMediaMessageIndex === -1;\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaMessageIndex;\n  }\n\n  function getMediaHash(full?: boolean) {\n    if (avatarOwner && profilePhotoIndex !== undefined) {\n      const { photos } = avatarOwner;\n      return photos && photos[profilePhotoIndex]\n        ? `photo${photos[profilePhotoIndex].id}?size=c`\n        : getChatAvatarHash(avatarOwner, full ? 'big' : 'normal');\n    }\n\n    return message && getMessageMediaHash(message, full ? 'viewerFull' : 'viewerPreview');\n  }\n\n  const blobUrlPictogram = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const previewMediaHash = getMediaHash();\n  const blobUrlPreview = useMedia(\n    previewMediaHash,\n    undefined,\n    avatarOwner && previewMediaHash && previewMediaHash.startsWith('profilePhoto')\n      ? ApiMediaFormat.DataUri\n      : ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const { mediaData: fullMediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaData)) || blobUrlPreview || blobUrlPictogram;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n\n  const photoDimensions = isPhoto ? getPhotoFullDimensions((\n    isWebPagePhoto ? getMessageWebPagePhoto(message!) : getMessagePhoto(message!)\n  )!) : undefined;\n  const videoDimensions = isVideo ? getVideoDimensions(getMessageVideo(message!)!) : undefined;\n\n  useEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return;\n    }\n\n    document.body.classList.toggle('is-media-viewer-open', isOpen);\n  }, [isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevOrigin = usePrevious(origin);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && !prevMessage && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      const textParts = message ? renderMessageText(message) : undefined;\n      const hasFooter = Boolean(textParts);\n      animateOpening(hasFooter, origin!, bestImageData!, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, origin, prevOrigin,\n    message, prevMessage, prevAvatarOwner, bestImageData, prevBestImageData,\n  ]);\n\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (isZoomed) {\n      setCanPanZoomWrap(true);\n    } else {\n      timer = window.setTimeout(() => {\n        setCanPanZoomWrap(false);\n      }, ANIMATION_DURATION);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [isZoomed]);\n\n  const closeZoom = () => {\n    setIsZoomed(false);\n    setZoomLevel(1);\n    setPanDelta({ x: 0, y: 0 });\n  };\n\n  const handleZoomToggle = useCallback(() => {\n    setIsZoomed(!isZoomed);\n    setZoomLevel(!isZoomed ? 1.5 : 1);\n    if (isZoomed) {\n      setPanDelta({ x: 0, y: 0 });\n    }\n  }, [isZoomed]);\n\n  const handleZoomValue = useCallback((level: number, canCloseZoom = false) => {\n    setZoomLevel(level);\n    if (level === 1 && canCloseZoom) {\n      closeZoom();\n    }\n  }, []);\n\n  const close = useCallback(() => {\n    closeMediaViewer();\n    closeZoom();\n  }, [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    close();\n    focusMessage({ chatId, threadId, messageId });\n  }, [close, chatId, threadId, focusMessage, messageId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    closeZoom();\n  }, [openForwardMenu, chatId, messageId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    if (isZoomed) {\n      closeZoom();\n    } else {\n      close();\n    }\n  }) : undefined), [close, isOpen, isZoomed]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const getMessageId = useCallback((fromId: number, direction: number): number => {\n    let index = messageIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < messageIds.length - 1)) {\n      index += direction;\n    }\n\n    return messageIds[index];\n  }, [messageIds]);\n\n  const selectPreviousMedia = useCallback(() => {\n    if (isFirst) {\n      return;\n    }\n\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: messageId ? getMessageId(messageId, -1) : undefined,\n      origin,\n    });\n  }, [chatId, threadId, getMessageId, isFirst, messageId, openMediaViewer, origin]);\n\n  const selectNextMedia = useCallback(() => {\n    if (isLast) {\n      return;\n    }\n\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: messageId ? getMessageId(messageId, 1) : undefined,\n      origin,\n    });\n  }, [chatId, threadId, getMessageId, isLast, messageId, openMediaViewer, origin]);\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          selectPreviousMedia();\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          selectNextMedia();\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  });\n\n  // Support for swipe gestures and closing on click\n  useEffect(() => {\n    const element = document.querySelector<HTMLDivElement>('.slide-container > .active, .slide-container > .to');\n    if (!element) {\n      return undefined;\n    }\n\n    const shouldCloseOnVideo = isGif && !IS_IOS;\n\n    return captureEvents(element, {\n      // eslint-disable-next-line max-len\n      excludedClosestSelector: `.backdrop, .navigation, .media-viewer-head, .media-viewer-footer${!shouldCloseOnVideo ? ', .VideoPlayer' : ''}`,\n      onClick: () => {\n        if (!isZoomed && !IS_TOUCH_ENV) {\n          close();\n        }\n      },\n      onSwipe: IS_TOUCH_ENV ? (e, direction) => {\n        if (direction === SwipeDirection.Right) {\n          selectPreviousMedia();\n        } else if (direction === SwipeDirection.Left) {\n          selectNextMedia();\n        } else if (!(e.target && (e.target as HTMLElement).closest('.MediaViewerFooter'))) {\n          close();\n        }\n      } : undefined,\n    });\n  }, [close, isFooterHidden, isGif, isPhoto, isZoomed, selectNextMedia, selectPreviousMedia]);\n\n  const handlePan = useCallback((x: number, y: number) => {\n    setPanDelta({ x, y });\n  }, []);\n\n  const handleToggleFooterVisibility = useCallback(() => {\n    if (IS_TOUCH_ENV && (isPhoto || isGif)) {\n      setIsFooterHidden(!isFooterHidden);\n    }\n  }, [isFooterHidden, isGif, isPhoto]);\n\n  const lang = useLang();\n\n  function renderSlide(isActive: boolean) {\n    if (avatarOwner) {\n      return (\n        <div key={chatId} className=\"media-viewer-content\">\n          {renderPhoto(\n            fullMediaData || blobUrlPreview,\n            calculateMediaViewerDimensions(AVATAR_FULL_DIMENSIONS, false),\n            !IS_SINGLE_COLUMN_LAYOUT && !isZoomed,\n          )}\n        </div>\n      );\n    } else if (message) {\n      const textParts = renderMessageText(message);\n      const hasFooter = Boolean(textParts);\n\n      return (\n        <div\n          key={messageId}\n          className={`media-viewer-content ${hasFooter ? 'has-footer' : ''}`}\n          onClick={handleToggleFooterVisibility}\n        >\n          {isPhoto && renderPhoto(\n            localBlobUrl || fullMediaData || blobUrlPreview || blobUrlPictogram,\n            message && calculateMediaViewerDimensions(photoDimensions!, hasFooter),\n            !IS_SINGLE_COLUMN_LAYOUT && !isZoomed,\n          )}\n          {isVideo && (\n            <VideoPlayer\n              key={messageId}\n              url={localBlobUrl || fullMediaData}\n              isGif={isGif}\n              posterData={bestImageData}\n              posterSize={message && calculateMediaViewerDimensions(videoDimensions!, hasFooter, true)}\n              downloadProgress={downloadProgress}\n              fileSize={video!.size}\n              isMediaViewerOpen={isOpen}\n              noPlay={!isActive}\n              onClose={close}\n            />\n          )}\n          {textParts && (\n            <MediaViewerFooter\n              text={textParts}\n              onClick={handleFooterClick}\n              isHidden={isFooterHidden && (!isVideo || isGif)}\n              isForVideo={isVideo && !isGif}\n            />\n          )}\n        </div>\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderSenderInfo() {\n    return (\n      <SenderInfo\n        key={avatarOwner ? avatarOwner.id : messageId}\n        chatId={avatarOwner ? avatarOwner.id : chatId}\n        messageId={messageId}\n        isAvatar={Boolean(avatarOwner)}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      className={isZoomed ? 'zoomed' : ''}\n      isOpen={isOpen}\n    >\n      {() => (\n        <>\n          <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {IS_SINGLE_COLUMN_LAYOUT && (\n              <Button\n                className=\"media-viewer-close\"\n                round\n                size=\"smaller\"\n                color=\"translucent-white\"\n                ariaLabel={lang('Close')}\n                onClick={close}\n              >\n                <i className=\"icon-close\" />\n              </Button>\n            )}\n            <Transition activeKey={animationKey.current!} name={headerAnimation}>\n              {renderSenderInfo}\n            </Transition>\n            <MediaViewerActions\n              mediaData={fullMediaData || blobUrlPreview}\n              isVideo={isVideo}\n              isZoomed={isZoomed}\n              message={message}\n              fileName={fileName}\n              onCloseMediaViewer={close}\n              onForward={handleForward}\n              onZoomToggle={handleZoomToggle}\n              isAvatar={Boolean(avatarOwner)}\n            />\n          </div>\n          <PanZoom\n            noWrap={!canPanZoomWrap}\n            canPan={isZoomed}\n            panDeltaX={panDelta.x}\n            panDeltaY={panDelta.y}\n            zoomLevel={zoomLevel}\n            onPan={handlePan}\n          >\n            <Transition\n              className=\"slide-container\"\n              activeKey={selectedMediaMessageIndex}\n              name={slideAnimation}\n            >\n              {renderSlide}\n            </Transition>\n          </PanZoom>\n          {!isFirst && (\n            <button\n              type=\"button\"\n              className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n              aria-label={lang('AccDescrPrevious')}\n              dir={lang.isRtl ? 'rtl' : undefined}\n              onClick={selectPreviousMedia}\n            />\n          )}\n          {!isLast && (\n            <button\n              type=\"button\"\n              className={`navigation next ${isVideo && !isGif && 'inline'}`}\n              aria-label={lang('Next')}\n              dir={lang.isRtl ? 'rtl' : undefined}\n              onClick={selectNextMedia}\n            />\n          )}\n          <ZoomControls\n            isShown={isZoomed}\n            onChangeZoom={handleZoomValue}\n          />\n        </>\n      )}\n    </ShowTransition>\n  );\n};\n\nfunction renderPhoto(blobUrl?: string, imageSize?: IDimensions, canDrag?: boolean) {\n  return blobUrl\n    ? (\n      <img\n        src={blobUrl}\n        alt=\"\"\n        // @ts-ignore teact feature\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n        draggable={Boolean(canDrag)}\n      />\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        // @ts-ignore teact feature\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n    } = global.mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && messageId)) {\n        return { animationLevel };\n      }\n\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message) {\n        return { animationLevel };\n      }\n\n      return {\n        chatId,\n        messageId,\n        senderId: message.senderId,\n        origin,\n        message,\n        animationLevel,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        messageId: -1,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        profilePhotoIndex: profilePhotoIndex || 0,\n        animationLevel,\n        origin,\n      };\n    }\n\n    if (!(chatId && threadId && messageId)) {\n      return { animationLevel };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, messageId);\n    } else {\n      message = selectChatMessage(global, chatId, messageId);\n    }\n\n    if (!message) {\n      return { animationLevel };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      senderId: message.senderId,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openMediaViewer', 'closeMediaViewer', 'openForwardMenu', 'focusMessage',\n  ]),\n)(MediaViewer));\n","import React, {\n  FC, useMemo, useState, memo, useRef, useEffect, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  getCanPostInChat, getChatTitle, isChatPrivate, sortChatIds,\n} from '../../modules/helpers';\nimport searchWords from '../../util/searchWords';\nimport { pick } from '../../util/iteratees';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './ForwardPicker.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  activeListIds?: number[];\n  archivedListIds?: number[];\n  orderedPinnedIds?: number[];\n  currentUserId?: number;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setForwardChatId' | 'exitForwardMode' | 'loadMoreChats'>;\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\nconst MODAL_HIDE_DELAY_MS = 300;\n\nconst ForwardPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  currentUserId,\n  serverTimeOffset,\n  isOpen,\n  setForwardChatId,\n  exitForwardMode,\n  loadMoreChats,\n}) => {\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (isOpen) {\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        setTimeout(() => {\n          requestAnimationFrame(() => {\n            if (inputRef.current) {\n              inputRef.current.focus();\n            }\n          });\n        }, FOCUS_DELAY_MS);\n      }\n    } else {\n      if (inputRef.current) {\n        inputRef.current.blur();\n      }\n\n      setTimeout(() => {\n        setFilter('');\n      }, MODAL_HIDE_DELAY_MS);\n    }\n  }, [isOpen]);\n\n  const chatIds = useMemo(() => {\n    const listIds = [\n      ...activeListIds || [],\n      ...archivedListIds || [],\n    ];\n\n    return sortChatIds([\n      ...listIds.filter((id) => {\n        const chat = chatsById[id];\n        if (!chat) {\n          return true;\n        }\n\n        if (!getCanPostInChat(chat, MAIN_THREAD_ID)) {\n          return false;\n        }\n\n        if (!filter) {\n          return true;\n        }\n\n        return searchWords(getChatTitle(lang, chatsById[id], undefined, id === currentUserId), filter);\n      }),\n    ], chatsById, undefined, currentUserId ? [currentUserId] : undefined, serverTimeOffset);\n  }, [activeListIds, archivedListIds, chatsById, currentUserId, filter, lang, serverTimeOffset]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(loadMoreChats, chatIds, Boolean(filter));\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFilter(e.currentTarget.value);\n  }, []);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds) {\n      setForwardChatId({ id: viewportIds[index] });\n    }\n  }, '.ListItem-button', true);\n\n  const modalHeader = (\n    <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel={lang('Close')}\n        onClick={exitForwardMode}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <InputText\n        ref={inputRef}\n        value={filter}\n        onChange={handleFilterChange}\n        onKeyDown={handleKeyDown}\n        placeholder={lang('ForwardTo')}\n      />\n    </div>\n  );\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={exitForwardMode}\n      className=\"ForwardPicker\"\n      header={modalHeader}\n    >\n      {viewportIds && viewportIds.length ? (\n        <InfiniteScroll\n          className=\"picker-list custom-scroll\"\n          items={viewportIds}\n          onLoadMore={getMore}\n          noScrollRestore={Boolean(filter)}\n          ref={containerRef}\n          onKeyDown={handleKeyDown}\n        >\n          {viewportIds.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable force-rounded-corners\"\n              onClick={() => setForwardChatId({ id })}\n            >\n              {isChatPrivate(id) ? (\n                <PrivateChatInfo status={id === currentUserId ? lang('SavedMessagesInfo') : undefined} userId={id} />\n              ) : (\n                <GroupChatInfo chatId={id} />\n              )}\n            </ListItem>\n          ))}\n        </InfiniteScroll>\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\">Sorry, nothing found.</p>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      serverTimeOffset,\n      chats: {\n        byId: chatsById,\n        listIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      currentUserId,\n      serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setForwardChatId', 'exitForwardMode', 'loadMoreChats']),\n)(ForwardPicker));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiError } from '../../api/types';\n\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './Errors.scss';\n\ntype StateProps = {\n  errors: ApiError[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'dismissError'>;\n\nconst Errors: FC<StateProps & DispatchProps> = ({ errors, dismissError }) => {\n  const lang = useLang();\n\n  if (!errors.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Errors\">\n      {errors.map((error) => (\n        <Modal\n          isOpen\n          onClose={dismissError}\n          className=\"error\"\n          title={getErrorHeader(error)}\n        >\n          <p>{getReadableErrorText(error)}</p>\n          <Button isText onClick={dismissError}>{lang('OK')}</Button>\n        </Modal>\n      ))}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['errors']),\n  (setGlobal, actions): DispatchProps => pick(actions, ['dismissError']),\n)(Errors));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiNotification } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\n\nimport Notification from '../ui/Notification';\nimport renderText from '../common/helpers/renderText';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'dismissNotification'>;\n\nconst Notifications: FC<StateProps & DispatchProps> = ({ notifications, dismissNotification }) => {\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({ message }) => (\n        <Notification\n          message={renderText(message, ['emoji', 'br', 'links', 'simple_markdown'])}\n          onDismiss={dismissNotification}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['notifications']),\n  (setGlobal, actions): DispatchProps => pick(actions, ['dismissNotification']),\n)(Notifications));\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'toggleSafeLinkModal'>;\n\nconst SafeLinkModal: FC<OwnProps & DispatchProps> = ({ url, toggleSafeLinkModal }) => {\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(url);\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, ['toggleSafeLinkModal']),\n)(SafeLinkModal));\n","import React, {\n  FC, memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport {\n  formatMonthAndYear, formatHumanDate, formatTime,\n} from '../../util/dateFormat';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport useLang, { LangFn } from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nexport type OwnProps = {\n  selectedAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = ['M', 'T', 'W', 'T', 'F', 'S', 'S'];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n  const defaultSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const maxDate = maxAt ? new Date(maxAt) : undefined;\n\n  const [selectedDate, setSelectedDate] = useState<Date>(defaultSelectedDate);\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(defaultSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(defaultSelectedDate.getMinutes()),\n  );\n\n  const currentYear = selectedDate.getFullYear();\n  const currentMonth = selectedDate.getMonth();\n  const currentDate = selectedDate.getDate();\n\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedDate(defaultSelectedDate);\n    }\n  }, [isOpen, defaultSelectedDate]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const calendarGrid = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  function handlePrevMonth() {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n\n      return dateCopy;\n    });\n  }\n\n  function handleSubmit() {\n    onSubmit(selectedDate);\n  }\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {formatMonthAndYear(lang, selectedDate, IS_SINGLE_COLUMN_LAYOUT)}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((letter) => (\n            <div className=\"day-button faded weekday\">\n              <span>{letter}</span>\n            </div>\n          ))}\n          {calendarGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, isFutureMode ? now : undefined, isPastMode ? now : maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                gridDate === currentDate && 'selected',\n              )}\n            >\n              {!!gridDate && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {withTimePicker ? formatSubmitLabel(lang, selectedDate) : submitButtonLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const grid: number[] = [];\n\n  const date = new Date();\n  date.setFullYear(year);\n  date.setMonth(month);\n  date.setDate(1);\n\n  const monthStartDay = date.getDay();\n  // Fill empty cells\n  for (let i = 1; i < monthStartDay; i++) {\n    grid.push(0);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    grid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  return grid;\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day, 0, 0, 0, 0);\n  const fixedMinDate = minDate && new Date(minDate.getFullYear(), minDate.getMonth(), minDate.getDate(), 0, 0, 0, 0);\n  const fixedMaxDate = maxDate && new Date(maxDate.getFullYear(), maxDate.getMonth(), maxDate.getDate(), 0, 0, 0, 0);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatHumanDate(lang, date, true);\n\n  if (day === 'Today') {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', day).replace('%@', formatTime(date));\n}\n\nexport default memo(CalendarModal);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchMessagesByDate' | 'closeHistoryCalendar'>;\n\nconst HistoryCalendar: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen, selectedAt, searchMessagesByDate, closeHistoryCalendar,\n}) => {\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      selectedAt: global.historyCalendarSelectedAt,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesByDate', 'closeHistoryCalendar',\n  ]),\n)(HistoryCalendar));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../api/types';\nimport { IAlbum } from '../../types';\n\nimport { GlobalActions } from '../../global/types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  isChatPrivate,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteMessages' | 'deleteScheduledMessages'>;\n\nconst DeleteMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n  deleteMessages,\n  deleteScheduledMessages,\n}) => {\n  const handleDeleteMessageForAll = useCallback(() => {\n    const messageIds = album && album.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [deleteMessages, message.id, onClose, album]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    const messageIds = album && album.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName && lang('Conversation.DeleteMessagesFor', renderText(contactName))}\n          {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isChatPrivate(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'deleteMessages', 'deleteScheduledMessages',\n  ]),\n)(DeleteMessageModal));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../modules/selectors';\nimport {\n  isChatPrivate,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: number;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'pinMessage'>;\n\nconst PinMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  messageId,\n  chatId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n  pinMessage,\n}) => {\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, chatId, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [chatId, messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n        {lang('DialogPin')}\n      </Button>\n      {canPinForAll && (\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n          {contactName\n            ? lang('Conversation.PinMessagesFor', contactName)\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n        </Button>\n      )}\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isChatPrivate(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = !!chat && isChatChannel(chat);\n    const isGroup = !!chat && isChatBasicGroup(chat);\n    const isSuperGroup = !!chat && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isChatPrivate(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['pinMessage']),\n)(PinMessageModal));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: number;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n        {lang('DialogUnpin')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { selectCanDeleteSelectedMessages, selectCurrentChat, selectUser } from '../../modules/selectors';\nimport {\n  isChatPrivate,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteMessages' | 'exitMessageSelectMode' | 'deleteScheduledMessages'>;\n\nconst DeleteSelectedMessagesModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n  deleteMessages,\n  deleteScheduledMessages,\n  exitMessageSelectMode,\n}) => {\n  const handleDeleteMessageForAll = useCallback(() => {\n    deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: true });\n    exitMessageSelectMode();\n    onClose();\n  }, [deleteMessages, exitMessageSelectMode, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: false });\n    }\n\n    exitMessageSelectMode();\n    onClose();\n  }, [\n    isSchedule, exitMessageSelectMode, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages,\n  ]);\n\n  const lang = useLang();\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName\n            ? lang('ChatList.DeleteForEveryone', renderText(contactName))\n            : lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isChatPrivate(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'deleteMessages',\n    'deleteScheduledMessages',\n    'exitMessageSelectMode',\n  ]),\n)(DeleteSelectedMessagesModal));\n","import React, { FC, memo, useEffect } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCurrentMessageList,\n  selectSelectedMessagesCount,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport useFlag from '../../hooks/useFlag';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport DeleteSelectedMessagesModal from './DeleteSelectedMessagesModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'exitMessageSelectMode' | 'openForwardMenuForSelectedMessages'>;\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps & DispatchProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  exitMessageSelectMode,\n  openForwardMenuForSelectedMessages,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: openDeleteModal,\n        onDelete: openDeleteModal,\n        onEsc: exitMessageSelectMode,\n      })\n      : undefined;\n  }, [isActive, isDeleteModalOpen, openDeleteModal, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const lang = useLang();\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount);\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={exitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {!!selectedMessagesCount && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && (\n              <MenuItem\n                icon=\"forward\"\n                ariaLabel=\"Forward Messages\"\n                onClick={openForwardMenuForSelectedMessages}\n              >\n                <span className=\"item-text\">\n                  {lang('Forward')}\n                </span>\n              </MenuItem>\n            )}\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={openDeleteModal}\n              disabled={!canDeleteMessages}\n              ariaLabel={lang('EditAdminGroupDeleteMessages')}\n            >\n              <span className=\"item-text\">\n                {lang('Delete')}\n              </span>\n            </MenuItem>\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessagesModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { type: messageListType } = selectCurrentMessageList(global) || {};\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n\n    return {\n      isSchedule: messageListType === 'scheduled',\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['exitMessageSelectMode', 'openForwardMenuForSelectedMessages']),\n)(MessageSelectToolbar));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nexport default (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isChatPrivate, getPrivateChatUserId, selectIsChatMuted } from '../../../modules/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../modules/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: number;\n  withUsername?: boolean;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  privateChatUser,\n  isPinned,\n  isMuted,\n  withUsername,\n  onClick,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    privateChatUser,\n    isPinned,\n    isMuted,\n    handleDelete: openDeleteModal,\n  });\n\n  const handleClick = () => {\n    onClick(chatId);\n  };\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isChatPrivate(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      privateChatUser,\n      isPinned,\n      isMuted,\n    };\n  },\n)(LeftSearchResultChat));\n","import React, {\n  FC, useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: number[];\n  usersById: Record<number, ApiUser>;\n  recentlyFoundChatIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadTopUsers' | 'loadContactList' | 'openChat' | 'addRecentlyFoundChatId' | 'clearRecentlyFoundChats'\n)>;\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps & DispatchProps> = ({\n  topUserIds, usersById, recentlyFoundChatIds,\n  onReset, loadTopUsers, loadContactList, openChat,\n  addRecentlyFoundChatId, clearRecentlyFoundChats,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n      // Loading full contact list for quick local search before user enters the query\n      loadContactList();\n    });\n  }, [loadTopUsers, loadContactList]);\n\n  useHorizontalScroll(topUsersRef.current, !topUserIds);\n\n  const handleClick = useCallback(\n    (id: number) => {\n      openChat({ id });\n      onReset();\n      setTimeout(() => {\n        addRecentlyFoundChatId({ id });\n      }, SEARCH_CLOSE_TIMEOUT_MS);\n    },\n    [openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={clearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global.globalSearch;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadTopUsers',\n    'loadContactList',\n    'openChat',\n    'addRecentlyFoundChatId',\n    'clearRecentlyFoundChats',\n  ]),\n)(RecentContacts));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport {\n  getChatTitle,\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageSummaryText,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../modules/helpers';\nimport { selectChat, selectUser } from '../../../modules/selectors';\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\nimport useMedia from '../../../hooks/useMedia';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport VerifiedIcon from '../../common/VerifiedIcon';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: number;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusMessage'>;\n\nconst ChatMessage: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  focusMessage,\n  lastSyncTime,\n}) => {\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!IS_SINGLE_COLUMN_LAYOUT}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        withOnlineStatus\n        isSavedMessages={privateChatUser && privateChatUser.isSelf}\n        lastSyncTime={lastSyncTime}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{renderText(getChatTitle(lang, chat, privateChatUser))}</h3>\n            {chat.isVerified && <VerifiedIcon />}\n          </div>\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderMessageSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderMessageSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderText(getMessageSummaryText(lang, message));\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={isRoundVideo ? 'round' : undefined} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderText(getMessageSummaryText(lang, message, true), ['emoji', 'highlight'], { highlight: searchQuery })}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n      lastSyncTime: global.lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'focusMessage',\n  ]),\n)(ChatMessage));\n","import React, { FC, memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser, ApiChat, ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport searchWords from '../../../util/searchWords';\nimport { unique, pick } from '../../../util/iteratees';\nimport { getUserFullName, getMessageSummaryText, sortChatIds } from '../../../modules/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  localContactIds?: number[];\n  localChatIds?: number[];\n  localUserIds?: number[];\n  globalChatIds?: number[];\n  globalUserIds?: number[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<number, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n  serverTimeOffset?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'addRecentlyFoundChatId' | 'searchMessagesGlobal' | 'setGlobalSearchChatId'\n)>;\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 3;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, usersById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect, openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  serverTimeOffset,\n}) => {\n  const lang = useLang();\n\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: number) => {\n      openChat({ id });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        onReset();\n      }\n    },\n    [currentUserId, openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: number) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const foundContactIds = localContactIds\n      ? localContactIds.filter((id) => {\n        const user = usersById[id];\n        if (!user) {\n          return false;\n        }\n\n        const fullName = getUserFullName(user);\n        return (fullName && searchWords(fullName, searchQuery)) || searchWords(user.username, searchQuery);\n      })\n      : [];\n\n    return [\n      ...(currentUserId && searchWords(lang('SavedMessages'), searchQuery) ? [currentUserId] : []),\n      ...sortChatIds(unique([\n        ...foundContactIds,\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById, undefined, undefined, serverTimeOffset),\n    ];\n  }, [\n    searchQuery, localContactIds, currentUserId, lang, localChatIds, localUserIds, chatsById,\n    serverTimeOffset, usersById,\n  ]);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(unique([...globalChatIds, ...globalUserIds]),\n      chatsById, true, undefined, serverTimeOffset);\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery, serverTimeOffset]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_').map(Number);\n\n        return (\n          globalMessagesByChatId && globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId]\n        );\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = getMessageSummaryText(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {!!localResults.length && (\n        <div className=\"chat-selection no-selection no-scrollbar\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {!!localResults.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {!!globalResults.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {!!foundMessages.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n        usersById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime, serverTimeOffset,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = global.globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const { foundIds } = (resultsByType && resultsByType.text) || {};\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      usersById,\n      fetchingStatus,\n      lastSyncTime,\n      serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n    'addRecentlyFoundChatId',\n    'searchMessagesGlobal',\n    'setGlobalSearchChatId',\n  ]),\n)(ChatResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { getMessageSummaryText } from '../../../modules/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport DateSuggest from './DateSuggest';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<number, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<number, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal')>;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  currentUserId,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  searchMessagesGlobal,\n  onSearchDateSelect,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n          chatId: currentUserId,\n        });\n      });\n    }\n  }, [currentUserId, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_').map(Number);\n\n        return (\n          globalMessagesByChatId && globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId]\n        );\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = getMessageSummaryText(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {!!foundMessages.length && foundMessages.map(renderFoundMessage)}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const { fetchingStatus, resultsByType } = global.globalSearch;\n\n    const { foundIds } = (resultsByType && resultsByType.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['searchMessagesGlobal']),\n)(ChatMessageResults));\n","import { GlobalState } from '../../../../global/types';\nimport {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { ISettings } from '../../../../types';\n\nimport { selectTheme } from '../../../../modules/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  globalMessagesByChatId?: Record<number, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: number;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = global.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props && props.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const { foundIds } = (resultsByType && resultsByType[currentType]) || {};\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'openMediaViewer')>;\n\nconst CURRENT_TYPE = 'media';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  openMediaViewer,\n}) => {\n  const lang = useLang();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n\n      return globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((messageId: number, chatId: number) => {\n    openMediaViewer({\n      chatId,\n      messageId,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={message.id}\n            idPrefix=\"search-media\"\n            message={message}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'openMediaViewer',\n  ]),\n)(MediaResults));\n","import { ApiChat, ApiMessage, ApiUser } from '../../../../api/types';\nimport {\n  getChatTitle,\n  getSenderTitle,\n  isChatPrivate,\n  isChatGroup,\n} from '../../../../modules/helpers';\nimport { LangFn } from '../../../../hooks/useLang';\n\nexport function getSenderName(\n  lang: LangFn, message: ApiMessage, chatsById: Record<number, ApiChat>, usersById: Record<number, ApiUser>,\n) {\n  const { senderId } = message;\n  if (!senderId) {\n    return undefined;\n  }\n\n  const sender = isChatPrivate(senderId) ? usersById[senderId] : chatsById[senderId];\n\n  let senderName = getSenderTitle(lang, sender);\n\n  const chat = chatsById[message.chatId];\n  if (chat) {\n    if (isChatPrivate(senderId) && (sender as ApiUser).isSelf) {\n      senderName = `${lang('FromYou')} → ${getChatTitle(lang, chat)}`;\n    } else if (isChatGroup(chat)) {\n      senderName += ` → ${getChatTitle(lang, chat)}`;\n    }\n  }\n\n  return senderName;\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage')>;\n\nconst CURRENT_TYPE = 'links';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n\n      return globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: number) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n  ]),\n)(LinkResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../modules/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage')>;\n\nconst CURRENT_TYPE = 'documents';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n      const message = globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: number) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n  ]),\n)(FileResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage' | 'openAudioPlayer')>;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n  openAudioPlayer,\n}) => {\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n\n      return globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: number) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: number) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            target=\"searchResult\"\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n    'openAudioPlayer',\n  ]),\n)(AudioResults));\n","import React, {\n  FC, memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport UserChatResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('setGlobalSearchContent' | 'setGlobalSearchDate')>;\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  setGlobalSearchContent,\n  setGlobalSearchDate,\n  onReset,\n}) => {\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slide-reversed' : 'slide'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <UserChatResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = global.globalSearch;\n\n    return { currentContent, chatId };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setGlobalSearchContent', 'setGlobalSearchDate']),\n)(LeftSearch));\n","import { useState, useCallback, useRef } from '../lib/teact/teact';\n\nexport type ReducerAction<Actions> = { type: Actions; payload?: any };\nexport type StateReducer<State, Actions> = (state: State, action: ReducerAction<Actions>) => State;\nexport type Dispatch<Actions> = (action: ReducerAction<Actions>) => void;\n\nexport default function useReducer<State, Actions>(\n  reducer: StateReducer<State, Actions>,\n  initialState: State,\n) {\n  const reducerRef = useRef(reducer);\n  const [state, setState] = useState<State>(initialState);\n\n  const dispatch = useCallback((action: ReducerAction<Actions>) => {\n    setState((currentState) => reducerRef.current(currentState, action));\n  }, []);\n\n  return [\n    state,\n    dispatch,\n  ] as [State, Dispatch<Actions>];\n}\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\nimport { ApiChatFolder } from '../../api/types';\nimport { pick, omit } from '../../util/iteratees';\n\nexport type FolderChatType = {\n  icon: string;\n  title: string;\n  key: keyof Pick<ApiChatFolder, (\n    'contacts' | 'nonContacts' | 'groups' | 'channels' | 'bots' |\n    'excludeMuted' | 'excludeArchived' | 'excludeRead'\n  )>;\n};\n\nexport const INCLUDED_CHAT_TYPES: FolderChatType[] = [\n  { icon: 'user', title: 'FilterContacts', key: 'contacts' },\n  { icon: 'non-contacts', title: 'FilterNonContacts', key: 'nonContacts' },\n  { icon: 'group', title: 'FilterGroups', key: 'groups' },\n  { icon: 'channel', title: 'FilterChannels', key: 'channels' },\n  { icon: 'bots', title: 'FilterBots', key: 'bots' },\n];\n\nexport const EXCLUDED_CHAT_TYPES: FolderChatType[] = [\n  { icon: 'mute', title: 'FilterMuted', key: 'excludeMuted' },\n  { icon: 'archive', title: 'FilterArchived', key: 'excludeArchived' },\n  { icon: 'readchats', title: 'FilterRead', key: 'excludeRead' },\n];\n\nconst INCLUDE_FILTER_FIELDS: Array<keyof FolderIncludeFilters> = [\n  'includedChatIds', 'bots', 'channels', 'groups', 'contacts', 'nonContacts',\n];\nconst EXCLUDE_FILTER_FIELDS: Array<keyof FolderExcludeFilters> = [\n  'excludedChatIds', 'excludeArchived', 'excludeMuted', 'excludeRead',\n];\n\nexport function selectChatFilters(state: FoldersState, mode: 'included' | 'excluded', selectTemp?: boolean) {\n  let selectedChatIds: number[] = [];\n  let selectedChatTypes: FolderChatType['key'][] = [];\n\n  if (mode === 'included') {\n    const {\n      includedChatIds,\n      ...includeFilters\n    } = selectTemp\n      ? state.includeFilters || {}\n      : pick(\n        state.folder,\n        INCLUDE_FILTER_FIELDS,\n      );\n\n    selectedChatIds = includedChatIds || [];\n    selectedChatTypes = (Object.keys(includeFilters) as Array<keyof typeof includeFilters>)\n      .filter((key) => Boolean(includeFilters[key]));\n  } else {\n    const {\n      excludedChatIds,\n      ...excludeFilters\n    } = selectTemp\n      ? state.excludeFilters || {}\n      : pick(\n        state.folder,\n        EXCLUDE_FILTER_FIELDS,\n      );\n\n    selectedChatIds = excludedChatIds || [];\n    selectedChatTypes = (Object.keys(excludeFilters) as Array<keyof typeof excludeFilters>)\n      .filter((key) => Boolean(excludeFilters[key]));\n  }\n\n  return {\n    selectedChatIds,\n    selectedChatTypes,\n  };\n}\n\nfunction getSuggestedFolderName(includeFilters?: FolderIncludeFilters) {\n  if (includeFilters) {\n    const {\n      includedChatIds,\n      ...filters\n    } = includeFilters;\n\n    if (\n      Object.values(filters).filter(Boolean).length > 1\n      || (includedChatIds && includedChatIds.length)\n    ) {\n      return '';\n    }\n\n    if (filters.bots) {\n      return 'Bots';\n    } else if (filters.groups) {\n      return 'Groups';\n    } else if (filters.channels) {\n      return 'Channels';\n    } else if (filters.contacts) {\n      return 'Contacts';\n    } else if (filters.nonContacts) {\n      return 'Non-Contacts';\n    }\n  }\n\n  return '';\n}\n\ntype FolderIncludeFilters = Pick<ApiChatFolder, (\n  'includedChatIds' | 'bots' | 'channels' | 'groups' | 'contacts' | 'nonContacts'\n)>;\ntype FolderExcludeFilters = Pick<ApiChatFolder, 'excludedChatIds' | 'excludeArchived' | 'excludeMuted' | 'excludeRead'>;\n\nexport type FoldersState = {\n  mode: 'create' | 'edit';\n  isLoading?: boolean;\n  isTouched?: boolean;\n  error?: string;\n  folderId?: number;\n  chatFilter: string;\n  folder: Omit<ApiChatFolder, 'id' | 'description' | 'emoticon'>;\n  includeFilters?: FolderIncludeFilters;\n  excludeFilters?: FolderExcludeFilters;\n};\nexport type FoldersActions = (\n  'setTitle' | 'saveFilters' | 'editFolder' | 'reset' | 'setChatFilter' | 'setIsLoading' | 'setError' |\n  'editIncludeFilters' | 'editExcludeFilters' | 'setIncludeFilters' | 'setExcludeFilters'\n);\nexport type FolderEditDispatch = Dispatch<FoldersActions>;\n\nconst INITIAL_STATE: FoldersState = {\n  mode: 'create',\n  chatFilter: '',\n  folder: {\n    title: '',\n    includedChatIds: [],\n    excludedChatIds: [],\n  },\n};\n\nconst foldersReducer: StateReducer<FoldersState, FoldersActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setTitle':\n      return {\n        ...state,\n        folder: {\n          ...state.folder,\n          title: action.payload,\n        },\n        isTouched: true,\n      };\n    case 'editIncludeFilters':\n      return {\n        ...state,\n        includeFilters: pick(\n          state.folder,\n          INCLUDE_FILTER_FIELDS,\n        ),\n      };\n    case 'editExcludeFilters':\n      return {\n        ...state,\n        excludeFilters: pick(\n          state.folder,\n          EXCLUDE_FILTER_FIELDS,\n        ),\n      };\n    case 'setIncludeFilters':\n      return {\n        ...state,\n        includeFilters: action.payload,\n        chatFilter: '',\n      };\n    case 'setExcludeFilters':\n      return {\n        ...state,\n        excludeFilters: action.payload,\n        chatFilter: '',\n      };\n    case 'saveFilters':\n      if (state.includeFilters) {\n        return {\n          ...state,\n          folder: {\n            ...omit(state.folder, INCLUDE_FILTER_FIELDS),\n            title: state.folder.title ? state.folder.title : getSuggestedFolderName(state.includeFilters),\n            ...state.includeFilters,\n          },\n          includeFilters: undefined,\n          chatFilter: '',\n          isTouched: true,\n        };\n      } else if (state.excludeFilters) {\n        return {\n          ...state,\n          folder: {\n            ...omit(state.folder, EXCLUDE_FILTER_FIELDS),\n            ...state.excludeFilters,\n          },\n          excludeFilters: undefined,\n          chatFilter: '',\n          isTouched: true,\n        };\n      } else {\n        return state;\n      }\n    case 'editFolder': {\n      const { id: folderId, description, ...folder } = action.payload;\n\n      return {\n        mode: 'edit',\n        folderId,\n        folder,\n        chatFilter: '',\n      };\n    }\n    case 'setChatFilter': {\n      return {\n        ...state,\n        chatFilter: action.payload,\n      };\n    }\n    case 'setIsLoading': {\n      return {\n        ...state,\n        isLoading: action.payload,\n      };\n    }\n    case 'setError': {\n      return {\n        ...state,\n        error: action.payload,\n      };\n    }\n    case 'reset':\n      return INITIAL_STATE;\n    default:\n      return state;\n  }\n};\n\nexport default () => {\n  return useReducer(foldersReducer, INITIAL_STATE);\n};\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nexport default () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n","import React, {\n  FC, useCallback, useMemo, memo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'signOut' | 'deleteChatFolder'>;\n\nconst SettingsHeader: FC<OwnProps & DispatchProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  signOut,\n  deleteChatFolder,\n}) => {\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n  const [isDeleteFolderDialogOpen, setIsDeleteFolderDialogOpen] = useState(false);\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(true);\n  }, []);\n\n  const closeDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(false);\n  }, []);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteFolderConfirmation();\n    deleteChatFolder({ id: editedFolderId });\n    onReset();\n  }, [editedFolderId, closeDeleteFolderConfirmation, deleteChatFolder, onReset]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n\n            {editedFolderId && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  Delete Folder\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersExcludedChats:\n        return (\n          <div className=\"settings-main-header\">\n            {currentScreen === SettingsScreens.FoldersIncludedChats ? (\n              <h3>{lang('FilterInclude')}</h3>\n            ) : (\n              <h3>{lang('FilterExclude')}</h3>\n            )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('SETTINGS')}</h3>\n\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text=\"Are you sure you want to log out?\"\n        confirmLabel=\"Log Out\"\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isDeleteFolderDialogOpen}\n        onClose={closeDeleteFolderConfirmation}\n        text=\"Are you sure you want to delete this folder?\"\n        confirmLabel=\"Delete\"\n        confirmHandler={handleDeleteFolderMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, ['signOut', 'deleteChatFolder']),\n)(SettingsHeader));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { SettingsScreens } from '../../../types';\nimport { ApiUser } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { getUserFullName } from '../../../modules/helpers';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  currentUser?: ApiUser;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  currentUser,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <div className=\"settings-current-user\">\n            <Avatar user={currentUser} size=\"jumbo\" />\n            <p className=\"name\">{getUserFullName(currentUser)}</p>\n            <p className=\"phone\">{formatPhoneNumberWithCode(currentUser.phoneNumber)}</p>\n          </div>\n        )}\n        <ListItem\n          icon=\"edit\"\n          onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n        >\n          {lang('lng_settings_information')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"settings\"\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n\n    return {\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n    };\n  },\n)(SettingsMain));\n","import React, { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport Button, { OwnProps as ButtonProps } from './Button';\n\nimport './FloatingActionButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  className?: string;\n  color?: ButtonProps['color'];\n  ariaLabel?: ButtonProps['ariaLabel'];\n  disabled?: boolean;\n  onClick: () => void;\n  children: any;\n};\n\nconst FloatingActionButton: FC<OwnProps> = ({\n  isShown,\n  className,\n  color = 'primary',\n  ariaLabel,\n  disabled,\n  onClick,\n  children,\n}) => {\n  const buttonClassName = buildClassName(\n    'FloatingActionButton',\n    isShown && 'revealed',\n    className,\n  );\n\n  return (\n    <Button\n      className={buttonClassName}\n      color={color}\n      round\n      disabled={disabled}\n      onClick={isShown && !disabled ? onClick : undefined}\n      ariaLabel={ariaLabel}\n      tabIndex={-1}\n    >\n      {children}\n    </Button>\n  );\n};\n\nexport default FloatingActionButton;\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\n\nimport { debounce } from '../../util/schedulers';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkUsername: AnyToVoidFunction;\n  onChange: (value: string | false) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX = 'https://t.me/';\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username);\n}\n\nconst SettingsEditProfile: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkUsername,\n  onChange,\n}) => {\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, `${label} is too short`];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, `${label} is too long`];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, `${label} contains invalid characters`];\n    }\n\n    if (isUsernameAvailable === undefined) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      isUsernameAvailable ? lang(`${langPrefix}Available`, 'Username') : undefined,\n      isUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, isUsernameAvailable, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n    e.target.value = `${asLink ? LINK_PREFIX : ''}${newUsername}`;\n\n    const isValid = isUsernameValid(newUsername);\n\n    if (isValid) {\n      runDebouncedForCheckUsername(() => {\n        checkUsername({ username: newUsername });\n      });\n    }\n\n    if (onChange) {\n      onChange(isValid ? newUsername : false);\n    }\n  }, [asLink, checkUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n    />\n  );\n};\n\nexport default memo(SettingsEditProfile);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport { selectUser } from '../../../modules/selectors';\nimport { getChatAvatarHash } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport renderText from '../../common/helpers/renderText';\nimport UsernameInput from '../../common/UsernameInput';\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  currentUsername?: string;\n  progress?: ProfileEditProgress;\n  isUsernameAvailable?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadCurrentUser' | 'updateProfile' | 'checkUsername'\n)>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst MAX_BIO_LENGTH = 70;\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\nconst ERROR_BIO_TOO_LONG = 'Bio can\\' be longer than 70 characters';\n\nconst SettingsEditProfile: FC<StateProps & DispatchProps> = ({\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  currentUsername,\n  progress,\n  isUsernameAvailable,\n  loadCurrentUser,\n  updateProfile,\n  checkUsername,\n}) => {\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [username, setUsername] = useState<string | false>(currentUsername || '');\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = username === false;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || isUsernameAvailable === true;\n  }, [photo, isProfileFieldsTouched, isUsernameError, isUsernameAvailable]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setUsername(value);\n    setIsUsernameTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    if (trimmedBio.length > MAX_BIO_LENGTH) {\n      setError(ERROR_BIO_TOO_LONG);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    username, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-edit-profile\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <InputText\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            error={error === ERROR_BIO_TOO_LONG ? error : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={username || ''}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkUsername={checkUsername}\n            onChange={handleUsernameChange}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {username && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">https://t.me/{username}</span>\n            </p>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const { progress, isUsernameAvailable } = global.profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    if (!currentUser) {\n      return {\n        progress,\n        isUsernameAvailable,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      username: currentUsername,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      currentUsername,\n      progress,\n      isUsernameAvailable,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadCurrentUser',\n    'updateProfile',\n    'checkUsername',\n  ]),\n)(SettingsEditProfile));\n","import React, {\n  FC, memo, useMemo, useCallback, useState, useEffect,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\nimport { ApiChatFolder, ApiChat, ApiUser } from '../../../../api/types';\nimport { NotifyException, NotifySettings } from '../../../../types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { pick } from '../../../../util/iteratees';\nimport { selectNotifyExceptions, selectNotifySettings } from '../../../../modules/selectors';\nimport { throttle } from '../../../../util/schedulers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport { getFolderDescriptionText } from '../../../../modules/helpers';\nimport useLang from '../../../../hooks/useLang';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\ntype OwnProps = {\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  orderedFolderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadRecommendedChatFolders' | 'addChatFolder' | 'showError'>;\n\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst MAX_ALLOWED_FOLDERS = 10;\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps & DispatchProps> = ({\n  onCreateFolder,\n  onEditFolder,\n  chatsById,\n  usersById,\n  orderedFolderIds,\n  foldersById,\n  recommendedChatFolders,\n  notifySettings,\n  notifyExceptions,\n  loadRecommendedChatFolders,\n  addChatFolder,\n  showError,\n}) => {\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersAll').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showError({\n        error: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n        },\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, showError, onCreateFolder]);\n\n  const lang = useLang();\n\n  const userFolders = useMemo(() => {\n    if (!orderedFolderIds) {\n      return undefined;\n    }\n\n    const chatIds = Object.keys(chatsById).map(Number);\n\n    return orderedFolderIds.map((id) => {\n      const folder = foldersById[id];\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(\n          lang, chatsById, usersById, folder, chatIds, notifySettings, notifyExceptions,\n        ),\n      };\n    });\n  }, [orderedFolderIds, chatsById, foldersById, usersById, notifySettings, notifyExceptions, lang]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showError({\n        error: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n        },\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, addChatFolder, showError]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header\">\n        <div className=\"settings-content-icon\">\n          {animationData && (\n            <AnimatedSticker\n              id=\"settingsFoldersMain\"\n              size={STICKER_SIZE_FOLDER_SETTINGS}\n              animationData={animationData}\n              play={isAnimationLoaded}\n              noLoop\n              onLoad={handleAnimationLoad}\n            />\n          )}\n        </div>\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n          className=\"with-icon mb-2\"\n          color=\"primary\"\n          size=\"smaller\"\n          pill\n          fluid\n          onClick={handleCreateFolder}\n          isRtl={lang.isRtl}\n        >\n          <i className=\"icon-add\" />\n          {lang('CreateNewFilter')}\n        </Button>\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        {userFolders && userFolders.length ? userFolders.map((folder) => (\n          <ListItem\n            className=\"mb-2\"\n            narrow\n            multiline\n            onClick={() => onEditFolder(foldersById[folder.id])}\n          >\n            <span className=\"title\">{folder.title}</span>\n            <span className=\"subtitle\">{folder.subtitle}</span>\n          </ListItem>\n        )) : userFolders && !userFolders.length ? (\n          <p className=\"settings-item-description my-4\" dir=\"auto\">\n            You have no folders yet.\n          </p>\n        ) : <Loading />}\n      </div>\n\n      {(recommendedChatFolders && !!recommendedChatFolders.length) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{folder.title}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: { byId: chatsById },\n      users: { byId: usersById },\n    } = global;\n\n    const {\n      orderedIds: orderedFolderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      chatsById,\n      usersById,\n      orderedFolderIds,\n      foldersById,\n      recommendedChatFolders,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadRecommendedChatFolders', 'addChatFolder', 'showError']),\n)(SettingsFoldersMain));\n","import React, { FC } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import React, {\n  FC, memo, useCallback, useState, useEffect, useMemo,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { pick, findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isChatPrivate } from '../../../../modules/helpers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport {\n  FoldersState,\n  FolderEditDispatch,\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: number[];\n  loadedArchivedChatIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'editChatFolder' | 'addChatFolder' | 'loadMoreChats'>;\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'Please select at least one chat for this folder.';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps & DispatchProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  onReset,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n  editChatFolder,\n  addChatFolder,\n  loadMoreChats,\n}) => {\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersNew').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...loadedActiveChatIds || [],\n      ...loadedArchivedChatIds || [],\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  useEffect(() => {\n    if (\n      visibleIncludedChatIds.length < includedChatIds.length\n      || visibleExcludedChatIds.length < excludedChatIds.length\n    ) {\n      loadMoreChats({ listType: 'active' });\n    }\n  }, [\n    loadMoreChats,\n    excludedChatIds.length,\n    includedChatIds.length,\n    visibleExcludedChatIds.length,\n    visibleIncludedChatIds.length,\n  ]);\n\n  const lang = useLang();\n\n  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }\n\n  function handleSubmit() {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isChatPrivate(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-content-header\">\n          <div className=\"settings-content-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"settingsFoldersEdit\"\n                size={STICKER_SIZE_FOLDER_SETTINGS}\n                animationData={animationData}\n                play={isAnimationLoaded && String(state.folderId)}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {state.error}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={!!state.isTouched}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { listIds } = global.chats;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['editChatFolder', 'addChatFolder', 'loadMoreChats']),\n)(SettingsFoldersEdit));\n","import React, {\n  FC, useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\n\nimport { isChatPrivate } from '../../../../modules/helpers';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n  FolderChatType,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: number[];\n  selectedIds: number[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: number[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n  onLoadMore: () => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_CHATS = 100;\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\nconst SettingsFoldersChatsPicker: FC<OwnProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  onLoadMore,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n  const hasMaxChats = selectedIds.length >= MAX_CHATS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: number) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: number) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        onClick={() => handleItemClick(id)}\n        ripple\n        disabled={!isSelected && hasMaxChats}\n      >\n        {isChatPrivate(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(onLoadMore, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        {!hasMaxChats ? (\n          <InputText\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={lang('Search')}\n          />\n        ) : (\n          <p className=\"max-items-reached\" dir=\"auto\">\n            {`Sorry, you can't add more than ${MAX_CHATS} chats.`}\n          </p>\n        )}\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <>\n            <h4 key=\"header1\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChatTypes')}\n            </h4>\n            {chatTypes.map(renderChatType)}\n            <div key=\"divider\" className=\"picker-list-divider\" />\n            <h4 key=\"header2\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </>\n        )}\n\n        {viewportIds && viewportIds.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(SettingsFoldersChatsPicker);\n","import React, {\n  FC, memo, useMemo, useCallback,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\nimport { ApiChat } from '../../../../api/types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { pick } from '../../../../util/iteratees';\nimport searchWords from '../../../../util/searchWords';\nimport { prepareChatList, getChatTitle } from '../../../../modules/helpers';\nimport {\n  FoldersState,\n  FolderEditDispatch,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\n\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  listIds?: number[];\n  orderedPinnedIds?: number[];\n  archivedListIds?: number[];\n  archivedPinnedIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadMoreChats'>;\n\nconst SettingsFoldersChatFilters: FC<OwnProps & StateProps & DispatchProps> = ({\n  mode,\n  state,\n  dispatch,\n  chatsById,\n  listIds,\n  orderedPinnedIds,\n  archivedListIds,\n  archivedPinnedIds,\n  loadMoreChats,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n  const chats = useMemo(() => {\n    const activeChatArrays = listIds\n      ? prepareChatList(chatsById, listIds, orderedPinnedIds, 'all')\n      : undefined;\n    const archivedChatArrays = archivedListIds\n      ? prepareChatList(chatsById, archivedListIds, archivedPinnedIds, 'archived')\n      : undefined;\n\n    if (!activeChatArrays && !archivedChatArrays) {\n      return undefined;\n    }\n\n    return [\n      ...(activeChatArrays\n        ? [...activeChatArrays.pinnedChats, ...activeChatArrays.otherChats]\n        : []\n      ),\n      ...(archivedChatArrays ? archivedChatArrays.otherChats : []),\n    ];\n  }, [chatsById, listIds, orderedPinnedIds, archivedListIds, archivedPinnedIds]);\n\n  const displayedIds = useMemo(() => {\n    if (!chats) {\n      return undefined;\n    }\n\n    return chats\n      .filter((chat) => (\n        !chatFilter\n        || searchWords(getChatTitle(lang, chat), chatFilter)\n        || selectedChatIds.includes(chat.id)\n      ))\n      .map(({ id }) => id);\n  }, [chats, chatFilter, lang, selectedChatIds]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: number[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n      onLoadMore={loadMoreChats}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n    } = global;\n\n    return {\n      chatsById,\n      listIds: listIds.active,\n      orderedPinnedIds: orderedPinnedIds.active,\n      archivedPinnedIds: orderedPinnedIds.archived,\n      archivedListIds: listIds.archived,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadMoreChats']),\n)(SettingsFoldersChatFilters));\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { FoldersState, FolderEditDispatch } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  state,\n  dispatch,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(SettingsScreens.FoldersIncludedChats);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(SettingsScreens.FoldersExcludedChats);\n  }, [dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useCallback, useMemo, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport './RangeSlider.scss';\n\ntype OwnProps = {\n  options?: string[];\n  range?: { min: number; max: number; step?: number };\n  label?: string;\n  value: number;\n  disabled?: boolean;\n  onChange: (value: number) => void;\n};\n\nconst RangeSlider: FC<OwnProps> = ({\n  options,\n  range,\n  label,\n  value,\n  disabled,\n  onChange,\n}) => {\n  const lang = useLang();\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    onChange(Number(event.currentTarget.value));\n  }, [onChange]);\n\n  const className = buildClassName(\n    'RangeSlider',\n    disabled && 'disabled',\n  );\n\n  const trackWidth = useMemo(() => {\n    if (options) {\n      return (value / (options.length - 1)) * 100;\n    } else if (range) {\n      const possibleValuesLength = (range.max - range.min) / (range.step || 1);\n      return ((value - range.min) / possibleValuesLength) * 100;\n    }\n    return 0;\n  }, [value, options, range]);\n\n  const [min, max, step] = useMemo(() => {\n    if (options) {\n      return [0, options.length - 1, 1];\n    } else if (range) {\n      return [range.min, range.max, range.step || 1];\n    }\n\n    return [0, 0, 0];\n  }, [range, options]);\n\n  return (\n    <div className={className}>\n      {label && (\n        <div className=\"slider-top-row\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <span className=\"label\" dir=\"auto\">{label}</span>\n          {range && (\n            <span className=\"value\" dir=\"auto\">{value}</span>\n          )}\n        </div>\n      )}\n      <div className=\"slider-main\">\n        <div\n          className=\"slider-fill-track\"\n          // @ts-ignore\n          style={`width: ${trackWidth}%`}\n        />\n        <input\n          min={min}\n          max={max}\n          value={value}\n          step={step}\n          type=\"range\"\n          onChange={handleChange}\n        />\n        {options && (\n          <div className=\"slider-options\">\n            {options.map((option, index) => (\n              <div\n                className={buildClassName('slider-option no-selection', index === value && 'active')}\n                onClick={() => onChange(index)}\n              >\n                {option}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(RangeSlider);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\ntype OwnProps = {\n  size?: number;\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCoverAnimated: FC<OwnProps> = ({\n  size = STICKER_SIZE_PICKER_HEADER,\n  stickerSet,\n  observeIntersection,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHash = `stickerSet${stickerSet.id}`;\n  const lottieData = useMedia(mediaHash, !isIntersecting, ApiMediaFormat.Lottie);\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(lottieData, 'slow');\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {!shouldRenderFullMedia && getFirstLetters(stickerSet.title, 2)}\n      {shouldRenderFullMedia && lottieData && (\n        <AnimatedSticker\n          id={mediaHash}\n          size={size}\n          animationData={lottieData}\n          className={transitionClassNames}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCoverAnimated);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiStickerSet } from '../../../api/types';\n\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport { getFirstLetters } from '../../../util/textFormat';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({ stickerSet, observeIntersection }) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaData = useMedia(stickerSet.hasThumbnail && `stickerSet${stickerSet.id}`, !isIntersecting);\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(mediaData, 'slow');\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {!shouldRenderFullMedia && getFirstLetters(stickerSet.title, 2)}\n      {shouldRenderFullMedia && (\n        <img src={mediaData} className={transitionClassNames} alt=\"\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiSticker } from '../../api/types';\n\nimport { useIsIntersecting, ObserveFn } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useTransitionForMedia from '../../hooks/useTransitionForMedia';\nimport useFlag from '../../hooks/useFlag';\nimport buildClassName from '../../util/buildClassName';\n\nimport AnimatedSticker from './AnimatedSticker';\nimport Button from '../ui/Button';\n\nimport './StickerButton.scss';\n\ntype OwnProps = {\n  sticker: ApiSticker;\n  size: number;\n  observeIntersection: ObserveFn;\n  noAnimate?: boolean;\n  title?: string;\n  className?: string;\n  onClick?: (arg: any) => void;\n  clickArg?: any;\n  onUnfaveClick?: (sticker: ApiSticker) => void;\n};\n\nconst StickerButton: FC<OwnProps> = ({\n  sticker, size, observeIntersection, noAnimate, title, className, onClick, clickArg, onUnfaveClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const localMediaHash = `sticker${sticker.id}`;\n  const stickerSelector = `sticker-button-${sticker.id}`;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const thumbDataUri = sticker.thumbnail ? sticker.thumbnail.dataUri : undefined;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !isIntersecting, ApiMediaFormat.BlobUrl);\n\n  const shouldPlay = isIntersecting && !noAnimate;\n  const lottieData = useMedia(sticker.isAnimated && localMediaHash, !shouldPlay, ApiMediaFormat.Lottie);\n  const [isAnimationLoaded, markLoaded, unmarkLoaded] = useFlag(Boolean(lottieData));\n  const canAnimatedPlay = isAnimationLoaded && shouldPlay;\n\n  const {\n    shouldRenderThumb,\n    shouldRenderFullMedia: shouldRenderPreview,\n    transitionClassNames: previewTransitionClassNames,\n  } = useTransitionForMedia(previewBlobUrl || canAnimatedPlay, 'slow');\n\n  // To avoid flickering\n  useEffect(() => {\n    if (!shouldPlay) {\n      unmarkLoaded();\n    }\n  }, [unmarkLoaded, shouldPlay]);\n\n  function handleClick() {\n    if (onClick) {\n      onClick(clickArg);\n    }\n  }\n\n  function handleUnfaveClick(e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) {\n    e.stopPropagation();\n    e.preventDefault();\n\n    onUnfaveClick!(sticker);\n  }\n\n  const fullClassName = buildClassName(\n    'StickerButton',\n    sticker.isAnimated && 'animated',\n    stickerSelector,\n    className,\n  );\n\n  const style = shouldRenderThumb && thumbDataUri ? `background-image: url('${thumbDataUri}');` : '';\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      title={title || (sticker && sticker.emoji)}\n      // @ts-ignore\n      style={style}\n      data-sticker-id={sticker.id}\n      onClick={handleClick}\n    >\n      {shouldRenderPreview && !canAnimatedPlay && (\n        // eslint-disable-next-line jsx-a11y/alt-text\n        <img src={previewBlobUrl} className={previewTransitionClassNames} />\n      )}\n      {shouldPlay && lottieData && (\n        <AnimatedSticker\n          id={localMediaHash}\n          animationData={lottieData}\n          play\n          size={size}\n          isLowPriority\n          onLoad={markLoaded}\n        />\n      )}\n      {onUnfaveClick && (\n        <Button\n          className=\"sticker-unfave-button\"\n          color=\"dark\"\n          round\n          onClick={handleUnfaveClick}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerButton);\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../../config';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport StickerSetCoverAnimated from '../../middle/composer/StickerSetCoverAnimated';\nimport StickerSetCover from '../../middle/composer/StickerSetCover';\nimport StickerButton from '../../common/StickerButton';\n\nimport './SettingsStickerSet.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst SettingsStickerSet: FC<OwnProps> = ({\n  stickerSet,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  const firstSticker = stickerSet.stickers && stickerSet.stickers[0];\n\n  if (stickerSet.hasThumbnail || !firstSticker) {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        inactive={!firstSticker}\n        onClick={() => firstSticker && onClick(firstSticker)}\n      >\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          {stickerSet.isAnimated ? (\n            <StickerSetCoverAnimated\n              size={STICKER_SIZE_GENERAL_SETTINGS}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          )}\n        </Button>\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  } else {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        onClick={() => onClick(firstSticker)}\n      >\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          observeIntersection={observeIntersection}\n        />\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  }\n};\n\nexport default memo(SettingsStickerSet);\n","import React, {\n  FC, useCallback, memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ISettings } from '../../../types';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { IS_MAC_OS, IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsStickerSet from './SettingsStickerSet';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'messageTextSize' |\n  'animationLevel' |\n  'messageSendKeyCombo' |\n  'shouldAutoDownloadMediaFromContacts' |\n  'shouldAutoDownloadMediaInPrivateChats' |\n  'shouldAutoDownloadMediaInGroups' |\n  'shouldAutoDownloadMediaInChannels' |\n  'shouldAutoPlayGifs' |\n  'shouldAutoPlayVideos' |\n  'shouldSuggestStickers' |\n  'shouldLoopStickers'\n)> & {\n  stickerSetIds?: string[];\n  stickerSetsById?: Record<string, ApiStickerSet>;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setSettingOption' | 'loadStickerSets' | 'loadAddedStickers'\n)>;\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst SettingsGeneral: FC<OwnProps & StateProps & DispatchProps> = ({\n  onScreenSelect,\n  stickerSetIds,\n  stickerSetsById,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  shouldAutoDownloadMediaFromContacts,\n  shouldAutoDownloadMediaInPrivateChats,\n  shouldAutoDownloadMediaInGroups,\n  shouldAutoDownloadMediaInChannels,\n  shouldAutoPlayGifs,\n  shouldAutoPlayVideos,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  setSettingOption,\n  loadStickerSets,\n  loadAddedStickers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [sticker, setSticker] = useState<ApiSticker>();\n\n  const lang = useLang();\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  useEffect(() => {\n    loadStickerSets();\n  }, [loadStickerSets]);\n\n  useEffect(() => {\n    if (stickerSetIds && stickerSetIds.length) {\n      loadAddedStickers();\n    }\n  }, [stickerSetIds, loadAddedStickers]);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleStickerSetClick = useCallback((value: ApiSticker) => {\n    setSticker(value);\n    openModal();\n  }, [openModal]);\n\n  const stickerSets = stickerSetIds && stickerSetIds.map((id: string) => {\n    return stickerSetsById && stickerSetsById[id] && stickerSetsById[id].installedDate ? stickerSetsById[id] : false;\n  }).filter<ApiStickerSet>(Boolean as any);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          // TODO Remove memo-killer\n          range={{ min: 12, max: 20 }}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={(value) => setSettingOption({ messageSendKeyCombo: value })}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoDownloadMedia')}</h4>\n\n        <Checkbox\n          label={lang('Contacts')}\n          checked={shouldAutoDownloadMediaFromContacts}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaFromContacts: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutodownloadPrivateChats')}\n          checked={shouldAutoDownloadMediaInPrivateChats}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaInPrivateChats: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutodownloadGroupChats')}\n          checked={shouldAutoDownloadMediaInGroups}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaInGroups: isChecked })}\n        />\n        <Checkbox\n          label={lang('FilterChannels')}\n          checked={shouldAutoDownloadMediaInChannels}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaInChannels: isChecked })}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={shouldAutoPlayGifs}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoPlayGifs: isChecked })}\n        />\n        <Checkbox\n          label={lang('DataAndStorage.Autoplay.Videos')}\n          checked={shouldAutoPlayVideos}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoPlayVideos: isChecked })}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AccDescrStickers')}</h4>\n\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={(isChecked) => setSettingOption({ shouldSuggestStickers: isChecked })}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={(isChecked) => setSettingOption({ shouldLoopStickers: isChecked })}\n        />\n\n        <div className=\"mt-4\" ref={stickerSettingsRef}>\n          {stickerSets && stickerSets.map((stickerSet: ApiStickerSet) => (\n            <SettingsStickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersectionForCovers}\n              onClick={handleStickerSetClick}\n            />\n          ))}\n        </div>\n        {sticker && (\n          <StickerSetModal\n            isOpen={isModalOpen}\n            fromSticker={sticker}\n            onClose={closeModal}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'shouldAutoDownloadMediaFromContacts',\n        'shouldAutoDownloadMediaInPrivateChats',\n        'shouldAutoDownloadMediaInGroups',\n        'shouldAutoDownloadMediaInChannels',\n        'shouldAutoPlayGifs',\n        'shouldAutoPlayVideos',\n        'shouldSuggestStickers',\n        'shouldLoopStickers',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n      ]),\n      stickerSetIds: global.stickers.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setSettingOption', 'loadStickerSets', 'loadAddedStickers',\n  ]),\n)(SettingsGeneral));\n","let fileSelector: HTMLInputElement;\n\nexport function openSystemFilesDialog(accept = '*', callback: (e: Event) => void, noMultiple = false) {\n  if (!fileSelector) {\n    fileSelector = document.createElement('input');\n    fileSelector.setAttribute('type', 'file');\n  }\n\n  fileSelector.setAttribute('accept', accept);\n\n  if (noMultiple) {\n    fileSelector.removeAttribute('multiple');\n  } else {\n    fileSelector.setAttribute('multiple', 'multiple');\n  }\n\n  // eslint-disable-next-line no-null/no-null\n  fileSelector.onchange = null;\n  fileSelector.value = '';\n  fileSelector.onchange = callback;\n\n  fileSelector.click();\n}\n","/* eslint-disable eqeqeq */\n/* eslint-disable prefer-template */\n/* eslint-disable prefer-const */\n/* eslint-disable prefer-destructuring */\n/* eslint-disable one-var */\n/* eslint-disable one-var-declaration-per-line */\n\nimport { preloadImage } from './files';\n\n/**\n * HEX > RGB\n * input: 'xxxxxx' (ex. 'ed15fa') case-insensitive\n * output: [r, g, b] ([0-255, 0-255, 0-255])\n */\nexport function hex2rgb(param: string): [number, number, number] {\n  return [\n    parseInt(param.substring(0, 2), 16),\n    parseInt(param.substring(2, 4), 16),\n    parseInt(param.substring(4, 6), 16),\n  ];\n}\n\n/**\n * RGB > HEX\n * input: [r, g, b] ([0-255, 0-255, 0-255])\n * output: 'xxxxxx' (ex. 'ff0000')\n */\nexport function rgb2hex(param: [number, number, number]) {\n  const p0 = param[0].toString(16);\n  const p1 = param[1].toString(16);\n  const p2 = param[2].toString(16);\n  return (p0.length == 1 ? '0' + p0 : p0) + (p1.length == 1 ? '0' + p1 : p1) + (p2.length == 1 ? '0' + p2 : p2);\n}\n\n/**\n * Converts an RGB color value to HSV. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and v in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSV representation\n */\nexport function rgb2hsb([r, g, b]: [number, number, number]): [number, number, number] {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  let max = Math.max(r, g, b), min = Math.min(r, g, b);\n  let h!: number, s: number, v: number = max;\n\n  let d = max - min;\n  s = max == 0 ? 0 : d / max;\n\n  if (max == min) {\n    h = 0; // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return [h, s, v];\n}\n\n/**\n * Converts an HSV color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes h, s, and v are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param   Number  h       The hue\n * @param   Number  s       The saturation\n * @param   Number  v       The value\n * @return  Array           The RGB representation\n */\nexport function hsb2rgb([h, s, v]: [number, number, number]): [number, number, number] {\n  let r!: number, g!: number, b!: number;\n\n  let i = Math.floor(h * 6);\n  let f = h * 6 - i;\n  let p = v * (1 - s);\n  let q = v * (1 - f * s);\n  let t = v * (1 - (1 - f) * s);\n\n  switch (i % 6) {\n    case 0:\n      r = v;\n      g = t;\n      b = p;\n      break;\n    case 1:\n      r = q;\n      g = v;\n      b = p;\n      break;\n    case 2:\n      r = p;\n      g = v;\n      b = t;\n      break;\n    case 3:\n      r = p;\n      g = q;\n      b = v;\n      break;\n    case 4:\n      r = t;\n      g = p;\n      b = v;\n      break;\n    case 5:\n      r = v;\n      g = p;\n      b = q;\n      break;\n  }\n\n  return [\n    Math.round(r * 255),\n    Math.round(g * 255),\n    Math.round(b * 255),\n  ];\n}\n\nexport async function getAverageColor(url: string): Promise<[number, number, number]> {\n  // Only visit every 5 pixels\n  const blockSize = 5;\n  const defaultRGB: [number, number, number] = [0, 0, 0];\n  let data;\n  let width;\n  let height;\n  let i = -4;\n  let length;\n  let rgb: [number, number, number] = [0, 0, 0];\n  let count = 0;\n\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext && canvas.getContext('2d');\n  if (!context) {\n    return defaultRGB;\n  }\n\n  const image = await preloadImage(url);\n  height = image.naturalHeight || image.offsetHeight || image.height;\n  width = image.naturalWidth || image.offsetWidth || image.width;\n  canvas.height = height;\n  canvas.width = width;\n\n  context.drawImage(image, 0, 0);\n\n  try {\n    data = context.getImageData(0, 0, width, height);\n  } catch (e) {\n    return defaultRGB;\n  }\n\n  length = data.data.length;\n\n  // eslint-disable-next-line no-cond-assign\n  while ((i += blockSize * 4) < length) {\n    ++count;\n    rgb[0] += data.data[i];\n    rgb[1] += data.data[i + 1];\n    rgb[2] += data.data[i + 2];\n  }\n\n  rgb[0] = Math.floor(rgb[0] / count);\n  rgb[1] = Math.floor(rgb[1] / count);\n  rgb[2] = Math.floor(rgb[2] / count);\n\n  return rgb;\n}\n\n// eslint-disable-next-line max-len\n// Function was adapted from https://github.com/telegramdesktop/tdesktop/blob/35ff621b5b52f7e3553fb0f990ea13ade7101b8e/Telegram/SourceFiles/data/data_wall_paper.cpp#L518\nexport function getPatternColor(rgbColor: [number, number, number]) {\n  let [hue, saturation, value] = rgb2hsb(rgbColor);\n\n  saturation = Math.min(1, saturation + 0.05 + 0.1 * (1 - saturation));\n  value = value > 0.5\n    ? Math.max(0, value * 0.65)\n    : Math.max(0, Math.min(1, 1 - value * 0.65));\n\n  return `hsla(${hue * 360}, ${saturation * 100}%, ${value * 100}%, .4)`;\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport { ApiWallpaper } from '../../../api/types';\nimport { ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(\n    document.thumbnail && document.thumbnail.dataUri,\n    Boolean(previewBlobUrl),\n    true,\n  );\n  const {\n    shouldRenderThumb, shouldRenderFullMedia, transitionClassNames,\n  } = useTransitionForMedia(previewBlobUrl || localBlobUrl, 'slow');\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, downloadProgress,\n  } = useMediaWithDownloadProgress(localMediaHash, !isDownloadAllowed);\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isDownloadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasDownloadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        {shouldRenderThumb && (\n          <canvas\n            ref={thumbRef}\n            className=\"thumbnail\"\n          />\n        )}\n        {shouldRenderFullMedia && (\n          <img\n            src={previewBlobUrl || localBlobUrl}\n            className={`full-media ${transitionClassNames}`}\n            alt=\"\"\n          />\n        )}\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={downloadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import React, {\n  FC, memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadWallpapers' | 'uploadWallpaper' | 'setThemeSettings'\n)>;\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps & DispatchProps> = ({\n  onScreenSelect,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n  loadWallpapers,\n  uploadWallpaper,\n  setThemeSettings,\n}) => {\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      uploadWallpaper(files[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper && currentWallpaper.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  const isUploading = loadedWallpapers && loadedWallpapers[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadWallpapers', 'uploadWallpaper', 'setThemeSettings',\n  ]),\n)(SettingsGeneralBackground));\n","import { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport { captureEvents, RealTouchEvent } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../modules/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setThemeSettings'>;\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps & DispatchProps> = ({\n  theme,\n  backgroundColor,\n  setThemeSettings,\n}) => {\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            // @ts-ignore\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            // @ts-ignore\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            // @ts-ignore\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setThemeSettings']),\n)(SettingsGeneralBackground));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadNotificationSettings' | 'updateContactSignUpNotification' | 'updateNotificationSettings'\n)>;\n\nconst SettingsNotifications: FC<StateProps & DispatchProps> = ({\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  loadNotificationSettings,\n  updateContactSignUpNotification,\n  updateNotificationSettings,\n}) => {\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'contact', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'contact', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'group', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'group', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'broadcast', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'broadcast', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  return {\n    hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n    hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n    hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n    hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n    hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n    hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n    hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n  };\n},\n(setGlobal, actions): DispatchProps => pick(actions, [\n  'loadNotificationSettings',\n  'updateContactSignUpNotification',\n  'updateNotificationSettings',\n]))(SettingsNotifications));\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { PrivacyVisibility, SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  hasPassword?: boolean;\n  blockedCount: number;\n  sessionsCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  visibilityPrivacyPhoneNumber?: PrivacyVisibility;\n  visibilityPrivacyLastSeen?: PrivacyVisibility;\n  visibilityPrivacyProfilePhoto?: PrivacyVisibility;\n  visibilityPrivacyForwarding?: PrivacyVisibility;\n  visibilityPrivacyGroupChats?: PrivacyVisibility;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadBlockedContacts' | 'loadAuthorizations' | 'loadPrivacySettings' | 'loadContentSettings' | 'updateContentSettings'\n)>;\n\nconst SettingsPrivacy: FC<OwnProps & StateProps & DispatchProps> = ({\n  onScreenSelect,\n  hasPassword,\n  blockedCount,\n  sessionsCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  visibilityPrivacyPhoneNumber,\n  visibilityPrivacyLastSeen,\n  visibilityPrivacyProfilePhoto,\n  visibilityPrivacyForwarding,\n  visibilityPrivacyGroupChats,\n  loadPrivacySettings,\n  loadBlockedContacts,\n  loadAuthorizations,\n  loadContentSettings,\n  updateContentSettings,\n}) => {\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings]);\n\n  const lang = useLang();\n\n  function getVisibilityValue(visibility?: PrivacyVisibility) {\n    switch (visibility) {\n      case 'everybody':\n        return lang('P2PEverybody');\n\n      case 'contacts':\n        return lang('P2PContacts');\n\n      case 'nobody':\n        return lang('P2PNobody');\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('BlockedUsers')}</span>\n            {blockedCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang('Users', blockedCount)}\n              </span>\n            )}\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyActiveSessions)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('SessionsTitle')}</span>\n            {sessionsCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {sessionsCount === 1 ? '1 session' : `${sessionsCount} sessions`}\n              </span>\n            )}\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_settings_sensitive_title')}\n        </h4>\n        <Checkbox\n          label={lang('lng_settings_sensitive_disable_filtering')}\n          subLabel={lang('lng_settings_sensitive_about')}\n          checked={Boolean(isSensitiveEnabled)}\n          disabled={!canChangeSensitive}\n          onCheck={updateContentSettings}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: { hasPassword, isSensitiveEnabled, canChangeSensitive },\n        privacy,\n      },\n      blocked,\n      activeSessions,\n    } = global;\n\n    return {\n      hasPassword,\n      blockedCount: blocked.totalCount,\n      sessionsCount: activeSessions.length,\n      isSensitiveEnabled,\n      canChangeSensitive,\n      visibilityPrivacyPhoneNumber: privacy.phoneNumber && privacy.phoneNumber.visibility,\n      visibilityPrivacyLastSeen: privacy.lastSeen && privacy.lastSeen.visibility,\n      visibilityPrivacyProfilePhoto: privacy.profilePhoto && privacy.profilePhoto.visibility,\n      visibilityPrivacyForwarding: privacy.forwards && privacy.forwards.visibility,\n      visibilityPrivacyGroupChats: privacy.chatInvite && privacy.chatInvite.visibility,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadBlockedContacts', 'loadAuthorizations', 'loadPrivacySettings', 'loadContentSettings', 'updateContentSettings',\n  ]),\n)(SettingsPrivacy));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ISettings } from '../../../types';\nimport { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\nimport { pick } from '../../../util/iteratees';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport useFlag from '../../../hooks/useFlag';\n\ntype StateProps = Pick<ISettings, 'languages' | 'language'>;\n\ntype DispatchProps = Pick<GlobalActions, 'loadLanguages' | 'setSettingOption'>;\n\nconst SettingsLanguage: FC<StateProps & DispatchProps> = ({\n  languages,\n  language,\n  loadLanguages,\n  setSettingOption,\n}) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  // TODO Throttle\n  useEffect(() => {\n    loadLanguages();\n  }, [loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    setLanguage(langCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode });\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  return (\n    <div className=\"settings-content settings-item settings-language custom-scroll\">\n      {options ? (\n        <RadioGroup\n          name=\"keyboard-send-settings\"\n          options={options}\n          selected={selectedLanguage}\n          loadingOption={isLoading ? selectedLanguage : undefined}\n          onChange={handleChange}\n        />\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      languages: global.settings.byKey.languages,\n      language: global.settings.byKey.language,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadLanguages', 'setSettingOption',\n  ]),\n)(SettingsLanguage));\n","import { ApiPrivacyKey, SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n  }\n\n  return undefined;\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport { pick } from '../../../util/iteratees';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport { getPrivacyKey } from './helper/privacy';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = Partial<ApiPrivacySettings> & {\n  chatsById?: Record<number, ApiChat>;\n  usersById?: Record<number, ApiUser>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setPrivacyVisibility'>;\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps & DispatchProps> = ({\n  screen,\n  onScreenSelect,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n  setPrivacyVisibility,\n}) => {\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            onClick={() => { onScreenSelect(allowedContactsScreen); }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            onClick={() => { onScreenSelect(deniedContactsScreen); }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {};\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setPrivacyVisibility']),\n)(SettingsPrivacyVisibility));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiSession } from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype StateProps = {\n  activeSessions: ApiSession[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadAuthorizations' | 'terminateAuthorization' | 'terminateAllAuthorizations'\n)>;\n\nconst SettingsPrivacyActiveSessions: FC<StateProps & DispatchProps> = ({\n  activeSessions,\n  loadAuthorizations,\n  terminateAuthorization,\n  terminateAllAuthorizations,\n}) => {\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  useEffect(() => {\n    loadAuthorizations();\n  }, [loadAuthorizations]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const currentSession = useMemo(() => {\n    return activeSessions.find((session) => session.isCurrent);\n  }, [activeSessions]);\n\n  const otherSessions = useMemo(() => {\n    return activeSessions.filter((session) => !session.isCurrent);\n  }, [activeSessions]);\n\n  const lang = useLang();\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive>\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.appName}</span>\n            <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        <ListItem\n          className=\"destructive mb-0\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('TerminateAllSessions')}\n        </ListItem>\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessions: ApiSession[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>Other Sessions</h4>\n\n        {sessions.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(session: ApiSession) {\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.appName}</span>\n          <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n          <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {otherSessions && renderOtherSessions(otherSessions)}\n      {otherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text=\"Are you sure you want to terminate all other sessions?\"\n          confirmLabel=\"Terminate All Other Sessions\"\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nfunction getDeviceEnvironment(session: ApiSession) {\n  return `${session.deviceModel}${session.deviceModel ? ', ' : ''} ${session.platform} ${session.systemVersion}`;\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      activeSessions: global.activeSessions,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadAuthorizations', 'terminateAuthorization', 'terminateAllAuthorizations',\n  ]),\n)(SettingsPrivacyActiveSessions));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { pick } from '../../../util/iteratees';\nimport {\n  getChatTitle, getUserFullName, isChatPrivate,\n} from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\n\ntype StateProps = {\n  chatsByIds: Record<number, ApiChat>;\n  usersByIds: Record<number, ApiUser>;\n  blockedIds: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'unblockContact'>;\n\nconst SettingsPrivacyBlockedUsers: FC<StateProps & DispatchProps> = ({\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  unblockContact,\n}) => {\n  const handleUnblockClick = useCallback((contactId: number) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  const lang = useLang();\n\n  function renderContact(contactId: number, i: number, viewportOffset: number) {\n    const isPrivate = isChatPrivate(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item',\n      isPrivate ? 'private' : 'group',\n    );\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\" dir=\"auto\">\n          <h3 dir=\"auto\">{renderText((isPrivate ? getUserFullName(user) : getChatTitle(lang, chat!)) || '')}</h3>\n          {user && user.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(user.phoneNumber)}</div>\n          )}\n          {user && !user.phoneNumber && user.username && (\n            <div className=\"contact-username\" dir=\"auto\">@{user.username}</div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds && blockedIds.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">\n              List is empty\n            </div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={() => {\n        }}\n        className=\"not-implemented\"\n        ariaLabel=\"Add a blocked user\"\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['unblockContact']),\n)(SettingsPrivacyBlockedUsers));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps & StateProps> = ({ animatedEmoji, onScreenSelect }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <ListItem\n          icon=\"edit\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaEnabled));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../../lib/teact/teact';\n\nimport useLang from '../../../../hooks/useLang';\n\nimport PasswordMonkey from '../../../common/PasswordMonkey';\nimport PasswordForm from '../../../common/PasswordForm';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsTwoFaPassword: FC<OwnProps> = ({\n  error,\n  isLoading,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaPassword);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps & StateProps> = ({ animatedEmoji, onStart }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaStart));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = () => {\n    onSubmit();\n  };\n\n  const handleSkipConfirm = () => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  };\n\n  const lang = useLang();\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps & StateProps> = ({ animatedEmoji, onScreenSelect }) => {\n  const lang = useLang();\n\n  const handleClick = () => {\n    onScreenSelect(SettingsScreens.Privacy);\n  };\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🥳'),\n  };\n})(SettingsTwoFaCongratulations));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const lang = useLang();\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  };\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { pick } from '../../../../util/iteratees';\nimport { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from './SettingsTwoFaPassword';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\ntype DispatchProps = Pick<GlobalActions, (\n  'updatePassword' | 'updateRecoveryEmail' | 'clearPassword' | 'provideTwoFaEmailCode' |\n  'checkPassword' | 'clearTwoFaError'\n)>;\n\nconst SettingsTwoFa: FC<OwnProps & StateProps & DispatchProps> = ({\n  currentScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  onScreenSelect,\n  updatePassword,\n  checkPassword,\n  clearTwoFaError,\n  updateRecoveryEmail,\n  provideTwoFaEmailCode,\n  clearPassword,\n}) => {\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('EnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'updatePassword', 'updateRecoveryEmail', 'clearPassword', 'provideTwoFaEmailCode',\n    'checkPassword', 'clearTwoFaError',\n  ]),\n)(SettingsTwoFa));\n","import React, {\n  FC, useCallback, useRef, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport { isChatPrivate } from '../../modules/helpers';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport GroupChatInfo from './GroupChatInfo';\nimport PickerSelectedItem from './PickerSelectedItem';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Loading from '../ui/Loading';\n\nimport './Picker.scss';\n\ntype OwnProps = {\n  itemIds: number[];\n  selectedIds: number[];\n  filterValue?: string;\n  filterPlaceholder?: string;\n  notFoundText?: string;\n  searchInputId?: string;\n  isLoading?: boolean;\n  onSelectedIdsChange: (ids: number[]) => void;\n  onFilterChange: (value: string) => void;\n  onLoadMore?: () => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\nconst Picker: FC<OwnProps> = ({\n  itemIds,\n  selectedIds,\n  filterValue,\n  filterPlaceholder,\n  notFoundText,\n  searchInputId,\n  isLoading,\n  onSelectedIdsChange,\n  onFilterChange,\n  onLoadMore,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const shouldMinimize = selectedIds.length > MAX_FULL_ITEMS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: number) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n    onFilterChange('');\n  }, [selectedIds, onSelectedIdsChange, onFilterChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(onLoadMore, itemIds, Boolean(filterValue));\n\n  const lang = useLang();\n\n  return (\n    <div className=\"Picker\">\n      <div className=\"picker-header custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        <InputText\n          id={searchInputId}\n          ref={inputRef}\n          value={filterValue}\n          onChange={handleFilterChange}\n          placeholder={filterPlaceholder || lang('SelectChat')}\n        />\n      </div>\n\n      {viewportIds && viewportIds.length ? (\n        <InfiniteScroll\n          className=\"picker-list custom-scroll\"\n          items={viewportIds}\n          onLoadMore={getMore}\n        >\n          {viewportIds.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={() => handleItemClick(id)}\n              ripple\n            >\n              <Checkbox label=\"\" checked={selectedIds.includes(id)} />\n              {isChatPrivate(id) ? (\n                <PrivateChatInfo userId={id} />\n              ) : (\n                <GroupChatInfo chatId={id} />\n              )}\n            </ListItem>\n          ))}\n        </InfiniteScroll>\n      ) : !isLoading && viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\">{notFoundText || 'Sorry, nothing found.'}</p>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(Picker);\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport { pick } from '../../../util/iteratees';\nimport searchWords from '../../../util/searchWords';\nimport { getPrivacyKey } from './helper/privacy';\nimport {\n  getChatTitle, isChatGroup, isChatPrivate, prepareChatList,\n} from '../../../modules/helpers';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  chatsById: Record<number, ApiChat>;\n  listIds?: number[];\n  orderedPinnedIds?: number[];\n  archivedListIds?: number[];\n  archivedPinnedIds?: number[];\n  settings?: ApiPrivacySettings;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setPrivacySettings'>;\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps & DispatchProps> = ({\n  currentUserId,\n  isAllowList,\n  screen,\n  settings,\n  chatsById,\n  listIds,\n  orderedPinnedIds,\n  archivedListIds,\n  archivedPinnedIds,\n  setPrivacySettings,\n  onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<number[]>(selectedContactIds);\n\n  const chats = useMemo(() => {\n    const activeChatArrays = listIds\n      ? prepareChatList(chatsById, listIds, orderedPinnedIds, 'all')\n      : undefined;\n    const archivedChatArrays = archivedListIds\n      ? prepareChatList(chatsById, archivedListIds, archivedPinnedIds, 'archived')\n      : undefined;\n\n    if (!activeChatArrays && !archivedChatArrays) {\n      return undefined;\n    }\n\n    return [\n      ...(activeChatArrays\n        ? [\n          ...activeChatArrays.pinnedChats,\n          ...activeChatArrays.otherChats,\n        ]\n        : []\n      ),\n      ...(archivedChatArrays ? archivedChatArrays.otherChats : []),\n    ];\n  }, [chatsById, listIds, orderedPinnedIds, archivedListIds, archivedPinnedIds]);\n\n  const displayedIds = useMemo(() => {\n    if (!chats) {\n      return undefined;\n    }\n\n    return chats\n      .filter((chat) => (\n        ((isChatPrivate(chat.id) && chat.id !== currentUserId) || isChatGroup(chat))\n        && (\n          !searchQuery\n        || searchWords(getChatTitle(lang, chat), searchQuery)\n        || selectedContactIds.includes(chat.id)\n        )\n      ))\n      .map(({ id }) => id);\n  }, [chats, currentUserId, lang, searchQuery, selectedContactIds]);\n\n  const handleSelectedContactIdsChange = useCallback((value: number[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen),\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysShareWithPlaceholder') : lang('NeverShareWithPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysShareWithTitle') : lang('NeverShareWithTitle')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      currentUserId,\n      chatsById,\n      listIds: listIds.active,\n      orderedPinnedIds: orderedPinnedIds.active,\n      archivedPinnedIds: orderedPinnedIds.archived,\n      archivedListIds: listIds.archived,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setPrivacySettings']),\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport useFoldersReducer from '../../../hooks/reducers/useFoldersReducer';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsPrivacyActiveSessions from './SettingsPrivacyActiveSessions';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  currentScreen,\n  onScreenSelect,\n  onReset,\n}) => {\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent() {\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.PrivacyActiveSessions:\n        return (\n          <SettingsPrivacyActiveSessions />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility screen={currentScreen} onScreenSelect={onScreenSelect} />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersExcludedChats:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            onScreenSelect={onScreenSelect}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection() {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent()}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={IS_SINGLE_COLUMN_LAYOUT ? 'slide-layers' : 'push-slide'}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import React, {\n  FC, useEffect, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { pick } from '../../../util/iteratees';\nimport { getUserFullName, sortUserIds } from '../../../modules/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  filter: string;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  contactIds?: number[];\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'openChat'>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ContactList: FC<OwnProps & StateProps & DispatchProps> = ({\n  filter, usersById, contactIds, loadContactList, openChat, serverTimeOffset,\n}) => {\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  const handleClick = useCallback(\n    (id: number) => {\n      openChat({ id });\n    },\n    [openChat],\n  );\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const resultIds = filter ? contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, filter);\n    }) : contactIds;\n\n    return sortUserIds(resultIds, usersById, undefined, serverTimeOffset);\n  }, [contactIds, filter, usersById, serverTimeOffset]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds && viewportIds.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            onClick={() => handleClick(id)}\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n\n    return {\n      usersById,\n      contactIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'openChat']),\n)(ContactList));\n","import React, {\n  FC, useCallback, useEffect, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport { pick, unique } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { getUserFullName, sortChatIds } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  selectedMemberIds: number[];\n  onSelectedMemberIdsChange: (ids: number[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  usersById: Record<number, ApiUser>;\n  chatsById: Record<number, ApiChat>;\n  localContactIds?: number[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: number[];\n  globalUserIds?: number[];\n  serverTimeOffset?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'setGlobalSearchQuery'>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst NewChatStep1: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  currentUserId,\n  usersById,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  serverTimeOffset,\n  loadContactList,\n  setGlobalSearchQuery,\n}) => {\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = localContactIds\n      ? sortChatIds(localContactIds.filter((id) => id !== currentUserId), chatsById,\n        undefined, undefined, serverTimeOffset)\n      : [];\n\n    if (!searchQuery) {\n      return contactIds;\n    }\n\n    const foundContactIds = contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, searchQuery);\n    });\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]),\n      chatsById,\n      false,\n      selectedMemberIds,\n      serverTimeOffset,\n    );\n  }, [\n    localContactIds, chatsById, serverTimeOffset, searchQuery, localUserIds, globalUserIds, selectedMemberIds,\n    currentUserId, usersById,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, serverTimeOffset } = global;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = global.globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      currentUserId,\n      usersById,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus && fetchingStatus.chats,\n      globalUserIds,\n      localUserIds,\n      serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'setGlobalSearchQuery']),\n)(NewChatStep1));\n","import React, {\n  FC, useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ChatCreationProgress } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  memberIds: number[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'createGroupChat' | 'createChannel'>;\n\n// TODO @implement\nconst MAX_USERS_FOR_LEGACY_CHAT = 199; // Accounting for current user\n\nconst NewChatStep2: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  memberIds,\n  onReset,\n  creationProgress,\n  creationError,\n  createGroupChat,\n  createChannel,\n}) => {\n  const lang = useLang();\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (memberIds.length > MAX_USERS_FOR_LEGACY_CHAT) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, createGroupChat, photo, chatTitleEmptyError, chatTooManyUsersError]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = creationError || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = global.chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'createGroupChat', 'createChannel',\n  ]),\n)(NewChatStep2));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<number[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={IS_SINGLE_COLUMN_LAYOUT ? 'slide-layers' : 'push-slide'}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {() => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({ isActive, onReset }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('ArchivedChats')}</h3>\n      </div>\n      <ChatList folderType=\"archived\" noChatsText=\"Archive is empty.\" isActive={isActive} />\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","const IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nconst preventDefault = (e: Event) => {\n  e.preventDefault();\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key]) {\n    preventDefault(e);\n  }\n}\n\nexport function disableScrolling() {\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  window.ontouchmove = preventDefault; // mobile\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  // eslint-disable-next-line no-null/no-null\n  window.ontouchmove = null;\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import { ApiMediaFormat, ApiMessage } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport { getMessageMediaHash, getMessagePhoto, getMessageText } from '../../../../modules/helpers';\nimport { CLIPBOARD_ITEM_SUPPORTED, copyImageToClipboard, copyTextToClipboard } from '../../../../util/clipboard';\n\ntype ICopyOptions = {\n  label: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage, afterEffect?: () => void, onCopyLink?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message);\n  const mediaHash = getMessageMediaHash(message, 'inline')!;\n  const canImageBeCopied = photo && mediaHash && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      handler: () => {\n        mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl).then(copyImageToClipboard);\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection\n      && selection.anchorNode\n      && selection.anchorNode.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection, canImageBeCopied),\n      handler: () => {\n        const clipboardText = hasSelection && selection ? selection.toString() : text;\n        copyTextToClipboard(clipboardText);\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      handler: () => {\n        onCopyLink();\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean, canImageBeCopied: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n\n  if (canImageBeCopied) {\n    return 'lng_context_copy_text';\n  }\n\n  return 'Copy';\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  onReply: () => void;\n  onEdit: () => void;\n  onPin: () => void;\n  onUnpin: () => void;\n  onForward: () => void;\n  onDelete: () => void;\n  onFaveSticker: () => void;\n  onUnfaveSticker: () => void;\n  onSelect: () => void;\n  onSend: () => void;\n  onReschedule: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  isOpen,\n  message,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canEdit,\n  canPin,\n  canUnpin,\n  canDelete,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  onReply,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n}) => {\n  const copyOptions = getMessageCopyOptions(message, onClose, canCopyLink ? onCopyLink : undefined);\n\n  const getTriggerElement = useCallback(() => {\n    return document.querySelector(`.active > .MessageList div[data-message-id=\"${message.id}\"]`);\n  }, [message.id]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const { positionX, positionY, style } = useContextMenuPosition(\n    anchor,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    SCROLLBAR_WIDTH,\n    (document.querySelector('.MiddleHeader') as HTMLElement).offsetHeight,\n  );\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      className=\"MessageContextMenu fluid\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n      {canReschedule && (\n        <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n      )}\n      {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n      {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n      {canFaveSticker && (\n        <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n      )}\n      {canUnfaveSticker && (\n        <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n      )}\n      {canCopy && copyOptions.map((options) => (\n        <MenuItem key={options.label} icon=\"copy\" onClick={options.handler}>{lang(options.label)}</MenuItem>\n      ))}\n      {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n      {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n      {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n      {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n      {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n    </Menu>\n  );\n};\n\nexport default MessageContextMenu;\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum, IAnchorPosition } from '../../../types';\nimport { selectAllowedMessageActions, selectCurrentMessageList } from '../../../modules/selectors';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { pick } from '../../../util/iteratees';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport CalendarModal from '../../common/CalendarModal';\nimport { getDayStartAt } from '../../../util/dateFormat';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setReplyingToId' | 'setEditingId' | 'pinMessage' | 'openForwardMenu' |\n  'faveSticker' | 'unfaveSticker' | 'toggleMessageSelection' | 'sendScheduledMessages' | 'rescheduleMessage' |\n  'loadMessageLink'\n)>;\n\nconst ContextMenuContainer: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  messageListType,\n  message,\n  album,\n  anchor,\n  onClose,\n  onCloseAnimationEnd,\n  noOptions,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canPin,\n  canUnpin,\n  canDelete,\n  canEdit,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  setReplyingToId,\n  setEditingId,\n  pinMessage,\n  openForwardMenu,\n  faveSticker,\n  unfaveSticker,\n  toggleMessageSelection,\n  sendScheduledMessages,\n  rescheduleMessage,\n  loadMessageLink,\n}) => {\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    onClose();\n  }, [closeCalendar, onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album && album.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    openCalendar();\n  }, [openCalendar]);\n\n  const handleRescheduleMessage = useCallback((date: Date) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt: Math.round(date.getTime() / 1000),\n    });\n  }, [message.chatId, message.id, rescheduleMessage]);\n\n  const handleCopyLink = useCallback(() => {\n    loadMessageLink({\n      messageId: message.id,\n      chatId: message.chatId,\n    });\n    closeMenu();\n  }, [closeMenu, loadMessageLink, message.chatId, message.id]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={['ContextMenuContainer', transitionClassNames].join(' ')}>\n      <MessageContextMenu\n        message={message}\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canPin={canPin}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={message.date * 1000}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        onClose={handleCloseCalendar}\n        onSubmit={handleRescheduleMessage}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n\n    return {\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canEdit: !isPinned && canEdit,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy,\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setReplyingToId',\n    'setEditingId',\n    'pinMessage',\n    'openForwardMenu',\n    'faveSticker',\n    'unfaveSticker',\n    'toggleMessageSelection',\n    'sendScheduledMessages',\n    'rescheduleMessage',\n    'loadMessageLink',\n  ]),\n)(ContextMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiSticker, ApiStickerSet } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport { STICKER_SIZE_MODAL } from '../../config';\nimport { pick } from '../../util/iteratees';\nimport { selectStickerSet } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker: ApiSticker;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  stickerSet?: ApiStickerSet;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadStickers' | 'toggleStickerSet' | 'sendMessage'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSet,\n  onClose,\n  loadStickers,\n  toggleStickerSet,\n  sendMessage,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen) {\n      const { stickerSetId, stickerSetAccessHash } = fromSticker;\n      loadStickers({ stickerSetId, stickerSetAccessHash });\n    }\n  }, [isOpen, fromSticker, loadStickers]);\n\n  const handleSelect = useCallback((sticker: ApiSticker) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    sendMessage({ sticker });\n    onClose();\n  }, [onClose, sendMessage]);\n\n  const handleButtonClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId: fromSticker.stickerSetId });\n    onClose();\n  }, [fromSticker.stickerSetId, onClose, toggleStickerSet]);\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={stickerSet ? stickerSet.title : lang('AccDescrStickerSet')}\n    >\n      {stickerSet && stickerSet.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            {stickerSet.stickers.map((sticker) => (\n              <StickerButton\n                sticker={sticker}\n                size={STICKER_SIZE_MODAL}\n                observeIntersection={observeIntersection}\n                onClick={handleSelect}\n                clickArg={sticker}\n              />\n            ))}\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={stickerSet.installedDate ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {lang(\n                stickerSet.installedDate ? 'StickerPack.RemoveStickerCount' : 'StickerPack.AddStickerCount',\n                stickerSet.count,\n                'i',\n              )}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal(\n  (global, { fromSticker }: OwnProps) => {\n    return { stickerSet: selectStickerSet(global, fromSticker.stickerSetId) };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadStickers',\n    'toggleStickerSet',\n    'sendMessage',\n  ]),\n)(StickerSetModal));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport { selectChat, selectNotifySettings, selectNotifyExceptions } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { isChatPrivate, getCanDeleteChat, selectIsChatMuted } from '../../modules/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport DeleteChatModal from '../common/DeleteChatModal';\n\nimport './HeaderMenuContainer.scss';\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatMutedState' | 'enterMessageSelectMode'>;\n\nexport type OwnProps = {\n  chatId: number;\n  threadId: number;\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canMute?: boolean;\n  canSelect?: boolean;\n  canLeave?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  canDeleteChat?: boolean;\n};\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  isOpen,\n  anchor,\n  isChannel,\n  canSubscribe,\n  canSearch,\n  canMute,\n  canSelect,\n  canLeave,\n  chat,\n  isPrivate,\n  isMuted,\n  canDeleteChat,\n  onSubscribeChannel,\n  onSearchClick,\n  onClose,\n  onCloseAnimationEnd,\n  updateChatMutedState,\n  enterMessageSelectMode,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {IS_SINGLE_COLUMN_LAYOUT && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'Subscribe' : 'Join Group')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {canSelect && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {lang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={handleDelete}\n            >\n              {lang(isPrivate\n                ? 'Delete'\n                : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n            </MenuItem>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate: isChatPrivate(chat.id),\n      canDeleteChat: getCanDeleteChat(chat),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'updateChatMutedState',\n    'enterMessageSelectMode',\n  ]),\n)(HeaderMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChat } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport { debounce } from '../../util/schedulers';\nimport { selectCurrentTextSearch, selectCurrentChat } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalTextSearchQuery' | 'searchTextMessagesLocal' | 'closeLocalTextSearch' | 'openHistoryCalendar' |\n  'focusMessage'\n)>;\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps & DispatchProps> = ({\n  isActive,\n  chat,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n  setLocalTextSearchQuery,\n  searchTextMessagesLocal,\n  focusMessage,\n  closeLocalTextSearch,\n  openHistoryCalendar,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat && foundIds && foundIds.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1] });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat, focusMessage, foundIds]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1 - newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1 - newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={closeLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds && foundIds.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalTextSearchQuery',\n    'searchTextMessagesLocal',\n    'focusMessage',\n    'closeLocalTextSearch',\n    'openHistoryCalendar',\n  ]),\n)(MobileSearchFooter));\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement>,\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import React, {\n  FC, useCallback, useEffect, useState, useRef, memo,\n} from '../../../lib/teact/teact';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport { ApiChatMember, ApiUser } from '../../../api/types';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport captureKeyboardListeners from '../../../util/captureKeyboardListeners';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport cycleRestrict from '../../../util/cycleRestrict';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.chat-item-clickable',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  filter: string;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredChatMembers?: ApiChatMember[];\n  usersById?: Record<number, ApiUser>;\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  filter,\n  onClose,\n  onInsertUserName,\n  usersById,\n  filteredChatMembers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!filteredChatMembers) {\n      return -1;\n    }\n    const membersCount = filteredChatMembers!.length;\n    return cycleRestrict(membersCount, newIndex);\n  }, [filteredChatMembers]);\n\n  const [selectedMentionIndex, setSelectedMentionIndex] = useState(-1);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedMentionIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedMentionIndex, getSelectedIndex]);\n\n  const handleUserSelect = useCallback((userId: number, forceFocus = false) => {\n    const user = usersById && usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [usersById, onInsertUserName]);\n\n  const handleSelectMention = useCallback((e: KeyboardEvent) => {\n    if (filteredChatMembers && filteredChatMembers.length && selectedMentionIndex > -1) {\n      const member = filteredChatMembers[selectedMentionIndex];\n      if (member) {\n        e.preventDefault();\n        handleUserSelect(member.userId, true);\n      }\n    }\n  }, [filteredChatMembers, selectedMentionIndex, handleUserSelect]);\n\n  useEffect(() => (isOpen ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: (e: KeyboardEvent) => handleArrowKey(1, e),\n    onEnter: handleSelectMention,\n    onTab: handleSelectMention,\n  }) : undefined), [isOpen, onClose, handleArrowKey, handleSelectMention]);\n\n  useEffect(() => {\n    if (filteredChatMembers && !filteredChatMembers.length) {\n      onClose();\n    }\n  }, [filteredChatMembers, onClose]);\n\n  useEffect(() => {\n    setSelectedMentionIndex(0);\n  }, [filter]);\n\n  useEffect(() => {\n    setItemVisible(selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  const prevChatMembers = usePrevious(\n    filteredChatMembers && filteredChatMembers.length\n      ? filteredChatMembers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredChatMembers && !filteredChatMembers.length\n    ? prevChatMembers\n    : filteredChatMembers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers && renderedChatMembers.map(({ userId }, index) => (\n        <ListItem\n          key={userId}\n          className=\"chat-item-clickable scroll-item\"\n          onClick={() => handleUserSelect(userId)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={userId}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAttachment, ApiChatMember, ApiUser } from '../../../api/types';\nimport { LangCode } from '../../../types';\n\nimport { CONTENT_TYPES_FOR_QUICK_UPLOAD, EDITABLE_INPUT_MODAL_ID } from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport File from '../../common/File';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\n\nimport './AttachmentModal.scss';\n\nexport type OwnProps = {\n  attachments: ApiAttachment[];\n  caption: string;\n  canSuggestMembers?: boolean;\n  canSuggestEmoji?: boolean;\n  currentUserId?: number;\n  groupChatMembers?: ApiChatMember[];\n  usersById?: Record<number, ApiUser>;\n  recentEmojis: string[];\n  language: LangCode;\n  emojiKeywords?: Record<string, string[]>;\n  addRecentEmoji: AnyToVoidFunction;\n  loadEmojiKeywords: AnyToVoidFunction;\n  onCaptionUpdate: (html: string) => void;\n  onSend: () => void;\n  onFileAppend: (files: File[], isQuick: boolean) => void;\n  onClear: () => void;\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\n\nconst AttachmentModal: FC<OwnProps> = ({\n  attachments,\n  caption,\n  canSuggestMembers,\n  groupChatMembers,\n  currentUserId,\n  usersById,\n  recentEmojis,\n  language,\n  emojiKeywords,\n  onCaptionUpdate,\n  addRecentEmoji,\n  loadEmojiKeywords,\n  onSend,\n  onFileAppend,\n  onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const hideTimeoutRef = useRef<number>(null);\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const isOpen = Boolean(attachments.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n  const isQuick = renderingAttachments && renderingAttachments.every((a) => a.quick);\n  const lang = useLang();\n\n  const {\n    isMentionTooltipOpen, mentionFilter,\n    closeMentionTooltip, insertMention,\n    mentionFilteredMembers,\n  } = useMentionTooltip(\n    canSuggestMembers && isOpen,\n    caption,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    groupChatMembers,\n    currentUserId,\n    usersById,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    isOpen,\n    caption,\n    recentEmojis,\n    EDITABLE_INPUT_MODAL_ID,\n    onCaptionUpdate,\n    emojiKeywords,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  const sendAttachments = useCallback(() => {\n    if (isOpen) {\n      onSend();\n    }\n  }, [isOpen, onSend]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches('.drop-target') && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest('.AttachmentModal.hovered')) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer: { files } } = e;\n\n    if (files && files.length) {\n      const newFiles = isQuick\n        ? Array.from(files).filter((file) => {\n          return file.type && CONTENT_TYPES_FOR_QUICK_UPLOAD.includes(file.type);\n        })\n        : Array.from(files);\n\n      onFileAppend(newFiles, false);\n    }\n  }, [isQuick, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n    }\n  }\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const areAllPhotos = renderingAttachments.every((a) => a.mimeType.startsWith('image/'));\n  const areAllVideos = renderingAttachments.every((a) => a.mimeType.startsWith('video/'));\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={sendAttachments}\n        >\n          {lang('Send')}\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={`AttachmentModal ${isHovered ? 'hovered' : ''}`}\n    >\n      <div\n        className=\"drop-target\"\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n      >\n        {isQuick ? (\n          <div className=\"media-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              attachment.mimeType.startsWith('image/')\n                ? <img src={attachment.blobUrl} alt=\"\" />\n                : <video src={attachment.blobUrl} autoPlay muted loop />\n            ))}\n          </div>\n        ) : (\n          <div className=\"document-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              <File\n                name={attachment.filename}\n                extension={getFileExtension(attachment.filename, attachment.mimeType)}\n                previewData={attachment.previewBlobUrl}\n                size={attachment.size}\n                smaller\n              />\n            ))}\n          </div>\n        )}\n\n        <div className=\"attachment-caption-wrapper\">\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            onClose={closeMentionTooltip}\n            filter={mentionFilter}\n            onInsertUserName={insertMention}\n            filteredChatMembers={mentionFilteredMembers}\n            usersById={usersById}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            language={language}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n            loadEmojiKeywords={loadEmojiKeywords}\n          />\n          <MessageInput\n            id=\"caption-input-text\"\n            html={caption}\n            editableInputId={EDITABLE_INPUT_MODAL_ID}\n            placeholder={lang('Caption')}\n            onUpdate={onCaptionUpdate}\n            onSend={onSend}\n            shouldSetFocus={isOpen}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AttachmentModal);\n","import { ChangeEvent, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({ isOpen, onSend, onClear }) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(false);\n  const [solution, setSolution] = useState<string>();\n  const [correctOption, setCorrectOption] = useState<string>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(false);\n      setSolution('');\n      setCorrectOption('');\n      setHasErrors(false);\n    }\n  }, [isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(String(index) === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [correctOption],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(newValue);\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)]) && (\n      <p className=\"error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={(e) => setQuestion(e.currentTarget.value)}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        <Checkbox\n          label={lang('PollAnonymous')}\n          checked={isAnonymous}\n          onChange={handleIsAnonymousChange}\n        />\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\n\nconst MENU_CLOSE_TIMEOUT = 250;\nlet closeTimeout: number | undefined;\n\nexport default function useMouseInside(\n  isOpen: boolean, onClose: NoneToVoidFunction, menuCloseTimeout = MENU_CLOSE_TIMEOUT, isDisabled = false,\n) {\n  const isMouseInside = useRef(false);\n\n  useEffect(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    if (isOpen && !IS_TOUCH_ENV && !isDisabled) {\n      closeTimeout = window.setTimeout(() => {\n        if (!isMouseInside.current) {\n          onClose();\n        }\n      }, menuCloseTimeout * 2);\n    }\n  }, [isDisabled, isOpen, menuCloseTimeout, onClose]);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n  }, []);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        onClose();\n      }\n    }, menuCloseTimeout);\n  }, [menuCloseTimeout, onClose]);\n\n  return [handleMouseEnter, handleMouseLeave];\n}\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({ emoji, focus, onClick }) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  return (\n    <div\n      className={`EmojiButton ${focus ? 'focus' : ''}`}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : <img src={`./img-apple-64/${emoji.image}.png`} alt=\"\" loading=\"lazy\" />}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 9;\nconst EMOJI_MARGIN = 4;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const { transitionClassNames } = useShowTransition(shouldRender, undefined, undefined, 'slow');\n\n  const lang = useLang();\n\n  const emojisPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\" dir=\"auto\">\n        {lang(category.id === 'recent' ? 'RecentStickers' : `Emoji${index}`)}\n      </p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        // @ts-ignore\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { MENU_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n  uncompressEmoji,\n} from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className, onEmojiSelect, recentEmojis,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  useHorizontalScroll(headerRef.current, !IS_SINGLE_COLUMN_LAYOUT);\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis && recentEmojis.length) {\n      themeCategories.unshift({\n        id: 'recent',\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = document.getElementById(`emoji-category-${index}`)!;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!emojis || !canRenderContents) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div ref={containerRef} className=\"EmojiPicker-main no-selection no-scrollbar\">\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json') as unknown as Promise<EmojiModule>;\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport windowSize from '../../../util/windowSize';\nimport StickerButton from '../../common/StickerButton';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n  onStickerUnfave: (sticker: ApiSticker) => void;\n};\n\nconst STICKERS_PER_ROW_ON_DESKTOP = 5;\nconst STICKER_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 16;\nconst MOBILE_CONTAINER_PADDING = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  observeIntersection,\n  shouldRender,\n  onStickerSelect,\n  onStickerUnfave,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const { transitionClassNames } = useShowTransition(shouldRender, undefined, undefined, 'slow');\n\n  const stickersPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (STICKER_SIZE_PICKER + STICKER_MARGIN))\n    : STICKERS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(stickerSet.count / stickersPerRow) * (STICKER_SIZE_PICKER + STICKER_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`sticker-set-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\">{stickerSet.title}</p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        // @ts-ignore\n        style={`height: ${height}px;`}\n      >\n        {shouldRender && stickerSet.stickers && stickerSet.stickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            noAnimate={!loadAndPlay}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n            onUnfaveClick={stickerSet.id === 'favorite' ? onStickerUnfave : undefined}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiStickerSet, ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION, STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport StickerSetCoverAnimated from './StickerSetCoverAnimated';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  shouldPlay?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadStickerSets' | 'loadRecentStickers' | 'loadFavoriteStickers' |\n  'addRecentSticker' | 'loadAddedStickers' | 'unfaveSticker'\n)>;\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  addedSetIds,\n  stickerSetsById,\n  shouldPlay,\n  onStickerSelect,\n  loadStickerSets,\n  loadRecentStickers,\n  loadFavoriteStickers,\n  loadAddedStickers,\n  addRecentSticker,\n  unfaveSticker,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return [\n      {\n        id: 'recent',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      },\n      {\n        id: 'favorite',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      },\n      ...addedSetIds.map((id) => stickerSetsById[id]).filter(Boolean),\n    ];\n  }, [addedSetIds, lang, recentStickers, favoriteStickers, stickerSetsById]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers && set.stickers.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadStickerSets();\n      loadRecentStickers();\n      loadFavoriteStickers();\n    }\n  }, [loadAndPlay, loadFavoriteStickers, loadRecentStickers, loadStickerSets]);\n\n  useEffect(() => {\n    if (addedSetIds && addedSetIds.length) {\n      loadAddedStickers();\n    }\n  }, [addedSetIds, loadAddedStickers]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    onStickerSelect(sticker);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers && stickerSet.stickers[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    if (stickerSet.id === 'recent' || stickerSet.id === 'favorite' || stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === 'recent' || stickerSet.id === 'favorite'}\n          color=\"translucent\"\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === 'recent' ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === 'favorite' ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.isAnimated ? (\n            <StickerSetCoverAnimated\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          observeIntersection={observeIntersectionForCovers}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets || !canSendStickers) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">Sending stickers is not allowed in this chat.</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">You have no saved Stickers.</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        {allSets.map(renderCover)}\n      </div>\n      <div ref={containerRef} className=\"StickerPicker-main no-scrollbar\">\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(shouldPlay && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n    } = global.stickers;\n\n    return {\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      shouldPlay: global.settings.byKey.shouldLoopStickers,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadStickerSets',\n    'loadRecentStickers',\n    'loadFavoriteStickers',\n    'loadAddedStickers',\n    'addRecentSticker',\n    'unfaveSticker',\n  ]),\n)(StickerPicker));\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiVideo } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useTransitionForMedia from '../../hooks/useTransitionForMedia';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\n\nimport Spinner from '../ui/Spinner';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  onClick: (gif: ApiVideo) => void;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif, observeIntersection, isDisabled, onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const hasThumbnail = gif.thumbnail && !!gif.thumbnail.dataUri;\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail && gif.thumbnail.dataUri, Boolean(previewBlobUrl));\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { transitionClassNames } = useTransitionForMedia(hasThumbnail || previewBlobUrl || videoData, 'slow');\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n\n  useVideoCleanup(videoRef, [shouldRenderVideo]);\n\n  const handleClick = useCallback(\n    () => onClick({\n      ...gif,\n      blobUrl: videoData,\n    }),\n    [onClick, gif, videoData],\n  );\n\n  const className = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    transitionClassNames,\n    localMediaHash,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      onClick={handleClick}\n    >\n      {hasThumbnail && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n      )}\n      {!hasThumbnail && previewBlobUrl && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"thumbnail\"\n        />\n      )}\n      {(shouldRenderVideo || previewBlobUrl) && (\n        <video\n          ref={videoRef}\n          autoPlay\n          loop\n          muted\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        >\n          <source src={videoData} />\n        </video>\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || hasThumbnail ? 'white' : 'black'} />\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import React, {\n  FC, useEffect, memo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs: boolean;\n  onGifSelect: (gif: ApiVideo) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadSavedGifs'>;\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  onGifSelect,\n  loadSavedGifs,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div ref={containerRef} className={buildClassName('GifPicker no-scrollbar', className)}>\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={onGifSelect}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      savedGifs: global.gifs.saved.gifs,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadSavedGifs']),\n)(GifPicker));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'Stickers',\n  'GIFs',\n}\n\n// Getting enum string values for display in Tabs.\n// See: https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings\nexport const SYMBOL_MENU_TAB_TITLES = Object.values(SymbolMenuTabs)\n  .filter((value): value is string => typeof value === 'string');\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={SYMBOL_MENU_TAB_TITLES[tab]}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {renderTabButton(SymbolMenuTabs.Emoji)}\n      {renderTabButton(SymbolMenuTabs.Stickers)}\n      {renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {activeTab === SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiSticker, ApiVideo } from '../../../api/types';\n\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onStickerSelect: (sticker: ApiSticker) => void;\n  onGifSelect: (gif: ApiVideo) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: AnyToVoidFunction;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps> = ({\n  isOpen, allowedAttachmentOptions,\n  onLoad, onClose,\n  onEmojiSelect, onStickerSelect, onGifSelect,\n  onRemoveSymbol, onSearchOpen, addRecentEmoji,\n}) => {\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  useLayoutEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, activeTab, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => {\n      return [...emojis, name];\n    });\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const lang = useLang();\n\n  const { canSendStickers, canSendGifs } = allowedAttachmentOptions;\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={onStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={SYMBOL_MENU_TAB_TITLES.length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {IS_SINGLE_COLUMN_LAYOUT && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n      />\n    </>\n  );\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const className = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n    );\n\n    return (\n      <Portal>\n        <div className={className}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SymbolMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(SymbolMenu);\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { CONTENT_TYPES_FOR_QUICK_UPLOAD } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  onFileSelect: (files: File[], isQuick: boolean) => void;\n  onPollCreate: () => void;\n  onClose: () => void;\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  isOpen, allowedAttachmentOptions, onFileSelect, onPollCreate, onClose,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const handleFileSelect = useCallback((e: Event, isQuick: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      onFileSelect(Array.from(files), isQuick);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      CONTENT_TYPES_FOR_QUICK_UPLOAD,\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const lang = useLang();\n\n  const { canAttachMedia, canAttachPolls } = allowedAttachmentOptions;\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"AttachMenu fluid\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n      {!canAttachMedia && (\n        <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n      )}\n      {canAttachMedia && (\n        <>\n          <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n            {lang('AttachmentMenu.PhotoOrVideo')}\n          </MenuItem>\n          <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n        </>\n      )}\n      {canAttachPolls && (\n        <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(AttachMenu);\n","import React, {\n  FC, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'clearStickersForEmoji'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  onStickerSelect,\n  stickers,\n  clearStickersForEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(clearStickersForEmoji) : undefined), [isOpen, clearStickersForEmoji]);\n\n  const handleMouseEnter = () => {\n    document.body.classList.add('no-select');\n  };\n\n  const handleMouseLeave = () => {\n    document.body.classList.remove('no-select');\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers && displayedStickers.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n\n    return { stickers };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['clearStickersForEmoji']),\n)(StickerTooltip));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../modules/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('clickInlineButton')>;\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen, message, onClose, clickInlineButton,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"KeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'NOT_SUPPORTED'}\n                onClick={() => clickInlineButton({ button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'clickInlineButton',\n  ]),\n)(BotKeyboardMenu));\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onSilentSend?: NoneToVoidFunction;\n  onScheduleSend?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen, onSilentSend, onScheduleSend, onClose, onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      className=\"CustomSendMenu\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSilentSend && <MenuItem icon=\"mute\" onClick={onSilentSend}>{lang('SendWithoutSound')}</MenuItem>}\n      {onScheduleSend && <MenuItem icon=\"schedule\" onClick={onScheduleSend}>{lang('ScheduleMessage')}</MenuItem>}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { LangCode } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport captureKeyboardListeners from '../../../util/captureKeyboardListeners';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\nconst NO_EMOJI_SELECTED_INDEX = -1;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  language: LangCode;\n  onEmojiSelect: (text: string) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: AnyToVoidFunction;\n  loadEmojiKeywords: AnyToVoidFunction;\n  emojis: Emoji[];\n};\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  language,\n  emojis,\n  onClose,\n  onEmojiSelect,\n  addRecentEmoji,\n  loadEmojiKeywords,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: Emoji[] = usePrevDuringAnimation(emojis.length ? emojis : undefined, CLOSE_DURATION) || [];\n\n  const [selectedIndex, setSelectedIndex] = useState(NO_EMOJI_SELECTED_INDEX);\n\n  useEffect(() => {\n    loadEmojiKeywords({ language: 'en' });\n    if (language !== 'en') {\n      loadEmojiKeywords({ language });\n    }\n  }, [loadEmojiKeywords, language]);\n\n  useEffect(() => {\n    setSelectedIndex(0);\n  }, [emojis]);\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!emojis.length) {\n      return NO_EMOJI_SELECTED_INDEX;\n    }\n\n    const emojisCount = emojis.length;\n    return cycleRestrict(emojisCount, newIndex);\n  }, [emojis]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedIndex, getSelectedIndex]);\n\n  const handleSelectEmoji = useCallback((e: KeyboardEvent) => {\n    if (emojis.length && selectedIndex > NO_EMOJI_SELECTED_INDEX) {\n      const emoji = emojis[selectedIndex];\n      if (emoji) {\n        e.preventDefault();\n        onEmojiSelect(emoji.native);\n        addRecentEmoji({ emoji: emoji.id });\n      }\n    }\n  }, [addRecentEmoji, emojis, onEmojiSelect, selectedIndex]);\n\n  useEffect(() => (isOpen ? captureKeyboardListeners({\n    onEsc: onClose,\n    onLeft: (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: (e: KeyboardEvent) => handleArrowKey(1, e),\n    onEnter: handleSelectEmoji,\n  }) : undefined), [handleArrowKey, handleSelectEmoji, isOpen, onClose]);\n\n  const handleMouseEnter = () => {\n    document.body.classList.add('no-select');\n  };\n\n  const handleMouseLeave = () => {\n    document.body.classList.remove('no-select');\n  };\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          <EmojiButton\n            key={emoji.id}\n            emoji={emoji}\n            focus={selectedIndex === index}\n            onClick={onEmojiSelect}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import React, {\n  FC, useMemo, memo, useRef,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiUser, ApiChat } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../modules/selectors';\nimport {\n  getMessageSummaryText,\n  getChatTitle,\n  getUserFullName,\n  isChatChannel,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport { orderBy, pick } from '../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: number;\n  threadId: number;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchTextMessagesLocal' | 'focusMessage'>;\n\ninterface Result {\n  message: ApiMessage;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  onClick: NoneToVoidFunction;\n}\n\nconst RightSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  searchTextMessagesLocal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n\n  const foundResults = useMemo(() => {\n    if (!query || !foundIds || !foundIds.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const results = foundIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean) as Result[];\n\n    return orderBy(results, ({ message }) => message.date, 'desc');\n  }, [chatId, threadId, focusMessage, foundIds, chat, messagesById, query]);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: Result) => {\n    const title = senderChat ? getChatTitle(lang, senderChat) : getUserFullName(senderUser);\n    const text = getMessageSummaryText(lang, message);\n\n    return (\n      <ListItem\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} />\n        <div className=\"info\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{title && renderText(title)}</h3>\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {renderText(text, ['emoji', 'highlight'], { highlight: query })}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    if (foundResults && foundResults[index]) {\n      foundResults[index].onClick();\n    }\n  }, '.ListItem-button', true);\n\n  return (\n    <InfiniteScroll\n      className=\"RightSearch custom-scroll\"\n      items={foundResults}\n      preloadBackwards={0}\n      onLoadMore={searchTextMessagesLocal}\n      noFastList\n      onKeyDown={handleKeyDown}\n      ref={containerRef}\n    >\n      <p className=\"helper-text\" dir=\"auto\">\n        {!query ? (\n          lang('lng_dlg_search_for_messages')\n        ) : (totalCount === 0 || !foundResults.length) ? (\n          lang('lng_search_no_results')\n        ) : totalCount === 1 ? (\n          '1 message found'\n        ) : (\n          `${(foundResults.length && (totalCount || foundResults.length))} messages found`\n        )}\n      </p>\n      {foundResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, ['searchTextMessagesLocal', 'focusMessage']),\n)(RightSearch));\n","import React, {\n  FC, useEffect, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiStickerSet } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { pick } from '../../util/iteratees';\nimport { selectShouldLoopStickers, selectStickerSet } from '../../modules/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport useOnChange from '../../hooks/useOnChange';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isSomeModalOpen: boolean;\n  onModalToggle: (isOpen: boolean) => void;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadStickers' | 'toggleStickerSet'>;\n\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps & DispatchProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  loadStickers, toggleStickerSet, isSomeModalOpen, onModalToggle,\n}) => {\n  const lang = useLang();\n  const isAdded = set && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set && set.stickers);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useOnChange(() => {\n    onModalToggle(isModalOpen);\n  }, [isModalOpen, onModalToggle]);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...set.covers || [], ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY) {\n      loadStickers({ stickerSetId });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main\">\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen || isSomeModalOpen}\n            onClick={openModal}\n          />\n        ))}\n      </div>\n      {canRenderStickers && (\n        <StickerSetModal\n          isOpen={isModalOpen}\n          fromSticker={displayedStickers[0]}\n          onClose={closeModal}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadStickers', 'toggleStickerSet']),\n)(StickerSetResult));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadFeaturedStickers'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<StateProps & DispatchProps> = ({\n  query,\n  featuredIds,\n  resultIds,\n  loadFeaturedStickers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadFeaturedStickers']),\n)(StickerSearch));\n","import React, {\n  FC, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n} from '../../modules/selectors';\nimport { getAllowedAttachmentOptions } from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchMoreGifs' | 'sendMessage' | 'setGifSearchQuery'>;\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<StateProps & DispatchProps> = ({\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  searchMoreGifs,\n  sendMessage,\n  setGifSearchQuery,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const { canSendGifs } = getAllowedAttachmentOptions(chat, isChatWithBot);\n\n  const handleGifClick = useCallback((gif: ApiVideo) => {\n    if (canSendGifs) {\n      sendMessage({ gif });\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, sendMessage, setGifSearchQuery]);\n\n  const lang = useLang();\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={handleGifClick}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={searchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['searchMoreGifs', 'sendMessage', 'setGifSearchQuery']),\n)(GifSearch));\n","import React, {\n  FC, useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport { pick } from '../../util/iteratees';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: number[];\n  offset: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadPollOptionResults' | 'openChat' | 'closePollResults'>;\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n  loadPollOptionResults,\n  openChat,\n  closePollResults,\n}) => {\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = global.pollResults;\n\n    return {\n      voters: voters && voters[answer.option],\n      offset: (offsets && offsets[answer.option]) || '',\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, ['loadPollOptionResults', 'openChat', 'closePollResults']),\n)(PollAnswerResults));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage } from '../../modules/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<StateProps> = ({\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{summary.question}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {lastSyncTime && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n      lastSyncTime,\n    } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  selectChat, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../../modules/selectors';\nimport { selectIsChatMuted } from '../../../modules/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: number;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'updateContact' | 'deleteUser' | 'deleteHistory' | 'closeManagement' | 'openChat'\n)>;\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps & DispatchProps> = ({\n  userId,\n  user,\n  chat,\n  progress,\n  isMuted,\n  updateContact,\n  deleteUser,\n  deleteHistory,\n  closeManagement,\n  openChat,\n}) => {\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteHistory({\n      chatId: chat.id,\n      shouldDeleteForAll: false,\n    });\n    deleteUser({ userId });\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.id, closeDeleteDialog, closeManagement, deleteHistory, deleteUser, openChat, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId)!;\n    const { progress } = global.management;\n    const isMuted = selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    return {\n      user, chat, progress, isMuted,\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, [\n    'updateContact', 'deleteUser', 'closeManagement', 'openChat', 'deleteHistory',\n  ]),\n)(ManageUser));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport { ApiChat, ApiChatBannedRights, ApiMediaFormat } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatBasicGroup } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat } from '../../../modules/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'togglePreHistoryHidden' | 'updateChat' | 'closeManagement' |\n  'deleteHistory' | 'leaveChannel' | 'deleteChannel' | 'openChat'\n)>;\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\n\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = 8;\n\nconst ManageGroup: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  onScreenSelect,\n  togglePreHistoryHidden,\n  updateChat,\n  deleteHistory,\n  leaveChannel,\n  deleteChannel,\n  closeManagement,\n  openChat,\n}) => {\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = [\n      'sendMessages',\n      'sendMedia',\n      'embedLinks',\n      'sendPolls',\n      'changeInfo',\n      'inviteUsers',\n      'pinMessages',\n    ].filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = (chat.fullInfo && chat.fullInfo.adminMembers && chat.fullInfo.adminMembers.length) || 0;\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteHistory({ chatId: chat.id, shouldDeleteForAll: false });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, deleteHistory, leaveChannel, deleteChannel, openChat,\n  ]);\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline ripple onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem icon=\"message\" multiline ripple onClick={handleClickDiscussion}>\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            ripple\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT}\n            </span>\n          </ListItem>\n          <ListItem icon=\"admin\" multiline ripple onClick={handleClickAdministrators}>\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline ripple onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount!)}</span>\n          </ListItem>\n\n          {chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\">\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const hasLinkedChannel = Boolean(chat.fullInfo && chat.fullInfo.linkedChatId);\n\n    return {\n      chat,\n      progress,\n      isBasicGroup: isChatBasicGroup(chat),\n      hasLinkedChannel,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: getHasAdminRight(chat, 'banUsers'),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'togglePreHistoryHidden', 'updateChat', 'closeManagement',\n    'deleteHistory', 'leaveChannel', 'deleteChannel', 'openChat',\n  ]),\n)(ManageGroup));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatDefaultBannedRights'>;\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\n\nfunction getLangKeyForBannedRightKey(key: string) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps & DispatchProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  updateChatDefaultBannedRights,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  useEffect(() => {\n    setPermissions((chat && chat.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [chat]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatBannedRights]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => !!bannedRights);\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, key) => {\n      if (\n        !bannedRights[key as keyof ApiChatBannedRights]\n        || (defaultBannedRights && defaultBannedRights[key as keyof ApiChatBannedRights])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        <div className=\"section\">\n          <ListItem icon=\"delete-user\" multiline ripple narrow onClick={handleRemovedUsersClick}>\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            ripple\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              ripple\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat, currentUserId: global.currentUserId };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatDefaultBannedRights']),\n)(ManageGroupPermissions));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { getUserFullName } from '../../../modules/helpers';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: number;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<number, ApiUser>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatMemberBannedRights'>;\n\nconst ManageGroupRemovedUsers: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  usersById,\n  updateChatMemberBannedRights,\n}) => {\n  const lang = useLang();\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang('NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n\n    return { chat, usersById };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatMemberBannedRights']),\n)(ManageGroupRemovedUsers));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport { ApiChat, ApiMediaFormat } from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { getChatAvatarHash, getHasAdminRight } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'toggleSignatures' | 'updateChat' | 'closeManagement' | 'leaveChannel' | 'deleteChannel' | 'openChat'\n)>;\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\n\nconst ManageChannel: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  onScreenSelect,\n  updateChat,\n  toggleSignatures,\n  closeManagement,\n  leaveChannel,\n  deleteChannel,\n  openChat,\n}) => {\n  const currentTitle = chat ? (chat.title || '') : '';\n  const currentAbout = chat && chat.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat && chat.fullInfo && chat.fullInfo.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = (chat && chat.fullInfo && chat.fullInfo.adminMembers && chat.fullInfo.adminMembers.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" ripple multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem icon=\"message\" multiline ripple onClick={handleClickDiscussion} disabled={!canChangeInfo}>\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          <ListItem icon=\"admin\" multiline ripple onClick={handleClickAdministrators}>\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline ripple onClick={handleClickSubscribers}>\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount!, 'i')}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const isSignaturesShown = Boolean(chat && chat.isSignaturesShown);\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'toggleSignatures', 'updateChat', 'closeManagement', 'leaveChannel', 'deleteChannel', 'openChat',\n  ]),\n)(ManageChannel));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { selectChat, selectManagement } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport { isChatChannel } from '../../../modules/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: number;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'checkPublicLink' | 'updatePublicLink' | 'updatePrivateLink'\n)>;\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkPublicLink,\n  updatePublicLink,\n  updatePrivateLink,\n}) => {\n  const isPublic = Boolean(chat.username);\n  const privateLink = chat.fullInfo && chat.fullInfo.inviteLink;\n\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [username, setUsername] = useState();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n\n  const canUpdate = (\n    (privacyType === 'public' && username && isUsernameAvailable)\n    || (privacyType === 'private' && isPublic)\n  );\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleOptionChange = useCallback((value: string) => {\n    setPrivacyType(value as PrivacyType);\n  }, []);\n\n  const handleSave = useCallback(() => {\n    updatePublicLink({ username: privacyType === 'public' ? username : '' });\n  }, [privacyType, updatePublicLink, username]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={chat.username}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkUsername={checkPublicLink}\n              onChange={setUsername}\n            />\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: global.management.progress,\n      isUsernameAvailable,\n    };\n  },\n  (setGlobal, actions) => pick(actions, [\n    'checkPublicLink', 'updatePublicLink', 'updatePrivateLink',\n  ]),\n)(ManageChatPrivacyType));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { selectChat } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport getAnimationData from '../../common/helpers/animatedAssets';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../modules/helpers';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<number, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: number[];\n  isChannel?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadGroupsForDiscussion' | 'linkDiscussionGroup' | 'unlinkDiscussionGroup'>;\n\nconst ManageDiscussion: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n  loadGroupsForDiscussion,\n  linkDiscussionGroup,\n  unlinkDiscussionGroup,\n}) => {\n  const [linkedGroupId, setLinkedGroupId] = useState<number>();\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const lang = useLang();\n  const linkedChatId = linkedChat && linkedChat.id;\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('DiscussionGroups').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const onDiscussionClick = (groupId: number) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n      // return renderText(\n      //   lang('DiscussionLinkGroupPublicAlert', linkedChat.title, chat!.title),\n      //   ['br', 'simple_markdown'],\n      // );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n    // return renderText(\n    //   lang('DiscussionLinkGroupPrivateAlert', linkedChat.title, chat!.title),\n    //   ['br', 'simple_markdown'],\n    // );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => { onDiscussionClick(id); }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n          isButtonsInOneRow\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"section-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"discussionGroupsDucks\"\n                size={STICKER_SIZE_DISCUSSION_GROUPS}\n                animationData={animationData}\n                play={isAnimationLoaded}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat && chat.fullInfo && chat.fullInfo.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadGroupsForDiscussion', 'linkDiscussionGroup', 'unlinkDiscussionGroup',\n  ]),\n)(ManageDiscussion));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: number;\n  selectedChatMemberId?: number;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatMemberBannedRights'>;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  updateChatMemberBannedRights,\n  isFormFullyDisabled,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat && chat.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember && selectedChatMember.bannedRights) || (chat && chat.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setIsLoading(false);\n  }, [chat, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatBannedRights]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, permissions, updateChatMemberBannedRights]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatBannedRights) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              disabled={getControlIsDisabled('sendStickers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              disabled={getControlIsDisabled('sendPolls')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              disabled={getControlIsDisabled('embedLinks')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              disabled={getControlIsDisabled('pinMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div className=\"section\">\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatMemberBannedRights']),\n)(ManageGroupUserPermissions));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\nimport { getUserFullName, isChatChannel } from '../../../modules/helpers';\n\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: number;\n  isChannel: boolean;\n  usersById: Record<number, ApiUser>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  usersById,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const lang = useLang();\n\n  function handleRecentActionsClick() {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang, usersById]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem icon=\"recent\" multiline ripple onClick={handleRecentActionsClick}>\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n      usersById,\n    };\n  },\n  // (setGlobal, actions): DispatchProps => pick(actions, ['togglePreHistoryHidden', 'updateChat']),\n)(ManageChatAdministrators));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: number;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat }) => {\n  const lang = useLang();\n\n  const adminMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { selectChat } from '../../../modules/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: number;\n  selectedChatMemberId?: number;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<number, ApiUser>;\n  currentUserId?: number;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatAdmin'>;\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps & DispatchProps> = ({\n  selectedChatMemberId,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isFormFullyDisabled,\n  updateChatAdmin,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return undefined;\n    }\n\n    return chat.fullInfo.adminMembers.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat && chat.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember && selectedChatMember.adminRights) || {});\n    setCustomTitle(((selectedChatMember && selectedChatMember.customTitle) || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(false);\n    setIsLoading(false);\n  }, [selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [chat, selectedChatMemberId, permissions, customTitle, updateChatAdmin]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedChatMemberId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedChatMemberId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (!selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!!permissions.changeInfo}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={!!permissions.postMessages}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={!!permissions.editMessages}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={!!permissions.deleteMessages}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={!!permissions.banUsers}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!!permissions.inviteUsers}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!!permissions.pinMessages}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={!!permissions.addAdmins}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={!!permissions.anonymous}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedChatMemberId && !isFormFullyDisabled && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isDismissConfirmationDialogOpen}\n        onClose={closeDismissConfirmationDialog}\n        text=\"Are you sure you want to dismiss this admin?\"\n        confirmLabel=\"Dismiss\"\n        confirmHandler={handleDismissAdmin}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isFormFullyDisabled,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatAdmin']),\n)(ManageGroupAdminRights));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatMember, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { selectChat } from '../../../modules/selectors';\nimport { sortUserIds, isChatChannel } from '../../../modules/helpers';\nimport { pick } from '../../../util/iteratees';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: number;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openUserInfo'>;\n\nconst ManageGroupMembers: FC<OwnProps & StateProps & DispatchProps> = ({\n  members,\n  usersById,\n  isChannel,\n  openUserInfo,\n  serverTimeOffset,\n}) => {\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(members.map(({ userId }) => userId), usersById, undefined, serverTimeOffset);\n  }, [members, serverTimeOffset, usersById]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => handleMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const members = chat && chat.fullInfo && chat.fullInfo.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n  ]),\n)(ManageGroupMembers));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatMember, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { sortUserIds, isChatChannel } from '../../../modules/helpers';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number) => void;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  serverTimeOffset,\n}) => {\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById, undefined, serverTimeOffset,\n    );\n  }, [members, serverTimeOffset, usersById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: number) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const members = chat && chat.fullInfo && chat.fullInfo.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens, ManagementType } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../modules/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageGroupRemovedUsers from './ManageGroupRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\n\nexport type OwnProps = {\n  chatId: number;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: number;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return <ManageUser key={chatId} userId={chatId} />;\n        case 'group':\n          return <ManageGroup key={chatId} chatId={chatId} onScreenSelect={onScreenSelect} />;\n        case 'channel':\n          return <ManageChannel key={chatId} chatId={chatId} onScreenSelect={onScreenSelect} />;\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType chatId={chatId} />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageGroupRemovedUsers chatId={chatId} />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n        />\n      );\n\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers chatId={chatId} />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const CURRENCIES: Record<string, string> = {\n  USD: '$',\n  EUR: '€',\n  GBP: '£',\n  JPY: '¥',\n  RUB: '₽',\n  UAH: '₴',\n  INR: '₹',\n  AED: 'د.إ',\n};\n\nexport function getCurrencySign(currency: string | undefined): string {\n  if (!currency) {\n    return '';\n  }\n  return CURRENCIES[currency] || '';\n}\n","const VISA = /^4[0-9]{12}(?:[0-9]{1,3})?$/;\nconst MASTERCARD1 = /^5[1-5][0-9]{11,14}$/;\nconst MASTERCARD2 = /^2[2-7][0-9]{11,14}$/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\nimport { countryList } from '../../util/phoneNumber';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload,\n        billingCountry: getBillingCountry(action.payload),\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.countryIso2) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: getBillingCountry(action.payload.countryIso2),\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nfunction getBillingCountry(countryCode: string) {\n  const country = countryList.find(({ id }) => id === countryCode);\n  return country ? country.name : '';\n}\n\nexport default () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n","import { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import { ChangeEvent, RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: any;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import React, {\n  FC, useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\nimport { countryList } from '../../util/phoneNumber';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label=\"Address1 (Street)\"\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label=\"Address2 (Street)\"\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label=\"City\"\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              error={formErrors.city}\n            />\n            <InputText\n              label=\"State\"\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label=\"Country\"\n              placeholder=\"Country\"\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n            >\n              {countryList.map(({ name, id }) => (\n                <option\n                  value={id}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label=\"Post Code\"\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label=\"Full name\"\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label=\"Email\"\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label=\"Phone number\"\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import React, {\n  FC, useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport { ShippingOption } from '../../types/index';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  useEffect(() => {\n    if (!shippingOptions || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: `${currency} ${String(amount / 100)}`,\n    value,\n  }))), [shippingOptions, currency]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>Select shipping method</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import React, {\n  FC, memo,\n} from '../../lib/teact/teact';\n\nimport { Price } from '../../types';\n\nimport './Checkout.scss';\n\nexport type OwnProps = {\n  invoiceContent?: {\n    title?: string;\n    description?: string;\n    text?: string;\n    photoUrl?: string;\n  };\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  shippingPrices?: Price[];\n  currency?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  invoiceContent,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const { photoUrl, title, text } = (invoiceContent || {});\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n  return (\n    <div className=\"Checkout\">\n      <div className=\"description has-image\">\n        { photoUrl && (\n          <img src={photoUrl} alt=\"\" />\n        )}\n        <div className=\"text\">\n          <h5>{ title }</h5>\n          <p>{ text }</p>\n        </div>\n      </div>\n      <div className=\"price-info\">\n        { prices && prices.map((item) => (\n          renderPaymentItem(item.label, item.amount, currency, false)\n        )) }\n        { shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(item.label, item.amount, currency, false)\n        )) }\n        { totalPrice !== undefined && (\n          renderPaymentItem('Total', totalPrice, currency, true)\n        ) }\n      </div>\n      <div className=\"invoice-info\">\n        {paymentMethod && renderCheckoutItem('icon-card', paymentMethod, 'Payment method')}\n        {paymentProvider && renderCheckoutItem('stripe-provider', paymentProvider, 'Payment provider')}\n        {shippingAddress && renderCheckoutItem('icon-location', shippingAddress, 'Shipping address')}\n        {name && renderCheckoutItem('icon-user', name, 'Name')}\n        {phone && renderCheckoutItem('icon-phone', phone, 'Phone number')}\n        {shippingMethod && renderCheckoutItem('icon-truck', shippingMethod, 'Shipping method')}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPaymentItem(title: string, value: number, currency?: string, main = false) {\n  return (\n    <div className={`price-info-item ${main ? 'price-info-item-main' : ''}`}>\n      <div className=\"title\">\n        { title }\n      </div>\n      <div className=\"value\">\n        { `${currency || ''} ${(value / 100).toFixed(2)}` }\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem(icon: string, title: string, data: string) {\n  return (\n    <div className=\"checkout-info-item\">\n      <i className={icon}> </i>\n      <div className=\"info\">\n        <div className=\"title\">\n          { title }\n        </div>\n        <p className=\"data\">\n          { data }\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Checkout);\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  // eslint-disable-next-line no-null/no-null\n  const expiryInputRef = useRef<HTMLInputElement>(null);\n\n  const handleKeyDown = useCallback((e) => {\n    if (e.key === 'Backspace' && value.charAt(value.length - 1) === '/') {\n      const newValue = value.slice(0, value.length - 1);\n      if (expiryInputRef.current) {\n        expiryInputRef.current.value = newValue;\n      }\n    }\n  }, [value]);\n\n  const handleChange = useCallback((e) => {\n    onChange(formatCardExpiry(e.target.value));\n  }, [onChange]);\n\n  return (\n    <InputText\n      label=\"Expiry date\"\n      ref={expiryInputRef}\n      onChange={handleChange}\n      onKeyDown={handleKeyDown}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      maxLength={MAX_FIELD_LENGTH}\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts && parts[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts && parts[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","export default __webpack_public_path__ + \"mastercard.4216118edafe23cc2dec7b8807ba4622.svg\";","export default __webpack_public_path__ + \"visa.e5a7c336e1deb4b92a636e2e053878c4.svg\";","import React, {\n  FC, memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\n// @ts-ignore\nimport mastercardIconPath from '../../assets/mastercard.svg';\n// @ts-ignore\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n    if (cardNumberRef.current) {\n      cardNumberRef.current.value = newValue;\n    }\n  }, [onChange, cardNumberRef]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <span className=\"left-addon\">{cardIcon}</span>\n      <InputText\n        ref={cardNumberRef}\n        label=\"Card number\"\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-left-addon' : ''}\n        error={error}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n      />\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import React, {\n  FC, useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\nimport { countryList } from '../../util/phoneNumber';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    dispatch({ type: 'changeCvvCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label=\"Name on card\"\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label=\"CVV code\"\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            error={formErrors.cvv}\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label=\"Country\"\n            placeholder=\"Country\"\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ name }) => (\n                <option\n                  value={name}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label=\"Post Code\"\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            error={formErrors.billingZip}\n          />\n        )}\n        { canSaveCredentials && (\n          <Checkbox\n            label={lang('PaymentCardSavePaymentInformation')}\n            checked={state.saveCredentials}\n            onChange={handleChangeSaveCredentials}\n          />\n        ) }\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../global/types';\nimport { PaymentStep, ShippingOption, Price } from '../../types';\nimport { ApiError } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport { getCurrencySign } from '../middle/helpers/getCurrencySign';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport { getShippingError } from '../../modules/helpers/payments';\nimport usePaymentReducer, { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  nameRequested?: boolean;\n  shippingAddressRequested?: boolean;\n  phoneRequested?: boolean;\n  emailRequested?: boolean;\n  flexible?: boolean;\n  phoneToProvider?: boolean;\n  emailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  globalErrors?: ApiError[];\n};\n\ntype GlobalStateProps = Pick<GlobalState['payment'], 'step' | 'shippingOptions' |\n'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoiceContent' |\n'error'>;\n\ntype DispatchProps = Pick<GlobalActions, 'validateRequestedInfo' | 'sendPaymentForm' | 'setPaymentStep'\n| 'sendCredentialsInfo' | 'clearPaymentError' >;\n\nconst Invoice: FC<OwnProps & StateProps & GlobalStateProps & DispatchProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  nameRequested,\n  shippingAddressRequested,\n  phoneRequested,\n  emailRequested,\n  phoneToProvider,\n  emailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoiceContent,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  error,\n  globalErrors,\n  validateRequestedInfo,\n  sendPaymentForm,\n  setPaymentStep,\n  sendCredentialsInfo,\n  clearPaymentError,\n}) => {\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const currencySign = getCurrencySign(currency);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useEffect(() => {\n    if (step || error || globalErrors) {\n      setIsLoading(false);\n    }\n  }, [step, error, globalErrors]);\n\n  useEffect(() => {\n    if (error && error.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.fieldError,\n        },\n      });\n      return;\n    }\n    if (globalErrors && globalErrors.length) {\n      const errors = getShippingError(globalErrors);\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          ...errors,\n        },\n      });\n    }\n  }, [error, globalErrors, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingAddress || {}),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping);\n  }, [step, paymentState.shipping, prices, shippingOptions]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <Button\n          isText\n          onClick={clearPaymentError}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(cuurentStep: PaymentStep) {\n    switch (cuurentStep) {\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(shippingAddressRequested)}\n            needEmail={Boolean(emailRequested || emailToProvider)}\n            needPhone={Boolean(phoneRequested || phoneToProvider)}\n            needName={Boolean(nameRequested)}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currencySign}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n          />\n        );\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            prices={prices}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoiceContent={invoiceContent}\n            checkoutInfo={checkoutInfo}\n            currency={currencySign}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  const handleButtonClick = useCallback(() => {\n    setIsLoading(true);\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return validateRequest();\n      case PaymentStep.Shipping:\n        return setStep(PaymentStep.PaymentInfo);\n      case PaymentStep.PaymentInfo:\n        return sendCredentials();\n      case PaymentStep.Checkout:\n        return sendForm();\n      default:\n        return () => {};\n    }\n  }, [step, validateRequest, setStep, sendCredentials, sendForm]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('Checkout.PayPrice', `${currencySign}${(totalPrice / 100).toFixed(2)}`);\n      default:\n        return lang('Next');\n    }\n  }, [step, lang, currencySign, totalPrice]);\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <p>\n          Sorry, Telegram WebZ doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <Button\n          isText\n          onClick={onClose}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"PaymentModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={onClose}\n          ariaLabel=\"Close\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          {() => (\n            <div className=\"content custom-scroll\">\n              {renderModalContent(step)}\n            </div>\n          )}\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      <div className=\"footer\">\n        <Button\n          type=\"submit\"\n          onClick={handleButtonClick}\n          disabled={isLoading}\n          isLoading={isLoading}\n        >\n          {buttonText}\n        </Button>\n      </div>\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContent,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n    } = global.payment;\n\n    const isProviderError = Boolean(invoice && (!nativeProvider || nativeProvider !== DEFAULT_PROVIDER));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      nameRequested,\n      phoneRequested,\n      emailRequested,\n      shippingAddressRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n    } = (invoice || {});\n\n    return {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      nameRequested,\n      shippingAddressRequested,\n      phoneRequested,\n      emailRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoiceContent,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      globalErrors: global.errors,\n    };\n  },\n  (setGlobal, actions): DispatchProps => {\n    return pick(actions, [\n      'validateRequestedInfo',\n      'sendPaymentForm',\n      'setPaymentStep',\n      'sendCredentialsInfo',\n      'clearPaymentError',\n    ]);\n  },\n)(Invoice));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option ? option.prices : undefined;\n}\n\nfunction getTotalPrice(prices: Price[] = [], shippingOptions: ShippingOption[] | undefined, shippingOption: string) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = 0;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = `${cardTypeText} *${state.cardNumber.slice(-4)}`;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption ? shippingOption.title : undefined;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nfunction getCredentials(paymentState: FormState) {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, {\n  FC, memo, useMemo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { Price } from '../../types';\nimport { ApiShippingAddress } from '../../api/types/payments';\n\nimport useLang from '../../hooks/useLang';\nimport { getCurrencySign } from '../middle/helpers/getCurrencySign';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photoUrl?: string;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  totalAmount,\n  currency,\n  info,\n  photoUrl,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n  const currencySign = getCurrencySign(currency);\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={onClose}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            invoiceContent={{\n              photoUrl,\n              text,\n              title,\n            }}\n            checkoutInfo={checkoutInfo}\n            currency={currencySign}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = global.payment;\n    const {\n      currency,\n      prices: mapedPrices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices: mapedPrices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress && shippingAddress.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    paymentProvider: 'Stripe',\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import { ApiMediaFormat } from '../../../api/types';\n\nimport * as mediaLoader from '../../../util/mediaLoader';\n\n// @ts-ignore\nimport MonkeyIdle from '../../../assets/TwoFactorSetupMonkeyIdle.tgs';\n// @ts-ignore\nimport MonkeyTracking from '../../../assets/TwoFactorSetupMonkeyTracking.tgs';\n// @ts-ignore\nimport MonkeyClose from '../../../assets/TwoFactorSetupMonkeyClose.tgs';\n// @ts-ignore\nimport MonkeyPeek from '../../../assets/TwoFactorSetupMonkeyPeek.tgs';\n// @ts-ignore\nimport FoldersAll from '../../../assets/FoldersAll.tgs';\n// @ts-ignore\nimport FoldersNew from '../../../assets/FoldersNew.tgs';\n// @ts-ignore\nimport DiscussionGroups from '../../../assets/DiscussionGroupsDucks.tgs';\n\nexport const ANIMATED_STICKERS_PATHS = {\n  MonkeyIdle,\n  MonkeyTracking,\n  MonkeyClose,\n  MonkeyPeek,\n  FoldersAll,\n  FoldersNew,\n  DiscussionGroups,\n};\n\nexport default function getAnimationData(name: keyof typeof ANIMATED_STICKERS_PATHS) {\n  const path = ANIMATED_STICKERS_PATHS[name].replace(window.location.origin, '');\n\n  return mediaLoader.fetch(`file${path}`, ApiMediaFormat.Lottie);\n}\n","export default __webpack_public_path__ + \"TwoFactorSetupMonkeyIdle.dea4a492c144df84ddab778dc8a3f0cd.tgs\";","export default __webpack_public_path__ + \"TwoFactorSetupMonkeyTracking.eb5a7a6f166fb7589c12e6248561fb58.tgs\";","export default __webpack_public_path__ + \"TwoFactorSetupMonkeyClose.604c4c833d322b7e6c3ea19bef058241.tgs\";","export default __webpack_public_path__ + \"TwoFactorSetupMonkeyPeek.1905436b042520363d7e59f5d7f903ab.tgs\";","export default __webpack_public_path__ + \"FoldersAll.3f9f9e243d19f0fbf9aaaff11cbd4572.tgs\";","export default __webpack_public_path__ + \"FoldersNew.9a40d71c0c8be70f5bd14ff2d7bc1593.tgs\";","export default __webpack_public_path__ + \"DiscussionGroupsDucks.9ea453d1be9d1b0ee77a992f8e587485.tgs\";","import React, {\n  FC, useEffect, useState, memo,\n} from '../../lib/teact/teact';\n\nimport { DEBUG } from '../../config';\nimport { blobToFile, blobToDataUri } from '../../util/files';\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\nimport Modal from './Modal';\nimport Loading from './Loading';\n\nimport './CropModal.scss';\n\n// Change to 'base64' to get base64-encoded string\nconst cropperResultOptions: Croppie.ResultOptions & { type: 'blob' } = {\n  type: 'blob',\n  quality: 0.8,\n  format: 'jpeg',\n  circle: false,\n};\n\ntype ICroppie = typeof import('croppie');\nlet Croppie: ICroppie;\nlet croppiePromise: Promise<{ default: ICroppie }>;\n\nasync function ensureCroppie() {\n  if (!croppiePromise) {\n    croppiePromise = import('../../lib/croppie') as unknown as Promise<{ default: ICroppie }>;\n    Croppie = (await croppiePromise).default;\n  }\n\n  return croppiePromise;\n}\n\nlet cropper: Croppie;\n\nasync function initCropper(imgFile: File) {\n  try {\n    const cropContainer = document.getElementById('avatar-crop');\n    if (!cropContainer) {\n      return;\n    }\n\n    const { offsetWidth, offsetHeight } = cropContainer;\n\n    cropper = new Croppie(cropContainer, {\n      enableZoom: true,\n      boundary: {\n        width: offsetWidth,\n        height: offsetHeight,\n      },\n      viewport: {\n        width: offsetWidth - 16,\n        height: offsetHeight - 16,\n        type: 'circle',\n      },\n    });\n\n    const dataUri = await blobToDataUri(imgFile);\n    await cropper.bind({ url: dataUri });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n}\n\ntype OwnProps = {\n  file?: File;\n  onChange: (file: File) => void;\n  onClose: () => void;\n};\n\nconst CropModal: FC<OwnProps> = ({ file, onChange, onClose }: OwnProps) => {\n  const [isCroppieReady, setIsCroppieReady] = useState(false);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    if (!isCroppieReady) {\n      ensureCroppie().then(() => setIsCroppieReady(true));\n\n      return;\n    }\n\n    initCropper(file);\n  }, [file, isCroppieReady]);\n\n  const lang = useLang();\n\n  async function handleCropClick() {\n    if (!cropper) {\n      return;\n    }\n\n    const result: Blob | string = await cropper.result(cropperResultOptions);\n    const croppedImg = typeof result === 'string' ? result : blobToFile(result, 'avatar.jpg');\n\n    onChange(croppedImg);\n  }\n\n  return (\n    <Modal\n      isOpen={Boolean(file)}\n      onClose={onClose}\n      title=\"Drag to reposition\"\n      className=\"CropModal\"\n      hasCloseButton\n    >\n      {isCroppieReady ? (\n        <div id=\"avatar-crop\" />\n      ) : (\n        <Loading />\n      )}\n      <Button\n        className=\"confirm-button\"\n        round\n        color=\"primary\"\n        onClick={handleCropClick}\n        ariaLabel={lang('CropImage')}\n      >\n        <i className=\"icon-check\" />\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(CropModal);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target || !target.files || !target.files[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  function handleAvatarCrop(croppedImg: File) {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }\n\n  function handleModalClose() {\n    setSelectedFile(undefined);\n  }\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n","import React, {\n  FC, useState, useEffect, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport getAnimationData from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\nconst STICKER_SIZE = IS_SINGLE_COLUMN_LAYOUT ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [closeMonkeyData, setCloseMonkeyData] = useState<Record<string, any>>();\n  const [peekMonkeyData, setPeekMonkeyData] = useState<Record<string, any>>();\n  const [isFirstMonkeyLoaded, setIsFirstMonkeyLoaded] = useState(false);\n  const [isPeekShown, setIsPeekShown] = useState(false);\n\n  useEffect(() => {\n    if (!closeMonkeyData) {\n      getAnimationData('MonkeyClose').then(setCloseMonkeyData);\n    } else {\n      setTimeout(() => setIsPeekShown(true), PEEK_MONKEY_SHOW_DELAY);\n    }\n  }, [closeMonkeyData]);\n\n  useEffect(() => {\n    if (!peekMonkeyData) {\n      getAnimationData('MonkeyPeek').then(setPeekMonkeyData);\n    }\n  }, [peekMonkeyData]);\n\n  const handleFirstMonkeyLoad = useCallback(() => setIsFirstMonkeyLoaded(true), []);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      {closeMonkeyData && (\n        <AnimatedSticker\n          id=\"closeMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'hidden' : 'shown'}\n          animationData={closeMonkeyData}\n          playSegment={SEGMENT_COVER_EYES}\n          noLoop\n          onLoad={handleFirstMonkeyLoad}\n        />\n      )}\n      {peekMonkeyData && (\n        <AnimatedSticker\n          id=\"peekMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'shown' : 'hidden'}\n          animationData={peekMonkeyData}\n          playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n          noLoop\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { MIN_PASSWORD_LENGTH } from '../../config';\nimport { IS_TOUCH_ENV, IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  submitLabel?: string;\n  error?: string;\n  hint?: string;\n  placeholder?: string;\n  isLoading?: boolean;\n  isPasswordVisible?: boolean;\n  clearError: NoneToVoidFunction;\n  onChangePasswordVisibility: (state: boolean) => void;\n  onInputChange?: (password: string) => void;\n  onSubmit: (password: string) => void;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst PasswordForm: FC<OwnProps> = ({\n  isLoading = false,\n  isPasswordVisible,\n  error,\n  hint,\n  placeholder = 'Password',\n  submitLabel = 'Next',\n  clearError,\n  onChangePasswordVisibility,\n  onInputChange,\n  onSubmit,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const lang = useLang();\n\n  const [password, setPassword] = useState('');\n  const [canSubmit, setCanSubmit] = useState(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (error) {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n        inputRef.current!.select();\n      });\n    }\n  }, [error]);\n\n  function onPasswordChange(e: ChangeEvent<HTMLInputElement>) {\n    if (error) {\n      clearError();\n    }\n\n    const { target } = e;\n    setPassword(target.value);\n    setCanSubmit(target.value.length >= MIN_PASSWORD_LENGTH);\n    if (onInputChange) {\n      onInputChange(target.value);\n    }\n  }\n\n  function togglePasswordVisibility() {\n    onChangePasswordVisibility(!isPasswordVisible);\n  }\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    if (isLoading) {\n      return;\n    }\n\n    if (canSubmit) {\n      onSubmit(password);\n    }\n  }\n\n  return (\n    <form action=\"\" onSubmit={handleSubmit} autoComplete=\"off\">\n      <div\n        className={buildClassName('input-group password-input', password && 'touched', error && 'error')}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <input\n          ref={inputRef}\n          className=\"form-control\"\n          type={isPasswordVisible ? 'text' : 'password'}\n          id=\"sign-in-password\"\n          value={password || ''}\n          autoComplete=\"current-password\"\n          onChange={onPasswordChange}\n          dir=\"auto\"\n        />\n        <label>{error || hint || placeholder}</label>\n        <div\n          className=\"toggle-password\"\n          onClick={togglePasswordVisibility}\n          role=\"button\"\n          tabIndex={0}\n          title=\"Toggle password visibility\"\n        >\n          <i className={isPasswordVisible ? 'icon-eye' : 'icon-eye-closed'} />\n        </div>\n      </div>\n      {canSubmit && (\n        <Button type=\"submit\" ripple isLoading={isLoading}>\n          {submitLabel}\n        </Button>\n      )}\n    </form>\n  );\n};\n\nexport default memo(PasswordForm);\n"],"sourceRoot":""}