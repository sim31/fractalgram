{"version":3,"file":"884.48fa8564ff8f90ff2a28.js","mappings":"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","sources":["webpack://telegram-t/./src/components/right/DeleteMemberModal.tsx","webpack://telegram-t/./src/hooks/useThrottle.ts","webpack://telegram-t/./src/modules/actions/api/chats.ts","webpack://telegram-t/./src/modules/actions/ui/calls.ts","webpack://telegram-t/./src/modules/reducers/calls.ts","webpack://telegram-t/./src/modules/selectors/calls.ts","webpack://telegram-t/./src/util/deeplink.ts"],"sourcesContent":["import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport { selectCurrentChat, selectUser } from '../../modules/selectors';\nimport { getUserFirstOrLastName } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  contactName?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteChatMember'>;\n\nconst DeleteMemberModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  chat,\n  userId,\n  contactName,\n  onClose,\n  deleteChatMember,\n}) => {\n  const lang = useLang();\n\n  const handleDeleteChatMember = useCallback(() => {\n    deleteChatMember({ chatId: chat!.id, userId });\n    onClose();\n  }, [chat, deleteChatMember, onClose, userId]);\n\n  if (!chat || !userId) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeleteChatMember}\n      className=\"delete\"\n      title={lang('GroupRemoved.Remove')}\n    >\n      <p>{renderText(lang('PeerInfo.Confirm.RemovePeer', contactName))}</p>\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteChatMember}>\n        {lang('lng_box_remove')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const chat = selectCurrentChat(global);\n    const user = userId && selectUser(global, userId);\n    const contactName = user ? getUserFirstOrLastName(user) : undefined;\n\n    return {\n      chat,\n      contactName,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['deleteChatMember']),\n)(DeleteMemberModal));\n","import { useMemo } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\n\nexport default (ms: number, noFirst = false) => {\n  return useMemo(() => {\n    return throttle((cb) => cb(), ms, !noFirst);\n  }, [ms, noFirst]);\n};\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiUser, ApiChatFolder, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { NewChatMembersProgress, ChatCreationProgress, ManagementProgress } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  ARCHIVED_FOLDER_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  CHAT_LIST_LOAD_SLICE,\n  TIPS_USERNAME,\n  LOCALIZED_TIPS,\n  RE_TG_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TMP_CHAT_ID,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addChats,\n  addUsers,\n  replaceThreadParam,\n  updateChatListIds,\n  updateChats,\n  updateChat,\n  updateChatListSecondaryInfo,\n  updateManagementProgress,\n  leaveChat,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectUser,\n  selectChatListType,\n  selectIsChatPinned,\n  selectChatFolder,\n  selectSupportChat,\n  selectChatByUsername,\n  selectThreadTopMessageId,\n  selectCurrentMessageList,\n  selectThreadInfo, selectCurrentChat, selectLastServiceNotification,\n} from '../../selectors';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport {\n  isChatSummaryOnly, isChatArchived, prepareChatList, isChatBasicGroup,\n} from '../../helpers';\nimport { processDeepLink } from '../../../util/deeplink';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { selectGroupCall } from '../../selectors/calls';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst CHATS_PRELOAD_INTERVAL = 300;\n\nconst runThrottledForLoadChats = throttle((cb) => cb(), CHATS_PRELOAD_INTERVAL, true);\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddReducer('preloadTopChatMessages', (global, actions) => {\n  (async () => {\n    const preloadedChatIds: string[] = [];\n\n    for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n      await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n      const {\n        byId,\n        listIds: { active: listIds },\n        orderedPinnedIds: { active: orderedPinnedIds },\n      } = getGlobal().chats;\n      if (!listIds) {\n        return;\n      }\n\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n      const { pinnedChats, otherChats } = prepareChatList(byId, listIds, orderedPinnedIds);\n      const topChats = [...pinnedChats, ...otherChats];\n      const chatToPreload = topChats.find(({ id }) => id !== currentChatId && !preloadedChatIds.includes(id));\n      if (!chatToPreload) {\n        return;\n      }\n\n      preloadedChatIds.push(chatToPreload.id);\n\n      actions.loadViewportMessages({ chatId: chatToPreload.id, threadId: MAIN_THREAD_ID });\n    }\n  })();\n});\n\naddReducer('openChat', (global, actions, payload) => {\n  const { id, threadId } = payload!;\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  // Please telegram send us some updates about linked chat 🙏\n  if (chat && chat.lastMessage && chat.lastMessage.threadInfo) {\n    actions.requestThreadInfoUpdate({\n      chatId: chat.lastMessage.threadInfo.chatId,\n      threadId: chat.lastMessage.threadInfo.threadId,\n    });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      actions.requestThreadInfoUpdate({ chatId: id, threadId });\n    }\n  }\n});\n\naddReducer('openLinkedChat', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const chatFullInfo = await callApi('fetchFullChat', chat);\n\n    if (chatFullInfo?.fullInfo?.linkedChatId) {\n      actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId });\n    }\n  })();\n});\n\naddReducer('focusMessageInComments', (global, actions, payload) => {\n  const { chatId, threadId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n    if (!result) {\n      return;\n    }\n\n    actions.focusMessage({ chatId, threadId, messageId });\n  })();\n});\n\naddReducer('openSupportChat', (global, actions) => {\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true });\n\n  (async () => {\n    const result = await callApi('fetchChat', { type: 'support' });\n    if (result) {\n      actions.openChat({ id: result.chatId, shouldReplaceHistory: true });\n    }\n  })();\n});\n\naddReducer('openTipsChat', (global, actions, payload) => {\n  const { langCode } = payload;\n\n  const usernamePostfix = langCode === 'pt-br'\n    ? 'BR'\n    : LOCALIZED_TIPS.includes(langCode) ? (langCode as string).toUpperCase() : '';\n\n  actions.openChatByUsername({ username: `${TIPS_USERNAME}${usernamePostfix}` });\n});\n\naddReducer('loadMoreChats', (global, actions, payload) => {\n  const { listType = 'active' } = payload!;\n  const listIds = global.chats.listIds[listType as ('active' | 'archived')];\n  const isFullyLoaded = global.chats.isFullyLoaded[listType as ('active' | 'archived')];\n\n  if (isFullyLoaded) {\n    return;\n  }\n\n  const oldestChat = listIds\n    ? listIds\n      .map((id) => global.chats.byId[id])\n      .filter((chat) => Boolean(chat?.lastMessage) && !selectIsChatPinned(global, chat.id))\n      .sort((chat1, chat2) => (chat1.lastMessage!.date - chat2.lastMessage!.date))[0]\n    : undefined;\n\n  if (oldestChat) {\n    runThrottledForLoadChats(() => loadChats(listType, oldestChat.id, oldestChat.lastMessage!.date));\n  } else {\n    runThrottledForLoadChats(() => loadChats(listType));\n  }\n});\n\naddReducer('preloadArchivedChats', () => {\n  (async () => {\n    while (!getGlobal().chats.isFullyLoaded.archived) {\n      const currentGlobal = getGlobal();\n      const listIds = currentGlobal.chats.listIds.archived;\n      const oldestChat = listIds\n        ? listIds\n          .map((id) => currentGlobal.chats.byId[id])\n          .filter((chat) => Boolean(chat?.lastMessage) && !selectIsChatPinned(currentGlobal, chat.id))\n          .sort((chat1, chat2) => (chat1.lastMessage!.date - chat2.lastMessage!.date))[0]\n        : undefined;\n\n      await loadChats('archived', oldestChat?.id, oldestChat?.lastMessage!.date);\n      await pause(CHATS_PRELOAD_INTERVAL);\n    }\n  })();\n});\n\naddReducer('loadFullChat', (global, actions, payload) => {\n  const { chatId, force } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(chat);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(chat));\n  }\n});\n\naddReducer('loadTopChats', () => {\n  runThrottledForLoadTopChats(() => loadChats('active'));\n});\n\naddReducer('requestChatUpdate', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    serverTimeOffset,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddReducer('updateChatMutedState', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId, isMuted } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  setGlobal(updateChat(global, chatId, { isMuted }));\n  void callApi('updateChatMutedState', { chat, isMuted, serverTimeOffset });\n});\n\naddReducer('createChannel', (global, actions, payload) => {\n  const {\n    title, about, photo, memberIds,\n  } = payload!;\n\n  const members = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createChannel(title, members, about, photo);\n});\n\naddReducer('joinChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (channelId && accessHash) {\n    void callApi('joinChannel', { channelId, accessHash });\n  }\n});\n\naddReducer('deleteChatUser', (global, actions, payload) => {\n  const { chatId, userId }: { chatId: string; userId: string } = payload!;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddReducer('deleteChat', (global, actions, payload) => {\n  const { chatId }: { chatId: string } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddReducer('leaveChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('leaveChannel', { channelId, accessHash });\n  }\n});\n\naddReducer('deleteChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddReducer('createGroupChat', (global, actions, payload) => {\n  const { title, memberIds, photo } = payload!;\n  const members = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createGroupChat(title, members, photo);\n});\n\naddReducer('toggleChatPinned', (global, actions, payload) => {\n  const { id, folderId } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddReducer('toggleChatArchived', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddReducer('loadChatFolders', () => {\n  void loadChatFolders();\n});\n\naddReducer('loadRecommendedChatFolders', () => {\n  void loadRecommendedChatFolders();\n});\n\naddReducer('editChatFolders', (global, actions, payload) => {\n  const { chatId, idsToRemove, idsToAdd } = payload!;\n\n  (idsToRemove as number[]).forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  (idsToAdd as number[]).forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddReducer('editChatFolder', (global, actions, payload) => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddReducer('addChatFolder', (global, actions, payload) => {\n  const { folder } = payload!;\n  const { orderedIds } = global.chatFolders;\n  const maxId = orderedIds?.length ? Math.max.apply(Math.max, orderedIds) : ARCHIVED_FOLDER_ID;\n\n  void createChatFolder(folder, maxId);\n});\n\naddReducer('deleteChatFolder', (global, actions, payload) => {\n  const { id } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void deleteChatFolder(id);\n  }\n});\n\naddReducer('toggleChatUnread', (global, actions, payload) => {\n  const { id } = payload!;\n  const { serverTimeOffset } = global;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { serverTimeOffset, chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddReducer('openChatByInvite', (global, actions, payload) => {\n  const { hash } = payload!;\n\n  (async () => {\n    const result = await callApi('openChatByInvite', hash);\n    if (!result) {\n      return;\n    }\n\n    actions.openChat({ id: result.chatId });\n  })();\n});\n\naddReducer('openTelegramLink', (global, actions, payload) => {\n  const { url } = payload!;\n  if (url.match(RE_TG_LINK)) {\n    processDeepLink(url.match(RE_TG_LINK)[0]);\n    return;\n  }\n\n  const uri = new URL(url.startsWith('http') ? url : `https://${url}`);\n  const [part1, part2, part3] = uri.pathname.split('/').filter(Boolean).map((l) => decodeURI(l));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    actions.openChatByInvite({ hash });\n    return;\n  }\n\n  if (part1 === 'addstickers') {\n    actions.openStickerSetShortName({\n      stickerSetShortName: part2,\n    });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 ? Number(part2) : undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    actions.joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    actions.focusMessage({\n      chatId: -chatOrChannelPostId,\n      messageId,\n    });\n  } else {\n    actions.openChatByUsername({\n      username: part1,\n      messageId: messageId || chatOrChannelPostId,\n      commentId,\n    });\n  }\n});\n\naddReducer('acceptInviteConfirmation', (global, actions, payload) => {\n  const { hash } = payload!;\n  (async () => {\n    const result = await callApi('importChatInvite', { hash });\n    if (!result) {\n      return;\n    }\n\n    actions.openChat({ id: result.id });\n  })();\n});\n\naddReducer('openChatByUsername', (global, actions, payload) => {\n  const { username, messageId, commentId } = payload!;\n\n  (async () => {\n    const chat = selectCurrentChat(global);\n\n    if (!commentId) {\n      if (chat && chat.username === username) {\n        actions.focusMessage({ chatId: chat.id, messageId });\n        return;\n      }\n      await openChatByUsername(actions, username, messageId);\n      return;\n    }\n\n    const { chatId, type } = selectCurrentMessageList(global) || {};\n    const usernameChat = selectChatByUsername(global, username);\n    if (chatId && usernameChat && type === 'thread') {\n      const threadInfo = selectThreadInfo(global, chatId, messageId);\n\n      if (threadInfo && threadInfo.chatId === chatId) {\n        actions.focusMessage({\n          chatId: threadInfo.chatId,\n          threadId: threadInfo.threadId,\n          messageId: commentId,\n        });\n        return;\n      }\n    }\n\n    if (!messageId) return;\n\n    await openCommentsByUsername(actions, username, messageId, commentId);\n  })();\n});\n\naddReducer('togglePreHistoryHidden', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  let chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    void callApi('togglePreHistoryHidden', { chat, isEnabled });\n  })();\n});\n\naddReducer('updateChatDefaultBannedRights', (global, actions, payload) => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddReducer('updateChatMemberBannedRights', (global, actions, payload) => {\n  const { chatId, userId, bannedRights } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n    const isBanned = !!bannedRights.viewMessages;\n    const isUnblocked = !Object.keys(bannedRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(members && isBanned && {\n          members: members.filter((m) => m.userId !== userId),\n        }),\n        ...(members && !isBanned && {\n          members: members.map((m) => (\n            m.userId === userId\n              ? { ...m, bannedRights }\n              : m\n          )),\n        }),\n        ...(isUnblocked && kickedMembers && {\n          kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChatAdmin', (global, actions, payload) => {\n  const {\n    chatId, userId, adminRights, customTitle,\n  } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatAdmin', {\n      chat, user, adminRights, customTitle,\n    });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { adminMembers } = chatAfterUpdate.fullInfo;\n\n    const isDismissed = !Object.keys(adminRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(adminMembers && isDismissed && {\n          adminMembers: adminMembers.filter((m) => m.userId !== userId),\n        }),\n        ...(adminMembers && !isDismissed && {\n          adminMembers: adminMembers.map((m) => (\n            m.userId === userId\n              ? { ...m, adminRights, customTitle }\n              : m\n          )),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChat', (global, actions, payload) => {\n  const {\n    chatId, title, about, photo,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n    await Promise.all([\n      chat.title !== title\n        ? callApi('updateChatTitle', chat, title)\n        : undefined,\n      chat.fullInfo && chat.fullInfo.about !== about\n        ? callApi('updateChatAbout', chat, about)\n        : undefined,\n      photo\n        ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n        : undefined,\n    ]);\n\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n  })();\n});\n\naddReducer('toggleSignatures', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddReducer('loadGroupsForDiscussion', () => {\n  (async () => {\n    const groups = await callApi('fetchGroupsForDiscussion');\n    if (!groups) {\n      return;\n    }\n\n    const addedById = groups.reduce((result, group) => {\n      if (group) {\n        result[group.id] = group;\n      }\n\n      return result;\n    }, {} as Record<string, ApiChat>);\n\n    const global = addChats(getGlobal(), addedById);\n    setGlobal({\n      ...global,\n      chats: {\n        ...global.chats,\n        forDiscussionIds: Object.keys(addedById),\n      },\n    });\n  })();\n});\n\naddReducer('linkDiscussionGroup', (global, actions, payload) => {\n  const { channelId, chatId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  let chat = selectChat(global, chatId);\n  if (!channel || !chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    let { fullInfo } = chat;\n    if (!fullInfo) {\n      const fullChat = await callApi('fetchFullChat', chat);\n      if (!fullChat) {\n        return;\n      }\n\n      fullInfo = fullChat.fullInfo;\n    }\n\n    if (fullInfo!.isPreHistoryHidden) {\n      await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n    }\n\n    void callApi('setDiscussionGroup', { channel, chat });\n  })();\n});\n\naddReducer('unlinkDiscussionGroup', (global, actions, payload) => {\n  const { channelId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo?.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  (async () => {\n    await callApi('setDiscussionGroup', { channel });\n    if (chat) {\n      loadFullChat(chat);\n    }\n  })();\n});\n\naddReducer('setActiveChatFolder', (global, actions, payload) => {\n  return {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      activeChatFolder: payload,\n    },\n  };\n});\n\naddReducer('loadMoreMembers', (global) => {\n  (async () => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    if (!chat || isChatBasicGroup(chat)) {\n      return;\n    }\n\n    const offset = (chat.fullInfo?.members?.length) || undefined;\n    const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n    if (!result) {\n      return;\n    }\n\n    const { members, users } = result;\n    if (!members || !members.length) {\n      return;\n    }\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n    global = updateChat(global, chat.id, {\n      fullInfo: {\n        ...chat.fullInfo,\n        members: [\n          ...((chat.fullInfo || {}).members || []),\n          ...(members || []),\n        ],\n      },\n    });\n    setGlobal(global);\n  })();\n});\n\naddReducer('addChatMembers', (global, actions, payload) => {\n  const { chatId, memberIds } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as string[]).map((userId) => selectUser(global, userId)).filter<ApiUser>(Boolean as any);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState(NewChatMembersProgress.Loading);\n  (async () => {\n    await callApi('addChatMembers', chat, users);\n    actions.setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n    loadFullChat(chat);\n  })();\n});\n\naddReducer('deleteChatMember', (global, actions, payload) => {\n  const { chatId, userId } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    await callApi('deleteChatMember', chat, user);\n    loadFullChat(chat);\n  })();\n});\n\nasync function loadChats(listType: 'active' | 'archived', offsetId?: string, offsetDate?: number) {\n  let global = getGlobal();\n\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: global.chats.orderedPinnedIds[listType] === undefined,\n    serverTimeOffset: global.serverTimeOffset,\n    lastLocalServiceMessage: selectLastServiceNotification(global)?.message,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChatListIds(global, listType, chatIds);\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  Object.keys(result.draftsById).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId],\n    );\n  });\n\n  Object.keys(result.replyingToById).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat(chat: ApiChat) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const { users, fullInfo, groupCall } = result;\n\n  let global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  global = updateChat(global, chat.id, { fullInfo });\n\n  setGlobal(global);\n\n  return result;\n}\n\nasync function createChannel(title: string, users: ApiUser[], about?: string, photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChannel = await callApi('createChannel', { title, about, users });\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  let global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: channelId, shouldReplaceHistory: true });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n}\n\nasync function createGroupChat(title: string, users: ApiUser[], photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  try {\n    const createdChat = await callApi('createGroupChat', {\n      title,\n      users,\n    });\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    let global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = {\n      ...global,\n      chatCreation: {\n        ...global.chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    };\n    setGlobal(global);\n    getDispatch()\n      .openChat({\n        id: chatId,\n        shouldReplaceHistory: true,\n      });\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (e) {\n    if (e.message === 'USERS_TOO_FEW') {\n      const global = getGlobal();\n      setGlobal({\n        ...global,\n        chatCreation: {\n          ...global.chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      });\n    }\n  }\n}\n\nasync function loadChatFolders() {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    });\n  }\n}\n\nasync function loadRecommendedChatFolders() {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    });\n  }\n}\n\nasync function createChatFolder(folder: ApiChatFolder, maxId: number) {\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    });\n  }\n}\n\nasync function deleteChatFolder(id: number) {\n  await callApi('deleteChatFolder', id);\n}\n\nexport async function fetchChatByUsername(\n  username: string,\n) {\n  const global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const chat = await callApi('getChatByUsername', username);\n  if (!chat) {\n    return undefined;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  return chat;\n}\n\nasync function openChatByUsername(\n  actions: GlobalActions,\n  username: string,\n  channelPostId?: number,\n) {\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await fetchChatByUsername(username);\n\n  if (!chat) {\n    actions.openPreviousChat();\n    actions.showNotification({ message: 'User does not exist' });\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({ chatId: chat.id, messageId: channelPostId });\n  } else {\n    actions.openChat({ id: chat.id });\n  }\n}\n\nasync function openCommentsByUsername(\n  actions: GlobalActions,\n  username: string,\n  messageId: number,\n  commentId: number,\n) {\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await fetchChatByUsername(username);\n\n  if (!chat) return;\n\n  const global = getGlobal();\n\n  const threadInfo = selectThreadInfo(global, chat.id, messageId);\n  let discussionChatId: string | undefined;\n\n  if (!threadInfo) {\n    const result = await callApi('requestThreadInfoUpdate', { chat, threadId: messageId });\n    if (!result) return;\n\n    discussionChatId = result.discussionChatId;\n  } else {\n    discussionChatId = threadInfo.chatId;\n  }\n\n  if (!discussionChatId) return;\n\n  actions.focusMessage({\n    chatId: discussionChatId,\n    threadId: messageId,\n    messageId: Number(commentId),\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat } from '../../selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { ApiGroupCall } from '../../../api/types';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { addChats, addUsers } from '../../reducers';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport * as langProvider from '../../../util/langProvider';\n\n// Workaround for Safari not playing audio without user interaction\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\n\nconst joinAudio = new Audio('./voicechat_join.mp3');\nconst connectingAudio = new Audio('./voicechat_connecting.mp3');\nconnectingAudio.loop = true;\nconst leaveAudio = new Audio('./voicechat_leave.mp3');\nconst allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n\nconst sounds: Record<string, HTMLAudioElement> = {\n  join: joinAudio,\n  allowTalk: allowTalkAudio,\n  leave: leaveAudio,\n  connecting: connectingAudio,\n};\n\nlet initializationPromise: Promise<void> | undefined = Promise.resolve();\n\nconst initializeSoundsForSafari = () => {\n  if (!initializationPromise) return Promise.resolve();\n\n  initializationPromise = Promise.all(Object.values(sounds).map((l) => {\n    l.muted = true;\n    l.volume = 0.0001;\n    return l.play().then(() => {\n      l.pause();\n      l.volume = 1;\n      l.currentTime = 0;\n      l.muted = false;\n    });\n  })).then(() => {\n    initializationPromise = undefined;\n  });\n\n  return initializationPromise;\n};\n\nasync function fetchGroupCall(groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  let global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants(groupCall: Partial<ApiGroupCall>, nextOffset?: string) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddReducer('toggleGroupCallPanel', (global) => {\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      isGroupCallPanelHidden: !global.groupCalls.isGroupCallPanelHidden,\n    },\n  };\n});\n\naddReducer('subscribeToGroupCallUpdates', (global, actions, payload) => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  (async () => {\n    if (subscribed) {\n      await fetchGroupCall(groupCall);\n      await fetchGroupCallParticipants(groupCall);\n    }\n\n    await callApi('toggleGroupCallStartSubscription', {\n      subscribed,\n      call: groupCall,\n    });\n  })();\n});\n\naddReducer('createGroupCall', (global, actions, payload) => {\n  const { chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('createGroupCall', {\n      peer: chat,\n    });\n\n    if (!result) return;\n\n    global = getGlobal();\n    setGlobal(updateGroupCall(global, result.id, {\n      ...result,\n      chatId,\n    }));\n\n    actions.joinGroupCall({ id: result.id, accessHash: result.accessHash });\n  })();\n});\n\naddReducer('createGroupCallInviteLink', (global, actions) => {\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const canInvite = !!chat && !!chat.username;\n\n  (async () => {\n    let { inviteLink } = chat.fullInfo!;\n    if (canInvite) {\n      inviteLink = await callApi('exportGroupCallInvite', {\n        call: groupCall,\n        canSelfUnmute: false,\n      });\n    }\n\n    if (!inviteLink) {\n      return;\n    }\n\n    copyTextToClipboard(inviteLink);\n    actions.showNotification({\n      message: 'Link copied to clipboard',\n    });\n  })();\n});\n\naddReducer('joinVoiceChatByLink', (global, actions, payload) => {\n  const { username, inviteHash } = payload!;\n\n  (async () => {\n    const chat = await fetchChatByUsername(username);\n\n    if (!chat) {\n      actions.showNotification({ message: langProvider.getTranslation('NoUsernameFound') });\n      return;\n    }\n\n    const full = await loadFullChat(chat);\n\n    if (full?.groupCall) {\n      actions.joinGroupCall({ id: full.groupCall.id, accessHash: full.groupCall.accessHash, inviteHash });\n    }\n  })();\n});\n\naddReducer('joinGroupCall', (global, actions, payload) => {\n  if (!ARE_CALLS_SUPPORTED) return;\n\n  const {\n    chatId, id, accessHash, inviteHash,\n  } = payload;\n\n  createAudioElement();\n\n  (async () => {\n    await initializeSoundsForSafari();\n    const { groupCalls: { activeGroupCallId } } = global;\n    let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId);\n\n    if (groupCall?.id === activeGroupCallId) {\n      actions.toggleGroupCallPanel();\n      return;\n    }\n\n    if (activeGroupCallId) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n      });\n      return;\n    }\n\n    if (groupCall && activeGroupCallId === groupCall.id) {\n      actions.toggleGroupCallPanel();\n      return;\n    }\n\n    if (!groupCall && (!id || !accessHash)) {\n      groupCall = await fetchGroupCall({\n        id,\n        accessHash,\n      });\n    }\n\n    if (!groupCall) return;\n\n    global = getGlobal();\n\n    global = updateGroupCall(\n      global,\n      groupCall.id,\n      {\n        ...groupCall,\n        inviteHash,\n      },\n      undefined,\n      groupCall.participantsCount + 1,\n    );\n\n    setGlobal({\n      ...global,\n      groupCalls: {\n        ...global.groupCalls,\n        activeGroupCallId: groupCall.id,\n        isGroupCallPanelHidden: false,\n      },\n    });\n  })();\n});\n\naddReducer('playGroupCallSound', (global, actions, payload) => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  if (initializationPromise) {\n    initializationPromise.then(() => {\n      safePlay(sounds[sound]);\n    });\n  } else {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    safePlay(sounds[sound]);\n  }\n});\n\naddReducer('loadMoreGroupCallParticipants', (global) => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(groupCall, groupCall.nextOffset);\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\naddReducer('openCallFallbackConfirm', (global) => {\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      isFallbackConfirmOpen: true,\n    },\n  };\n});\n\naddReducer('closeCallFallbackConfirm', (global) => {\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      isFallbackConfirmOpen: false,\n    },\n  };\n});\n","import { GroupCallParticipant } from '../../lib/secret-sauce';\nimport { GlobalState } from '../../global/types';\nimport { ApiGroupCall } from '../../api/types';\nimport { selectGroupCall } from '../selectors/calls';\nimport { omit } from '../../util/iteratees';\nimport { updateChat } from './chats';\nimport { selectChat } from '../selectors';\n\nexport function updateGroupCall(\n  global: GlobalState,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): GlobalState {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter((l) => !l.isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall(\n  global: GlobalState,\n  groupCallId: string,\n): GlobalState {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChat(global, groupCall.chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          groupCallId: undefined,\n        },\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall(\n  global: GlobalState,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): GlobalState {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant(\n  global: GlobalState,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n) {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n","import { GlobalState } from '../../global/types';\nimport { selectChat } from './chats';\nimport { getUserFullName, isChatBasicGroup } from '../helpers';\nimport { selectUser } from './users';\n\nexport function selectChatGroupCall(global: GlobalState, chatId: string) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !chat.fullInfo || !chat.fullInfo.groupCallId) return undefined;\n\n  return selectGroupCall(global, chat.fullInfo.groupCallId);\n}\n\nexport function selectGroupCall(global: GlobalState, groupCallId: string) {\n  return global.groupCalls.byId[groupCallId];\n}\n\nexport function selectGroupCallParticipant(global: GlobalState, groupCallId: string, participantId: string) {\n  return selectGroupCall(global, groupCallId)?.participants[participantId];\n}\n\nexport function selectIsAdminInActiveGroupCall(global: GlobalState): boolean {\n  const chatId = selectActiveGroupCall(global)?.chatId;\n\n  if (!chatId) return false;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return false;\n\n  return (isChatBasicGroup(chat) && chat.isCreator) || !!chat.adminRights?.manageCall;\n}\n\nexport function selectActiveGroupCall(global: GlobalState) {\n  const { groupCalls: { activeGroupCallId } } = global;\n  if (!activeGroupCallId) {\n    return undefined;\n  }\n\n  return selectGroupCall(global, activeGroupCallId);\n}\n\nexport function selectCallFallbackChannelTitle(global: GlobalState) {\n  const currentUser = selectUser(global, global.currentUserId!);\n\n  return `Calls: ${getUserFullName(currentUser!)}`;\n}\n","import { getDispatch } from '../lib/teact/teactn';\n\ntype DeepLinkMethod = 'resolve' | 'login' | 'passport' | 'settings' | 'join' | 'addstickers' | 'setlanguage' |\n'addtheme' | 'confirmphone' | 'socks' | 'proxy' | 'privatepost' | 'bg' | 'share' | 'msg' | 'msg_url';\n\nexport const processDeepLink = (url: string) => {\n  const { protocol, searchParams, pathname } = new URL(url);\n\n  if (protocol !== 'tg:') return;\n\n  const {\n    openChatByInvite,\n    openChatByUsername,\n    openStickerSetShortName,\n    focusMessage,\n    joinVoiceChatByLink,\n  } = getDispatch();\n\n  const method = pathname.replace(/^\\/\\//, '') as DeepLinkMethod;\n  const params: Record<string, string> = {};\n  searchParams.forEach((value, key) => {\n    params[key] = value;\n  });\n\n  switch (method) {\n    case 'resolve': {\n      const {\n        domain, post, comment, voicechat, livestream,\n      } = params;\n\n      if (domain !== 'telegrampassport') {\n        if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n          joinVoiceChatByLink({\n            username: domain,\n            inviteHash: voicechat || livestream,\n          });\n        } else {\n          openChatByUsername({\n            username: domain,\n            messageId: Number(post),\n            commentId: Number(comment),\n          });\n        }\n      }\n      break;\n    }\n    case 'privatepost': {\n      const {\n        post, channel,\n      } = params;\n\n      focusMessage({\n        chatId: -Number(channel),\n        id: post,\n      });\n      break;\n    }\n    case 'bg': {\n      // const {\n      //   slug, color, rotation, mode, intensity, bg_color: bgColor, gradient,\n      // } = params;\n      break;\n    }\n    case 'join': {\n      const { invite } = params;\n\n      openChatByInvite({ hash: invite });\n      break;\n    }\n    case 'addstickers': {\n      const { set } = params;\n\n      openStickerSetShortName({\n        stickerSetShortName: set,\n      });\n      break;\n    }\n    case 'share':\n    case 'msg': {\n      // const { url, text } = params;\n      break;\n    }\n    case 'login': {\n      // const { code, token } = params;\n      break;\n    }\n    default:\n      // Unsupported deeplink\n\n      break;\n  }\n};\n"],"names":["memo","withGlobal","global","userId","chat","selectCurrentChat","user","selectUser","contactName","getUserFirstOrLastName","undefined","setGlobal","actions","pick","isOpen","onClose","deleteChatMember","lang","useLang","handleDeleteChatMember","useCallback","chatId","id","onEnter","className","title","renderText","color","isText","onClick","ms","noFirst","useMemo","throttle","cb","runThrottledForLoadChats","runThrottledForLoadTopChats","runDebouncedForLoadFullChat","debounce","async","loadChats","listType","offsetId","offsetDate","getGlobal","result","callApi","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","chats","orderedPinnedIds","serverTimeOffset","lastLocalServiceMessage","selectLastServiceNotification","message","chatIds","length","shift","addUsers","buildCollectionByKey","users","updateChats","updateChatListIds","updateChatListSecondaryInfo","Object","keys","draftsById","forEach","replaceThreadParam","MAIN_THREAD_ID","replyingToById","isFullyLoaded","loadFullChat","fullInfo","groupCall","existingGroupCall","selectGroupCall","updateGroupCall","omit","participantsCount","updateChat","fetchChatByUsername","username","localChat","selectChatByUsername","isMin","addReducer","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","byId","listIds","active","currentChatId","selectCurrentMessageList","pinnedChats","otherChats","prepareChatList","chatToPreload","find","includes","push","loadViewportMessages","threadId","payload","currentUserId","selectChat","hasUnreadMark","toggleChatUnread","lastMessage","threadInfo","requestThreadInfoUpdate","isChatSummaryOnly","requestChatUpdate","type","selectThreadTopMessageId","chatFullInfo","linkedChatId","openChat","messageId","focusMessage","selectSupportChat","shouldReplaceHistory","TMP_CHAT_ID","langCode","usernamePostfix","LOCALIZED_TIPS","toUpperCase","openChatByUsername","TIPS_USERNAME","oldestChat","map","filter","Boolean","selectIsChatPinned","sort","chat1","chat2","date","currentGlobal","force","SERVICE_NOTIFICATIONS_USER_ID","lastLocalMessage","isMuted","about","photo","memberIds","chatCreation","progress","ChatCreationProgress","createdChannel","channelId","accessHash","getDispatch","createChannel","leaveChat","createdChat","e","error","createGroupChat","folderId","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","isChatArchived","chatFolders","loadChatFolders","recommendedChatFolders","recommended","loadRecommendedChatFolders","idsToRemove","idsToAdd","includedId","concat","emoticon","orderedIds","maxId","recommendedId","description","newFolder","createChatFolder","Math","max","apply","deleteChatFolder","unreadCount","hash","url","match","RE_TG_LINK","processDeepLink","uri","URL","startsWith","part1","part2","part3","pathname","split","l","decodeURI","params","fromEntries","searchParams","substr","openChatByInvite","openStickerSetShortName","stickerSetShortName","chatOrChannelPostId","Number","commentId","comment","hasOwnProperty","joinVoiceChatByLink","inviteHash","voicechat","livestream","channelPostId","openPreviousChat","showNotification","usernameChat","selectThreadInfo","discussionChatId","openCommentsByUsername","isEnabled","isChatBasicGroup","bannedRights","newGlobal","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembers","isDismissed","updateManagementProgress","ManagementProgress","Promise","all","groups","addedById","reduce","group","addChats","forDiscussionIds","channel","fullChat","isPreHistoryHidden","activeChatFolder","offset","setNewChatMembersDialogState","NewChatMembersProgress","audioElement","audioContext","joinAudio","Audio","connectingAudio","loop","leaveAudio","sounds","join","allowTalk","leave","connecting","initializationPromise","resolve","fetchGroupCall","call","isLoaded","fetchGroupCallParticipants","nextOffset","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","groupCalls","isGroupCallPanelHidden","subscribed","peer","joinGroupCall","selectActiveGroupCall","canInvite","inviteLink","canSelfUnmute","copyTextToClipboard","langProvider","full","ARE_CALLS_SUPPORTED","ctx","window","AudioContext","webkitAudioContext","srcObject","oscillator","createOscillator","dst","connect","createMediaStreamDestination","start","MediaStream","assign","stream","getAudioTracks","enabled","silence","safePlay","createAudioElement","values","muted","volume","play","then","currentTime","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","toggleGroupCallPanel","sound","isFallbackConfirmOpen","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","acc","el","removeGroupCall","toString","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount","selectGroupCallParticipant","participantId","selectIsAdminInActiveGroupCall","isCreator","manageCall","selectCallFallbackChannelTitle","currentUser","getUserFullName","protocol","method","replace","value","key","domain","post","invite","set"],"sourceRoot":""}