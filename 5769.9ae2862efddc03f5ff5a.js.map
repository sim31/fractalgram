{"version":3,"file":"5769.9ae2862efddc03f5ff5a.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/util/areDeepEqual.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/util/permanentWebVersion.ts","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/HeaderActions.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/calls/group/GroupCallTopPane.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/audio.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/hooks/useDebouncedMemo.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.module.scss?7e9f","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotMenuButton.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/main/WebAppModal.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { GlobalState } from '../../types';\n\naddActionHandler('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddActionHandler('closeLocalTextSearch', closeLocalTextSearch);\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddActionHandler('openChat', (global, actions, payload) => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (global.premiumModal?.promo && global.premiumModal?.isOpen) {\n    global = {\n      ...global,\n      premiumModal: {\n        ...global.premiumModal,\n        isOpen: false,\n      },\n    };\n  }\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    if (id) {\n      global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    }\n\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      isStatisticsShown: false,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory);\n});\n\naddActionHandler('openPreviousChat', (global) => {\n  return updateCurrentMessageList(global, undefined);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload) => {\n  const { chatId, text, files } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId });\n  }\n\n  return {\n    ...global,\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n    },\n  };\n});\n\naddActionHandler('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddActionHandler('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true });\n});\n\naddActionHandler('openDeleteChatFolderModal', (global, actions, payload) => {\n  const { folderId } = payload;\n  return {\n    ...global,\n    deleteFolderDialogModal: folderId,\n  };\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global) => {\n  return {\n    ...global,\n    deleteFolderDialogModal: undefined,\n  };\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  RELEASE_DATETIME,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n  selectScheduledMessages,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport type { GlobalState } from '../../types';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload) => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? global.audioPlayer.origin,\n      volume: volume ?? global.audioPlayer.volume,\n      playbackRate: playbackRate || global.audioPlayer.playbackRate,\n      isMuted: isMuted || global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload) => {\n  const {\n    origin,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      origin,\n    },\n  };\n});\n\naddActionHandler('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {\n      volume: global.audioPlayer.volume,\n      playbackRate: global.audioPlayer.playbackRate,\n      isMuted: global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      setGlobal({\n        ...global,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    return {\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    };\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global) => {\n  return {\n    ...global,\n    pollResults: {},\n  };\n});\n\naddActionHandler('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage();\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids?.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId, shouldReplaceHistory });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId, shouldReplaceHistory });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload) => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore,\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  };\n});\n\naddActionHandler('changeForwardRecipient', (global) => {\n  return {\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  };\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload) => {\n  return {\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      noAuthors: payload,\n      noCaptions: payload && global.forwardMessages.noCaptions, // `noCaptions` cannot be true when `noAuthors` is false\n    },\n  };\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload) => {\n  return {\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      noCaptions: payload,\n      noAuthors: payload, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  };\n});\n\naddActionHandler('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload) => {\n  const { message } = payload;\n\n  const byChatId = global.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  });\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload) => {\n  const { messages } = payload;\n\n  const byChatId = global.activeDownloads.byChatId;\n  const newByChatId: GlobalState['activeDownloads']['byChatId'] = {};\n  Object.keys(byChatId).forEach((chatId) => {\n    newByChatId[chatId] = byChatId[chatId].filter((id) => !messages.find((message) => message.id === id));\n  });\n  return {\n    ...global,\n    activeDownloads: {\n      byChatId: newByChatId,\n    },\n  };\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload) => {\n  const { message } = payload;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: [...(global.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  });\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', exitMessageSelectMode);\n\naddActionHandler('openPollModal', (global, actions, payload) => {\n  const { isQuiz } = payload || {};\n  return {\n    ...global,\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  };\n});\n\naddActionHandler('closePollModal', (global) => {\n  return {\n    ...global,\n    pollModal: {\n      isOpen: false,\n    },\n  };\n});\n\naddActionHandler('checkVersionNotification', (global, actions) => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(global.serverTimeOffset),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload) => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  setGlobal({\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  });\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    reactorModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeReactorListModal', (global) => {\n  return {\n    ...global,\n    reactorModal: undefined,\n  };\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    seenByModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeSeenByModal', (global) => {\n  return {\n    ...global,\n    seenByModal: undefined,\n  };\n});\n\naddActionHandler('copySelectedMessages', (global) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload: { messageIds?: number[] }) => {\n  const { messageIds } = payload;\n  const chat = selectCurrentChat(global);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.getTranslation;\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  const resultText = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, undefined, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyHtmlToClipboard(result.join('\\n'), resultText.join('\\n'));\n}\n","import type { LangFn } from '../../hooks/useLang';\nimport type { ApiMessage } from '../../api/types';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    message, undefined, undefined, undefined, undefined, undefined, true,\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddActionHandler('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  return {\n    ...global,\n    newContact: { userId },\n  };\n});\n\naddActionHandler('openNewContactDialog', (global) => {\n  return {\n    ...global,\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  };\n});\n\naddActionHandler('closeNewContactDialog', (global) => {\n  return closeNewContactDialog(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\n\nimport { APP_VERSION, DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectChatMessage, selectCurrentMessageList, selectIsTrustedBot } from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\nimport { unique } from '../../../util/iteratees';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, action, payload) => {\n  return {\n    ...global,\n    isChatInfoShown: payload !== undefined ? payload : !global.isChatInfoShown,\n  };\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload) => {\n  const leftColumnWidth = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global) => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload) => {\n  const { screen } = payload || {};\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('closeManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('openChat', (global) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    isLeftColumnShown: global.messages.messageLists.length === 0,\n  };\n});\n\naddActionHandler('toggleStatistics', (global) => {\n  return {\n    ...global,\n    isStatisticsShown: !global.isStatisticsShown,\n    statistics: {\n      ...global.statistics,\n      currentMessageId: undefined,\n    },\n  };\n});\n\naddActionHandler('toggleMessageStatistics', (global, action, payload) => {\n  return {\n    ...global,\n    statistics: {\n      ...global.statistics,\n      currentMessageId: payload?.messageId,\n    },\n  };\n});\n\naddActionHandler('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddActionHandler('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, action, payload) => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global) => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, action, payload) => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      [isCustomEmoji ? 'customEmoji' : 'added']: {\n        setIds: order,\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('dismissNotification', (global, actions, payload) => {\n  const newNotifications = global.notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddActionHandler('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n\naddActionHandler('openGame', (global, actions, payload) => {\n  const { url, chatId, messageId } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  });\n});\n\naddActionHandler('closeGame', (global) => {\n  return {\n    ...global,\n    openedGame: undefined,\n  };\n});\n\naddActionHandler('requestConfetti', (global, actions, payload) => {\n  const {\n    top, left, width, height,\n  } = payload || {};\n  const { animationLevel } = global.settings.byKey;\n  if (animationLevel === 0) return undefined;\n\n  return {\n    ...global,\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload) => {\n  const { limit } = payload;\n\n  return {\n    ...global,\n    limitReachedModal: {\n      limit,\n    },\n  };\n});\n\naddActionHandler('closeLimitReachedModal', (global) => {\n  return {\n    ...global,\n    limitReachedModal: undefined,\n  };\n});\n\naddActionHandler('closeStickerSetModal', (global) => {\n  return {\n    ...global,\n    openedStickerSetShortName: undefined,\n  };\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload) => {\n  const { setIds } = payload;\n  return {\n    ...global,\n    openedCustomEmojiSetIds: setIds,\n  };\n});\n\naddActionHandler('closeCustomEmojiSets', (global) => {\n  return {\n    ...global,\n    openedCustomEmojiSetIds: undefined,\n  };\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload) => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('checkAppVersion', () => {\n  const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (APP_VERSION_REGEX.test(version) && version !== APP_VERSION) {\n        setGlobal({\n          ...getGlobal(),\n          isUpdateAvailable: true,\n        });\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\n\naddActionHandler('closePaymentModal', (global) => {\n  const status = global.payment.status;\n  global = clearPayment(global);\n  global = closeInvoice(global);\n  global = {\n    ...global,\n    payment: {\n      ...global.payment,\n      status,\n    },\n  };\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      status: 'failed',\n      error,\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? global.mediaViewer.volume,\n      playbackRate: playbackRate || global.mediaViewer.playbackRate,\n      isMuted: isMuted || global.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  };\n});\n\naddActionHandler('closeMediaViewer', (global) => {\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = global.mediaViewer;\n  return {\n    ...global,\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      isMuted,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload) => {\n  const isHidden = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      isHidden,\n    },\n  };\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { clearEncryptedSession, encryptSession, setupPasscode } from '../../../util/passcode';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { cloneDeep } from '../../../util/iteratees';\nimport { INITIAL_STATE } from '../../initialState';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, { passcode }) => {\n  setGlobal(updatePasscodeSettings(global, {\n    isLoading: true,\n  }));\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  const globalJson = serializeGlobal(updatePasscodeSettings(getGlobal(), {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  await encryptSession(sessionJson, globalJson);\n\n  setGlobal(updatePasscodeSettings(getGlobal(), {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  forceUpdateCache(true);\n});\n\naddActionHandler('clearPasscode', (global) => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, { sessionJson, globalJson }) => {\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  global = JSON.parse(globalJson);\n  migrateCache(global, cloneDeep(INITIAL_STATE));\n\n  setGlobal(updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  ));\n\n  actions.initApi();\n});\n\naddActionHandler('logInvalidUnlockAttempt', (global) => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: (global.passcode?.invalidAttemptsCount ?? 0) + 1,\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global) => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload) => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global) => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', () => {\n  noLockOnUnload = true;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { GlobalActions } from '../../types';\nimport type {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport {\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/environment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n  updateSponsoredMessage,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n  selectUser,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectIsCurrentUserPremium,\n  selectForwardsContainVoiceMessages,\n} from '../../selectors';\nimport {\n  debounce, onTickEnd, rafPromise,\n} from '../../../util/schedulers';\nimport {\n  getMessageOriginalId, getUserFullName, isDeletedUser, isServiceNotificationMessage, isUserBot,\n} from '../../helpers';\nimport { getTranslation } from '../../../util/langProvider';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n    });\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload) => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n\n    setGlobal(updateThreadUnreadFromForwardedMessage(\n      getGlobal(),\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    ));\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', async (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return;\n\n  if (threadId === MAIN_THREAD_ID) {\n    const result = await callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n\n    if (!result) {\n      draft.isLocal = true;\n    }\n  }\n  global = getGlobal();\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n});\n\naddActionHandler('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddActionHandler('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload) => {\n  const { chatId, shouldDeleteForAll } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  const activeChat = selectCurrentMessageList(global);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload) => {\n  const {\n    messageIds, reason, description,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload) => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const { maxId } = payload!;\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n\n  // TODO Support local marking read for threads\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddActionHandler('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddActionHandler('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload) => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, action, payload) => {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions,\n  } = global.forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages) {\n    return;\n  }\n\n  const { isSilent, scheduledAt } = payload;\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      messages: realMessages,\n      serverTimeOffset: getGlobal().serverTimeOffset,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      withMyScore,\n      noAuthors,\n      noCaptions,\n      isCurrentUserPremium,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage({\n        chat: toChat,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('loadScheduledHistory', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadScheduledHistory(chat);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload) => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = updateChatMessage(getGlobal(), chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload) => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  let global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  serverTimeOffset?: number;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  replyingToTopId?: number;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  if (params.replyingTo && !params.replyingToTopId && threadId !== MAIN_THREAD_ID) {\n    params.replyingToTopId = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddActionHandler('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateChatMessage(getGlobal(), chatId, messageId, {\n    seenByUserIds: result,\n  }));\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload) => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    setGlobal(updateChat(getGlobal(), chatId, {\n      sendAsPeerIds: [],\n    }));\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat) {\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload) => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload) => {\n  const { messageIds } = payload;\n\n  const chat = selectCurrentChat(global);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds });\n});\n\naddActionHandler('focusNextMention', (global, actions) => {\n  const chat = selectCurrentChat(global);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0] });\n});\n\naddActionHandler('readAllMentions', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload) => {\n  const { url, shouldSkipModal } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    actions.openTelegramLink({ url });\n    return;\n  }\n\n  const { appConfig } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, appConfig.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.requestLinkUrlAuth({ url });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatId', async (global, actions, payload) => {\n  const { id } = payload;\n  let user = selectUser(global, id);\n  if (user && selectForwardsContainVoiceMessages(global)) {\n    if (!user.fullInfo) {\n      const { accessHash } = user;\n      user = await callApi('fetchFullUser', { id, accessHash });\n      global = getGlobal();\n    }\n\n    if (user?.fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: getTranslation('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n      });\n      return;\n    }\n  }\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  });\n\n  actions.exitMessageSelectMode();\n  actions.forwardMessages({ isSilent: true });\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiStickerSetInfo, ApiSticker } from '../../../api/types';\nimport type { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { onTickEnd, pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n  updateCustomEmojiForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { getTranslation } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildCollectionByKey } from '../../../util/iteratees';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', (global, actions) => {\n  void loadStickerSets(global.stickers.added.hash);\n  void loadCustomEmojiSets(global.customEmojis.added.hash);\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions) => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddActionHandler('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddActionHandler('loadPremiumStickers', async (global) => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  });\n});\n\naddActionHandler('loadPremiumSetStickers', async (global) => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  });\n});\n\naddActionHandler('loadGreetingStickers', async (global) => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  });\n});\n\naddActionHandler('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddActionHandler('loadPremiumGifts', async () => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal({\n    ...getGlobal(),\n    premiumGifts: { ...set, stickers },\n  });\n});\n\naddActionHandler('loadStickers', (global, actions, payload) => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n  void loadAnimatedEmojiEffects();\n});\n\naddActionHandler('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddActionHandler('saveGif', async (global, actions, payload) => {\n  const { gif, shouldUnsave } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.getTranslation('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.getTranslation('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.getTranslation('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && { action: actions.openPremiumModal }),\n      className: 'bold-link',\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  });\n});\n\naddActionHandler('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.getTranslation('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.getTranslation('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.getTranslation('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && { action: actions.openPremiumModal }),\n      className: 'bold-link',\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, action, payload) => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  loadRecentStickers();\n});\n\naddActionHandler('clearRecentStickers', async (global) => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  });\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    });\n\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  });\n});\n\nasync function loadCustomEmojiSets(hash?: string) {\n  const addedCustomEmojis = await callApi('fetchCustomEmojiSets', { hash });\n  if (!addedCustomEmojis) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  ));\n}\n\nasync function loadStickerSets(hash?: string) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash?: string) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash?: string) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetInfo: ApiStickerSetInfo) {\n  const stickerSet = await callApi(\n    'fetchStickers',\n    { stickerSetInfo },\n  );\n  let global = getGlobal();\n\n  if (!stickerSet) {\n    onTickEnd(() => {\n      getActions().showNotification({\n        message: getTranslation('StickerPack.ErrorNotFound'),\n      });\n    });\n    if ('shortName' in stickerSetInfo && global.openedStickerSetShortName === stickerSetInfo.shortName) {\n      setGlobal({\n        ...global,\n        openedStickerSetShortName: undefined,\n      });\n    }\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nasync function loadAnimatedEmojiEffects() {\n  const stickerSet = await callApi('fetchAnimatedEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal({\n    ...getGlobal(),\n    animatedEmojiEffects: { ...set, stickers },\n  });\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload) => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global) => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global) => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  });\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload) => {\n  const { stickerSetInfo } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    actions.showNotification({\n      message: getTranslation('StickerPack.ErrorNotFound'),\n    });\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    openedStickerSetShortName: set.shortName,\n  });\n});\n\nasync function searchStickers(query: string, hash?: string) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash?: string) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash?: string) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(global);\n\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalChats.map(({ id }) => id),\n      userIds: globalUsers.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\n\naddActionHandler('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chat, type, offsetId);\n});\n\naddActionHandler('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chat: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chat: ApiChat,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    searchSharedMedia(chat, type, nextOffsetId, true);\n  }\n}\n\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getActions().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addUsers, updateChat, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport { migrateChat } from './chats';\nimport { isChatBasicGroup } from '../../helpers';\n\naddActionHandler('checkPublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagement(global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined });\n  setGlobal(global);\n\n  const isUsernameAvailable = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n  );\n  global = updateManagement(global, chatId, { isUsernameAvailable, checkedUsername: username });\n  setGlobal(global);\n\n  if (isUsernameAvailable === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic' });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress);\n  setGlobal(global);\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n  global = updateManagement(global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined });\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  setGlobal(updateManagement(global, chatId, { editingInvite: invite }));\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  setGlobal(updateManagement(global, chatId, update));\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId, isRevoked, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n\n  const update = isRevoked ? { revokedInvites: result } : { invites: result };\n\n  setGlobal(updateManagement(getGlobal(), chatId, update));\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const invites = (global.management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(global.management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  setGlobal(updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }));\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = global.management.byChatId[chatId].invites || [];\n  setGlobal(updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }));\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = global.management.byChatId[chatId];\n  setGlobal(updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }));\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(updateManagement(global, chatId, {\n    revokedInvites: [],\n  }));\n});\n\naddActionHandler('loadChatInviteImporters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload) => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  setGlobal(updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  }));\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  setGlobal(updateChat(global, chatId, {\n    joinRequests: [],\n    fullInfo: {\n      ...targetChat.fullInfo,\n      recentRequesterIds: [],\n      requestsPending: 0,\n    },\n  }));\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  setGlobal(updateChat(getGlobal(), chatId, {\n    settings: undefined,\n  }));\n});\n","import {\n  addActionHandler, getGlobal, setGlobal, getActions,\n} from '../../index';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { GlobalState, Thread } from '../../types';\n\nimport {\n  DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  updateUsers,\n  updateChats,\n  updateThreadInfos,\n  updateListedIds,\n  safeReplaceViewportIds,\n  addChatMessagesById,\n  updateThread,\n} from '../../reducers';\nimport {\n  selectCurrentMessageList,\n  selectDraft,\n  selectChatMessage,\n  selectThreadInfo,\n  selectEditingId,\n  selectEditingDraft,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', () => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  setGlobal({ ...getGlobal(), isSyncing: true });\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    setGlobal({ ...getGlobal(), isSyncing: false });\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = getActions();\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages();\n\n      setGlobal({\n        ...getGlobal(),\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      });\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages() {\n  let areMessagesLoaded = false;\n\n  let global = getGlobal();\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, Partial<Thread>>>((acc, chatId) => {\n    acc[chatId] = {};\n    acc[chatId].draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    acc[chatId].editingId = selectEditingId(global, chatId, MAIN_THREAD_ID);\n    acc[chatId].editingDraft = selectEditingDraft(global, chatId, MAIN_THREAD_ID);\n\n    return acc;\n  }, {});\n\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n  const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n  if (currentChatId && currentChat) {\n    const result = await loadTopMessages(currentChat);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n        ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n        : [];\n      const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n      const byId = buildCollectionByKey(allMessages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {},\n        },\n      };\n\n      global = addChatMessagesById(global, currentChatId, byId);\n      global = updateListedIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n      global = safeReplaceViewportIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        global = getGlobal();\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin).map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin?.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo?.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    global = updateThread(global, chatId, MAIN_THREAD_ID, draftsByChatId[chatId]);\n  });\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getActions().closeAudioPlayer();\n  }\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState } = global;\n  if (previousGlobal?.connectionState === connectionState && previousGlobal?.authState === authState) return;\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getTranslation } from '../../../util/langProvider';\n\naddActionHandler('reportPeer', async (global, actions, payload) => {\n  const {\n    chatId,\n    reason,\n    description,\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload) => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('loadAuthorizations', async () => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  });\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  setGlobal({\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  });\n});\n\naddActionHandler('terminateAllAuthorizations', async (global) => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  setGlobal({\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  });\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload) => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  });\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload) => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  });\n});\n\naddActionHandler('loadWebAuthorizations', async () => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    activeWebSessions: {\n      byHash: result,\n      orderedHashes: Object.keys(result),\n    },\n  });\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  setGlobal({\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  });\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global) => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  });\n});\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  callApi('fetchFullUser', { id, accessHash });\n});\n\naddActionHandler('loadUser', async (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', (global) => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!lastRequestedAt || getServerTime(global.serverTimeOffset) - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers();\n  }\n});\n\naddActionHandler('loadContactList', () => {\n  void loadContactList();\n});\n\naddActionHandler('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n  } = payload;\n\n  void updateContact(userId, isMuted, firstName, lastName, shouldSharePhoneNumber);\n});\n\naddActionHandler('deleteContact', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteContact(userId);\n});\n\nasync function loadTopUsers() {\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList() {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: string,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n  shouldSharePhoneNumber?: boolean,\n) {\n  let global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getActions().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    getActions().loadChatSettings({ chatId: userId });\n\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete);\n  global = closeNewContactDialog(global);\n  setGlobal(global);\n}\n\nasync function deleteContact(userId: string) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n}\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos: result.photos });\n  } else {\n    global = addUsers(global, buildCollectionByKey(result.users!, 'id'));\n    global = updateChat(global, profileId, { photos: result.photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload) => {\n  const { phoneNumber: phone, firstName, lastName } = payload!;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.getTranslation('Contacts.PhoneNumber.NotRegistred'),\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result });\n\n  setGlobal(closeNewContactDialog(getGlobal()));\n});\n\naddActionHandler('reportSpam', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import type { GlobalState } from '../types';\nimport type { InlineBotSettings } from '../../types';\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import { IS_ANDROID, IS_IOS } from './environment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type {\n  ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList,\n  selectIsTrustedBot, selectReplyingToId, selectSendAs, selectUser,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload) => {\n  const { messageId, button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, messageId, button.data);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({ receiptMessageId, chatId: chat.id, messageId });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, messageId, undefined, true);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({ query, isSamePeer, messageId });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentUserId || !chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId: chat.id, threadId, value: false });\n\n  void sendBotCommand(\n    chat, currentUserId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chatId),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  setGlobal(removeBlockedContact(getGlobal(), bot.id));\n  void sendBotCommand(chat, currentUserId, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global) => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime(global.serverTimeOffset) - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      setGlobal(replaceInlineBotSettings(global, username, false));\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot({\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    });\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload) => {\n  const { query, isSamePeer, messageId } = payload;\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return undefined;\n  }\n  const message = selectChatMessage(global, chat.id, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, message.viaBotId || message.senderId!);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload) => {\n  const {\n    id, queryId, isSilent, scheduledAt,\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n});\n\naddActionHandler('startBot', async (global, actions, payload) => {\n  const { botId, param } = payload;\n\n  let bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n  if (!bot.fullInfo) await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n  bot = selectUser(getGlobal(), botId)!;\n  if (bot.fullInfo?.isBlocked) await callApi('unblockContact', bot.id, bot.accessHash);\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload) => {\n  const {\n    url, botId, theme, buttonText,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  });\n});\n\naddActionHandler('requestWebView', async (global, actions, payload) => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      buttonText,\n    },\n  });\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload) => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp();\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload) => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global) => {\n  return {\n    ...global,\n    webApp: undefined,\n  };\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload) => {\n  if (!global.webApp?.url) return undefined;\n  return {\n    ...global,\n    webApp: {\n      ...global.webApp,\n      slug: payload.slug,\n    },\n  };\n});\n\naddActionHandler('cancelBotTrustRequest', (global) => {\n  return {\n    ...global,\n    botTrustRequest: undefined,\n  };\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload) => {\n  const { botId } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n  setGlobal({\n    ...global,\n    botTrustRequest: undefined,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  });\n\n  if (global.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = global.botTrustRequest.onConfirm;\n    actions[action](callbackPayload);\n  }\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload) => {\n  const { hash } = payload || {};\n  await loadAttachBots(hash);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload) => {\n  const { botId, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleAttachBot(bot, isEnabled);\n});\n\nasync function toggleAttachBot(bot: ApiUser, isEnabled: boolean) {\n  await callApi('toggleAttachBot', { bot, isEnabled });\n  await loadAttachBots();\n}\n\nasync function loadAttachBots(hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  setGlobal({\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  });\n}\n\naddActionHandler('callAttachBot', (global, actions, payload) => {\n  const {\n    chatId, botId, isFromBotMenu, url, startParam,\n  } = payload;\n  const { attachMenu: { bots } } = global;\n  if (!isFromBotMenu && !bots[botId]) {\n    return {\n      ...global,\n      requestedAttachBotInstall: {\n        botId,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: { chatId, botId, startParam },\n        },\n      },\n    };\n  }\n  const theme = extractCurrentThemeParams();\n  actions.openChat({ id: chatId });\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global) => {\n  const { requestedAttachBotInstall } = global;\n\n  const { botId, onConfirm } = requestedAttachBotInstall!;\n\n  setGlobal({\n    ...global,\n    requestedAttachBotInstall: undefined,\n  });\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  await toggleAttachBot(bot, true);\n  if (onConfirm) {\n    const { action, payload } = onConfirm;\n    getActions()[action](payload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global) => {\n  return {\n    ...global,\n    requestedAttachBotInstall: undefined,\n  };\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload) => {\n  const { botId, filter, startParam } = payload;\n  const currentChatId = selectCurrentMessageList(global)?.chatId;\n\n  const { attachMenu: { bots } } = global;\n  const bot = bots[botId];\n  if (!bot) return;\n  const supportedFilters = bot.peerTypes.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || botId,\n      botId,\n      startParam,\n    });\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    requestedAttachBotInChat: {\n      botId,\n      filter: supportedFilters,\n      startParam,\n    },\n  });\n});\n\naddActionHandler('cancelAttachBotInChat', (global) => {\n  return {\n    ...global,\n    requestedAttachBotInChat: undefined,\n  };\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload) => {\n  const {\n    chatId, buttonId, messageId, url,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  });\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload) => {\n  const { isWriteAllowed } = payload;\n  if (!global.urlAuth?.button) return;\n  const {\n    button, url,\n  } = global.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload) => {\n  const { url } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    urlAuth: {\n      url,\n    },\n  });\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload) => {\n  const { isWriteAllowed } = payload;\n  if (!global.urlAuth?.url) return;\n  const { url } = global.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('closeUrlAuthModal', (global) => {\n  return {\n    ...global,\n    urlAuth: undefined,\n  };\n});\n\nfunction handleUrlAuthResult(url: string, result: ApiUrlAuthResult) {\n  if (result.type === 'request') {\n    const global = getGlobal();\n    if (!global.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    setGlobal({\n      ...global,\n      urlAuth: {\n        ...global.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    });\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  getActions().closeUrlAuthModal();\n}\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, currentUserId: string, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data?: string, isGame = false) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = getActions();\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window' });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' } });\n  } else if (message) {\n    showNotification({ message });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({ url, chatId: chat.id, messageId });\n      }\n    } else {\n      openUrl({ url });\n    }\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ApiChat, ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice,\n} from '../../selectors';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo, updatePayment,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload) => {\n  const inputInvoice = selectPaymentInputInvoice(global);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const { requestInfo, saveInfo } = payload;\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(inputInvoice, requestInfo, saveInfo);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo({\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload) => {\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm({ slug: payload.slug });\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm({\n      chat,\n      messageId: payload.messageId,\n    });\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice);\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  });\n});\n\nasync function getPaymentForm(inputInvoice: ApiRequestInputInvoice): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice } = result;\n\n  let global = setPaymentForm(getGlobal(), form);\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  void getReceipt(chat, messageId, receiptMessageId);\n});\n\nasync function getReceipt(chat: ApiChat, messageId: number, receiptMessageId: number) {\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddActionHandler('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddActionHandler('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload) => {\n  const { nativeProvider } = global.payment;\n  const { credentials } = payload;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(data, publishableKey);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(data, publicToken);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload) => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global);\n  const formId = selectPaymentFormId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const { nativeProvider, temporaryPassword } = global.payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global) : selectProviderPublicToken(global);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  setGlobal(updatePayment(global, { status: 'pending' }));\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe' ? selectStripeCredentials(global) : selectSmartGlocalCredentials(global),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' });\n  global = closeInvoice(global);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  },\n  publishableKey: string,\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n  },\n  publicToken: string,\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n\n  let global = setSmartGlocalCardInfo(getGlobal(), {\n    type: 'card',\n    token: result.data.token,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step ?? PaymentStep.Checkout);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload) => {\n  if (!global.premiumModal) return undefined;\n  const { isClosed } = payload || {};\n  return {\n    ...global,\n    premiumModal: {\n      ...global.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  };\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload) => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  setGlobal({\n    ...global,\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  });\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload) => {\n  const { forUserId } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  setGlobal({\n    ...global,\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  });\n});\n\naddActionHandler('closeGiftPremiumModal', (global) => {\n  setGlobal({\n    ...global,\n    giftPremiumModal: { isOpen: false },\n  });\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, { password }) => {\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } });\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } });\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout });\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo(inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout);\n  }\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global) => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import { updateChatMessage } from './messages';\nimport type { GlobalState } from '../types';\nimport { selectChatMessage } from '../selectors';\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport type { ApiChat } from '../../api/types';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  return x - ((global.isLeftColumnShown && !IS_SINGLE_COLUMN_LAYOUT)\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction(global: GlobalState, chatId: string, messageId: number, reaction: string) {\n  const { reactions } = selectChatMessage(global, chatId, messageId) || {};\n\n  if (!reactions) {\n    return global;\n  }\n\n  // Update UI without waiting for server response\n  let results = reactions.results.map((l) => (l.reaction === reaction\n    ? {\n      ...l,\n      count: l.isChosen ? l.count : l.count + 1,\n      isChosen: true,\n    } : (l.isChosen ? {\n      ...l,\n      isChosen: false,\n      count: l.count - 1,\n    } : l)))\n    .filter((l) => l.count > 0);\n\n  let { recentReactions } = reactions;\n\n  if (reaction && !results.some((l) => l.reaction === reaction)) {\n    const { currentUserId } = global;\n\n    results = [...results, {\n      reaction,\n      isChosen: true,\n      count: 1,\n    }];\n\n    if (reactions.canSeeList) {\n      recentReactions = [...(recentReactions || []), {\n        userId: currentUserId!,\n        reaction,\n      }];\n    }\n  }\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions(\n  global: GlobalState, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n) {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport type { ApiAppConfig } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage, selectCurrentChat,\n  selectDefaultReaction,\n  selectLocalAnimatedEmojiEffectByName,\n  selectMessageIdsByGroupId,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\nimport { isMessageLocal } from '../../helpers';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async () => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  setGlobal({\n    ...getGlobal(),\n    availableReactions: result,\n  });\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload) => {\n  const {\n    emoji, x, y, localEffect, startSize, isReversed,\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji || localEffect,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return {\n    ...global,\n    activeEmojiInteractions: [...(global.activeEmojiInteractions || []), activeEmojiInteraction],\n  };\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload) => {\n  const {\n    messageId, chatId, emoji, interactions, localEffect,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || (!emoji && !localEffect) || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji || selectLocalAnimatedEmojiEffectByName(localEffect),\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload) => {\n  const {\n    chatId, messageId, x, y,\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.sendReaction({\n    chatId,\n    messageId,\n    reaction,\n    x,\n    y,\n  });\n});\n\naddActionHandler('sendReaction', (global, actions, payload) => {\n  const {\n    chatId,\n  }: { chatId: string } = payload;\n  let { messageId } = payload;\n\n  let { reaction } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  if (message.reactions?.results?.some((l) => l.reaction === reaction && l.isChosen)) {\n    reaction = undefined;\n  }\n\n  void callApi('sendReaction', { chat, messageId, reaction });\n\n  const { animationLevel } = global.settings.byKey;\n\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    global = {\n      ...global,\n      activeReactions: {\n        ...(reaction ? global.activeReactions : omit(global.activeReactions, [messageId])),\n        ...(reaction && {\n          [messageId]: {\n            reaction,\n            messageId,\n          },\n        }),\n      },\n    };\n  }\n\n  return addMessageReaction(global, chatId, messageId, reaction);\n});\n\naddActionHandler('openChat', (global) => {\n  return {\n    ...global,\n    activeReactions: {},\n  };\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload) => {\n  const { messageId, reaction } = payload;\n\n  if (global.activeReactions[messageId]?.reaction !== reaction) {\n    return global;\n  }\n\n  return {\n    ...global,\n    activeReactions: omit(global.activeReactions, [messageId]),\n  };\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload) => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    appConfig: {\n      ...global.appConfig,\n      defaultReaction: reaction,\n    } as ApiAppConfig,\n  });\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload) => {\n  const { id } = payload;\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions?.filter((l) => l.id !== id),\n  };\n});\n\naddActionHandler('loadReactors', async (global, actions, payload) => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  const { nextOffset, count, reactions } = result;\n\n  setGlobal(updateChatMessage(global, chatId, messageId, {\n    reactors: {\n      nextOffset,\n      count,\n      reactions: [\n        ...(message.reactors?.reactions || []),\n        ...reactions,\n      ],\n    },\n  }));\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload) => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload) => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !global.activeEmojiInteractions?.some((l) => l.id === id) || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  };\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload) => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload) => {\n  const { messageIds } = payload;\n\n  const { animationLevel } = global.settings.byKey;\n\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds });\n\n  if (animationLevel !== ANIMATION_LEVEL_MAX) return undefined;\n\n  global = getGlobal();\n\n  return {\n    ...global,\n    activeReactions: {\n      ...global.activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.find((l) => l.isUnread);\n\n        if (!unread) return undefined;\n\n        const reaction = unread?.reaction;\n\n        return [messageId, {\n          messageId,\n          reaction,\n        }];\n      }).filter(Boolean)),\n    },\n  };\n});\n\naddActionHandler('focusNextReaction', (global, actions) => {\n  const chat = selectCurrentChat(global);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0] });\n});\n\naddActionHandler('readAllReactions', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiChannelStatistics } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateStatistics, updateMessageStatistics, updateStatisticsGraph } from '../../reducers';\nimport { selectChatMessages, selectChat } from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload) => {\n  const { chatId, isGroup } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const result = await callApi(isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if ((result as ApiChannelStatistics).recentTopMessages?.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    (result as ApiChannelStatistics).recentTopMessages = (result as ApiChannelStatistics).recentTopMessages\n      .map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  setGlobal(updateStatistics(global, chatId, result));\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  let result = await callApi('fetchMessageStatistics', { chat, messageId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  setGlobal(updateMessageStatistics(global, result));\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload) => {\n  const {\n    chatId, token, name, isPercentage,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateStatisticsGraph(getGlobal(), chatId, name, result));\n});\n","export function areDeepEqual<T extends any>(value1: T, value2: T): boolean {\n  const type1 = typeof value1;\n  const type2 = typeof value2;\n  if (type1 !== type2) {\n    return false;\n  }\n\n  if (type1 !== 'object') {\n    return value1 === value2;\n  }\n\n  const isArray1 = Array.isArray(value1);\n  const isArray2 = Array.isArray(value2);\n\n  if (isArray1 !== isArray2) {\n    return false;\n  }\n\n  if (isArray1) {\n    const array1 = value1 as any[];\n    const array2 = value2 as any[];\n\n    if (array1.length !== array2.length) {\n      return false;\n    }\n\n    return array1.every((member1, i) => areDeepEqual(member1, array2[i]));\n  }\n\n  const object1 = value1 as AnyLiteral;\n  const object2 = value2 as AnyLiteral;\n  const keys1 = Object.keys(object1);\n\n  return keys1.every((key1) => areDeepEqual(object1[key1], object2[key1]));\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1500;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      setGlobal(updateChat(global, update.id, update.chat, update.newProfilePhoto));\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        global = getGlobal();\n        const chat = selectChat(global, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(global, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        global = updateChat(global, update.chatId, {\n          unreadCount: (chat.unreadCount || 0) + 1,\n          ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n        });\n      }\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return undefined;\n      }\n\n      return updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        return updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n          },\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChat(global, chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          requestsPending,\n          recentRequesterIds,\n        },\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat,\n  ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, GlobalActions, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsChatWithBot,\n  selectIsServiceChatReady,\n  selectLocalAnimatedEmojiEffect,\n  selectLocalAnimatedEmoji,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n      if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (isLocal && message.isOutgoing && !(message.content?.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n              isResizingContainer: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isLocal) {\n          setTimeout(() => {\n            let delayedGlobal = getGlobal();\n            if (shouldForceReply) {\n              delayedGlobal = replaceThreadParam(delayedGlobal, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n            }\n            setGlobal(updateChatLastMessage(delayedGlobal, chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      setGlobal(global);\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n\n      if (currentChatId !== update.id) return;\n      const message = selectChatMessage(global, currentChatId, update.messageId);\n\n      if (!message) return;\n\n      // Workaround for a weird behavior when interaction is received after watching reaction\n      if (getMessageText(message) !== update.emoji) return;\n\n      const localEmoji = selectLocalAnimatedEmoji(global, update.emoji);\n\n      global = {\n        ...global,\n        activeEmojiInteractions: [...(global.activeEmojiInteractions || []), {\n          id: global.activeEmojiInteractions?.length || 0,\n          animatedEffect: localEmoji ? selectLocalAnimatedEmojiEffect(localEmoji) : update.emoji,\n          messageId: update.messageId,\n        } as ActiveEmojiInteraction],\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, message.isOutgoing, currentMessage);\n      }\n\n      setGlobal(global);\n\n      // Scroll down if bot message height is changed with an updated inline keyboard.\n      // A drawback: this will scroll down even if the previous scroll was not at bottom.\n      if (\n        currentMessage\n        && chat\n        && !message.isOutgoing\n        && chat.lastMessage?.id === message.id\n        && selectIsChatWithBot(global, chat)\n        && selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage)\n        && selectIsViewportNewest(global, chatId, message.threadInfo?.threadId || MAIN_THREAD_ID)\n      ) {\n        actions.focusLastMessage();\n      }\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, chatId, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread?.threadInfo) {\n        actions.markMessageListRead({ maxId: message.id });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        setGlobal({\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        });\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, getGlobal());\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      setGlobal(updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message));\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        setGlobal(updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        }));\n      } else if (media) {\n        setGlobal(updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        }));\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      setGlobal({\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      });\n      break;\n    }\n  }\n});\n\nfunction updateReactions(\n  global: GlobalState,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n) {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: string, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateThreadUnread(global: GlobalState, actions: GlobalActions, message: ApiMessage, isDeleting?: boolean) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, actions: GlobalActions, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n        global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n        if (!firstMessageId) {\n          global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n        }\n      }\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: threadInfo.messagesCount + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first unread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = candidateGlobal;\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId]?.lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUserStatus } from '../../../api/types';\n\nimport { deleteContact, replaceUserStatuses, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectIsCurrentUserPremium, selectUser } from '../../selectors';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  const global = getGlobal();\n\n  setGlobal(replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  }));\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      if (update.id === global.currentUserId && update.user.isPremium && !selectIsCurrentUserPremium(global)) {\n        actions.openPremiumModal({ isSuccess: true });\n      }\n\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUser = selectUser(global, botId);\n      if (!targetUser?.fullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUser(global, botId, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          botInfo: {\n            ...targetUser.fullInfo.botInfo,\n            menuButton: button,\n          },\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder':\n      actions.reorderStickerSets({ order: update.order, isCustomEmoji: update.isCustomEmoji });\n      break;\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      setGlobal({\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      });\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      global = setConfirmPaymentUrl(getGlobal(), update.url);\n      global = setPaymentStep(global, PaymentStep.ConfirmPayment);\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      if (global.webApp?.queryId === update.queryId) {\n        actions.setReplyingToId({ messageId: undefined });\n        actions.closeWebApp();\n      }\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSoundsForSafari } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          actions.leaveGroupCall({ shouldRemove: true });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n            isCallPanelVisible: undefined,\n            phoneCall: undefined,\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(getGlobal())!,\n          });\n        });\n\n        void initializeSoundsForSafari();\n        void checkNavigatorUserMediaPermissions(call.isVideo);\n        return {\n          ...global,\n          phoneCall: call,\n          isCallPanelVisible: false,\n        };\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { IS_PRODUCTION_HOST } from '../../../util/environment';\nimport { closeInvoice } from '../../reducers';\nimport * as langProvider from '../../../util/langProvider';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { selectChatMessage } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { inputInvoice } = global.payment;\n\n      if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n        const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n        if (message && message.content.invoice) {\n          const { amount, currency, title } = message.content.invoice;\n\n          actions.showNotification({\n            message: langProvider.getTranslation('PaymentInfoHint', [\n              formatCurrency(amount, currency, langProvider.getTranslation.code),\n              title,\n            ]),\n          });\n        }\n      }\n\n      // On the production host, the payment frame receives a message with the payment event,\n      // after which the payment form closes. In other cases, the payment form must be closed manually.\n      // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n      if (!IS_PRODUCTION_HOST) {\n        global = closeInvoice(global);\n      }\n\n      if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n        return !IS_PRODUCTION_HOST ? global : undefined;\n      }\n\n      return {\n        ...global,\n        payment: {\n          ...global.payment,\n          status: 'paid',\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './StickerSetModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default memo(StickerSetModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { ApiChat } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  APP_NAME, APP_VERSION,\n  BETA_CHANGELOG_URL,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n} from '../../../config';\nimport { IS_PWA, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport { selectCurrentMessageList, selectTheme } from '../../../global/selectors';\nimport { isChatArchived } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: AnimationLevel;\n    chatsById?: Record<string, ApiChat>;\n    isMessageListOpen: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'canInstall'>;\n\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canInstall,\n}) => {\n  const {\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    skipLockOnUnload,\n  } = getActions();\n\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen(SettingsScreens.PasscodeDisabled);\n    }\n  }, [hasPasscode, lockScreen, requestNextSettingsScreen]);\n\n  useHotkeys({\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_PWA && { 'Mod+L': handleLockScreenHotkey }),\n  });\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleChangelogClick = useCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  }, []);\n\n  const handleSwitchToWebK = useCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleSwitchToLegacy = useCallback(() => {\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleOpenTipsChat = useCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  }, [lang, openChatByUsername]);\n\n  const handleLockScreen = useCallback(() => {\n    lockScreen();\n  }, [lockScreen]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={handleOpenTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {IS_BETA && (\n            <MenuItem\n              icon=\"permissions\"\n              onClick={handleChangelogClick}\n            >\n              Beta Changelog\n            </MenuItem>\n          )}\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n                onClick={handleSwitchToLegacy}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n          {canInstall && (\n            <MenuItem\n              icon=\"install\"\n              onClick={getPromptInstall()}\n            >\n              Install App\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className=\"passcode-lock\"\n          >\n            <i className=\"icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId, connectionState, isSyncing } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(global.canInstall),\n    };\n  },\n)(LeftMainHeader));\n","const PERMANENT_VERSION_KEY = 'kz_version';\nconst AVAILABLE_VERSIONS = ['Z', 'K'] as const;\n\nexport function setPermanentWebVersion(version: typeof AVAILABLE_VERSIONS[number]) {\n  localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify(version));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onScreenSelect,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const allChatsFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n    };\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map(({ id, title }, i) => {\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n\n      return ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n      });\n    });\n  }, [displayedFolders, folderCountersById, maxFolders]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(FIRST_FOLDER_INDEX);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1), { forceOnHeavyAnimation: true });\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1), { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder(FIRST_FOLDER_INDEX);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder(FIRST_FOLDER_INDEX, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n\n    if (!activeFolder || isInAllChatsFolder) {\n      return (\n        <ChatList\n          folderType=\"all\"\n          isActive={isActive}\n          lastSyncTime={lastSyncTime}\n          foldersDispatch={foldersDispatch}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        isActive={isActive}\n        lastSyncTime={lastSyncTime}\n        onScreenSelect={onScreenSelect}\n        foldersDispatch={foldersDispatch}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div className=\"ChatFolders\">\n      {shouldRenderFolders ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} areFolders />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    } = global;\n\n    const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      maxFolders,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isUpdateAvailable?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isUpdateAvailable,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleUpdateClick = useCallback(() => {\n    window.location.reload();\n  }, []);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders onScreenSelect={onScreenSelect} foldersDispatch={foldersDispatch} />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MAC_OS, IS_PWA, LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { selectCurrentChat } from '../../global/selectors';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useOnChange from '../../hooks/useOnChange';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  isChatOpen: boolean;\n  isUpdateAvailable?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps> = ({\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  isChatOpen,\n  isUpdateAvailable,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setContactsFilter('');\n      setGlobalSearchQuery({ query: '' });\n      setGlobalSearchDate({ date: undefined });\n      setGlobalSearchChatId({ id: undefined });\n      resetChatCreation();\n      setTimeout(() => {\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  }, [\n    content, isFirstChatFolderActive, settingsScreen, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId,\n    resetChatCreation, hasPasscode,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || (isFirstChatFolderActive && !isChatOpen)\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [isFirstChatFolderActive, content, handleReset, isChatOpen],\n  );\n\n  const handleHotkeySearch = useCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  }, [content]);\n\n  const handleHotkeySavedMessages = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleHotkeySettings = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  }, []);\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    'Mod+0': handleHotkeySavedMessages,\n    ...(IS_MAC_OS && IS_PWA && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useOnChange(() => {\n    if (nextSettingsScreen) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen(undefined);\n    }\n  }, [nextSettingsScreen, requestNextSettingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, setLeftColumnWidth, resetLeftColumnWidth, leftColumnWidth);\n\n  const handleSettingsScreenSelect = useCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  }, []);\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onContentChange={setContent}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent}\n                  onSearchQuery={handleSearchQuery}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                  isUpdateAvailable={isUpdateAvailable}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      settings: {\n        nextScreen: nextSettingsScreen,\n      },\n      isUpdateAvailable,\n    } = global;\n\n    const isChatOpen = Boolean(selectCurrentChat(global)?.id);\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      isChatOpen,\n      isUpdateAvailable,\n    };\n  },\n)(LeftColumn));\n","import type { RefObject } from 'react';\nimport { useState, useEffect, useLayoutEffect } from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    elementRef.current.style.width = `${initialWidth}px`;\n  }, [elementRef, initialWidth]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('cursor-ew-resize');\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    document.body.classList.add('cursor-ew-resize');\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    elementRef.current!.style.width = '';\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      elementRef.current!.style.width = `${newWidth}px`;\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useRef,\n  useCallback,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\nimport { ManagementScreens } from '../../types';\n\nimport { ANIMATION_LEVEL_MIN } from '../../config';\nimport {\n  ARE_CALLS_SUPPORTED, IS_PWA, IS_SINGLE_COLUMN_LAYOUT,\n} from '../../util/environment';\nimport {\n  isChatBasicGroup, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatBot,\n  selectIsUserBlocked,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport { useHotkeys } from '../../hooks/useHotkeys';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  canExpandActions: boolean;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  noAnimation?: boolean;\n}\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 320;\n\nconst HeaderActions: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  pendingJoinRequests,\n  isRightColumnShown,\n  canExpandActions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  noAnimation,\n}) => {\n  const {\n    joinChannel,\n    sendBotCommand,\n    openLocalTextSearch,\n    restartBot,\n    requestCall,\n    requestNextManagementScreen,\n    showNotification,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const lang = useLang();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n    if (shouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, shouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleJoinRequestsClick = useCallback(() => {\n    requestNextManagementScreen({ screen: ManagementScreens.JoinRequests });\n  }, [requestNextManagementScreen]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else if (noAnimation) {\n      // The second RAF is necessary because teact must update the state and render the async component\n      requestAnimationFrame(() => {\n        requestAnimationFrame(setFocusInSearchInput);\n      });\n    } else {\n      setTimeout(setFocusInSearchInput, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [noAnimation, openLocalTextSearch]);\n\n  function handleRequestCall() {\n    requestCall({ userId: chatId });\n  }\n\n  const handleHotkeySearchClick = useCallback((e: KeyboardEvent) => {\n    if (!canSearch || !IS_PWA || e.shiftKey) {\n      return;\n    }\n\n    e.preventDefault();\n    handleSearchClick();\n  }, [canSearch, handleSearchClick]);\n\n  useHotkeys({\n    'Mod+F': handleHotkeySearchClick,\n  });\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && (\n        <>\n          {canExpandActions && !shouldSendJoinRequest && (canSubscribe || shouldJoinToSend) && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </Button>\n          )}\n          {canExpandActions && shouldSendJoinRequest && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang('ChannelJoinRequest')}\n            </Button>\n          )}\n          {canExpandActions && canStartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </Button>\n          )}\n          {canExpandActions && canRestartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </Button>\n          )}\n          {canSearch && (\n            <Button\n              round\n              ripple={isRightColumnShown}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleSearchClick}\n              ariaLabel=\"Search in this chat\"\n            >\n              <i className=\"icon-search\" />\n            </Button>\n          )}\n          {canCall && (\n            <Button\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={handleRequestCall}\n              ariaLabel=\"Call\"\n            >\n              <i className=\"icon-phone\" />\n            </Button>\n          )}\n        </>\n      )}\n      {Boolean(pendingJoinRequests) && (\n        <Button\n          round\n          className=\"badge-button\"\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleJoinRequestsClick}\n          ariaLabel={isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n        >\n          <i className=\"icon-user\" />\n          <div className=\"badge\">{pendingJoinRequests}</div>\n        </Button>\n      )}\n      <Button\n        ref={menuButtonRef}\n        className={isMenuOpen ? 'active' : ''}\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        disabled={noMenu}\n        ariaLabel=\"More actions\"\n        onClick={handleHeaderMenuOpen}\n      >\n        <i className=\"icon-more\" />\n      </Button>\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          withExtraActions={IS_SINGLE_COLUMN_LAYOUT || !canExpandActions}\n          isChannel={isChannel}\n          canStartBot={canStartBot}\n          canRestartBot={canRestartBot}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canCall={canCall}\n          canMute={canMute}\n          canViewStatistics={canViewStatistics}\n          canLeave={canLeave}\n          canEnterVoiceChat={canEnterVoiceChat}\n          canCreateVoiceChat={canCreateVoiceChat}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (!chat || chat.isRestricted || selectIsInSelectMode(global)) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const bot = selectChatBot(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canCall = ARE_CALLS_SUPPORTED && isUserId(chat.id) && !isChatWithSelf && !bot;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canLeave = isMainThread && !canSubscribe;\n    const canEnterVoiceChat = ARE_CALLS_SUPPORTED && chat.isCallActive;\n    const canCreateVoiceChat = ARE_CALLS_SUPPORTED && !chat.isCallActive\n      && (chat.adminRights?.manageCall || (chat.isCreator && isChatBasicGroup(chat)));\n    const canViewStatistics = chat.fullInfo?.canViewStatistics;\n    const pendingJoinRequests = chat.fullInfo?.requestsPending;\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const noAnimation = global.settings.byKey.animationLevel === ANIMATION_LEVEL_MIN;\n\n    return {\n      noMenu: false,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canRestartBot,\n      canSubscribe,\n      canSearch,\n      canCall,\n      canMute,\n      canViewStatistics,\n      canLeave,\n      canEnterVoiceChat,\n      canCreateVoiceChat,\n      pendingJoinRequests,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      noAnimation,\n    };\n  },\n)(HeaderActions));\n\nfunction setFocusInSearchInput() {\n  const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n  searchInput?.focus();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSingleInlineButton } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\nimport MessageSummary from '../common/MessageSummary';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  }, [clickBotInlineButton, inlineButton, message.id]);\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName('HeaderPinnedMessage', noHoverColor && 'no-hover')}\n        onClick={onClick}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">\n            <MessageSummary lang={lang} message={message} noEmoji={Boolean(mediaThumbnail)} />\n          </p>\n          <RippleEffect />\n        </div>\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className=\"inline-button\"\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","import { getAverageColor, getColorLuma } from './colors';\n\nconst LUMA_THRESHOLD = 240;\n\nexport function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      const averageColor = await getAverageColor(img.src);\n      const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx2D = canvas.getContext('2d')!;\n        ctx2D.fillStyle = fillColor;\n        ctx2D.fillRect(0, 0, canvas.width, canvas.height);\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          ctx2D.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nasync function steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  const averageColor = await getAverageColor(img.src);\n  const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n  ctx.fillStyle = fillColor;\n  ctx.globalCompositeOperation = 'destination-over';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, { useCallback, useEffect, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport windowSize from '../../util/windowSize';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useLang from '../../hooks/useLang';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport renderText from '../common/helpers/renderText';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isMuted: boolean;\n};\n\nconst FAST_PLAYBACK_RATE = 1.8;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  // Prevent refresh by accidentally rotating device when listening to a voice message\n  const isVoicePlaying = isVoice && isPlaying;\n  useEffect(() => {\n    if (!isVoicePlaying) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isVoicePlaying]);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const handlePlaybackClick = useCallback(() => {\n    if (playbackRate === 1) {\n      setPlaybackRate(FAST_PLAYBACK_RATE);\n      setAudioPlayerPlaybackRate({ playbackRate: FAST_PLAYBACK_RATE });\n    } else {\n      setPlaybackRate(1);\n      setAudioPlayerPlaybackRate({ playbackRate: 1 });\n    }\n  }, [playbackRate, setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <Button\n        round\n        className=\"player-button volume-button\"\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel=\"Volume\"\n        noPreventDefault\n      >\n        <i className={volumeIcon} onClick={handleVolumeClick} />\n        {!IS_IOS && (\n          <>\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </>\n        )}\n      </Button>\n\n      {shouldRenderPlaybackButton && (\n        <Button\n          round\n          className={buildClassName('playback-button', playbackRate !== 1 && 'applied')}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          onClick={handlePlaybackClick}\n        >\n          <span className=\"playback-button-inner\">2Х</span>\n        </Button>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const { volume, playbackRate, isMuted } = global.audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiGroupCall, ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { selectChatGroupCall } from '../../../global/selectors/calls';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\n\nimport './GroupCallTopPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasPinnedOffset: boolean;\n};\n\ntype StateProps = {\n  groupCall?: ApiGroupCall;\n  isActive: boolean;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n  animationLevel: AnimationLevel;\n};\n\nconst GroupCallTopPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  groupCall,\n  hasPinnedOffset,\n  usersById,\n  chatsById,\n  animationLevel,\n}) => {\n  const {\n    joinGroupCall,\n    subscribeToGroupCallUpdates,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleJoinGroupCall = useCallback(() => {\n    joinGroupCall({\n      chatId,\n    });\n  }, [joinGroupCall, chatId]);\n\n  const participants = groupCall?.participants;\n\n  const fetchedParticipants = useMemo(() => {\n    if (participants) {\n      return Object.values(participants).filter((_, i) => i < 3).map(({ id, isUser }) => {\n        if (isUser) {\n          if (!usersById[id]) {\n            return undefined;\n          }\n          return { user: usersById[id] };\n        } else {\n          if (!chatsById[id]) {\n            return undefined;\n          }\n          return { chat: chatsById[id] };\n        }\n      }).filter(Boolean);\n    } else return [];\n  }, [chatsById, participants, usersById]);\n\n  useEffect(() => {\n    if (!groupCall?.id) return undefined;\n    if (!isActive && groupCall.isLoaded) return undefined;\n\n    subscribeToGroupCallUpdates({\n      id: groupCall.id,\n      subscribed: true,\n    });\n\n    return () => {\n      subscribeToGroupCallUpdates({\n        id: groupCall.id,\n        subscribed: false,\n      });\n    };\n  }, [groupCall?.id, groupCall?.isLoaded, isActive, subscribeToGroupCallUpdates]);\n\n  if (!groupCall) return undefined;\n\n  return (\n    <div\n      className={buildClassName(\n        'GroupCallTopPane',\n        hasPinnedOffset && 'has-pinned-offset',\n        !isActive && 'is-hidden',\n      )}\n      onClick={handleJoinGroupCall}\n    >\n      <div className=\"info\">\n        <span className=\"title\">{lang('VoipGroupVoiceChat')}</span>\n        <span className=\"participants\">{lang('Participants', groupCall.participantsCount || 0, 'i')}</span>\n      </div>\n      <div className=\"avatars\">\n        {fetchedParticipants.map((p) => {\n          if (!p) return undefined;\n          if (p.user) {\n            return <Avatar key={p.user.id} user={p.user} animationLevel={animationLevel} />;\n          } else {\n            return <Avatar key={p.chat.id} chat={p.chat} animationLevel={animationLevel} />;\n          }\n        })}\n      </div>\n      <Button round className=\"join\">\n        {lang('VoipChatJoin')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chat = selectChat(global, chatId)!;\n    const groupCall = selectChatGroupCall(global, chatId);\n    return {\n      groupCall,\n      usersById: global.users.byId,\n      chatsById: global.chats.byId,\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      isActive: ((!groupCall ? (chat && chat.isCallNotEmpty && chat.isCallActive)\n        : (groupCall.participantsCount > 0 && groupCall.isLoaded)))\n        && (global.groupCalls.activeGroupCallId !== groupCall?.id),\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(GroupCallTopPane));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ chatId });\n    }\n  }, [openAddContactDialog, isAutoArchived, toggleChatArchived, chatId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, chatId,\n  ]);\n\n  const handleCloseReportPanel = useCallback(() => {\n    hideChatReportPanel({ chatId });\n  }, [chatId, hideChatReportPanel]);\n\n  const handleChatReportSpam = useCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  }, [\n    chatId, closeBlockUserModal, currentUserId, deleteChatUser, deleteHistory, isBasicGroup, leaveChannel, reportSpam,\n  ]);\n\n  if (!settings) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        isButtonsInOneRow\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  lastSyncTime?: number;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isChatWithSelf,\n  lastSyncTime,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    threadId, messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode, setBackButtonActive,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!IS_SINGLE_COLUMN_LAYOUT && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      <GroupCallTopPane\n        hasPinnedOffset={\n          (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n        }\n        chatId={chatId}\n      />\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isPinnedMessagesFullWidth && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const chat = selectChat(global, chatId);\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && chat && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_LOADING = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMentionsRead, animateUnreadReaction } = getActions();\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isOwnMessage,\n  getMessageVideo,\n  getMessageWebPageVideo,\n} from '../../../../global/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, asForwarded?: boolean, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, asForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, asForwarded, isWebPageVideo, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\nlet fontFamily: string | undefined;\nexport default function calculateAuthorWidth(text: string) {\n  if (!fontFamily) {\n    fontFamily = getComputedStyle(document.documentElement).getPropertyValue('--font-family');\n  }\n\n  if (!element) {\n    element = document.createElement('span');\n    // eslint-disable-next-line max-len\n    element.style.font = `400 12px ${fontFamily}`;\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import type { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction(e: React.MouseEvent) {\n    const { x, y } = e.currentTarget.getBoundingClientRect();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    const { pageX: x, pageY: y } = e;\n\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap(e);\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat, ApiSticker,\n} from '../../api/types';\nimport type { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport AnimatedIconFromSticker from '../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersectionForReading?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  premiumGiftSticker?: ApiSticker;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersectionForReading,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  premiumGiftSticker,\n  memoFirstUnreadIdRef,\n}) => {\n  const { openPremiumModal, requestConfetti } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersectionForReading);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  const isGift = Boolean(message.content.action?.text.startsWith('ActionGift'));\n\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const isVisible = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const shouldShowConfettiRef = useRef((() => {\n    const isUnread = memoFirstUnreadIdRef?.current && message.id >= memoFirstUnreadIdRef.current;\n    return isGift && !message.isOutgoing && isUnread;\n  })());\n\n  useEffect(() => {\n    if (isVisible && shouldShowConfettiRef.current) {\n      shouldShowConfettiRef.current = false;\n      requestConfetti();\n    }\n  }, [isVisible, requestConfetti]);\n\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter(Boolean)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    { isEmbedded },\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handlePremiumGiftClick = () => {\n    openPremiumModal({\n      isGift: true,\n      fromUserId: senderUser?.id,\n      toUserId: targetUserIds?.[0],\n      monthsAmount: message.content.action?.months || 0,\n    });\n  };\n\n  if (isEmbedded) {\n    return <span ref={ref} className=\"embedded-action-message\">{content}</span>;\n  }\n\n  function renderGift() {\n    return (\n      <span className=\"action-message-gift\" tabIndex={0} role=\"button\" onClick={handlePremiumGiftClick}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={premiumGiftSticker}\n          play\n          noLoop\n          nonInteractive\n        />\n        <strong>{lang('ActionGiftPremiumTitle')}</strong>\n        <span>{lang('ActionGiftPremiumSubtitle', lang('Months', message.content.action?.months, 'i'))}</span>\n\n        <span className=\"action-message-button\">{lang('ActionGiftPremiumView')}</span>\n      </span>\n    );\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isGift && 'premium-gift',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {isGift && renderGift()}\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n    const premiumGiftSticker = global.premiumGifts?.stickers?.[0];\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      premiumGiftSticker,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\n\nimport type { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n  getUserColorKey,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\nimport MessageSummary from './MessageSummary';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  hasContextMenu?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  noUserColors,\n  hasContextMenu,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage\n              message={message}\n              isEmbedded\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          ) : (\n            <MessageSummary\n              lang={lang}\n              message={message}\n              noEmoji={Boolean(mediaThumbnail)}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n      {hasContextMenu && <i className=\"embedded-more icon-more\" />}\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <>\n      <img\n        src={blobUrl || thumbDataUri}\n        width={width}\n        height={height}\n        alt=\"\"\n        className={buildClassName('pictogram', isRoundVideo && 'round')}\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionAnimatedEmoji.scss';\n\ntype OwnProps = {\n  reaction: string;\n  activeReaction?: ActiveReaction;\n  isInMeta?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CENTER_ICON_SIZE = 30;\nconst EFFECT_SIZE = 100;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  activeReaction,\n  isInMeta,\n  availableReactions,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  const availableReaction = availableReactions?.find((r) => r.reaction === reaction);\n  const centerIconId = availableReaction?.centerIcon?.id;\n  const effectId = availableReaction?.aroundAnimation?.id;\n\n  const mediaHashCenterIcon = centerIconId && `sticker${centerIconId}`;\n  const mediaHashEffect = effectId && `sticker${effectId}`;\n\n  const mediaDataCenterIcon = useMedia(mediaHashCenterIcon, !centerIconId);\n  const mediaDataEffect = useMedia(mediaHashEffect, !effectId);\n\n  const shouldPlay = Boolean(activeReaction?.reaction === reaction && mediaDataCenterIcon && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    stopActiveReaction({ messageId: activeReaction?.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !shouldPlay || !isAnimationLoaded;\n\n  const className = buildClassName(\n    'ReactionAnimatedEmoji',\n    isInMeta && 'in-meta',\n    shouldRenderAnimation && 'is-animating',\n  );\n\n  return (\n    <div className={className}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} />}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={centerIconId}\n            className={animationClassNames}\n            size={CENTER_ICON_SIZE}\n            tgsUrl={mediaDataCenterIcon}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onLoad={markAnimationLoaded}\n            onEnded={unmarkAnimationLoaded}\n          />\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName('effect', animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  reactionMessage?: ApiMessage;\n  withReactions?: boolean;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick, withReactions,\n  activeReaction, withReactionOffset, availableReactions,\n  reactionMessage,\n}) => {\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const reactions = withReactions && reactionMessage?.reactions?.results.filter((l) => l.count > 0);\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  return (\n    <span\n      className={buildClassName('MessageMeta', withReactionOffset && 'reactions-offset')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {reactions && reactions.map((l) => (\n        <ReactionAnimatedEmoji\n          activeReaction={activeReaction}\n          reaction={l.reaction}\n          isInMeta\n          availableReactions={availableReactions}\n        />\n      ))}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getActions } from '../../../global';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport StickerView from '../../common/StickerView';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './Sticker.scss';\n\n// eslint-disable-next-line max-len\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n  shouldPlayEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n  shouldPlayEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  }, [onStopEffect, stopPlayingEffect]);\n\n  useEffect(() => {\n    if (hasEffect && canPlay && shouldPlayEffect) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, startPlayingEffect]);\n\n  const openModal = useCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet, sticker]);\n\n  const handleClick = useCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: openModal,\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  }, [hasEffect, isPlayingEffect, lang, onPlayEffect, openModal, showNotification, startPlayingEffect]);\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n        cacheBuster={lastSyncTime}\n      />\n      {hasEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import {\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport safePlay from '../../../util/safePlay';\nimport { selectLocalAnimatedEmojiEffectByName } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  localEffect?: string,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  const hasEffect = localEffect || emoji;\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, (emoji || localEffect) && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId,\n      messageId,\n      localEffect,\n      emoji,\n      interactions: interactions.current,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  }, [sendEmojiInteraction, chatId, messageId, localEffect, emoji]);\n\n  const play = useCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  }, [soundMediaData]);\n\n  const handleClick = useCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!hasEffect || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      localEffect,\n      emoji,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  }, [\n    chatId, emoji, hasEffect, interactWithAnimatedEmoji, isOwn,\n    localEffect, messageId, play, sendInteractionBunch, size,\n  ]);\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId,\n        emoticon: localEffect ? selectLocalAnimatedEmojiEffectByName(localEffect) : emoji,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [\n    activeEmojiInteractions, chatId, emoji, isOwn, localEffect, messageId, play, sendWatchingEmojiInteraction, size,\n  ]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectLocalAnimatedEmoji,\n  selectLocalAnimatedEmojiEffect,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  localSticker?: keyof typeof LOCAL_TGS_URLS;\n  localEffect?: string;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  lastSyncTime,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  localSticker,\n  localEffect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, localEffect, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return localSticker ? (\n    <AnimatedIconWithPreview\n      tgsUrl={LOCAL_TGS_URLS[localSticker]}\n      size={size}\n      quality={QUALITY}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className=\"AnimatedEmoji media-inner\"\n      style={style}\n      onClick={handleClick}\n    />\n  ) : (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      lastSyncTime={lastSyncTime}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  const localSticker = selectLocalAnimatedEmoji(global, emoji);\n\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n    localSticker,\n    localEffect: localSticker && withEffects ? selectLocalAnimatedEmojiEffect(localSticker) : undefined,\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, undefined, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      withSharedAnimation\n      forceOnHeavyAnimation\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n  };\n})(AnimatedCustomEmoji));\n","import type { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n  img.crossOrigin = 'anonymous';\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../global/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, isDisabled?: boolean | string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(isDisabled),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import React, {\n  useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE } from '../../../config';\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n  getMessageMediaFormat,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  asForwarded?: boolean;\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  asForwarded,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n\n  const [withThumb] = useState(!fullMediaData);\n  const noThumb = Boolean(fullMediaData);\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'), !isDownloading, getMessageMediaFormat(message, 'download'),\n  );\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>('.message-content')!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [shouldAffectAppendix, fullMediaData, isOwn, isInSelectMode, isSelected, theme] as const);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, asForwarded, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = size === 'inline' ? `height: ${height}px;${dimensionsStyle}` : undefined;\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <img\n        src={fullMediaData}\n        className=\"full-media\"\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {withThumb && (\n        <canvas ref={thumbRef} className={buildClassName('thumbnail', thumbClassNames)} />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <i className={buildClassName('icon-download', downloadButtonClassNames)} />}\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  asForwarded,\n  isDownloading,\n  isProtected,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersectingForLoading = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isIntersectingForPlaying = (\n    useIsIntersecting(ref, observeIntersectionForPlaying)\n    && isIntersectingForLoading\n  );\n  const wasIntersectedRef = useRef(isIntersectingForLoading);\n  if (isIntersectingForPlaying && !wasIntersectedRef.current) {\n    wasIntersectedRef.current = true;\n  }\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersectingForLoading && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay);\n\n  const fullMediaHash = getMessageMediaHash(message, 'inline');\n  const [isFullMediaPreloaded] = useState(Boolean(fullMediaHash && mediaLoader.getFromMemory(fullMediaHash)));\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    fullMediaHash, !shouldLoad, getMessageMediaFormat(message, 'inline'), lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const [isPlayerReady, markPlayerReady] = useFlag();\n\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n\n  const previewMediaHash = getMessageMediaHash(message, 'preview');\n  const [isPreviewPreloaded] = useState(Boolean(previewMediaHash && mediaLoader.getFromMemory(previewMediaHash)));\n  const canLoadPreview = isIntersectingForLoading && lastSyncTime;\n  const previewBlobUrl = useMedia(previewMediaHash, !canLoadPreview, undefined, lastSyncTime);\n  const previewClassNames = useMediaTransition((hasThumb || previewBlobUrl) && !isPlayerReady);\n\n  const noThumb = !hasThumb || previewBlobUrl || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isInline = fullMediaData && wasIntersectedRef.current;\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n    lastSyncTime,\n  );\n\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isPlayerReady && !isFullMediaPreloaded) || isDownloading,\n  );\n\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(Boolean((isLoadAllowed || fullMediaData) && !isPlayAllowed && !shouldRenderSpinner));\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = videoRef.current?.duration || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const {\n    width, height,\n  } = dimensions || calculateVideoDimensions(video, isOwn, asForwarded, isWebPageVideo, noAvatars);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, isDownloading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = `height: ${height}px;${dimensionsStyle}`;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {isInline && (\n        <OptimizedVideo\n          ref={videoRef}\n          src={fullMediaData}\n          className=\"full-media\"\n          canPlay={isPlayAllowed && isIntersectingForPlaying}\n          muted\n          loop\n          playsInline\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          onReady={markPlayerReady}\n        />\n      )}\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {hasThumb && !isPreviewPreloaded && (\n        <canvas\n          ref={thumbRef}\n          className={buildClassName('thumbnail', thumbClassNames)}\n        />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      <i className={buildClassName('icon-large-play', playButtonClassNames)} />\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && !fullMediaData && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n  animationLevel: AnimationLevel;\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, animationLevel,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} animationLevel={animationLevel} withVideo />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useState, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n  serverTimeOffset: number;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n  serverTimeOffset,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  asForwarded,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n  const isArticle = Boolean(truncatedDescription || title || siteName);\n  let isSquarePhoto = false;\n  if (isArticle && webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n    !isArticle && 'no-article',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          asForwarded={asForwarded}\n          nonInteractive={!isMediaInteractive}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          theme={theme}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      {isArticle && (\n        <div className=\"WebPage-text\">\n          <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n          {!inPreview && title && (\n            <p className=\"site-title\">{renderText(title)}</p>\n          )}\n          {truncatedDescription && (\n            <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n          )}\n        </div>\n      )}\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersectionForLoading={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          asForwarded={asForwarded}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>('.message-content')!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n      getCustomAppendixBg(photoUrl, false, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme] as const);\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n            crossOrigin=\"anonymous\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton width={photo.dimensions?.width} height={photo.dimensions?.height} forceAspectRatio />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"dots\":\"Nlcnrzv_f5cSxFsPOGt2\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"canvas\":\"a_WnxsI6X0B4j7QRRoOA\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\nimport useInterval from '../../../hooks/useInterval';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst POLLING_INTERVAL = 30000;\nconst BLUR_RADIUS = 25;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  lastSyncTime,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  }, [chatId, id, loadExtendedMedia]);\n\n  useInterval(refreshExtendedMedia, lastSyncTime ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const canvasRef = useCanvasBlur(thumbnail?.dataUri, false, undefined, BLUR_RADIUS, width, height);\n\n  const handleClick = useCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  }, [chatId, id, openInvoice]);\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <canvas ref={canvasRef} className={styles.canvas} width={width} height={height} />\n      <div className={styles.dots} />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","const PROVIDER = 'http://maps.google.com/maps';\n\n// eslint-disable-next-line max-len\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// eslint-disable-next-line max-len\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport mapPin from '../../../assets/map-pin.svg';\nimport './Location.scss';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  serverTimeOffset: number;\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n  serverTimeOffset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime(serverTimeOffset);\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    window.open(url, '_blank', 'noopener')?.focus();\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime(serverTimeOffset);\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, serverTimeOffset, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffectWithPrevDeps(([prevShouldRenderText]) => {\n    if (shouldRenderText) {\n      if (!prevShouldRenderText) {\n        ref.current!.closest<HTMLDivElement>('.message-content')!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (mapBlobUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.classList.add('has-appendix-thumb');\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldRenderText, isOwn, isInSelectMode, isSelected, theme, mapBlobUrl] as const);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      updateCountdown(countdownEl);\n    }\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        width={DEFAULT_MAP_CONFIG.width}\n        height={DEFAULT_MAP_CONFIG.height}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const icon = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={icon} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n  lastSyncTime,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = Boolean(lastSyncTime) && getGamePreviewPhotoHash(game);\n  const videoHash = Boolean(lastSyncTime) && getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const [withThumb] = useState(!mediaData);\n  const thumbRef = useBlurredMediaThumbRef(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = (isLoadAllowed && !isBuffered) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const thumbClassNames = useMediaTransition(!mediaData);\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, []);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          />\n        </div>\n      )}\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className={buildClassName('thumbnail', thumbClassNames)}\n          style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n        />\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openChat } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './Reactions.scss';\n\nconst MAX_REACTORS_AVATARS = 3;\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n}> = ({\n  reaction,\n  message,\n  activeReaction,\n  availableReactions,\n}) => {\n  const { sendReaction } = getActions();\n\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!recentReactions || reaction.count > MAX_REACTORS_AVATARS) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => recentReaction.reaction === reaction.reaction)\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction, recentReactions]);\n\n  const handleClick = useCallback(() => {\n    sendReaction({\n      reaction: reaction.isChosen ? undefined : reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, sendReaction]);\n\n  return (\n    <Button\n      className={buildClassName(reaction.isChosen && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReaction={activeReaction}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : formatIntegerCompact(reaction.count)}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiMessage } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n};\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  activeReaction,\n  availableReactions,\n  metaChildren,\n}) => {\n  return (\n    <div className={buildClassName('Reactions', isOutside && 'is-outside')}>\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={reaction.reaction}\n          reaction={reaction}\n          message={message}\n          activeReaction={activeReaction}\n          availableReactions={availableReactions}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestCall } = getActions();\n\n  const lang = useLang();\n  const { isOutgoing, isVideo, reason } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' && !isOutgoing;\n\n  const handleCall = useCallback(() => {\n    requestCall({ isVideo, userId: chatId });\n  }, [chatId, isVideo, requestCall]);\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const duration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={isVideo ? 'icon-video-outlined' : 'icon-phone'} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon-arrow-right', styles.arrow, isMissed && styles.missed, !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {duration ? lang('CallMessageWithDuration', [timeFormatted, duration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ActiveEmojiInteraction, ActiveReaction, MessageListType } from '../../../global/types';\nimport type {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n  ApiChatMember,\n} from '../../../api/types';\nimport type {\n  AnimationLevel, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\nimport {\n  AudioOrigin,\n} from '../../../types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectMessageIdsByGroupId,\n  selectIsMessageProtected,\n  selectDefaultReaction,\n  selectReplySender,\n  selectAnimatedEmoji,\n  selectLocalAnimatedEmoji,\n  selectIsCurrentUserPremium,\n  selectIsChatProtected,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n  getMessageSingleCustomEmoji,\n  hasMessageText,\n  isChatGroup,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { calculateDimensionsForMessageMedia, ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport DotAnimation from '../../common/DotAnimation';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    areReactionsInMeta?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n    memoFirstUnreadIdRef: { current: number | undefined };\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsername?: string;\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  threadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: string;\n  activeReaction?: ActiveReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  animationLevel: AnimationLevel;\n  senderAdminMember?: ApiChatMember;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'in-meta'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsername,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  areReactionsInMeta,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  lastSyncTime,\n  serverTimeOffset,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  threadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  animationLevel,\n  senderAdminMember,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender) ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    (Boolean(activeReaction) || hasActiveStickerEffect) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const { phoneCall } = action || {};\n\n  const withCommentButton = threadInfo && !isInDocumentGroupNotLast && messageListType === 'thread' && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: threadInfo && threadInfo?.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime(serverTimeOffset)),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message);\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !hasAnimatedEmoji) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (areReactionsInMeta) {\n    reactionsPosition = 'in-meta';\n  } else if (hasReactions) {\n    if (isCustomShape || ((photo || video) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, asForwarded, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars).width;\n      }\n    } else if (invoice?.extendedMedia && (\n      invoice.extendedMedia.width && invoice.extendedMedia.height\n    )) {\n      const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n      width = calculateDimensionsForMessageMedia({\n        width: previewWidth,\n        height: previewHeight,\n        fromOwnMessage: isOwn,\n        asForwarded,\n        noAvatars,\n      }).width;\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n        observeIntersection={observeIntersectionForLoading}\n        animationLevel={animationLevel}\n        withVideo\n      />\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        reactionMessage={reactionMessage}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactions={reactionsPosition === 'in-meta'}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        activeReaction={activeReaction}\n        onClick={handleMetaClick}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReaction={activeReaction}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !hasThread;\n    const textContentClass = buildClassName(\n      'text-content',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            noUserColors={isOwn}\n            isProtected={isProtected}\n            sender={replyMessageSender}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            <MessageText\n              message={message}\n              emojiSize={emojiSize}\n              highlight={highlight}\n              isProtected={isProtected}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n              withTranslucentThumbs={isCustomShape}\n            />\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n            serverTimeOffset={serverTimeOffset}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && !media) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('message-title-name interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {renderText(senderTitle)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">\n              {lang('ForwardedMessage')}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={threadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReaction && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji reaction={defaultReaction!} />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            activeReaction={activeReaction}\n            availableReactions={availableReactions}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, lastSyncTime, serverTimeOffset,\n    } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, threadInfo, forwardInfo, transcriptionId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatUsername = chat?.username;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chat.fullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && (\n      selectAnimatedEmoji(global, singleEmoji) || selectLocalAnimatedEmoji(global, singleEmoji)\n    ) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualThreadInfo = threadInfo\n      ? selectThreadInfo(global, threadInfo.chatId, threadInfo.threadId) || threadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    return {\n      theme: selectTheme(global),\n      chatUsername,\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      lastSyncTime,\n      serverTimeOffset,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      threadInfo: actualThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReaction: reactionMessage && global.activeReactions[reactionMessage.id],\n      activeEmojiInteractions: global.activeEmojiInteractions,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      animationLevel: global.settings.byKey.animationLevel,\n      senderAdminMember,\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId,\n        messageId: forwardInfo!.fromMessageId,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasReply?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMedia = photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasReply || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default memo(AboutAdsModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(SponsoredMessageContextMenuContainerAsync);\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  }, [focusMessage, message, openChat, openChatByInvite, startBot]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\nimport { getActions } from '../../global';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  threadId: number;\n  type: MessageListType;\n  isReady: boolean;\n  areReactionsInMeta: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  areReactionsInMeta,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  threadId,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            areReactionsInMeta={areReactionsInMeta}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] > LOCAL_MESSAGE_MIN_ID;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useOnChange(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n              isCurrentUserPremium\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { MessageListType } from '../../global/types';\n\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\n\nimport './NoMessages.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf, type, isGroupChatJustCreated,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiBotInfo, ApiMessage, ApiRestrictionReason } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getVideoDimensions,\n  getPhotoFullDimensions,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { DPR } from '../../util/environment';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\n\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useMedia from '../../hooks/useMedia';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport Skeleton from '../ui/Skeleton';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: AnimationLevel;\n  lastMessage?: ApiMessage;\n  isLoadingBotInfo?: boolean;\n  botInfo?: ApiBotInfo;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  isLoadingBotInfo,\n  botInfo,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n  withDefaultBg,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useOnChange(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat, lastSyncTime]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useOnChange(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((l) => messagesById[l]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] > LOCAL_MESSAGE_MIN_ID;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools] as const);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n\n  const isBotInfoEmpty = botInfo && !botInfo.description;\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botInfo ? (\n        <div className=\"empty\">\n          {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n          {isBotInfoEmpty && <span>{lang('NoMessages')}</span>}\n          {botInfo && (\n            <div\n              className=\"bot-info\"\n              style={botInfoRealDimensions && (\n                `width: ${botInfoRealDimensions.width}px`\n              )}\n            >\n              {botInfoPhotoUrl && (\n                <img\n                  src={botInfoPhotoUrl}\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                  alt=\"Bot info\"\n                />\n              )}\n              {botInfoGifUrl && (\n                <OptimizedVideo\n                  canPlay\n                  src={botInfoGifUrl}\n                  loop\n                  disablePictureInPicture\n                  muted\n                  playsInline\n                />\n              )}\n              {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n                <Skeleton\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                />\n              )}\n              {botInfo.description && (\n                <div className=\"bot-info-description\">\n                  <p className=\"bot-info-title\">{lang('BotInfoTitle')}</p>\n                  {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated) ? (\n        <NoMessages\n          chatId={chatId}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          areReactionsInMeta={isPrivate}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botInfo = chatBot.fullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      isLoadingBotInfo,\n      botInfo,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 0) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      {hasUnreadReactions && (\n        <ScrollDownButton\n          icon=\"heart-outline\"\n          ariaLabelLang=\"AccDescrReactionMentionDown\"\n          onClick={focusNextReaction}\n          onReadAll={readAllReactions}\n          unreadCount={reactionsCount}\n        />\n      )}\n      {hasUnreadMentions && (\n        <ScrollDownButton\n          icon=\"mention\"\n          ariaLabelLang=\"AccDescrMentionDown\"\n          onClick={focusNextMention}\n          onReadAll={readAllMentions}\n          unreadCount={mentionsCount}\n        />\n      )}\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n  fetchBlob,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n      const shouldShrink = width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE;\n\n      if (shouldShrink || mimeType !== 'image/jpeg') {\n        const resizedUrl = await scaleImage(\n          blobUrl, shouldShrink ? MAX_QUICK_IMG_SIZE / Math.max(width, height) : 1, 'image/jpeg',\n        );\n        URL.revokeObjectURL(blobUrl);\n        const newBlob = await fetchBlob(resizedUrl);\n        return buildAttachment(filename, newBlob, true, options);\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    ...options,\n  };\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { EMOJI_IMG_REGEX } from '../../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\nimport parseEmojiOnlyString from '../../../../util/parseEmojiOnlyString';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nconst STARTS_ENDS_ON_EMOJI_IMG_REGEX = new RegExp(`^${EMOJI_IMG_REGEX.source}$`, 'g');\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const cleanHtml = useMemo(() => prepareForRegExp(html).trim(), [html]);\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(STARTS_ENDS_ON_EMOJI_IMG_REGEX)))\n  );\n  const hasStickers = Boolean(stickers?.length) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({\n        emoji: IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1]!,\n      });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","import type { IOpusRecorder } from 'opus-recorder';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import type { StateHookSetter } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiAttachment, ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\nimport parseMessageInput, { ENTITY_CLASS_BY_NODE_NAME } from '../../../../util/parseMessageInput';\nimport { containsCustomEmoji, stripCustomEmoji } from '../../../../global/helpers/symbols';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst STYLE_TAG_REGEX = /<style>(.*?)<\\/style>/gs;\n\nfunction preparePastedHtml(html: string) {\n  let fragment = document.createElement('div');\n  fragment.innerHTML = html.replace(/\\u00a0/g, ' ').replace(STYLE_TAG_REGEX, ''); // Strip &nbsp and styles\n\n  const textContents = fragment.querySelectorAll<HTMLDivElement>('.text-content');\n  if (textContents.length) {\n    fragment = textContents[textContents.length - 1]; // Replace with the last copied message\n  }\n\n  Array.from(fragment.getElementsByTagName('*')).forEach((node) => {\n    if (!(node instanceof HTMLElement)) return;\n    node.removeAttribute('style');\n\n    // Fix newlines\n    if (node.tagName === 'BR') node.replaceWith('\\n');\n    if (node.tagName === 'P') node.appendChild(document.createTextNode('\\n'));\n    if (node.tagName === 'IMG' && !node.dataset.entityType) node.replaceWith(node.getAttribute('alt') || '');\n    // We do not intercept copy logic, so we remove some nodes here\n    if (node.dataset.ignoreOnPaste) node.remove();\n\n    if (ENTITY_CLASS_BY_NODE_NAME[node.tagName]) {\n      node.setAttribute('data-entity-type', ENTITY_CLASS_BY_NODE_NAME[node.tagName]);\n    }\n    // Strip non-entity tags\n    if (!node.dataset.entityType && node.textContent === node.innerText) node.replaceWith(node.textContent);\n    // Append entity parameters for parsing\n    if (node.dataset.alt) node.setAttribute('alt', node.dataset.alt);\n    switch (node.dataset.entityType) {\n      case ApiMessageEntityTypes.MentionName:\n        node.replaceWith(node.textContent || '');\n        break;\n      case ApiMessageEntityTypes.CustomEmoji:\n        node.textContent = node.dataset.alt || '';\n        break;\n    }\n  });\n\n  return fragment.innerHTML.trimEnd();\n}\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: ApiFormattedText, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n  shouldStripCustomEmoji?: boolean,\n  onCustomEmojiStripped?: VoidFunction,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const html = e.clipboardData.getData('text/html');\n      let pastedFormattedText = html ? parseMessageInput(\n        preparePastedHtml(html), undefined, true,\n      ) : undefined;\n\n      if (pastedFormattedText && containsCustomEmoji(pastedFormattedText) && shouldStripCustomEmoji) {\n        pastedFormattedText = stripCustomEmoji(pastedFormattedText);\n        onCustomEmojiStripped?.();\n      }\n\n      const { items } = e.clipboardData;\n      let files: File[] = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (files.length === 0 && !pastedText) {\n        return;\n      }\n\n      if (files.length > 0 && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file, files.length === 1 && CLIPBOARD_ACCEPTED_TYPES.includes(file.type));\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      const textToPaste = pastedFormattedText?.entities?.length ? pastedFormattedText : { text: pastedText };\n\n      if (textToPaste) {\n        insertTextAndUpdateCursor(textToPaste, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [\n    insertTextAndUpdateCursor, editedMessage, setAttachments, isActive, shouldStripCustomEmoji, onCustomEmojiStripped,\n  ]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: string | undefined;\nlet currentThreadId: number | undefined;\n\nconst useDraft = (\n  draft: ApiFormattedText | undefined,\n  chatId: string,\n  threadId: number,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  lastSyncTime?: number,\n) => {\n  const { saveDraft, clearDraft, loadCustomEmojis } = getActions();\n  const prevDraft = usePrevious(draft);\n\n  const updateDraft = useCallback((draftChatId: string, draftThreadId: number) => {\n    const currentHtml = htmlRef.current;\n    if (currentHtml === undefined || editedMessage || !lastSyncTime) return;\n    if (currentHtml.length) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(currentHtml!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, lastSyncTime, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      if (!draft && prevDraft) {\n        setHtml('');\n      }\n      return;\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    const customEmojiIds = draft.entities\n      ?.map((entity) => entity.type === ApiMessageEntityTypes.CustomEmoji && entity.documentId)\n      .filter(Boolean) || [];\n    if (customEmojiIds.length) loadCustomEmojis({ ids: customEmojiIds });\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n  }, [\n    chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId, editedMessage, prevDraft, loadCustomEmojis,\n  ]);\n\n  const html = htmlRef.current;\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n\nexport default useDraft;\n","import { useCallback, useRef, useState } from '../lib/teact/teact';\n\nimport useRunDebounced from './useRunDebounced';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck, { isHeavyAnimating } from './useHeavyAnimationCheck';\nimport useForceUpdate from './useForceUpdate';\n\nexport default function useDebouncedMemo<R extends any, D extends any[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const [value, setValue] = useState<R>();\n  const { isFrozen, updateWhenUnfrozen } = useHeavyAnimationFreeze();\n  const runDebounced = useRunDebounced(ms, true);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      updateWhenUnfrozen();\n      return;\n    }\n\n    runDebounced(() => {\n      setValue(resolverFn());\n    });\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n\nfunction useHeavyAnimationFreeze() {\n  const isPending = useRef(false);\n\n  const updateWhenUnfrozen = useCallback(() => {\n    isPending.current = true;\n  }, []);\n\n  const forceUpdate = useForceUpdate();\n  const handleUnfreeze = useCallback(() => {\n    if (!isPending.current) {\n      return;\n    }\n\n    isPending.current = false;\n    forceUpdate();\n  }, [forceUpdate]);\n  useHeavyAnimationCheck(noop, handleUnfreeze);\n\n  return {\n    isFrozen: isHeavyAnimating(),\n    updateWhenUnfrozen,\n  };\n}\n\nfunction noop() {\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport type { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport useDebouncedMemo from '../../../../hooks/useDebouncedMemo';\n\nconst DEBOUNCE_MS = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: string,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot } = getActions();\n\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDebouncedMemo(() => parseBotQuery(html), DEBOUNCE_MS, [html]) || {};\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = usernameLowered ? inlineBots?.[usernameLowered] : undefined;\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({\n        chatId, username: usernameLowered, query, offset,\n      });\n    }\n  }, [isAllowed, usernameLowered, chatId, queryInlineBot, query, offset]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results?.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: unmarkIsOpen,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nfunction parseBotQuery(html: string) {\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n    usernameLowered: result[1].toLowerCase(),\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  return tempEl.innerText;\n}\n","import {\n  useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport { throttle } from '../../../../util/schedulers';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\nconst RE_COMMAND = /^[\\w@]{1,32}\\s?/i;\n\nexport default function useBotCommandTooltip(\n  isAllowed: boolean,\n  html: string,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n\n  const getFilteredCommands = useCallback((filter) => {\n    if (!botCommands && !chatBotCommands) {\n      setFilteredBotCommands(undefined);\n\n      return;\n    }\n\n    runThrottled(() => {\n      const nextFilteredBotCommands = (botCommands || chatBotCommands || [])\n        .filter(({ command }) => !filter || command.includes(filter));\n      setFilteredBotCommands(\n        nextFilteredBotCommands && nextFilteredBotCommands.length ? nextFilteredBotCommands : undefined,\n      );\n    });\n  }, [botCommands, chatBotCommands]);\n\n  useEffect(() => {\n    if (!isAllowed || !html.length) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const shouldShowCommands = html.startsWith('/');\n\n    if (shouldShowCommands) {\n      const filter = prepareForRegExp(html.substr(1)).match(RE_COMMAND);\n      getFilteredCommands(filter ? filter[0] : '');\n    } else {\n      setFilteredBotCommands(undefined);\n    }\n  }, [getFilteredCommands, html, isAllowed, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (filteredBotCommands && filteredBotCommands.length && html.length > 0) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [filteredBotCommands, html.length, markIsOpen, unmarkIsOpen]);\n\n  return {\n    isOpen,\n    close: unmarkIsOpen,\n    filteredBotCommands,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef, useCallback, memo } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport type { OwnProps as ButtonProps } from './Button';\nimport Button from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  const handleClick = useCallback(() => {\n    isMouseInside.current = true;\n    onActivate();\n  }, [onActivate]);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={!IS_TOUCH_ENV ? onActivate : handleClick}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vL8HfVVnjTeFmp1ECFj8\",\"compact\":\"N3E1geoPu1vesCKf545F\",\"image\":\"Fb4aIyDYEwOlaqY8oZkV\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ISettings } from '../../../types';\nimport type { ApiDocument } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport useMedia from '../../../hooks/useMedia';\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport styles from './AttachBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((l) => {\n      l.style.stroke = color;\n      l.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, IS_COMPACT_MENU && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, IS_COMPACT_MENU && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition, ISettings } from '../../../types';\nimport type { ApiAttachBot } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotIcon from './AttachBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachBot, toggleAttachBot } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  }, [onMenuOpened, openMenu]);\n\n  const handleCloseMenu = useCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  }, [closeMenu, onMenuClosed]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleRemoveBot = useCallback(() => {\n    toggleAttachBot({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  }, [bot.id, toggleAttachBot]);\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachBot({\n        botId: bot.id,\n        chatId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachBotItem);\n","import React, {\n  memo, useMemo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiAttachMenuPeerType } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CONTENT_TYPES_WITH_PREVIEW } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotItem from './AttachBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  isScheduled?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  peerType?: ApiAttachMenuPeerType;\n  onFileSelect: (files: File[], isQuick: boolean) => void;\n  onPollCreate: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  attachBots,\n  peerType,\n  isScheduled,\n  onFileSelect,\n  onPollCreate,\n  theme,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  }, [isAttachMenuOpen, openAttachMenu, closeAttachMenu]);\n\n  const handleFileSelect = useCallback((e: Event, isQuick: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      onFileSelect(Array.from(files), isQuick);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(CONTENT_TYPES_WITH_PREVIEW).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const bots = useMemo(() => {\n    return Object.values(attachBots).filter((bot) => {\n      if (!peerType) return false;\n      if (peerType === 'bots' && bot.id === chatId && bot.peerTypes.includes('self')) {\n        return true;\n      }\n      return bot.peerTypes.includes(peerType);\n    });\n  }, [attachBots, chatId, peerType]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            <MenuItem icon=\"photo\" onClick={handleQuickSelect}>{lang('AttachmentMenu.PhotoOrVideo')}</MenuItem>\n            <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n          </>\n        )}\n        {canAttachPolls && (\n          <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n        )}\n\n        {canAttachMedia && !isScheduled && bots.map((bot) => (\n          <AttachBotItem\n            bot={bot}\n            chatId={chatId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId, stripCustomEmoji } from '../../../global/helpers';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport MenuItem from '../../ui/MenuItem';\nimport Menu from '../../ui/Menu';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  forwardsHaveCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  noAuthors,\n  noCaptions,\n  forwardsHaveCaptions,\n  isCurrentUserPremium,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    changeForwardRecipient,\n    setForwardNoAuthors,\n    setForwardNoCaptions,\n    exitForwardMode,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const isForwarding = Boolean(forwardedMessagesCount);\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  }, [replyingToId, editingId, forwardedMessagesCount, onClear, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    if (isForwarding) return;\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, isForwarding, message]);\n\n  const handleClearClick = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.stopPropagation();\n    clearEmbedded();\n  }, [clearEmbedded]);\n\n  const handleChangeRecipientClick = useCallback(() => {\n    changeForwardRecipient();\n  }, [changeForwardRecipient]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n  const getRootElement = useCallback(() => ref.current!, []);\n  const getMenuElement = useCallback(() => ref.current!.querySelector('.forward-context-menu .bubble'), []);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const leftIcon = useMemo(() => {\n    if (replyingToId) {\n      return 'icon-reply';\n    }\n    if (editingId) {\n      return 'icon-edit';\n    }\n    if (isForwarding) {\n      return 'icon-forward';\n    }\n\n    return undefined;\n  }, [editingId, isForwarding, replyingToId]);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? lang('ForwardedMessageCount', forwardedMessagesCount)\n    : undefined;\n\n  const strippedMessage = useMemo(() => {\n    if (!message || !isForwarding || !message.content.text || !noAuthors || isCurrentUserPremium) return message;\n\n    const strippedText = stripCustomEmoji(message.content.text);\n    return {\n      ...message,\n      content: {\n        ...message.content,\n        text: strippedText,\n      },\n    };\n  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className} ref={ref} onContextMenu={handleContextMenu} onClick={handleContextMenu}>\n      <div>\n        <div className=\"embedded-left-icon\">\n          <i className={leftIcon} />\n        </div>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={strippedMessage}\n          sender={!noAuthors ? sender : undefined}\n          customText={customText}\n          title={editingId ? lang('EditMessage') : noAuthors ? lang('HiddenSendersNameDescription') : undefined}\n          onClick={handleMessageClick}\n          hasContextMenu={isForwarding}\n        />\n        <Button\n          className=\"embedded-cancel\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Cancel')}\n          onClick={handleClearClick}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        {isForwarding && (\n          <Menu\n            isOpen={isContextMenuOpen}\n            transformOriginX={transformOriginX}\n            transformOriginY={transformOriginY}\n            positionX={positionX}\n            positionY={positionY}\n            style={menuStyle}\n            className=\"forward-context-menu\"\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          >\n            <MenuItem\n              icon={!noAuthors ? 'message-succeeded' : undefined}\n              customIcon={noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors(false)}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')}\n            </MenuItem>\n            <MenuItem\n              icon={noAuthors ? 'message-succeeded' : undefined}\n              customIcon={!noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors(true)}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')}\n            </MenuItem>\n            {forwardsHaveCaptions && (\n              <>\n                <MenuSeparator />\n                <MenuItem\n                  icon={!noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions(false)}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')}\n                </MenuItem>\n                <MenuItem\n                  icon={noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={!noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions(true)}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption')}\n                </MenuItem>\n              </>\n            )}\n            <MenuSeparator />\n            <MenuItem icon=\"replace\" onClick={handleChangeRecipientClick}>\n              {lang('ChangeRecipient')}\n            </MenuItem>\n          </Menu>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: {\n        fromChatId, toChatId, messageIds: forwardMessageIds, noAuthors, noCaptions,\n      },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(global, fromChatId!, id)!);\n\n    let message: ApiMessage | undefined;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = forwardedMessages?.[0];\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    const forwardsHaveCaptions = forwardedMessages?.some((forward) => (\n      forward?.content.text && Object.keys(forward.content).length > 1\n    ));\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      noAuthors,\n      noCaptions,\n      forwardsHaveCaptions,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageEntityTextUrl, ApiWebPage } from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDebouncedMemo from '../../../hooks/useDebouncedMemo';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const link = useDebouncedMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities?.find((entity): entity is ApiMessageEntityTextUrl => (\n      entity.type === ApiMessageEntityTypes.TextUrl\n    ));\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, DEBOUNCE_MS, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  }, [chatId, threadId, toggleMessageWebPage]);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <div className=\"WebPagePreview-left-icon\">\n          <i className=\"icon-link\" />\n        </div>\n        <WebPage message={messageStub} inPreview theme={theme} />\n        <Button\n          className=\"WebPagePreview-clear\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel=\"Clear Webpage Preview\"\n          onClick={handleClearWebpagePreview}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState, MessageListType } from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiBotCommand,\n  ApiBotMenuButton,\n  ApiAttachMenuPeerType,\n} from '../../../api/types';\nimport {\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport type { InlineBotSettings, ISettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_ID,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n  EDITABLE_INPUT_CSS_SELECTOR, MAX_UPLOAD_FILEPART_SIZE,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatMessage,\n  selectUser,\n  selectCanScheduleUntilOnline,\n  selectEditingScheduledDraft,\n  selectEditingDraft,\n  selectRequestedDraftText,\n  selectTheme,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectChatType,\n  selectRequestedDraftFiles,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatAdmin,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../../global/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport { insertHtmlInSelection } from '../../../util/selection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\nimport { hasPreview } from '../../../util/files';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { buildCustomEmojiHtml } from './helpers/customEmoji';\nimport { processMessageInputForCustomEmoji } from '../../../util/customEmojiManager';\nimport { getTextWithEntitiesAsHtml } from '../../common/helpers/renderTextWithEntities';\n\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useOnChange from '../../../hooks/useOnChange';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiFormattedText;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: GlobalState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    customEmojiForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    shouldSuggestCustomEmoji?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedDraftText?: string;\n    requestedDraftFiles?: File[];\n    attachBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ISettings['theme'];\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n    canSendVoiceByPrivacy?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = GlobalState['messages']['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  canSendVoiceByPrivacy,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  customEmojiForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  captionLimit,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  shouldSuggestCustomEmoji,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  requestedDraftText,\n  requestedDraftFiles,\n  botMenuButton,\n  attachBots,\n  attachMenuPeerType,\n  theme,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    resetOpenChatWithDraft,\n    callAttachBot,\n    openLimitReachedModal,\n    openPremiumModal,\n    addRecentCustomEmoji,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setInnerHtml] = useState<string>('');\n  const htmlRef = useStateRef(html);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsPeerIds = chat?.sendAsPeerIds;\n  const canShowSendAs = sendAsPeerIds\n    && (sendAsPeerIds.length > 1 || !sendAsPeerIds.some((peer) => peer.id === currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const setHtml = useCallback((newHtml: string) => {\n    setInnerHtml(newHtml);\n    requestAnimationFrame(() => {\n      processMessageInputForCustomEmoji();\n    });\n  }, []);\n\n  const customEmojiNotificationNumber = useRef(0);\n\n  const handleScheduleCancel = useCallback(() => {\n    cancelForceShowSymbolMenu();\n  }, [cancelForceShowSymbolMenu]);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, handleScheduleCancel);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsPeerIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsPeerIds]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useOnChange(([prevChatId, prevSendAsPeerIds]) => {\n    // We only animate send-as button if `sendAsPeerIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsPeerIds && !prevSendAsPeerIds);\n  }, [chatId, sendAsPeerIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const handleSetAttachments = useCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (newAttachments && newAttachments.some((l) => l.size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n      }\n    }, [attachments, fileSizeLimit, openLimitReachedModal],\n  );\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  useEffect(() => {\n    if (!html || editingMessage) return;\n    sendMessageAction({ type: 'typing' });\n  }, [editingMessage, html, sendMessageAction]);\n\n  const mainButtonState = editingMessage ? MainButtonState.Edit\n    : (!IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding)\n      ? (shouldSchedule ? MainButtonState.Schedule : MainButtonState.Send)\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    EDITABLE_INPUT_CSS_SELECTOR,\n    setHtml,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean((botCommands && botCommands.length) || (chatBotCommands && chatBotCommands.length)),\n    html,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const { isCustomEmojiTooltipOpen, closeCustomEmojiTooltip, insertCustomEmoji } = useCustomEmojiTooltip(\n    Boolean(shouldSuggestCustomEmoji && !attachments.length),\n    EDITABLE_INPUT_CSS_SELECTOR,\n    html,\n    setHtml,\n    customEmojiForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen,\n    closeEmojiTooltip,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    insertCustomEmoji: insertCustomEmojiFromEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    htmlRef,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertHtmlAndUpdateCursor = useCallback((newHtml: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [htmlRef, setHtml]);\n\n  const insertFormattedTextAndUpdateCursor = useCallback((\n    text: ApiFormattedText, inputId: string = EDITABLE_INPUT_ID,\n  ) => {\n    const newHtml = getTextWithEntitiesAsHtml(text);\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertCustomEmojiAndUpdateCursor = useCallback((emoji: ApiSticker, inputId: string = EDITABLE_INPUT_ID) => {\n    insertHtmlAndUpdateCursor(buildCustomEmojiHtml(emoji), inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, [htmlRef, setHtml]);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments(MEMO_EMPTY_ARRAY);\n    closeStickerTooltip();\n    closeCustomEmojiTooltip();\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeCustomEmojiTooltip, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu, setHtml]);\n\n  // Handle chat change (ref is used to avoid redundant effect calls)\n  const stopRecordingVoiceRef = useRef<typeof stopRecordingVoice>();\n  stopRecordingVoiceRef.current = stopRecordingVoice;\n  useEffect(() => {\n    return () => {\n      stopRecordingVoiceRef.current!();\n      resetComposer();\n    };\n  }, [chatId, resetComposer, stopRecordingVoiceRef]);\n\n  const showCustomEmojiPremiumNotification = useCallback(() => {\n    const notificationNumber = customEmojiNotificationNumber.current;\n    if (!notificationNumber) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: () => openPremiumModal({ initialSection: 'animated_emoji' }),\n        actionText: lang('PremiumMore'),\n      });\n    } else {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint2'),\n        action: () => openChat({ id: currentUserId, shouldReplaceHistory: true }),\n        actionText: lang('Open'),\n      });\n    }\n    customEmojiNotificationNumber.current = Number(!notificationNumber);\n  }, [currentUserId, lang, openChat, openPremiumModal, showNotification]);\n\n  const [handleEditComplete, handleEditCancel] = useEditing(\n    htmlRef,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n  );\n  useDraft(draft, chatId, threadId, htmlRef, setHtml, editingMessage, lastSyncTime);\n  useClipboardPaste(\n    isForCurrentMessageList,\n    insertFormattedTextAndUpdateCursor,\n    handleSetAttachments,\n    editingMessage,\n    !isCurrentUserPremium && !isChatWithSelf,\n    showCustomEmojiPremiumNotification,\n  );\n\n  const handleEmbeddedClear = useCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  }, [editingMessage, handleEditCancel]);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    handleSetAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, [handleSetAttachments]);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    handleSetAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments, handleSetAttachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    // No need to subscribe on updates in `mapStateToProps`\n    const { serverTimeOffset } = getGlobal();\n\n    const maxLength = currentAttachments.length ? captionLimit : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = getServerTime(serverTimeOffset);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput?.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime(serverTimeOffset);\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, clearDraft, chatId, captionLimit,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang, htmlRef,\n  ]);\n\n  const handleClickBotMenu = useCallback(() => {\n    if (botMenuButton?.type !== 'webApp') return;\n    callAttachBot({\n      botId: chatId, chatId, isFromBotMenu: true, url: botMenuButton.url,\n    });\n  }, [botMenuButton, callAttachBot, chatId]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleActivateSymbolMenu = useCallback(() => {\n    closeBotCommandMenu();\n    closeSendAsMenu();\n    openSymbolMenu();\n  }, [closeBotCommandMenu, closeSendAsMenu, openSymbolMenu]);\n\n  const handleMessageSchedule = useCallback((\n    args: ScheduledMessageArgs, scheduledAt: number,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        scheduledAt,\n      });\n    }\n  }, [handleSend, sendInlineBotResult, sendMessage]);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt);\n      });\n    }\n  }, [contentToBeScheduled, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedDraftText) {\n      setHtml(requestedDraftText);\n      resetOpenChatWithDraft();\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedDraftText, resetOpenChatWithDraft, setHtml]);\n\n  useEffect(() => {\n    if (requestedDraftFiles?.length) {\n      const isQuick = requestedDraftFiles.every((file) => hasPreview(file));\n      handleFileSelect(requestedDraftFiles, isQuick);\n      resetOpenChatWithDraft();\n    }\n  }, [handleFileSelect, requestedDraftFiles, resetOpenChatWithDraft]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && !isChatWithSelf) {\n      showCustomEmojiPremiumNotification();\n      return;\n    }\n\n    insertCustomEmojiAndUpdateCursor(emoji);\n  }, [insertCustomEmojiAndUpdateCursor, isChatWithSelf, isCurrentUserPremium, showCustomEmojiPremiumNotification]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean, shouldPreserveInput = false,\n  ) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({ sticker, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ gif, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleInlineBotSelect = useCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    chatId, clearDraft, connectionState, handleMessageSchedule, requestCalendar, resetComposer, sendInlineBotResult,\n    shouldSchedule,\n  ]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, handleMessageSchedule, requestCalendar, sendMessage, shouldSchedule]);\n\n  const handleSendSilent = useCallback(() => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ isSilent: true }, scheduledAt);\n      });\n    } else {\n      void handleSend(true);\n    }\n  }, [handleMessageSchedule, handleSend, requestCalendar, shouldSchedule]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu, closeBotCommandMenu]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && (!canAttachMedia || !canSendVoiceByPrivacy);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record: {\n        if (areVoiceMessagesNotAllowed) {\n          if (!canSendVoiceByPrivacy) {\n            showNotification({\n              message: lang('VoiceMessagesRestrictedByPrivacy', chat?.title),\n            });\n          }\n        } else {\n          startRecordingVoice();\n        }\n        break;\n      }\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt);\n        });\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, handleEditComplete, activeVoiceRecording, requestCalendar, areVoiceMessagesNotAllowed,\n    canSendVoiceByPrivacy, showNotification, lang, chat?.title, startRecordingVoice, pauseRecordingVoice,\n    handleMessageSchedule,\n  ]);\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = !canAttachMedia\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const handleSendScheduled = useCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const isBotMenuButtonCommands = botMenuButton && botMenuButton?.type === 'commands';\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        captionLimit={captionLimit}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        recentEmojis={recentEmojis}\n        isReady={isReady}\n        isChatWithSelf={isChatWithSelf}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        shouldSchedule={shouldSchedule}\n        onSendSilent={handleSendSilent}\n        onSend={handleSend}\n        onSendScheduled={handleSendScheduled}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n        shouldSuggestCustomEmoji={shouldSuggestCustomEmoji}\n        customEmojiForEmoji={customEmojiForEmoji}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsPeerIds={sendAsPeerIds}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n        isSavedMessages={isChatWithSelf}\n        canSendGifs={canSendGifs}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage onClear={handleEmbeddedClear} />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {isChatWithBot && botMenuButton && botMenuButton.type === 'webApp' && !editingMessage\n            && (\n              <BotMenuButton\n                isOpen={!html && !activeVoiceRecording}\n                onClick={handleClickBotMenu}\n                text={botMenuButton.text}\n                isDisabled={Boolean(activeVoiceRecording)}\n              />\n            )}\n          {(isChatWithBot && isBotMenuButtonCommands\n            && botCommands !== false && !activeVoiceRecording && !editingMessage) && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={buildClassName('symbol-menu-button', isSymbolMenuOpen && 'activated')}\n              round\n              color=\"translucent\"\n              onActivate={handleActivateSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            editableInputId={EDITABLE_INPUT_ID}\n            chatId={chatId}\n            threadId={threadId}\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && !attachments.length}\n            noFocusInterception={attachments.length > 0}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            attachBots={attachBots}\n            peerType={attachMenuPeerType}\n            theme={theme}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n            onCustomEmojiSelect={insertCustomEmojiFromEmojiTooltip}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n          <SymbolMenu\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isSymbolMenuOpen || isSymbolMenuForced}\n            canSendGifs={canSendGifs}\n            canSendStickers={canSendStickers}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        allowDisabledClick\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language, shouldSuggestStickers, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsPeerIds && defaultSendAsId\n      && chat.sendAsPeerIds.some((peer) => peer.id === defaultSendAsId) ? defaultSendAsId\n      : (chat?.adminRights?.anonymous ? chat?.id : undefined);\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedDraftText = selectRequestedDraftText(global, chatId);\n    const requestedDraftFiles = selectRequestedDraftFiles(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n      && threadId === currentMessageList?.threadId\n      && messageListType === currentMessageList?.type;\n    const user = selectUser(global, chatId);\n    const canSendVoiceByPrivacy = (user && !user.fullInfo?.noVoiceMessages) ?? true;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      pollModal: global.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      customEmojiForEmoji: global.customEmojis.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      shouldSuggestStickers,\n      shouldSuggestCustomEmoji,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n      chatBotCommands: chat?.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot?.fullInfo ? (chatBot.fullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBot?.fullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedDraftText,\n      requestedDraftFiles,\n      attachBots: global.attachMenu.bots,\n      attachMenuPeerType: selectChatType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * MAX_UPLOAD_FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      canSendVoiceByPrivacy,\n    };\n  },\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\n\nconst useEditing = (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n) => {\n  const { editMessage, setEditingDraft } = getActions();\n\n  useEffectWithPrevDeps(([prevEditedMessage]) => {\n    if (!editedMessage) {\n      return;\n    }\n    if (prevEditedMessage?.id === editedMessage.id) {\n      return;\n    }\n\n    const html = getTextWithEntitiesAsHtml(editingDraft?.text.length ? editingDraft : editedMessage.content.text);\n    setHtml(html);\n    // `fastRaf` would execute syncronously in this case\n    requestAnimationFrame(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n  }, [editedMessage, setHtml] as const);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      const edited = parseMessageInput(htmlRef.current!);\n      const update = edited.text.length ? edited : undefined;\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  const restoreNewDraftAfterEditing = useCallback(() => {\n    if (!draft) return;\n    // Run 1 frame after editing draft reset\n    fastRaf(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        requestAnimationFrame(() => {\n          focusEditableElement(messageInput, true);\n        });\n      }\n    });\n  }, [draft, setHtml]);\n\n  const handleEditCancel = useCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(htmlRef.current!);\n    const update = edited.text.length ? edited : undefined;\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel];\n};\n\nexport default useEditing;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default memo(GiftPremiumModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTheme,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat, getMessageSendingRestrictionReason, isChatChannel, isChatGroup, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useOnChange from '../../hooks/useOnChange';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  lastSyncTime?: number;\n};\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  lastSyncTime,\n}) => {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const hasTools = hasPinnedOrAudioPlayer && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, CLOSE_ANIMATION_DURATION);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, CLOSE_ANIMATION_DURATION);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, CLOSE_ANIMATION_DURATION);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, CLOSE_ANIMATION_DURATION);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useOnChange(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (window.visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openPreviousChat();\n  }, [unpinAllMessages, chatId, closeUnpinModal, openPreviousChat]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, renderingShouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId: chatId! });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && messageSendingRestrictionReason,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingCanStartBot || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId}\n                threadId={renderingThreadId}\n                type={renderingMessageListType}\n                canPost={renderingCanPost}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    messageListType={renderingMessageListType}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {messageSendingRestrictionReason}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT\n                  && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest)) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const { messageLists } = global.messages;\n    const currentMessageList = selectCurrentMessageList(global);\n    const {\n      isLeftColumnShown, chats: { listIds }, activeEmojiInteractions, lastSyncTime,\n    } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(global.seenByModal),\n      isReactorListModalOpen: Boolean(global.reactorModal),\n      isGiftPremiumModalOpen: global.giftPremiumModal?.isOpen,\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const shouldLoadFullChat = Boolean(chat && isChatGroup(chat) && !chat.fullInfo && lastSyncTime);\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined),\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioPlayer: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n) {\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useOnChange(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ManagementScreens, ProfileState } from '../../types';\nimport type { ApiExportedInvite } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, isChatAdmin, isChatChannel, isUserId,\n} from '../../global/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId });\n  }, [openAddContactDialog, userId]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon-add-user\" />\n                </Button>\n              )}\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={toggleStatistics}\n                >\n                  <i className=\"icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && global.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = chat?.fullInfo?.canViewStatistics;\n    const currentInviteInfo = chatId ? global.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: string,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [groupChatMembers, serverTimeOffset, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { NewChatMembersProgress, MediaViewerOrigin, AudioOrigin } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n  { type: 'voice', title: 'SharedVoiceTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  serverTimeOffset,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    ...(hasCommonChatsTab ? [{\n      type: 'commonChats', title: 'SharedGroupsTab2',\n    }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown,\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages,\n    foundIds,\n    chatId,\n    lastSyncTime,\n    serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !chatMessages) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !chatMessages[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              senderTitle={getSenderName(lang, chatMessages[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !chatMessages[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatMessages = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat?.fullInfo?.members;\n    const adminMembersById = chat?.fullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chat.fullInfo && !chat.fullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ invite: undefined });\n            setEditingExportedInvite({ chatId, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics, toggleMessageStatistics,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers),\n    onBack: () => close(false),\n  });\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={chatId!}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={chatId!}\n            chatId={chatId!}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={chatId!}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const nextManagementScreen = chatId ? global.management.byChatId[chatId]?.nextScreen : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { Thread } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\n\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: Record<string, number[]>;\n  messages: Record<string, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  }, [cancelMessagesMediaDownload, runDebounced]);\n\n  useEffect(() => {\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, messageIds]) => (\n      messageIds.map((id) => messages[chatId].byId[id])\n    )).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [messages, activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = global.activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { withGlobal } from '../../global';\nimport { selectChat } from '../../global/selectors';\nimport { getCanPostInChat } from '../../global/helpers';\nimport windowSize from '../../util/windowSize';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: GlobalState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  // Prevent refresh when rotating device\n  useEffect(() => {\n    if (!isOpen) return undefined;\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default memo(PhoneCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../lib/teact/teactn';\n\nimport { createMessageHash } from '../../util/routing';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createMessageHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: global.messages.messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default memo(RatePhoneCallModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default memo(WebAppModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default memo(BotTrustModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default memo(AttachBotInstallModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import React, { memo, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useOnChange from '../../hooks/useOnChange';\nimport useForceUpdate from '../../hooks/useForceUpdate';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: GlobalState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_AMOUNT = IS_SINGLE_COLUMN_LAYOUT ? 50 : 100;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  function generateConfetti(w: number, h: number, amount = DEFAULT_CONFETTI_AMOUNT) {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }\n\n  const updateCanvas = () => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestAnimationFrame(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  };\n\n  useOnChange(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestAnimationFrame(updateCanvas);\n      }\n    }\n    return () => {\n      if (hideTimeout) {\n        clearTimeout(hideTimeout);\n      }\n    };\n  }, [lastConfettiTime, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['confetti']),\n)(ConfettiContainer));\n","import React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default memo(UrlAuthModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumMainModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumLimitReachedModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { deleteFolderDialogId } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !deleteFolderDialogId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default memo(DeleteFolderDialogAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './CustomEmojiSetsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default memo(CustomEmojiSetsModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(DraftRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(AttachBotRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useCallback, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { AnimationLevel, LangCode } from '../../types';\nimport type {\n  ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, GlobalState } from '../../global/types';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/environment';\nimport {\n  selectChatMessage,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport windowSize from '../../util/windowSize';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { fastRaf } from '../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport AttachBotInstallModal from './AttachBotInstallModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  chat?: ApiChat;\n  lastSyncTime?: number;\n  isLeftColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: AnimationLevel;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: GlobalState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: GlobalState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: GlobalState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiUser;\n  requestedAttachBotInChat?: GlobalState['requestedAttachBotInChat'];\n  requestedDraft?: GlobalState['requestedDraft'];\n  currentUser?: ApiUser;\n  urlAuth?: GlobalState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialogId?: number;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n};\n\nconst NOTIFICATION_INTERVAL = 1000;\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\n\nlet notificationInterval: number | undefined;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps> = ({\n  lastSyncTime,\n  isLeftColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUser,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  deleteFolderDialogId,\n}) => {\n  const {\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  useInterval(checkAppVersion, APP_OUTDATED_TIMEOUT_MS, true);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      checkAppVersion();\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig, loadAttachBots, loadContactList,\n    loadPremiumGifts, checkAppVersion,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    if (!prevLastSyncTime && lastSyncTime) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [lastSyncTime] as const);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers, addedCustomEmojiIds]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (lastSyncTime && parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [lastSyncTime]);\n\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    if (!prevLastSyncTime && lastSyncTime) {\n      openChat({\n        id: parsedLocationHash.chatId,\n        threadId: parsedLocationHash.threadId,\n        type: parsedLocationHash.type,\n      });\n    }\n  }, [lastSyncTime] as const);\n\n  // Prevent refresh by accidentally rotating device when listening to a voice chat\n  useEffect(() => {\n    if (!activeGroupCallId && !isPhoneCallActive) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [activeGroupCallId, isPhoneCallActive]);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useOnChange(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      fastRaf(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  // Handle opening right column\n  useOnChange(([prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined) {\n      return;\n    }\n\n    if (animationLevel === 0) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isRightColumnOpen]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = getAllNotificationsCount();\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = getAllNotificationsCount() - initialUnread;\n        if (newUnread > 0) {\n          updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n          updateIcon(true);\n        }\n      } else {\n        updatePageTitle(PAGE_TITLE);\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    closeStickerSetModal();\n  }, [closeStickerSetModal]);\n\n  const handleCustomEmojiSetsModalClose = useCallback(() => {\n    closeCustomEmojiSets();\n  }, [closeCustomEmojiSets]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUser={currentUser} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal bot={botTrustRequestBot} type={botTrustRequest?.type} />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog deleteFolderDialogId={deleteFolderDialogId} />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          animationLevel, language, wasTimeFormatSetManually,\n        },\n      },\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      lastSyncTime,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n    } = global;\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const openedGame = global.openedGame;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n\n    return {\n      lastSyncTime,\n      isLeftColumnOpen: global.isLeftColumnShown,\n      isRightColumnOpen: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: Boolean(global.phoneCall),\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: global.newContact?.userId,\n      newContactByPhoneNumber: global.newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(global.ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall && selectUser(global, requestedAttachBotInstall.botId),\n      requestedAttachBotInChat,\n      webApp,\n      currentUser,\n      urlAuth,\n      isPremiumModalOpen: global.premiumModal?.isOpen,\n      limitReached: global.limitReachedModal?.limit,\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      deleteFolderDialogId: global.deleteFolderDialogModal,\n      requestedDraft,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport { decryptSession } from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 180000; // 3 minutes\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(\n    resetInvalidUnlockAttempts,\n    invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? TIMEOUT_RESET_INVALID_ATTEMPTS_MS\n      : undefined,\n  );\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [invalidAttemptsCount, lang, logInvalidUnlockAttempt, unlockScreen]);\n\n  useEffect(() => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [invalidAttemptsCount, lang]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\n\n// eslint-disable-next-line import/no-cycle\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { connectionState, passcode: { isScreenLocked } } = getGlobal();\nif (!connectionState && !isScreenLocked) {\n  getActions().initApi();\n}\n"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","currentMessageList","premiumModal","promo","isOpen","replaceThreadParam","exitMessageSelectMode","isStatisticsShown","messages","contentToBeScheduled","forwardMessages","toChatId","updateCurrentMessageList","setGlobal","isChatInfoShown","openChat","text","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","folderId","deleteFolderDialogModal","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","messageListType","lang","langProvider","chatMessages","selectScheduledMessages","selectChatMessages","map","filter","message","selectAllowedMessageActions","canCopy","sort","message1","message2","result","reduce","acc","sender","selectSender","push","getSenderTitle","emoji","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","join","getMessageSummaryDescription","renderMessageSummaryHtml","resultText","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","messageId","paramName","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","newGlobal","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","noAuthors","noCaptions","selectedMessages","openForwardMenu","byChatId","activeDownloads","newByChatId","forEach","find","canDownload","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isQuiz","pollModal","RELEASE_DATETIME","Date","now","currentVersion","APP_VERSION","slice","serviceNotifications","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","serverTimeOffset","content","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","previousLocalId","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateUserSearch","globalUserIds","localUserIds","userId","newContact","isByPhoneNumber","closeNewContactDialog","action","leftColumnWidth","management","isActive","screen","nextScreen","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","documentId","recentCustomEmojis","order","isCustomEmoji","setIds","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","selectChatMessage","botId","viaBotId","senderId","selectIsTrustedBot","openedGame","botTrustRequest","onConfirm","top","left","width","height","animationLevel","settings","byKey","confetti","lastConfettiTime","limit","limitReachedModal","openedStickerSetShortName","openedCustomEmojiSetIds","lastRendered","customEmojis","unique","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","APP_VERSION_REGEX","fetch","then","response","trim","test","isUpdateAvailable","catch","DEBUG","console","error","status","payment","clearPayment","closeInvoice","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","isHidden","noLockOnUnload","onBeforeUnload","passcode","hasPasscode","clearStoredSession","async","updatePasscodeSettings","isLoading","setupPasscode","sessionJson","JSON","stringify","loadStoredSession","currentUserId","globalJson","serializeGlobal","encryptSession","forceUpdateCache","clearEncryptedSession","clearPasscodeSettings","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_STATE","isScreenLocked","invalidAttemptsCount","initApi","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","callApi","selectThreadOriginChat","users","threadInfos","localMessages","isDeleted","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingIds","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","i","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","replyingToTopId","delete","isRestricted","onTickEnd","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","replyMessage","updateChatMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","scheduledAt","noWebPage","selectNoWebPage","sendAs","selectSendAs","clearWebPagePreview","value","isSingle","attachments","isGrouped","restParams","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","selectEditingMessage","setEditingId","get","getMessageOriginalId","cancelApiProgress","draft","user","selectUser","isDeletedUser","replyToMsgId","isLocal","updateChat","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","getTranslation","isUserBot","minId","selectFirstUnreadId","unreadCount","readCount","count","l","countSortedIds","lastReadInboxMessageId","webPagePreview","loadWebPagePreview","options","poll","option","offset","shouldResetVoters","offsets","nextOffset","loadPollOptionResults","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","a","b","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","transcriptionId","isTranscriptionError","ignoreCache","newCustomEmojiIds","customEmoji","loadPinnedMessages","seenByUserIds","sendAsId","sendAsChat","fullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","shouldSkipModal","urlWithProtocol","ensureProtocol","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","appConfig","parsedUrl","URL","autologinDomains","hostname","searchParams","autologinToken","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","showDialog","getUserFullName","closeMediaViewer","searchThrottled","throttle","loadRecentStickers","recentStickers","loadStickers","stickerSetInfo","stickerSet","getActions","shortName","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","searchGifs","updateGifSearch","addedStickers","updateStickerSets","sets","loadStickerSets","added","addedCustomEmojis","loadCustomEmojiSets","loadCustomEmojis","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","loadFavoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","loadFeaturedStickers","premiumGifts","cachedSet","selectStickerSet","replaceAnimatedEmojis","loadAnimatedEmojis","animatedEmojiEffects","loadAnimatedEmojiEffects","saved","savedGifs","loadSavedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","title","openPremiumModal","className","newGifs","current","unfave","unfaveSticker","stickerSetId","installedDate","language","currentEmojiKeywords","emojiKeywords","fromVersion","keywords","searchStickers","searchWords","updateStickersForEmoji","loadStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","searchSharedMedia","SHARED_MEDIA_SLICE","newFoundIds","currentSearch","selectCurrentMediaSearch","updateLocalMediaSearchResults","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","searchChats","timestampPlusDay","foundIds","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","searchTextMessages","currentType","currentResults","timestamp","searchMessagesByDate","ManagementProgress","username","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","openLimitReachedModal","isChatBasicGroup","migrateChat","invite","editingInvite","update","inviteInfo","adminId","isRevoked","admin","revokedInvites","invites","link","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","releaseStatusTimeout","previousGlobal","loadTopMessages","log","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","areMessagesLoaded","draftsByChatId","editingDraft","selectEditingDraft","currentChatId","currentThreadId","currentChat","newCurrentChatId","currentMessageListInfo","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","threadsById","updateChats","updateUsers","updateThread","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","initFolderManager","addCallback","connectionState","authState","sync","photo","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","loadTopUsers","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","updateContact","deleteContact","profileId","isPrivate","isUserId","photos","userSearch","updateUserSearchFetchingStatus","searchUsers","userOrChat","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","GAMEE_URL","runDebouncedForSearch","toggleAttachBot","bot","isEnabled","loadAttachBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","openUrl","openGame","alert","isError","getPaymentForm","inputInvoice","form","invoice","setPaymentForm","setPaymentStep","PaymentStep","validateRequestedInfo","requestInfo","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","button","openPollModal","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","requestWebView","peerId","requestBotUrlAuth","buttonId","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","botSender","openChatWithDraft","queryId","resultId","scheduleDate","param","isBlocked","startParam","webViewUrl","webApp","isFromBotMenu","reply","closeWebApp","slug","trustedBotIds","newTrustedBotIds","add","Array","callbackPayload","requestedAttachBotInstall","supportedFilters","peerTypes","requestedAttachBotInChat","callAttachBot","isWriteAllowed","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","selectPaymentInputInvoice","saveInfo","setInvoiceInfo","isPaymentModalOpen","isExtendedMedia","setReceipt","receipt","nativeProvider","credentials","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","step","isClosed","isClosing","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","updateUnreadReactions","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","localEffect","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","selectLocalAnimatedEmojiEffectByName","timestamps","reaction","selectDefaultReaction","isMessageLocal","sendReaction","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","reactions","some","isChosen","ANIMATION_LEVEL_MAX","activeReactions","omit","recentReactions","canSeeList","addMessageReaction","defaultReaction","reactors","unreadReactionsCount","unreadReactions","fetchUnreadReactions","fromEntries","unread","isGroup","recentTopMessages","msgId","updateStatistics","views","forwards","dcId","statisticsDcId","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","areDeepEqual","value1","value2","type1","isArray1","isArray","array1","array2","every","member1","object1","object2","key1","newProfilePhoto","noTopChatsRequest","selectIsChatListed","loadTopChats","closeMessageNotifications","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","isFromScheduled","isActiveChat","hasMention","hasUnreadMention","notifyAboutMessage","messageUpdate","channelId","selectCommonBoxChatId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","active","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","pick","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","formattedText","loadChatJoinRequests","ANIMATION_DELAY","updateReactions","currentReactions","alreadyHasUnreadReaction","checkIfHasUnreadReactions","newMessage","isReaction","updateWithLocalMedia","isScheduled","currentMessage","video","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","messagesCount","firstUnreadId","candidateGlobal","updateChatLastMessage","force","currentLastMessage","findLastMessage","deleteMessages","newLastMessage","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","updateThreadInfo","selectIsMessageInCurrentMessageList","delayedGlobal","getMessageText","localEmoji","selectLocalAnimatedEmoji","selectLocalAnimatedEmojiEffect","scheduledIds","selectScheduledIds","selectIsChatWithBot","deleteChatScheduledMessages","thread","markMessageListRead","currentPinnedIds","selectPinnedIds","newPinnedIds","newTheadInfo","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","oldResults","isMin","r","updatedPoll","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","media","preview","extendedMedia","isPending","transcriptions","flushStatusUpdatesThrottled","pendingStatusUpdates","emojiStatus","statusUpdate","targetUser","botInfo","menuButton","addBlockedContact","reorderStickerSets","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","updateGroupCall","participantsCount","groupCallId","participants","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","playGroupCallSound","sound","needRating","ratingPhoneCall","isCallPanelVisible","notifyAboutCall","selectPhoneCallUser","initializeSoundsForSafari","checkNavigatorUserMediaPermissions","isVideo","formatCurrency","IS_PRODUCTION_HOST","useBeforeUnload","callback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","allowedZoomViewportContent","preventEvent","preventDefault","memo","props","StickerSetModal","useModuleLoader","Bundles","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","getAllNotificationsCount","updateAppBadge","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isMinimized","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","size","withGlobal","searchQuery","chatsById","isConnectionStatusMinimized","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","requestNextSettingsScreen","skipLockOnUnload","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","isChatArchived","handleLockScreenHotkey","useCallback","stopPropagation","SettingsScreens","useHotkeys","IS_PWA","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","MainButton","onTrigger","ripple","ariaLabel","buildClassName","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","newTheme","shouldUseSystemTheme","switchTheme","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","localStorage","setItem","clearWebsync","handleSwitchToLegacy","handleOpenTipsChat","handleLockScreen","isSearchFocused","captureEscKeyListener","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","DropdownMenu","trigger","footer","APP_NAME","MenuItem","icon","Switcher","label","checked","noAnimation","FEEDBACK_URL","getPromptInstall","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","orderedFolderIds","activeChatFolder","shouldSkipHistoryAnimations","maxFolders","foldersDispatch","onScreenSelect","loadChatFolders","setActiveChatFolder","transitionRef","useRef","allChatsFolder","ALL_FOLDER_ID","displayedFolders","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","forceOnHeavyAnimation","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInFirstFolderRef","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","ChatList","folderType","shouldRenderFolders","TabList","tabs","activeTab","onSwitchTab","areFolders","ref","renderCount","LeftSearch","Loading","ContactList","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","handleSelectContacts","handleSelectArchived","handleUpdateClick","reload","handleSelectNewChannel","handleSelectNewGroup","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","fluid","pill","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","nextSettingsScreen","isFirstChatFolderActive","isChatOpen","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleHotkeySearch","handleHotkeySavedMessages","handleHotkeySettings","IS_MAC_OS","useOnChange","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","markIsActive","unmarkIsActive","useFlag","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","classList","remove","useLayoutEffect","style","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","isChannel","onMouseDown","onMouseUp","onDoubleClick","HeaderMenuContainer","isChatChannel","selectIsInSelectMode","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canCall","canMute","canLeave","canEnterVoiceChat","isCallActive","canCreateVoiceChat","adminRights","manageCall","isCreator","canViewStatistics","pendingJoinRequests","shouldJoinToSend","isJoinToSend","shouldSendJoinRequest","isJoinRequest","ANIMATION_LEVEL_MIN","canExpandActions","joinChannel","openLocalTextSearch","restartBot","requestCall","requestNextManagementScreen","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","right","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleRestartBot","handleJoinRequestsClick","ManagementScreens","handleSearchClick","requestAnimationFrame","setFocusInSearchInput","handleHotkeySearchClick","disabled","anchor","withExtraActions","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","searchInput","drawRect","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","clickBotInlineButton","mediaThumbnail","useThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","src","alt","renderPictogram","MessageSummary","noEmoji","RippleEffect","shouldStopPropagation","LUMA_THRESHOLD","scaleImage","image","ratio","outputType","Blob","createObjectURL","img","Image","Promise","resolve","onload","scale","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","averageColor","getAverageColor","fillColor","getColorLuma","res","canvas","createElement","ctx2D","getContext","fillStyle","fillRect","ctx","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","globalCompositeOperation","LOGO_DIMENSIONS","MINIMAL_SIZE","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","voice","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","fileName","artist","performer","album","getChatTitle","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","makeGoodArtwork","buildMediaMetadata","artwork","useMessageMediaMetadata","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isFirst","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isVoicePlaying","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","handlePlaybackClick","volumeIcon","renderText","renderAudio","subtitle","renderVoice","noPreventDefault","RangeSlider","bold","groupCall","selectChatGroupCall","usersById","isLoaded","isCallNotEmpty","hasPinnedOffset","joinGroupCall","subscribeToGroupCallUpdates","handleJoinGroupCall","fetchedParticipants","_","isUser","subscribed","p","Avatar","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","getUserFirstOrLastName","isButtonsInOneRow","confirmIsDestructive","Checkbox","onCheck","audioMessage","pinnedIds","isChatWithBot","isSelectModeActive","currentTransitionKey","hasButtonInHeader","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","pinMessage","openPreviousChat","toggleLeftColumn","isBackButtonActive","pinnedMessageIndex","setPinnedMessageIndex","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","usePrevious","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","withVideoAvatar","emojiStatusSize","noRtl","GroupChatInfo","getMessageKey","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","INTERSECTION_MARGIN_FOR_LOADING","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","asForwarded","noAvatars","isOwn","isOwnMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","isWebPageVideo","getMessageWebPageVideo","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","fontFamily","calculateAuthorWidth","getComputedStyle","documentElement","getPropertyValue","font","whiteSpace","opacity","appendChild","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","onContextMenu","handleBeforeContextMenu","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","excludedClosestSelector","onRelease","handleMouseDown","preventMessageInputBlur","clearInterval","pageX","pageY","handleDoubleTap","target","contains","handleTap","handleContextMenu","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","container","clientY","isVisibleX","isVisibleY","handleSendQuickReaction","currentTarget","lastGroupElement","getLastElementInDocumentGroup","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","ContextMenuContainer","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isChat","senderUser","senderChat","premiumGiftSticker","observeIntersectionForReading","observeIntersectionForLoading","observeIntersectionForPlaying","isEmbedded","appearanceOrder","isLastInList","memoFirstUnreadIdRef","requestConfetti","useOnIntersect","noAppearanceAnimation","markShown","isVisible","useIsIntersecting","shouldShowConfettiRef","targetUsers","renderActionMessageText","isContextMenuOpen","contextMenuPosition","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","getMessageHtmlId","role","AnimatedIconFromSticker","play","noLoop","nonInteractive","customText","noUserColors","hasContextMenu","isIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","getUserColorKey","draggable","activeReaction","isInMeta","stopActiveReaction","centerIconId","effectId","mediaHashCenterIcon","mediaHashEffect","mediaDataCenterIcon","mediaDataEffect","shouldPlay","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","AnimatedSticker","tgsUrl","onLoad","onEnded","outgoingStatus","signature","withReactions","withReactionOffset","reactionMessage","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","formatTime","MessageOutgoingStatus","observeIntersection","shouldLoop","shouldPlayEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","mediaHash","IS_WEBM_SUPPORTED","canLoad","canPlay","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","openModal","actionText","isMemojiSticker","getStickerDimensions","StickerView","fullMediaHash","fullMediaClassName","noLoad","noPlay","withSharedAnimation","cacheBuster","isLowPriority","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","buildStyle","startedInteractions","sendInteractionBunch","Audio","safePlay","once","performance","interactionMessageId","withEffects","localSticker","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","forceLoadPreview","AnimatedIconWithPreview","LOCAL_TGS_URLS","quality","forcePreview","LIKE_STICKER_ID","customEmojiId","getCustomEmojiSize","CustomEmoji","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","inSelectMode","isSelected","crossOrigin","getImageData","getAppendixColorFromImage","useBlurredMediaThumbRef","useCanvasBlur","getMessageMediaThumbDataUri","IS_CANVAS_FILTER_SUPPORTED","canAutoLoad","uploadProgress","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","shouldLoad","loadProgress","useMediaWithLoadProgress","fullMediaData","withThumb","noThumb","thumbRef","thumbClassNames","useMediaTransition","downloadProgress","getMessageMediaFormat","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","CUSTOM_APPENDIX_ATTRIBUTE","contentEl","appendixBg","setProperty","dimensionsStyle","ProgressSpinner","canAutoPlay","videoRef","isIntersectingForLoading","isIntersectingForPlaying","wasIntersectedRef","isPlayAllowed","setIsPlayAllowed","isFullMediaPreloaded","isPlayerReady","markPlayerReady","hasThumb","previewMediaHash","isPreviewPreloaded","canLoadPreview","previewClassNames","isInline","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","cancelMessageMediaDownload","OptimizedVideo","muted","loop","playsInline","onTimeUpdate","onReady","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","isRegistered","withVideo","formatPhoneNumberWithCode","getPercentage","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","chosen","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","getReadableVotersCount","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","handleMediaClick","siteName","displayUrl","truncatedDescription","trimText","isArticle","isSquarePhoto","isMediaInteractive","SafeLink","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","Skeleton","forceAspectRatio","loadExtendedMedia","refreshExtendedMedia","useInterval","canvasRef","dataUri","VENUE_COLORS","entries","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","SVG_PIN","__html","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","prevShouldRenderText","long","useTimeout","prepareMapUrl","pinClassName","dangerouslySetInnerHTML","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","disablePictureInPicture","autoPlay","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","playingProgressRef","playerRef","isBuffered","bufferingHandlers","useBuffering","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","stopPlaying","fastRaf","capturePlaying","paused","stopCurrentAudio","renderIcon","recentReplierIds","recentRepliers","hasUnread","recentReactors","recentReaction","isOutside","metaChildren","isMissed","isCancelled","handleCall","reasonText","formatTimeDuration","timeFormatted","APPENDIX_OWN","APPENDIX_NOT_OWN","withSenderName","withAvatar","isLastInDocumentGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatUsername","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","selectUploadProgress","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","selectIsDownloading","actualThreadInfo","hasUnreadReaction","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","isTranscribing","transcribedText","observeIntersectionForBottom","areReactionsInMeta","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","hasReply","isReplyMessage","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","openMediaViewer","openAudioPlayer","sendPollVote","focusMessageInComments","replyToTopMessageId","channelPostId","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","classNames","isMedia","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","emojiSize","metaPosition","reactionsPosition","bottomMarker","isElementInViewport","calculatedWidth","noMediaCorners","extraPadding","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","postAuthorTitle","metaSafeAuthorWidth","renderReactionsAndMeta","meta","forwardAuthor","onMouseMove","isAvatarPeerUser","hiddenName","renderAvatar","textContentClass","senderColor","senderEmojiStatus","senderIsPremium","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","fakeType","FakeIcon","renderSenderName","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","DotAnimation","MessageText","withTranslucentThumbs","renderContent","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","threshold","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","messageGroups","isViewportNewest","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","markMentionsRead","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","mentionIds","reactionIds","entry","dataset","useBackgroundMode","margin","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","offsetHeight","scrollHeight","scrollTop","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_MIN_ID","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isLoadingBotInfo","isChatLoaded","isChannelChat","isGroupChat","threadFirstMessageId","selectFirstMessageId","linkedChatId","hasTools","canPost","withBottomShift","withDefaultBg","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","scrollOffsetRef","selectScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getDocumentMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","offsetTop","findStuckDate","useStickyDates","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","clientHeight","preservedItemElements","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","isAnimatingScroll","patchChromiumScroll","resetScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","isBotInfoEmpty","onScroll","backgroundColor","ariaLabelLang","onReadAll","shouldShowCount","reactionsCount","mentionsCount","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","FILE_EXT_REGEX","buildAttachment","filename","isQuick","mimeType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","preloadImage","shouldShrink","resizedUrl","fetchBlob","SUPPORTED_VIDEO_CONTENT_TYPES","videoWidth","videoHeight","preloadVideo","createPosterForVideo","SUPPORTED_AUDIO_CONTENT_TYPES","coverUrl","fetchFromUrl","selectCover","metadata","common","picture","format","cover","parseAudioMetadata","resetInput","applyIosAutoCapitalizationFix","inputEl","STARTS_ENDS_ON_EMOJI_IMG_REGEX","RegExp","EMOJI_IMG_REGEX","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","subscribeToAnalyzer","reject","onstop","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","STYLE_TAG_REGEX","useDebouncedMemo","resolverFn","ms","dependencies","setValue","isFrozen","updateWhenUnfrozen","handleUnfreeze","useHeavyAnimationCheck","noop","isHeavyAnimating","useHeavyAnimationFreeze","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","runThrottled","RE_COMMAND","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","COLOR_REPLACE_PATTERN","iconSvg","mediaDataWithReplacedColors","doc","DOMParser","parseFromString","stroke","strokeWidth","outerHTML","IS_COMPACT_MENU","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","customIcon","Portal","destructive","isButtonVisible","canAttachMedia","canAttachPolls","attachBots","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","handleQuickSelect","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","SymbolMenu","InlineBotTooltip","MentionTooltip","StickerTooltip","BotCommandTooltip","isKeyboardSingleUse","keyboardButtons","noCompact","forwardMessageIds","forwardedMessages","forwardsHaveCaptions","forward","forwardedMessagesCount","onClear","changeForwardRecipient","setForwardNoAuthors","setForwardNoCaptions","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","handleClearClick","handleChangeRecipientClick","getTriggerElement","getRootElement","getMenuElement","transformOriginX","transformOriginY","menuStyle","useContextMenuPosition","leftIcon","strippedMessage","strippedText","stripCustomEmoji","faded","MenuSeparator","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","linkEntity","entity","ApiMessageEntityTypes","textMatch","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","textRef","textEl","scrollWidth","composerEl","removeProperty","MainButtonState","VOICE_RECORDING_FILENAME","REPLIES_USER_ID","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","shouldSuggestCustomEmoji","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","anonymous","sendAsUser","requestedDraftText","selectRequestedDraftText","requestedDraftFiles","selectRequestedDraftFiles","isForCurrentMessageList","canSendVoiceByPrivacy","selectEditingScheduledDraft","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","customEmojiForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","commands","botMenuButton","attachMenuPeerType","selectChatType","fileSizeLimit","MAX_UPLOAD_FILEPART_SIZE","captionLimit","dropAreaState","onDropHide","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithDraft","addRecentCustomEmoji","appendixRef","html","setInnerHtml","htmlRef","useStateRef","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","setHtml","newHtml","processMessageInputForCustomEmoji","customEmojiNotificationNumber","handleScheduleCancel","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsPeerIds","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","handleSetAttachments","newValue","newAttachments","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","SEND_MESSAGE_ACTION_INTERVAL","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetInlineBot","markIsOpen","unmarkIsOpen","innerText","getPlainText","parseBotQuery","prevQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","getFilteredCommands","nextFilteredBotCommands","prepareForRegExp","substr","useBotCommandTooltip","isCustomSendMenuOpen","canSendStickers","canSendGifs","canAttachEmbedLinks","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","cleanHtml","clearStickersForEmoji","isSingleEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","isCustomEmojiTooltipOpen","closeCustomEmojiTooltip","insertCustomEmoji","useCustomEmojiTooltip","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","filteredCustomEmojis","insertEmoji","insertCustomEmojiFromEmojiTooltip","useEmojiTooltip","insertHtmlAndUpdateCursor","EDITABLE_INPUT_ID","selection","getSelection","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","insertFormattedTextAndUpdateCursor","getTextWithEntitiesAsHtml","insertTextAndUpdateCursor","insertCustomEmojiAndUpdateCursor","buildCustomEmojiHtml","removeSymbol","execCommand","tempInput","contentEditable","lastChild","textLength","range","createRange","setStart","setEnd","removeAllRanges","addRange","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","stopRecordingVoiceRef","showCustomEmojiPremiumNotification","notificationNumber","handleEditComplete","handleEditCancel","editedMessage","editMessage","setEditingDraft","prevEditedMessage","edited","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","useEditing","saveDraft","prevDraft","updateDraft","draftChatId","draftThreadId","currentHtml","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","customEmojiIds","prevHtml","useDraft","shouldStripCustomEmoji","onCustomEmojiStripped","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","pastedFormattedText","fragment","textContents","getElementsByTagName","node","HTMLElement","tagName","replaceWith","createTextNode","entityType","ignoreOnPaste","ENTITY_CLASS_BY_NODE_NAME","trimEnd","preparePastedHtml","containsCustomEmoji","items","getFilesFromDataTransferItems","all","file","textToPaste","useClipboardPaste","handleEmbeddedClear","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","maxLength","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleClickBotMenu","handleActivateBotCommandMenu","handleActivateSymbolMenu","handleMessageSchedule","args","restArgs","hasPreview","handleCustomEmojiSelect","isFree","isScheduleRequested","handleGifSelect","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","handleSendSilent","handleSearchOpen","handleSymbolMenuOpen","handleSendAsMenuOpen","handleAllScheduledClick","areVoiceMessagesNotAllowed","mainButtonHandler","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","handleSendScheduled","onSend","isBotMenuButtonCommands","DropAreaState","withQuick","onHide","caption","onCaptionUpdate","onSendSilent","onSendScheduled","onFileAppend","shouldBeAnonymous","selectedSendAsId","onInsertUserName","filteredUsers","onSelectResult","isSavedMessages","withUsername","MessageInput","editableInputId","forcedPlaceholder","canAutoFocus","noFocusInterception","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onCustomEmojiSelect","onStickerSelect","emojis","onEmojiSelect","onGifSelect","onRemoveSymbol","onSearchOpen","allowDisabledClick","onSendSchedule","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","GiftPremiumModal","CLOSE_ANIMATION_DURATION","isImage","kind","isBlurred","isBackgroundBlurred","background","customBackground","patternColor","themes","isMobileSearchActive","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","shouldLoadFullChat","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioPlayer","loadUser","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","handleOpenEnd","handleSlideStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","handleResize","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onTransitionEnd","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","getCanAddContact","canManage","isEditingInvite","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","getHasAdminRight","isUserRightBanned","canDeleteMembers","hasCommonChatsTab","resolvedUserId","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","loadProfilePhotos","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","resetCacheBuster","useCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","contextActions","memberId","handler","adminMember","forceShowSelf","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","MediaViewer","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","clear","activeMessages","downloadHash","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","encodeURIComponent","downloadWindow","gameTitle","closeGame","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","Notifications","Dialogs","ForwardRecipientPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","closeChat","MessageHistoryRecord","createMessageHash","messageList","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","AttachBotInstallModal","DEFAULT_CONFETTI_AMOUNT","CONFETTI_COLORS","confettiRef","isRafStartedRef","updateCanvas","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","pos","velocity","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","beginPath","ellipse","fill","hideTimeout","prevConfettiTime","leftSide","randomX","randomColor","generateConfetti","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","deleteFolderDialogId","DeleteFolderDialog","CustomEmojiSetsModal","DraftRecipientPicker","AttachBotRecipientPicker","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","updatePageTitle","nextTitle","wasTimeFormatSetManually","gameMessage","currentUser","isLeftColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","isPremiumModalOpen","limitReached","isReceiptModalOpen","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadAddedStickers","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","closePaymentModal","clearReceipt","checkAppVersion","langCode","prevLastSyncTime","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","parsedLocationHash","parseLocationHash","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","toggle","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsRightColumnOpen","hasShownClass","hasOpenClass","initialUnread","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","usePreventPinchZoomGesture","stickerSetShortName","passcodeSettings","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","handleSignOutMessage","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link"],"sourceRoot":""}