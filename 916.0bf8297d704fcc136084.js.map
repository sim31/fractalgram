{"version":3,"file":"916.0bf8297d704fcc136084.js","mappings":"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","sources":["webpack://telegram-t/./src/modules/actions/ui/localSearch.ts","webpack://telegram-t/./src/modules/actions/ui/chats.ts","webpack://telegram-t/./src/modules/actions/ui/messages.ts","webpack://telegram-t/./src/modules/actions/ui/globalSearch.ts","webpack://telegram-t/./src/modules/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/modules/actions/ui/users.ts","webpack://telegram-t/./src/modules/actions/ui/misc.ts","webpack://telegram-t/./src/modules/actions/ui/payments.ts","webpack://telegram-t/./src/util/deeplink.ts","webpack://telegram-t/./src/modules/actions/api/chats.ts","webpack://telegram-t/./src/modules/actions/api/messages.ts","webpack://telegram-t/./src/modules/actions/api/symbols.ts","webpack://telegram-t/./src/modules/actions/api/globalSearch.ts","webpack://telegram-t/./src/modules/actions/api/sync.ts","webpack://telegram-t/./src/modules/actions/api/localSearch.ts","webpack://telegram-t/./src/modules/actions/api/management.ts","webpack://telegram-t/./src/modules/actions/api/users.ts","webpack://telegram-t/./src/modules/reducers/bots.ts","webpack://telegram-t/./src/modules/actions/api/bots.ts","webpack://telegram-t/./src/modules/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/modules/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/ConnectionState.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/hooks/useThrottledMemo.ts","webpack://telegram-t/./src/hooks/useThrottle.ts","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useWindowSize.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/HeaderActions.tsx","webpack://telegram-t/./src/hooks/useWebpThumbnail.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/hooks/useAsync.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/hooks/useHeavyAnimationCheckForVideo.ts","webpack://telegram-t/./src/components/middle/message/hooks/usePauseOnInactive.ts","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/hooks/useDebounce.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./node_modules/opus-recorder/dist/encoderWorker.min.js","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/helpers/getMessageTextAsHtml.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/common/CalendarModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/insertHtmlInSelection.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/DeleteMemberModal.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addReducer } from '../../../lib/teact/teactn';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddReducer('closeLocalTextSearch', closeLocalTextSearch);\n\naddReducer('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddReducer('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddReducer('openChat', (global, actions, payload) => {\n  const {\n    id, threadId = -1, type = 'thread', shouldReplaceHistory = false,\n  } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n\n    setGlobal(global);\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory);\n});\n\naddReducer('openPreviousChat', (global) => {\n  return updateCurrentMessageList(global, undefined);\n});\n\naddReducer('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddReducer('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddReducer('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddReducer('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport { ANIMATION_END_DELAY, FAST_SMOOTH_MAX_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\n\nlet blurTimeout: number | undefined;\n\naddReducer('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddReducer('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddReducer('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddReducer('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddReducer('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddReducer('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n  } = payload!;\n\n  return {\n    ...global,\n    mediaViewer: {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    },\n    forwardMessages: {},\n  };\n});\n\naddReducer('closeMediaViewer', (global) => {\n  return {\n    ...global,\n    mediaViewer: {},\n  };\n});\n\naddReducer('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, origin,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin,\n    },\n  };\n});\n\naddReducer('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {},\n  };\n});\n\naddReducer('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      const newGlobal = getGlobal();\n\n      setGlobal({\n        ...newGlobal,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    setGlobal({\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    });\n  }\n});\n\naddReducer('closePollResults', (global) => {\n  setGlobal({\n    ...global,\n    pollResults: {},\n  });\n});\n\naddReducer('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddReducer('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage();\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids?.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddReducer('openForwardMenu', (global, actions, payload) => {\n  const { fromChatId, messageIds, groupedId } = payload!;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n    },\n  };\n});\n\naddReducer('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddReducer('setForwardChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddReducer('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddReducer('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddReducer('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddReducer('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddReducer('exitMessageSelectMode', exitMessageSelectMode);\n\naddReducer('openPollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: true,\n  };\n});\n\naddReducer('closePollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: false,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddReducer('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddReducer('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddReducer('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddReducer('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { updateSelectedUserId, updateUserSearch } from '../../reducers';\n\naddReducer('openUserInfo', (global, actions, payload) => {\n  const { id } = payload!;\n\n  actions.openChat({ id });\n});\n\nconst clearSelectedUserId = (global: GlobalState) => updateSelectedUserId(global, undefined);\n\naddReducer('openChat', clearSelectedUserId);\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport { ApiError } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectCurrentMessageList } from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\n\nconst MAX_STORED_EMOJIS = 18; // Represents two rows of recent emojis\n\naddReducer('toggleChatInfo', (global) => {\n  return {\n    ...global,\n    isChatInfoShown: !global.isChatInfoShown,\n  };\n});\n\naddReducer('toggleManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddReducer('closeManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddReducer('openChat', (global) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    isLeftColumnShown: global.messages.messageLists.length === 0,\n  };\n});\n\naddReducer('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddReducer('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload!;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddReducer('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload!;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: 0,\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddReducer('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('dismissNotification', (global, actions, payload) => {\n  const newNotifications = global.notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddReducer('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddReducer('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\n\naddReducer('openPaymentModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      chatId,\n      messageId,\n      isPaymentModalOpen: true,\n    },\n  };\n});\n\naddReducer('closePaymentModal', (global) => {\n  const newGlobal = clearPayment(global);\n  return closeInvoice(newGlobal);\n});\n\naddReducer('addPaymentError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      error,\n    },\n  };\n});\n","import { getDispatch } from '../lib/teact/teactn';\n\ntype DeepLinkMethod = 'resolve' | 'login' | 'passport' | 'settings' | 'join' | 'addstickers' | 'setlanguage' |\n'addtheme' | 'confirmphone' | 'socks' | 'proxy' | 'privatepost' | 'bg' | 'share' | 'msg' | 'msg_url';\n\nexport const processDeepLink = (url: string) => {\n  const { protocol, searchParams, pathname } = new URL(url);\n\n  if (protocol !== 'tg:') return;\n\n  const {\n    openChatByInvite,\n    openChatByUsername,\n    openStickerSetShortName,\n    focusMessage,\n  } = getDispatch();\n\n  const method = pathname.replace(/^\\/\\//, '') as DeepLinkMethod;\n  const params: Record<string, string> = {};\n  searchParams.forEach((value, key) => {\n    params[key] = value;\n  });\n\n  switch (method) {\n    case 'resolve': {\n      const { domain, post, comment } = params;\n\n      if (domain !== 'telegrampassport') {\n        openChatByUsername({\n          username: domain,\n          messageId: Number(post),\n          commentId: Number(comment),\n        });\n      }\n      break;\n    }\n    case 'privatepost': {\n      const {\n        post, channel,\n      } = params;\n\n      focusMessage({\n        chatId: -Number(channel),\n        id: post,\n      });\n      break;\n    }\n    case 'bg': {\n      // const {\n      //   slug, color, rotation, mode, intensity, bg_color: bgColor, gradient,\n      // } = params;\n      break;\n    }\n    case 'join': {\n      const { invite } = params;\n\n      openChatByInvite({ hash: invite });\n      break;\n    }\n    case 'addstickers': {\n      const { set } = params;\n\n      openStickerSetShortName({\n        stickerSetShortName: set,\n      });\n      break;\n    }\n    case 'share':\n    case 'msg': {\n      // const { url, text } = params;\n      break;\n    }\n    case 'login': {\n      // const { code, token } = params;\n      break;\n    }\n    default:\n      // Unsupported deeplink\n\n      break;\n  }\n};\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiUser, ApiChatFolder, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { NewChatMembersProgress, ChatCreationProgress, ManagementProgress } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  ARCHIVED_FOLDER_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  CHAT_LIST_LOAD_SLICE,\n  RE_TME_INVITE_LINK,\n  RE_TME_LINK,\n  TIPS_USERNAME,\n  LOCALIZED_TIPS, RE_TG_LINK, RE_TME_ADDSTICKERS_LINK,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addChats,\n  addUsers,\n  replaceThreadParam,\n  updateChatListIds,\n  updateChats,\n  updateChat,\n  updateChatListSecondaryInfo,\n  updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectUser,\n  selectChatListType,\n  selectIsChatPinned,\n  selectChatFolder,\n  selectSupportChat,\n  selectChatByUsername,\n  selectThreadTopMessageId,\n  selectCurrentMessageList,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport {\n  isChatSummaryOnly, isChatArchived, prepareChatList, isChatBasicGroup,\n} from '../../helpers';\nimport { processDeepLink } from '../../../util/deeplink';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst CHATS_PRELOAD_INTERVAL = 300;\n// We expect this ID does not exist\nconst TMP_CHAT_ID = -1;\n\nconst runThrottledForLoadChats = throttle((cb) => cb(), CHATS_PRELOAD_INTERVAL, true);\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddReducer('preloadTopChatMessages', (global, actions) => {\n  (async () => {\n    const preloadedChatIds: number[] = [];\n\n    for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n      await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n      const {\n        byId,\n        listIds: { active: listIds },\n        orderedPinnedIds: { active: orderedPinnedIds },\n      } = getGlobal().chats;\n      if (!listIds) {\n        return;\n      }\n\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n      const { pinnedChats, otherChats } = prepareChatList(byId, listIds, orderedPinnedIds);\n      const topChats = [...pinnedChats, ...otherChats];\n      const chatToPreload = topChats.find(({ id }) => id !== currentChatId && !preloadedChatIds.includes(id));\n      if (!chatToPreload) {\n        return;\n      }\n\n      preloadedChatIds.push(chatToPreload.id);\n\n      actions.loadViewportMessages({ chatId: chatToPreload.id, threadId: MAIN_THREAD_ID });\n    }\n  })();\n});\n\naddReducer('openChat', (global, actions, payload) => {\n  const { id, threadId } = payload!;\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  // Please telegram send us some updates about linked chat 🙏\n  if (chat && chat.lastMessage && chat.lastMessage.threadInfo) {\n    actions.requestThreadInfoUpdate({\n      chatId: chat.lastMessage.threadInfo.chatId,\n      threadId: chat.lastMessage.threadInfo.threadId,\n    });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      actions.requestThreadInfoUpdate({ chatId: id, threadId });\n    }\n  }\n});\n\naddReducer('openLinkedChat', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const chatFullInfo = await callApi('fetchFullChat', chat);\n\n    if (chatFullInfo?.fullInfo?.linkedChatId) {\n      actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId });\n    }\n  })();\n});\n\naddReducer('focusMessageInComments', (global, actions, payload) => {\n  const { chatId, threadId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n    if (!result) {\n      return;\n    }\n\n    actions.focusMessage({ chatId, threadId, messageId });\n  })();\n});\n\naddReducer('openSupportChat', (global, actions) => {\n  const chat = selectSupportChat(global);\n\n  actions.openChat({ id: chat ? chat.id : TMP_CHAT_ID });\n\n  if (chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchChat', { type: 'support' });\n    if (result) {\n      actions.openChat({ id: result.chatId });\n    }\n  })();\n});\n\naddReducer('openTipsChat', (global, actions, payload) => {\n  const { langCode } = payload;\n\n  const usernamePostfix = langCode === 'pt-br'\n    ? 'BR'\n    : LOCALIZED_TIPS.includes(langCode) ? (langCode as string).toUpperCase() : '';\n\n  actions.openChatByUsername({ username: `${TIPS_USERNAME}${usernamePostfix}` });\n});\n\naddReducer('loadMoreChats', (global, actions, payload) => {\n  const { listType = 'active' } = payload!;\n  const listIds = global.chats.listIds[listType as ('active' | 'archived')];\n  const isFullyLoaded = global.chats.isFullyLoaded[listType as ('active' | 'archived')];\n\n  if (isFullyLoaded) {\n    return;\n  }\n\n  const oldestChat = listIds\n    ? listIds\n      .map((id) => global.chats.byId[id])\n      .filter((chat) => Boolean(chat?.lastMessage) && !selectIsChatPinned(global, chat.id))\n      .sort((chat1, chat2) => (chat1.lastMessage!.date - chat2.lastMessage!.date))[0]\n    : undefined;\n\n  if (oldestChat) {\n    runThrottledForLoadChats(() => loadChats(listType, oldestChat.id, oldestChat.lastMessage!.date));\n  } else {\n    runThrottledForLoadChats(() => loadChats(listType));\n  }\n});\n\naddReducer('preloadArchivedChats', () => {\n  (async () => {\n    while (!getGlobal().chats.isFullyLoaded.archived) {\n      const currentGlobal = getGlobal();\n      const listIds = currentGlobal.chats.listIds.archived;\n      const oldestChat = listIds\n        ? listIds\n          .map((id) => currentGlobal.chats.byId[id])\n          .filter((chat) => Boolean(chat?.lastMessage) && !selectIsChatPinned(currentGlobal, chat.id))\n          .sort((chat1, chat2) => (chat1.lastMessage!.date - chat2.lastMessage!.date))[0]\n        : undefined;\n\n      await loadChats('archived', oldestChat?.id, oldestChat?.lastMessage!.date);\n      await pause(CHATS_PRELOAD_INTERVAL);\n    }\n  })();\n});\n\naddReducer('loadFullChat', (global, actions, payload) => {\n  const { chatId, force } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(chat);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(chat));\n  }\n});\n\naddReducer('loadTopChats', () => {\n  runThrottledForLoadTopChats(() => loadChats('active'));\n});\n\naddReducer('requestChatUpdate', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    serverTimeOffset,\n  });\n});\n\naddReducer('updateChatMutedState', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId, isMuted } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  setGlobal(updateChat(global, chatId, { isMuted }));\n  void callApi('updateChatMutedState', { chat, isMuted, serverTimeOffset });\n});\n\naddReducer('createChannel', (global, actions, payload) => {\n  const {\n    title, about, photo, memberIds,\n  } = payload!;\n\n  const members = (memberIds as number[])\n    .map((id: number) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createChannel(title, members, about, photo);\n});\n\naddReducer('joinChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (channelId && accessHash) {\n    void callApi('joinChannel', { channelId, accessHash });\n  }\n});\n\naddReducer('deleteChatUser', (global, actions, payload) => {\n  (async () => {\n    const { chatId, userId }: { chatId: number; userId: number } = payload!;\n    const chat = selectChat(global, chatId);\n    const user = selectUser(global, userId);\n    if (!chat || !user) {\n      return;\n    }\n    await callApi('deleteChatUser', { chat, user });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId && global.currentUserId === userId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('deleteChat', (global, actions, payload) => {\n  (async () => {\n    const { chatId }: { chatId: number } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n    await callApi('deleteChat', { chatId: chat.id });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('leaveChannel', (global, actions, payload) => {\n  (async () => {\n    const { chatId } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const { id: channelId, accessHash } = chat;\n\n    if (channelId && accessHash) {\n      await callApi('leaveChannel', { channelId, accessHash });\n    }\n\n    const activeChannel = selectCurrentMessageList(global);\n    if (activeChannel && activeChannel.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('deleteChannel', (global, actions, payload) => {\n  (async () => {\n    const { chatId } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const { id: channelId, accessHash } = chat;\n\n    if (channelId && accessHash) {\n      await callApi('deleteChannel', { channelId, accessHash });\n    }\n\n    const activeChannel = selectCurrentMessageList(global);\n    if (activeChannel && activeChannel.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('createGroupChat', (global, actions, payload) => {\n  const { title, memberIds, photo } = payload!;\n  const members = (memberIds as number[])\n    .map((id: number) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createGroupChat(title, members, photo);\n});\n\naddReducer('toggleChatPinned', (global, actions, payload) => {\n  const { id, folderId } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddReducer('toggleChatArchived', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddReducer('loadChatFolders', () => {\n  void loadChatFolders();\n});\n\naddReducer('loadRecommendedChatFolders', () => {\n  void loadRecommendedChatFolders();\n});\n\naddReducer('editChatFolders', (global, actions, payload) => {\n  const { chatId, idsToRemove, idsToAdd } = payload!;\n\n  (idsToRemove as number[]).forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  (idsToAdd as number[]).forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddReducer('editChatFolder', (global, actions, payload) => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddReducer('addChatFolder', (global, actions, payload) => {\n  const { folder } = payload!;\n  const { orderedIds } = global.chatFolders;\n  const maxId = orderedIds?.length ? Math.max.apply(Math.max, orderedIds) : ARCHIVED_FOLDER_ID;\n\n  void createChatFolder(folder, maxId);\n});\n\naddReducer('deleteChatFolder', (global, actions, payload) => {\n  const { id } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void deleteChatFolder(id);\n  }\n});\n\naddReducer('toggleChatUnread', (global, actions, payload) => {\n  const { id } = payload!;\n  const { serverTimeOffset } = global;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { serverTimeOffset, chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddReducer('openChatByInvite', (global, actions, payload) => {\n  const { hash } = payload!;\n\n  (async () => {\n    const result = await callApi('openChatByInvite', hash);\n    if (!result) {\n      return;\n    }\n\n    actions.openChat({ id: result.chatId });\n  })();\n});\n\naddReducer('openTelegramLink', (global, actions, payload) => {\n  const { url } = payload!;\n  const stickersMatch = RE_TME_ADDSTICKERS_LINK.exec(url);\n  if (stickersMatch) {\n    actions.openStickerSetShortName({\n      stickerSetShortName: stickersMatch[1],\n    });\n  } else if (url.match(RE_TG_LINK)) {\n    processDeepLink(url.match(RE_TG_LINK)[0]);\n  } else {\n    let match = RE_TME_INVITE_LINK.exec(url);\n\n    if (match) {\n      const hash = match[1];\n\n      actions.openChatByInvite({ hash });\n    } else {\n      match = RE_TME_LINK.exec(url)!;\n\n      const username = match[1];\n      const chatOrChannelPostId = match[2] ? Number(match[2]) : undefined;\n      const messageId = match[3] ? Number(match[3]) : undefined;\n      const commentId = match[4] === 'comment' && match[5] ? Number(match[5]) : undefined;\n\n      // Open message in private group\n      if (username === 'c' && chatOrChannelPostId && messageId) {\n        actions.focusMessage({\n          chatId: -chatOrChannelPostId,\n          messageId,\n        });\n      } else {\n        actions.openChatByUsername({\n          username,\n          messageId,\n          commentId,\n        });\n      }\n    }\n  }\n});\n\naddReducer('acceptInviteConfirmation', (global, actions, payload) => {\n  const { hash } = payload!;\n  (async () => {\n    const result = await callApi('importChatInvite', { hash });\n    if (!result) {\n      return;\n    }\n\n    actions.openChat({ id: result.id });\n  })();\n});\n\naddReducer('openChatByUsername', (global, actions, payload) => {\n  const { username, messageId, commentId } = payload!;\n\n  (async () => {\n    if (!commentId) {\n      await openChatByUsername(actions, username, messageId);\n      return;\n    }\n\n    if (!messageId) return;\n\n    await openCommentsByUsername(actions, username, messageId, commentId);\n  })();\n});\n\naddReducer('togglePreHistoryHidden', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  let chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    void callApi('togglePreHistoryHidden', { chat, isEnabled });\n  })();\n});\n\naddReducer('updateChatDefaultBannedRights', (global, actions, payload) => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddReducer('updateChatMemberBannedRights', (global, actions, payload) => {\n  const { chatId, userId, bannedRights } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n    const isBanned = !!bannedRights.viewMessages;\n    const isUnblocked = !Object.keys(bannedRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(members && isBanned && {\n          members: members.filter((m) => m.userId !== userId),\n        }),\n        ...(members && !isBanned && {\n          members: members.map((m) => (\n            m.userId === userId\n              ? { ...m, bannedRights }\n              : m\n          )),\n        }),\n        ...(isUnblocked && kickedMembers && {\n          kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChatAdmin', (global, actions, payload) => {\n  const {\n    chatId, userId, adminRights, customTitle,\n  } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatAdmin', {\n      chat, user, adminRights, customTitle,\n    });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { adminMembers } = chatAfterUpdate.fullInfo;\n\n    const isDismissed = !Object.keys(adminRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(adminMembers && isDismissed && {\n          adminMembers: adminMembers.filter((m) => m.userId !== userId),\n        }),\n        ...(adminMembers && !isDismissed && {\n          adminMembers: adminMembers.map((m) => (\n            m.userId === userId\n              ? { ...m, adminRights, customTitle }\n              : m\n          )),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChat', (global, actions, payload) => {\n  const {\n    chatId, title, about, photo,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n    await Promise.all([\n      chat.title !== title\n        ? callApi('updateChatTitle', chat, title)\n        : undefined,\n      chat.fullInfo && chat.fullInfo.about !== about\n        ? callApi('updateChatAbout', chat, about)\n        : undefined,\n      photo\n        ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n        : undefined,\n    ]);\n\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n  })();\n});\n\naddReducer('toggleSignatures', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddReducer('loadGroupsForDiscussion', () => {\n  (async () => {\n    const groups = await callApi('fetchGroupsForDiscussion');\n    if (!groups) {\n      return;\n    }\n\n    const addedById = groups.reduce((result, group) => {\n      if (group) {\n        result[group.id] = group;\n      }\n\n      return result;\n    }, {} as Record<number, ApiChat>);\n\n    const global = addChats(getGlobal(), addedById);\n    setGlobal({\n      ...global,\n      chats: {\n        ...global.chats,\n        forDiscussionIds: Object.keys(addedById).map(Number),\n      },\n    });\n  })();\n});\n\naddReducer('linkDiscussionGroup', (global, actions, payload) => {\n  const { channelId, chatId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  let chat = selectChat(global, chatId);\n  if (!channel || !chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    let { fullInfo } = chat;\n    if (!fullInfo) {\n      const fullChat = await callApi('fetchFullChat', chat);\n      if (!fullChat) {\n        return;\n      }\n\n      fullInfo = fullChat.fullInfo;\n    }\n\n    if (fullInfo.isPreHistoryHidden) {\n      await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n    }\n\n    void callApi('setDiscussionGroup', { channel, chat });\n  })();\n});\n\naddReducer('unlinkDiscussionGroup', (global, actions, payload) => {\n  const { channelId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo?.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  (async () => {\n    await callApi('setDiscussionGroup', { channel });\n    if (chat) {\n      loadFullChat(chat);\n    }\n  })();\n});\n\naddReducer('setActiveChatFolder', (global, actions, payload) => {\n  return {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      activeChatFolder: payload,\n    },\n  };\n});\n\naddReducer('loadMoreMembers', (global) => {\n  (async () => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    if (!chat || isChatBasicGroup(chat)) {\n      return;\n    }\n\n    const offset = (chat.fullInfo?.members?.length) || undefined;\n    const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n    if (!result) {\n      return;\n    }\n\n    const { members, users } = result;\n    if (!members || !members.length) {\n      return;\n    }\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n    global = updateChat(global, chat.id, {\n      fullInfo: {\n        ...chat.fullInfo,\n        members: [\n          ...((chat.fullInfo || {}).members || []),\n          ...(members || []),\n        ],\n      },\n    });\n    setGlobal(global);\n  })();\n});\n\naddReducer('addChatMembers', (global, actions, payload) => {\n  const { chatId, memberIds } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as number[]).map((userId) => selectUser(global, userId)).filter<ApiUser>(Boolean as any);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState(NewChatMembersProgress.Loading);\n  (async () => {\n    await callApi('addChatMembers', chat, users);\n    actions.setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n    loadFullChat(chat);\n  })();\n});\n\naddReducer('deleteChatMember', (global, actions, payload) => {\n  const { chatId, userId } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    await callApi('deleteChatMember', chat, user);\n    loadFullChat(chat);\n  })();\n});\n\nasync function loadChats(listType: 'active' | 'archived', offsetId?: number, offsetDate?: number) {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: getGlobal().chats.orderedPinnedIds[listType] === undefined,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChatListIds(global, listType, chatIds);\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  Object.keys(result.draftsById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId],\n    );\n  });\n\n  Object.keys(result.replyingToById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nasync function loadFullChat(chat: ApiChat) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return;\n  }\n\n  const { users, fullInfo } = result;\n\n  let global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n  global = updateChat(global, chat.id, { fullInfo });\n\n  setGlobal(global);\n}\n\nasync function createChannel(title: string, users: ApiUser[], about?: string, photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChannel = await callApi('createChannel', { title, about, users });\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  let global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: channelId });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n}\n\nasync function createGroupChat(title: string, users: ApiUser[], photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChat = await callApi('createGroupChat', { title, users });\n  if (!createdChat) {\n    return;\n  }\n\n  const { id: chatId } = createdChat;\n\n  let global = getGlobal();\n  global = updateChat(global, chatId, createdChat);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: chatId });\n\n  if (chatId && photo) {\n    await callApi('editChatPhoto', { chatId, photo });\n  }\n}\n\nasync function loadChatFolders() {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    });\n  }\n}\n\nasync function loadRecommendedChatFolders() {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    });\n  }\n}\n\nasync function createChatFolder(folder: ApiChatFolder, maxId: number) {\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    });\n  }\n}\n\nasync function deleteChatFolder(id: number) {\n  await callApi('deleteChatFolder', id);\n}\n\nasync function fetchChatByUsername(\n  username: string,\n) {\n  const global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const chat = await callApi('getChatByUsername', username);\n  if (!chat) {\n    return undefined;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  return chat;\n}\n\nasync function openChatByUsername(\n  actions: GlobalActions,\n  username: string,\n  channelPostId?: number,\n) {\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await fetchChatByUsername(username);\n\n  if (!chat) {\n    actions.openPreviousChat();\n    actions.showNotification({ message: 'User does not exist' });\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({ chatId: chat.id, messageId: channelPostId });\n  } else {\n    actions.openChat({ id: chat.id });\n  }\n}\n\nasync function openCommentsByUsername(\n  actions: GlobalActions,\n  username: string,\n  messageId: number,\n  commentId: number,\n) {\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await fetchChatByUsername(username);\n\n  if (!chat) return;\n\n  const global = getGlobal();\n\n  const threadInfo = selectThreadInfo(global, chat.id, messageId);\n  let discussionChatId: number | undefined;\n\n  if (!threadInfo) {\n    const result = await callApi('requestThreadInfoUpdate', { chat, threadId: messageId });\n    if (!result) return;\n\n    discussionChatId = result.discussionChatId;\n  } else {\n    discussionChatId = threadInfo.chatId;\n  }\n\n  if (!discussionChatId) return;\n\n  actions.focusMessage({\n    chatId: discussionChatId,\n    threadId: messageId,\n    messageId: Number(commentId),\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiVideo,\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MAX_MEDIA_FILES_FOR_ALBUM, MESSAGE_LIST_SLICE } from '../../../config';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport { areSortedArraysIntersecting, buildCollectionByKey, split } from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n} from '../../selectors';\nimport { debounce, rafPromise } from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/environment';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddReducer('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    // Let reducer return and update global\n    await Promise.resolve();\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddReducer('loadMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const message = await loadMessage(chat, messageId, replyOriginForId);\n    if (message && threadUpdate) {\n      const { lastMessageId, isDeleting } = threadUpdate;\n\n      setGlobal(updateThreadUnreadFromForwardedMessage(\n        getGlobal(),\n        message,\n        chatId,\n        lastMessageId,\n        isDeleting,\n      ));\n    }\n  })();\n});\n\naddReducer('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n  };\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments, MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddReducer('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(message.previousLocalId || message.id);\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddReducer('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  return global;\n});\n\naddReducer('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddReducer('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddReducer('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddReducer('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddReducer('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteHistory', (global, actions, payload) => {\n  (async () => {\n    const { chatId, shouldDeleteForAll } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const maxId = chat.lastMessage?.id;\n\n    await callApi('deleteHistory', { chat, shouldDeleteForAll, maxId });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('reportMessages', (global, actions, payload) => {\n  (async () => {\n    const {\n      messageIds, reason, description,\n    } = payload!;\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return;\n    }\n\n    const { chatId } = currentMessageList;\n    const chat = selectChat(global, chatId)!;\n\n    const result = await callApi('reportMessages', {\n      peer: chat, messageIds, reason, description,\n    });\n\n    actions.showNotification({\n      message: result\n        ? 'Thank you! Your report will be reviewed by our team.'\n        : 'Error occured while submiting report. Please, try again later.',\n    });\n  })();\n});\n\naddReducer('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const { maxId } = payload!;\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n\n  // TODO Support local marking read for threads\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return undefined;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddReducer('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddReducer('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddReducer('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddReducer('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddReducer('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddReducer('forwardMessages', (global) => {\n  const { fromChatId, messageIds, toChatId } = global.forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (fromChat && toChat && messages && messages.length) {\n    void forwardMessages(fromChat, toChat, messages);\n  }\n});\n\naddReducer('loadScheduledHistory', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { hash } = global.scheduledMessages.byChatId[chat.id] || {};\n\n  void loadScheduledHistory(chat, hash);\n});\n\naddReducer('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddReducer('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddReducer('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text: string;\n  entities: ApiMessageEntity[];\n  replyingTo: number;\n  attachment: ApiAttachment;\n  sticker: ApiSticker;\n  gif: ApiVideo;\n  poll: ApiNewPoll;\n  serverTimeOffset?: number;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nfunction forwardMessages(\n  fromChat: ApiChat,\n  toChat: ApiChat,\n  messages: ApiMessage[],\n) {\n  callApi('forwardMessages', {\n    fromChat,\n    toChat,\n    messages,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const isUnique = (v: number, i: number, a: number[]) => a.indexOf(v) === i;\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: [\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ].filter(isUnique),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddReducer('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat, historyHash?: number) {\n  const result = await callApi('fetchScheduledHistory', { chat, hash: historyHash });\n  if (!result) {\n    return;\n  }\n\n  const { hash, messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId, hash);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectStickerSet } from '../../selectors';\n\nconst ADDED_SETS_THROTTLE = 500;\nconst ADDED_SETS_THROTTLE_CHUNK = 50;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('loadStickerSets', (global) => {\n  const { hash } = global.stickers.added || {};\n  void loadStickerSets(hash);\n});\n\naddReducer('loadAddedStickers', (global, actions) => {\n  const { setIds: addedSetIds } = global.stickers.added;\n  if (!addedSetIds || !addedSetIds.length) {\n    return;\n  }\n\n  (async () => {\n    for (let i = 0; i < addedSetIds.length; i++) {\n      actions.loadStickers({ stickerSetId: addedSetIds[i] });\n\n      if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n        await pause(ADDED_SETS_THROTTLE);\n      }\n    }\n  })();\n});\n\naddReducer('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddReducer('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddReducer('loadGreetingStickers', (global) => {\n  const { hash } = global.stickers.greeting || {};\n\n  (async () => {\n    const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n\n    if (!greeting) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal({\n      ...newGlobal,\n      stickers: {\n        ...newGlobal.stickers,\n        greeting: {\n          hash: greeting.hash,\n          stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n        },\n      },\n    });\n  })();\n});\n\naddReducer('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddReducer('loadStickers', (global, actions, payload) => {\n  const { stickerSetId, stickerSetShortName } = payload!;\n  let { stickerSetAccessHash } = payload!;\n\n  if (!stickerSetAccessHash && !stickerSetShortName) {\n    const stickerSet = selectStickerSet(global, stickerSetId);\n    if (!stickerSet) {\n      return;\n    }\n\n    stickerSetAccessHash = stickerSet.accessHash;\n  }\n\n  void loadStickers(stickerSetId, stickerSetAccessHash, stickerSetShortName);\n});\n\naddReducer('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n});\n\naddReducer('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddReducer('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddReducer('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddReducer('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddReducer('loadEmojiKeywords', (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  (async () => {\n    const emojiKeywords = await callApi('fetchEmojiKeywords', {\n      language,\n      fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n    });\n\n    global = getGlobal();\n    currentEmojiKeywords = global.emojiKeywords[language];\n\n    if (!emojiKeywords) {\n      setGlobal({\n        ...global,\n        emojiKeywords: {\n          ...global.emojiKeywords,\n          [language]: {\n            ...currentEmojiKeywords,\n            isLoading: false,\n          },\n        },\n      });\n\n      return;\n    }\n\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          isLoading: false,\n          version: emojiKeywords.version,\n          keywords: {\n            ...(currentEmojiKeywords?.keywords),\n            ...emojiKeywords.keywords,\n          },\n        },\n      },\n    });\n  })();\n});\n\nasync function loadStickerSets(hash = 0) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash = 0) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash = 0) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash = 0) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetId: string, accessHash: string, stickerSetShortName?: string) {\n  const stickerSet = await callApi('fetchStickers',\n    { stickerSetShortName, stickerSetId, accessHash });\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  let global = getGlobal();\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddReducer('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddReducer('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload!;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddReducer('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddReducer('openStickerSetShortName', (global, actions, payload) => {\n  const { stickerSetShortName } = payload!;\n  return {\n    ...global,\n    openedStickerSetShortName: stickerSetShortName,\n  };\n});\n\nasync function searchStickers(query: string, hash = 0) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash = 0) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash = 0) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddReducer('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const newGlobal = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(newGlobal);\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddReducer('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalChats.map(({ id }) => id),\n      userIds: globalUsers.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chatOrUser: chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addReducer, getGlobal, setGlobal, getDispatch,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiFormattedText, ApiUser, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  CHAT_LIST_LOAD_SLICE, DEBUG, MESSAGE_LIST_SLICE,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  replaceChatListIds,\n  replaceChats,\n  replaceUsers,\n  updateUsers,\n  updateChats,\n  updateChatListSecondaryInfo,\n  updateThreadInfos,\n  replaceThreadParam,\n} from '../../reducers';\nimport {\n  selectUser, selectChat, selectCurrentMessageList, selectDraft, selectChatMessage, selectThreadInfo,\n} from '../../selectors';\nimport { isChatPrivate } from '../../helpers';\n\naddReducer('sync', (global, actions) => {\n  void sync(actions.afterSync);\n});\n\naddReducer('afterSync', (global, actions) => {\n  void afterSync(actions);\n});\n\nasync function sync(afterSyncCallback: () => void) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  await callApi('fetchCurrentUser');\n\n  // This fetches only active chats and clears archived chats, which will be fetched in `afterSync`\n  const savedUsers = await loadAndReplaceChats();\n  await loadAndReplaceMessages(savedUsers);\n\n  setGlobal({\n    ...getGlobal(),\n    lastSyncTime: Date.now(),\n  });\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH SYNC');\n  }\n\n  afterSyncCallback();\n}\n\nasync function afterSync(actions: GlobalActions) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START AFTER-SYNC');\n  }\n\n  actions.loadFavoriteStickers();\n\n  await Promise.all([\n    loadAndUpdateUsers(),\n    loadAndReplaceArchivedChats(),\n  ]);\n\n  await callApi('fetchCurrentUser');\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH AFTER-SYNC');\n  }\n}\n\nasync function loadAndReplaceChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    withPinned: true,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n  if (!result) {\n    return undefined;\n  }\n\n  let global = getGlobal();\n\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  const { currentUserId } = global;\n\n  const savedPrivateChatIds = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n    ...(currentUserId ? [currentUserId] : []),\n  ];\n\n  const savedUsers = savedPrivateChatIds\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  const savedChats = savedPrivateChatIds\n    .map((id) => selectChat(global, id))\n    .filter<ApiChat>(Boolean as any);\n\n  const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n  if (currentChatId) {\n    const selectedChat = selectChat(global, currentChatId);\n    if (selectedChat && !savedPrivateChatIds.includes(currentChatId)) {\n      savedChats.push(selectedChat);\n    }\n\n    if (isChatPrivate(currentChatId)) {\n      const selectedChatUser = selectUser(global, currentChatId);\n      if (selectedChatUser && !savedPrivateChatIds.includes(currentChatId)) {\n        savedUsers.push(selectedChatUser);\n      }\n    }\n  }\n\n  savedUsers.push(...result.users);\n  savedChats.push(...result.chats);\n\n  global = replaceChats(global, buildCollectionByKey(savedChats, 'id'));\n  global = replaceChatListIds(global, 'active', result.chatIds);\n\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n    },\n  };\n\n  global = updateChatListSecondaryInfo(global, 'active', result);\n\n  Object.keys(result.draftsById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId]);\n  });\n\n  Object.keys(result.replyingToById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  setGlobal(global);\n\n  if (currentChatId && !global.chats.byId[currentChatId]) {\n    getDispatch().openChat({ id: undefined });\n  }\n\n  return savedUsers;\n}\n\nasync function loadAndReplaceArchivedChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    archived: true,\n    withPinned: true,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = replaceChatListIds(global, 'archived', result.chatIds);\n  global = updateChatListSecondaryInfo(global, 'archived', result);\n  setGlobal(global);\n}\n\nasync function loadAndReplaceMessages(savedUsers?: ApiUser[]) {\n  let areMessagesLoaded = false;\n  let users = savedUsers || [];\n\n  let global = getGlobal();\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId).map(Number);\n  const draftsByChatId = draftChatIds.reduce<Record<number, ApiFormattedText>>((acc, chatId) => {\n    const draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    return draft ? { ...acc, [chatId]: draft } : acc;\n  }, {});\n\n  if (currentChatId) {\n    const result = await loadTopMessages(global.chats.byId[currentChatId]);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const byId = buildCollectionByKey(result.messages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {\n            [currentChatId]: {\n              byId,\n              threadsById: {\n                [MAIN_THREAD_ID]: {\n                  ...(currentMessageListInfo?.threadsById[MAIN_THREAD_ID]),\n                  listedIds,\n                  viewportIds: listedIds,\n                  outlyingIds: undefined,\n                },\n              },\n            },\n          },\n        },\n      };\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin)\n            .map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin?.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo?.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n      users = Array.prototype.concat(users, result.users);\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', draftsByChatId[chatId]);\n  });\n\n  if (savedUsers) {\n    global = replaceUsers(global, buildCollectionByKey(users, 'id'));\n  } else if (users) {\n    // If `fetchChats` has failed for some reason, we don't have saved chats, thus we can not replace\n    global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getDispatch().closeAudioPlayer();\n  }\n}\n\nasync function loadAndUpdateUsers() {\n  let global = getGlobal();\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  if (\n    (!contactIds || !contactIds.length)\n    && (!recentlyFoundChatIds || !recentlyFoundChatIds.length)\n  ) {\n    return;\n  }\n\n  const users = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n  ].map((id) => selectUser(global, id)).filter<ApiUser>(Boolean as any);\n\n  const updatedUsers = await callApi('fetchUsers', { users });\n  if (!updatedUsers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n  setGlobal(global);\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearchPeerId,\n  selectCurrentMediaSearch, selectCurrentMessageList, selectChat, selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport { SharedMediaType } from '../../../types';\n\naddReducer('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddReducer('searchMediaMessagesLocal', (global) => {\n  const peerId = selectCurrentMediaSearchPeerId(global);\n  const chatOrUser = peerId\n    ? global.users.byId[peerId] || global.chats.byId[peerId]\n    : undefined;\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chatOrUser || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chatOrUser, type, offsetId);\n});\n\naddReducer('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chatOrUser: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || (query && query !== currentSearch.query)) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalTextSearchResults(global, chatOrUser.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chatOrUser: ApiChat | ApiUser,\n  type: SharedMediaType,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type,\n    limit: SHARED_MEDIA_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalMediaSearchResults(global, chatOrUser.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\n/**\n * @param timestamp start of target date in seconds\n */\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getDispatch().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateManagement, updateManagementProgress } from '../../reducers';\nimport { selectChat, selectCurrentMessageList } from '../../selectors';\nimport { isChatBasicGroup } from '../../helpers';\n\naddReducer('checkPublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n\n    const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n    global = getGlobal();\n    global = updateManagementProgress(\n      global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n    );\n    global = updateManagement(global, chatId, { isUsernameAvailable });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    setGlobal(global);\n\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    const result = await callApi('setChatUsername', { chat, username });\n\n    global = getGlobal();\n    global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { debounce, throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { isChatPrivate } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectUser } from '../../selectors';\nimport {\n  addChats, addUsers, updateChat, updateManagementProgress, updateUser, updateUsers,\n  updateUserSearch, updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\n\nconst runDebouncedForFetchFullUser = debounce((cb) => cb(), 500, false, true);\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddReducer('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  runDebouncedForFetchFullUser(() => callApi('fetchFullUser', { id, accessHash }));\n});\n\naddReducer('loadUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  (async () => {\n    const updatedUsers = await callApi('fetchUsers', { users: [user] });\n    if (!updatedUsers) {\n      return;\n    }\n\n    global = getGlobal();\n    global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n    setGlobal(global);\n  })();\n});\n\naddReducer('loadTopUsers', (global) => {\n  const {\n    topPeers: {\n      hash, lastRequestedAt,\n    },\n  } = global;\n\n  if (!lastRequestedAt || getServerTime(global.serverTimeOffset) - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers(hash);\n  }\n});\n\naddReducer('loadContactList', (global) => {\n  const { hash } = global.contactList || {};\n  void loadContactList(hash);\n});\n\naddReducer('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddReducer('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted, firstName, lastName,\n  } = payload!;\n\n  void updateContact(userId, isMuted, firstName, lastName);\n});\n\naddReducer('deleteUser', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteUser(userId);\n});\n\nasync function loadTopUsers(usersHash?: number) {\n  const result = await callApi('fetchTopUsers', { hash: usersHash });\n  if (!result) {\n    return;\n  }\n\n  const { hash, ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      hash,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList(hash?: number) {\n  const contactList = await callApi('fetchContactList', { hash });\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      hash: contactList.hash,\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: number,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getDispatch().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  const result = await callApi('updateContact', { phone: user.phoneNumber, firstName, lastName });\n\n  if (result) {\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n}\n\nasync function deleteUser(userId: number) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteUser', { id, accessHash });\n}\n\naddReducer('loadProfilePhotos', (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isChatPrivate(profileId);\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n\n  if (!user && !chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchProfilePhotos', user, chat);\n    if (!result || !result.photos) {\n      return;\n    }\n\n    let newGlobal = getGlobal();\n    if (isPrivate) {\n      newGlobal = updateUser(newGlobal, profileId, { photos: result.photos });\n    } else {\n      newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users!, 'id'));\n      newGlobal = updateChat(newGlobal, profileId, { photos: result.photos });\n    }\n\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import { GlobalState } from '../../global/types';\nimport { InlineBotSettings } from '../../types';\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat } from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  RE_TG_LINK, RE_TME_ADDSTICKERS_LINK, RE_TME_INVITE_LINK, RE_TME_LINK,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList,\n  selectReplyingToId, selectUser,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddReducer('clickInlineButton', (global, actions, payload) => {\n  const { button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.value });\n      break;\n    case 'url':\n      if (button.value.match(RE_TME_INVITE_LINK) || button.value.match(RE_TME_LINK) || button.value.match(RE_TG_LINK)\n        || button.value.match(RE_TME_ADDSTICKERS_LINK)) {\n        actions.openTelegramLink({ url: button.value });\n      } else {\n        actions.toggleSafeLinkModal({ url: button.value });\n      }\n      break;\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, button.messageId, button.value);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal();\n      break;\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      const { messageId, value } = button;\n      if (!chat) {\n        return;\n      }\n\n      if (value) {\n        actions.getReceipt({ receiptMessageId: value, chatId: chat.id, messageId });\n      } else {\n        actions.getPaymentForm({ chat, messageId });\n        actions.setInvoiceMessageInfo(selectChatMessage(global, chat.id, messageId));\n        actions.openPaymentModal({ chatId: chat.id, messageId });\n      }\n      break;\n    }\n  }\n});\n\naddReducer('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentUserId || !chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId: chat.id, threadId, value: false });\n\n  void sendBotCommand(chat, currentUserId, command, selectReplyingToId(global, chat.id, threadId));\n});\n\naddReducer('restartBot', (global, actions, payload) => {\n  const { chatId } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('unblockContact', bot.id, bot.accessHash);\n    if (!result) {\n      return;\n    }\n\n    setGlobal(removeBlockedContact(getGlobal(), bot.id));\n    void sendBotCommand(chat, currentUserId, '/start');\n  })();\n});\n\naddReducer('loadTopInlineBots', (global) => {\n  const { hash, lastRequestedAt } = global.topInlineBots;\n\n  if (lastRequestedAt && getServerTime(global.serverTimeOffset) - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchTopInlineBots', { hash });\n    if (!result) {\n      return;\n    }\n\n    const { hash: newHash, ids, users } = result;\n\n    let newGlobal = getGlobal();\n    newGlobal = addUsers(newGlobal, buildCollectionByKey(users, 'id'));\n    newGlobal = {\n      ...newGlobal,\n      topInlineBots: {\n        ...newGlobal.topInlineBots,\n        hash: newHash,\n        userIds: ids,\n        lastRequestedAt: getServerTime(global.serverTimeOffset),\n      },\n    };\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('queryInlineBot', ((global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  (async () => {\n    let inlineBotData = global.inlineBots.byUsername[username];\n\n    if (inlineBotData === false) {\n      return;\n    }\n\n    if (inlineBotData === undefined) {\n      const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n      global = getGlobal();\n      if (!inlineBot || !chat) {\n        setGlobal(replaceInlineBotSettings(global, username, false));\n        return;\n      }\n\n      global = addUsers(global, { [inlineBot.id]: inlineBot });\n      global = addChats(global, { [chat.id]: chat });\n      inlineBotData = {\n        id: inlineBot.id,\n        query: '',\n        offset: '',\n        switchPm: undefined,\n        canLoadMore: true,\n        results: [],\n      };\n\n      global = replaceInlineBotSettings(global, username, inlineBotData);\n      setGlobal(global);\n    }\n\n    if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n      return;\n    }\n\n    void runDebouncedForSearch(() => {\n      searchInlineBot({\n        username,\n        inlineBotData: inlineBotData as InlineBotSettings,\n        chatId,\n        query,\n        offset,\n      });\n    });\n  })();\n}));\n\naddReducer('sendInlineBotResult', (global, actions, payload) => {\n  const { id, queryId } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n  });\n});\n\naddReducer('resetInlineBot', (global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n});\n\naddReducer('startBot', (global, actions, payload) => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  (async () => {\n    await callApi('startBot', {\n      bot,\n      startParam: param,\n    });\n  })();\n});\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: number;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(chat: ApiChat, currentUserId: number, command: string, replyingTo?: number) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n    replyingTo,\n  });\n}\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data: string) {\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { showDialog, showNotification, toggleSafeLinkModal } = getDispatch();\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' } });\n  } else if (message) {\n    showNotification({ message });\n  } else if (url) {\n    toggleSafeLinkModal({ url });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddReducer('loadPasswordInfo', () => {\n  (async () => {\n    const result = await callApi('getPasswordInfo');\n    if (!result) {\n      return;\n    }\n\n    let global = getGlobal();\n    global = replaceSettings(global, { hasPassword: result.hasPassword });\n    global = updateTwoFaSettings(global, { hint: result.hint });\n    setGlobal(global);\n  })();\n});\n\naddReducer('checkPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('checkPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('clearPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('clearPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updatePassword', (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updateRecoveryEmail', (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddReducer('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { PaymentStep } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  selectPaymentMessageId,\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectPaymentChatId,\n  selectChat,\n  selectPaymentFormId,\n} from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setInvoiceMessageInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n} from '../../reducers';\n\naddReducer('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  if (!chat || !messageId) {\n    return;\n  }\n  void validateRequestedInfo(chat, messageId, requestInfo, saveInfo);\n});\n\nasync function validateRequestedInfo(chat: ApiChat, messageId: number, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', {\n    chat, messageId, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddReducer('getPaymentForm', (global, actions, payload) => {\n  const { chat, messageId } = payload;\n  if (!chat || !messageId) {\n    return;\n  }\n  void getPaymentForm(chat, messageId);\n});\n\nasync function getPaymentForm(chat: ApiChat, messageId: number) {\n  const result = await callApi('getPaymentForm', { chat, messageId });\n  if (!result) {\n    return;\n  }\n  let global = setPaymentForm(getGlobal(), result);\n  let step = PaymentStep.PaymentInfo;\n  if (global.payment.invoice\n    && (global.payment.invoice.shippingAddressRequested\n    || global.payment.invoice.nameRequested\n    || global.payment.invoice.phoneRequested\n    || global.payment.invoice.emailRequested)) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n}\n\naddReducer('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  void getReceipt(chat, messageId, receiptMessageId);\n});\n\nasync function getReceipt(chat: ApiChat, messageId: number, receiptMessageId: number) {\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddReducer('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddReducer('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddReducer('sendCredentialsInfo', (global, actions, payload) => {\n  const publishableKey = selectProviderPublishableKey(global);\n  if (!publishableKey) {\n    return;\n  }\n  const { credentials } = payload;\n  const { data } = credentials;\n  void sendStripeCredentials(data, publishableKey);\n});\n\naddReducer('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  const formId = selectPaymentFormId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const publishableKey = selectProviderPublishableKey(global);\n  const stripeCredentials = selectStripeCredentials(global);\n  if (!chat || !messageId || !publishableKey || !formId) {\n    return;\n  }\n\n  void sendPaymentForm(chat, messageId, formId, {\n    save: saveCredentials,\n    data: stripeCredentials,\n  }, requestInfoId, shippingOptionId);\n});\n\nasync function sendStripeCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  },\n  publishableKey: string,\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  chat: ApiChat,\n  messageId: number,\n  formId: string,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    chat, messageId, formId, credentials, requestedInfoId, shippingOptionId,\n  });\n  if (result) {\n    const global = clearPayment(getGlobal());\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddReducer('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddReducer('setInvoiceMessageInfo', (global, actions, payload) => {\n  return setInvoiceMessageInfo(global, payload);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, showNewMessageNotification } from '../../../util/notifications';\nimport { updateAppBadge } from '../../../util/appBadge';\nimport {\n  updateChat,\n  replaceChatListIds,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectCountNotMutedUnread,\n  selectNotifySettings,\n} from '../../selectors';\nimport { throttle } from '../../../util/schedulers';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1500;\n\nconst runThrottledForUpdateAppBadge = throttle((cb) => cb(), 500, true);\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      const newGlobal = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(newGlobal);\n\n      runThrottledForUpdateAppBadge(() => updateAppBadge(selectCountNotMutedUnread(getGlobal())));\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n      break;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n      break;\n    }\n\n    case 'updateChatLeave': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      const { [listType]: listIds } = global.chats.listIds;\n\n      if (listIds) {\n        global = replaceChatListIds(global, listType, listIds.filter((listId) => listId !== update.id));\n      }\n\n      global = updateChat(global, update.id, { isNotJoined: true });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatInbox': {\n      setGlobal(updateChat(global, update.id, update.chat));\n\n      runThrottledForUpdateAppBadge(() => updateAppBadge(selectCountNotMutedUnread(getGlobal())));\n\n      break;\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        const newGlobal = getGlobal();\n        const chat = selectChat(newGlobal, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(newGlobal, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      break;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        setGlobal(updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n          ...(update.message.hasUnreadMention && {\n            unreadMentionsCount: chat.unreadMentionsCount ? chat.unreadMentionsCount + 1 : 1,\n          }),\n        }));\n      }\n\n      updateAppBadge(selectCountNotMutedUnread(getGlobal()));\n\n      const { hasWebNotifications } = selectNotifySettings(global);\n      if (hasWebNotifications) {\n        showNewMessageNotification({\n          chat,\n          message,\n          isActiveChat,\n        });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return;\n      }\n\n      ids.forEach((id) => {\n        const chatId = 'channelId' in update ? update.channelId : selectCommonBoxChatId(global, id);\n        const chat = selectChat(global, chatId);\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: chat.unreadMentionsCount - 1,\n          });\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return;\n      }\n\n      setGlobal(updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      }));\n\n      break;\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      global = {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (listType) {\n        const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n        let newOrderedPinnedIds = orderedPinnedIds || [];\n        if (!isPinned) {\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n        } else if (!newOrderedPinnedIds.includes(id)) {\n          // When moving pinned chats to archive, active ordered pinned ids don't get updated\n          // (to preserve chat pinned state when it returns from archive)\n          // If user already has max pinned chats, we should check for orderedIds\n          // that don't point to listed chats\n          if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n            const listIds = global.chats.listIds.active;\n            newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n          }\n\n          newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n        }\n\n        global = {\n          ...global,\n          chats: {\n            ...global.chats,\n            orderedPinnedIds: {\n              ...global.chats.orderedPinnedIds,\n              [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n            },\n          },\n        };\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      setGlobal(updateChatListType(global, id, folderId));\n\n      break;\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        setGlobal(updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        }));\n      }\n\n      break;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        setGlobal(updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        }));\n      }\n      break;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n        global = updateChat(global, chatId, { draftDate: date });\n\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n      break;\n    }\n  }\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiUpdate, ApiMessage, ApiPollResult, ApiThreadInfo, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  isMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsChatWithBot,\n} from '../../selectors';\nimport { getMessageContent, isChatPrivate, isMessageLocal } from '../../helpers';\n\nconst ANIMATION_DELAY = 350;\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      setGlobal(global);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (isMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (message.isOutgoing && !(message.content?.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n              isResizingContainer: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isMessageLocal(message as ApiMessage)) {\n          setTimeout(() => {\n            let delayedGlobal = getGlobal();\n            if (shouldForceReply) {\n              delayedGlobal = replaceThreadParam(delayedGlobal, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n            }\n            setGlobal(updateChatLastMessage(delayedGlobal, chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n      }\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      // Scroll down if bot message height is changed with an updated inline keyboard.\n      // A drawback: this will scroll down even if the previous scroll was not at bottom.\n      const chat = selectChat(global, chatId);\n      if (\n        chat\n        && !message.isOutgoing\n        && chat.lastMessage?.id === message.id\n        && selectIsChatWithBot(global, chat)\n        && isMessageInCurrentMessageList(global, chatId, message as ApiMessage)\n        && selectIsViewportNewest(global, chatId, message.threadInfo?.threadId || MAIN_THREAD_ID)\n      ) {\n        actions.focusLastMessage();\n      }\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, chatId, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread?.threadInfo) {\n        actions.markMessageListRead({ maxId: message.id });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isChatPrivate(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, global);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const updatedPoll = { ...message.content.poll, ...pollUpdate };\n\n        // Workaround for poll update bug: `chosen` option gets reset when someone votes after current user\n        const { results: updatedResults } = updatedPoll.results || {};\n        if (updatedResults && !updatedResults.some(((result) => result.isChosen))) {\n          const { results } = message.content.poll.results;\n          const chosenAnswers = results && results.filter((result) => result.isChosen);\n          if (chosenAnswers) {\n            chosenAnswers.forEach((chosenAnswer) => {\n              const chosenAnswerIndex = updatedResults.findIndex((result) => result.option === chosenAnswer.option);\n              if (chosenAnswerIndex >= 0) {\n                updatedPoll.results.results![chosenAnswerIndex].isChosen = true;\n              }\n            });\n          }\n        }\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOption = newResults.find((result) => result.option === option);\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n  }\n});\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: number, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateThreadUnread(global: GlobalState, actions: GlobalActions, message: ApiMessage, isDeleting?: boolean) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, actions: GlobalActions, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n        global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n        if (!firstMessageId) {\n          global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n        }\n      }\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: threadInfo.messagesCount + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first unread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const newGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(newGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = newGlobal;\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: number,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId]?.lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: number) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: number | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    setGlobal(global);\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: number[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: number | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, ApiUserStatus } from '../../../api/types';\n\nimport { deleteUser, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: [number, ApiUserStatus][] = [];\n\nfunction scheduleStatusUpdate(userId: number, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates.push([userId, statusUpdate]);\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  let global = getGlobal();\n  pendingStatusUpdates.forEach(([userId, statusUpdate]) => {\n    global = updateUser(global, userId, {\n      status: statusUpdate,\n    });\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = [];\n}\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'deleteUser': {\n      return deleteUser(global, update.id);\n    }\n\n    case 'updateUser': {\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\n\nimport { updateStickerSet } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import {\n  addReducer, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { ApiPrivacyKey } from '../../../types';\n\nimport { addBlockedContact, removeBlockedContact } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          hash: 0,\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updatePrivacy':\n      global.settings.privacy[update.key as ApiPrivacyKey] = update.rules;\n      break;\n  }\n\n  return undefined;\n});\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = defaultViewportContent\n  .replace(/\\s*maximum-scale=1\\.0,?/i, '')\n  .replace(/\\s*user-scalable=no,?/i, '');\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import React, {\n  FC, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LeftColumnContent, ISettings } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  ANIMATION_LEVEL_MAX, APP_NAME, APP_VERSION, FEEDBACK_URL,\n} from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport { isChatArchived } from '../../../modules/helpers';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport { selectTheme } from '../../../modules/selectors';\nimport switchTheme from '../../../util/switchTheme';\nimport useLang from '../../../hooks/useLang';\nimport { disableHistoryBack } from '../../../hooks/useHistoryBack';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  searchQuery?: string;\n  isLoading: boolean;\n  currentUserId?: number;\n  globalSearchChatId?: number;\n  searchDate?: number;\n  theme: ISettings['theme'];\n  animationLevel: 0 | 1 | 2;\n  chatsById?: Record<number, ApiChat>;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'openTipsChat' | 'setGlobalSearchDate' | 'setGlobalSearchChatId' | 'setSettingOption'\n)>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\n\nconst PRODUCTION_HOSTNAME = 'web.telegram.org';\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\nconst PERMANENT_VERSION_KEY = 'kz_version';\n\nconst LeftMainHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  setGlobalSearchChatId,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  openChat,\n  openTipsChat,\n  setGlobalSearchDate,\n  setSettingOption,\n}) => {\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleSwitchToWebK = () => {\n    localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify('K'));\n    disableHistoryBack();\n  };\n\n  const handleOpenTipsChat = () => {\n    openTipsChat({ langCode: lang.code });\n  };\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} alpha ${APP_VERSION}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"animations\"\n            onClick={handleAnimationLevelChange}\n          >\n            <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n            <Switcher\n              id=\"animations\"\n              label=\"Toggle Animations\"\n              checked={animationLevel > 0}\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={handleOpenTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n                onClick={disableHistoryBack}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId } = global;\n    const { byId: chatsById } = global.chats;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n    'openTipsChat',\n    'setGlobalSearchDate',\n    'setGlobalSearchChatId',\n    'setSettingOption',\n  ]),\n)(LeftMainHeader));\n","import React, { memo, FC } from '../../lib/teact/teact';\n\nimport { GlobalState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\n\nimport './ConnectionState.scss';\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst ConnectionState: FC<StateProps> = () => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionState\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">{lang('WaitingForNetwork')}</div>\n    </div>\n  );\n};\n\nexport default memo(ConnectionState);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatFolder, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { NotifyException, NotifySettings, SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { buildCollectionByKey, pick } from '../../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { getFolderUnreadDialogs } from '../../../modules/helpers';\nimport { selectNotifyExceptions, selectNotifySettings } from '../../../modules/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport useThrottledMemo from '../../../hooks/useThrottledMemo';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  chatFoldersById: Record<number, ApiChatFolder>;\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: number;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadChatFolders' | 'setActiveChatFolder' | 'openChat'>;\n\nconst INFO_THROTTLE = 3000;\nconst SAVED_MESSAGES_HOTKEY = '0';\n\nconst ChatFolders: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatsById,\n  usersById,\n  chatFoldersById,\n  notifySettings,\n  notifyExceptions,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  foldersDispatch,\n  onScreenSelect,\n  loadChatFolders,\n  setActiveChatFolder,\n  openChat,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => chatFoldersById[id] || {}).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, orderedFolderIds]);\n\n  const folderCountersById = useThrottledMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    const chatIds = Object.keys(chatsById).map(Number);\n    const counters = displayedFolders.map((folder) => {\n      const {\n        unreadDialogsCount, hasActiveDialogs,\n      } = getFolderUnreadDialogs(chatsById, usersById, folder, chatIds, notifySettings, notifyExceptions) || {};\n\n      return {\n        id: folder.id,\n        badgeCount: unreadDialogsCount,\n        isBadgeActive: hasActiveDialogs,\n      };\n    });\n\n    return buildCollectionByKey(counters, 'id');\n  }, INFO_THROTTLE, [displayedFolders, chatsById, usersById, notifySettings, notifyExceptions]);\n\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return [\n      { title: lang.code === 'en' ? 'All' : lang('FilterAllChats') },\n      ...displayedFolders.map((folder) => ({\n        title: folder.title,\n        ...(folderCountersById?.[folder.id]),\n      })),\n    ];\n  }, [displayedFolders, folderCountersById, lang]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index);\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(0);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInAllTabRef = useRef();\n  isNotInAllTabRef.current = activeChatFolder !== 0;\n  useEffect(() => (isNotInAllTabRef.current ? captureEscKeyListener(() => {\n    if (isNotInAllTabRef.current) {\n      setActiveChatFolder(0);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack(activeChatFolder !== 0, () => setActiveChatFolder(0));\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder);\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  });\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ title }) => title === folderTabs![activeChatFolder].title);\n\n    if (!activeFolder || activeChatFolder === 0) {\n      return (\n        <ChatList\n          folderType=\"all\"\n          isActive={isActive}\n          foldersDispatch={foldersDispatch}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        isActive={isActive}\n        onScreenSelect={onScreenSelect}\n        foldersDispatch={foldersDispatch}\n      />\n    );\n  }\n\n  return (\n    <div className=\"ChatFolders\">\n      {folderTabs?.length ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-reversed' : 'slide'}\n        activeKey={activeChatFolder}\n        renderCount={folderTabs ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: { byId: chatsById },\n      users: { byId: usersById },\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    } = global;\n\n    return {\n      chatsById,\n      usersById,\n      chatFoldersById,\n      orderedFolderIds,\n      lastSyncTime,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadChatFolders',\n    'setActiveChatFolder',\n    'openChat',\n  ]),\n)(ChatFolders));\n","import { useState } from '../lib/teact/teact';\n\nimport useThrottle from './useThrottle';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport useFlag from './useFlag';\n\nexport default <R extends any, D extends any[]>(resolverFn: () => R, ms: number, dependencies: D) => {\n  const runThrottled = useThrottle(ms, true);\n  const [value, setValue] = useState<R>();\n  const [isFrozen, freeze, unfreeze] = useFlag();\n\n  useHeavyAnimationCheck(freeze, unfreeze);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    runThrottled(() => {\n      setValue(resolverFn());\n    });\n  }, dependencies.concat([isFrozen]));\n\n  return value;\n};\n","import { useMemo } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\n\nexport default (ms: number, noFirst = false) => {\n  return useMemo(() => {\n    return throttle((cb) => cb(), ms, !noFirst);\n  }, [ms, noFirst]);\n};\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import React, {\n  FC, useCallback, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\nconst MENU_CLOSE_DELAY_MS = 750;\nlet closeTimeout: number | undefined;\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const handleClose = () => {\n    setIsMenuOpen(false);\n  };\n\n  const handleMouseEnter = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n  }, []);\n\n  const handleMouseLeave = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      setIsMenuOpen(false);\n    }, MENU_CLOSE_DELAY_MS);\n  }, []);\n\n  return (\n    <div\n      className={fabClassName}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import React, {\n  FC, useState, useRef, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport useBrowserOnline from '../../../hooks/useBrowserOnline';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ConnectionState from '../ConnectionState';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport ShowTransition from '../../ui/ShowTransition';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nconst APP_OUTDATED_TIMEOUT = 3 * 24 * 60 * 60 * 1000; // 3 days\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps & StateProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n  connectionState,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const isBrowserOnline = useBrowserOnline();\n  const isConnecting = !isBrowserOnline || connectionState === 'connectionStateConnecting';\n\n  const isMouseInside = useRef(false);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const [shouldRenderUpdateButton, updateButtonClassNames, handleUpdateClick] = useAppOutdatedCheck();\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <ShowTransition isOpen={isConnecting} isCustom className=\"connection-state-wrapper opacity-transition slow\">\n        {() => <ConnectionState />}\n      </ShowTransition>\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        className={isConnecting ? 'pull-down' : undefined}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders onScreenSelect={onScreenSelect} foldersDispatch={foldersDispatch} />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nfunction useAppOutdatedCheck() {\n  const [isAppOutdated, markIsAppOutdated] = useFlag(false);\n\n  useEffect(() => {\n    const timeout = window.setTimeout(markIsAppOutdated, APP_OUTDATED_TIMEOUT);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [markIsAppOutdated]);\n\n  const { shouldRender, transitionClassNames } = useShowTransition(isAppOutdated);\n\n  const handleUpdateClick = () => {\n    window.location.reload();\n  };\n\n  return [shouldRender, transitionClassNames, handleUpdateClick] as const;\n}\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['connectionState']),\n)(LeftMain);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  activeChatFolder: number;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setGlobalSearchQuery' | 'setGlobalSearchChatId' | 'resetChatCreation' | 'setGlobalSearchDate' |\n  'loadPasswordInfo' | 'clearTwoFaError'\n)>;\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps & DispatchProps> = ({\n  searchQuery,\n  searchDate,\n  activeChatFolder,\n  shouldSkipHistoryAnimations,\n  setGlobalSearchQuery,\n  setGlobalSearchChatId,\n  resetChatCreation,\n  setGlobalSearchDate,\n  loadPasswordInfo,\n  clearTwoFaError,\n}) => {\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: boolean) => {\n    if (content === LeftColumnContent.NewGroupStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Language:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyActiveSessions:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && activeChatFolder === 0) {\n      setContent(LeftColumnContent.GlobalSearch);\n      return;\n    }\n\n    setContent(LeftColumnContent.ChatList);\n    setContactsFilter('');\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchDate({ date: undefined });\n    setGlobalSearchChatId({ id: undefined });\n    resetChatCreation();\n    setTimeout(() => {\n      setLastResetTime(Date.now());\n    }, RESET_TRANSITION_DELAY_MS);\n  }, [\n    content, activeChatFolder, settingsScreen, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId,\n    resetChatCreation,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || activeChatFolder === 0\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [activeChatFolder, content, handleReset],\n  );\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  const handleSettingsScreenSelect = (screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  };\n\n  return (\n    <Transition\n      id=\"LeftColumn\"\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n    >\n      {(isActive) => {\n        switch (contentType) {\n          case ContentType.Archived:\n            return (\n              <ArchivedChats\n                isActive={isActive}\n                onReset={handleReset}\n                onContentChange={setContent}\n              />\n            );\n          case ContentType.Settings:\n            return (\n              <Settings\n                isActive={isActive}\n                currentScreen={settingsScreen}\n                foldersState={foldersState}\n                foldersDispatch={foldersDispatch}\n                onScreenSelect={handleSettingsScreenSelect}\n                onReset={handleReset}\n                shouldSkipTransition={shouldSkipHistoryAnimations}\n              />\n            );\n          case ContentType.NewChannel:\n            return (\n              <NewChat\n                key={lastResetTime}\n                isActive={isActive}\n                isChannel\n                content={content}\n                onContentChange={setContent}\n                onReset={handleReset}\n              />\n            );\n          case ContentType.NewGroup:\n            return (\n              <NewChat\n                key={lastResetTime}\n                isActive={isActive}\n                content={content}\n                onContentChange={setContent}\n                onReset={handleReset}\n              />\n            );\n          default:\n            return (\n              <LeftMain\n                content={content}\n                searchQuery={searchQuery}\n                searchDate={searchDate}\n                contactsFilter={contactsFilter}\n                foldersDispatch={foldersDispatch}\n                onContentChange={setContent}\n                onSearchQuery={handleSearchQuery}\n                onScreenSelect={handleSettingsScreenSelect}\n                onReset={handleReset}\n                shouldSkipTransition={shouldSkipHistoryAnimations}\n              />\n            );\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n    } = global;\n    return {\n      searchQuery: query, searchDate: date, activeChatFolder, shouldSkipHistoryAnimations,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setGlobalSearchQuery', 'setGlobalSearchChatId', 'resetChatCreation', 'setGlobalSearchDate',\n    'loadPasswordInfo', 'clearTwoFaError',\n  ]),\n)(LeftColumn));\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\nimport windowSize from '../util/windowSize';\nimport { ApiDimensions } from '../api/types';\n\nconst THROTTLE = 250;\n\nexport default () => {\n  const [size, setSize] = useState<ApiDimensions>(windowSize.get());\n\n  useEffect(() => {\n    const handleResize = throttle(() => {\n      setSize(windowSize.get());\n    }, THROTTLE, false);\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return size;\n};\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nconst SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nconst MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import React, {\n  FC,\n  memo,\n  useRef,\n  useCallback,\n  useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { pick } from '../../util/iteratees';\nimport { isChatChannel, isChatSuperGroup } from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatBot,\n  selectIsUserBlocked,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canMute?: boolean;\n  canLeave?: boolean;\n}\n\ntype DispatchProps = Pick<GlobalActions, 'joinChannel' | 'sendBotCommand' | 'openLocalTextSearch' | 'restartBot'>;\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canMute,\n  canLeave,\n  isRightColumnShown,\n  joinChannel,\n  sendBotCommand,\n  openLocalTextSearch,\n  restartBot,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && canSubscribe && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleSubscribeClick}\n        >\n          {lang(isChannel ? 'Subscribe' : 'Join Group')}\n        </Button>\n      )}\n      {!IS_SINGLE_COLUMN_LAYOUT && canStartBot && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleStartBot}\n        >\n          {lang('BotStart')}\n        </Button>\n      )}\n      {!IS_SINGLE_COLUMN_LAYOUT && canRestartBot && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleRestartBot}\n        >\n          {lang('BotRestart')}\n        </Button>\n      )}\n      {!IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n        <Button\n          round\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleSearchClick}\n          ariaLabel=\"Search in this chat\"\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n      <Button\n        ref={menuButtonRef}\n        className={isMenuOpen ? 'active' : ''}\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        disabled={noMenu}\n        ariaLabel=\"More actions\"\n        onClick={handleHeaderMenuOpen}\n      >\n        <i className=\"icon-more\" />\n      </Button>\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          isChannel={isChannel}\n          canStartBot={canStartBot}\n          canRestartBot={canRestartBot}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canMute={canMute}\n          canLeave={canLeave}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (chat?.isRestricted || selectIsInSelectMode(global)) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const bot = selectChatBot(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && chat && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canLeave = isMainThread && !canSubscribe;\n\n    return {\n      noMenu: false,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canRestartBot,\n      canSubscribe,\n      canSearch,\n      canMute,\n      canLeave,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'joinChannel', 'sendBotCommand', 'openLocalTextSearch', 'restartBot',\n  ]),\n)(HeaderActions));\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { ApiMessage } from '../api/types';\n\nimport { DEBUG } from '../config';\nimport { isWebpSupported } from '../util/environment';\nimport { EMPTY_IMAGE_DATA_URI, webpToPngBase64 } from '../util/webpToPng';\nimport { getMessageMediaThumbDataUri } from '../modules/helpers';\n\nexport default function useWebpThumbnail(message?: ApiMessage) {\n  const thumbnail = message && getMessageMediaThumbDataUri(message);\n  const sticker = message?.content?.sticker;\n  const shouldDecodeThumbnail = thumbnail && sticker && !isWebpSupported() && thumbnail.includes('image/webp');\n  const [thumbnailDecoded, setThumbnailDecoded] = useState(EMPTY_IMAGE_DATA_URI);\n  const messageId = message?.id;\n\n  useLayoutEffect(() => {\n    if (!shouldDecodeThumbnail) {\n      return;\n    }\n\n    webpToPngBase64(`b64-${messageId}`, thumbnail!)\n      .then(setThumbnailDecoded)\n      .catch((err) => {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(err);\n        }\n      });\n  }, [messageId, shouldDecodeThumbnail, thumbnail]);\n\n  return shouldDecodeThumbnail ? thumbnailDecoded : thumbnail;\n}\n","import React, {\n  FC,\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        // @ts-ignore\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          // @ts-ignore\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSummaryText } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport RippleEffect from '../ui/RippleEffect';\nimport buildClassName from '../../util/buildClassName';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const lang = useLang();\n  const mediaThumbnail = useWebpThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = getMessageSummaryText(lang, message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div className=\"HeaderPinnedMessage\" onClick={onClick} dir={lang.isRtl ? 'rtl' : undefined}>\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">{renderText(text)}</p>\n        </div>\n\n        <RippleEffect />\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","export function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => URL.createObjectURL(blob))\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => URL.createObjectURL(blob))\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n) {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          canvas.getContext('2d')!.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nfunction steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport useMedia from './useMedia';\nimport { useAsync } from './useAsync';\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../modules/helpers';\nimport { getTranslation } from '../util/langProvider';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\n// @ts-ignore\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nexport default (message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat): MediaMetadata | undefined => {\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = (audio && audio.performer) || (sender && getSenderTitle(getTranslation, sender));\n  const album = (chat && getChatTitle(getTranslation, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = getCoverSize(audio, voice, media);\n  const { result: url } = useAsync(() => makeGoodArtwork(media, size), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes || audio.thumbnailSizes.length === 0) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport const useAsync = <T>(fn: () => Promise<T>, deps: any[], defaultValue?: T) => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<Error | undefined>();\n  const [result, setResult] = useState<T | undefined>(defaultValue);\n  useEffect(() => {\n    setIsLoading(true);\n    let wasCancelled = false;\n    fn().then((res) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setResult(res);\n    }, (err) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setError(err);\n    });\n    return () => {\n      wasCancelled = true;\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n  return { isLoading, error, result };\n};\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { AudioOrigin } from '../../types';\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../../modules/helpers';\nimport { selectChat, selectSender } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusMessage' | 'closeAudioPlayer'>;\n\nconst AudioPlayer: FC<OwnProps & StateProps & DispatchProps> = ({\n  message, origin = AudioOrigin.Inline, className, noUi, sender, focusMessage, closeAudioPlayer, chat,\n}) => {\n  const lang = useLang();\n  const { audio, voice } = getMessageContent(message);\n  const isVoice = Boolean(voice);\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n  const { playPause, stop, isPlaying } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    origin,\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    true,\n  );\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n\n    return {\n      sender,\n      chat,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['focusMessage', 'closeAudioPlayer']),\n)(AudioPlayer);\n","import React, {\n  FC, useCallback, useMemo, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport {\n  ApiMessage,\n  ApiChat,\n  ApiUser,\n  ApiTypingStatus,\n  MAIN_THREAD_ID, ApiUpdateConnectionStateType,\n} from '../../api/types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  EDITABLE_INPUT_ID,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  isChatPrivate,\n  getMessageKey,\n  getChatTitle,\n  getSenderTitle,\n} from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectAllowedMessageActions,\n  selectIsRightColumnShown,\n  selectThreadTopMessageId,\n  selectThreadInfo,\n  selectChatMessages,\n  selectPinnedIds,\n  selectIsChatWithSelf,\n  selectForwardedSender,\n  selectScheduledIds,\n  selectIsInSelectMode,\n  selectIsChatWithBot,\n  selectCountNotMutedUnread,\n} from '../../modules/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport { pick } from '../../util/iteratees';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useBrowserOnline from '../../hooks/useBrowserOnline';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  chatsById?: Record<number, ApiChat>;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  isChatWithBot?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChatWithInfo' | 'pinMessage' | 'focusMessage' | 'openChat' | 'openPreviousChat' | 'loadPinnedMessages' |\n  'toggleLeftColumn' | 'exitMessageSelectMode'\n)>;\n\nconst MiddleHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  chatsById,\n  messagesCount,\n  isChatWithSelf,\n  isChatWithBot,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  openChatWithInfo,\n  pinMessage,\n  focusMessage,\n  openChat,\n  openPreviousChat,\n  loadPinnedMessages,\n  toggleLeftColumn,\n  exitMessageSelectMode,\n}) => {\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID);\n      if (messageInput) {\n        messageInput.blur();\n      }\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    threadId, messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode, setBackButtonActive,\n  ]);\n\n  const unreadCount = useMemo(() => {\n    if (!isLeftColumnHideable || !chatsById) {\n      return undefined;\n    }\n\n    return selectCountNotMutedUnread(getGlobal()) || undefined;\n  }, [isLeftColumnHideable, chatsById]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(pinnedMessage && !shouldRenderAudioPlayer);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const isBrowserOnline = useBrowserOnline();\n  const isConnecting = (!isBrowserOnline || connectionState === 'connectionStateConnecting')\n    && (IS_SINGLE_COLUMN_LAYOUT || (IS_TABLET_COLUMN_LAYOUT && !shouldShowCloseButton));\n\n  function renderInfo() {\n    if (isConnecting) {\n      return (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('WaitingForNetwork')}\n          </h3>\n        </>\n      );\n    }\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isChatPrivate(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              withFullInfo={isChatWithBot}\n              withMediaViewer\n              withUpdatingStatus\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              noRtl\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCount = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={asClose ? 'Close' : 'Back'}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCount && unreadCount && (\n          <div className=\"unread-count active\">\n            {formatIntegerCompact(unreadCount)}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={isConnecting ? Infinity : currentTransitionKey}\n      >\n        {renderInfo}\n      </Transition>\n\n      <div className=\"header-tools\">\n        {shouldRenderPinnedMessage && renderingPinnedMessage && !shouldRenderAudioPlayer && (\n          <HeaderPinnedMessage\n            key={chatId}\n            message={renderingPinnedMessage}\n            count={renderingPinnedMessagesCount || 0}\n            index={pinnedMessageIndex}\n            customTitle={renderingPinnedMessageTitle}\n            className={pinnedMessageClassNames}\n            onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n            onClick={handlePinnedMessageClick}\n            onAllPinnedClick={handleAllPinnedClick}\n          />\n        )}\n        {shouldRenderAudioPlayer && renderingAudioMessage && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const { byId: chatsById } = global.chats;\n    const chat = selectChat(global, chatId);\n\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      chatsById,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isChatWithBot: chat && selectIsChatWithBot(global, chat),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      connectionState: global.connectionState,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChatWithInfo',\n    'pinMessage',\n    'focusMessage',\n    'openChat',\n    'openPreviousChat',\n    'loadPinnedMessages',\n    'toggleLeftColumn',\n    'exitMessageSelectMode',\n  ]),\n)(MiddleHeader));\n","import { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\n\nimport { getDayStart } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../modules/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: Number(getDayStart(messages[0].date * 1000)),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = Number(getDayStart(nextMessage.date * 1000));\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { RefObject } from 'react';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMessagesRead } = getDispatch();\n\n  const {\n    observe: observeIntersectionForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n    noAutoFreeze: true,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMessagesRead({ messageIds: mentionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  };\n}\n","import { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../modules/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMedia = photo || video;\n  const isMediaWithNoText = isMedia && !text;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (text) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (photo || video) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (asForwarded && !customShape) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../modules/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, isForwarded, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport { IAlbum } from '../../../../types';\nimport { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction clamp(num: number, low: number, high: number) {\n  return num < low ? low : (num > high ? high : num);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1)));\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, isForwarded, false, noAvatars) - (isForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet element: HTMLSpanElement | undefined;\n\nexport default function calculateAuthorWidth(text: string) {\n  if (!element) {\n    element = document.createElement('span');\n    // eslint-disable-next-line max-len\n    element.style.font = IS_IOS\n      // eslint-disable-next-line max-len\n      ? '400 12px system-ui, -apple-system, BlinkMacSystemFont, \"Roboto\", \"Apple Color Emoji\", \"Helvetica Neue\", sans-serif'\n      : '400 12px \"Roboto\", -apple-system, \"Apple Color Emoji\", BlinkMacSystemFont, \"Helvetica Neue\", sans-serif';\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: number,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer]);\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, {\n  FC, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\nimport { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../modules/selectors';\nimport { isChatChannel } from '../../modules/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { ObserveFn, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  sender?: ApiUser | ApiChat;\n  targetUserIds?: number[];\n  targetMessage?: ApiMessage;\n  targetChatId?: number;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  sender,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter<ApiUser>(Boolean as any)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    sender,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    isEmbedded ? { isEmbedded: true, asPlain: true } : undefined,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{renderText(content as string)}</span>;\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={`message${message.id}`}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const sender = chat && (isChatChannel(chat) || userId === message.chatId)\n      ? chat\n      : userId ? selectUser(global, userId) : undefined;\n\n    return {\n      usersById,\n      sender,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import React, { FC, useRef } from '../../lib/teact/teact';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getMessageSummaryText,\n  getSenderTitle,\n  getMessageRoundVideo,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const pictogramId = message && `sticker-reply-thumb${message.id}`;\n  const mediaThumbnail = useWebpThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender && getSenderTitle(lang, sender);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('EmbeddedMessage', className)}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(pictogramId, mediaThumbnail, mediaBlobUrl, isRoundVideo)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderText(getMessageSummaryText(lang, message, Boolean(mediaThumbnail)))\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  id: string | undefined,\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img\n      id={id}\n      src={blobUrl || thumbDataUri}\n      width={width}\n      height={height}\n      alt=\"\"\n      className={isRoundVideo ? 'round' : ''}\n    />\n  );\n}\n\nexport default EmbeddedMessage;\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\n\nimport { formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <span className=\"MessageMeta\" dir={lang.isRtl ? 'rtl' : 'ltr'} onClick={onClick}>\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\">\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import React, { FC, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { MEMOJI_STICKER_ID } from '../../../config';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport buildClassName from '../../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useFlag from '../../../hooks/useFlag';\nimport useWebpThumbnail from '../../../hooks/useWebpThumbnail';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\nimport './Sticker.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const sticker = message.content.sticker!;\n  const { isAnimated, stickerSetId } = sticker;\n  const isMemojiSticker = stickerSetId === MEMOJI_STICKER_ID;\n\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const thumbDataUri = useWebpThumbnail(message);\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline', true),\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isAnimated ? isAnimationLoaded : isMediaLoaded;\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(isMediaReady, 'slow');\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n  );\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? openModal : undefined}>\n      {!isMediaReady && (\n        <img\n          id={`sticker-thumb-${message.id}`}\n          src={thumbDataUri}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isAnimated && shouldRenderFullMedia && (\n        <img\n          id={`sticker-${message.id}`}\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isAnimated && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          id={mediaHash}\n          animationData={mediaData as AnyLiteral}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markAnimationLoaded}\n        />\n      )}\n      <StickerSetModal\n        isOpen={isModalOpen}\n        fromSticker={sticker}\n        onClose={closeModal}\n      />\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../modules/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, fullMediaData?: string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","const SELECTED_APPENDIX_BACKGROUND = Promise.resolve('rgba(255,255,255,1)');\n\nexport default function getCustomAppendixBg(src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean) {\n  return isSelected ? SELECTED_APPENDIX_BACKGROUND : getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import React, {\n  FC, useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  shouldAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  nonInteractive?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst CUSTOM_APPENDIX_ATTRIBUTE = 'data-has-custom-appendix';\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  shouldAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  nonInteractive,\n  shouldAffectAppendix,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad);\n  const shouldDownload = isDownloadAllowed && isIntersecting;\n  const {\n    mediaData, downloadProgress,\n  } = useMediaWithDownloadProgress(getMessageMediaHash(message, size), !shouldDownload);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbRef = useBlurredMediaThumbRef(message, fullMediaData);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(message, uploadProgress || downloadProgress, shouldDownload && !fullMediaData);\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasDownloadDisabled, 'slow');\n  const {\n    shouldRenderThumb, shouldRenderFullMedia, transitionClassNames,\n  } = useTransitionForMedia(fullMediaData, 'slow');\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {shouldRenderThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${width}px; height: ${height}px`}\n        />\n      )}\n      {shouldRenderFullMedia && (\n        <img\n          src={fullMediaData}\n          className={`full-media ${transitionClassNames}`}\n          width={width}\n          height={height}\n          alt=\"\"\n        />\n      )}\n      {shouldRenderSpinner && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {!fullMediaData && !isDownloadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring && (\n        <span className=\"message-upload-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import { RefObject } from 'react';\nimport { useCallback, useRef } from '../lib/teact/teact';\n\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport safePlay from '../util/safePlay';\n\nexport default function useHeavyAnimationCheckForVideo(playerRef: RefObject<HTMLVideoElement>, shouldPlay: boolean) {\n  const shouldPlayRef = useRef();\n  shouldPlayRef.current = shouldPlay;\n\n  const pause = useCallback(() => {\n    if (playerRef.current) {\n      playerRef.current.pause();\n    }\n  }, [playerRef]);\n\n  const play = useCallback(() => {\n    if (playerRef.current && shouldPlayRef.current) {\n      safePlay(playerRef.current);\n    }\n  }, [playerRef]);\n\n  useHeavyAnimationCheck(pause, play);\n}\n","import { useCallback, useRef } from '../../../../lib/teact/teact';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport safePlay from '../../../../util/safePlay';\n\nexport default (playerRef: { current: HTMLVideoElement | null }, isPlayAllowed = false) => {\n  const wasPlaying = useRef(false);\n  const isFrozen = useRef(false);\n\n  const freezePlaying = useCallback(() => {\n    isFrozen.current = true;\n\n    if (!isPlayAllowed || !playerRef.current) {\n      return;\n    }\n\n    if (!wasPlaying.current) {\n      wasPlaying.current = !playerRef.current.paused;\n    }\n\n    playerRef.current.pause();\n  }, [isPlayAllowed, playerRef]);\n\n  const unfreezePlaying = useCallback(() => {\n    // At this point HTMLVideoElement can be unmounted from the DOM\n    if (isPlayAllowed && playerRef.current && wasPlaying.current && document.body.contains(playerRef.current)) {\n      safePlay(playerRef.current);\n    }\n\n    wasPlaying.current = false;\n    isFrozen.current = false;\n  }, [isPlayAllowed, playerRef]);\n\n  const unfreezePlayingOnRaf = useCallback(() => {\n    fastRaf(unfreezePlaying);\n  }, [unfreezePlaying]);\n\n  if (!document.hasFocus()) {\n    freezePlaying();\n  }\n\n  useBackgroundMode(freezePlaying, unfreezePlayingOnRaf);\n};\n","import React, {\n  FC, useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useHeavyAnimationCheckForVideo from '../../../hooks/useHeavyAnimationCheckForVideo';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport usePauseOnInactive from './hooks/usePauseOnInactive';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  noAvatars?: boolean;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad);\n  const shouldDownload = Boolean(isDownloadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(shouldAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const { mediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldDownload,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(isIntersecting && fullMediaData);\n  // Thumbnail is always rendered so we can only disable blur if we have preview\n  const thumbRef = useBlurredMediaThumbRef(message, previewBlobUrl);\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!shouldAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || downloadProgress,\n    shouldDownload && !isBuffered,\n  );\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasDownloadDisabled);\n  const { transitionClassNames } = useTransitionForMedia(fullMediaData, 'slow');\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = (videoRef.current?.duration) || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded, noAvatars);\n\n  useHeavyAnimationCheckForVideo(videoRef, Boolean(isInline && shouldAutoPlay));\n  usePauseOnInactive(videoRef, isPlayAllowed);\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {!previewBlobUrl && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${width}px; height: ${height}px;`}\n        />\n      )}\n      {previewBlobUrl && (\n        <img\n          src={previewBlobUrl}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${width}px; height: ${height}px;`}\n          alt=\"\"\n        />\n      )}\n      {isInline && (\n        <video\n          ref={videoRef}\n          className={videoClassName}\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {(isDownloadAllowed && !isPlayAllowed && !shouldRenderSpinner) && (\n        <i className=\"icon-large-play\" />\n      )}\n      {shouldRenderSpinner && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {!isDownloadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-upload-progress\">\n          {isUploading ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openUserInfo'>;\n\nconst Contact: FC<OwnProps & StateProps & DispatchProps> = ({\n  contact, user, openUserInfo, phoneCodeList,\n}) => {\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n\n  const handleClick = useCallback(() => {\n    openUserInfo({ id: userId });\n  }, [openUserInfo, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', Boolean(userId) && 'interactive')}\n      onClick={userId ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n  ]),\n)(Contact);\n","import React, {\n  FC, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent < answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            // @ts-ignore\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderMessageText';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<number, ApiUser>;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('loadMessage' | 'openPollResults')>;\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  loadMessage,\n  onSendVote,\n  openPollResults,\n  serverTimeOffset,\n}) => {\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    if (\n      isSubmitting\n      && poll.results.results\n      && poll.results.results.some((result) => result.isChosen)\n    ) {\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question)}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\">\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadMessage', 'openPollResults']),\n)(Poll));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getMessageWebPage } from '../../../modules/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  inPreview?: boolean;\n  lastSyncTime?: number;\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  inPreview,\n  lastSyncTime,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  let isSquarePhoto = false;\n  if (webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebPage',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          shouldAutoLoad={shouldAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          nonInteractive={!isMediaInteractive}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      <div className=\"WebPage-text\">\n        <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n        {!inPreview && title && (\n          <p className=\"site-title\">{renderText(title)}</p>\n        )}\n        {truncatedDescription && (\n          <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n        )}\n      </div>\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersection={observeIntersection!}\n          noAvatars={noAvatars}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAutoPlay={shouldAutoPlay}\n          lastSyncTime={lastSyncTime}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../modules/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n}) => {\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photoUrl,\n  } = invoice!;\n\n  return (\n    <div\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <p>{renderText(text, ['emoji', 'br'])}</p>\n      )}\n      <div className={`description ${photoUrl ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n          />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { OwnProps as PhotoProps } from '../Photo';\nimport { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport { GlobalActions } from '../../../../global/types';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../modules/selectors';\n\nimport { pick } from '../../../../util/iteratees';\n\ntype OwnProps = PhotoProps & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('toggleMessageSelection')>;\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps & DispatchProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      toggleMessageSelection,\n      dimensions,\n    } = props;\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...props.dimensions,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : props.onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={\n          buildClassName(\n            'album-item-select-wrapper',\n            isSelected && 'is-selected',\n          )\n        }\n        // @ts-ignore\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n    (setGlobal, actions) => pick(actions, [\n      'toggleMessageSelection',\n    ]),\n  )(ComponentWithSelectControl));\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\nimport { AlbumRectPart, IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent } from '../../../modules/helpers';\nimport { withGlobal } from '../../../lib/teact/teactn';\nimport { pick } from '../../../util/iteratees';\nimport withSelectControl from './hocs/withSelectControl';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'cancelSendingMessage'>;\n\nconst Album: FC<OwnProps & StateProps & DispatchProps> = ({\n  album,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  cancelSendingMessage,\n}) => {\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[message.previousLocalId || message.id];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAutoPlay={shouldAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      // @ts-ignore\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      uploadsById: global.fileUploads.byMessageLocalId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'cancelSendingMessage',\n  ]),\n)(Album);\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS } from '../../common/helpers/mediaDimensions';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport useHeavyAnimationCheckForVideo from '../../../hooks/useHeavyAnimationCheckForVideo';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport usePauseOnInactive from './hooks/usePauseOnInactive';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  lastSyncTime?: number;\n};\n\nlet currentOnRelease: NoneToVoidFunction;\n\nfunction createCapture(onRelease: NoneToVoidFunction) {\n  return () => {\n    if (currentOnRelease) {\n      currentOnRelease();\n    }\n\n    currentOnRelease = onRelease;\n  };\n}\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad && shouldAutoPlay);\n  const shouldDownload = Boolean(isDownloadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldDownload,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = isDownloadAllowed && !isBuffered;\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasDownloadDisabled);\n  const { shouldRenderThumb, transitionClassNames } = useTransitionForMedia(mediaData, 'slow');\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const circumference = 94 * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `<svg width=\"200px\" height=\"200px\">\n          <circle cx=\"100\" cy=\"100\" r=\"94\" class=\"progress-circle\" transform=\"rotate(-90, 100, 100)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = () => {\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current!);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  };\n\n  const capturePlaying = createCapture(stopPlaying);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useHeavyAnimationCheckForVideo(playerRef, shouldPlay);\n  usePauseOnInactive(playerRef, Boolean(mediaData));\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, mediaData]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {(shouldRenderThumb || mediaData) && (\n        <div className=\"thumbnail-wrapper\">\n          <canvas\n            ref={thumbRef}\n            className=\"thumbnail\"\n            // @ts-ignore teact feature\n            style={`width: ${ROUND_VIDEO_DIMENSIONS}px; height: ${ROUND_VIDEO_DIMENSIONS}px`}\n          />\n        </div>\n      )}\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS}\n            height={ROUND_VIDEO_DIMENSIONS}\n            autoPlay\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={downloadProgress} />\n        </div>\n      )}\n      {!mediaData && !isDownloadAllowed && (\n        <i className=\"icon-large-play\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted-chat\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React, { FC } from '../../../lib/teact/teact';\n\nimport { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ button }: { button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'NOT_SUPPORTED'}\n              onClick={() => onClick({ button })}\n            >\n              {renderText(lang(button.text))}\n              {button.type === 'buy' && <i className=\"icon-card\" />}\n              {button.type === 'url' && !button.value!.match(RE_TME_LINK) && <i className=\"icon-arrow-right\" />}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiMessage, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { isChatPrivate } from '../../../modules/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectThreadInfo } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  threadInfo: ApiThreadInfo;\n  usersById?: Record<number, ApiUser>;\n  chatsById?: Record<number, ApiChat>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openChat'>;\n\nconst CommentButton: FC<OwnProps & StateProps & DispatchProps> = ({\n  disabled,\n  threadInfo,\n  usersById,\n  chatsById,\n  openChat,\n}) => {\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  const recentRepliers = recentReplierIds && recentReplierIds.map((peerId) => {\n    return isChatPrivate(peerId) ? usersById![peerId] : chatsById![peerId];\n  }).filter(Boolean);\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isChatPrivate(user.id) ? user as ApiUser : undefined}\n              chat={!isChatPrivate(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }) => {\n    const { threadId, chatId } = message.threadInfo!;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId) || message.threadInfo!;\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    return {\n      threadInfo,\n      usersById,\n      chatsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n  ]),\n)(CommentButton));\n","import React, {\n  FC,\n  memo,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../../global/types';\nimport {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiSticker,\n} from '../../../api/types';\nimport {\n  AudioOrigin, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectAnimatedEmoji,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectShouldAutoLoadMedia,\n  selectShouldAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n} from '../../../modules/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isChatPrivate,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji,\n  getSenderTitle,\n  getUserColorKey,\n} from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from '../../common/AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForMedia: ObserveFn;\n    observeIntersectionForAnimatedStickers: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsername?: string;\n  sender?: ApiUser | ApiChat;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  isSingleEmoji?: boolean;\n  animatedEmoji?: ApiSticker;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  shouldAutoLoadMedia?: boolean;\n  shouldAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'toggleMessageSelection' | 'clickInlineButton' | 'disableContextMenuHint'>;\n\nconst NBSP = '\\u00A0';\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>';\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\n\nconst Message: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  chatUsername,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  canReply,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  messageListType,\n  isPinnedList,\n  shouldAutoLoadMedia,\n  shouldAutoPlayMedia,\n  shouldLoopStickers,\n  toggleMessageSelection,\n  clickInlineButton,\n  disableContextMenuHint,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const { id: messageId, chatId, threadInfo } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const { forwardInfo, viaBotId } = message;\n  const asForwarded = forwardInfo && !isChatWithSelf && !isRepliesChat && !forwardInfo.isLinkedChannelPost;\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const isAlbum = Boolean(album) && album!.messages.length > 1;\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice,\n  } = getMessageContent(message);\n  const customShape = getMessageCustomShape(message);\n  const textParts = renderMessageText(message, highlight, isEmojiOnlyMessage(customShape));\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const signature = (\n    (isChannel && message.adminTitle) || (forwardInfo && !asForwarded && forwardInfo.adminTitle) || undefined\n  );\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && (!isInDocumentGroup || isLastInDocumentGroup)\n  );\n  const canForward = isChannel && !isScheduled;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !sender) ? originSender : sender;\n  const senderPeer = forwardInfo ? originSender : sender;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    if (isLocal) {\n      return;\n    }\n\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [isLocal, toggleMessageSelection, messageId, isAlbum, album]);\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    isSwiped,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isLocal,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    onContextMenu,\n    handleBeforeContextMenu,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    Boolean(isScheduled),\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n  );\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n  );\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: message.threadInfo && message.threadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n  });\n  const withCommentButton = message.threadInfo && (!isInDocumentGroup || isLastInDocumentGroup)\n    && messageListType === 'thread' && !noComments;\n  const withAppendix = contentClassName.includes('has-appendix');\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n  useLayoutEffect(() => {\n    if (!appendixRef.current) {\n      return;\n    }\n\n    appendixRef.current.innerHTML = isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN;\n  }, [isOwn, withAppendix]);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS;\n      } else {\n        width = calculateMediaDimensions(message, noAvatars).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isChatPrivate(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && !customShape && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n    const shouldInlineMeta = !webPage && !animatedEmoji && textParts;\n    const textContentClass = buildClassName(\n      'text-content',\n      shouldInlineMeta && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            size=\"small\"\n            sticker={animatedEmoji}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            isOwn={isOwn}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {!animatedEmoji && textParts && (\n          <p className={textContentClass} dir=\"auto\">\n            {textParts}\n            {shouldInlineMeta && (\n              <MessageMeta\n                message={message}\n                outgoingStatus={outgoingStatus}\n                signature={signature}\n                onClick={handleMetaClick}\n              />\n            )}\n          </p>\n        )}\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && <Invoice message={message} />}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const shouldRender = !(customShape && !viaBotId) && (\n      (withSenderName && !photo && !video) || asForwarded || viaBotId || forceSenderName\n    ) && (!isInDocumentGroup || isFirstInDocumentGroup) && !(hasReply && customShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(customShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"auto\"\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      id={`message${messageId}`}\n      className={containerClassName}\n      // @ts-ignore teact feature\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseEnter : undefined}\n      onMouseLeave={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention}\n      />\n      {!isLocal && !isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {!isLocal && isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          // @ts-ignore\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !customShape && (!isInDocumentGroup || isFirstInDocumentGroup) && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {(!isInDocumentGroup || isLastInDocumentGroup) && !(!webPage && !animatedEmoji && textParts) && (\n            <MessageMeta\n              message={message}\n              outgoingStatus={outgoingStatus}\n              signature={signature}\n              onClick={handleMetaClick}\n            />\n          )}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton message={message} disabled={noComments} />}\n          {withAppendix && <div className=\"svg-appendix\" ref={appendixRef} />}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickInlineButton} />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const { focusedMessage, forwardMessages, lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const chatUsername = chat?.username;\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = canShowSender ? selectSender(global, message) : undefined;\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectSender(global, replyMessage);\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    let isSelected: boolean;\n\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n\n    return {\n      theme: selectTheme(global),\n      chatUsername,\n      forceSenderName,\n      sender,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isFocused,\n      isForwarding,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      canReply,\n      lastSyncTime,\n      highlight,\n      isSingleEmoji: Boolean(singleEmoji),\n      animatedEmoji: singleEmoji ? selectAnimatedEmoji(global, singleEmoji) : undefined,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        !!message.groupedId && !message.isInAlbum && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isPinnedList: messageListType === 'pinned',\n      shouldAutoLoadMedia: chat ? selectShouldAutoLoadMedia(global, message, chat, sender) : undefined,\n      shouldAutoPlayMedia: selectShouldAutoPlayMedia(global, message),\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'toggleMessageSelection',\n    'clickInlineButton',\n    'disableContextMenuHint',\n  ]),\n)(Message));\n","import { RefObject } from 'react';\nimport React, { useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isLocal: boolean,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n) {\n  const { setReplyingToId } = getDispatch();\n\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n\n    if (!isLocal) {\n      handleBeforeContextMenu(e);\n    }\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode && !isLocal) {\n      selectMessage(e);\n    } else if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]')) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply]);\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode && !isLocal ? handleContextMenu : undefined,\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    isSwiped,\n  };\n}\n","import React, { useCallback } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { isChatPrivate } from '../../../../modules/helpers';\nimport { AudioOrigin, IAlbum, MediaViewerOrigin } from '../../../../types';\nimport {\n  ApiChat, ApiMessage, ApiUser, MAIN_THREAD_ID,\n} from '../../../../api/types';\nimport { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: number,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n) {\n  const {\n    openUserInfo, openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n  } = getDispatch();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    if (isChatPrivate(avatarPeer.id)) {\n      openUserInfo({ id: avatarPeer.id });\n    } else {\n      openChat({ id: avatarPeer.id });\n    }\n  }, [avatarPeer, openUserInfo, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (isChatPrivate(senderPeer.id)) {\n      openUserInfo({ id: senderPeer.id });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [senderPeer, showNotification, lang, openUserInfo, openChat]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openUserInfo({ id: botSender.id });\n  }, [botSender, openUserInfo]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId, threadId, messageId, origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId, origin: AudioOrigin.Inline });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId,\n        messageId: forwardInfo!.fromMessageId,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n  };\n}\n","import { RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact, flatten } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport { getMessageOriginalId, isActionMessage, isOwnMessage } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport { isAlbum, MessageDateGroup } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport ActionMessage from './ActionMessage';\n\ninterface OwnProps {\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  threadId: number;\n  type: MessageListType;\n  isActive: boolean;\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  openHistoryCalendar: Function;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  threadId,\n  type,\n  isActive,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n  openHistoryCalendar,\n}) => {\n  const {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isActive,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + flatten(messageGroup.senderGroups).length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (senderGroup.length === 1 && !isAlbum(senderGroup[0]) && isActionMessage(senderGroup[0])) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return flatten(senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === `message${message.previousLocalId}`) {\n          anchorIdRef.current = `message${message.id}`;\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Scheduled messages can have local IDs in the middle of the list,\n        // and keys should be ordered, so we prefix it with a date.\n        // However, this may lead to issues if server date is not synchronized with the local one.\n        const key = type !== 'scheduled' ? originalId : `${message.date}_${originalId}`;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }));\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {flatten(senderGroups)}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {flatten(dateGroups)}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import { RefObject } from 'react';\nimport { getDispatch } from '../../../lib/teact/teactn';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport { MessageListType } from '../../../global/types';\n\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport { LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SENSITIVE_AREA } from '../../../config';\nimport resetScroll from '../../../util/resetScroll';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst TOOLS_FREEZE_TIMEOUT = 100;\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isActive: boolean,\n) {\n  const { loadViewportMessages } = getDispatch();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isActive) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current!;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= 0;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] >= LOCAL_MESSAGE_ID_BASE;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      resetScroll(containerRef.current!);\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      resetScroll(containerRef.current!);\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport { selectChat } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: number;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadGreetingStickers' | 'sendMessage' | 'markMessageListRead'>;\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps & DispatchProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n  loadGreetingStickers,\n  sendMessage,\n  markMessageListRead,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const sticker = stickers?.length ? stickers[userId % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadGreetingStickers', 'sendMessage', 'markMessageListRead',\n  ]),\n\n)(ContactGreeting));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport useLang, { LangFn } from '../../hooks/useLang';\n\nimport './NoMessages.scss';\n\ntype OwnProps = {\n  chatId: number;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf, type, isGroupChatJustCreated,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiMessage, ApiRestrictionReason, MAIN_THREAD_ID,\n} from '../../api/types';\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n} from '../../modules/selectors';\nimport {\n  isChatChannel,\n  isChatPrivate,\n  isChatWithRepliesBot,\n  isChatGroup,\n} from '../../modules/helpers';\nimport { orderBy, pick } from '../../util/iteratees';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport resetScroll from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  isActive: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  lastMessage?: ApiMessage;\n  botDescription?: string;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadViewportMessages' | 'setScrollOffset' | 'openHistoryCalendar'>;\n\nconst BOTTOM_THRESHOLD = 20;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst FOCUSING_DURATION = 1000;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isActive,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  loadViewportMessages,\n  setScrollOffset,\n  lastMessage,\n  botDescription,\n  threadTopMessageId,\n  hasLinkedChat,\n  openHistoryCalendar,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useOnChange(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    if (isReady) {\n      containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n    }\n  }, [windowHeight, isReady, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds && messageIds[0] >= LOCAL_MESSAGE_ID_BASE;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current || !isReady) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools, isReady]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]: [\n    typeof messageIds, typeof isViewportNewest, typeof containerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    // During animation\n    if (!container.offsetParent) {\n      return;\n    }\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, FOCUSING_DURATION);\n    }\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current!;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To workaround that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isChatPrivate(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isChatPrivate(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botDescription ? (\n        <div className=\"empty\"><span>{renderText(lang(botDescription), ['br', 'emoji', 'links'])}</span></div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated) ? (\n        <NoMessages\n          chatId={chatId}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isActive={isActive}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n          openHistoryCalendar={openHistoryCalendar}\n        />\n      ) : (\n        <Loading color=\"white\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let botDescription: string | undefined;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botDescription = chatBot.fullInfo.botDescription || 'NoMessages';\n      } else {\n        botDescription = 'Updating bot info...';\n      }\n    }\n\n    return {\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      botDescription,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadViewportMessages',\n    'setScrollOffset',\n    'openHistoryCalendar',\n  ]),\n)(MessageList));\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useDebounce from '../../../hooks/useDebounce';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useDebounce(DEBOUNCE, false);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport { debounce } from '../util/schedulers';\n\nexport default function useDebounce(ms: number, shouldRunFirst?: boolean, shouldRunLast?: boolean) {\n  return useMemo(() => {\n    return debounce((cb) => cb(), ms, shouldRunFirst, shouldRunLast);\n  }, [ms, shouldRunFirst, shouldRunLast]);\n}\n","import React, {\n  FC, useCallback, memo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../modules/selectors';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport { pick } from '../../util/iteratees';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ScrollDownButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  messageListType?: MessageListType;\n  unreadCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusNextReply'>;\n\nconst FOCUS_MARGIN = 20;\n\nconst ScrollDownButton: FC<OwnProps & StateProps & DispatchProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  unreadCount,\n  withExtraShift,\n  focusNextReply,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    'ScrollDownButton',\n    isShown && 'revealed',\n    !canPost && 'no-composer',\n    withExtraShift && 'with-extra-shift',\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <div className=\"ScrollDownButton-inner\">\n        <Button\n          color=\"secondary\"\n          round\n          onClick={handleClick}\n          ariaLabel={lang('AccDescrPageDown')}\n        >\n          <i className=\"icon-arrow-down\" />\n        </Button>\n        {Boolean(unreadCount) && (\n          <div className=\"unread-count\">{formatIntegerCompact(unreadCount!)}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    return {\n      messageListType,\n      unreadCount: chat && threadId === MAIN_THREAD_ID && messageListType === 'thread' ? chat.unreadCount : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['focusNextReply']),\n)(ScrollDownButton));\n","import { ApiAttachment } from '../../../../api/types';\nimport { SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../../config';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n  fetchBlob,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let previewBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n\n      if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE || mimeType !== 'image/jpeg') {\n        const resizedUrl = await scaleImage(blobUrl, MAX_QUICK_IMG_SIZE / Math.max(width, height), 'image/jpeg');\n        URL.revokeObjectURL(blobUrl);\n        const newBlob = await fetchBlob(resizedUrl);\n        return buildAttachment(filename, newBlob, true, options);\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    previewBlobUrl,\n    ...options,\n  };\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","export default __webpack_public_path__ + \"c0155344d336103c2b6a0b28cc510750.js\";","// @ts-ignore\nimport encoderPath from 'file-loader!opus-recorder/dist/encoderWorker.min';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\ninterface IOpusRecorder extends Omit<MediaRecorder, 'start' | 'ondataavailable'> {\n  new(options: AnyLiteral): IOpusRecorder;\n\n  start(stream?: MediaStreamAudioSourceNode): void;\n\n  sourceNode: MediaStreamAudioSourceNode;\n\n  ondataavailable: (typedArray: Uint8Array) => void;\n}\n\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    // @ts-ignore\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nexport default () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n","import { StateHookSetter, useEffect } from '../../../../lib/teact/teact';\nimport { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nexport default (\n  insertTextAndUpdateCursor: (text: string, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const { items } = e.clipboardData;\n      const media = Array.from(items)\n        .find((item) => CLIPBOARD_ACCEPTED_TYPES.includes(item.type) && item.kind === 'file');\n      const file = media && media.getAsFile();\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n\n      e.preventDefault();\n\n      if (!file && !pastedText) {\n        return;\n      }\n\n      if (file && !editedMessage) {\n        const attachment = await buildAttachment(file.name, file, true);\n        setAttachments((attachments) => [\n          ...attachments,\n          attachment,\n        ]);\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments]);\n};\n","import { ApiFormattedText } from '../../../../api/types';\nimport { renderTextWithEntities } from '../../../common/helpers/renderMessageText';\n\nexport default function getMessageTextAsHtml(formattedText?: ApiFormattedText) {\n  const { text, entities } = formattedText || {};\n  if (!text) {\n    return '';\n  }\n\n  const result = renderTextWithEntities(\n    text,\n    entities,\n    undefined,\n    undefined,\n    true,\n  );\n\n  if (Array.isArray(result)) {\n    return result.join('');\n  }\n\n  return result;\n}\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\n\nimport { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_ID } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../helpers/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: number | undefined;\nlet currentThreadId: number | undefined;\n\nexport default (\n  draft: ApiFormattedText | undefined,\n  chatId: number,\n  threadId: number,\n  html: string,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  saveDraft: GlobalActions['saveDraft'],\n  clearDraft: GlobalActions['clearDraft'],\n) => {\n  const updateDraft = useCallback((draftChatId: number, draftThreadId: number) => {\n    if (htmlRef.current.length && !editedMessage) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(htmlRef.current!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (!draft) {\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(draft));\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId]);\n\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\nimport { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nconst tempEl = document.createElement('div');\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: number,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const text = getPlainText(html);\n  const { queryInlineBot, resetInlineBot } = getDispatch();\n  const { username, query, canShowHelp } = parseStartWithUsernameString(text);\n  const usernameLowered = username.toLowerCase();\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = inlineBots?.[usernameLowered];\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [offset, chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results?.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    closeTooltip: unmarkIsOpen,\n    loadMore,\n    username,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  return tempEl.innerText;\n}\n\nfunction parseStartWithUsernameString(text: string) {\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return { username: '', query: '', canShowHelp: false };\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n  };\n}\n","import {\n  useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotCommand } from '../../../../api/types';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport { throttle } from '../../../../util/schedulers';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\nconst RE_COMMAND = /^[\\w@]{1,32}\\s?/i;\n\nexport default function useBotCommandTooltip(\n  isAllowed: boolean,\n  html: string,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n\n  const getFilteredCommands = useCallback((filter) => {\n    if (!botCommands && !chatBotCommands) {\n      setFilteredBotCommands(undefined);\n\n      return;\n    }\n\n    runThrottled(() => {\n      const nextFilteredBotCommands = (botCommands || chatBotCommands || [])\n        .filter(({ command }) => !filter || command.includes(filter));\n      setFilteredBotCommands(\n        nextFilteredBotCommands && nextFilteredBotCommands.length ? nextFilteredBotCommands : undefined,\n      );\n    });\n  }, [botCommands, chatBotCommands]);\n\n  useEffect(() => {\n    if (!isAllowed || !html.length) {\n      unmarkIsOpen();\n      return;\n    }\n\n    const shouldShowCommands = html.startsWith('/');\n\n    if (shouldShowCommands) {\n      const filter = prepareForRegExp(html.substr(1)).match(RE_COMMAND);\n      getFilteredCommands(filter ? filter[0] : '');\n    } else {\n      unmarkIsOpen();\n    }\n  }, [getFilteredCommands, html, isAllowed, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (filteredBotCommands && filteredBotCommands.length) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [filteredBotCommands, markIsOpen, unmarkIsOpen]);\n\n  return {\n    isOpen,\n    close: unmarkIsOpen,\n    filteredBotCommands,\n  };\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import React, {\n  FC, useRef, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Button, { OwnProps as ButtonProps } from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={IS_TOUCH_ENV ? onActivate : undefined}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AttachMenu = useModuleLoader(Bundles.Extra, 'AttachMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachMenu ? <AttachMenu {...props} /> : undefined;\n};\n\nexport default memo(AttachMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './CustomSendMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomSendMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomSend = useModuleLoader(Bundles.Extra, 'CustomSendMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomSend ? <CustomSend {...props} /> : undefined;\n};\n\nexport default memo(CustomSendMenuAsync);\n","import React, { FC } from '../../../lib/teact/teact';\nimport { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default StickerTooltipAsync;\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../modules/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('clickInlineButton')>;\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen, message, onClose, clickInlineButton,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n  const [forceOpen, markForceOpen, unmarkForceOpen] = useFlag(true);\n\n  const handleClose = () => {\n    unmarkForceOpen();\n    onClose();\n  };\n\n  useEffect(() => {\n    markForceOpen();\n  }, [markForceOpen, message]);\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen || forceOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={handleClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={handleClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'NOT_SUPPORTED'}\n                onClick={() => clickInlineButton({ button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'clickInlineButton',\n  ]),\n)(BotKeyboardMenu));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n} from '../../../modules/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { pick } from '../../../util/iteratees';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport { isChatPrivate } from '../../../modules/helpers';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setReplyingToId' | 'setEditingId' | 'focusMessage' | 'exitForwardMode'>;\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<StateProps & DispatchProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  setReplyingToId,\n  setEditingId,\n  focusMessage,\n  exitForwardMode,\n}) => {\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n  }, [replyingToId, editingId, forwardedMessagesCount, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, message]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? `${forwardedMessagesCount} forwarded messages`\n    : undefined;\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Cancel replying\" onClick={clearEmbedded}>\n          <i className=\"icon-close\" />\n        </Button>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={message}\n          sender={sender}\n          customText={customText}\n          title={editingId ? 'Edit Message' : undefined}\n          onClick={handleMessageClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      currentUserId,\n      forwardMessages: { fromChatId, toChatId, messageIds: forwardMessageIds },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n\n    let message;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = selectChatMessage(global, fromChatId!, forwardMessageIds![0]);\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = chatId === currentUserId;\n\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      sender = isChatPrivate(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n    }\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setReplyingToId',\n    'setEditingId',\n    'focusMessage',\n    'exitForwardMode',\n  ]),\n)(ComposerEmbeddedMessage));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import React, {\n  FC, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiMessage, ApiMessageEntityTypes, ApiWebPage } from '../../../api/types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n};\ntype DispatchProps = Pick<GlobalActions, 'loadWebPagePreview' | 'clearWebPagePreview' | 'toggleMessageWebPage'>;\n\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  loadWebPagePreview,\n  clearWebPagePreview,\n  toggleMessageWebPage,\n}) => {\n  const link = useMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities && entities.find(({ type }) => type === ApiMessageEntityTypes.TextUrl);\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  const handleClearWebpagePreview = () => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  };\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Clear Webpage Preview\" onClick={handleClearWebpagePreview}>\n          <i className=\"icon-close\" />\n        </Button>\n        <WebPage message={messageStub} inPreview />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadWebPagePreview', 'clearWebPagePreview', 'toggleMessageWebPage',\n  ]),\n)(WebPagePreview));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './CalendarModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CalendarModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CalendarModal = useModuleLoader(Bundles.Extra, 'CalendarModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CalendarModal ? <CalendarModal {...props} /> : undefined;\n};\n\nexport default memo(CalendarModalAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState, MessageListType } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n  ApiBotCommand,\n} from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, EDITABLE_INPUT_ID, REPLIES_USER_ID, SCHEDULED_WHEN_ONLINE,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatUser,\n  selectChatMessage,\n} from '../../../modules/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatPrivate,\n  isChatAdmin,\n} from '../../../modules/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration, getDayStartAt } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport insertHtmlInSelection from '../../../util/insertHtmlInSelection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu.async';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport Portal from '../../ui/Portal';\nimport CalendarModal from '../../common/CalendarModal.async';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  editingMessage?: ApiMessage;\n  chat?: ApiChat;\n  draft?: ApiFormattedText;\n  isChatWithBot?: boolean;\n  isChatWithSelf?: boolean;\n  isRightColumnShown?: boolean;\n  isSelectModeActive?: boolean;\n  isForwarding?: boolean;\n  isPollModalOpen?: boolean;\n  botKeyboardMessageId?: number;\n  botKeyboardPlaceholder?: string;\n  withScheduledButton?: boolean;\n  shouldSchedule?: boolean;\n  canScheduleUntilOnline?: boolean;\n  stickersForEmoji?: ApiSticker[];\n  groupChatMembers?: ApiChatMember[];\n  currentUserId?: number;\n  usersById?: Record<number, ApiUser>;\n  recentEmojis: string[];\n  lastSyncTime?: number;\n  contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n  shouldSuggestStickers?: boolean;\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  serverTimeOffset: number;\n  topInlineBotIds?: number[];\n  isInlineBotLoading: boolean;\n  inlineBots?: Record<string, false | InlineBotSettings>;\n  botCommands?: ApiBotCommand[] | false;\n  chatBotCommands?: ApiBotCommand[];\n} & Pick<GlobalState, 'connectionState'>;\n\ntype DispatchProps = Pick<GlobalActions, (\n  'sendMessage' | 'editMessage' | 'saveDraft' | 'forwardMessages' |\n  'clearDraft' | 'showDialog' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'openPollModal' | 'closePollModal' | 'loadScheduledHistory' | 'openChat' |\n  'addRecentEmoji' | 'sendInlineBotResult'\n)>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n}\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst CAPTION_MAX_LENGTH = 1024;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps & DispatchProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  isPollModalOpen,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  usersById,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  baseEmojiKeywords,\n  emojiKeywords,\n  serverTimeOffset,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendMessage,\n  editMessage,\n  saveDraft,\n  clearDraft,\n  showDialog,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  forwardMessages,\n  openPollModal,\n  closePollModal,\n  loadScheduledHistory,\n  openChat,\n  addRecentEmoji,\n  sendInlineBotResult,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n  const [\n    scheduledMessageArgs, setScheduledMessageArgs,\n  ] = useState<GlobalState['messages']['contentToBeScheduled'] | undefined>();\n  const { width: windowWidth } = windowSize.get();\n\n  // Cache for frequently updated state\n  const htmlRef = useRef<string>(html);\n  useEffect(() => {\n    htmlRef.current = html;\n  }, [html]);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      setScheduledMessageArgs(contentToBeScheduled);\n      openCalendar();\n    }\n  }, [contentToBeScheduled, openCalendar]);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  const mainButtonState = editingMessage\n    ? MainButtonState.Edit\n    : !IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding\n      ? MainButtonState.Send\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    html,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n    usersById,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean((botCommands && botCommands.length) || (chatBotCommands && chatBotCommands.length)),\n    html,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const allowedAttachmentOptions = useMemo(() => {\n    return getAllowedAttachmentOptions(chat, isChatWithBot);\n  }, [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    const messageInput = document.getElementById(inputId)!;\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, []);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, []);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments([]);\n    closeStickerTooltip();\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @perf\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeCalendar, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu]);\n\n  // Handle chat change (ref is used to avoid redundant effect calls)\n  const stopRecordingVoiceRef = useRef<typeof stopRecordingVoice>();\n  stopRecordingVoiceRef.current = stopRecordingVoice;\n  useEffect(() => {\n    return () => {\n      stopRecordingVoiceRef.current!();\n      resetComposer();\n    };\n  }, [chatId, resetComposer, stopRecordingVoiceRef]);\n\n  const handleEditComplete = useEditing(htmlRef, setHtml, editingMessage, resetComposer, openDeleteModal, editMessage);\n  useDraft(draft, chatId, threadId, html, htmlRef, setHtml, editingMessage, saveDraft, clearDraft);\n  useClipboardPaste(insertTextAndUpdateCursor, setAttachments, editingMessage);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, []);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments([]);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    const maxLength = currentAttachments.length ? CAPTION_MAX_LENGTH : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = getServerTime(serverTimeOffset);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n    if (isForwarding) {\n      forwardMessages();\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime(serverTimeOffset);\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, clearDraft, chatId, serverTimeOffset,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang,\n  ]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleActivateSymbolMenu = useCallback(() => {\n    closeBotCommandMenu();\n    openSymbolMenu();\n  }, [closeBotCommandMenu, openSymbolMenu]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, shouldPreserveInput = false) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ sticker });\n      openCalendar();\n    } else {\n      sendMessage({ sticker });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ gif });\n      openCalendar();\n    } else {\n      sendMessage({ gif });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleInlineBotSelect = useCallback((inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    sendInlineBotResult({\n      id: inlineResult.id,\n      queryId: inlineResult.queryId,\n    });\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, connectionState, resetComposer, sendInlineBotResult]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ poll });\n      closePollModal();\n      openCalendar();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, openCalendar, sendMessage, shouldSchedule]);\n\n  const handleSilentSend = useCallback(() => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ isSilent: true });\n      openCalendar();\n    } else {\n      void handleSend(true);\n    }\n  }, [handleSend, openCalendar, shouldSchedule]);\n\n  const handleMessageSchedule = useCallback((date: Date, isWhenOnline = false) => {\n    const { isSilent, ...restArgs } = scheduledMessageArgs || {};\n\n    // Scheduled time can not be less than 10 seconds in future\n    const scheduledAt = Math.round(Math.max(date.getTime(), Date.now() + 60 * 1000) / 1000)\n      + (isWhenOnline ? 0 : serverTimeOffset);\n\n    if (!scheduledMessageArgs || Object.keys(restArgs).length === 0) {\n      void handleSend(!!isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...scheduledMessageArgs,\n        scheduledAt,\n      });\n      requestAnimationFrame(() => {\n        resetComposer();\n      });\n    }\n    closeCalendar();\n  }, [closeCalendar, handleSend, resetComposer, scheduledMessageArgs, sendMessage, serverTimeOffset]);\n\n  const handleMessageScheduleUntilOnline = useCallback(() => {\n    handleMessageSchedule(new Date(SCHEDULED_WHEN_ONLINE * 1000), true);\n  }, [handleMessageSchedule]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n  }, [closeCalendar]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu, closeBotCommandMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        if (shouldSchedule) {\n          if (activeVoiceRecording) {\n            pauseRecordingVoice();\n          }\n          openCalendar();\n        } else {\n          void handleSend();\n        }\n        break;\n      case MainButtonState.Record:\n        void startRecordingVoice();\n        break;\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, shouldSchedule, startRecordingVoice, handleEditComplete,\n    activeVoiceRecording, openCalendar, pauseRecordingVoice, handleSend,\n  ]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && !allowedAttachmentOptions.canAttachMedia;\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = areVoiceMessagesNotAllowed\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : (shouldSchedule ? openCalendar : handleSend);\n\n  return (\n    <div className={className}>\n      {allowedAttachmentOptions.canAttachMedia && isReady && (\n        <Portal containerId=\"#middle-column-portals\">\n          <DropArea\n            isOpen={dropAreaState !== DropAreaState.None}\n            withQuick={[dropAreaState, prevDropAreaState].includes(DropAreaState.QuickFile)}\n            onHide={onDropHide}\n            onFileSelect={handleFileSelect}\n          />\n        </Portal>\n      )}\n      <AttachmentModal\n        attachments={attachments}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        usersById={usersById}\n        recentEmojis={recentEmojis}\n        isReady={isReady}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        addRecentEmoji={addRecentEmoji}\n        onSend={shouldSchedule ? openCalendar : handleSend}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={Boolean(isPollModalOpen)}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n        usersById={usersById}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        allowedAttachmentOptions={allowedAttachmentOptions}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!allowedAttachmentOptions.canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {isChatWithBot && botCommands !== false && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={isSymbolMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={handleActivateSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            shouldSetFocus={!attachments.length}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {!activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isAttachMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openAttachMenu}\n              ariaLabel=\"Add an attachment\"\n            >\n              <i className=\"icon-attach\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <StickerTooltip\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <AttachMenu\n            isOpen={isAttachMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            onClose={closeAttachMenu}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <SymbolMenu\n            isOpen={isSymbolMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSilentSend={!isChatWithSelf ? handleSilentSend : undefined}\n          onScheduleSend={!shouldSchedule ? openCalendar : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={scheduledDefaultDate.getTime()}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        secondButtonLabel={canScheduleUntilOnline ? lang('Schedule.SendWhenOnline') : undefined}\n        onClose={handleCloseCalendar}\n        onSubmit={handleMessageSchedule}\n        onSecondButtonClick={canScheduleUntilOnline ? handleMessageScheduleUntilOnline : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatUser = chat && selectChatUser(global, chat);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      canScheduleUntilOnline: (\n        !isChatWithSelf && !isChatWithBot\n        && (chat && chatUser && isChatPrivate(chatId) && chatUser.status && Boolean(chatUser.status.wasOnline))\n      ),\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      isPollModalOpen: global.isPollModalOpen,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId: global.currentUserId,\n      usersById: global.users.byId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      shouldSuggestStickers: global.settings.byKey.shouldSuggestStickers,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      serverTimeOffset: global.serverTimeOffset,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n      chatBotCommands: chat && chat.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot && chatBot.fullInfo ? (chatBot.fullInfo.botCommands || false) : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'sendMessage',\n    'editMessage',\n    'saveDraft',\n    'clearDraft',\n    'showDialog',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'forwardMessages',\n    'openPollModal',\n    'closePollModal',\n    'loadScheduledHistory',\n    'openChat',\n    'addRecentEmoji',\n    'sendInlineBotResult',\n  ]),\n)(Composer));\n","import { useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const cleanHtml = useMemo(() => prepareForRegExp(html).trim(), [html]);\n  const { loadStickersForEmoji, clearStickersForEmoji } = getDispatch();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({ emoji: cleanHtml });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","export default function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection?.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n    } else {\n      range.collapse(false);\n    }\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../../config';\nimport parseMessageInput from '../helpers/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../modules/helpers';\n\nexport default (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: () => void,\n  openDeleteModal: () => void,\n  editMessage: GlobalActions['editMessage'],\n) => {\n  // TODO useOnChange\n  // Handle editing message\n  useEffect(() => {\n    if (!editedMessage) {\n      setHtml('');\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(editedMessage.content.text));\n\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [editedMessage, setHtml]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer]);\n\n  return handleEditComplete;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import React, {\n  FC, useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChatBannedRights, MAIN_THREAD_ID } from '../../api/types';\nimport { GlobalActions, MessageListType, MessageList as GlobalMessageList } from '../../global/types';\nimport { ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectTheme,\n} from '../../modules/selectors';\nimport { getCanPostInChat, getMessageSendingRestrictionReason, isChatPrivate } from '../../modules/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { createMessageHash } from '../../util/routing';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport ScrollDownButton from './ScrollDownButton';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\n\nimport './MiddleColumn.scss';\n\ntype StateProps = {\n  chatId?: number;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioMessage?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  animationLevel?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  messageLists?: GlobalMessageList[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'unpinAllMessages' | 'loadUser' | 'closeLocalTextSearch' | 'exitMessageSelectMode' |\n  'closePaymentModal' | 'clearReceipt'\n)>;\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  messageLists,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioMessage,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  openChat,\n  unpinAllMessages,\n  loadUser,\n  closeLocalTextSearch,\n  exitMessageSelectMode,\n  closePaymentModal,\n  clearReceipt,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT || animationLevel === ANIMATION_LEVEL_MIN);\n\n  const hasTools = hasPinnedOrAudioMessage && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION);\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  useEffect(() => {\n    if (animationLevel === ANIMATION_LEVEL_MIN) {\n      setIsReady(true);\n    }\n  }, [animationLevel]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (window.visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  const handleTransitionEnd = (e: React.TransitionEvent<HTMLDivElement>) => {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  };\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openChat({ id: chatId });\n  }, [unpinAllMessages, openChat, closeUnpinModal, chatId]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    customBackground && 'custom-bg-image',\n    backgroundColor && 'custom-bg-color',\n    customBackground && isBackgroundBlurred && 'blurred',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  const closeChat = () => {\n    openChat({ id: undefined }, true);\n  };\n\n  useHistoryBack(renderingChatId && renderingThreadId,\n    closeChat, undefined, undefined, undefined,\n    messageLists ? messageLists.map(createMessageHash) : []);\n\n  useHistoryBack(isMobileSearchActive, closeLocalTextSearch);\n  useHistoryBack(isSelectModeActive, exitMessageSelectMode);\n\n  const isMessagingDisabled = Boolean(!isPinnedMessageList && !renderingCanPost && messageSendingRestrictionReason);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleTransitionEnd}\n      // @ts-ignore teact-feature\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        id=\"middle-column-bg\"\n        // @ts-ignore\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n            >\n              {(isActive) => (\n                <>\n                  <MessageList\n                    key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    type={renderingMessageListType}\n                    canPost={renderingCanPost}\n                    hasTools={renderingHasTools}\n                    onFabToggle={setIsFabShown}\n                    onNotchToggle={setIsNotchShown}\n                    isReady={isReady}\n                    isActive={isActive}\n                  />\n                  <div className={footerClassName}>\n                    {renderingCanPost && (\n                      <Composer\n                        chatId={renderingChatId}\n                        threadId={renderingThreadId}\n                        messageListType={renderingMessageListType}\n                        dropAreaState={dropAreaState}\n                        onDropHide={handleHideDropArea}\n                        isReady={isReady}\n                      />\n                    )}\n                    {isPinnedMessageList && (\n                      <div className=\"unpin-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          color=\"secondary\"\n                          className=\"unpin-all-button\"\n                          onClick={handleOpenUnpinModal}\n                        >\n                          <i className=\"icon-unpin\" />\n                          <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                        </Button>\n                      </div>\n                    )}\n                    {isMessagingDisabled && (\n                      <div className={messagingDisabledClassName}>\n                        <div className=\"messaging-disabled-inner\">\n                          <span>\n                            {messageSendingRestrictionReason}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n                    <MessageSelectToolbar\n                      messageListType={renderingMessageListType}\n                      isActive={isSelectModeActive}\n                      canPost={renderingCanPost}\n                    />\n                    <PaymentModal\n                      isOpen={Boolean(isPaymentModalOpen)}\n                      onClose={closePaymentModal}\n                    />\n                    <ReceiptModal\n                      isOpen={Boolean(isReceiptModalOpen)}\n                      onClose={clearReceipt}\n                    />\n                  </div>\n                </>\n              )}\n            </Transition>\n\n            <ScrollDownButton\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={isMessagingDisabled || isSelectModeActive || isPinnedMessageList}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const { messageLists } = global.messages;\n    const currentMessageList = selectCurrentMessageList(global);\n    const { isLeftColumnShown, chats: { listIds } } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate: isChatPrivate(chatId),\n      canPost: !isPinnedMessageList && (!chat || canPost) && !isBotNotStarted,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioMessage: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      messageLists,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat', 'unpinAllMessages', 'loadUser', 'closeLocalTextSearch', 'exitMessageSelectMode',\n    'closePaymentModal', 'clearReceipt',\n  ]),\n)(MiddleColumn));\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nexport default (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n} from '../../modules/selectors';\nimport { isChatAdmin, isChatChannel, isChatPrivate } from '../../modules/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport './RightHeader.scss';\nimport { getDayStartAt } from '../../util/dateFormat';\n\ntype OwnProps = {\n  chatId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isAddingChatMembers?: boolean;\n  shouldSkipAnimation?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canManage?: boolean;\n  isChannel?: boolean;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalTextSearchQuery' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'searchTextMessagesLocal' | 'toggleManagement' | 'openHistoryCalendar'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupMembers,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n}\n\nconst RightHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canManage,\n  isChannel,\n  onClose,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  setLocalTextSearchQuery,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  searchTextMessagesLocal,\n  toggleManagement,\n  openHistoryCalendar,\n  shouldSkipAnimation,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const backButtonRef = useRef<HTMLDivElement>(null);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : undefined // Never reached\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang('GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipAnimation) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div ref={backButtonRef} className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipAnimation) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isChatPrivate(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n\n    return {\n      canManage,\n      isChannel,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalTextSearchQuery',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'searchTextMessagesLocal',\n    'toggleManagement',\n    'openHistoryCalendar',\n  ]),\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiChatMember, ApiMessage, ApiUser } from '../../../api/types';\nimport { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../modules/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  usersById?: Record<number, ApiUser>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: number,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(groupChatMembers.map(({ userId }) => userId), usersById, undefined, serverTimeOffset);\n  }, [groupChatMembers, serverTimeOffset, usersById]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForMembers(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  let viewportIds: number[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForMembers(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  memberIds?: number[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    memberIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !memberIds || viewportIds[0] === memberIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      ).reverse();\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport { selectCurrentChat, selectUser } from '../../modules/selectors';\nimport { getUserFirstOrLastName } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  contactName?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteChatMember'>;\n\nconst DeleteMemberModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  chat,\n  userId,\n  contactName,\n  onClose,\n  deleteChatMember,\n}) => {\n  const lang = useLang();\n\n  const handleDeleteChatMember = useCallback(() => {\n    deleteChatMember({ chatId: chat!.id, userId });\n    onClose();\n  }, [chat, deleteChatMember, onClose, userId]);\n\n  if (!chat || !userId) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeleteChatMember}\n      className=\"delete\"\n      title={lang('GroupRemoved.Remove')}\n    >\n      <p>{renderText(lang('PeerInfo.Confirm.RemovePeer', contactName))}</p>\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteChatMember}>\n        {lang('lng_box_remove')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const chat = selectCurrentChat(global);\n    const user = userId && selectUser(global, userId);\n    const contactName = user ? getUserFirstOrLastName(user) : undefined;\n\n    return {\n      chat,\n      contactName,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['deleteChatMember']),\n)(DeleteMemberModal));\n","import React, {\n  FC, useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiMessage,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID, ApiChat,\n} from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport {\n  NewChatMembersProgress, ISettings, MediaViewerOrigin, ProfileState, ProfileTabType, SharedMediaType, AudioOrigin,\n} from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isChatPrivate,\n} from '../../modules/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: number;\n  userId?: number;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: number;\n  resolvedUserId?: number;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalMediaSearchType' | 'loadMoreMembers' | 'searchMediaMessagesLocal' | 'openMediaViewer' |\n  'openAudioPlayer' | 'openUserInfo' | 'focusMessage' | 'loadProfilePhotos' | 'setNewChatMembersDialogState'\n)>;\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n  { type: 'voice', title: 'SharedVoiceTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\n\nconst Profile: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  members,\n  usersById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  setLocalMediaSearchType,\n  loadMoreMembers,\n  searchMediaMessagesLocal,\n  openMediaViewer,\n  openAudioPlayer,\n  openUserInfo,\n  focusMessage,\n  loadProfilePhotos,\n  setNewChatMembersDialogState,\n  serverTimeOffset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<number | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n  ]), [hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown, loadMoreMembers, searchMediaMessagesLocal, tabType, mediaSearchType, members,\n    usersById, chatMessages, foundIds, chatId, lastSyncTime, serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId, origin: AudioOrigin.SharedMedia });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContents = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function getMemberContextAction(id: number) {\n    return id === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(id);\n      },\n    }];\n  }\n\n  function renderSharedMedia() {\n    if (!viewportIds || !canRenderContents || !chatMessages) {\n      // This is just a single-frame delay, so we do not show spinner\n      const noSpinner = isFirstTab && viewportIds && !canRenderContents;\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && <Spinner />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              senderTitle={getSenderName(lang, chatMessages[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          viewportIds!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContents ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContents ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-reversed' : 'slide'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderSharedMedia}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: number, resolvedUserId?: number) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > div.active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, userId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const chatMessages = selectChatMessages(global, userId || chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat?.fullInfo?.members;\n    const areMembersHidden = hasMembersTab && chat && chat.fullInfo && !chat.fullInfo.canViewMembers;\n    const canAddMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    let resolvedUserId;\n    if (userId) {\n      resolvedUserId = userId;\n    } else if (isChatPrivate(chatId)) {\n      resolvedUserId = chatId;\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n      usersById,\n      chatsById,\n      ...(hasMembersTab && members && { members }),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalMediaSearchType',\n    'loadMoreMembers',\n    'searchMediaMessagesLocal',\n    'openMediaViewer',\n    'openAudioPlayer',\n    'openUserInfo',\n    'focusMessage',\n    'loadProfilePhotos',\n    'setNewChatMembersDialogState',\n  ]),\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nexport default () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import React, {\n  FC, useCallback, useMemo, memo, useState, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiChat, ApiChatMember, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { pick, unique } from '../../util/iteratees';\nimport { selectChat } from '../../modules/selectors';\nimport searchWords from '../../util/searchWords';\nimport {\n  getUserFullName, isChatChannel, isUserBot, sortChatIds,\n} from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: number;\n  isActive: boolean;\n  onNextStep: (memberIds: number[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  connectionState?: ApiUpdateConnectionStateType;\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: number;\n  usersById: Record<number, ApiUser>;\n  chatsById: Record<number, ApiChat>;\n  localContactIds?: number[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: number[];\n  globalUserIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'setUserSearchQuery'>;\n\nconst AddChatMembers: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  connectionState,\n  members,\n  onNextStep,\n  currentUserId,\n  usersById,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  setUserSearchQuery,\n  onClose,\n  isActive,\n  loadContactList,\n}) => {\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<number[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useEffect(() => {\n    if (isActive && connectionState === 'connectionStateReady') {\n      loadContactList();\n    }\n  }, [connectionState, isActive, loadContactList]);\n\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = localContactIds\n      ? sortChatIds(localContactIds.filter((id) => id !== currentUserId), chatsById)\n      : [];\n\n    if (!searchQuery) {\n      return contactIds.filter((id) => !memberIds.includes(id));\n    }\n\n    const foundContactIds = contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, searchQuery);\n    });\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return !memberIds.includes(contactId)\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup));\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds,\n    currentUserId, usersById, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress, connectionState } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      usersById,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n      connectionState,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'setUserSearchQuery']),\n)(AddChatMembers));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../modules/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: number;\n  threadId?: number;\n  currentProfileUserId?: number;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'toggleChatInfo' | 'toggleManagement' | 'openUserInfo' | 'setNewChatMembersDialogState' |\n  'closeLocalTextSearch' | 'closePollResults' | 'addChatMembers' |\n  'setStickerSearchQuery' | 'setGifSearchQuery'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps & DispatchProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  currentProfileUserId,\n  isChatSelected,\n  toggleChatInfo,\n  toggleManagement,\n  openUserInfo,\n  closeLocalTextSearch,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  closePollResults,\n  addChatMembers,\n  setNewChatMembersDialogState,\n  shouldSkipHistoryAnimations,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<number | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo || contentKey === RightColumnContent.UserInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, true);\n        break;\n      case RightColumnContent.UserInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        openUserInfo({ id: undefined }, true);\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, openUserInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: number[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isOpen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevContentKey, prevChatId]) => {\n    if (\n      (prevContentKey === RightColumnContent.ChatInfo && contentKey === RightColumnContent.UserInfo)\n      || (prevContentKey === RightColumnContent.UserInfo && contentKey === RightColumnContent.ChatInfo)\n      || (prevChatId !== chatId)\n    ) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [contentKey, chatId]);\n\n  useHistoryBack(isChatSelected && (contentKey === RightColumnContent.ChatInfo\n    || contentKey === RightColumnContent.UserInfo || contentKey === RightColumnContent.Management\n    || contentKey === RightColumnContent.AddingMembers),\n  () => close(false), toggleChatInfo);\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            chatId={chatId!}\n            onNextStep={handleAppendingChatMembers}\n            isActive={isOpen && isActive}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n      case RightColumnContent.UserInfo:\n        return (\n          <Profile\n            key={currentProfileUserId || chatId!}\n            chatId={chatId!}\n            userId={currentProfileUserId}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            isActive={isOpen && isActive}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          shouldSkipAnimation={shouldSkipTransition || shouldSkipHistoryAnimations}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={RightColumnContent.ChatInfo}\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      currentProfileUserId: global.users.selectedId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n    'toggleChatInfo',\n    'toggleManagement',\n    'closeLocalTextSearch',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'closePollResults',\n    'addChatMembers',\n    'setNewChatMembersDialogState',\n  ]),\n)(RightColumn));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './ForwardPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardPicker = useModuleLoader(Bundles.Extra, 'ForwardPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardPicker ? <ForwardPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardPickerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import React, {\n  FC, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { AudioOrigin, LangCode } from '../../types';\nimport { GlobalActions } from '../../global/types';\nimport { ApiMessage } from '../../api/types';\n\nimport '../../modules/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectChatMessage,\n  selectCountNotMutedUnread,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport buildClassName from '../../util/buildClassName';\nimport { fastRaf } from '../../util/schedulers';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport { processDeepLink } from '../../util/deeplink';\nimport { LOCATION_HASH } from '../../hooks/useHistoryBack';\n\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardPicker from './ForwardPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  animationLevel: number;\n  lastSyncTime?: number;\n  isLeftColumnShown: boolean;\n  isRightColumnShown: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  audioOrigin?: AudioOrigin;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  language?: LangCode;\n  openedStickerSetShortName?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadAnimatedEmojis' | 'loadNotificationSettings' | 'loadNotificationExceptions' | 'updateIsOnline' |\n  'loadTopInlineBots' | 'loadEmojiKeywords' | 'openStickerSetShortName' | 'loadCountryList'\n)>;\n\nconst NOTIFICATION_INTERVAL = 1000;\n\nlet notificationInterval: number | undefined;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps & DispatchProps> = ({\n  lastSyncTime,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  animationLevel,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  audioOrigin,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  language,\n  openedStickerSetShortName,\n  loadAnimatedEmojis,\n  loadNotificationSettings,\n  loadNotificationExceptions,\n  updateIsOnline,\n  loadTopInlineBots,\n  loadEmojiKeywords,\n  loadCountryList,\n  openStickerSetShortName,\n}) => {\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadNotificationExceptions, loadNotificationSettings, updateIsOnline,\n    loadTopInlineBots, loadEmojiKeywords, loadCountryList, language,\n  ]);\n\n  useEffect(() => {\n    if (lastSyncTime && LOCATION_HASH.startsWith('#?tgaddr=')) {\n      processDeepLink(decodeURIComponent(LOCATION_HASH.substr('#?tgaddr='.length)));\n    }\n  }, [lastSyncTime]);\n\n  const {\n    transitionClassNames: middleColumnTransitionClassNames,\n  } = useShowTransition(!isLeftColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const {\n    transitionClassNames: rightColumnTransitionClassNames,\n  } = useShowTransition(isRightColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const className = buildClassName(\n    middleColumnTransitionClassNames.replace(/([\\w-]+)/g, 'middle-column-$1'),\n    rightColumnTransitionClassNames.replace(/([\\w-]+)/g, 'right-column-$1'),\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  // Dispatch heavy transition event when opening middle column\n  useOnChange(([prevIsLeftColumnShown]) => {\n    if (prevIsLeftColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, dispatchHeavyAnimationEnd);\n  }, [isLeftColumnShown]);\n\n  // Dispatch heavy transition event and add body class when opening right column\n  useOnChange(([prevIsRightColumnShown]) => {\n    if (prevIsRightColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    fastRaf(() => {\n      document.body.classList.add('animating-right-column');\n    });\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n\n      fastRaf(() => {\n        document.body.classList.remove('animating-right-column');\n      });\n    });\n  }, [isRightColumnShown]);\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = selectCountNotMutedUnread(getGlobal());\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = selectCountNotMutedUnread(getGlobal()) - initialUnread;\n        if (newUnread > 0) {\n          updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n          updateIcon(true);\n        }\n      } else {\n        updatePageTitle(PAGE_TITLE);\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    openStickerSetShortName({ stickerSetShortName: undefined });\n  }, [openStickerSetShortName]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  return (\n    <div id=\"Main\" className={className} onDrop={stopEvent} onDragOver={stopEvent}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardPicker isOpen={isForwardModalOpen} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} origin={audioOrigin} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId: audioChatId, messageId: audioMessageId, origin } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      animationLevel: global.settings.byKey.animationLevel,\n      lastSyncTime: global.lastSyncTime,\n      isLeftColumnShown: global.isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      audioOrigin: origin,\n      safeLinkModalUrl: global.safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      language: global.settings.byKey.language,\n      openedStickerSetShortName: global.openedStickerSetShortName,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadAnimatedEmojis', 'loadNotificationSettings', 'loadNotificationExceptions', 'updateIsOnline',\n    'loadTopInlineBots', 'loadEmojiKeywords', 'openStickerSetShortName', 'loadCountryList',\n  ]),\n)(Main));\n","import { getDispatch, getGlobal } from '../lib/teact/teactn';\n\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nif (!getGlobal().connectionState) {\n  getDispatch().initApi();\n}\n"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addReducer","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","type","shouldReplaceHistory","currentMessageList","replaceThreadParam","exitMessageSelectMode","messages","contentToBeScheduled","forwardMessages","toChatId","setGlobal","updateCurrentMessageList","isChatInfoShown","openChat","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","scrollOffset","messageId","paramName","chatMessages","selectChatMessages","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","selectAllowedMessageActions","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","MAIN_THREAD_ID","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","avatarOwnerId","profilePhotoIndex","origin","mediaViewer","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","newGlobal","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","messageListType","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","messageIds","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","closeMediaViewer","selectedMessages","openForwardMenu","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","message","IS_TOUCH_ENV","isPollModalOpen","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","filter","unshift","content","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateSelectedUserId","updateUserSearch","globalUserIds","localUserIds","management","byChatId","isActive","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","messageLists","action","emoji","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","push","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","payment","isPaymentModalOpen","clearPayment","closeInvoice","error","processDeepLink","protocol","searchParams","pathname","URL","openChatByInvite","openChatByUsername","openStickerSetShortName","getDispatch","method","replace","params","forEach","value","key","domain","post","comment","username","commentId","channel","invite","set","stickerSetShortName","runThrottledForLoadChats","throttle","cb","runThrottledForLoadTopChats","runDebouncedForLoadFullChat","debounce","async","loadChats","listType","offsetDate","result","callApi","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","orderedPinnedIds","serverTimeOffset","chatIds","shift","addUsers","buildCollectionByKey","users","updateChats","updateChatListIds","updateChatListSecondaryInfo","draftsById","map","replyingToById","isFullyLoaded","loadFullChat","fullInfo","updateChat","fetchChatByUsername","localChat","selectChatByUsername","isMin","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","byId","listIds","active","currentChatId","pinnedChats","otherChats","prepareChatList","chatToPreload","find","currentUserId","hasUnreadMark","toggleChatUnread","requestThreadInfoUpdate","isChatSummaryOnly","requestChatUpdate","user","selectUser","selectThreadTopMessageId","chatFullInfo","linkedChatId","selectSupportChat","langCode","usernamePostfix","LOCALIZED_TIPS","toUpperCase","TIPS_USERNAME","oldestChat","selectIsChatPinned","sort","chat1","chat2","date","currentGlobal","force","isMuted","title","about","photo","memberIds","progress","ChatCreationProgress","createdChannel","channelId","accessHash","createChannel","userId","activeChat","activeChannel","createdChat","createGroupChat","folderId","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","isChatArchived","chatFolders","loadChatFolders","recommendedChatFolders","recommended","loadRecommendedChatFolders","idsToRemove","idsToAdd","includedId","concat","emoticon","maxId","recommendedId","description","newFolder","createChatFolder","Math","max","apply","deleteChatFolder","unreadCount","stickersMatch","RE_TME_ADDSTICKERS_LINK","match","RE_TG_LINK","RE_TME_INVITE_LINK","RE_TME_LINK","chatOrChannelPostId","discussionChatId","openCommentsByUsername","channelPostId","openPreviousChat","isEnabled","isChatBasicGroup","bannedRights","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembers","isDismissed","updateManagementProgress","ManagementProgress","Promise","all","groups","addedById","reduce","group","addChats","forDiscussionIds","fullChat","isPreHistoryHidden","activeChatFolder","offset","setNewChatMembersDialogState","NewChatMembersProgress","uploadProgressCallbacks","Map","runDebouncedForMarkRead","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","selectThreadOriginChat","threadInfos","addChatMessagesById","updateOutlyingIds","updateListedIds","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","progressCallback","attachment","messageLocalId","has","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","delete","isRestricted","resolve","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","replyMessage","selectChatMessage","updateChatMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","scheduledAt","clearWebPagePreview","noWebPage","selectNoWebPage","isSingle","attachments","isGrouped","restParams","text","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","Date","now","selectEditingMessage","setEditingId","get","previousLocalId","cancelApiProgress","apiUpdate","draft","replyToMsgId","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","reason","peer","minId","selectFirstUnreadId","readCount","count","l","countSortedIds","lastReadInboxMessageId","webPagePreview","loadWebPagePreview","options","option","shouldResetVoters","v","a","offsets","nextOffset","loadPollOptionResults","fromChat","toChat","b","scheduledMessages","historyHash","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","loadPinnedMessages","searchThrottled","searchGifs","updateGifSearch","added","addedStickers","updateStickerSets","sets","loadStickerSets","setIds","addedSetIds","loadStickers","stickerSetId","recentStickers","loadRecentStickers","favorite","favoriteStickers","loadFavoriteStickers","greeting","featured","featuredStickers","loadFeaturedStickers","stickerSetAccessHash","stickerSet","selectStickerSet","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","replaceAnimatedEmojis","loadAnimatedEmojis","saved","savedGifs","loadSavedGifs","unfave","unfaveSticker","installedDate","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","setsById","searchWords","searchStickers","updateStickersForEmoji","loadStickersForEmoji","openedStickerSetShortName","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","chatOrUser","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","loadAndReplaceArchivedChats","updateUsers","replaceChatListIds","loadAndUpdateUsers","userIds","contactIds","contactList","updatedUsers","loadTopMessages","localChats","localUsers","globalChats","globalUsers","searchChats","timestampPlusDay","foundIds","currentSearch","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","newFoundIds","updateLocalTextSearchResults","searchTextMessages","peerId","selectCurrentMediaSearchPeerId","selectCurrentMediaSearch","currentType","currentResults","SHARED_MEDIA_SLICE","updateLocalMediaSearchResults","searchSharedMedia","timestamp","searchMessagesByDate","updateManagement","isUsernameAvailable","afterSyncCallback","DEBUG","console","log","savedUsers","savedPrivateChatIds","savedChats","selectedChat","isChatPrivate","selectedChatUser","replaceChats","loadAndReplaceChats","areMessagesLoaded","currentThreadId","draftsByChatId","acc","newCurrentChatId","currentMessageListInfo","threadsById","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","Array","prototype","replaceUsers","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","sync","afterSync","runDebouncedForFetchFullUser","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","topPeers","lastRequestedAt","getServerTime","usersHash","loadTopUsers","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","updateChatMutedState","phone","phoneNumber","updateUser","updateContact","deleteUser","profileId","isPrivate","photos","userSearch","updateUserSearchFetchingStatus","searchUsers","runDebouncedForSearch","sendBotCommand","command","button","openTelegramLink","toggleSafeLinkModal","showDialog","alert","isError","answerCallbackButton","openPollModal","getReceipt","receiptMessageId","getPaymentForm","setInvoiceMessageInfo","openPaymentModal","bot","selectChatBot","removeBlockedContact","topInlineBots","newHash","inlineBotData","inlineBot","switchPm","canLoadMore","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","queryId","resultId","botId","param","startParam","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","requestInfo","saveInfo","selectPaymentChatId","selectPaymentMessageId","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","validateRequestedInfo","setPaymentForm","step","invoice","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","setReceipt","receipt","publishableKey","selectProviderPublishableKey","credentials","k","join","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","shippingOptionId","saveCredentials","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","stripeCredentials","selectStripeCredentials","requestedInfoId","sendPaymentForm","save","runThrottledForUpdateAppBadge","update","noTopChatsRequest","selectIsChatListed","loadTopChats","newProfilePhoto","updateAppBadge","selectCountNotMutedUnread","closeMessageNotifications","isNotJoined","listId","typingStatus","senderId","isFromScheduled","isActiveChat","hasUnreadMention","unreadMentionsCount","hasWebNotifications","selectNotifySettings","showNewMessageNotification","messageUpdate","selectCommonBoxChatId","targetChat","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","updateChatListType","chatFoldersById","newChatFoldersById","pick","newOrderedIds","orderedId","folders","replacedMembers","addedMember","deletedMemberId","shouldUpdate","some","deleteIndex","isOwner","isAdmin","membersCount","formattedText","ANIMATION_DELAY","updateWithLocalMedia","isScheduled","currentMessage","video","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","isMessageLocal","addViewportId","messagesCount","firstUnreadId","updateChatLastMessage","currentLastMessage","findLastMessage","deleteMessages","newLastMessage","threadIdsToUpdate","deleteChatMessages","unique","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","updateThreadInfo","newMessage","isMessageInCurrentMessageList","isOutgoing","delayedGlobal","scheduledIds","selectScheduledIds","selectIsChatWithBot","selectScheduledMessages","deleteChatScheduledMessages","thread","markMessageListRead","currentPinnedIds","selectPinnedIds","newTheadInfo","messagesById","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","poll","updatedPoll","updatedResults","isChosen","chosenAnswers","chosenAnswer","chosenAnswerIndex","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOption","targetOptionIndex","updatedOption","votersCount","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","status","targetUser","isBlocked","addBlockedContact","settings","privacy","rules","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","useBeforeUnload","callback","useEffect","onBeforeUnload","metaViewport","querySelector","defaultViewportContent","getAttribute","allowedZoomViewportContent","preventEvent","preventDefault","useBrowserOnline","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","ANIMATION_LEVEL_OPTIONS","memo","withGlobal","searchQuery","chatsById","animationLevel","byKey","globalSearchChatId","searchDate","theme","selectTheme","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","setGlobalSearchChatId","onReset","shouldSkipTransition","openTipsChat","setGlobalSearchDate","setSettingOption","lang","useLang","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","withOtherVersions","location","hostname","MainButton","onTrigger","isOpen","Button","ripple","size","color","className","onClick","ariaLabel","buildClassName","handleSearchFocus","useCallback","handleSelectSaved","handleDarkModeToggle","stopPropagation","newTheme","shouldUseSystemTheme","switchTheme","ANIMATION_LEVEL_MAX","handleAnimationLevelChange","newLevel","_","body","classList","toggle","isSearchFocused","searchInputPlaceholder","DropdownMenu","trigger","footer","APP_NAME","APP_VERSION","MenuItem","icon","Switcher","label","checked","noAnimation","toLowerCase","href","FEEDBACK_URL","localStorage","setItem","JSON","stringify","disableHistoryBack","SearchInput","inputId","parentContainerClassName","focused","placeholder","autoComplete","canClose","onChange","onFocus","PickerSelectedItem","isMinimized","clickArg","chatOrUserId","dir","isRtl","Spinner","usersById","orderedFolderIds","shouldSkipHistoryAnimations","notifySettings","notifyExceptions","selectNotifyExceptions","foldersDispatch","onScreenSelect","setActiveChatFolder","transitionRef","useRef","displayedFolders","folderCountersById","resolverFn","ms","dependencies","runThrottled","noFirst","useThrottle","setValue","isFrozen","freeze","unfreeze","useFlag","useHeavyAnimationCheck","useOnChange","useThrottledMemo","counters","unreadDialogsCount","hasActiveDialogs","getFolderUnreadDialogs","badgeCount","isBadgeActive","folderTabs","handleSwitchTab","current","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","min","isNotInAllTabRef","captureEscKeyListener","useHistoryBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","ChatList","folderType","TabList","tabs","activeTab","onSwitchTab","Transition","ref","name","activeKey","renderCount","props","LeftSearch","useModuleLoader","Bundles","Loading","ContactList","closeTimeout","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","handleMouseEnter","handleMouseLeave","onMouseEnter","onMouseLeave","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","onContentChange","connectionState","isNewChatButtonShown","setIsNewChatButtonShown","isConnecting","isMouseInside","handleSelectSettings","handleSelectContacts","handleSelectNewChannel","handleSelectNewGroup","handleSelectArchived","autoCloseTimeout","shouldRenderUpdateButton","updateButtonClassNames","handleUpdateClick","isAppOutdated","markIsAppOutdated","timeout","reload","useAppOutdatedCheck","ShowTransition","isCustom","shouldCleanup","cleanupExceptionKey","fluid","pill","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","SettingsScreens","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","pickerSearchInput","getElementById","blur","handleSearchQuery","handleSettingsScreenSelect","screen","LAYERS_ANIMATION_NAME","currentScreen","isChannel","setSize","windowSize","handleResize","MAX_MESSAGES_LIST_WIDTH","HeaderMenuContainer","isChatChannel","selectIsInSelectMode","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canMute","canLeave","joinChannel","openLocalTextSearch","restartBot","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","x","right","y","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleRestartBot","handleSearchClick","focus","searchInput","disabled","anchor","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","useWebpThumbnail","getMessageMediaThumbDataUri","shouldDecodeThumbnail","isWebpSupported","thumbnailDecoded","setThumbnailDecoded","EMPTY_IMAGE_DATA_URI","useLayoutEffect","webpToPngBase64","then","catch","drawRect","width","height","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","style","transform","svg","div","defs","innerHTML","onUnpinMessage","onAllPinnedClick","mediaThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","getMessageSummaryText","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","src","alt","renderPictogram","renderText","RippleEffect","scaleImage","image","ratio","outputType","Blob","createObjectURL","img","Image","onload","scale","blob","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","Error","res","canvas","createElement","ctx","getContext","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","floor","LOGO_DIMENSIONS","MINIMAL_SIZE","sender","audio","voice","fileName","artist","performer","getSenderTitle","getTranslation","album","getChatTitle","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","media","thumbnailSizes","AVATAR_FULL_DIMENSIONS","getCoverSize","fn","deps","defaultValue","setIsLoading","setError","setResult","wasCancelled","telegramLogoPath","resizeImage","makeGoodArtwork","useAsync","buildMediaMetadata","artwork","selectSender","AudioOrigin","noUi","isVoice","senderName","mediaData","mediaLoader","mediaMetadata","useMessageMediaMetadata","playPause","stop","isPlaying","useAudioPlayer","makeTrackId","getMediaDuration","handleClick","handleClose","clearMediaSession","renderAudio","subtitle","renderVoice","audioMessage","pinnedIds","state","isSelectModeActive","isChatWithBot","currentTransitionKey","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","openChatWithInfo","pinMessage","toggleLeftColumn","isBackButtonActive","pinnedMessageIndex","setPinnedMessageIndex","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","windowWidth","useWindowSize","isLeftColumnHideable","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_ID","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","useCurrentOrPrev","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","canRevealTools","componentEl","add","remove","renderInfo","renderBackButton","PrivateChatInfo","withFullInfo","withMediaViewer","withUpdatingStatus","noRtl","GroupChatInfo","asClose","withUnreadCount","formatIntegerCompact","Infinity","getMessageKey","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStart","senderGroups","dateGroups","isInAlbum","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","IS_ANDROID","INTERSECTION_MARGIN_FOR_MEDIA","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","noAvatars","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","getMessageText","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","clamp","num","low","high","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","ratios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","REM","minWidth","maxHeight","spacing","originalRatios","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","calculateAuthorWidth","font","whiteSpace","left","opacity","appendChild","offsetWidth","useFocusMessage","elementRef","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","ContextMenuContainer","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","observeIntersection","isEmbedded","appearanceOrder","isLastInList","useOnIntersect","noAppearanceAnimation","markShown","targetUsers","renderActionMessageText","asPlain","isContextMenuOpen","contextMenuPosition","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","isContextMenuShown","onMouseDown","preventMessageInputBlur","onContextMenu","customText","isIntersecting","useIsIntersecting","pictogramId","isRoundVideo","getMessageRoundVideo","senderTitle","outgoingStatus","signature","views","isEdited","formatTime","MessageOutgoingStatus","observeIntersectionForPlaying","shouldLoop","isModalOpen","openModal","closeModal","isAnimated","isMemojiSticker","MEMOJI_STICKER_ID","shouldLoad","shouldPlay","mediaHash","getMessageMediaFormat","isMediaLoaded","isAnimationLoaded","markAnimationLoaded","isMediaReady","shouldRenderFullMedia","useTransitionForMedia","getStickerDimensions","thumbClassName","stickerClassName","AnimatedSticker","animationData","play","noLoop","onLoad","fromSticker","useBlurredMediaThumbRef","fullMediaData","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","SELECTED_APPENDIX_BACKGROUND","shouldAutoLoad","isInSelectMode","isSelected","uploadProgress","nonInteractive","shouldAffectAppendix","onCancelUpload","localBlobUrl","isDownloadAllowed","setIsDownloadAllowed","shouldDownload","downloadProgress","useMediaWithDownloadProgress","thumbRef","isUploading","isTransferring","transferProgress","getMediaTransferState","wasDownloadDisabled","usePrevious","shouldRenderSpinner","spinnerClassNames","shouldRenderThumb","isAllowed","contentEl","inSelectMode","getImageData","getAppendixColorFromImage","getCustomAppendixBg","appendixBg","setProperty","setAttribute","ProgressSpinner","useHeavyAnimationCheckForVideo","playerRef","shouldPlayRef","safePlay","isPlayAllowed","wasPlaying","freezePlaying","paused","unfreezePlaying","contains","unfreezePlayingOnRaf","fastRaf","hasFocus","useBackgroundMode","shouldAutoPlay","videoRef","getMessageWebPageVideo","setIsPlayAllowed","isInline","isBuffered","bufferingHandlers","useBuffering","playProgress","setPlayProgress","handleTimeUpdate","currentTarget","currentTime","duration","usePauseOnInactive","useVideoCleanup","videoClassName","autoPlay","muted","loop","playsInline","onTimeUpdate","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","openUserInfo","Avatar","formatPhoneNumberWithCode","getPercentage","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","r","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","isQuiz","getReadableVotersCount","isText","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","isSquarePhoto","handleMediaClick","siteName","displayUrl","isMediaInteractive","truncatedDescription","trimText","SafeLink","getMessageInvoice","amount","currency","isTest","photoUrl","formatCurrency","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","PhotoWithSelect","Photo","VideoWithSelect","Video","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","currentOnRelease","playingProgressRef","shouldSpinnerRender","isActivated","setIsActivated","setProgress","playerEl","playingProgressEl","stopPlaying","capturePlaying","onRelease","stopCurrentAudio","ROUND_VIDEO_DIMENSIONS","onEnded","recentReplierIds","recentRepliers","hasUnread","GROUP_MESSAGE_HOVER_ATTRIBUTE","handleDocumentGroupMouseEnter","lastGroupElement","getLastElementInDocumentGroup","handleDocumentGroupMouseLeave","removeAttribute","nextElementSibling","withSenderName","withAvatar","viaBotId","replyToChatId","isRepliesChat","isChatWithRepliesBot","chatUsername","forceSenderName","isAnonymousOwnMessage","originSender","botSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","every","canReply","isSingleEmoji","animatedEmoji","selectAnimatedEmoji","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","shouldAutoLoadMedia","selectShouldAutoLoadMedia","shouldAutoPlayMedia","selectShouldAutoPlayMedia","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","clickInlineButton","bottomMarkerRef","appendixRef","isLocal","hasReply","isReplyMessage","hasThread","asForwarded","isLinkedChannelPost","isInDocumentGroup","getMessageCustomShape","textParts","renderMessageText","adminTitle","metaSafeAuthorWidth","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","avatarPeer","senderPeer","selectMessage","handleMouseDown","handleDoubleClick","handleContentDoubleClick","isSwiped","markSwiped","unmarkSwiped","startedAt","target","matches","useOuterHandlers","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","openMediaViewer","openAudioPlayer","markMessagesRead","sendPollVote","focusMessageInComments","replyToTopMessageId","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","contentClassName","hasComments","hasActionButton","classNames","isMedia","isMediaWithNoText","isViaBot","isRound","buildContentClassName","withCommentButton","withAppendix","calculatedWidth","noMediaCorners","extraPadding","onDoubleClick","isAvatarPeerUser","avatarUser","avatarChat","hiddenName","renderAvatar","shouldInlineMeta","textContentClass","senderColor","getUserColorKey","renderSenderName","AnimatedEmoji","forceLoadPreview","Audio","isSelectable","onPlay","onReadMedia","Document","renderContent","messageGroups","isViewportNewest","isUnread","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","observeIntersectionForReading","observe","useIntersectionObserver","rootRef","throttleMs","margin","freezeForReading","unfreezeForReading","noAutoFreeze","entries","mentionIds","entry","dataset","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","offsetHeight","scrollHeight","scrollTop","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_ID_BASE","triggerEntry","resetScroll","observeIntersectionForFab","freezeForFab","unfreezeForFab","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flatten","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","getMessageOriginalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","lastUnreadMessageId","loadGreetingStickers","debounceMs","handleStickerSelect","selectedSticker","StickerButton","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","botDescription","isChatLoaded","isChannelChat","isGroupChat","isChatGroup","isCreator","isBot","threadFirstMessageId","selectFirstMessageId","hasTools","canPost","setScrollOffset","scrollOffsetRef","selectScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","onTickEnd","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","shouldRunLast","container","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","el","offsetTop","top","findStuckDate","useStickyDates","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","clientHeight","preservedItemElements","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","shouldForceScroll","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","lastItemElement","bottomOffset","newScrollTop","ceil","isResized","isAnimatingScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","onScroll","withExtraShift","focusNextReply","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","buildAttachment","filename","isQuick","mimeType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","preloadImage","resizedUrl","fetchBlob","SUPPORTED_VIDEO_CONTENT_TYPES","videoWidth","videoHeight","preloadVideo","createPosterForVideo","resetInput","applyIosAutoCapitalizationFix","inputEl","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","volume","requestAnimationFrame","subscribeToAnalyzer","reject","onstop","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","getMessageTextAsHtml","tempEl","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","RE_COMMAND","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","AttachMenu","SymbolMenu","InlineBotTooltip","MentionTooltip","CustomSend","StickerTooltip","BotCommandTooltip","useMouseInside","isKeyboardSingleUse","forceOpen","markForceOpen","unmarkForceOpen","keyboardButtons","forwardMessageIds","forwardedMessagesCount","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","faded","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RegExp","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","link","parseMessageInput","linkEntity","ApiMessageEntityTypes","textMatch","renderingWebPage","webPageWithoutPhoto","messageStub","CalendarModal","MainButtonState","chatUser","selectChatUser","REPLIES_USER_ID","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","editingMessage","canScheduleUntilOnline","wasOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","groupChatMembers","topInlineBotIds","shouldSuggestStickers","isInlineBotLoading","chatBotCommands","botCommands","dropAreaState","onDropHide","editMessage","saveDraft","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","addRecentEmoji","sendInlineBotResult","html","setHtml","lastMessageSendTimeSeconds","prevDropAreaState","isCalendarOpen","openCalendar","closeCalendar","scheduledMessageArgs","setScheduledMessageArgs","htmlRef","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isAttachMenuOpen","openAttachMenu","closeAttachMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","mainButtonState","Edit","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","markIsOpen","unmarkIsOpen","innerText","getPlainText","queryInlineBot","resetInlineBot","canShowHelp","parseStartWithUsernameString","usernameLowered","prevQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","close","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","getFilteredCommands","nextFilteredBotCommands","prepareForRegExp","substr","useBotCommandTooltip","isCustomSendMenuOpen","allowedAttachmentOptions","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","isDisabled","cleanHtml","trim","clearStickersForEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","canSendStickers","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","insertTextAndUpdateCursor","selection","getSelection","newHtml","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","collapse","removeAllRanges","addRange","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","removeSymbol","execCommand","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","stopRecordingVoiceRef","handleEditComplete","editedMessage","hasMessageMedia","useEditing","updateDraft","draftChatId","draftThreadId","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevChatId","prevThreadId","prevHtml","handleBlur","useDraft","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_MODAL_ID","items","kind","file","getAsFile","pastedText","getData","substring","useClipboardPaste","handleFileSelect","files","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","maxLength","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleActivateBotCommandMenu","handleActivateSymbolMenu","handleGifSelect","gif","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","handleSilentSend","handleMessageSchedule","isWhenOnline","restArgs","getTime","handleMessageScheduleUntilOnline","handleCloseCalendar","handleSearchOpen","handleSymbolMenuOpen","handleAllScheduledClick","mainButtonHandler","areVoiceMessagesNotAllowed","canAttachMedia","prevEditedMessage","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","onSend","Portal","DropAreaState","withQuick","onHide","onFileSelect","caption","onCaptionUpdate","onFileAppend","onClear","onInsertUserName","filteredUsers","onSelectResult","withUsername","canAttachEmbedLinks","MessageInput","forcedPlaceholder","shouldSetFocus","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onStickerSelect","emojis","onEmojiSelect","onPollCreate","onGifSelect","onRemoveSymbol","onSearchOpen","onSilentSend","onScheduleSend","withTimePicker","maxAt","getDayStartAt","isFutureMode","secondButtonLabel","onSubmit","onSecondButtonClick","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","PaymentModal","ReceiptModal","CLOSE_ANIMATION_DURATION","isImage","isBlurred","isBackgroundBlurred","background","customBackground","backgroundColor","patternColor","themes","isMobileSearchActive","isReceiptModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioMessage","loadUser","closePaymentModal","clearReceipt","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","setIsReady","ANIMATION_LEVEL_MIN","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanPost","renderingHasTools","renderingIsFabShown","visualViewport","documentElement","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","leftColumnWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","createMessageHash","isMessagingDisabled","onTransitionEnd","propertyName","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onUnpin","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canManage","isColumnOpen","isSearch","isStickerSearch","isGifSearch","isPollResults","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","shouldSkipAnimation","backButtonRef","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManagementScreens","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupMembers","renderingContentKey","renderHeaderContent","isBackButton","buttonClassName","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","handleLoadMore","messageIdsRef","getMessageContentIds","reverse","getMore","useInfiniteScroll","runThrottledForScroll","isScrollingProgrammatically","contactName","getUserFirstOrLastName","deleteChatMember","handleDeleteChatMember","Modal","onEnter","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","isGroup","hasMembersTab","areMembersHidden","canViewMembers","canAddMembers","getHasAdminRight","canDeleteMembers","resolvedUserId","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","searchMediaMessagesLocal","loadProfilePhotos","setActiveTab","deletingUserId","setDeletingUserId","tabType","noProfileInfo","searchMessages","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","MEMBERS_SLICE","useInfiniteScrollForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","useProfileViewportIds","prevTabType","tabsEl","prevProfileState","determineProfileState","tabListEl","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContents","getMemberContextAction","handler","renderSharedMedia","noSpinner","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","teactOrderKey","contextActions","forceShowSelf","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","onStop","big","FloatingActionButton","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","sortChatIds","foundContactIds","fullName","getUserFullName","contactId","isUserBot","canBeInvitedToGroup","handleNextStep","Picker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","selectRightColumnContentKey","currentProfileUserId","selectedId","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","handleSelectChatMember","memberId","isPromoted","handleAppendingChatMembers","onChatMemberSelect","prevContentKey","MediaViewer","Notifications","Dialogs","ForwardPicker","SafeLinkModal","HistoryCalendar","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","updatePageTitle","nextTitle","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","audioOrigin","isHistoryCalendarOpen","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","loadEmojiKeywords","loadCountryList","LOCATION_HASH","decodeURIComponent","middleColumnTransitionClassNames","rightColumnTransitionClassNames","prevIsLeftColumnShown","dispatchHeavyAnimationEnd","waitForTransitionEnd","prevIsRightColumnShown","initialUnread","clearInterval","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","handleStickerSetModalClose","stopEvent","IS_PWA","usePreventPinchZoomGesture","onDrop","onDragOver","initApi"],"sourceRoot":""}