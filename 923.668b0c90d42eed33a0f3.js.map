{"version":3,"file":"923.668b0c90d42eed33a0f3.js","mappings":"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","sources":["webpack://telegram-t/./src/modules/actions/ui/localSearch.ts","webpack://telegram-t/./src/modules/actions/ui/chats.ts","webpack://telegram-t/./src/modules/actions/ui/messages.ts","webpack://telegram-t/./src/modules/actions/ui/globalSearch.ts","webpack://telegram-t/./src/modules/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/modules/actions/ui/users.ts","webpack://telegram-t/./src/modules/actions/ui/misc.ts","webpack://telegram-t/./src/modules/actions/ui/payments.ts","webpack://telegram-t/./src/modules/actions/api/chats.ts","webpack://telegram-t/./src/modules/actions/api/messages.ts","webpack://telegram-t/./src/modules/actions/api/symbols.ts","webpack://telegram-t/./src/modules/actions/api/globalSearch.ts","webpack://telegram-t/./src/modules/actions/api/sync.ts","webpack://telegram-t/./src/modules/actions/api/localSearch.ts","webpack://telegram-t/./src/modules/actions/api/management.ts","webpack://telegram-t/./src/modules/actions/api/users.ts","webpack://telegram-t/./src/modules/reducers/bots.ts","webpack://telegram-t/./src/modules/actions/api/bots.ts","webpack://telegram-t/./src/modules/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/modules/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventIosPinchZoom.ts","webpack://telegram-t/./src/components/ui/Switcher.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/ConnectionState.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/hooks/useThrottledMemo.ts","webpack://telegram-t/./src/hooks/useThrottle.ts","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useWindowSize.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/util/routing.ts","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/HeaderActions.tsx","webpack://telegram-t/./src/hooks/useWebpThumbnail.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/helpers/preventMessageInputBlur.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/hooks/useHeavyAnimationCheckForVideo.ts","webpack://telegram-t/./src/components/middle/message/hooks/usePauseOnInactive.ts","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/ui/CheckboxGroup.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/hooks/useDebounce.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./node_modules/opus-recorder/dist/encoderWorker.min.js","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/helpers/getMessageTextAsHtml.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/common/CalendarModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/insertHtmlInSelection.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/ProfilePhoto.tsx","webpack://telegram-t/./src/components/right/ProfileInfo.tsx","webpack://telegram-t/./src/components/right/hooks/usePhotosPreload.ts","webpack://telegram-t/./src/components/right/ChatExtra.tsx","webpack://telegram-t/./src/components/right/DeleteMemberModal.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/util/deeplink.ts","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addReducer } from '../../../lib/teact/teactn';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddReducer('closeLocalTextSearch', closeLocalTextSearch);\n\naddReducer('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddReducer('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddReducer('openChat', (global, actions, payload) => {\n  const {\n    id, threadId = -1, type = 'thread', shouldReplaceHistory = false,\n  } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n\n    setGlobal(global);\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory);\n});\n\naddReducer('openPreviousChat', (global) => {\n  return updateCurrentMessageList(global, undefined);\n});\n\naddReducer('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddReducer('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddReducer('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddReducer('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport { ANIMATION_END_DELAY, FAST_SMOOTH_MAX_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\n\nlet blurTimeout: number | undefined;\n\naddReducer('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddReducer('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddReducer('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddReducer('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddReducer('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat && chat.lastMessage ? chat.lastMessage.id : undefined;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo ? threadInfo.lastMessageId : undefined;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddReducer('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n  } = payload!;\n\n  return {\n    ...global,\n    mediaViewer: {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    },\n    forwardMessages: {},\n  };\n});\n\naddReducer('closeMediaViewer', (global) => {\n  return {\n    ...global,\n    mediaViewer: {},\n  };\n});\n\naddReducer('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n    },\n  };\n});\n\naddReducer('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {},\n  };\n});\n\naddReducer('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      const newGlobal = getGlobal();\n\n      setGlobal({\n        ...newGlobal,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    setGlobal({\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    });\n  }\n});\n\naddReducer('closePollResults', (global) => {\n  setGlobal({\n    ...global,\n    pollResults: {},\n  });\n});\n\naddReducer('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat && chat.lastMessage ? chat.lastMessage.id : undefined;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo ? threadInfo.lastMessageId : undefined;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddReducer('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage();\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids && ids.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddReducer('openForwardMenu', (global, actions, payload) => {\n  const { fromChatId, messageIds, groupedId } = payload!;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n    },\n  };\n});\n\naddReducer('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddReducer('setForwardChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddReducer('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddReducer('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddReducer('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddReducer('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddReducer('exitMessageSelectMode', exitMessageSelectMode);\n\naddReducer('openPollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: true,\n  };\n});\n\naddReducer('closePollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: false,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddReducer('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddReducer('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddReducer('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddReducer('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { updateSelectedUserId, updateUserSearch } from '../../reducers';\n\naddReducer('openUserInfo', (global, actions, payload) => {\n  const { id } = payload!;\n\n  actions.openChat({ id });\n});\n\nconst clearSelectedUserId = (global: GlobalState) => updateSelectedUserId(global, undefined);\n\naddReducer('openChat', clearSelectedUserId);\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { ApiError } from '../../../api/types';\n\nconst MAX_STORED_EMOJIS = 18; // Represents two rows of recent emojis\n\naddReducer('toggleChatInfo', (global) => {\n  return {\n    ...global,\n    isChatInfoShown: !global.isChatInfoShown,\n  };\n});\n\naddReducer('toggleManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddReducer('closeManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddReducer('openChat', (global) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    isLeftColumnShown: global.messages.messageLists.length === 0,\n  };\n});\n\naddReducer('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddReducer('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload!;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddReducer('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload!;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: 0,\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddReducer('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('dismissNotification', (global) => {\n  const newNotifications = [...global.notifications];\n\n  newNotifications.pop();\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddReducer('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddReducer('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\n\naddReducer('openPaymentModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      chatId,\n      messageId,\n      isPaymentModalOpen: true,\n    },\n  };\n});\n\naddReducer('closePaymentModal', (global) => {\n  const newGlobal = clearPayment(global);\n  return closeInvoice(newGlobal);\n});\n\naddReducer('addPaymentError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      error,\n    },\n  };\n});\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiUser, ApiChatFolder, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { NewChatMembersProgress, ChatCreationProgress, ManagementProgress } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  ARCHIVED_FOLDER_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  CHAT_LIST_LOAD_SLICE,\n  RE_TME_INVITE_LINK,\n  RE_TME_LINK,\n  TIPS_USERNAME,\n  LOCALIZED_TIPS,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addChats,\n  addUsers,\n  replaceThreadParam,\n  updateChatListIds,\n  updateChats,\n  updateChat,\n  updateChatListSecondaryInfo,\n  updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChat,\n  selectUser,\n  selectChatListType,\n  selectIsChatPinned,\n  selectChatFolder,\n  selectSupportChat,\n  selectChatByUsername,\n  selectThreadTopMessageId,\n  selectCurrentMessageList,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport {\n  isChatSummaryOnly, isChatArchived, prepareChatList, isChatBasicGroup,\n} from '../../helpers';\n\nconst TOP_CHATS_PRELOAD_PAUSE = 100;\n// We expect this ID does not exist\nconst TMP_CHAT_ID = -1;\n\nconst runThrottledForLoadChats = throttle((cb) => cb(), 1000, true);\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddReducer('preloadTopChatMessages', (global, actions) => {\n  (async () => {\n    const preloadedChatIds: number[] = [];\n\n    for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n      await pause(TOP_CHATS_PRELOAD_PAUSE);\n\n      const {\n        byId,\n        listIds: { active: listIds },\n        orderedPinnedIds: { active: orderedPinnedIds },\n      } = getGlobal().chats;\n      if (!listIds) {\n        return;\n      }\n\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n      const { pinnedChats, otherChats } = prepareChatList(byId, listIds, orderedPinnedIds);\n      const topChats = [...pinnedChats, ...otherChats];\n      const chatToPreload = topChats.find(({ id }) => id !== currentChatId && !preloadedChatIds.includes(id));\n      if (!chatToPreload) {\n        return;\n      }\n\n      preloadedChatIds.push(chatToPreload.id);\n\n      actions.loadViewportMessages({ chatId: chatToPreload.id, threadId: MAIN_THREAD_ID });\n    }\n  })();\n});\n\naddReducer('openChat', (global, actions, payload) => {\n  const { id, threadId } = payload!;\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat && chat.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      actions.requestThreadInfoUpdate({ chatId: id, threadId });\n    }\n  }\n});\n\naddReducer('openSupportChat', (global, actions) => {\n  const chat = selectSupportChat(global);\n\n  actions.openChat({ id: chat ? chat.id : TMP_CHAT_ID });\n\n  if (chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchChat', { type: 'support' });\n    if (result) {\n      actions.openChat({ id: result.chatId });\n    }\n  })();\n});\n\naddReducer('openTipsChat', (global, actions, payload) => {\n  const { langCode } = payload;\n\n  const usernamePostfix = langCode === 'pt-br'\n    ? 'BR'\n    : LOCALIZED_TIPS.includes(langCode) ? (langCode as string).toUpperCase() : '';\n\n  actions.openChatByUsername({ username: `${TIPS_USERNAME}${usernamePostfix}` });\n});\n\naddReducer('loadMoreChats', (global, actions, payload) => {\n  const { listType = 'active' } = payload!;\n  const listIds = global.chats.listIds[listType as ('active' | 'archived')];\n  const isFullyLoaded = global.chats.isFullyLoaded[listType as ('active' | 'archived')];\n\n  if (isFullyLoaded) {\n    return;\n  }\n\n  const oldestChat = listIds\n    ? listIds\n      .map((id) => global.chats.byId[id])\n      .filter((chat) => Boolean(chat && chat.lastMessage) && !selectIsChatPinned(global, chat.id))\n      .sort((chat1, chat2) => (chat1.lastMessage!.date - chat2.lastMessage!.date))[0]\n    : undefined;\n\n  if (oldestChat) {\n    runThrottledForLoadChats(() => loadChats(listType, oldestChat.id, oldestChat.lastMessage!.date));\n  } else {\n    runThrottledForLoadChats(() => loadChats(listType));\n  }\n});\n\naddReducer('loadFullChat', (global, actions, payload) => {\n  const { chatId, force } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(chat);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(chat));\n  }\n});\n\naddReducer('loadTopChats', () => {\n  runThrottledForLoadTopChats(() => loadChats('active'));\n});\n\naddReducer('requestChatUpdate', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    serverTimeOffset,\n  });\n});\n\naddReducer('updateChatMutedState', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId, isMuted } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  setGlobal(updateChat(global, chatId, { isMuted }));\n  void callApi('updateChatMutedState', { chat, isMuted, serverTimeOffset });\n});\n\naddReducer('createChannel', (global, actions, payload) => {\n  const {\n    title, about, photo, memberIds,\n  } = payload!;\n\n  const members = (memberIds as number[])\n    .map((id: number) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createChannel(title, members, about, photo);\n});\n\naddReducer('joinChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (channelId && accessHash) {\n    void callApi('joinChannel', { channelId, accessHash });\n  }\n});\n\naddReducer('deleteChatUser', (global, actions, payload) => {\n  (async () => {\n    const { chatId, userId } : { chatId: number; userId: number } = payload!;\n    const chat = selectChat(global, chatId);\n    const user = selectUser(global, userId);\n    if (!chat || !user) {\n      return;\n    }\n    await callApi('deleteChatUser', { chat, user });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId && global.currentUserId === userId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('deleteChat', (global, actions, payload) => {\n  (async () => {\n    const { chatId } : { chatId: number } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n    await callApi('deleteChat', { chatId: chat.id });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('leaveChannel', (global, actions, payload) => {\n  (async () => {\n    const { chatId } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const { id: channelId, accessHash } = chat;\n\n    if (channelId && accessHash) {\n      await callApi('leaveChannel', { channelId, accessHash });\n    }\n\n    const activeChannel = selectCurrentMessageList(global);\n    if (activeChannel && activeChannel.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('deleteChannel', (global, actions, payload) => {\n  (async () => {\n    const { chatId } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const { id: channelId, accessHash } = chat;\n\n    if (channelId && accessHash) {\n      await callApi('deleteChannel', { channelId, accessHash });\n    }\n\n    const activeChannel = selectCurrentMessageList(global);\n    if (activeChannel && activeChannel.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('createGroupChat', (global, actions, payload) => {\n  const { title, memberIds, photo } = payload!;\n  const members = (memberIds as number[])\n    .map((id: number) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createGroupChat(title, members, photo);\n});\n\naddReducer('toggleChatPinned', (global, actions, payload) => {\n  const { id, folderId } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddReducer('toggleChatArchived', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddReducer('loadChatFolders', () => {\n  void loadChatFolders();\n});\n\naddReducer('loadRecommendedChatFolders', () => {\n  void loadRecommendedChatFolders();\n});\n\naddReducer('editChatFolder', (global, actions, payload) => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddReducer('addChatFolder', (global, actions, payload) => {\n  const { folder } = payload!;\n  const { orderedIds } = global.chatFolders;\n  const maxId = orderedIds && orderedIds.length ? Math.max.apply(Math.max, orderedIds) : ARCHIVED_FOLDER_ID;\n\n  void createChatFolder(folder, maxId);\n});\n\naddReducer('deleteChatFolder', (global, actions, payload) => {\n  const { id } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void deleteChatFolder(id);\n  }\n});\n\naddReducer('toggleChatUnread', (global, actions, payload) => {\n  const { id } = payload!;\n  const { serverTimeOffset } = global;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { serverTimeOffset, chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddReducer('openTelegramLink', (global, actions, payload) => {\n  const { url } = payload!;\n  let match = RE_TME_INVITE_LINK.exec(url);\n\n  if (match) {\n    const hash = match[1];\n\n    (async () => {\n      const result = await callApi('openChatByInvite', hash);\n      if (!result) {\n        return;\n      }\n\n      actions.openChat({ id: result.chatId });\n    })();\n  } else {\n    match = RE_TME_LINK.exec(url)!;\n\n    const username = match[1];\n    const chatOrChannelPostId = match[2] ? Number(match[2]) : undefined;\n    const messageId = match[3] ? Number(match[3]) : undefined;\n\n    // Open message in private chat\n    if (username === 'c' && chatOrChannelPostId && messageId) {\n      actions.focusMessage({ chatId: -chatOrChannelPostId, messageId });\n    } else {\n      void openChatByUsername(actions, username, chatOrChannelPostId);\n    }\n  }\n});\n\naddReducer('acceptInviteConfirmation', (global, actions, payload) => {\n  const { hash } = payload!;\n  (async () => {\n    const result = await callApi('importChatInvite', { hash });\n    if (!result) {\n      return;\n    }\n\n    actions.openChat({ id: result.id });\n  })();\n});\n\naddReducer('openChatByUsername', (global, actions, payload) => {\n  const { username } = payload!;\n\n  void openChatByUsername(actions, username);\n});\n\naddReducer('togglePreHistoryHidden', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  let chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    void callApi('togglePreHistoryHidden', { chat, isEnabled });\n  })();\n});\n\naddReducer('updateChatDefaultBannedRights', (global, actions, payload) => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddReducer('updateChatMemberBannedRights', (global, actions, payload) => {\n  const { chatId, userId, bannedRights } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n    const isBanned = !!bannedRights.viewMessages;\n    const isUnblocked = !Object.keys(bannedRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(members && isBanned && {\n          members: members.filter((m) => m.userId !== userId),\n        }),\n        ...(members && !isBanned && {\n          members: members.map((m) => (\n            m.userId === userId\n              ? { ...m, bannedRights }\n              : m\n          )),\n        }),\n        ...(isUnblocked && kickedMembers && {\n          kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChatAdmin', (global, actions, payload) => {\n  const {\n    chatId, userId, adminRights, customTitle,\n  } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatAdmin', {\n      chat, user, adminRights, customTitle,\n    });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { adminMembers } = chatAfterUpdate.fullInfo;\n\n    const isDismissed = !Object.keys(adminRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(adminMembers && isDismissed && {\n          adminMembers: adminMembers.filter((m) => m.userId !== userId),\n        }),\n        ...(adminMembers && !isDismissed && {\n          adminMembers: adminMembers.map((m) => (\n            m.userId === userId\n              ? { ...m, adminRights, customTitle }\n              : m\n          )),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChat', (global, actions, payload) => {\n  const {\n    chatId, title, about, photo,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n    await Promise.all([\n      chat.title !== title\n        ? callApi('updateChatTitle', chat, title)\n        : undefined,\n      chat.fullInfo && chat.fullInfo.about !== about\n        ? callApi('updateChatAbout', chat, about)\n        : undefined,\n      photo\n        ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n        : undefined,\n    ]);\n\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n  })();\n});\n\naddReducer('toggleSignatures', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddReducer('loadGroupsForDiscussion', () => {\n  (async () => {\n    const groups = await callApi('fetchGroupsForDiscussion');\n    if (!groups) {\n      return;\n    }\n\n    const addedById = groups.reduce((result, group) => {\n      if (group) {\n        result[group.id] = group;\n      }\n\n      return result;\n    }, {} as Record<number, ApiChat>);\n\n    const global = addChats(getGlobal(), addedById);\n    setGlobal({\n      ...global,\n      chats: {\n        ...global.chats,\n        forDiscussionIds: Object.keys(addedById).map(Number),\n      },\n    });\n  })();\n});\n\naddReducer('linkDiscussionGroup', (global, actions, payload) => {\n  const { channelId, chatId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  let chat = selectChat(global, chatId);\n  if (!channel || !chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    let { fullInfo } = chat;\n    if (!fullInfo) {\n      const fullChat = await callApi('fetchFullChat', chat);\n      if (!fullChat) {\n        return;\n      }\n\n      fullInfo = fullChat.fullInfo;\n    }\n\n    if (fullInfo.isPreHistoryHidden) {\n      await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n    }\n\n    void callApi('setDiscussionGroup', { channel, chat });\n  })();\n});\n\naddReducer('unlinkDiscussionGroup', (global, actions, payload) => {\n  const { channelId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo && channel.fullInfo.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  (async () => {\n    await callApi('setDiscussionGroup', { channel });\n    if (chat) {\n      loadFullChat(chat);\n    }\n  })();\n});\n\naddReducer('setActiveChatFolder', (global, actions, payload) => {\n  return {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      activeChatFolder: payload,\n    },\n  };\n});\n\naddReducer('loadMoreMembers', (global) => {\n  (async () => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    if (!chat || isChatBasicGroup(chat)) {\n      return;\n    }\n\n    const offset = (chat.fullInfo && chat.fullInfo.members && chat.fullInfo.members.length) || undefined;\n    const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n    if (!result) {\n      return;\n    }\n\n    const { members, users } = result;\n    if (!members || !members.length) {\n      return;\n    }\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n    global = updateChat(global, chat.id, {\n      fullInfo: {\n        ...chat.fullInfo,\n        members: [\n          ...((chat.fullInfo || {}).members || []),\n          ...(members || []),\n        ],\n      },\n    });\n    setGlobal(global);\n  })();\n});\n\naddReducer('addChatMembers', (global, actions, payload) => {\n  const { chatId, memberIds } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as number[]).map((userId) => selectUser(global, userId)).filter<ApiUser>(Boolean as any);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState(NewChatMembersProgress.Loading);\n  (async () => {\n    await callApi('addChatMembers', chat, users);\n    actions.setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n    loadFullChat(chat);\n  })();\n});\n\naddReducer('deleteChatMember', (global, actions, payload) => {\n  const { chatId, userId } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    await callApi('deleteChatMember', chat, user);\n    loadFullChat(chat);\n  })();\n});\n\nasync function loadChats(listType: 'active' | 'archived', offsetId?: number, offsetDate?: number) {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: getGlobal().chats.orderedPinnedIds[listType] === undefined,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChatListIds(global, listType, chatIds);\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  Object.keys(result.draftsById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId],\n    );\n  });\n\n  Object.keys(result.replyingToById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nasync function loadFullChat(chat: ApiChat) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return;\n  }\n\n  const { users, fullInfo } = result;\n\n  let global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n  global = updateChat(global, chat.id, { fullInfo });\n\n  setGlobal(global);\n}\n\nasync function createChannel(title: string, users: ApiUser[], about?: string, photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChannel = await callApi('createChannel', { title, about, users });\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  let global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: channelId });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n}\n\nasync function createGroupChat(title: string, users: ApiUser[], photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChat = await callApi('createGroupChat', { title, users });\n  if (!createdChat) {\n    return;\n  }\n\n  const { id: chatId } = createdChat;\n\n  let global = getGlobal();\n  global = updateChat(global, chatId, createdChat);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: chatId });\n\n  if (chatId && photo) {\n    await callApi('editChatPhoto', { chatId, photo });\n  }\n}\n\nasync function loadChatFolders() {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    });\n  }\n}\n\nasync function loadRecommendedChatFolders() {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    });\n  }\n}\n\nasync function createChatFolder(folder: ApiChatFolder, maxId: number) {\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    });\n  }\n}\n\nasync function deleteChatFolder(id: number) {\n  await callApi('deleteChatFolder', id);\n}\n\nasync function openChatByUsername(\n  actions: GlobalActions,\n  username: string,\n  channelPostId?: number,\n) {\n  const global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    if (channelPostId) {\n      actions.focusMessage({ chatId: localChat.id, messageId: channelPostId });\n    } else {\n      actions.openChat({ id: localChat.id });\n    }\n    return;\n  }\n\n  const previousChat = selectCurrentChat(global);\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await callApi('getChatByUsername', username);\n  if (!chat) {\n    if (previousChat) {\n      actions.openChat({ id: previousChat.id });\n    }\n\n    actions.showNotification({ message: 'User does not exist' });\n\n    return;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  if (channelPostId) {\n    actions.focusMessage({ chatId: chat.id, messageId: channelPostId });\n  } else {\n    actions.openChat({ id: chat.id });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiVideo,\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MAX_MEDIA_FILES_FOR_ALBUM, MESSAGE_LIST_SLICE } from '../../../config';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport { areSortedArraysIntersecting, buildCollectionByKey, split } from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n} from '../../selectors';\nimport { debounce, rafPromise } from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/environment';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddReducer('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    // Let reducer return and update global\n    await Promise.resolve();\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddReducer('loadMessage', (global, actions, payload) => {\n  const { chatId, messageId, replyOriginForId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void loadMessage(chat, messageId, replyOriginForId);\n});\n\naddReducer('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n  };\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments, MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddReducer('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(message.previousLocalId || message.id);\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddReducer('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  return global;\n});\n\naddReducer('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddReducer('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddReducer('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddReducer('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddReducer('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteHistory', (global, actions, payload) => {\n  (async () => {\n    const { chatId, shouldDeleteForAll } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const maxId = chat.lastMessage && chat.lastMessage.id;\n\n    await callApi('deleteHistory', { chat, shouldDeleteForAll, maxId });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('reportMessages', (global, actions, payload) => {\n  (async () => {\n    const {\n      messageIds, reason, description,\n    } = payload!;\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return;\n    }\n\n    const { chatId } = currentMessageList;\n    const chat = selectChat(global, chatId)!;\n\n    const result = await callApi('reportMessages', {\n      peer: chat, messageIds, reason, description,\n    });\n\n    actions.showNotification({\n      message: result\n        ? 'Thank you! Your report will be reviewed by our team.'\n        : 'Error occured while submiting report. Please, try again later.',\n    });\n  })();\n});\n\naddReducer('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const { maxId } = payload!;\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n\n  // TODO Support local marking read for threads\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return undefined;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddReducer('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddReducer('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddReducer('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddReducer('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddReducer('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddReducer('forwardMessages', (global) => {\n  const { fromChatId, messageIds, toChatId } = global.forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (fromChat && toChat && messages && messages.length) {\n    void forwardMessages(fromChat, toChat, messages);\n  }\n});\n\naddReducer('loadScheduledHistory', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { hash } = global.scheduledMessages.byChatId[chat.id] || {};\n\n  void loadScheduledHistory(chat, hash);\n});\n\naddReducer('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddReducer('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddReducer('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text: string;\n  entities: ApiMessageEntity[];\n  replyingTo: number;\n  attachment: ApiAttachment;\n  sticker: ApiSticker;\n  gif: ApiVideo;\n  poll: ApiNewPoll;\n  serverTimeOffset?: number;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nfunction forwardMessages(\n  fromChat: ApiChat,\n  toChat: ApiChat,\n  messages: ApiMessage[],\n) {\n  callApi('forwardMessages', {\n    fromChat,\n    toChat,\n    messages,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const isUnique = (v: number, i: number, a: number[]) => a.indexOf(v) === i;\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: [\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ].filter(isUnique),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddReducer('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat, historyHash?: number) {\n  const result = await callApi('fetchScheduledHistory', { chat, hash: historyHash });\n  if (!result) {\n    return;\n  }\n\n  const { hash, messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId, hash);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectStickerSet } from '../../selectors';\n\nconst ADDED_SETS_THROTTLE = 500;\nconst ADDED_SETS_THROTTLE_CHUNK = 50;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('loadStickerSets', (global) => {\n  const { hash } = global.stickers.added || {};\n  void loadStickerSets(hash);\n});\n\naddReducer('loadAddedStickers', (global, actions) => {\n  const { setIds: addedSetIds } = global.stickers.added;\n  if (!addedSetIds || !addedSetIds.length) {\n    return;\n  }\n\n  (async () => {\n    for (let i = 0; i < addedSetIds.length; i++) {\n      actions.loadStickers({ stickerSetId: addedSetIds[i] });\n\n      if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n        await pause(ADDED_SETS_THROTTLE);\n      }\n    }\n  })();\n});\n\naddReducer('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddReducer('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddReducer('loadGreetingStickers', (global) => {\n  const { hash } = global.stickers.greeting || {};\n\n  (async () => {\n    const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n\n    if (!greeting) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal({\n      ...newGlobal,\n      stickers: {\n        ...newGlobal.stickers,\n        greeting: {\n          hash: greeting.hash,\n          stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n        },\n      },\n    });\n  })();\n});\n\naddReducer('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddReducer('loadStickers', (global, actions, payload) => {\n  const { stickerSetId, stickerSetShortName } = payload!;\n  let { stickerSetAccessHash } = payload!;\n\n  if (!stickerSetAccessHash && !stickerSetShortName) {\n    const stickerSet = selectStickerSet(global, stickerSetId);\n    if (!stickerSet) {\n      return;\n    }\n\n    stickerSetAccessHash = stickerSet.accessHash;\n  }\n\n  void loadStickers(stickerSetId, stickerSetAccessHash, stickerSetShortName);\n});\n\naddReducer('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n});\n\naddReducer('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddReducer('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddReducer('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddReducer('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddReducer('loadEmojiKeywords', (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords && currentEmojiKeywords.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  (async () => {\n    const emojiKeywords = await callApi('fetchEmojiKeywords', {\n      language,\n      fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n    });\n\n    global = getGlobal();\n    currentEmojiKeywords = global.emojiKeywords[language];\n\n    if (!emojiKeywords) {\n      setGlobal({\n        ...global,\n        emojiKeywords: {\n          ...global.emojiKeywords,\n          [language]: {\n            ...currentEmojiKeywords,\n            isLoading: false,\n          },\n        },\n      });\n\n      return;\n    }\n\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          isLoading: false,\n          version: emojiKeywords.version,\n          keywords: {\n            ...(currentEmojiKeywords && currentEmojiKeywords.keywords),\n            ...emojiKeywords.keywords,\n          },\n        },\n      },\n    });\n  })();\n});\n\nasync function loadStickerSets(hash = 0) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash = 0) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash = 0) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash = 0) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetId: string, accessHash: string, stickerSetShortName?: string) {\n  const stickerSet = await callApi('fetchStickers',\n    { stickerSetShortName, stickerSetId, accessHash });\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  let global = getGlobal();\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddReducer('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddReducer('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload!;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddReducer('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddReducer('openStickerSetShortName', (global, actions, payload) => {\n  const { stickerSetShortName } = payload!;\n  return {\n    ...global,\n    openedStickerSetShortName: stickerSetShortName,\n  };\n});\n\nasync function searchStickers(query: string, hash = 0) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash = 0) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash = 0) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddReducer('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const newGlobal = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(newGlobal);\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddReducer('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const { nextOffsetId } = (resultsByType && resultsByType[type as ApiGlobalMessageSearchType]) || {};\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalUsers.map(({ id }) => id),\n      userIds: globalChats.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chatOrUser: chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addReducer, getGlobal, setGlobal, getDispatch,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiFormattedText, ApiUser, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  CHAT_LIST_LOAD_SLICE, DEBUG, MESSAGE_LIST_SLICE,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  replaceChatListIds,\n  replaceChats,\n  replaceUsers,\n  updateUsers,\n  updateChats,\n  updateChatListSecondaryInfo,\n  updateThreadInfos,\n  replaceThreadParam,\n} from '../../reducers';\nimport {\n  selectUser, selectChat, selectCurrentMessageList, selectDraft, selectChatMessage, selectThreadInfo,\n} from '../../selectors';\nimport { isChatPrivate } from '../../helpers';\n\naddReducer('sync', (global, actions) => {\n  void sync(actions.afterSync);\n});\n\naddReducer('afterSync', (global, actions) => {\n  void afterSync(actions);\n});\n\nasync function sync(afterSyncCallback: () => void) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  await callApi('fetchCurrentUser');\n\n  // This fetches only active chats and clears archived chats, which will be fetched in `afterSync`\n  const savedUsers = await loadAndReplaceChats();\n  await loadAndReplaceMessages(savedUsers);\n\n  setGlobal({\n    ...getGlobal(),\n    lastSyncTime: Date.now(),\n  });\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH SYNC');\n  }\n\n  afterSyncCallback();\n}\n\nasync function afterSync(actions: GlobalActions) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START AFTER-SYNC');\n  }\n\n  actions.loadFavoriteStickers();\n\n  await Promise.all([\n    loadAndUpdateUsers(),\n    loadAndReplaceArchivedChats(),\n  ]);\n\n  await callApi('fetchCurrentUser');\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH AFTER-SYNC');\n  }\n}\n\nasync function loadAndReplaceChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    withPinned: true,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n  if (!result) {\n    return undefined;\n  }\n\n  let global = getGlobal();\n\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  const { currentUserId } = global;\n\n  const savedPrivateChatIds = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n    ...(currentUserId ? [currentUserId] : []),\n  ];\n\n  const savedUsers = savedPrivateChatIds\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  const savedChats = savedPrivateChatIds\n    .map((id) => selectChat(global, id))\n    .filter<ApiChat>(Boolean as any);\n\n  const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n  if (currentChatId) {\n    const selectedChat = selectChat(global, currentChatId);\n    if (selectedChat && !savedPrivateChatIds.includes(currentChatId)) {\n      savedChats.push(selectedChat);\n    }\n\n    if (isChatPrivate(currentChatId)) {\n      const selectedChatUser = selectUser(global, currentChatId);\n      if (selectedChatUser && !savedPrivateChatIds.includes(currentChatId)) {\n        savedUsers.push(selectedChatUser);\n      }\n    }\n  }\n\n  savedUsers.push(...result.users);\n  savedChats.push(...result.chats);\n\n  global = replaceChats(global, buildCollectionByKey(savedChats, 'id'));\n  global = replaceChatListIds(global, 'active', result.chatIds);\n\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n    },\n  };\n\n  global = updateChatListSecondaryInfo(global, 'active', result);\n\n  Object.keys(result.draftsById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId]);\n  });\n\n  Object.keys(result.replyingToById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  setGlobal(global);\n\n  if (currentChatId && !global.chats.byId[currentChatId]) {\n    getDispatch().openChat({ id: undefined });\n  }\n\n  return savedUsers;\n}\n\nasync function loadAndReplaceArchivedChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    archived: true,\n    withPinned: true,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = replaceChatListIds(global, 'archived', result.chatIds);\n  global = updateChatListSecondaryInfo(global, 'archived', result);\n  setGlobal(global);\n}\n\nasync function loadAndReplaceMessages(savedUsers?: ApiUser[]) {\n  let areMessagesLoaded = false;\n  let users = savedUsers || [];\n\n  let global = getGlobal();\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId).map(Number);\n  const draftsByChatId = draftChatIds.reduce<Record<number, ApiFormattedText>>((acc, chatId) => {\n    const draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    return draft ? { ...acc, [chatId]: draft } : acc;\n  }, {});\n\n  if (currentChatId) {\n    const result = await loadTopMessages(global.chats.byId[currentChatId]);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const byId = buildCollectionByKey(result.messages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {\n            [currentChatId]: {\n              byId,\n              threadsById: {\n                [MAIN_THREAD_ID]: {\n                  ...(currentMessageListInfo && currentMessageListInfo.threadsById[MAIN_THREAD_ID]),\n                  listedIds,\n                  viewportIds: listedIds,\n                  outlyingIds: undefined,\n                },\n              },\n            },\n          },\n        },\n      };\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin)\n            .map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin && currentMessageListInfoOrigin.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo && currentMessageListInfo.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n      users = Array.prototype.concat(users, result.users);\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', draftsByChatId[chatId]);\n  });\n\n  if (savedUsers) {\n    global = replaceUsers(global, buildCollectionByKey(users, 'id'));\n  } else if (users) {\n    // If `fetchChats` has failed for some reason, we don't have saved chats, thus we can not replace\n    global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getDispatch().closeAudioPlayer();\n  }\n}\n\nasync function loadAndUpdateUsers() {\n  let global = getGlobal();\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  if (\n    (!contactIds || !contactIds.length)\n    && (!recentlyFoundChatIds || !recentlyFoundChatIds.length)\n  ) {\n    return;\n  }\n\n  const users = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n  ].map((id) => selectUser(global, id)).filter<ApiUser>(Boolean as any);\n\n  const updatedUsers = await callApi('fetchUsers', { users });\n  if (!updatedUsers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n  setGlobal(global);\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearchPeerId,\n  selectCurrentMediaSearch, selectCurrentMessageList, selectChat, selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport { SharedMediaType } from '../../../types';\n\naddReducer('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results ? results.nextOffsetId : undefined;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo ? threadInfo.topMessageId : undefined;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddReducer('searchMediaMessagesLocal', (global) => {\n  const peerId = selectCurrentMediaSearchPeerId(global);\n  const chatOrUser = peerId\n    ? global.users.byId[peerId] || global.chats.byId[peerId]\n    : undefined;\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chatOrUser || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults ? currentResults.nextOffsetId : undefined;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chatOrUser, type, offsetId);\n});\n\naddReducer('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chatOrUser: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || (query && query !== currentSearch.query)) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalTextSearchResults(global, chatOrUser.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chatOrUser: ApiChat | ApiUser,\n  type: SharedMediaType,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type,\n    limit: SHARED_MEDIA_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalMediaSearchResults(global, chatOrUser.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\n/**\n * @param timestamp start of target date in seconds\n */\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getDispatch().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateManagement, updateManagementProgress } from '../../reducers';\nimport { selectChat, selectCurrentMessageList } from '../../selectors';\nimport { isChatBasicGroup } from '../../helpers';\n\naddReducer('checkPublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n\n    const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n    global = getGlobal();\n    global = updateManagementProgress(\n      global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n    );\n    global = updateManagement(global, chatId, { isUsernameAvailable });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    setGlobal(global);\n\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    const result = await callApi('setChatUsername', { chat, username });\n\n    global = getGlobal();\n    global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { debounce, throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { isChatPrivate } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectUser } from '../../selectors';\nimport {\n  addChats, addUsers, updateChat, updateManagementProgress, updateUser, updateUsers,\n  updateUserSearch, updateUserSearchFetchingStatus,\n} from '../../reducers';\n\nconst runDebouncedForFetchFullUser = debounce((cb) => cb(), 500, false, true);\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddReducer('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  runDebouncedForFetchFullUser(() => callApi('fetchFullUser', { id, accessHash }));\n});\n\naddReducer('loadUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  (async () => {\n    const updatedUsers = await callApi('fetchUsers', { users: [user] });\n    if (!updatedUsers) {\n      return;\n    }\n\n    global = getGlobal();\n    global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n    setGlobal(global);\n  })();\n});\n\naddReducer('loadTopUsers', (global) => {\n  const {\n    serverTimeOffset,\n    topPeers: {\n      hash, lastRequestedAt,\n    },\n  } = global;\n\n  if (!lastRequestedAt || Date.now() / 1000 + serverTimeOffset - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers(hash);\n  }\n});\n\naddReducer('loadContactList', (global) => {\n  const { hash } = global.contactList || {};\n  void loadContactList(hash);\n});\n\naddReducer('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddReducer('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted, firstName, lastName,\n  } = payload!;\n\n  void updateContact(userId, isMuted, firstName, lastName);\n});\n\naddReducer('deleteUser', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteUser(userId);\n});\n\nasync function loadTopUsers(usersHash?: number) {\n  const result = await callApi('fetchTopUsers', { hash: usersHash });\n  if (!result) {\n    return;\n  }\n\n  const { hash, ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      hash,\n      userIds: ids,\n      lastRequestedAt: Date.now() / 1000 + global.serverTimeOffset,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList(hash?: number) {\n  const contactList = await callApi('fetchContactList', { hash });\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      hash: contactList.hash,\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: number,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getDispatch().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  const result = await callApi('updateContact', { phone: user.phoneNumber, firstName, lastName });\n\n  if (result) {\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n}\n\nasync function deleteUser(userId: number) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteUser', { id, accessHash });\n}\n\naddReducer('loadProfilePhotos', (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isChatPrivate(profileId);\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n\n  (async () => {\n    const result = await callApi('fetchProfilePhotos', user, chat);\n    if (!result || !result.photos) {\n      return;\n    }\n\n    let newGlobal = getGlobal();\n    if (isPrivate) {\n      newGlobal = updateUser(newGlobal, profileId, { photos: result.photos });\n    } else {\n      newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users!, 'id'));\n      newGlobal = updateChat(newGlobal, profileId, { photos: result.photos });\n    }\n\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import { GlobalState } from '../../global/types';\nimport { InlineBotSettings } from '../../types';\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat } from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport { RE_TME_INVITE_LINK, RE_TME_LINK } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList,\n  selectReplyingToId, selectUser,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60000; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddReducer('clickInlineButton', (global, actions, payload) => {\n  const { button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.value });\n      break;\n    case 'url':\n      if (button.value.match(RE_TME_INVITE_LINK) || button.value.match(RE_TME_LINK)) {\n        actions.openTelegramLink({ url: button.value });\n      } else {\n        actions.toggleSafeLinkModal({ url: button.value });\n      }\n      break;\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, button.messageId, button.value);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal();\n      break;\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      const { messageId, value } = button;\n      if (!chat) {\n        return;\n      }\n\n      if (value) {\n        actions.getReceipt({ receiptMessageId: value, chatId: chat.id, messageId });\n      } else {\n        actions.getPaymentForm({ chat, messageId });\n        actions.setInvoiceMessageInfo(selectChatMessage(global, chat.id, messageId));\n        actions.openPaymentModal({ chatId: chat.id, messageId });\n      }\n      break;\n    }\n  }\n});\n\naddReducer('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  if (!currentUserId || !chat) {\n    return;\n  }\n\n  void sendBotCommand(chat, currentUserId, command);\n});\n\naddReducer('restartBot', (global, actions, payload) => {\n  const { chatId } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('unblockContact', bot.id, bot.accessHash);\n    if (!result) {\n      return;\n    }\n\n    setGlobal(removeBlockedContact(getGlobal(), bot.id));\n    void sendBotCommand(chat, currentUserId, '/start');\n  })();\n});\n\naddReducer('loadTopInlineBots', (global) => {\n  const { serverTimeOffset } = global;\n  const { hash, lastRequestedAt } = global.topInlineBots;\n\n  if (lastRequestedAt && Date.now() + serverTimeOffset * 1000 - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchTopInlineBots', { hash });\n    if (!result) {\n      return;\n    }\n\n    const { hash: newHash, ids, users } = result;\n\n    let newGlobal = getGlobal();\n    newGlobal = addUsers(newGlobal, buildCollectionByKey(users, 'id'));\n    newGlobal = {\n      ...newGlobal,\n      topInlineBots: {\n        ...newGlobal.topInlineBots,\n        hash: newHash,\n        userIds: ids,\n        lastRequestedAt: Date.now() + serverTimeOffset * 1000,\n      },\n    };\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('queryInlineBot', ((global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  (async () => {\n    let inlineBotData = global.inlineBots.byUsername[username];\n\n    if (inlineBotData === false) {\n      return;\n    }\n\n    if (inlineBotData === undefined) {\n      const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n      global = getGlobal();\n      if (!inlineBot || !chat) {\n        setGlobal(replaceInlineBotSettings(global, username, false));\n        return;\n      }\n\n      global = addUsers(global, { [inlineBot.id]: inlineBot });\n      global = addChats(global, { [chat.id]: chat });\n      inlineBotData = {\n        id: inlineBot.id,\n        query: '',\n        offset: '',\n        switchPm: undefined,\n        canLoadMore: true,\n        results: [],\n      };\n\n      global = replaceInlineBotSettings(global, username, inlineBotData);\n      setGlobal(global);\n    }\n\n    if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n      return;\n    }\n\n    void runDebouncedForSearch(() => {\n      searchInlineBot({\n        username,\n        inlineBotData: inlineBotData as InlineBotSettings,\n        chatId,\n        query,\n        offset,\n      });\n    });\n  })();\n}));\n\naddReducer('sendInlineBotResult', (global, actions, payload) => {\n  const { id, queryId } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n  });\n});\n\naddReducer('resetInlineBot', ((global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n}));\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n} : {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: number;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(chat: ApiChat, currentUserId: number, command: string) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n  });\n}\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data: string) {\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n  });\n\n  if (!result || !result.message) {\n    return;\n  }\n\n  const { message, alert: isError } = result;\n\n  if (isError) {\n    getDispatch().showDialog({ data: { message } });\n  } else {\n    getDispatch().showNotification({ message });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddReducer('loadPasswordInfo', () => {\n  (async () => {\n    const result = await callApi('getPasswordInfo');\n    if (!result) {\n      return;\n    }\n\n    let global = getGlobal();\n    global = replaceSettings(global, { hasPassword: result.hasPassword });\n    global = updateTwoFaSettings(global, { hint: result.hint });\n    setGlobal(global);\n  })();\n});\n\naddReducer('checkPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('checkPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('clearPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('clearPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updatePassword', (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updateRecoveryEmail', (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddReducer('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { PaymentStep } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  selectPaymentMessageId,\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectPaymentChatId,\n  selectChat,\n  selectPaymentFormId,\n} from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setInvoiceMessageInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n} from '../../reducers';\n\naddReducer('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  if (!chat || !messageId) {\n    return;\n  }\n  void validateRequestedInfo(chat, messageId, requestInfo, saveInfo);\n});\n\nasync function validateRequestedInfo(chat: ApiChat, messageId: number, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', {\n    chat, messageId, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddReducer('getPaymentForm', (global, actions, payload) => {\n  const { chat, messageId } = payload;\n  if (!chat || !messageId) {\n    return;\n  }\n  void getPaymentForm(chat, messageId);\n});\n\nasync function getPaymentForm(chat: ApiChat, messageId: number) {\n  const result = await callApi('getPaymentForm', { chat, messageId });\n  if (!result) {\n    return;\n  }\n  let global = setPaymentForm(getGlobal(), result);\n  let step = PaymentStep.PaymentInfo;\n  if (global.payment.invoice\n    && (global.payment.invoice.shippingAddressRequested\n    || global.payment.invoice.nameRequested\n    || global.payment.invoice.phoneRequested\n    || global.payment.invoice.emailRequested)) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n}\n\naddReducer('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  void getReceipt(chat, messageId, receiptMessageId);\n});\n\nasync function getReceipt(chat: ApiChat, messageId: number, receiptMessageId: number) {\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddReducer('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddReducer('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddReducer('sendCredentialsInfo', (global, actions, payload) => {\n  const publishableKey = selectProviderPublishableKey(global);\n  if (!publishableKey) {\n    return;\n  }\n  const { credentials } = payload;\n  const { data } = credentials;\n  void sendStripeCredentials(data, publishableKey);\n});\n\naddReducer('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  const formId = selectPaymentFormId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const publishableKey = selectProviderPublishableKey(global);\n  const stripeCredentials = selectStripeCredentials(global);\n  if (!chat || !messageId || !publishableKey || !formId) {\n    return;\n  }\n\n  void sendPaymentForm(chat, messageId, formId, {\n    save: saveCredentials,\n    data: stripeCredentials,\n  }, requestInfoId, shippingOptionId);\n});\n\nasync function sendStripeCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  },\n  publishableKey: string,\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  chat: ApiChat,\n  messageId: number,\n  formId: string,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    chat, messageId, formId, credentials, requestedInfoId, shippingOptionId,\n  });\n  if (result) {\n    const global = clearPayment(getGlobal());\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddReducer('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddReducer('setInvoiceMessageInfo', (global, actions, payload) => {\n  return setInvoiceMessageInfo(global, payload);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { showNewMessageNotification } from '../../../util/notifications';\nimport { updateAppBadge } from '../../../util/appBadge';\nimport {\n  updateChat,\n  replaceChatListIds,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectCountNotMutedUnread,\n  selectNotifySettings,\n} from '../../selectors';\nimport { throttle } from '../../../util/schedulers';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1500;\nconst runThrottledForUpdateAppBadge = throttle((cb) => cb(), CURRENT_CHAT_UNREAD_DELAY, true);\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      const newGlobal = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(newGlobal);\n\n      runThrottledForUpdateAppBadge(() => updateAppBadge(selectCountNotMutedUnread(getGlobal())));\n      break;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n      break;\n    }\n\n    case 'updateChatLeave': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      const { [listType]: listIds } = global.chats.listIds;\n\n      if (listIds) {\n        global = replaceChatListIds(global, listType, listIds.filter((listId) => listId !== update.id));\n      }\n\n      global = updateChat(global, update.id, { isNotJoined: true });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatInbox': {\n      setGlobal(updateChat(global, update.id, update.chat));\n\n      break;\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        const newGlobal = getGlobal();\n        const chat = selectChat(newGlobal, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(newGlobal, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      break;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        setGlobal(updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n          ...(update.message.hasUnreadMention && {\n            unreadMentionsCount: chat.unreadMentionsCount ? chat.unreadMentionsCount + 1 : 1,\n          }),\n        }));\n      }\n\n      updateAppBadge(selectCountNotMutedUnread(getGlobal()));\n\n      const { hasWebNotifications } = selectNotifySettings(global);\n      if (hasWebNotifications) {\n        showNewMessageNotification({\n          chat,\n          message,\n          isActiveChat,\n        });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return;\n      }\n\n      ids.forEach((id) => {\n        const chatId = 'channelId' in update ? update.channelId : selectCommonBoxChatId(global, id);\n        const chat = selectChat(global, chatId);\n        if (chat && chat.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: chat.unreadMentionsCount - 1,\n          });\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return;\n      }\n\n      setGlobal(updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      }));\n\n      break;\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      global = {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (listType) {\n        const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n        let newOrderedPinnedIds = orderedPinnedIds || [];\n        if (!isPinned) {\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n        } else if (!newOrderedPinnedIds.includes(id)) {\n          // When moving pinned chats to archive, active ordered pinned ids don't get updated\n          // (to preserve chat pinned state when it returns from archive)\n          // If user already has max pinned chats, we should check for orderedIds\n          // that don't point to listed chats\n          if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n            const listIds = global.chats.listIds.active;\n            newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n          }\n\n          newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n        }\n\n        global = {\n          ...global,\n          chats: {\n            ...global.chats,\n            orderedPinnedIds: {\n              ...global.chats.orderedPinnedIds,\n              [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n            },\n          },\n        };\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      setGlobal(updateChatListType(global, id, folderId));\n\n      break;\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo && targetChat.fullInfo.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        setGlobal(updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        }));\n      }\n\n      break;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat && chat.photos) {\n        setGlobal(updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        }));\n      }\n      break;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n        global = updateChat(global, chatId, { draftDate: date });\n\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n      break;\n    }\n  }\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiUpdate, ApiMessage, ApiPollResult, ApiThreadInfo, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n} from '../../reducers';\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  isMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n} from '../../selectors';\nimport { getMessageContent, isChatPrivate, isMessageLocal } from '../../helpers';\n\nconst ANIMATION_DELAY = 350;\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const { chatId, id, message } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      setGlobal(global);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (isMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (message.isOutgoing && !(message.content && message.content.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n              isResizingContainer: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isMessageLocal(message as ApiMessage)) {\n          setTimeout(() => {\n            setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n      }\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, chatId, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread && thread.threadInfo) {\n        actions.markMessageListRead({ maxId: message.id });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isChatPrivate(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, global);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message && message.content.poll) {\n        const updatedPoll = { ...message.content.poll, ...pollUpdate };\n\n        // Workaround for poll update bug: `chosen` option gets reset when someone votes after current user\n        const { results: updatedResults } = updatedPoll.results || {};\n        if (updatedResults && !updatedResults.some(((result) => result.isChosen))) {\n          const { results } = message.content.poll.results;\n          const chosenAnswers = results && results.filter((result) => result.isChosen);\n          if (chosenAnswers) {\n            chosenAnswers.forEach((chosenAnswer) => {\n              const chosenAnswerIndex = updatedResults.findIndex((result) => result.option === chosenAnswer.option);\n              if (chosenAnswerIndex >= 0) {\n                updatedPoll.results.results![chosenAnswerIndex].isChosen = true;\n              }\n            });\n          }\n        }\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOption = newResults.find((result) => result.option === option);\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n  }\n});\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: number, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat && chat.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n        global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n        if (!firstMessageId) {\n          global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n        }\n      }\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: threadInfo.messagesCount + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first unread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const newGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(newGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = newGlobal;\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: number,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId] && chats.byId[chatId].lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: number) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: number | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    setGlobal(global);\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: number[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: number | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, ApiUserStatus } from '../../../api/types';\n\nimport { deleteUser, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: [number, ApiUserStatus][] = [];\n\nfunction scheduleStatusUpdate(userId: number, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates.push([userId, statusUpdate]);\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  let global = getGlobal();\n  pendingStatusUpdates.forEach(([userId, statusUpdate]) => {\n    global = updateUser(global, userId, {\n      status: statusUpdate,\n    });\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = [];\n}\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'deleteUser': {\n      return deleteUser(global, update.id);\n    }\n\n    case 'updateUser': {\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\n\nimport { updateStickerSet } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import {\n  addReducer, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { ApiPrivacyKey } from '../../../types';\n\nimport { addBlockedContact, removeBlockedContact } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          hash: 0,\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updatePrivacy':\n      global.settings.privacy[update.key as ApiPrivacyKey] = update.rules;\n      break;\n  }\n\n  return undefined;\n});\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS } from '../util/environment';\n\nexport default function usePreventIosPinchZoom(isDisabled = false) {\n  // Disable viewport zooming on iOS Safari\n  useEffect(() => {\n    if (!IS_IOS || isDisabled) {\n      return undefined;\n    }\n\n    document.addEventListener('gesturestart', preventEvent);\n\n    return () => {\n      document.removeEventListener('gesturestart', preventEvent);\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import { ChangeEvent } from 'react';\nimport React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport './Switcher.scss';\n\ntype OwnProps = {\n  id?: string;\n  name?: string;\n  value?: string;\n  label: string;\n  checked?: boolean;\n  disabled?: boolean;\n  inactive?: boolean;\n  noAnimation?: boolean;\n  onChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n  onCheck?: (isChecked: boolean) => void;\n};\n\nconst Switcher: FC<OwnProps> = ({\n  id,\n  name,\n  value,\n  label,\n  checked = false,\n  disabled,\n  inactive,\n  noAnimation,\n  onChange,\n  onCheck,\n}) => {\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (onChange) {\n      onChange(e);\n    }\n\n    if (onCheck) {\n      onCheck(e.currentTarget.checked);\n    }\n  }, [onChange, onCheck]);\n\n  const className = buildClassName(\n    'Switcher',\n    disabled && 'disabled',\n    inactive && 'inactive',\n    noAnimation && 'no-animation',\n  );\n\n  return (\n    <label className={className} title={label}>\n      <input\n        type=\"checkbox\"\n        id={id}\n        name={name}\n        value={value}\n        checked={checked}\n        disabled={disabled}\n        onChange={handleChange}\n      />\n      <span className=\"widget\" />\n    </label>\n  );\n};\n\nexport default memo(Switcher);\n","import React, {\n  FC, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LeftColumnContent, ISettings } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  ANIMATION_LEVEL_MAX, APP_NAME, APP_VERSION, FEEDBACK_URL,\n} from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport { isChatArchived } from '../../../modules/helpers';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport { selectTheme } from '../../../modules/selectors';\nimport switchTheme from '../../../util/switchTheme';\nimport useLang from '../../../hooks/useLang';\nimport { disableHistoryBack } from '../../../hooks/useHistoryBack';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  searchQuery?: string;\n  isLoading: boolean;\n  currentUserId?: number;\n  globalSearchChatId?: number;\n  searchDate?: number;\n  theme: ISettings['theme'];\n  animationLevel: 0 | 1 | 2;\n  chatsById?: Record<number, ApiChat>;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'openTipsChat' | 'setGlobalSearchDate' | 'setGlobalSearchChatId' | 'setSettingOption'\n)>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\n\nconst PRODUCTION_HOSTNAME = 'web.telegram.org';\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\nconst PERMANENT_VERSION_KEY = 'kz_version';\n\nconst LeftMainHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  setGlobalSearchChatId,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  openChat,\n  openTipsChat,\n  setGlobalSearchDate,\n  setSettingOption,\n}) => {\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleSwitchToWebK = () => {\n    localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify('K'));\n    disableHistoryBack();\n  };\n\n  const handleOpenTipsChat = () => {\n    openTipsChat({ langCode: lang.code });\n  };\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} alpha ${APP_VERSION}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"animations\"\n            onClick={handleAnimationLevelChange}\n          >\n            <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n            <Switcher\n              id=\"animations\"\n              label=\"Toggle Animations\"\n              checked={animationLevel > 0}\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={handleOpenTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n                onClick={disableHistoryBack}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId } = global;\n    const { byId: chatsById } = global.chats;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n    'openTipsChat',\n    'setGlobalSearchDate',\n    'setGlobalSearchChatId',\n    'setSettingOption',\n  ]),\n)(LeftMainHeader));\n","import React, { memo, FC } from '../../lib/teact/teact';\n\nimport { GlobalState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\n\nimport './ConnectionState.scss';\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst ConnectionState: FC<StateProps> = () => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionState\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">{lang('WaitingForNetwork')}</div>\n    </div>\n  );\n};\n\nexport default memo(ConnectionState);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatFolder, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { NotifyException, NotifySettings, SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { buildCollectionByKey, pick } from '../../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { getFolderUnreadDialogs } from '../../../modules/helpers';\nimport { selectNotifyExceptions, selectNotifySettings } from '../../../modules/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport useThrottledMemo from '../../../hooks/useThrottledMemo';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  chatFoldersById: Record<number, ApiChatFolder>;\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: number;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadChatFolders' | 'setActiveChatFolder' | 'openChat'>;\n\nconst INFO_THROTTLE = 3000;\nconst SAVED_MESSAGES_HOTKEY = '0';\n\nconst ChatFolders: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatsById,\n  usersById,\n  chatFoldersById,\n  notifySettings,\n  notifyExceptions,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  foldersDispatch,\n  onScreenSelect,\n  loadChatFolders,\n  setActiveChatFolder,\n  openChat,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => chatFoldersById[id] || {}).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, orderedFolderIds]);\n\n  const folderCountersById = useThrottledMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    const chatIds = Object.keys(chatsById).map(Number);\n    const counters = displayedFolders.map((folder) => {\n      const {\n        unreadDialogsCount, hasActiveDialogs,\n      } = getFolderUnreadDialogs(chatsById, usersById, folder, chatIds, notifySettings, notifyExceptions) || {};\n\n      return {\n        id: folder.id,\n        badgeCount: unreadDialogsCount,\n        isBadgeActive: hasActiveDialogs,\n      };\n    });\n\n    return buildCollectionByKey(counters, 'id');\n  }, INFO_THROTTLE, [displayedFolders, chatsById, usersById, notifySettings, notifyExceptions]);\n\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return [\n      { title: lang.code === 'en' ? 'All' : lang('FilterAllChats') },\n      ...displayedFolders.map((folder) => ({\n        title: folder.title,\n        ...(folderCountersById && folderCountersById[folder.id]),\n      })),\n    ];\n  }, [displayedFolders, folderCountersById, lang]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index);\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(0);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1));\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1));\n        }\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInAllTabRef = useRef();\n  isNotInAllTabRef.current = activeChatFolder !== 0;\n  useEffect(() => (isNotInAllTabRef.current ? captureEscKeyListener(() => {\n    if (isNotInAllTabRef.current) {\n      setActiveChatFolder(0);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack(activeChatFolder !== 0, () => setActiveChatFolder(0));\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder);\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  });\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ title }) => title === folderTabs![activeChatFolder].title);\n\n    if (!activeFolder || activeChatFolder === 0) {\n      return (\n        <ChatList\n          folderType=\"all\"\n          isActive={isActive}\n          foldersDispatch={foldersDispatch}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        isActive={isActive}\n        onScreenSelect={onScreenSelect}\n        foldersDispatch={foldersDispatch}\n      />\n    );\n  }\n\n  return (\n    <div className=\"ChatFolders\">\n      {folderTabs && folderTabs.length ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={lang.isRtl ? 'slide-reversed' : 'slide'}\n        activeKey={activeChatFolder}\n        renderCount={folderTabs ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: { byId: chatsById },\n      users: { byId: usersById },\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n    } = global;\n\n    return {\n      chatsById,\n      usersById,\n      chatFoldersById,\n      orderedFolderIds,\n      lastSyncTime,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n      activeChatFolder,\n      currentUserId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadChatFolders',\n    'setActiveChatFolder',\n    'openChat',\n  ]),\n)(ChatFolders));\n","import { useState } from '../lib/teact/teact';\n\nimport useThrottle from './useThrottle';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport useFlag from './useFlag';\n\nexport default <R extends any, D extends any[]>(resolverFn: () => R, ms: number, dependencies: D) => {\n  const runThrottled = useThrottle(ms, true);\n  const [value, setValue] = useState<R>();\n  const [isFrozen, freeze, unfreeze] = useFlag();\n\n  useHeavyAnimationCheck(freeze, unfreeze);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    runThrottled(() => {\n      setValue(resolverFn());\n    });\n  }, dependencies.concat([isFrozen]));\n\n  return value;\n};\n","import { useMemo } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\n\nexport default (ms: number, noFirst = false) => {\n  return useMemo(() => {\n    return throttle((cb) => cb(), ms, !noFirst);\n  }, [ms, noFirst]);\n};\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import React, {\n  FC, useCallback, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\nconst MENU_CLOSE_DELAY_MS = 750;\nlet closeTimeout: number | undefined;\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const handleClose = () => {\n    setIsMenuOpen(false);\n  };\n\n  const handleMouseEnter = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n  }, []);\n\n  const handleMouseLeave = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      setIsMenuOpen(false);\n    }, MENU_CLOSE_DELAY_MS);\n  }, []);\n\n  return (\n    <div\n      className={fabClassName}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import React, {\n  FC, useState, useRef, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport useBrowserOnline from '../../../hooks/useBrowserOnline';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ConnectionState from '../ConnectionState';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport ShowTransition from '../../ui/ShowTransition';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nconst APP_OUTDATED_TIMEOUT = 3 * 24 * 60 * 60 * 1000; // 3 days\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps & StateProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n  connectionState,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const isBrowserOnline = useBrowserOnline();\n  const isConnecting = !isBrowserOnline || connectionState === 'connectionStateConnecting';\n\n  const isMouseInside = useRef(false);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const [shouldRenderUpdateButton, updateButtonClassNames, handleUpdateClick] = useAppOutdatedCheck();\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <ShowTransition isOpen={isConnecting} isCustom className=\"connection-state-wrapper opacity-transition slow\">\n        {() => <ConnectionState />}\n      </ShowTransition>\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        className={isConnecting ? 'pull-down' : undefined}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders onScreenSelect={onScreenSelect} foldersDispatch={foldersDispatch} />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nfunction useAppOutdatedCheck() {\n  const [isAppOutdated, markIsAppOutdated] = useFlag(false);\n\n  useEffect(() => {\n    const timeout = window.setTimeout(markIsAppOutdated, APP_OUTDATED_TIMEOUT);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [markIsAppOutdated]);\n\n  const { shouldRender, transitionClassNames } = useShowTransition(isAppOutdated);\n\n  const handleUpdateClick = () => {\n    window.location.reload();\n  };\n\n  return [shouldRender, transitionClassNames, handleUpdateClick] as const;\n}\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['connectionState']),\n)(LeftMain);\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  activeChatFolder: number;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setGlobalSearchQuery' | 'setGlobalSearchChatId' | 'resetChatCreation' | 'setGlobalSearchDate' |\n  'loadPasswordInfo' | 'clearTwoFaError'\n)>;\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps & DispatchProps> = ({\n  searchQuery,\n  searchDate,\n  activeChatFolder,\n  shouldSkipHistoryAnimations,\n  setGlobalSearchQuery,\n  setGlobalSearchChatId,\n  resetChatCreation,\n  setGlobalSearchDate,\n  loadPasswordInfo,\n  clearTwoFaError,\n}) => {\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: boolean) => {\n    if (content === LeftColumnContent.NewGroupStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Language:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyActiveSessions:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && activeChatFolder === 0) {\n      setContent(LeftColumnContent.GlobalSearch);\n      return;\n    }\n\n    setContent(LeftColumnContent.ChatList);\n    setContactsFilter('');\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchDate({ date: undefined });\n    setGlobalSearchChatId({ id: undefined });\n    resetChatCreation();\n    setTimeout(() => {\n      setLastResetTime(Date.now());\n    }, RESET_TRANSITION_DELAY_MS);\n  }, [\n    content, activeChatFolder, settingsScreen, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId,\n    resetChatCreation,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || activeChatFolder === 0\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [activeChatFolder, content, handleReset],\n  );\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  const handleSettingsScreenSelect = (screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  };\n\n  return (\n    <Transition\n      id=\"LeftColumn\"\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n    >\n      {(isActive) => {\n        switch (contentType) {\n          case ContentType.Archived:\n            return (\n              <ArchivedChats\n                isActive={isActive}\n                onReset={handleReset}\n                onContentChange={setContent}\n              />\n            );\n          case ContentType.Settings:\n            return (\n              <Settings\n                isActive={isActive}\n                currentScreen={settingsScreen}\n                foldersState={foldersState}\n                foldersDispatch={foldersDispatch}\n                onScreenSelect={handleSettingsScreenSelect}\n                onReset={handleReset}\n                shouldSkipTransition={shouldSkipHistoryAnimations}\n              />\n            );\n          case ContentType.NewChannel:\n            return (\n              <NewChat\n                key={lastResetTime}\n                isActive={isActive}\n                isChannel\n                content={content}\n                onContentChange={setContent}\n                onReset={handleReset}\n              />\n            );\n          case ContentType.NewGroup:\n            return (\n              <NewChat\n                key={lastResetTime}\n                isActive={isActive}\n                content={content}\n                onContentChange={setContent}\n                onReset={handleReset}\n              />\n            );\n          default:\n            return (\n              <LeftMain\n                content={content}\n                searchQuery={searchQuery}\n                searchDate={searchDate}\n                contactsFilter={contactsFilter}\n                foldersDispatch={foldersDispatch}\n                onContentChange={setContent}\n                onSearchQuery={handleSearchQuery}\n                onScreenSelect={handleSettingsScreenSelect}\n                onReset={handleReset}\n                shouldSkipTransition={shouldSkipHistoryAnimations}\n              />\n            );\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n    } = global;\n    return {\n      searchQuery: query, searchDate: date, activeChatFolder, shouldSkipHistoryAnimations,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setGlobalSearchQuery', 'setGlobalSearchChatId', 'resetChatCreation', 'setGlobalSearchDate',\n    'loadPasswordInfo', 'clearTwoFaError',\n  ]),\n)(LeftColumn));\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\nimport windowSize from '../util/windowSize';\nimport { ApiDimensions } from '../api/types';\n\nconst THROTTLE = 250;\n\nexport default () => {\n  const [size, setSize] = useState<ApiDimensions>(windowSize.get());\n\n  useEffect(() => {\n    const handleResize = throttle(() => {\n      setSize(windowSize.get());\n    }, THROTTLE, false);\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return size;\n};\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nconst SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nconst MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import { MessageList, MessageListType } from '../global/types';\nimport { MAIN_THREAD_ID } from '../api/types';\n\nexport const createMessageHash = (messageList: MessageList): string => (\n  messageList.chatId.toString()\n  + (messageList.type !== 'thread' ? `_${messageList.type}`\n    : (messageList.threadId !== -1 ? `_${messageList.threadId}` : ''))\n);\n\nexport const parseMessageHash = (value: string): MessageList => {\n  const [chatId, typeOrThreadId] = value.split('_');\n  const isType = ['thread', 'pinned', 'scheduled'].includes(typeOrThreadId);\n\n  return {\n    chatId: Number(chatId),\n    type: !!typeOrThreadId && isType ? (typeOrThreadId as MessageListType) : 'thread',\n    threadId: !!typeOrThreadId && !isType ? Number(typeOrThreadId) : MAIN_THREAD_ID,\n  };\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import React, {\n  FC,\n  memo,\n  useRef,\n  useCallback,\n  useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { pick } from '../../util/iteratees';\nimport { isChatChannel, isChatSuperGroup } from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatBot,\n  selectIsUserBlocked,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canMute?: boolean;\n  canSelect?: boolean;\n  canLeave?: boolean;\n}\n\ntype DispatchProps = Pick<GlobalActions, 'joinChannel' | 'sendBotCommand' | 'openLocalTextSearch' | 'restartBot'>;\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canMute,\n  canSelect,\n  canLeave,\n  isRightColumnShown,\n  joinChannel,\n  sendBotCommand,\n  openLocalTextSearch,\n  restartBot,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && canSubscribe && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleSubscribeClick}\n        >\n          {lang(isChannel ? 'Subscribe' : 'Join Group')}\n        </Button>\n      )}\n      {!IS_SINGLE_COLUMN_LAYOUT && canStartBot && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleStartBot}\n        >\n          {lang('BotStart')}\n        </Button>\n      )}\n      {!IS_SINGLE_COLUMN_LAYOUT && canRestartBot && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleRestartBot}\n        >\n          {lang('BotRestart')}\n        </Button>\n      )}\n      {!IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n        <Button\n          round\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleSearchClick}\n          ariaLabel=\"Search in this chat\"\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n      {(IS_SINGLE_COLUMN_LAYOUT || !canSubscribe) && (\n        <Button\n          ref={menuButtonRef}\n          className={isMenuOpen ? 'active' : ''}\n          round\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          size=\"smaller\"\n          color=\"translucent\"\n          disabled={noMenu}\n          ariaLabel=\"More actions\"\n          onClick={handleHeaderMenuOpen}\n        >\n          <i className=\"icon-more\" />\n        </Button>\n      )}\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          isChannel={isChannel}\n          canStartBot={canStartBot}\n          canRestartBot={canRestartBot}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canMute={canMute}\n          canSelect={canSelect}\n          canLeave={canLeave}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (chat && chat.isRestricted) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const bot = selectChatBot(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && chat && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canSelect = !selectIsInSelectMode(global);\n    const canLeave = isMainThread && !canSubscribe;\n\n    const noMenu = !(\n      (IS_SINGLE_COLUMN_LAYOUT && canSubscribe)\n      || (IS_SINGLE_COLUMN_LAYOUT && canSearch)\n      || canMute\n      || canSelect\n      || canLeave\n    );\n\n    return {\n      noMenu,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canRestartBot,\n      canSubscribe,\n      canSearch,\n      canMute,\n      canSelect,\n      canLeave,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'joinChannel', 'sendBotCommand', 'openLocalTextSearch', 'restartBot',\n  ]),\n)(HeaderActions));\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { ApiMessage } from '../api/types';\n\nimport { DEBUG } from '../config';\nimport { isWebpSupported } from '../util/environment';\nimport { EMPTY_IMAGE_DATA_URI, webpToPngBase64 } from '../util/webpToPng';\nimport { getMessageMediaThumbDataUri } from '../modules/helpers';\n\nexport default function useWebpThumbnail(message?: ApiMessage) {\n  const thumbnail = message && getMessageMediaThumbDataUri(message);\n  const { sticker } = (message && message.content) || {};\n  const shouldDecodeThumbnail = thumbnail && sticker && !isWebpSupported() && thumbnail.includes('image/webp');\n  const [thumbnailDecoded, setThumbnailDecoded] = useState(EMPTY_IMAGE_DATA_URI);\n  const messageId = message && message.id;\n\n  useLayoutEffect(() => {\n    if (!shouldDecodeThumbnail) {\n      return;\n    }\n\n    webpToPngBase64(`b64-${messageId}`, thumbnail!)\n      .then(setThumbnailDecoded)\n      .catch((err) => {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(err);\n        }\n      });\n  }, [messageId, shouldDecodeThumbnail, thumbnail]);\n\n  return shouldDecodeThumbnail ? thumbnailDecoded : thumbnail;\n}\n","import React, {\n  FC,\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef && containerRef.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        // @ts-ignore\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          // @ts-ignore\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSummaryText } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport RippleEffect from '../ui/RippleEffect';\nimport buildClassName from '../../util/buildClassName';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const lang = useLang();\n  const mediaThumbnail = useWebpThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = getMessageSummaryText(lang, message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div className=\"HeaderPinnedMessage\" onClick={onClick} dir={lang.isRtl ? 'rtl' : undefined}>\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">{renderText(text)}</p>\n        </div>\n\n        <RippleEffect />\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageAudio, getMessageKey, getMessageMediaHash, getSenderTitle,\n} from '../../modules/helpers';\nimport { selectSender } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusMessage' | 'closeAudioPlayer'>;\n\nconst AudioPlayer: FC<OwnProps & StateProps & DispatchProps> = ({\n  message, className, noUi, sender, focusMessage, closeAudioPlayer,\n}) => {\n  const lang = useLang();\n\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const { playPause, isPlaying } = useAudioPlayer(\n    getMessageKey(message), getMediaDuration(message)!, mediaData, undefined, undefined, true,\n  );\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n  }, [closeAudioPlayer, isPlaying, playPause]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  const audio = getMessageAudio(message);\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n\n    return { sender };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['focusMessage', 'closeAudioPlayer']),\n)(AudioPlayer);\n","import React, {\n  FC, useCallback, useMemo, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport {\n  ApiMessage,\n  ApiChat,\n  ApiUser,\n  ApiTypingStatus,\n  MAIN_THREAD_ID,\n} from '../../api/types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  EDITABLE_INPUT_ID,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  isChatPrivate,\n  getMessageKey,\n  getChatTitle,\n  getSenderTitle,\n} from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectAllowedMessageActions,\n  selectIsRightColumnShown,\n  selectThreadTopMessageId,\n  selectThreadInfo,\n  selectChatMessages,\n  selectPinnedIds,\n  selectIsChatWithSelf,\n  selectForwardedSender,\n  selectScheduledIds,\n  selectIsInSelectMode,\n  selectIsChatWithBot,\n  selectCountNotMutedUnread,\n} from '../../modules/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport { pick } from '../../util/iteratees';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  chatsById?: Record<number, ApiChat>;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  isChatWithBot?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChatWithInfo' | 'pinMessage' | 'focusMessage' | 'openChat' | 'openPreviousChat' | 'loadPinnedMessages' |\n  'toggleLeftColumn' | 'exitMessageSelectMode'\n)>;\n\nconst MiddleHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  chatsById,\n  messagesCount,\n  isChatWithSelf,\n  isChatWithBot,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  openChatWithInfo,\n  pinMessage,\n  focusMessage,\n  openChat,\n  openPreviousChat,\n  loadPinnedMessages,\n  toggleLeftColumn,\n  exitMessageSelectMode,\n}) => {\n  const lang = useLang();\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds) ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID);\n      if (messageInput) {\n        messageInput.blur();\n      }\n    }\n\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined });\n      } else {\n        toggleLeftColumn();\n      }\n\n      return;\n    }\n\n    if (messageListType === 'scheduled' && isSelectModeActive) {\n      exitMessageSelectMode();\n    }\n\n    openPreviousChat();\n  }, [\n    threadId, messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode,\n  ]);\n\n  const unreadCount = useMemo(() => {\n    if (!isLeftColumnHideable || !chatsById) {\n      return undefined;\n    }\n\n    return selectCountNotMutedUnread(getGlobal()) || undefined;\n  }, [isLeftColumnHideable, chatsById]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(pinnedMessage && !shouldRenderAudioPlayer);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  function renderInfo() {\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount)}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount)}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isChatPrivate(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              withFullInfo={isChatWithBot}\n              withMediaViewer\n              withUpdatingStatus\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              noRtl\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCount = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={asClose ? 'Close' : 'Back'}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCount && unreadCount && (\n          <div className=\"unread-count active\">\n            {formatIntegerCompact(unreadCount)}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n      >\n        {renderInfo}\n      </Transition>\n\n      <div className=\"header-tools\">\n        {shouldRenderPinnedMessage && renderingPinnedMessage && !shouldRenderAudioPlayer && (\n          <HeaderPinnedMessage\n            key={chatId}\n            message={renderingPinnedMessage}\n            count={pinnedMessagesCount}\n            index={pinnedMessageIndex}\n            customTitle={renderingPinnedMessageTitle}\n            className={pinnedMessageClassNames}\n            onUnpinMessage={canUnpin ? handleUnpinMessage : undefined}\n            onClick={handlePinnedMessageClick}\n            onAllPinnedClick={handleAllPinnedClick}\n          />\n        )}\n        {shouldRenderAudioPlayer && renderingAudioMessage && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const { byId: chatsById } = global.chats;\n    const chat = selectChat(global, chatId);\n\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds && pinnedIds.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds && scheduledIds.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (threadInfo) {\n        messagesCount = threadInfo.messagesCount;\n      }\n    }\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      chatsById,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isChatWithBot: chat && selectIsChatWithBot(global, chat),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds && pinnedMessageIds.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChatWithInfo',\n    'pinMessage',\n    'focusMessage',\n    'openChat',\n    'openPreviousChat',\n    'loadPinnedMessages',\n    'toggleLeftColumn',\n    'exitMessageSelectMode',\n  ]),\n)(MiddleHeader));\n","import { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\n\nimport { getDayStart } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../modules/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: Number(getDayStart(messages[0].date * 1000)),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = Number(getDayStart(nextMessage.date * 1000));\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import React from '../../../lib/teact/teact';\n\nimport { EDITABLE_INPUT_ID } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\n\nexport function preventMessageInputBlur(e: React.MouseEvent<HTMLElement>) {\n  if (\n    IS_SINGLE_COLUMN_LAYOUT\n    || !document.activeElement\n    || document.activeElement.id !== EDITABLE_INPUT_ID\n    || e.target !== e.currentTarget\n  ) {\n    return;\n  }\n\n  e.preventDefault();\n}\n","import { RefObject } from 'react';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMessagesRead } = getDispatch();\n\n  const {\n    observe: observeIntersectionForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMessagesRead({ messageIds: mentionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  };\n}\n","import { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../modules/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMedia = photo || video;\n  const isMediaWithNoText = isMedia && !text;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (text) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video && video.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (photo || video) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (asForwarded && !customShape) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../modules/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, isForwarded, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport { IAlbum } from '../../../../types';\nimport { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction clamp(num: number, low: number, high: number) {\n  return num < low ? low : (num > high ? high : num);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1)));\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, isForwarded, false, noAvatars) - (isForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet element: HTMLSpanElement | undefined;\n\nexport default function calculateAuthorWidth(text: string) {\n  if (!element) {\n    element = document.createElement('span');\n    // eslint-disable-next-line max-len\n    element.style.font = IS_IOS\n      // eslint-disable-next-line max-len\n      ? '400 12px system-ui, -apple-system, BlinkMacSystemFont, \"Roboto\", \"Apple Color Emoji\", \"Helvetica Neue\", sans-serif'\n      : '400 12px \"Roboto\", -apple-system, \"Apple Color Emoji\", BlinkMacSystemFont, \"Helvetica Neue\", sans-serif';\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: number,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer]);\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, {\n  FC, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\nimport { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../modules/selectors';\nimport { isChatChannel } from '../../modules/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { ObserveFn, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  sender?: ApiUser | ApiChat;\n  targetUserIds?: number[];\n  targetMessage?: ApiMessage;\n  targetChatId?: number;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  sender,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById && usersById[userId]).filter<ApiUser>(Boolean as any)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    sender,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    isEmbedded ? { isEmbedded: true, asPlain: true } : undefined,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{renderText(content as string)}</span>;\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={`message${message.id}`}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const sender = chat && (isChatChannel(chat) || userId === message.chatId)\n      ? chat\n      : userId ? selectUser(global, userId) : undefined;\n\n    return {\n      usersById,\n      sender,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import React, { FC, useRef } from '../../lib/teact/teact';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getMessageSummaryText,\n  getSenderTitle,\n  getMessageRoundVideo,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const pictogramId = message && `sticker-reply-thumb${message.id}`;\n  const mediaThumbnail = useWebpThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender && getSenderTitle(lang, sender);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('EmbeddedMessage', className)}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(pictogramId, mediaThumbnail, mediaBlobUrl, isRoundVideo)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderText(getMessageSummaryText(lang, message, Boolean(mediaThumbnail)))\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  id: string | undefined,\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img\n      id={id}\n      src={blobUrl || thumbDataUri}\n      width={width}\n      height={height}\n      alt=\"\"\n      className={isRoundVideo ? 'round' : ''}\n    />\n  );\n}\n\nexport default EmbeddedMessage;\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\n\nimport { formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: () => void;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <span className=\"MessageMeta\" dir={lang.isRtl ? 'rtl' : 'ltr'} onClick={onClick}>\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\">\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import React, { FC, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { MEMOJI_STICKER_ID } from '../../../config';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport buildClassName from '../../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useFlag from '../../../hooks/useFlag';\nimport useWebpThumbnail from '../../../hooks/useWebpThumbnail';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\nimport './Sticker.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const sticker = message.content.sticker!;\n  const { isAnimated, stickerSetId } = sticker;\n  const isMemojiSticker = stickerSetId === MEMOJI_STICKER_ID;\n\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const thumbDataUri = useWebpThumbnail(message);\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline', true),\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isAnimated ? isAnimationLoaded : isMediaLoaded;\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(isMediaReady, 'slow');\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n  );\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? openModal : undefined}>\n      {!isMediaReady && (\n        <img\n          id={`sticker-thumb-${message.id}`}\n          src={thumbDataUri}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isAnimated && shouldRenderFullMedia && (\n        <img\n          id={`sticker-${message.id}`}\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isAnimated && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          id={mediaHash}\n          animationData={mediaData as AnyLiteral}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markAnimationLoaded}\n        />\n      )}\n      <StickerSetModal\n        isOpen={isModalOpen}\n        fromSticker={sticker}\n        onClose={closeModal}\n      />\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../modules/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, fullMediaData?: string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","const SELECTED_APPENDIX_BACKGROUND = Promise.resolve('rgba(255,255,255,1)');\n\nexport default function getCustomAppendixBg(src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean) {\n  return isSelected ? SELECTED_APPENDIX_BACKGROUND : getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import React, {\n  FC, useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  shouldAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  nonInteractive?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst CUSTOM_APPENDIX_ATTRIBUTE = 'data-has-custom-appendix';\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  shouldAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  nonInteractive,\n  shouldAffectAppendix,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad);\n  const shouldDownload = isDownloadAllowed && isIntersecting;\n  const {\n    mediaData, downloadProgress,\n  } = useMediaWithDownloadProgress(getMessageMediaHash(message, size), !shouldDownload);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbRef = useBlurredMediaThumbRef(message, fullMediaData);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(message, uploadProgress || downloadProgress, shouldDownload && !fullMediaData);\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasDownloadDisabled, 'slow');\n  const {\n    shouldRenderThumb, shouldRenderFullMedia, transitionClassNames,\n  } = useTransitionForMedia(fullMediaData, 'slow');\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {shouldRenderThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${width}px; height: ${height}px`}\n        />\n      )}\n      {shouldRenderFullMedia && (\n        <img\n          src={fullMediaData}\n          className={`full-media ${transitionClassNames}`}\n          width={width}\n          height={height}\n          alt=\"\"\n        />\n      )}\n      {shouldRenderSpinner && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {!fullMediaData && !isDownloadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring && (\n        <span className=\"message-upload-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import { RefObject } from 'react';\nimport { useCallback, useRef } from '../lib/teact/teact';\n\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport safePlay from '../util/safePlay';\n\nexport default function useHeavyAnimationCheckForVideo(playerRef: RefObject<HTMLVideoElement>, shouldPlay: boolean) {\n  const shouldPlayRef = useRef();\n  shouldPlayRef.current = shouldPlay;\n\n  const pause = useCallback(() => {\n    if (playerRef.current) {\n      playerRef.current.pause();\n    }\n  }, [playerRef]);\n\n  const play = useCallback(() => {\n    if (playerRef.current && shouldPlayRef.current) {\n      safePlay(playerRef.current);\n    }\n  }, [playerRef]);\n\n  useHeavyAnimationCheck(pause, play);\n}\n","import { useCallback, useRef } from '../../../../lib/teact/teact';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport safePlay from '../../../../util/safePlay';\n\nexport default (playerRef: { current: HTMLVideoElement | null }, isPlayAllowed = false) => {\n  const wasPlaying = useRef(false);\n  const isFrozen = useRef(false);\n\n  const freezePlaying = useCallback(() => {\n    isFrozen.current = true;\n\n    if (!isPlayAllowed || !playerRef.current) {\n      return;\n    }\n\n    if (!wasPlaying.current) {\n      wasPlaying.current = !playerRef.current.paused;\n    }\n\n    playerRef.current.pause();\n  }, [isPlayAllowed, playerRef]);\n\n  const unfreezePlaying = useCallback(() => {\n    // At this point HTMLVideoElement can be unmounted from the DOM\n    if (isPlayAllowed && playerRef.current && wasPlaying.current && document.body.contains(playerRef.current)) {\n      safePlay(playerRef.current);\n    }\n\n    wasPlaying.current = false;\n    isFrozen.current = false;\n  }, [isPlayAllowed, playerRef]);\n\n  const unfreezePlayingOnRaf = useCallback(() => {\n    fastRaf(unfreezePlaying);\n  }, [unfreezePlaying]);\n\n  if (!document.hasFocus()) {\n    freezePlaying();\n  }\n\n  useBackgroundMode(freezePlaying, unfreezePlayingOnRaf);\n};\n","import React, {\n  FC, useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useHeavyAnimationCheckForVideo from '../../../hooks/useHeavyAnimationCheckForVideo';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport usePauseOnInactive from './hooks/usePauseOnInactive';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  noAvatars?: boolean;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad);\n  const shouldDownload = Boolean(isDownloadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(shouldAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const { mediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldDownload,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(isIntersecting && fullMediaData);\n  // Thumbnail is always rendered so we can only disable blur if we have preview\n  const thumbRef = useBlurredMediaThumbRef(message, previewBlobUrl);\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!shouldAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || downloadProgress,\n    shouldDownload && !isBuffered,\n  );\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasDownloadDisabled);\n  const { transitionClassNames } = useTransitionForMedia(fullMediaData, 'slow');\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = (videoRef.current && videoRef.current.duration) || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded, noAvatars);\n\n  useHeavyAnimationCheckForVideo(videoRef, Boolean(isInline && shouldAutoPlay));\n  usePauseOnInactive(videoRef, isPlayAllowed);\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {!previewBlobUrl && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${width}px; height: ${height}px;`}\n        />\n      )}\n      {previewBlobUrl && (\n        <img\n          src={previewBlobUrl}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${width}px; height: ${height}px;`}\n          alt=\"\"\n        />\n      )}\n      {isInline && (\n        <video\n          ref={videoRef}\n          className={videoClassName}\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {(isDownloadAllowed && !isPlayAllowed && !shouldRenderSpinner) && (\n        <i className=\"icon-large-play\" />\n      )}\n      {shouldRenderSpinner && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {!isDownloadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-upload-progress\">...</span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser, ApiContact } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openUserInfo'>;\n\nconst Contact: FC<OwnProps & StateProps & DispatchProps> = ({\n  contact, user, openUserInfo,\n}) => {\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n\n  const handleClick = useCallback(() => {\n    openUserInfo({ id: userId });\n  }, [openUserInfo, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', Boolean(userId) && 'interactive')}\n      onClick={userId ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    return {\n      user: selectUser(global, contact.userId),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n  ]),\n)(Contact);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useCallback, memo, useState,\n} from '../../lib/teact/teact';\n\nimport Checkbox from './Checkbox';\n\ntype IRadioOption = {\n  label: string;\n  subLabel?: string;\n  value: string;\n};\n\ntype OwnProps = {\n  id?: string;\n  options: IRadioOption[];\n  selected?: string[];\n  disabled?: boolean;\n  round?: boolean;\n  loadingOptions?: string[];\n  onChange: (value: string[]) => void;\n};\n\nconst CheckboxGroup: FC<OwnProps> = ({\n  id,\n  options,\n  selected = [],\n  disabled,\n  round,\n  loadingOptions,\n  onChange,\n}) => {\n  const [values, setValues] = useState<string[]>([]);\n\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const { value, checked } = event.currentTarget;\n    let newValues: string[];\n    if (checked) {\n      newValues = [...values, value];\n    } else {\n      newValues = values.filter((v) => v !== value);\n    }\n\n    setValues(newValues);\n    onChange(newValues);\n  }, [onChange, values]);\n\n  return (\n    <div id={id} className=\"radio-group\">\n      {options.map((option) => (\n        <Checkbox\n          label={option.label}\n          subLabel={option.subLabel}\n          value={option.value}\n          checked={selected.indexOf(option.value) !== -1}\n          disabled={disabled}\n          round={round}\n          isLoading={loadingOptions ? loadingOptions.indexOf(option.value) !== -1 : undefined}\n          onChange={handleChange}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(CheckboxGroup);\n","import React, {\n  FC, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result && result.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent < answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            // @ts-ignore\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderMessageText';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<number, ApiUser>;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('loadMessage' | 'openPollResults')>;\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  loadMessage,\n  onSendVote,\n  openPollResults,\n  serverTimeOffset,\n}) => {\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    if (\n      isSubmitting\n      && poll.results.results\n      && poll.results.results.some((result) => result.isChosen)\n    ) {\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question)}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\">\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadMessage', 'openPollResults']),\n)(Poll));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getMessageWebPage } from '../../../modules/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  inPreview?: boolean;\n  lastSyncTime?: number;\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  inPreview,\n  lastSyncTime,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  let isSquarePhoto = false;\n  if (webPage && webPage.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebPage',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          shouldAutoLoad={shouldAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          nonInteractive={!isMediaInteractive}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      <div className=\"WebPage-text\">\n        <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n        {!inPreview && title && (\n          <p className=\"site-title\">{renderText(title)}</p>\n        )}\n        {truncatedDescription && (\n          <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n        )}\n      </div>\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersection={observeIntersection!}\n          noAvatars={noAvatars}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAutoPlay={shouldAutoPlay}\n          lastSyncTime={lastSyncTime}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../modules/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n}) => {\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photoUrl,\n  } = invoice!;\n\n  return (\n    <div\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <p>{renderText(text, ['emoji', 'br'])}</p>\n      )}\n      <div className={`description ${photoUrl ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n          />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { OwnProps as PhotoProps } from '../Photo';\nimport { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport { GlobalActions } from '../../../../global/types';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../modules/selectors';\n\nimport { pick } from '../../../../util/iteratees';\n\ntype OwnProps = PhotoProps & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('toggleMessageSelection')>;\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps & DispatchProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      toggleMessageSelection,\n      dimensions,\n    } = props;\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e && e.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...props.dimensions,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : props.onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={\n          buildClassName(\n            'album-item-select-wrapper',\n            isSelected && 'is-selected',\n          )\n        }\n        // @ts-ignore\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n    (setGlobal, actions) => pick(actions, [\n      'toggleMessageSelection',\n    ]),\n  )(ComponentWithSelectControl));\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\nimport { AlbumRectPart, IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent } from '../../../modules/helpers';\nimport { withGlobal } from '../../../lib/teact/teactn';\nimport { pick } from '../../../util/iteratees';\nimport withSelectControl from './hocs/withSelectControl';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'cancelSendingMessage'>;\n\nconst Album: FC<OwnProps & StateProps & DispatchProps> = ({\n  album,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  cancelSendingMessage,\n}) => {\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[message.previousLocalId || message.id];\n    const uploadProgress = fileUpload ? fileUpload.progress : undefined;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom)\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAutoPlay={shouldAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      // @ts-ignore\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      uploadsById: global.fileUploads.byMessageLocalId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'cancelSendingMessage',\n  ]),\n)(Album);\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS } from '../../common/helpers/mediaDimensions';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport buildClassName from '../../../util/buildClassName';\nimport useHeavyAnimationCheckForVideo from '../../../hooks/useHeavyAnimationCheckForVideo';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport usePauseOnInactive from './hooks/usePauseOnInactive';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  lastSyncTime?: number;\n};\n\nlet currentOnRelease: NoneToVoidFunction;\n\nfunction createCapture(onRelease: NoneToVoidFunction) {\n  return () => {\n    if (currentOnRelease) {\n      currentOnRelease();\n    }\n\n    currentOnRelease = onRelease;\n  };\n}\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad && shouldAutoPlay);\n  const shouldDownload = Boolean(isDownloadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldDownload,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = isDownloadAllowed && !isBuffered;\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasDownloadDisabled);\n  const { shouldRenderThumb, transitionClassNames } = useTransitionForMedia(mediaData, 'slow');\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const circumference = 94 * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `<svg width=\"200px\" height=\"200px\">\n          <circle cx=\"100\" cy=\"100\" r=\"94\" class=\"progress-circle\" transform=\"rotate(-90, 100, 100)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = () => {\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current!);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  };\n\n  const capturePlaying = createCapture(stopPlaying);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useHeavyAnimationCheckForVideo(playerRef, shouldPlay);\n  usePauseOnInactive(playerRef, Boolean(mediaData));\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, mediaData]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {(shouldRenderThumb || mediaData) && (\n        <div className=\"thumbnail-wrapper\">\n          <canvas\n            ref={thumbRef}\n            className=\"thumbnail\"\n            // @ts-ignore teact feature\n            style={`width: ${ROUND_VIDEO_DIMENSIONS}px; height: ${ROUND_VIDEO_DIMENSIONS}px`}\n          />\n        </div>\n      )}\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS}\n            height={ROUND_VIDEO_DIMENSIONS}\n            autoPlay\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={downloadProgress} />\n        </div>\n      )}\n      {!mediaData && !isDownloadAllowed && (\n        <i className=\"icon-large-play\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted-chat\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React, { FC } from '../../../lib/teact/teact';\n\nimport { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ button }: { button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'NOT_SUPPORTED'}\n              onClick={() => onClick({ button })}\n            >\n              {renderText(lang(button.text))}\n              {button.type === 'buy' && <i className=\"icon-card\" />}\n              {button.type === 'url' && !button.value!.match(RE_TME_LINK) && <i className=\"icon-arrow-right\" />}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiMessage, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { isChatPrivate } from '../../../modules/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectThreadInfo, selectThreadOriginChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  threadInfo: ApiThreadInfo;\n  usersById?: Record<number, ApiUser>;\n  chatsById?: Record<number, ApiChat>;\n  shouldRequestThreadUpdate: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openChat' | 'requestThreadInfoUpdate'>;\n\nconst CommentButton: FC<OwnProps & StateProps & DispatchProps> = ({\n  disabled,\n  threadInfo,\n  usersById,\n  chatsById,\n  shouldRequestThreadUpdate,\n  openChat,\n  requestThreadInfoUpdate,\n}) => {\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (shouldRequestThreadUpdate) {\n      requestThreadInfoUpdate({ chatId, threadId });\n    }\n  }, [chatId, requestThreadInfoUpdate, shouldRequestThreadUpdate, threadId]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  const recentRepliers = recentReplierIds && recentReplierIds.map((peerId) => {\n    return isChatPrivate(peerId) ? usersById![peerId] : chatsById![peerId];\n  }).filter(Boolean);\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isChatPrivate(user.id) ? user as ApiUser : undefined}\n              chat={!isChatPrivate(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }) => {\n    const { threadId, chatId } = message.threadInfo!;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId) || message.threadInfo!;\n    const chat = selectThreadOriginChat(global, chatId, threadId);\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    return {\n      threadInfo,\n      usersById,\n      chatsById,\n      shouldRequestThreadUpdate: !!chat && !threadInfo.topMessageId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n    'requestThreadInfoUpdate',\n  ]),\n)(CommentButton));\n","import React, {\n  FC,\n  memo,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../../global/types';\nimport {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiSticker,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport {\n  FocusDirection, IAlbum, ISettings, MediaViewerOrigin,\n} from '../../../types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectAnimatedEmoji,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectShouldAutoLoadMedia,\n  selectShouldAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n} from '../../../modules/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isChatPrivate,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji,\n  getSenderTitle,\n  getUserColorKey,\n} from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from '../../common/AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForMedia: ObserveFn;\n    observeIntersectionForAnimatedStickers: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsername?: string;\n  sender?: ApiUser | ApiChat;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isChannel?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  isSingleEmoji?: boolean;\n  animatedEmoji?: ApiSticker;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  shouldAutoLoadMedia?: boolean;\n  shouldAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'focusMessage' | 'openMediaViewer' | 'openAudioPlayer' |\n  'openUserInfo' | 'openChat' |\n  'cancelSendingMessage' | 'markMessagesRead' |\n  'sendPollVote' | 'toggleMessageSelection' | 'setReplyingToId' | 'openForwardMenu' |\n  'clickInlineButton' | 'disableContextMenuHint' | 'showNotification'\n)>;\n\nconst NBSP = '\\u00A0';\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>';\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\n\nconst Message: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  chatUsername,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isChannel,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  messageListType,\n  isPinnedList,\n  shouldAutoLoadMedia,\n  shouldAutoPlayMedia,\n  shouldLoopStickers,\n  focusMessage,\n  openMediaViewer,\n  openAudioPlayer,\n  openUserInfo,\n  openChat,\n  cancelSendingMessage,\n  markMessagesRead,\n  sendPollVote,\n  toggleMessageSelection,\n  setReplyingToId,\n  openForwardMenu,\n  clickInlineButton,\n  disableContextMenuHint,\n  showNotification,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const { chatId, id: messageId, threadInfo } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const { forwardInfo, viaBotId } = message;\n  const asForwarded = forwardInfo && !isChatWithSelf && !forwardInfo.isLinkedChannelPost;\n  const isInDocumentGroup = !!message.groupedId && !message.isInAlbum;\n  const isAlbum = Boolean(album) && album!.messages.length > 1;\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice,\n  } = getMessageContent(message);\n  const customShape = getMessageCustomShape(message);\n  const textParts = renderMessageText(message, highlight, isEmojiOnlyMessage(customShape));\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const signature = (\n    (isChannel && message.adminTitle) || (forwardInfo && !asForwarded && forwardInfo.adminTitle) || undefined\n  );\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && (!isInDocumentGroup || isLastInDocumentGroup)\n  );\n  const canForward = isChannel && !isScheduled;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn)) && forwardInfo.fromMessageId));\n  const avatarPeer = forwardInfo && (isChatWithSelf || !sender) ? originSender : sender;\n  const senderPeer = forwardInfo ? originSender : sender;\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    transitionClassNames,\n  );\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: message.threadInfo && message.threadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n  });\n  const withCommentButton = message.threadInfo && (!isInDocumentGroup || isLastInDocumentGroup)\n    && messageListType === 'thread' && !noComments;\n  const withAppendix = contentClassName.includes('has-appendix');\n\n  useEnsureMessage(chatId, hasReply ? message.replyToMessageId : undefined, replyMessage, message.id);\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n  useLayoutEffect(() => {\n    if (!appendixRef.current) {\n      return;\n    }\n\n    appendixRef.current.innerHTML = isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN;\n  }, [isOwn, withAppendix]);\n\n  const handleGroupDocumentMessagesSelect = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    toggleMessageSelection({\n      messageId,\n      groupedId: message.groupedId,\n    });\n  }, [messageId, message.groupedId, toggleMessageSelection]);\n\n  const handleMessageSelect = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (isLocal) {\n      return;\n    }\n\n    const params = isAlbum && album && album.messages\n      ? {\n        messageId,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: e && e.shiftKey,\n      }\n      : { messageId, withShift: e && e.shiftKey };\n    toggleMessageSelection(params);\n  }, [isLocal, isAlbum, album, messageId, toggleMessageSelection]);\n\n  const handleContainerDoubleClick = useCallback(() => {\n    setReplyingToId({ messageId });\n  }, [setReplyingToId, messageId]);\n\n  const handleContentDoubleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n  }, []);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n\n    if (!isLocal) {\n      handleBeforeContextMenu(e);\n    }\n  };\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    if (isChatPrivate(avatarPeer.id)) {\n      openUserInfo({ id: avatarPeer.id });\n    } else {\n      openChat({ id: avatarPeer.id });\n    }\n  }, [avatarPeer, openUserInfo, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (isChatPrivate(senderPeer.id)) {\n      openUserInfo({ id: senderPeer.id });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [senderPeer, showNotification, lang, openUserInfo, openChat]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openUserInfo({ id: botSender.id });\n  }, [botSender, openUserInfo]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId, threadId, messageId: message.replyToMessageId, replyMessageId: messageId,\n    });\n  }, [focusMessage, chatId, threadId, message.replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId, threadId, messageId, origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    const target = e.target as HTMLDivElement;\n    if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n      return;\n    }\n\n    if (IS_ANDROID) {\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    } else {\n      onContextMenu(e);\n    }\n  }, [onContextMenu]);\n\n  const handleContextMenu = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (IS_ANDROID) {\n      handleMessageSelect(e);\n    } else {\n      onContextMenu(e);\n    }\n  }, [onContextMenu, handleMessageSelect]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId: message.groupedId });\n  }, [openForwardMenu, chatId, message.groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId: message.groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n    focusMessage({\n      chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n    });\n  }, [focusMessage, forwardInfo, message, chatId, isInDocumentGroup]);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS;\n      } else {\n        width = calculateMediaDimensions(message, noAvatars).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isChatPrivate(avatarPeer.id);\n    const avatarUser = avatarPeer && isAvatarPeerUser ? avatarPeer as ApiUser : undefined;\n    const avatarChat = avatarPeer && !isAvatarPeerUser ? avatarPeer as ApiChat : undefined;\n    const hiddenName = !avatarPeer && forwardInfo ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && !customShape && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n    const shouldInlineMeta = !webPage && !animatedEmoji && textParts;\n    const textContentClass = buildClassName(\n      'text-content',\n      shouldInlineMeta && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            size=\"small\"\n            sticker={animatedEmoji}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            isOwn={isOwn}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {!animatedEmoji && textParts && (\n          <p className={textContentClass} dir=\"auto\">\n            {textParts}\n            {shouldInlineMeta && (\n              <MessageMeta\n                message={message}\n                outgoingStatus={outgoingStatus}\n                signature={signature}\n                onClick={handleMessageSelect}\n              />\n            )}\n          </p>\n        )}\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && <Invoice message={message} />}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const shouldRender = !(customShape && !viaBotId) && (\n      (withSenderName && !photo && !video) || asForwarded || viaBotId || forceSenderName\n    ) && (!isInDocumentGroup || isFirstInDocumentGroup);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(customShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo && forwardInfo.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"auto\"\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo && forwardInfo.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      id={`message${messageId}`}\n      className={containerClassName}\n      // @ts-ignore teact feature\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onClick={isInSelectMode ? handleMessageSelect : IS_ANDROID ? handleClick : undefined}\n      onDoubleClick={!isInSelectMode ? handleContainerDoubleClick : undefined}\n      onMouseDown={!isInSelectMode ? handleMouseDown : undefined}\n      onContextMenu={!isInSelectMode && !isLocal ? handleContextMenu : undefined}\n      onMouseEnter={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseEnter : undefined}\n      onMouseLeave={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention}\n      />\n      {!isLocal && !isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {!isLocal && isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleGroupDocumentMessagesSelect}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n        onClick={isInSelectMode && isInDocumentGroup ? handleMessageSelect : undefined}\n      >\n        <div\n          className={contentClassName}\n          // @ts-ignore\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !customShape && (!isInDocumentGroup || isFirstInDocumentGroup) && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {(!isInDocumentGroup || isLastInDocumentGroup) && !(!webPage && !animatedEmoji && textParts) && (\n            <MessageMeta\n              message={message}\n              outgoingStatus={outgoingStatus}\n              signature={signature}\n              onClick={handleMessageSelect}\n            />\n          )}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton message={message} disabled={noComments} />}\n          {withAppendix && <div className=\"svg-appendix\" ref={appendixRef} />}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickInlineButton} />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const { focusedMessage, forwardMessages, lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToMessageId, isOutgoing,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const chatUsername = chat && chat.username;\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = canShowSender ? selectSender(global, message) : undefined;\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectSender(global, replyMessage);\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    let isSelected: boolean;\n\n    if (album && album.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    return {\n      theme: selectTheme(global),\n      chatUsername,\n      forceSenderName,\n      sender,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isFocused,\n      isForwarding,\n      isChatWithSelf,\n      isChannel,\n      lastSyncTime,\n      highlight,\n      isSingleEmoji: Boolean(singleEmoji),\n      animatedEmoji: singleEmoji ? selectAnimatedEmoji(global, singleEmoji) : undefined,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        !!message.groupedId && !message.isInAlbum && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isPinnedList: messageListType === 'pinned',\n      shouldAutoLoadMedia: chat ? selectShouldAutoLoadMedia(global, message, chat, sender) : undefined,\n      shouldAutoPlayMedia: selectShouldAutoPlayMedia(global, message),\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'focusMessage',\n    'openMediaViewer',\n    'openAudioPlayer',\n    'cancelSendingMessage',\n    'openUserInfo',\n    'openChat',\n    'markMessagesRead',\n    'sendPollVote',\n    'toggleMessageSelection',\n    'setReplyingToId',\n    'openForwardMenu',\n    'clickInlineButton',\n    'disableContextMenuHint',\n    'showNotification',\n  ]),\n)(Message));\n","import { RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact, flatten } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport { getMessageOriginalId, isActionMessage, isOwnMessage } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport { isAlbum, MessageDateGroup } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport ActionMessage from './ActionMessage';\n\ninterface OwnProps {\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  threadId: number;\n  type: MessageListType;\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  openHistoryCalendar: Function;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  threadId,\n  type,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n  openHistoryCalendar,\n}) => {\n  const {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + flatten(messageGroup.senderGroups).length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (senderGroup.length === 1 && !isAlbum(senderGroup[0]) && isActionMessage(senderGroup[0])) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return flatten(senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === `message${message.previousLocalId}`) {\n          anchorIdRef.current = `message${message.id}`;\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Scheduled messages can have local IDs in the middle of the list,\n        // and keys should be ordered, so we prefix it with a date.\n        // However, this may lead to issues if server date is not synchronized with the local one.\n        const key = type !== 'scheduled' ? originalId : `${message.date}_${originalId}`;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }));\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {flatten(senderGroups)}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {flatten(dateGroups)}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import { RefObject } from 'react';\nimport { getDispatch } from '../../../lib/teact/teactn';\nimport { useCallback, useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport { MessageListType } from '../../../global/types';\n\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../config';\nimport resetScroll from '../../../util/resetScroll';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst TOOLS_FREEZE_TIMEOUT = 100;\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n) {\n  const { loadViewportMessages } = getDispatch();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useCallback(() => {\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current!;\n    const scrollBottom = scrollHeight - scrollTop - offsetHeight;\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= 0;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }, [messageIds, isViewportNewest, containerRef, onFabToggle, isUnread, onNotchToggle]);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      resetScroll(containerRef.current!);\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      resetScroll(containerRef.current!);\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport { selectChat } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: number;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadGreetingStickers' | 'sendMessage' | 'markMessageListRead'>;\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps & DispatchProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n  loadGreetingStickers,\n  sendMessage,\n  markMessageListRead,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const sticker = stickers && stickers.length ? stickers[userId % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadGreetingStickers', 'sendMessage', 'markMessageListRead',\n  ]),\n\n)(ContactGreeting));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport useLang, { LangFn } from '../../hooks/useLang';\n\nimport './NoMessages.scss';\n\ntype OwnProps = {\n  chatId: number;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf, type, isGroupChatJustCreated,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiAction, ApiMessage, ApiRestrictionReason, MAIN_THREAD_ID,\n} from '../../api/types';\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n} from '../../modules/selectors';\nimport { isChatChannel, isChatGroup, isChatPrivate } from '../../modules/helpers';\nimport { orderBy, pick } from '../../util/iteratees';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages, MessageDateGroup } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport resetScroll from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  hasFocusHighlight?: boolean;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  lastMessage?: ApiMessage;\n  botDescription?: string;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadViewportMessages' | 'setScrollOffset' | 'openHistoryCalendar'>;\n\nconst BOTTOM_THRESHOLD = 100;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst FOCUSING_DURATION = 1000;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  hasFocusHighlight,\n  isSelectModeActive,\n  loadViewportMessages,\n  setScrollOffset,\n  lastMessage,\n  botDescription,\n  threadTopMessageId,\n  hasLinkedChat,\n  openHistoryCalendar,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useOnChange(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    if (isReady) {\n      containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n    }\n  }, [windowHeight, isReady]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current || !isReady) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools, isReady]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]: [\n    typeof messageIds, typeof isViewportNewest, typeof containerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    // During animation\n    if (!container.offsetParent) {\n      return;\n    }\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, FOCUSING_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current!;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    // If two messages come at once (e.g. via Quiz Bot) then the first message will update `scrollOffset`\n    // right away (before animation) which creates inconsistency until the animation completes.\n    // To workaround that, we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n    const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && (\n      scrollOffset - (prevContainerHeight || offsetHeight) - lastItemHeight <= BOTTOM_THRESHOLD\n    );\n\n    let newScrollTop!: number;\n\n    const hasFirstMessageChanged = messageIds && prevMessageIds && messageIds[0] !== prevMessageIds[0];\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    if (isAtBottom && hasLastMessageChanged && !hasFirstMessageChanged && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            undefined,\n            true,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(scrollHeight - newScrollTop, offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, newScrollTop);\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(scrollHeight - newScrollTop, offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isChatPrivate(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isChatPrivate(chatId) && !isChatWithSelf && !isBot\n    && ((\n      !messageGroups && !lastMessage && messageIds\n      // Used to avoid flickering when deleting a greeting that has just been sent\n      && (!listItemElementsRef.current || listItemElementsRef.current.length === 0))\n      || checkSingleMessageActionByType('contactSignUp', messageGroups)\n      || (lastMessage && lastMessage.content.action && lastMessage.content.action.type === 'contactSignUp')\n    );\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && checkSingleMessageActionByType('chatCreate', messageGroups);\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    hasFocusHighlight && 'has-focus-highlight',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botDescription ? (\n        <div className=\"empty rich\"><span>{renderText(lang(botDescription), ['br', 'emoji', 'links'])}</span></div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated) ? (\n        <NoMessages\n          chatId={chatId}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n          openHistoryCalendar={openHistoryCalendar}\n        />\n      ) : (\n        <Loading color=\"white\" />\n      )}\n    </div>\n  );\n};\n\nfunction checkSingleMessageActionByType(type: ApiAction['type'], messageGroups?: MessageDateGroup[]) {\n  return messageGroups\n  && messageGroups.length === 1\n  && messageGroups[0].senderGroups.length === 1\n  && messageGroups[0].senderGroups[0].length === 1\n  && 'content' in messageGroups[0].senderGroups[0][0]\n  && messageGroups[0].senderGroups[0][0].content.action\n  && messageGroups[0].senderGroups[0][0].content.action.type === type;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n    const hasFocusHighlight = focusingId ? !global.focusedMessage!.noHighlight : undefined;\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const bot = selectChatBot(global, chatId);\n    let botDescription: string | undefined;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      const chatBot = selectChatBot(global, chatId)!;\n      if (chatBot.fullInfo) {\n        botDescription = chatBot.fullInfo.botDescription || 'NoMessages';\n      } else {\n        botDescription = 'Updating bot info...';\n      }\n    }\n\n    return {\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isBot: Boolean(bot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      hasFocusHighlight,\n      isSelectModeActive: selectIsInSelectMode(global),\n      botDescription,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadViewportMessages',\n    'setScrollOffset',\n    'openHistoryCalendar',\n  ]),\n)(MessageList));\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useDebounce from '../../../hooks/useDebounce';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useDebounce(DEBOUNCE, false);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport { debounce } from '../util/schedulers';\n\nexport default function useDebounce(ms: number, shouldRunFirst?: boolean, shouldRunLast?: boolean) {\n  return useMemo(() => {\n    return debounce((cb) => cb(), ms, shouldRunFirst, shouldRunLast);\n  }, [ms, shouldRunFirst, shouldRunLast]);\n}\n","import React, {\n  FC, useCallback, memo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../modules/selectors';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport { pick } from '../../util/iteratees';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ScrollDownButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n};\n\ntype StateProps = {\n  messageListType?: MessageListType;\n  unreadCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusNextReply'>;\n\nconst FOCUS_MARGIN = 20;\n\nconst ScrollDownButton: FC<OwnProps & StateProps & DispatchProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  unreadCount,\n  focusNextReply,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    'ScrollDownButton',\n    isShown && 'revealed',\n    !canPost && 'no-composer',\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <div className=\"ScrollDownButton-inner\">\n        <Button\n          color=\"secondary\"\n          round\n          onClick={handleClick}\n          ariaLabel={lang('AccDescrPageDown')}\n        >\n          <i className=\"icon-arrow-down\" />\n        </Button>\n        {Boolean(unreadCount) && (\n          <div className=\"unread-count\">{formatIntegerCompact(unreadCount!)}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    return {\n      messageListType,\n      unreadCount: chat && threadId === MAIN_THREAD_ID && messageListType === 'thread' ? chat.unreadCount : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['focusNextReply']),\n)(ScrollDownButton));\n","import { ApiAttachment } from '../../../../api/types';\nimport { preloadImage, preloadVideo, createPosterForVideo } from '../../../../util/files';\n\nconst MAX_QUICK_VIDEO_SIZE = 10 * 1024 ** 2; // 10 MB\nconst MAX_QUICK_IMG_SIZE = 1280; // px\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let previewBlobUrl;\n\n  if (mimeType.startsWith('image/')) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n\n      if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE || mimeType !== 'image/jpeg') {\n        const newBlob = await squeezeImage(img);\n        if (newBlob) {\n          URL.revokeObjectURL(blobUrl);\n          return buildAttachment(filename, newBlob, true, options);\n        } else {\n          return buildAttachment(filename, blob, false, options);\n        }\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (mimeType.startsWith('video/')) {\n    // Videos < 10 MB are always sent in quick mode (in other clients).\n    // Quick mode for videos > 10 MB is not supported until client-side video squeezing is implemented.\n    if (size < MAX_QUICK_VIDEO_SIZE) {\n      const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n      quick = { width, height, duration };\n    }\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    previewBlobUrl,\n    ...options,\n  };\n}\n\nfunction squeezeImage(img: HTMLImageElement): Promise<Blob | null> {\n  return new Promise((resolve) => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d')!;\n\n    let { width, height } = img;\n\n    if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE) {\n      if (width >= height) {\n        height *= MAX_QUICK_IMG_SIZE / width;\n        width = MAX_QUICK_IMG_SIZE;\n      } else {\n        width *= MAX_QUICK_IMG_SIZE / height;\n        height = MAX_QUICK_IMG_SIZE;\n      }\n    }\n\n    canvas.width = width;\n    canvas.height = height;\n\n    ctx.drawImage(img, 0, 0, img.width, img.height, 0, 0, width, height);\n    canvas.toBlob(resolve, 'image/jpeg', 100);\n  });\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","export default __webpack_public_path__ + \"c0155344d336103c2b6a0b28cc510750.js\";","// @ts-ignore\nimport encoderPath from 'file-loader!opus-recorder/dist/encoderWorker.min';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\ninterface IOpusRecorder extends Omit<MediaRecorder, 'start' | 'ondataavailable'> {\n  new(options: AnyLiteral): IOpusRecorder;\n\n  start(stream?: MediaStreamAudioSourceNode): void;\n\n  sourceNode: MediaStreamAudioSourceNode;\n\n  ondataavailable: (typedArray: Uint8Array) => void;\n}\n\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    // @ts-ignore\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_IOS, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nexport default () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_IOS && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n","import { StateHookSetter, useEffect } from '../../../../lib/teact/teact';\nimport { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nexport default (\n  insertTextAndUpdateCursor: (text: string, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const { items } = e.clipboardData;\n      const media = Array.from(items).find((item) => CLIPBOARD_ACCEPTED_TYPES.includes(item.type));\n      const file = media && media.getAsFile();\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n\n      if (!file && !pastedText) {\n        return;\n      }\n\n      e.preventDefault();\n\n      if (file && !editedMessage) {\n        const attachment = await buildAttachment(file.name, file, true);\n        setAttachments((attachments) => [\n          ...attachments,\n          attachment,\n        ]);\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText, input ? input.id : undefined);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments]);\n};\n","import { ApiFormattedText } from '../../../../api/types';\nimport { renderTextWithEntities } from '../../../common/helpers/renderMessageText';\n\nexport default function getMessageTextAsHtml(formattedText?: ApiFormattedText) {\n  const { text, entities } = formattedText || {};\n  if (!text) {\n    return '';\n  }\n\n  const result = renderTextWithEntities(\n    text,\n    entities,\n    undefined,\n    undefined,\n    true,\n  );\n\n  if (Array.isArray(result)) {\n    return result.join('');\n  }\n\n  return result;\n}\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\n\nimport { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_ID } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../helpers/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: number | undefined;\nlet currentThreadId: number | undefined;\n\nexport default (\n  draft: ApiFormattedText | undefined,\n  chatId: number,\n  threadId: number,\n  html: string,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  saveDraft: GlobalActions['saveDraft'],\n  clearDraft: GlobalActions['clearDraft'],\n) => {\n  const updateDraft = useCallback((draftChatId: number, draftThreadId: number) => {\n    if (htmlRef.current.length && !editedMessage) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(htmlRef.current!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (!draft) {\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(draft));\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId]);\n\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\nimport { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nconst tempEl = document.createElement('div');\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: number,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const text = getPlainText(html);\n  const { queryInlineBot, resetInlineBot } = getDispatch();\n  const { username, query, canShowHelp } = parseStartWithUsernameString(text);\n  const usernameLowered = username.toLowerCase();\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = inlineBots && inlineBots[usernameLowered];\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [offset, chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results && results.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    closeTooltip: unmarkIsOpen,\n    loadMore,\n    username,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  return tempEl.innerText;\n}\n\nfunction parseStartWithUsernameString(text: string) {\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return { username: '', query: '', canShowHelp: false };\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n  };\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import React, {\n  FC, useRef, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Button, { OwnProps as ButtonProps } from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={IS_TOUCH_ENV ? onActivate : undefined}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AttachMenu = useModuleLoader(Bundles.Extra, 'AttachMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachMenu ? <AttachMenu {...props} /> : undefined;\n};\n\nexport default memo(AttachMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './CustomSendMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomSendMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomSend = useModuleLoader(Bundles.Extra, 'CustomSendMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomSend ? <CustomSend {...props} /> : undefined;\n};\n\nexport default memo(CustomSendMenuAsync);\n","import React, { FC } from '../../../lib/teact/teact';\nimport { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default StickerTooltipAsync;\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../modules/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('clickInlineButton')>;\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen, message, onClose, clickInlineButton,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n  const [forceOpen, markForceOpen, unmarkForceOpen] = useFlag(true);\n\n  const handleClose = () => {\n    unmarkForceOpen();\n    onClose();\n  };\n\n  useEffect(() => {\n    markForceOpen();\n  }, [markForceOpen, message]);\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen || forceOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={handleClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={handleClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'NOT_SUPPORTED'}\n                onClick={() => clickInlineButton({ button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'clickInlineButton',\n  ]),\n)(BotKeyboardMenu));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n} from '../../../modules/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { pick } from '../../../util/iteratees';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport { isChatPrivate } from '../../../modules/helpers';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setReplyingToId' | 'setEditingId' | 'focusMessage' | 'exitForwardMode'>;\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<StateProps & DispatchProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  setReplyingToId,\n  setEditingId,\n  focusMessage,\n  exitForwardMode,\n}) => {\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n  }, [replyingToId, editingId, forwardedMessagesCount, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, message]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? `${forwardedMessagesCount} forwarded messages`\n    : undefined;\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className}>\n      <div>\n        <Button round color=\"translucent\" ariaLabel=\"Cancel replying\" onClick={clearEmbedded}>\n          <i className=\"icon-close\" />\n        </Button>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={message}\n          sender={sender}\n          customText={customText}\n          title={editingId ? 'Edit Message' : undefined}\n          onClick={handleMessageClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      currentUserId,\n      forwardMessages: { fromChatId, toChatId, messageIds: forwardMessageIds },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n\n    let message;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = selectChatMessage(global, fromChatId!, forwardMessageIds![0]);\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = chatId === currentUserId;\n\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      sender = isChatPrivate(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n    }\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setReplyingToId',\n    'setEditingId',\n    'focusMessage',\n    'exitForwardMode',\n  ]),\n)(ComposerEmbeddedMessage));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import React, {\n  FC, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiMessage, ApiMessageEntityTypes, ApiWebPage } from '../../../api/types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n};\ntype DispatchProps = Pick<GlobalActions, 'loadWebPagePreview' | 'clearWebPagePreview' | 'toggleMessageWebPage'>;\n\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  loadWebPagePreview,\n  clearWebPagePreview,\n  toggleMessageWebPage,\n}) => {\n  const link = useMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities && entities.find(({ type }) => type === ApiMessageEntityTypes.TextUrl);\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  const handleClearWebpagePreview = () => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  };\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <Button round color=\"translucent\" ariaLabel=\"Clear Webpage Preview\" onClick={handleClearWebpagePreview}>\n          <i className=\"icon-close\" />\n        </Button>\n        <WebPage message={messageStub} inPreview />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadWebPagePreview', 'clearWebPagePreview', 'toggleMessageWebPage',\n  ]),\n)(WebPagePreview));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './CalendarModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CalendarModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CalendarModal = useModuleLoader(Bundles.Extra, 'CalendarModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CalendarModal ? <CalendarModal {...props} /> : undefined;\n};\n\nexport default memo(CalendarModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState, MessageListType } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport { BASE_EMOJI_KEYWORD_LANG, EDITABLE_INPUT_ID, SCHEDULED_WHEN_ONLINE } from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport {\n  selectChat,\n  selectIsChatWithBot,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatUser,\n  selectChatMessage,\n} from '../../../modules/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatPrivate,\n  isChatAdmin,\n} from '../../../modules/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration, getDayStartAt } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport insertHtmlInSelection from '../../../util/insertHtmlInSelection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport windowSize from '../../../util/windowSize';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu.async';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport Portal from '../../ui/Portal';\nimport CalendarModal from '../../common/CalendarModal.async';\nimport PaymentModal from '../../payment/PaymentModal.async';\nimport ReceiptModal from '../../payment/ReceiptModal.async';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  editingMessage?: ApiMessage;\n  chat?: ApiChat;\n  draft?: ApiFormattedText;\n  isChatWithBot?: boolean;\n  isChatWithSelf?: boolean;\n  isRightColumnShown?: boolean;\n  isSelectModeActive?: boolean;\n  isForwarding?: boolean;\n  isPollModalOpen?: boolean;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  botKeyboardMessageId?: number;\n  botKeyboardPlaceholder?: string;\n  withScheduledButton?: boolean;\n  shouldSchedule?: boolean;\n  canScheduleUntilOnline?: boolean;\n  stickersForEmoji?: ApiSticker[];\n  groupChatMembers?: ApiChatMember[];\n  currentUserId?: number;\n  usersById?: Record<number, ApiUser>;\n  recentEmojis: string[];\n  lastSyncTime?: number;\n  contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n  shouldSuggestStickers?: boolean;\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  serverTimeOffset: number;\n  topInlineBotIds?: number[];\n  isInlineBotLoading: boolean;\n  inlineBots?: Record<string, false | InlineBotSettings>;\n} & Pick<GlobalState, 'connectionState'>;\n\ntype DispatchProps = Pick<GlobalActions, (\n  'sendMessage' | 'editMessage' | 'saveDraft' | 'forwardMessages' |\n  'clearDraft' | 'showDialog' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'openPollModal' | 'closePollModal' | 'loadScheduledHistory' | 'openChat' | 'closePaymentModal' |\n  'clearReceipt' | 'addRecentEmoji' | 'sendInlineBotResult'\n)>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n}\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst CAPTION_MAX_LENGTH = 1024;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps & DispatchProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  isPollModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  usersById,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  baseEmojiKeywords,\n  emojiKeywords,\n  serverTimeOffset,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  sendMessage,\n  editMessage,\n  saveDraft,\n  clearDraft,\n  showDialog,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  forwardMessages,\n  openPollModal,\n  closePollModal,\n  loadScheduledHistory,\n  closePaymentModal,\n  openChat,\n  clearReceipt,\n  addRecentEmoji,\n  sendInlineBotResult,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n  const [\n    scheduledMessageArgs, setScheduledMessageArgs,\n  ] = useState<GlobalState['messages']['contentToBeScheduled'] | undefined>();\n  const { width: windowWidth } = windowSize.get();\n\n  // Cache for frequently updated state\n  const htmlRef = useRef<string>(html);\n  useEffect(() => {\n    htmlRef.current = html;\n  }, [html]);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID && isReady) {\n      loadScheduledHistory();\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      setScheduledMessageArgs(contentToBeScheduled);\n      openCalendar();\n    }\n  }, [contentToBeScheduled, openCalendar]);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  const mainButtonState = editingMessage\n    ? MainButtonState.Edit\n    : !IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding\n      ? MainButtonState.Send\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, mentionFilter,\n    closeMentionTooltip, insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    html,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n    usersById,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const allowedAttachmentOptions = useMemo(() => {\n    return getAllowedAttachmentOptions(chat, isChatWithBot);\n  }, [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    const messageInput = document.getElementById(inputId)!;\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, []);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, []);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments([]);\n    closeStickerTooltip();\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @perf\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeCalendar, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu]);\n\n  // Handle chat change\n  const prevChatId = usePrevious(chatId);\n  useEffect(() => {\n    if (!prevChatId || chatId === prevChatId) {\n      return;\n    }\n\n    stopRecordingVoice();\n    resetComposer();\n  }, [chatId, prevChatId, resetComposer, stopRecordingVoice]);\n\n  const handleEditComplete = useEditing(htmlRef, setHtml, editingMessage, resetComposer, openDeleteModal, editMessage);\n  useDraft(draft, chatId, threadId, html, htmlRef, setHtml, editingMessage, saveDraft, clearDraft);\n  useClipboardPaste(insertTextAndUpdateCursor, setAttachments, editingMessage);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, []);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments([]);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    if (currentAttachments.length && text && text.length > CAPTION_MAX_LENGTH) {\n      const extraLength = text.length - CAPTION_MAX_LENGTH;\n      showDialog({\n        data: {\n          message: 'CAPTION_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n      return;\n    }\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = Math.floor(Date.now() / 1000) + serverTimeOffset;\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n    if (isForwarding) {\n      forwardMessages();\n    }\n\n    lastMessageSendTimeSeconds.current = Math.floor(Date.now() / 1000) + serverTimeOffset;\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, serverTimeOffset, clearDraft, chatId,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang,\n  ]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, shouldPreserveInput = false) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ sticker });\n      openCalendar();\n    } else {\n      sendMessage({ sticker });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ gif });\n      openCalendar();\n    } else {\n      sendMessage({ gif });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleInlineBotSelect = useCallback((inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    sendInlineBotResult({\n      id: inlineResult.id,\n      queryId: inlineResult.queryId,\n    });\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, connectionState, resetComposer, sendInlineBotResult]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ poll });\n      closePollModal();\n      openCalendar();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, openCalendar, sendMessage, shouldSchedule]);\n\n  const handleSilentSend = useCallback(() => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ isSilent: true });\n      openCalendar();\n    } else {\n      handleSend(true);\n    }\n  }, [handleSend, openCalendar, shouldSchedule]);\n\n  const handleMessageSchedule = useCallback((date: Date, isWhenOnline = false) => {\n    const { isSilent, ...restArgs } = scheduledMessageArgs || {};\n\n    // Scheduled time can not be less than 10 seconds in future\n    const scheduledAt = Math.round(Math.max(date.getTime(), Date.now() + 60 * 1000) / 1000)\n      + (isWhenOnline ? 0 : serverTimeOffset);\n\n    if (!scheduledMessageArgs || Object.keys(restArgs).length === 0) {\n      handleSend(!!isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...scheduledMessageArgs,\n        scheduledAt,\n      });\n      requestAnimationFrame(() => {\n        resetComposer();\n      });\n    }\n    closeCalendar();\n  }, [closeCalendar, handleSend, resetComposer, scheduledMessageArgs, sendMessage, serverTimeOffset]);\n\n  const handleMessageScheduleUntilOnline = useCallback(() => {\n    handleMessageSchedule(new Date(SCHEDULED_WHEN_ONLINE * 1000), true);\n  }, [handleMessageSchedule]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n  }, [closeCalendar]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        if (shouldSchedule) {\n          if (activeVoiceRecording) {\n            pauseRecordingVoice();\n          }\n          openCalendar();\n        } else {\n          handleSend();\n          requestAnimationFrame(() => {\n            resetComposer();\n          });\n        }\n        break;\n      case MainButtonState.Record:\n        startRecordingVoice();\n        break;\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, resetComposer, shouldSchedule, startRecordingVoice, handleEditComplete,\n    activeVoiceRecording, openCalendar, pauseRecordingVoice, handleSend,\n  ]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && !allowedAttachmentOptions.canAttachMedia;\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = areVoiceMessagesNotAllowed\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : (shouldSchedule ? openCalendar : handleSend);\n\n  return (\n    <div className={className}>\n      {allowedAttachmentOptions.canAttachMedia && isReady && (\n        <Portal containerId=\"#middle-column-portals\">\n          <DropArea\n            isOpen={dropAreaState !== DropAreaState.None}\n            withQuick={[dropAreaState, prevDropAreaState].includes(DropAreaState.QuickFile)}\n            onHide={onDropHide}\n            onFileSelect={handleFileSelect}\n          />\n        </Portal>\n      )}\n      <AttachmentModal\n        attachments={attachments}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        usersById={usersById}\n        recentEmojis={recentEmojis}\n        isReady={isReady}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        addRecentEmoji={addRecentEmoji}\n        onSend={shouldSchedule ? openCalendar : handleSend}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={Boolean(isPollModalOpen)}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      <PaymentModal\n        isOpen={Boolean(isPaymentModalOpen)}\n        onClose={closePaymentModal}\n      />\n      <ReceiptModal\n        isOpen={Boolean(isReceiptModalOpen)}\n        onClose={clearReceipt}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        filter={mentionFilter}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n        usersById={usersById}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        allowedAttachmentOptions={allowedAttachmentOptions}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!allowedAttachmentOptions.canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              faded\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={`${isSymbolMenuOpen ? 'activated' : ''}`}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            shouldSetFocus={isSymbolMenuOpen}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={`${isBotKeyboardOpen ? 'activated' : ''}`}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {!activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={`${isAttachMenuOpen ? 'activated' : ''}`}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openAttachMenu}\n              ariaLabel=\"Add an attachment\"\n            >\n              <i className=\"icon-attach\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <StickerTooltip\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <AttachMenu\n            isOpen={isAttachMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            onClose={closeAttachMenu}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          <SymbolMenu\n            isOpen={isSymbolMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSilentSend={!isChatWithSelf ? handleSilentSend : undefined}\n          onScheduleSend={!shouldSchedule ? openCalendar : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={scheduledDefaultDate.getTime()}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        secondButtonLabel={canScheduleUntilOnline ? 'Send When Online' : undefined}\n        onClose={handleCloseCalendar}\n        onSubmit={handleMessageSchedule}\n        onSecondButtonClick={canScheduleUntilOnline ? handleMessageScheduleUntilOnline : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatUser = chat && selectChatUser(global, chat);\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      canScheduleUntilOnline: (\n        !isChatWithSelf && !isChatWithBot\n        && (chat && chatUser && isChatPrivate(chatId) && chatUser.status && Boolean(chatUser.status.wasOnline))\n      ),\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds && scheduledIds.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage ? keyboardMessage.keyboardPlaceholder : undefined,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      isPollModalOpen: global.isPollModalOpen,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat && chat.fullInfo && chat.fullInfo.members,\n      topInlineBotIds: global.topInlineBots && global.topInlineBots.userIds,\n      currentUserId: global.currentUserId,\n      usersById: global.users.byId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      shouldSuggestStickers: global.settings.byKey.shouldSuggestStickers,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords ? baseEmojiKeywords.keywords : undefined,\n      emojiKeywords: emojiKeywords ? emojiKeywords.keywords : undefined,\n      serverTimeOffset: global.serverTimeOffset,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'sendMessage',\n    'editMessage',\n    'saveDraft',\n    'clearDraft',\n    'showDialog',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'forwardMessages',\n    'openPollModal',\n    'closePollModal',\n    'closePaymentModal',\n    'clearReceipt',\n    'loadScheduledHistory',\n    'openChat',\n    'addRecentEmoji',\n    'sendInlineBotResult',\n  ]),\n)(Composer));\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getDispatch();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(html) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({ emoji: html });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","export default function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection && selection.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n    } else {\n      range.collapse(false);\n    }\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../../config';\nimport parseMessageInput from '../helpers/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../modules/helpers';\n\nexport default (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: () => void,\n  openDeleteModal: () => void,\n  editMessage: GlobalActions['editMessage'],\n) => {\n  // TODO useOnChange\n  // Handle editing message\n  useEffect(() => {\n    if (!editedMessage) {\n      setHtml('');\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(editedMessage.content.text));\n\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [editedMessage, setHtml]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer]);\n\n  return handleEditComplete;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import React, {\n  FC, useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChatBannedRights, MAIN_THREAD_ID } from '../../api/types';\nimport { GlobalActions, MessageListType, MessageList as GlobalMessageList } from '../../global/types';\nimport { ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  CONTENT_TYPES_FOR_QUICK_UPLOAD,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectTheme,\n} from '../../modules/selectors';\nimport { getCanPostInChat, getMessageSendingRestrictionReason, isChatPrivate } from '../../modules/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { createMessageHash } from '../../util/routing';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport ScrollDownButton from './ScrollDownButton';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\n\nimport './MiddleColumn.scss';\n\ntype StateProps = {\n  chatId?: number;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioMessage?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  messageLists?: GlobalMessageList[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'unpinAllMessages' | 'loadUser' | 'closeLocalTextSearch' | 'exitMessageSelectMode'\n)>;\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction canBeQuicklyUploaded(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && CONTENT_TYPES_FOR_QUICK_UPLOAD.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  messageLists,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioMessage,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  openChat,\n  unpinAllMessages,\n  loadUser,\n  closeLocalTextSearch,\n  exitMessageSelectMode,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT || animationLevel === ANIMATION_LEVEL_MIN);\n\n  const hasTools = hasPinnedOrAudioMessage && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION);\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  useEffect(() => {\n    if (animationLevel === ANIMATION_LEVEL_MIN) {\n      setIsReady(true);\n    }\n  }, [animationLevel]);\n\n  const handleTransitionEnd = (e: React.TransitionEvent<HTMLDivElement>) => {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  };\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      .every(canBeQuicklyUploaded);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openChat({ id: chatId });\n  }, [unpinAllMessages, openChat, closeUnpinModal, chatId]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    customBackground && 'custom-bg-image',\n    backgroundColor && 'custom-bg-color',\n    customBackground && isBackgroundBlurred && 'blurred',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  const closeChat = () => {\n    openChat({ id: undefined }, true);\n  };\n\n  useHistoryBack(renderingChatId && renderingThreadId,\n    closeChat, undefined, undefined, undefined,\n    messageLists ? messageLists.map(createMessageHash) : []);\n\n  useHistoryBack(isMobileSearchActive, closeLocalTextSearch);\n  useHistoryBack(isSelectModeActive, exitMessageSelectMode);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleTransitionEnd}\n      // @ts-ignore teact-feature\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        id=\"middle-column-bg\"\n        // @ts-ignore\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n            >\n              {() => (\n                <>\n                  <MessageList\n                    key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    type={renderingMessageListType}\n                    canPost={renderingCanPost}\n                    hasTools={renderingHasTools}\n                    onFabToggle={setIsFabShown}\n                    onNotchToggle={setIsNotchShown}\n                    isReady={isReady}\n                  />\n                  <div className={footerClassName}>\n                    {renderingCanPost && (\n                      <Composer\n                        chatId={renderingChatId}\n                        threadId={renderingThreadId}\n                        messageListType={renderingMessageListType}\n                        dropAreaState={dropAreaState}\n                        onDropHide={handleHideDropArea}\n                        isReady={isReady}\n                      />\n                    )}\n                    {isPinnedMessageList && (\n                      <div className=\"unpin-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          color=\"secondary\"\n                          className=\"unpin-all-button\"\n                          onClick={handleOpenUnpinModal}\n                        >\n                          <i className=\"icon-unpin\" />\n                          <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                        </Button>\n                      </div>\n                    )}\n                    {!isPinnedMessageList && !renderingCanPost && messageSendingRestrictionReason && (\n                      <div className={messagingDisabledClassName}>\n                        <div className=\"messaging-disabled-inner\">\n                          <span>\n                            {messageSendingRestrictionReason}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n                    <MessageSelectToolbar\n                      messageListType={renderingMessageListType}\n                      isActive={isSelectModeActive}\n                      canPost={renderingCanPost}\n                    />\n                  </div>\n                </>\n              )}\n            </Transition>\n\n            <ScrollDownButton\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const { messageLists } = global.messages;\n    const currentMessageList = selectCurrentMessageList(global);\n    const { isLeftColumnShown, chats: { listIds } } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate: isChatPrivate(chatId),\n      canPost: !isPinnedMessageList && (!chat || canPost) && !isBotNotStarted,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat && chat.currentUserBannedRights,\n      defaultBannedRights: chat && chat.defaultBannedRights,\n      hasPinnedOrAudioMessage: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(pinnedIds && pinnedIds.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      messageLists,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat', 'unpinAllMessages', 'loadUser', 'closeLocalTextSearch', 'exitMessageSelectMode',\n  ]),\n)(MiddleColumn));\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nexport default (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n} from '../../modules/selectors';\nimport { isChatAdmin, isChatChannel, isChatPrivate } from '../../modules/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport './RightHeader.scss';\nimport { getDayStartAt } from '../../util/dateFormat';\n\ntype OwnProps = {\n  chatId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isAddingChatMembers?: boolean;\n  shouldSkipAnimation?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canManage?: boolean;\n  isChannel?: boolean;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalTextSearchQuery' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'searchTextMessagesLocal' | 'toggleManagement' | 'openHistoryCalendar'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupMembers,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n}\n\nconst RightHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canManage,\n  isChannel,\n  onClose,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  setLocalTextSearchQuery,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  searchTextMessagesLocal,\n  toggleManagement,\n  openHistoryCalendar,\n  shouldSkipAnimation,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const backButtonRef = useRef<HTMLDivElement>(null);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : undefined // Never reached\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang('GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    (shouldSkipTransition || shouldSkipAnimation) && 'no-transition',\n  );\n\n  // Add class in the next AF to synchronize with animation with Transition components\n  useEffect(() => {\n    backButtonRef.current!.classList.toggle('state-back', isBackButton);\n  }, [isBackButton]);\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div ref={backButtonRef} className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipAnimation) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isChatPrivate(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n\n    return {\n      canManage,\n      isChannel,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalTextSearchQuery',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'searchTextMessagesLocal',\n    'toggleManagement',\n    'openHistoryCalendar',\n  ]),\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiChatMember, ApiMessage, ApiUser } from '../../../api/types';\nimport { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../modules/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  usersById?: Record<number, ApiUser>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: number,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(groupChatMembers.map(({ userId }) => userId), usersById, undefined, serverTimeOffset);\n  }, [groupChatMembers, serverTimeOffset, usersById]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForMembers(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  let viewportIds: number[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForMembers(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  memberIds?: number[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    memberIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !memberIds || viewportIds[0] === memberIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      ).reverse();\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport {\n  ApiUser, ApiChat, ApiMediaFormat, ApiPhoto,\n} from '../../api/types';\n\nimport {\n  getChatAvatarHash, isDeletedUser, getUserColorKey, getChatTitle, isChatPrivate, getUserFullName,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport buildClassName from '../../util/buildClassName';\nimport { getFirstLetters } from '../../util/textFormat';\nimport useMedia from '../../hooks/useMedia';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\n\nimport './ProfilePhoto.scss';\n\ntype OwnProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isFirstPhoto?: boolean;\n  isSavedMessages?: boolean;\n  photo?: ApiPhoto;\n  lastSyncTime?: number;\n  onClick: NoneToVoidFunction;\n};\n\nconst ProfilePhoto: FC<OwnProps> = ({\n  chat,\n  user,\n  photo,\n  isFirstPhoto,\n  isSavedMessages,\n  lastSyncTime,\n  onClick,\n}) => {\n  const lang = useLang();\n  const isDeleted = user && isDeletedUser(user);\n\n  function getMediaHash(size: 'normal' | 'big' = 'big', forceAvatar?: boolean) {\n    if (photo && !forceAvatar) {\n      return `photo${photo.id}?size=c`;\n    }\n\n    let hash: string | undefined;\n    if (!isSavedMessages && !isDeleted) {\n      if (user) {\n        hash = getChatAvatarHash(user, size);\n      } else if (chat) {\n        hash = getChatAvatarHash(chat, size);\n      }\n    }\n\n    return hash;\n  }\n\n  const imageHash = getMediaHash();\n  const fullMediaData = useMedia(imageHash, false, ApiMediaFormat.BlobUrl, lastSyncTime);\n  const avatarThumbnailData = useMedia(\n    !fullMediaData && isFirstPhoto ? getMediaHash('normal', true) : undefined,\n    false,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const thumbDataUri = useBlurSync(!fullMediaData && photo && photo.thumbnail && photo.thumbnail.dataUri);\n  const imageSrc = fullMediaData || avatarThumbnailData || thumbDataUri;\n  const prevImageSrc = usePrevious(imageSrc);\n\n  let content: string | undefined = '';\n\n  if (isSavedMessages) {\n    content = <i className=\"icon-avatar-saved-messages\" />;\n  } else if (isDeleted) {\n    content = <i className=\"icon-avatar-deleted-account\" />;\n  } else if (imageSrc) {\n    content = <img src={imageSrc} className=\"avatar-media\" alt=\"\" decoding=\"async\" />;\n  } else if (!imageSrc && user) {\n    const userFullName = getUserFullName(user);\n    content = userFullName ? getFirstLetters(userFullName, 2) : undefined;\n  } else if (!imageSrc && chat) {\n    const title = getChatTitle(lang, chat);\n    content = title && getFirstLetters(title, isChatPrivate(chat.id) ? 2 : 1);\n  } else {\n    content = (\n      <div className=\"spinner-wrapper\">\n        <Spinner color=\"white\" />\n      </div>\n    );\n  }\n\n  const fullClassName = buildClassName(\n    'ProfilePhoto',\n    `color-bg-${getUserColorKey(user || chat)}`,\n    isSavedMessages && 'saved-messages',\n    isDeleted && 'deleted-account',\n    (!isSavedMessages && !(imageSrc)) && 'no-photo',\n  );\n\n  return (\n    <div className={fullClassName} onClick={imageSrc ? onClick : undefined}>\n      {prevImageSrc && imageSrc && prevImageSrc !== imageSrc && (\n        <img src={prevImageSrc} className=\"prev-avatar-media\" alt=\"\" decoding=\"async\" />\n      )}\n      {typeof content === 'string' ? renderText(content, ['hq_emoji']) : content}\n    </div>\n  );\n};\n\nexport default memo(ProfilePhoto);\n","import React, {\n  FC, useEffect, useCallback, memo, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiChat } from '../../api/types';\nimport { GlobalActions, GlobalState } from '../../global/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { selectChat, selectUser } from '../../modules/selectors';\nimport {\n  getUserFullName, getUserStatus, isChatChannel, isUserOnline,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport usePhotosPreload from './hooks/usePhotosPreload';\nimport useLang from '../../hooks/useLang';\n\nimport VerifiedIcon from '../common/VerifiedIcon';\nimport ProfilePhoto from './ProfilePhoto';\nimport Transition from '../ui/Transition';\n\nimport './ProfileInfo.scss';\n\ntype OwnProps = {\n  userId: number;\n  forceShowSelf?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  chat?: ApiChat;\n  isSavedMessages?: boolean;\n  animationLevel: 0 | 1 | 2;\n  serverTimeOffset: number;\n} & Pick<GlobalState, 'lastSyncTime'>;\n\ntype DispatchProps = Pick<GlobalActions, 'loadFullUser' | 'openMediaViewer'>;\n\nconst PrivateChatInfo: FC<OwnProps & StateProps & DispatchProps> = ({\n  user,\n  chat,\n  isSavedMessages,\n  lastSyncTime,\n  animationLevel,\n  loadFullUser,\n  openMediaViewer,\n  serverTimeOffset,\n}) => {\n  const { id: userId } = user || {};\n  const { id: chatId } = chat || {};\n  const fullName = user ? getUserFullName(user) : (chat ? chat.title : '');\n  const photos = (user ? user.photos : (chat ? chat.photos : undefined)) || [];\n  const slideAnimation = animationLevel >= 1 ? 'slide' : 'none';\n\n  const [currentPhotoIndex, setCurrentPhotoIndex] = useState(0);\n  const isFirst = isSavedMessages || photos.length <= 1 || currentPhotoIndex === 0;\n  const isLast = isSavedMessages || photos.length <= 1 || currentPhotoIndex === photos.length - 1;\n\n  // Deleting the last profile photo may result in an error\n  useEffect(() => {\n    if (currentPhotoIndex > photos.length) {\n      setCurrentPhotoIndex(Math.max(0, photos.length - 1));\n    }\n  }, [currentPhotoIndex, photos.length]);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime && userId) {\n      loadFullUser({ userId });\n    }\n  }, [userId, loadFullUser, lastSyncTime]);\n\n  usePhotosPreload(user || chat, photos, currentPhotoIndex);\n\n  const handleProfilePhotoClick = useCallback(() => {\n    openMediaViewer({\n      avatarOwnerId: userId || chatId,\n      profilePhotoIndex: currentPhotoIndex,\n      origin: MediaViewerOrigin.ProfileAvatar,\n    });\n  }, [openMediaViewer, userId, chatId, currentPhotoIndex]);\n\n  const selectPreviousMedia = useCallback(() => {\n    if (isFirst) {\n      return;\n    }\n\n    setCurrentPhotoIndex(currentPhotoIndex - 1);\n  }, [currentPhotoIndex, isFirst]);\n\n  const selectNextMedia = useCallback(() => {\n    if (isLast) {\n      return;\n    }\n\n    setCurrentPhotoIndex(currentPhotoIndex + 1);\n  }, [currentPhotoIndex, isLast]);\n\n  // Support for swipe gestures and closing on click\n  useEffect(() => {\n    const element = document.querySelector<HTMLDivElement>('.photo-wrapper');\n    if (!element) {\n      return undefined;\n    }\n\n    return captureEvents(element, {\n      onSwipe: IS_TOUCH_ENV ? (e, direction) => {\n        if (direction === SwipeDirection.Right) {\n          selectPreviousMedia();\n        } else if (direction === SwipeDirection.Left) {\n          selectNextMedia();\n        }\n      } : undefined,\n    });\n  }, [selectNextMedia, selectPreviousMedia]);\n\n  if (!user && !chat) {\n    return undefined;\n  }\n\n  function renderPhotoTabs() {\n    if (isSavedMessages || !photos || photos.length <= 1) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"photo-dashes\">\n        {photos.map((_, i) => (\n          <span className={`photo-dash ${i === currentPhotoIndex ? 'current' : ''}`} />\n        ))}\n      </div>\n    );\n  }\n\n  function renderPhoto() {\n    const photo = !isSavedMessages && photos && photos.length > 0 ? photos[currentPhotoIndex] : undefined;\n\n    return (\n      <ProfilePhoto\n        key={currentPhotoIndex}\n        user={user}\n        chat={chat}\n        photo={photo}\n        isSavedMessages={isSavedMessages}\n        isFirstPhoto={isFirst}\n        onClick={handleProfilePhotoClick}\n      />\n    );\n  }\n\n  function renderStatus() {\n    if (user) {\n      return (\n        <div className={`status ${isUserOnline(user) ? 'online' : ''}`}>\n          <span className=\"user-status\" dir=\"auto\">{getUserStatus(lang, user, serverTimeOffset)}</span>\n        </div>\n      );\n    }\n\n    return (\n      <span className=\"status\" dir=\"auto\">{\n        isChatChannel(chat!)\n          ? lang('Subscribers', chat!.membersCount, 'i')\n          : lang('Members', chat!.membersCount, 'i')\n      }\n      </span>\n    );\n  }\n\n  const isVerifiedIconShown = (user && user.isVerified) || (chat && chat.isVerified);\n\n  return (\n    <div className=\"ProfileInfo\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"photo-wrapper\">\n        {renderPhotoTabs()}\n        <Transition activeKey={currentPhotoIndex} name={slideAnimation} className=\"profile-slide-container\">\n          {renderPhoto}\n        </Transition>\n\n        {!isFirst && (\n          <button\n            type=\"button\"\n            className=\"navigation prev\"\n            aria-label={lang('AccDescrPrevious')}\n            onClick={selectPreviousMedia}\n          />\n        )}\n        {!isLast && (\n          <button\n            type=\"button\"\n            className=\"navigation next\"\n            aria-label={lang('Next')}\n            onClick={selectNextMedia}\n          />\n        )}\n      </div>\n\n      <div className=\"info\" dir={lang.isRtl ? 'rtl' : 'auto'}>\n        {isSavedMessages ? (\n          <div className=\"title\">\n            <h3 dir=\"auto\">{lang('SavedMessages')}</h3>\n          </div>\n        ) : (\n          <div className=\"title\">\n            <h3 dir=\"auto\">{fullName && renderText(fullName)}</h3>\n            {isVerifiedIconShown && <VerifiedIcon />}\n          </div>\n        )}\n        {!isSavedMessages && renderStatus()}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId, forceShowSelf }): StateProps => {\n    const { lastSyncTime, serverTimeOffset } = global;\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const isSavedMessages = !forceShowSelf && user && user.isSelf;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      lastSyncTime, user, chat, isSavedMessages, animationLevel, serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadFullUser', 'openMediaViewer']),\n)(PrivateChatInfo));\n","import {\n  ApiChat, ApiMediaFormat, ApiPhoto, ApiUser,\n} from '../../../api/types';\nimport { useEffect } from '../../../lib/teact/teact';\nimport * as mediaLoader from '../../../util/mediaLoader';\n\nconst PHOTOS_TO_PRELOAD = 4;\n\nexport default function usePhotosPreload(\n  profile: ApiUser | ApiChat | undefined,\n  photos: ApiPhoto[],\n  currentIndex: number,\n) {\n  useEffect(() => {\n    photos.slice(currentIndex, currentIndex + PHOTOS_TO_PRELOAD).forEach((photo) => {\n      const mediaData = mediaLoader.getFromMemory(`photo${photo.id}?size=c`);\n      if (!mediaData) {\n        mediaLoader.fetch(`photo${photo.id}?size=c`, ApiMediaFormat.BlobUrl);\n      }\n    });\n  }, [currentIndex, photos]);\n}\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../global/types';\nimport { ApiChat, ApiUser } from '../../api/types';\n\nimport {\n  selectChat, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../modules/selectors';\nimport {\n  getChatDescription, getChatLink, getHasAdminRight, isChatChannel, isChatPrivate, isUserRightBanned, selectIsChatMuted,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\n\nimport ListItem from '../ui/ListItem';\nimport Switcher from '../ui/Switcher';\n\ntype OwnProps = {\n  chatOrUserId: number;\n  forceShowSelf?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  chat?: ApiChat;\n  canInviteUsers?: boolean;\n  isMuted?: boolean;\n} & Pick<GlobalState, 'lastSyncTime'>;\n\ntype DispatchProps = Pick<GlobalActions, 'loadFullUser' | 'updateChatMutedState' | 'showNotification'>;\n\nconst ChatExtra: FC<OwnProps & StateProps & DispatchProps> = ({\n  lastSyncTime,\n  user,\n  chat,\n  forceShowSelf,\n  canInviteUsers,\n  isMuted,\n  loadFullUser,\n  showNotification,\n  updateChatMutedState,\n}) => {\n  const {\n    id: userId,\n    fullInfo,\n    username,\n    phoneNumber,\n    isSelf,\n  } = user || {};\n  const { id: chatId } = chat || {};\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime && userId) {\n      loadFullUser({ userId });\n    }\n  }, [loadFullUser, userId, lastSyncTime]);\n\n  const handleNotificationChange = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n  }, [chatId, isMuted, updateChatMutedState]);\n\n  if (!chat || chat.isRestricted || (isSelf && !forceShowSelf)) {\n    return undefined;\n  }\n\n  function copy(text: string, entity: string) {\n    copyTextToClipboard(text);\n    showNotification({ message: `${entity} was copied` });\n  }\n\n  const formattedNumber = phoneNumber && formatPhoneNumberWithCode(phoneNumber);\n  const link = getChatLink(chat);\n  const description = (fullInfo && fullInfo.bio) || getChatDescription(chat);\n\n  return (\n    <div className=\"ChatExtra\">\n      {formattedNumber && !!formattedNumber.length && (\n        <ListItem icon=\"phone\" multiline narrow ripple onClick={() => copy(formattedNumber, lang('Phone'))}>\n          <span className=\"title\" dir=\"auto\">{formattedNumber}</span>\n          <span className=\"subtitle\">{lang('Phone')}</span>\n        </ListItem>\n      )}\n      {username && (\n        <ListItem\n          icon=\"mention\"\n          multiline\n          narrow\n          ripple\n          onClick={() => copy(`@${username}`, lang('Username'))}\n        >\n          <span className=\"title\" dir=\"auto\">{renderText(username)}</span>\n          <span className=\"subtitle\">{lang('Username')}</span>\n        </ListItem>\n      )}\n      {description && !!description.length && (\n        <ListItem\n          icon=\"info\"\n          multiline\n          narrow\n          isStatic\n        >\n          <span className=\"title\" dir=\"auto\">\n            {renderText(description, ['br', 'links', 'emoji'])}\n          </span>\n          <span className=\"subtitle\">{lang(userId ? 'UserBio' : 'Info')}</span>\n        </ListItem>\n      )}\n      {(canInviteUsers || !username) && link && (\n        <ListItem icon=\"mention\" multiline narrow ripple onClick={() => copy(link, lang('SetUrlPlaceholder'))}>\n          <div className=\"title\">{link}</div>\n          <span className=\"subtitle\">{lang('SetUrlPlaceholder')}</span>\n        </ListItem>\n      )}\n      <ListItem icon=\"unmute\" ripple onClick={handleNotificationChange}>\n        <span>{lang('Notifications')}</span>\n        <Switcher\n          id=\"group-notifications\"\n          label={userId ? 'Toggle User Notifications' : 'Toggle Chat Notifications'}\n          checked={!isMuted}\n          inactive\n        />\n      </ListItem>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatOrUserId }): StateProps => {\n    const { lastSyncTime } = global;\n\n    const chat = chatOrUserId ? selectChat(global, chatOrUserId) : undefined;\n    const user = isChatPrivate(chatOrUserId) ? selectUser(global, chatOrUserId) : undefined;\n    const isMuted = chat && selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    const canInviteUsers = chat && !user && (\n      (!isChatChannel(chat) && !isUserRightBanned(chat, 'inviteUsers'))\n      || getHasAdminRight(chat, 'inviteUsers')\n    );\n\n    return {\n      lastSyncTime, chat, user, canInviteUsers, isMuted,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadFullUser', 'updateChatMutedState', 'showNotification',\n  ]),\n)(ChatExtra));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport { selectCurrentChat, selectUser } from '../../modules/selectors';\nimport { getUserFirstOrLastName } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  contactName?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteChatMember'>;\n\nconst DeleteMemberModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  chat,\n  userId,\n  contactName,\n  onClose,\n  deleteChatMember,\n}) => {\n  const lang = useLang();\n\n  const handleDeleteChatMember = useCallback(() => {\n    deleteChatMember({ chatId: chat!.id, userId });\n    onClose();\n  }, [chat, deleteChatMember, onClose, userId]);\n\n  if (!chat || !userId) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeleteChatMember}\n      className=\"delete\"\n      title={lang('GroupRemoved.Remove')}\n    >\n      <p>{renderText(lang('PeerInfo.Confirm.RemovePeer', contactName))}</p>\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteChatMember}>\n        {lang('lng_box_remove')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const chat = selectCurrentChat(global);\n    const user = userId && selectUser(global, userId);\n    const contactName = user ? getUserFirstOrLastName(user) : undefined;\n\n    return {\n      chat,\n      contactName,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['deleteChatMember']),\n)(DeleteMemberModal));\n","import React, {\n  FC, useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiMessage,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n} from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport {\n  NewChatMembersProgress, ISettings, MediaViewerOrigin, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isChatPrivate,\n} from '../../modules/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from './ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from './ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: number;\n  userId?: number;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: number;\n  resolvedUserId?: number;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  usersById?: Record<number, ApiUser>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalMediaSearchType' | 'loadMoreMembers' | 'searchMediaMessagesLocal' | 'openMediaViewer' |\n  'openAudioPlayer' | 'openUserInfo' | 'focusMessage' | 'loadProfilePhotos' | 'setNewChatMembersDialogState'\n)>;\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\n\nconst Profile: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  members,\n  usersById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  setLocalMediaSearchType,\n  loadMoreMembers,\n  searchMediaMessagesLocal,\n  openMediaViewer,\n  openAudioPlayer,\n  openUserInfo,\n  focusMessage,\n  loadProfilePhotos,\n  setNewChatMembersDialogState,\n  serverTimeOffset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<number | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n  ]), [hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown, loadMoreMembers, searchMediaMessagesLocal, tabType, mediaSearchType, members,\n    usersById, chatMessages, foundIds, chatId, lastSyncTime, serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n        }\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContents = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function getMemberContextAction(id: number) {\n    return id === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(id);\n      },\n    }];\n  }\n\n  function renderSharedMedia() {\n    if (!viewportIds || !canRenderContents || !chatMessages) {\n      // This is just a single-frame delay, so we do not show spinner\n      const noSpinner = isFirstTab && viewportIds && !canRenderContents;\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && <Spinner />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty_search');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty_search');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty_search');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              target=\"sharedMedia\"\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          viewportIds!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContents ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContents ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-reversed' : 'slide'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderSharedMedia}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: number, resolvedUserId?: number) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo\n        userId={resolvedUserId || chatId}\n        forceShowSelf={resolvedUserId !== chatId}\n      />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} forceShowSelf={resolvedUserId !== chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > div.active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, userId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const chatMessages = selectChatMessages(global, userId || chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById } = global.users;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat && chat.fullInfo && chat.fullInfo.members;\n    const areMembersHidden = hasMembersTab && chat && chat.fullInfo && !chat.fullInfo.canViewMembers;\n    const canAddMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    let resolvedUserId;\n    if (userId) {\n      resolvedUserId = userId;\n    } else if (isChatPrivate(chatId)) {\n      resolvedUserId = chatId;\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat && chat.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n      ...(hasMembersTab && members && {\n        members,\n        usersById,\n      }),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalMediaSearchType',\n    'loadMoreMembers',\n    'searchMediaMessagesLocal',\n    'openMediaViewer',\n    'openAudioPlayer',\n    'openUserInfo',\n    'focusMessage',\n    'loadProfilePhotos',\n    'setNewChatMembersDialogState',\n  ]),\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nexport default () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import React, {\n  FC, useCallback, useMemo, memo, useState, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiChat, ApiChatMember, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { pick, unique } from '../../util/iteratees';\nimport { selectChat } from '../../modules/selectors';\nimport searchWords from '../../util/searchWords';\nimport {\n  getUserFullName, isChatChannel, isUserBot, sortChatIds,\n} from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: number;\n  isActive: boolean;\n  onNextStep: (memberIds: number[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  connectionState?: ApiUpdateConnectionStateType;\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: number;\n  usersById: Record<number, ApiUser>;\n  chatsById: Record<number, ApiChat>;\n  localContactIds?: number[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: number[];\n  globalUserIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'setUserSearchQuery'>;\n\nconst AddChatMembers: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  connectionState,\n  members,\n  onNextStep,\n  currentUserId,\n  usersById,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  setUserSearchQuery,\n  onClose,\n  isActive,\n  loadContactList,\n}) => {\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<number[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useEffect(() => {\n    if (isActive && connectionState === 'connectionStateReady') {\n      loadContactList();\n    }\n  }, [connectionState, isActive, loadContactList]);\n\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = localContactIds\n      ? sortChatIds(localContactIds.filter((id) => id !== currentUserId), chatsById)\n      : [];\n\n    if (!searchQuery) {\n      return contactIds.filter((id) => !memberIds.includes(id));\n    }\n\n    const foundContactIds = contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, searchQuery);\n    });\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return !memberIds.includes(contactId)\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup));\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds,\n    currentUserId, usersById, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress, connectionState } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat && chat.fullInfo ? chat.fullInfo.members : undefined,\n      currentUserId,\n      usersById,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n      connectionState,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'setUserSearchQuery']),\n)(AddChatMembers));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../modules/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: number;\n  threadId?: number;\n  currentProfileUserId?: number;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'toggleChatInfo' | 'toggleManagement' | 'openUserInfo' | 'setNewChatMembersDialogState' |\n  'closeLocalTextSearch' | 'closePollResults' | 'addChatMembers' |\n  'setStickerSearchQuery' | 'setGifSearchQuery'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps & DispatchProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  currentProfileUserId,\n  isChatSelected,\n  toggleChatInfo,\n  toggleManagement,\n  openUserInfo,\n  closeLocalTextSearch,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  closePollResults,\n  addChatMembers,\n  setNewChatMembersDialogState,\n  shouldSkipHistoryAnimations,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<number | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo || contentKey === RightColumnContent.UserInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, true);\n        break;\n      case RightColumnContent.UserInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        openUserInfo({ id: undefined }, true);\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, openUserInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: number[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isOpen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevContentKey, prevChatId]) => {\n    if (\n      (prevContentKey === RightColumnContent.ChatInfo && contentKey === RightColumnContent.UserInfo)\n      || (prevContentKey === RightColumnContent.UserInfo && contentKey === RightColumnContent.ChatInfo)\n      || (prevChatId !== chatId)\n    ) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [contentKey, chatId]);\n\n  useHistoryBack(isChatSelected && (contentKey === RightColumnContent.ChatInfo\n    || contentKey === RightColumnContent.UserInfo || contentKey === RightColumnContent.Management\n    || contentKey === RightColumnContent.AddingMembers),\n  () => close(false), toggleChatInfo);\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            chatId={chatId!}\n            onNextStep={handleAppendingChatMembers}\n            isActive={isOpen && isActive}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n      case RightColumnContent.UserInfo:\n        return (\n          <Profile\n            key={currentProfileUserId || chatId!}\n            chatId={chatId!}\n            userId={currentProfileUserId}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            isActive={isOpen && isActive}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          shouldSkipAnimation={shouldSkipTransition || shouldSkipHistoryAnimations}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={RightColumnContent.ChatInfo}\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      currentProfileUserId: global.users.selectedId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n    'toggleChatInfo',\n    'toggleManagement',\n    'closeLocalTextSearch',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'closePollResults',\n    'addChatMembers',\n    'setNewChatMembersDialogState',\n  ]),\n)(RightColumn));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './ForwardPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardPicker = useModuleLoader(Bundles.Extra, 'ForwardPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardPicker ? <ForwardPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardPickerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import React, {\n  FC, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiMessage } from '../../api/types';\nimport { LangCode } from '../../types';\n\nimport '../../modules/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectChatMessage,\n  selectCountNotMutedUnread,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport buildClassName from '../../util/buildClassName';\nimport { fastRaf } from '../../util/schedulers';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventIosPinchZoom from '../../hooks/usePreventIosPinchZoom';\nimport { processDeepLink } from '../../util/deeplink';\nimport { LOCATION_HASH } from '../../hooks/useHistoryBack';\n\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardPicker from './ForwardPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  animationLevel: number;\n  lastSyncTime?: number;\n  isLeftColumnShown: boolean;\n  isRightColumnShown: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  language?: LangCode;\n  openedStickerSetShortName?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadAnimatedEmojis' | 'loadNotificationSettings' | 'loadNotificationExceptions' | 'updateIsOnline' |\n  'loadTopInlineBots' | 'loadEmojiKeywords' | 'openStickerSetShortName'\n)>;\n\nconst NOTIFICATION_INTERVAL = 1000;\n\nlet notificationInterval: number | undefined;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps & DispatchProps> = ({\n  lastSyncTime,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  animationLevel,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  language,\n  openedStickerSetShortName,\n  loadAnimatedEmojis,\n  loadNotificationSettings,\n  loadNotificationExceptions,\n  updateIsOnline,\n  loadTopInlineBots,\n  loadEmojiKeywords,\n  openStickerSetShortName,\n}) => {\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadNotificationExceptions, loadNotificationSettings, updateIsOnline,\n    loadTopInlineBots, loadEmojiKeywords, language,\n  ]);\n\n  useEffect(() => {\n    if (lastSyncTime && LOCATION_HASH.startsWith('#?tgaddr=')) {\n      processDeepLink(decodeURIComponent(LOCATION_HASH.substr('#?tgaddr='.length)));\n    }\n  }, [lastSyncTime]);\n\n  const {\n    transitionClassNames: middleColumnTransitionClassNames,\n  } = useShowTransition(!isLeftColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const {\n    transitionClassNames: rightColumnTransitionClassNames,\n  } = useShowTransition(isRightColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const className = buildClassName(\n    middleColumnTransitionClassNames.replace(/([\\w-]+)/g, 'middle-column-$1'),\n    rightColumnTransitionClassNames.replace(/([\\w-]+)/g, 'right-column-$1'),\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  // Dispatch heavy transition event when opening middle column\n  useOnChange(([prevIsLeftColumnShown]) => {\n    if (prevIsLeftColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, dispatchHeavyAnimationEnd);\n  }, [isLeftColumnShown]);\n\n  // Dispatch heavy transition event and add body class when opening right column\n  useOnChange(([prevIsRightColumnShown]) => {\n    if (prevIsRightColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    fastRaf(() => {\n      document.body.classList.add('animating-right-column');\n    });\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n\n      fastRaf(() => {\n        document.body.classList.remove('animating-right-column');\n      });\n    });\n  }, [isRightColumnShown]);\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = selectCountNotMutedUnread(getGlobal());\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = selectCountNotMutedUnread(getGlobal()) - initialUnread;\n        if (newUnread > 0) {\n          updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n          updateIcon(true);\n        }\n      } else {\n        updatePageTitle(PAGE_TITLE);\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    openStickerSetShortName({ stickerSetShortName: undefined });\n  }, [openStickerSetShortName]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n\n  usePreventIosPinchZoom(isMediaViewerOpen);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  return (\n    <div id=\"Main\" className={className} onDrop={stopEvent} onDragOver={stopEvent}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardPicker isOpen={isForwardModalOpen} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      animationLevel: global.settings.byKey.animationLevel,\n      lastSyncTime: global.lastSyncTime,\n      isLeftColumnShown: global.isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      safeLinkModalUrl: global.safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      language: global.settings.byKey.language,\n      openedStickerSetShortName: global.openedStickerSetShortName,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadAnimatedEmojis', 'loadNotificationSettings', 'loadNotificationExceptions', 'updateIsOnline',\n    'loadTopInlineBots', 'loadEmojiKeywords', 'openStickerSetShortName',\n  ]),\n)(Main));\n","import { getDispatch } from '../lib/teact/teactn';\n\nexport const processDeepLink = (url: string) => {\n  const { protocol, searchParams, pathname } = new URL(url);\n\n  if (protocol !== 'tg:') return;\n\n  const { openChatByUsername, openStickerSetShortName } = getDispatch();\n\n  const method = pathname.replace(/^\\/\\//, '');\n  const params: Record<string, string> = {};\n  searchParams.forEach((value, key) => {\n    params[key] = value;\n  });\n\n  switch (method) {\n    case 'resolve': {\n      const {\n        domain,\n      } = params;\n\n      if (domain !== 'telegrampassport') {\n        openChatByUsername({\n          username: domain,\n        });\n      }\n      break;\n    }\n    case 'privatepost':\n\n      break;\n    case 'bg':\n\n      break;\n    case 'join':\n\n      break;\n    case 'addstickers': {\n      const { set } = params;\n\n      openStickerSetShortName({\n        stickerSetShortName: set,\n      });\n      break;\n    }\n    case 'msg':\n\n      break;\n    default:\n      // Unsupported deeplink\n\n      break;\n  }\n};\n","import { getDispatch, getGlobal } from '../lib/teact/teactn';\n\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nif (!getGlobal().connectionState) {\n  getDispatch().initApi();\n}\n"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addReducer","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","type","shouldReplaceHistory","currentMessageList","replaceThreadParam","exitMessageSelectMode","messages","contentToBeScheduled","forwardMessages","toChatId","setGlobal","updateCurrentMessageList","isChatInfoShown","openChat","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","scrollOffset","messageId","paramName","chatMessages","selectChatMessages","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","selectAllowedMessageActions","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","MAIN_THREAD_ID","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","avatarOwnerId","profilePhotoIndex","origin","mediaViewer","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","newGlobal","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","messageListType","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","messageIds","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","closeMediaViewer","selectedMessages","openForwardMenu","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","message","IS_TOUCH_ENV","isPollModalOpen","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","filter","unshift","content","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateSelectedUserId","updateUserSearch","globalUserIds","localUserIds","management","byChatId","isActive","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","messageLists","action","emoji","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","notification","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","push","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","payment","isPaymentModalOpen","clearPayment","closeInvoice","error","runThrottledForLoadChats","throttle","cb","runThrottledForLoadTopChats","runDebouncedForLoadFullChat","debounce","async","loadChats","listType","offsetDate","result","callApi","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","orderedPinnedIds","serverTimeOffset","chatIds","shift","addUsers","buildCollectionByKey","users","updateChats","updateChatListIds","updateChatListSecondaryInfo","draftsById","map","forEach","replyingToById","isFullyLoaded","loadFullChat","fullInfo","updateChat","openChatByUsername","username","channelPostId","localChat","selectChatByUsername","isMin","previousChat","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","byId","listIds","active","currentChatId","pinnedChats","otherChats","prepareChatList","chatToPreload","find","currentUserId","hasUnreadMark","toggleChatUnread","isChatSummaryOnly","requestChatUpdate","user","selectUser","selectThreadTopMessageId","requestThreadInfoUpdate","selectSupportChat","langCode","usernamePostfix","LOCALIZED_TIPS","toUpperCase","TIPS_USERNAME","oldestChat","selectIsChatPinned","sort","chat1","chat2","date","force","isMuted","title","about","photo","memberIds","progress","ChatCreationProgress","createdChannel","channelId","accessHash","getDispatch","createChannel","userId","activeChat","activeChannel","createdChat","createGroupChat","folderId","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","isChatArchived","chatFolders","loadChatFolders","recommendedChatFolders","recommended","loadRecommendedChatFolders","emoticon","maxId","recommendedId","description","newFolder","createChatFolder","Math","max","apply","deleteChatFolder","unreadCount","match","RE_TME_INVITE_LINK","RE_TME_LINK","chatOrChannelPostId","isEnabled","isChatBasicGroup","bannedRights","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembers","isDismissed","updateManagementProgress","ManagementProgress","Promise","all","groups","addedById","reduce","group","addChats","forDiscussionIds","channel","fullChat","isPreHistoryHidden","linkedChatId","activeChatFolder","offset","setNewChatMembersDialogState","NewChatMembersProgress","uploadProgressCallbacks","Map","runDebouncedForMarkRead","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","selectThreadOriginChat","threadInfos","addChatMessagesById","updateOutlyingIds","updateListedIds","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","localId","progressCallback","attachment","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","delete","isRestricted","resolve","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","MESSAGE_DELETED","replyMessage","selectChatMessage","updateChatMessage","replyToMessageId","loadMessage","scheduledAt","clearWebPagePreview","value","noWebPage","selectNoWebPage","isSingle","attachments","isGrouped","restParams","text","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","Date","now","selectEditingMessage","setEditingId","get","previousLocalId","cancelApiProgress","apiUpdate","draft","replyToMsgId","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","reason","peer","minId","selectFirstUnreadId","readCount","count","l","countSortedIds","lastReadInboxMessageId","webPagePreview","loadWebPagePreview","options","option","shouldResetVoters","v","a","offsets","nextOffset","loadPollOptionResults","fromChat","toChat","b","scheduledMessages","historyHash","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","loadPinnedMessages","searchThrottled","searchGifs","updateGifSearch","added","addedStickers","updateStickerSets","sets","loadStickerSets","setIds","addedSetIds","loadStickers","stickerSetId","recentStickers","loadRecentStickers","favorite","favoriteStickers","loadFavoriteStickers","greeting","featured","featuredStickers","loadFeaturedStickers","stickerSetShortName","stickerSetAccessHash","stickerSet","selectStickerSet","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","replaceAnimatedEmojis","loadAnimatedEmojis","saved","savedGifs","loadSavedGifs","unfave","unfaveSticker","installedDate","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","setsById","searchWords","searchStickers","updateStickersForEmoji","loadStickersForEmoji","openedStickerSetShortName","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","chatOrUser","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","loadAndReplaceArchivedChats","updateUsers","replaceChatListIds","loadAndUpdateUsers","userIds","contactIds","contactList","updatedUsers","loadTopMessages","localChats","localUsers","globalChats","globalUsers","searchChats","timestampPlusDay","foundIds","currentSearch","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","newFoundIds","updateLocalTextSearchResults","searchTextMessages","peerId","selectCurrentMediaSearchPeerId","selectCurrentMediaSearch","currentType","currentResults","SHARED_MEDIA_SLICE","updateLocalMediaSearchResults","searchSharedMedia","timestamp","searchMessagesByDate","updateManagement","isUsernameAvailable","afterSyncCallback","DEBUG","console","log","savedUsers","savedPrivateChatIds","savedChats","selectedChat","isChatPrivate","selectedChatUser","replaceChats","loadAndReplaceChats","areMessagesLoaded","currentThreadId","draftsByChatId","acc","newCurrentChatId","currentMessageListInfo","threadsById","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","Array","prototype","concat","replaceUsers","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","sync","afterSync","runDebouncedForFetchFullUser","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","topPeers","lastRequestedAt","usersHash","loadTopUsers","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","updateChatMutedState","phone","phoneNumber","updateUser","updateContact","deleteUser","profileId","isPrivate","photos","userSearch","updateUserSearchFetchingStatus","searchUsers","runDebouncedForSearch","sendBotCommand","command","button","openTelegramLink","toggleSafeLinkModal","alert","isError","showDialog","answerCallbackButton","openPollModal","getReceipt","receiptMessageId","getPaymentForm","setInvoiceMessageInfo","openPaymentModal","bot","selectChatBot","removeBlockedContact","topInlineBots","newHash","inlineBotData","inlineBot","switchPm","canLoadMore","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","queryId","resultId","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","requestInfo","saveInfo","selectPaymentChatId","selectPaymentMessageId","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","validateRequestedInfo","setPaymentForm","step","invoice","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","setReceipt","receipt","publishableKey","selectProviderPublishableKey","credentials","k","join","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","shippingOptionId","saveCredentials","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","stripeCredentials","selectStripeCredentials","requestedInfoId","sendPaymentForm","save","runThrottledForUpdateAppBadge","update","noTopChatsRequest","selectIsChatListed","loadTopChats","newProfilePhoto","updateAppBadge","selectCountNotMutedUnread","isNotJoined","listId","typingStatus","senderId","isFromScheduled","isActiveChat","hasUnreadMention","unreadMentionsCount","hasWebNotifications","selectNotifySettings","showNewMessageNotification","messageUpdate","selectCommonBoxChatId","targetChat","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","updateChatListType","chatFoldersById","newChatFoldersById","pick","newOrderedIds","orderedId","folders","replacedMembers","addedMember","deletedMemberId","shouldUpdate","some","deleteIndex","isOwner","isAdmin","membersCount","formattedText","ANIMATION_DELAY","updateWithLocalMedia","isScheduled","currentMessage","video","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateListedAndViewportIds","firstMessageId","selectThreadByMessage","isUnreadChatNotLoaded","isMessageLocal","addViewportId","messagesCount","firstUnreadId","updateChatLastMessage","currentLastMessage","findLastMessage","isDeleting","deleteMessages","newLastMessage","threadIdsToUpdate","deleteChatMessages","unique","chatsIdsToUpdate","commonBoxChatId","updateThreadInfo","newMessage","isMessageInCurrentMessageList","isOutgoing","scheduledIds","selectScheduledIds","selectScheduledMessages","deleteChatScheduledMessages","thread","markMessageListRead","currentPinnedIds","selectPinnedIds","newTheadInfo","messagesById","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","poll","updatedPoll","updatedResults","isChosen","chosenAnswers","chosenAnswer","chosenAnswerIndex","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOption","targetOptionIndex","updatedOption","votersCount","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","status","targetUser","isBlocked","addBlockedContact","settings","privacy","key","rules","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","useBeforeUnload","callback","useEffect","onBeforeUnload","preventEvent","preventDefault","memo","name","label","checked","disabled","inactive","noAnimation","onChange","onCheck","handleChange","useCallback","currentTarget","className","buildClassName","ANIMATION_LEVEL_OPTIONS","withGlobal","searchQuery","chatsById","animationLevel","byKey","globalSearchChatId","searchDate","theme","selectTheme","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","setGlobalSearchChatId","onReset","shouldSkipTransition","openTipsChat","setGlobalSearchDate","setSettingOption","lang","useLang","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","withOtherVersions","location","hostname","MainButton","onTrigger","isOpen","Button","ripple","size","color","onClick","ariaLabel","handleSearchFocus","handleSelectSaved","handleDarkModeToggle","stopPropagation","newTheme","shouldUseSystemTheme","switchTheme","ANIMATION_LEVEL_MAX","handleAnimationLevelChange","newLevel","_","body","classList","toggle","isSearchFocused","searchInputPlaceholder","DropdownMenu","trigger","footer","APP_NAME","APP_VERSION","MenuItem","icon","toLowerCase","href","FEEDBACK_URL","localStorage","setItem","JSON","stringify","disableHistoryBack","SearchInput","inputId","parentContainerClassName","focused","placeholder","autoComplete","canClose","onFocus","PickerSelectedItem","isMinimized","clickArg","chatOrUserId","dir","isRtl","Spinner","usersById","orderedFolderIds","notifySettings","notifyExceptions","selectNotifyExceptions","foldersDispatch","onScreenSelect","setActiveChatFolder","transitionRef","useRef","displayedFolders","folderCountersById","resolverFn","ms","dependencies","runThrottled","noFirst","useThrottle","setValue","useState","isFrozen","freeze","unfreeze","useFlag","useHeavyAnimationCheck","useOnChange","useThrottledMemo","counters","unreadDialogsCount","hasActiveDialogs","getFolderUnreadDialogs","badgeCount","isBadgeActive","folderTabs","handleSwitchTab","current","captureEvents","onSwipe","SwipeDirection","min","isNotInAllTabRef","captureEscKeyListener","useHistoryBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","addEventListener","removeEventListener","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","ChatList","folderType","TabList","tabs","activeTab","onSwitchTab","Transition","ref","activeKey","renderCount","props","LeftSearch","useModuleLoader","Bundles","Loading","ContactList","closeTimeout","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","handleMouseEnter","handleMouseLeave","onMouseEnter","onMouseLeave","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","onContentChange","connectionState","isNewChatButtonShown","setIsNewChatButtonShown","isConnecting","isOnline","setIsOnline","navigator","onLine","useBrowserOnline","isMouseInside","handleSelectSettings","handleSelectContacts","handleSelectNewChannel","handleSelectNewGroup","handleSelectArchived","autoCloseTimeout","shouldRenderUpdateButton","updateButtonClassNames","handleUpdateClick","isAppOutdated","markIsAppOutdated","timeout","reload","useAppOutdatedCheck","ShowTransition","isCustom","shouldCleanup","cleanupExceptionKey","fluid","pill","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","shouldSkipHistoryAnimations","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","SettingsScreens","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","pickerSearchInput","getElementById","blur","handleSearchQuery","handleSettingsScreenSelect","screen","LAYERS_ANIMATION_NAME","currentScreen","isChannel","setSize","windowSize","handleResize","MAX_MESSAGES_LIST_WIDTH","createMessageHash","messageList","HeaderMenuContainer","isChatChannel","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canMute","canSelect","selectIsInSelectMode","canLeave","joinChannel","openLocalTextSearch","restartBot","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","x","right","y","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleRestartBot","handleSearchClick","querySelector","focus","searchInput","anchor","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","useWebpThumbnail","getMessageMediaThumbDataUri","shouldDecodeThumbnail","isWebpSupported","thumbnailDecoded","setThumbnailDecoded","EMPTY_IMAGE_DATA_URI","useLayoutEffect","webpToPngBase64","then","catch","drawRect","width","height","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","style","transform","svg","div","defs","innerHTML","onUnpinMessage","onAllPinnedClick","mediaThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","getMessageSummaryText","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","src","alt","renderPictogram","renderText","RippleEffect","sender","selectSender","noUi","senderName","getSenderTitle","mediaData","mediaLoader","playPause","isPlaying","useAudioPlayer","getMessageKey","getMediaDuration","handleClick","handleClose","audio","getMessageAudio","performer","fileName","renderAudio","subtitle","renderVoice","audioMessage","pinnedIds","state","isSelectModeActive","isChatWithBot","selectIsChatWithBot","currentTransitionKey","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","openChatWithInfo","pinMessage","openPreviousChat","toggleLeftColumn","pinnedMessageIndex","setPinnedMessageIndex","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","getChatTitle","topMessageTitle","useEnsureMessage","windowWidth","useWindowSize","isLeftColumnHideable","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","handleBackClick","messageInput","EDITABLE_INPUT_ID","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","useCurrentOrPrev","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessageTitle","canRevealTools","renderInfo","renderBackButton","PrivateChatInfo","withFullInfo","withMediaViewer","withUpdatingStatus","noRtl","GroupChatInfo","asClose","withUnreadCount","formatIntegerCompact","componentEl","add","remove","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStart","senderGroups","dateGroups","isInAlbum","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","preventMessageInputBlur","activeElement","target","INTERSECTION_THROTTLE_FOR_MEDIA","IS_ANDROID","INTERSECTION_MARGIN_FOR_MEDIA","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","noAvatars","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","getMessageText","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","clamp","num","low","high","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","album","ratios","proportions","ratio","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","REM","minWidth","maxHeight","spacing","originalRatios","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","calculateAuthorWidth","createElement","font","whiteSpace","left","opacity","appendChild","offsetWidth","useFocusMessage","elementRef","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","ContextMenuContainer","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","observeIntersection","isEmbedded","appearanceOrder","isLastInList","useOnIntersect","noAppearanceAnimation","markShown","targetUsers","renderActionMessageText","asPlain","isContextMenuOpen","contextMenuPosition","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","isContextMenuShown","onMouseDown","onContextMenu","customText","isIntersecting","useIsIntersecting","pictogramId","isRoundVideo","getMessageRoundVideo","senderTitle","outgoingStatus","signature","views","isEdited","formatTime","MessageOutgoingStatus","observeIntersectionForPlaying","shouldLoop","isModalOpen","openModal","closeModal","isAnimated","isMemojiSticker","MEMOJI_STICKER_ID","shouldLoad","shouldPlay","mediaHash","getMessageMediaFormat","isMediaLoaded","isAnimationLoaded","markAnimationLoaded","isMediaReady","shouldRenderFullMedia","useTransitionForMedia","getStickerDimensions","thumbClassName","stickerClassName","AnimatedSticker","animationData","play","noLoop","onLoad","fromSticker","useBlurredMediaThumbRef","fullMediaData","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","SELECTED_APPENDIX_BACKGROUND","shouldAutoLoad","isInSelectMode","isSelected","uploadProgress","nonInteractive","shouldAffectAppendix","onCancelUpload","localBlobUrl","isDownloadAllowed","setIsDownloadAllowed","shouldDownload","downloadProgress","useMediaWithDownloadProgress","thumbRef","isUploading","isTransferring","transferProgress","getMediaTransferState","wasDownloadDisabled","usePrevious","shouldRenderSpinner","spinnerClassNames","shouldRenderThumb","isAllowed","contentEl","inSelectMode","img","Image","onload","canvas","ctx","getContext","drawImage","getImageData","getAppendixColorFromImage","getCustomAppendixBg","appendixBg","setProperty","setAttribute","ProgressSpinner","useHeavyAnimationCheckForVideo","playerRef","shouldPlayRef","safePlay","isPlayAllowed","wasPlaying","freezePlaying","paused","unfreezePlaying","contains","unfreezePlayingOnRaf","fastRaf","hasFocus","useBackgroundMode","shouldAutoPlay","videoRef","getMessageWebPageVideo","setIsPlayAllowed","isInline","isBuffered","bufferingHandlers","useBuffering","playProgress","setPlayProgress","handleTimeUpdate","currentTime","duration","usePauseOnInactive","useVideoCleanup","videoClassName","autoPlay","muted","loop","playsInline","onTimeUpdate","isGif","formatMediaDuration","contact","openUserInfo","Avatar","formatPhoneNumberWithCode","selected","loadingOptions","setValues","event","newValues","Checkbox","subLabel","getPercentage","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","r","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","floor","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","RadioGroup","loadingOption","isQuiz","getReadableVotersCount","isText","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","isSquarePhoto","handleMediaClick","siteName","displayUrl","isMediaInteractive","truncatedDescription","trimText","SafeLink","getMessageInvoice","amount","currency","isTest","photoUrl","formatCurrency","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","PhotoWithSelect","Photo","VideoWithSelect","Video","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","currentOnRelease","playingProgressRef","shouldSpinnerRender","isActivated","setIsActivated","setProgress","playerEl","playingProgressEl","stopPlaying","capturePlaying","onRelease","ROUND_VIDEO_DIMENSIONS","onEnded","shouldRequestThreadUpdate","recentReplierIds","recentRepliers","hasUnread","GROUP_MESSAGE_HOVER_ATTRIBUTE","handleDocumentGroupMouseEnter","lastGroupElement","getLastElementInDocumentGroup","handleDocumentGroupMouseLeave","removeAttribute","nextElementSibling","withSenderName","withAvatar","viaBotId","chatUsername","forceSenderName","isAnonymousOwnMessage","originSender","botSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","every","isSingleEmoji","animatedEmoji","selectAnimatedEmoji","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","shouldAutoLoadMedia","selectShouldAutoLoadMedia","shouldAutoPlayMedia","selectShouldAutoPlayMedia","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","openMediaViewer","openAudioPlayer","markMessagesRead","sendPollVote","clickInlineButton","bottomMarkerRef","appendixRef","isLocal","hasReply","isReplyMessage","hasThread","asForwarded","isLinkedChannelPost","isInDocumentGroup","voice","getMessageCustomShape","textParts","renderMessageText","adminTitle","metaSafeAuthorWidth","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","avatarPeer","senderPeer","containerClassName","contentClassName","hasComments","hasActionButton","classNames","isMedia","isMediaWithNoText","isViaBot","isRound","buildContentClassName","withCommentButton","withAppendix","handleGroupDocumentMessagesSelect","handleContainerDoubleClick","handleContentDoubleClick","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","MediaViewerOrigin","handleAudioPlay","handleAlbumMediaClick","albumMessageId","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","calculatedWidth","noMediaCorners","extraPadding","onDoubleClick","isAvatarPeerUser","avatarUser","avatarChat","hiddenName","renderAvatar","shouldInlineMeta","textContentClass","senderColor","getUserColorKey","renderSenderName","AnimatedEmoji","forceLoadPreview","Audio","isSelectable","onPlay","onReadMedia","Document","renderContent","messageGroups","isViewportNewest","isUnread","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","observeIntersectionForReading","observe","useIntersectionObserver","rootRef","throttleMs","margin","freezeForReading","unfreezeForReading","entries","mentionIds","entry","dataset","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","offsetHeight","scrollHeight","scrollTop","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","triggerEntry","resetScroll","observeIntersectionForFab","freezeForFab","unfreezeForFab","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flatten","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","getMessageOriginalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","lastUnreadMessageId","loadGreetingStickers","debounceMs","handleStickerSelect","selectedSticker","StickerButton","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","runDebouncedForScroll","checkSingleMessageActionByType","selectCurrentMessageIds","restrictionReason","focusingId","hasFocusHighlight","withLastMessageWhenPreloading","botDescription","chatBot","isChatLoaded","isChannelChat","isGroupChat","isChatGroup","isCreator","isBot","threadFirstMessageId","selectFirstMessageId","hasTools","canPost","setScrollOffset","scrollOffsetRef","selectScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","onTickEnd","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","shouldRunLast","container","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","el","offsetTop","top","findStuckDate","useStickyDates","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","clientHeight","preservedItemElements","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","shouldForceScroll","lastItemElement","lastItemHeight","newScrollTop","hasFirstMessageChanged","hasLastMessageChanged","isAlreadyFocusing","isResized","isAnimatingScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","onScroll","focusNextReply","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","buildAttachment","filename","blob","isQuick","URL","createObjectURL","mimeType","quick","preloadImage","newBlob","toBlob","squeezeImage","revokeObjectURL","videoWidth","videoHeight","preloadVideo","createPosterForVideo","resetInput","applyIosAutoCapitalizationFix","inputEl","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","startedAt","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","volume","requestAnimationFrame","subscribeToAnalyzer","stop","reject","onstop","Blob","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","getMessageTextAsHtml","tempEl","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","AttachMenu","SymbolMenu","InlineBotTooltip","MentionTooltip","CustomSend","StickerTooltip","useMouseInside","isKeyboardSingleUse","forceOpen","markForceOpen","unmarkForceOpen","keyboardButtons","forwardMessageIds","forwardedMessagesCount","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","AttachmentModal","PollModal","DropArea","RE_LINK","RegExp","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","link","parseMessageInput","linkEntity","ApiMessageEntityTypes","textMatch","renderingWebPage","webPageWithoutPhoto","messageStub","CalendarModal","PaymentModal","ReceiptModal","MainButtonState","chatUser","selectChatUser","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","editingMessage","canScheduleUntilOnline","wasOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","groupChatMembers","topInlineBotIds","isReceiptModalOpen","shouldSuggestStickers","isInlineBotLoading","dropAreaState","onDropHide","editMessage","saveDraft","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","closePaymentModal","clearReceipt","addRecentEmoji","sendInlineBotResult","html","setHtml","lastMessageSendTimeSeconds","prevDropAreaState","isCalendarOpen","openCalendar","closeCalendar","scheduledMessageArgs","setScheduledMessageArgs","htmlRef","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isAttachMenuOpen","openAttachMenu","closeAttachMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","mainButtonState","Edit","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","mentionFilter","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","markIsOpen","unmarkIsOpen","replace","innerText","getPlainText","queryInlineBot","resetInlineBot","canShowHelp","parseStartWithUsernameString","usernameLowered","prevQuery","prevUsername","botId","useInlineBotTooltip","isCustomSendMenuOpen","allowedAttachmentOptions","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","isDisabled","clearStickersForEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","canSendStickers","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","insertTextAndUpdateCursor","selection","getSelection","newHtml","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","collapse","removeAllRanges","addRange","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","removeSymbol","execCommand","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","prevChatId","handleEditComplete","editedMessage","hasMessageMedia","useEditing","updateDraft","draftChatId","draftThreadId","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevHtml","handleBlur","useDraft","handlePaste","clipboardData","input","EDITABLE_INPUT_MODAL_ID","items","media","file","getAsFile","pastedText","getData","substring","useClipboardPaste","handleFileSelect","files","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleGifSelect","gif","handleInlineBotSelect","inlineResult","handlePollSend","handleSilentSend","handleMessageSchedule","isWhenOnline","restArgs","getTime","handleMessageScheduleUntilOnline","handleCloseCalendar","handleSearchOpen","handleSymbolMenuOpen","handleAllScheduledClick","mainButtonHandler","areVoiceMessagesNotAllowed","canAttachMedia","prevEditedMessage","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","onSend","Portal","DropAreaState","withQuick","onHide","onFileSelect","caption","onCaptionUpdate","onFileAppend","onClear","onInsertUserName","filteredUsers","onSelectResult","canAttachEmbedLinks","faded","MessageInput","forcedPlaceholder","shouldSetFocus","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onStickerSelect","emojis","onEmojiSelect","onPollCreate","onGifSelect","onRemoveSymbol","onSearchOpen","onSilentSend","onScheduleSend","withTimePicker","maxAt","getDayStartAt","isFutureMode","secondButtonLabel","onSubmit","onSecondButtonClick","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","CLOSE_ANIMATION_DURATION","canBeQuicklyUploaded","kind","CONTENT_TYPES_FOR_QUICK_UPLOAD","isBlurred","isBackgroundBlurred","background","customBackground","backgroundColor","patternColor","themes","isMobileSearchActive","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioMessage","loadUser","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","setIsReady","ANIMATION_LEVEL_MIN","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanPost","renderingHasTools","renderingIsFabShown","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","leftColumnWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","onTransitionEnd","propertyName","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onUnpin","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canManage","isColumnOpen","isSearch","isStickerSearch","isGifSearch","isPollResults","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","shouldSkipAnimation","backButtonRef","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManagementScreens","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupMembers","renderingContentKey","renderHeaderContent","isBackButton","buttonClassName","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","handleLoadMore","messageIdsRef","getMessageContentIds","reverse","getMore","useInfiniteScroll","runThrottledForScroll","isScrollingProgrammatically","isFirstPhoto","isSavedMessages","isDeleted","isDeletedUser","getMediaHash","forceAvatar","getChatAvatarHash","imageHash","ApiMediaFormat","avatarThumbnailData","useBlurSync","dataUri","imageSrc","prevImageSrc","decoding","userFullName","getUserFullName","getFirstLetters","fullClassName","forceShowSelf","loadFullUser","fullName","slideAnimation","currentPhotoIndex","setCurrentPhotoIndex","isFirst","isLast","profile","currentIndex","usePhotosPreload","handleProfilePhotoClick","selectPreviousMedia","selectNextMedia","renderPhoto","isVerifiedIconShown","isVerified","renderPhotoTabs","VerifiedIcon","isUserOnline","getUserStatus","selectIsChatMuted","canInviteUsers","isUserRightBanned","getHasAdminRight","handleNotificationChange","copy","entity","copyTextToClipboard","formattedNumber","getChatLink","bio","getChatDescription","ListItem","multiline","narrow","isStatic","contactName","getUserFirstOrLastName","deleteChatMember","handleDeleteChatMember","Modal","onEnter","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","isGroup","hasMembersTab","areMembersHidden","canViewMembers","canAddMembers","canDeleteMembers","resolvedUserId","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","searchMediaMessagesLocal","loadProfilePhotos","setActiveTab","deletingUserId","setDeletingUserId","tabType","noProfileInfo","searchMessages","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","MEMBERS_SLICE","useInfiniteScrollForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","useProfileViewportIds","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContents","getMemberContextAction","handler","renderSharedMedia","noSpinner","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","teactOrderKey","contextActions","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","renderProfileInfo","shouldRestoreHeight","onStart","onStop","big","FloatingActionButton","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","sortChatIds","foundContactIds","contactId","isUserBot","canBeInvitedToGroup","handleNextStep","Picker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","selectRightColumnContentKey","currentProfileUserId","selectedId","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","close","shouldScrollUp","handleSelectChatMember","memberId","isPromoted","handleAppendingChatMembers","onChatMemberSelect","prevContentKey","MediaViewer","Notifications","Dialogs","ForwardPicker","SafeLinkModal","HistoryCalendar","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","updatePageTitle","nextTitle","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","loadEmojiKeywords","openStickerSetShortName","LOCATION_HASH","protocol","searchParams","pathname","domain","processDeepLink","decodeURIComponent","middleColumnTransitionClassNames","rightColumnTransitionClassNames","prevIsLeftColumnShown","dispatchHeavyAnimationEnd","waitForTransitionEnd","prevIsRightColumnShown","initialUnread","clearInterval","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","handleStickerSetModalClose","stopEvent","usePreventIosPinchZoom","onDrop","onDragOver","initApi"],"sourceRoot":""}