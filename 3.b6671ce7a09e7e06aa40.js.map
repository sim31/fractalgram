{"version":3,"sources":["webpack:///./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack:///./src/components/mediaViewer/SenderInfo.tsx","webpack:///./src/components/mediaViewer/MediaViewerActions.tsx","webpack:///./src/components/mediaViewer/MediaViewerFooter.tsx","webpack:///./src/hooks/useFullscreen.ts","webpack:///./src/components/mediaViewer/helpers/formatFileSize.ts","webpack:///./src/components/mediaViewer/VideoPlayerControls.tsx","webpack:///./src/components/mediaViewer/VideoPlayer.tsx","webpack:///./src/components/mediaViewer/ZoomControls.tsx","webpack:///./src/components/mediaViewer/PanZoom.tsx","webpack:///./src/components/mediaViewer/MediaViewer.tsx","webpack:///./src/components/main/ForwardPicker.tsx","webpack:///./src/components/main/Dialogs.tsx","webpack:///./src/components/main/Notifications.tsx","webpack:///./src/components/main/SafeLinkModal.tsx","webpack:///./src/components/common/CalendarModal.tsx","webpack:///./src/components/main/HistoryCalendar.tsx","webpack:///./src/components/common/DeleteMessageModal.tsx","webpack:///./src/components/common/PinMessageModal.tsx","webpack:///./src/components/common/UnpinAllMessagesModal.tsx","webpack:///./src/components/middle/DeleteSelectedMessagesModal.tsx","webpack:///./src/components/middle/MessageSelectToolbar.tsx","webpack:///./src/hooks/useSelectWithEnter.ts","webpack:///./src/components/left/search/LeftSearchResultChat.tsx","webpack:///./src/components/left/search/RecentContacts.tsx","webpack:///./src/components/left/search/ChatMessage.tsx","webpack:///./src/components/left/search/DateSuggest.tsx","webpack:///./src/components/left/search/ChatResults.tsx","webpack:///./src/components/left/search/ChatMessageResults.tsx","webpack:///./src/components/left/search/helpers/createMapStateToProps.ts","webpack:///./src/components/left/search/MediaResults.tsx","webpack:///./src/components/left/search/helpers/getSenderName.ts","webpack:///./src/components/left/search/LinkResults.tsx","webpack:///./src/components/left/search/FileResults.tsx","webpack:///./src/components/left/search/AudioResults.tsx","webpack:///./src/components/left/search/LeftSearch.tsx","webpack:///./src/hooks/useReducer.ts","webpack:///./src/hooks/reducers/useFoldersReducer.ts","webpack:///./src/hooks/reducers/useTwoFaReducer.ts","webpack:///./src/components/left/settings/SettingsHeader.tsx","webpack:///./src/components/left/settings/SettingsMain.tsx","webpack:///./src/components/ui/FloatingActionButton.tsx","webpack:///./src/components/common/UsernameInput.tsx","webpack:///./src/components/left/settings/SettingsEditProfile.tsx","webpack:///./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack:///./src/components/ui/ShowMoreButton.tsx","webpack:///./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack:///./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack:///./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack:///./src/components/left/settings/folders/SettingsFolders.tsx","webpack:///./src/components/ui/RangeSlider.tsx","webpack:///./src/components/middle/composer/StickerSetCoverAnimated.tsx","webpack:///./src/components/middle/composer/StickerSetCover.tsx","webpack:///./src/components/common/StickerButton.tsx","webpack:///./src/components/left/settings/SettingsStickerSet.tsx","webpack:///./src/components/left/settings/SettingsGeneral.tsx","webpack:///./src/util/systemFilesDialog.ts","webpack:///./src/util/colors.ts","webpack:///./src/components/left/settings/WallpaperTile.tsx","webpack:///./src/components/left/settings/SettingsGeneralBackground.tsx","webpack:///./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack:///./src/components/left/settings/SettingsNotifications.tsx","webpack:///./src/components/left/settings/SettingsPrivacy.tsx","webpack:///./src/components/left/settings/SettingsLanguage.tsx","webpack:///./src/components/left/settings/helper/privacy.ts","webpack:///./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack:///./src/components/left/settings/SettingsPrivacyActiveSessions.tsx","webpack:///./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaPassword.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack:///./src/components/common/Picker.tsx","webpack:///./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack:///./src/components/left/settings/Settings.tsx","webpack:///./src/components/left/main/ContactList.tsx","webpack:///./src/components/left/newChat/NewChatStep1.tsx","webpack:///./src/components/left/newChat/NewChatStep2.tsx","webpack:///./src/components/left/newChat/NewChat.tsx","webpack:///./src/components/left/ArchivedChats.tsx","webpack:///./src/util/scrollLock.ts","webpack:///./src/components/middle/message/helpers/copyOptions.ts","webpack:///./src/components/middle/message/MessageContextMenu.tsx","webpack:///./src/components/middle/message/ContextMenuContainer.tsx","webpack:///./src/components/common/StickerSetModal.tsx","webpack:///./src/components/middle/HeaderMenuContainer.tsx","webpack:///./src/components/middle/MobileSearch.tsx","webpack:///./src/util/findInViewport.ts","webpack:///./src/util/isFullyVisible.ts","webpack:///./src/components/middle/composer/MentionTooltip.tsx","webpack:///./src/components/middle/composer/AttachmentModal.tsx","webpack:///./src/components/middle/composer/PollModal.tsx","webpack:///./src/hooks/useMouseInside.ts","webpack:///./src/components/middle/composer/EmojiButton.tsx","webpack:///./src/components/middle/composer/EmojiCategory.tsx","webpack:///./src/components/middle/composer/EmojiPicker.tsx","webpack:///./src/components/middle/composer/StickerSet.tsx","webpack:///./src/components/middle/composer/StickerPicker.tsx","webpack:///./src/components/common/GifButton.tsx","webpack:///./src/components/middle/composer/GifPicker.tsx","webpack:///./src/components/middle/composer/SymbolMenuFooter.tsx","webpack:///./src/components/middle/composer/SymbolMenu.tsx","webpack:///./src/components/middle/composer/AttachMenu.tsx","webpack:///./src/components/middle/composer/StickerTooltip.tsx","webpack:///./src/components/middle/composer/BotKeyboardMenu.tsx","webpack:///./src/components/middle/composer/CustomSendMenu.tsx","webpack:///./src/components/middle/composer/EmojiTooltip.tsx","webpack:///./src/components/right/RightSearch.tsx","webpack:///./src/components/right/StickerSetResult.tsx","webpack:///./src/components/right/StickerSearch.tsx","webpack:///./src/components/right/GifSearch.tsx","webpack:///./src/components/right/PollAnswerResults.tsx","webpack:///./src/components/right/PollResults.tsx","webpack:///./src/components/right/management/ManageUser.tsx","webpack:///./src/components/right/management/ManageGroup.tsx","webpack:///./src/components/right/management/ManageGroupPermissions.tsx","webpack:///./src/components/right/management/ManageGroupRemovedUsers.tsx","webpack:///./src/components/right/management/ManageChannel.tsx","webpack:///./src/components/right/management/ManageChatPrivacyType.tsx","webpack:///./src/components/right/management/ManageDiscussion.tsx","webpack:///./src/components/right/management/ManageGroupUserPermissions.tsx","webpack:///./src/components/right/management/ManageChatAdministrators.tsx","webpack:///./src/components/right/management/ManageGroupRecentActions.tsx","webpack:///./src/components/right/management/ManageGroupAdminRights.tsx","webpack:///./src/components/right/management/ManageGroupMembers.tsx","webpack:///./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack:///./src/components/right/management/Management.tsx","webpack:///./src/components/middle/helpers/getCurrencySign.ts","webpack:///./src/components/common/helpers/detectCardType.ts","webpack:///./src/hooks/reducers/usePaymentReducer.ts","webpack:///./src/hooks/useFocusAfterAnimation.tsx","webpack:///./src/components/ui/Select.tsx","webpack:///./src/components/payment/ShippingInfo.tsx","webpack:///./src/components/payment/Shipping.tsx","webpack:///./src/components/payment/Checkout.tsx","webpack:///./src/components/payment/ExpiryInput.tsx","webpack:///./src/components/middle/helpers/inputFormatters.ts","webpack:///./src/assets/mastercard.svg","webpack:///./src/assets/visa.svg","webpack:///./src/components/payment/CardInput.tsx","webpack:///./src/components/payment/PaymentInfo.tsx","webpack:///./src/components/payment/PaymentModal.tsx","webpack:///./src/components/payment/ReceiptModal.tsx","webpack:///./src/components/common/helpers/animatedAssets.ts","webpack:///./src/assets/TwoFactorSetupMonkeyIdle.tgs","webpack:///./src/assets/TwoFactorSetupMonkeyTracking.tgs","webpack:///./src/assets/TwoFactorSetupMonkeyClose.tgs","webpack:///./src/assets/TwoFactorSetupMonkeyPeek.tgs","webpack:///./src/assets/FoldersAll.tgs","webpack:///./src/assets/FoldersNew.tgs","webpack:///./src/assets/DiscussionGroupsDucks.tgs","webpack:///./src/components/ui/CropModal.tsx","webpack:///./src/components/ui/AvatarEditable.tsx","webpack:///./src/components/common/PasswordMonkey.tsx","webpack:///./src/components/common/PasswordForm.tsx"],"names":["animateOpening","hasFooter","origin","bestImageData","dimensions","isVideo","message","mediaEl","fromImage","getNodes","width","windowWidth","windowSize","get","availableWidth","height","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","mql","window","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","topOffsetRem","matches","REM","getTopOffset","top","fromTop","left","fromLeft","fromWidth","fromHeight","getBoundingClientRect","MediaViewerOrigin","SharedMedia","Album","ScheduledAlbum","SearchResult","includes","uncovered","realWidth","realHeight","size","Math","max","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","ghost","createGhost","applyStyles","transform","applyShape","document","body","classList","add","requestAnimationFrame","appendChild","style","firstChild","objectFit","remove","clearShape","setTimeout","contains","removeChild","ANIMATION_END_DELAY","animateClosing","container","toImage","getElementById","querySelector","targetTop","el","display","rect","windowHeight","isElementInViewport","shouldFadeOut","Inline","ScheduledInline","isMessageImageFullyVisible","existingGhost","getElementsByClassName","ProfileAvatar","transition","transformOrigin","opacity","source","shouldAppendProfileInfo","createElement","img","Image","src","HTMLVideoElement","poster","profileInfo","cloneNode","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","parentElement","scrollTop","offsetHeight","element","styles","Object","assign","containerSelector","mediaSelector","MiddleHeaderAvatar","mediaEls","querySelectorAll","length","withGlobal","global","chatId","messageId","isAvatar","sender","isChatPrivate","selectUser","selectChat","selectChatMessage","selectSender","setGlobal","actions","pick","closeMediaViewer","focusMessage","handleFocusMessage","useCallback","lang","useLang","isFromChat","senderTitle","getSenderTitle","className","onClick","Avatar","key","chat","user","dir","renderText","formatMediaDateTime","date","MediaViewerActions","mediaData","isZoomed","fileName","onCloseMediaViewer","onForward","onZoomToggle","isDownloadStarted","downloadProgress","handleDownloadClick","useMediaDownload","getMessageMediaHash","undefined","MenuButton","useMemo","onTrigger","isOpen","Button","round","color","ariaLabel","IS_SINGLE_COLUMN_LAYOUT","DropdownMenu","trigger","positionX","MenuItem","icon","href","download","ProgressSpinner","progress","noCross","MediaViewerFooter","text","isHidden","isForVideo","isMultiline","setIsMultiline","useState","useEffect","footerContent","checkIsMultiline","clientHeight","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","prop","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","getBrowserFullscreenElementProp","units","bytes","number","floor","log","toFixed","stopEvent","VideoPlayerControls","bufferedProgress","currentTime","duration","fileSize","isForceVisible","isForceMobileVersion","isPlayed","isFullscreenSupported","isFullscreen","onChangeFullscreen","onPlayPause","onSeek","isVisible","setVisibility","timeout","clearTimeout","downloadedPercent","totalSize","percentagePlayed","percentageBuffered","min","step","type","onInput","value","renderSeekLine","ripple","formatMediaDuration","renderTime","formatFileSize","memo","url","isGif","posterData","posterSize","isMediaViewerOpen","noPlay","onClose","videoRef","useRef","setIsPlayed","IS_TOUCH_ENV","IS_IOS","setCurrentTime","isControlsVisible","setIsControlsVisible","setFullscreen","exitFullscreen","elRef","setIsFullscreen","Boolean","useLayoutEffect","listener","listenerEnter","listenerExit","video","current","PLATFORM_ENV","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreenStatus","isBuffered","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","pause","safePlay","togglePlayState","play","useVideoCleanup","handleMouseOver","handleMouseOut","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","handleSeek","Number","target","toggleControls","togglePayingStateBySpace","preventDefault","wrapperStyle","videoStyle","onMouseOver","onMouseOut","ref","autoPlay","playsInline","loop","muted","onEnded","onDoubleClick","onTimeUpdate","join","square","isShown","onChangeZoom","prevIsShown","usePrevious","inputRef","zoomLevel","setZoomLevel","isSeeking","handleStartSeek","handleStopSeek","disabled","onChange","onMouseDown","onMouseUp","INITIAL_MATRIX","SCALE_VALUES","1","1.5","2","2.5","3","children","noWrap","canPan","panDeltaX","panDeltaY","onPan","tunedZoomLevel","isDragging","setIsDragging","dragData","setDragData","dx","dy","x","y","matrixData","setMatrixData","panWrapperRef","panContainerRef","newZoomLevel","newPandx","newPandy","newMatrixData","areSortedArraysEqual","oldScale","wrapper","image","wrapperRect","imageRect","newImgWidth","newImgHeight","newImgX","newImgY","calculateSafeZoneOnZoom","toString","newDragData","pageX","pageY","onMouseMove","deltaX","deltaY","getNewMatrixData","renderPhoto","blobUrl","imageSize","canDrag","alt","draggable","Spinner","threadId","avatarOwnerId","profilePhotoIndex","mediaViewer","animationLevel","settings","byKey","senderId","avatarOwner","chatMessages","collectionIds","selectScheduledMessage","selectScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","isFromSharedMedia","isFromSearch","photo","getMessagePhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","isPhoto","isSingleSlide","messageIds","getChatMediaMessageIds","selectedMediaMessageIndex","indexOf","isFirst","isLast","animationKey","prevSenderId","slideAnimation","headerAnimation","isGhostAnimation","isFooterHidden","setIsFooterHidden","canPanZoomWrap","setCanPanZoomWrap","setIsZoomed","panDelta","setPanDelta","getMediaHash","isFull","photos","getChatAvatarHash","blobUrlPictogram","useMedia","ApiMediaFormat","BlobUrl","previewMediaHash","blobUrlPreview","startsWith","DataUri","fullMediaData","useMediaWithDownloadProgress","getMessageMediaFormat","localBlobUrl","thumbDataUri","useBlurSync","getMessageMediaThumbDataUri","videoSize","getMessageFileSize","getMessageFileName","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","AVATAR_FULL_DIMENSIONS","toggle","forceUpdate","useForceUpdate","addListener","removeListener","prevMessage","prevOrigin","prevAvatarOwner","prevBestImageData","dispatchHeavyAnimationEvent","textParts","renderMessageText","timer","closeZoom","handleZoomToggle","handleZoomValue","level","canCloseZoom","close","handleFooterClick","handleForward","fromChatId","captureEscKeyListener","stopCurrentAudio","getMessageId","fromId","direction","index","selectPreviousMedia","selectNextMedia","handleKeyDown","shouldCloseOnVideo","captureEvents","excludedClosestSelector","onSwipe","SwipeDirection","Right","Left","handlePan","handleToggleFooterVisibility","renderSlide","isActive","calculateMediaViewerDimensions","renderSenderInfo","ShowTransition","isRtl","Transition","activeKey","name","aria-label","chats","byId","chatsById","listIds","orderedPinnedIds","currentUserId","pinnedIds","active","activeListIds","archivedListIds","archived","setForwardChatId","exitForwardMode","loadMoreChats","filter","setFilter","focus","blur","chatIds","priorityIds","unique","sortChatIds","getCanPostInChat","MAIN_THREAD_ID","searchWords","getChatTitle","viewportIds","getMore","useInfiniteScroll","handleFilterChange","containerRef","useKeyboardListNavigation","modalHeader","InputText","onKeyDown","placeholder","Modal","header","InfiniteScroll","items","onLoadMore","noScrollRestore","map","ListItem","PrivateChatInfo","status","userId","GroupChatInfo","Loading","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","dismissDialog","acceptInviteConfirmation","dialog","invite","hash","title","participantsCount","isChannel","participantsText","joinText","isText","renderInvite","getReadableErrorText","notifications","dismissNotification","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","handleDismiss","renderingUrl","useCurrentOrPrev","ConfirmDialog","confirmLabel","confirmHandler","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","Date","fixedMinDate","getFullYear","getMonth","getDate","fixedMaxDate","formatInputTime","String","padStart","selectedAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","now","defaultSelectedDate","selectedDate","setSelectedDate","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","currentYear","currentMonth","currentDate","shouldDisableNextMonth","shouldDisablePrevMonth","calendarGrid","grid","setFullYear","setMonth","setDate","monthStartDay","getDay","i","push","gridDate","buildCalendarGrid","handleChangeHours","replace","hours","getTime","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","formatMonthAndYear","d","dateCopy","letter","role","tabIndex","handleDateSelect","inputMode","formatHumanDate","formatTime","formatSubmitLabel","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","isSchedule","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","contactName","getUserFirstOrLastName","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","album","deleteMessages","deleteScheduledMessages","handleDeleteMessageForAll","messages","shouldDeleteForAll","handleDeleteMessageForSelf","onEnter","isPrivateChat","isChatWithSelf","selectIsChatWithSelf","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","selectCurrentChat","exitMessageSelectMode","messageListType","canDelete","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canPost","openForwardMenuForSelectedMessages","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useFlag","captureKeyboardListeners","onBackspace","onDelete","onEsc","prevSelectedMessagesCount","renderingSelectedMessagesCount","formattedMessagesCount","destructive","onSelect","buttonRef","activeElement","privateChatUserId","privateChatUser","isPinned","selectIsChatPinned","isMuted","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","withUsername","contextActions","useChatContextActions","handleDelete","handleClick","useSelectWithEnter","avatarSize","DeleteChatModal","runThrottled","cb","userIds","topUserIds","topPeers","usersById","users","recentlyFoundChatIds","globalSearch","onReset","loadTopUsers","loadContactList","openChat","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","useHorizontalScroll","lastSyncTime","searchQuery","mediaThumbnail","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","withOnlineStatus","isSavedMessages","isSelf","isVerified","VerifiedIcon","Link","formatPastTimeShort","getMessageSummaryText","highlight","renderMessageSummary","searchDate","suggestions","match","formatDateToString","suggestion","latestYear","getSuggestionsFromDate","localContactIds","contactList","fetchingStatus","globalResults","localResults","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleLoadMore","LoadMoreDirection","Backwards","query","handleChatClick","handlePickerItemClick","MEMO_EMPTY_ARRAY","foundContactIds","fullName","getUserFullName","username","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","NothingFound","description","PickerSelectedItem","chatOrUserId","clickArg","createMapStateToProps","props","currentType","isVoice","theme","selectTheme","isLoading","searchChatId","handleSelectMedia","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","isMediaGrid","isMessageList","itemSelector","Media","idPrefix","getSenderName","senderName","isChatGroup","handleMessageFocus","shouldDrawDateDivider","toYearMonth","WebLink","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","onPlay","TABS","GlobalSearchContent","ChatList","Links","Files","Music","Voice","CHAT_TABS","slice","TRANSITION_RENDER_COUNT","keys","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","content","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","useReducer","reducer","initialState","reducerRef","state","setState","action","currentState","INCLUDED_CHAT_TYPES","EXCLUDED_CHAT_TYPES","INCLUDE_FILTER_FIELDS","EXCLUDE_FILTER_FIELDS","selectChatFilters","mode","selectTemp","selectedChatIds","selectedChatTypes","includedChatIds","includeFilters","folder","excludedChatIds","excludeFilters","getSuggestedFolderName","filters","values","bots","groups","channels","contacts","nonContacts","INITIAL_STATE","chatFilter","foldersReducer","payload","isTouched","omit","folderId","currentPassword","password","hint","email","twoFaReducer","currentScreen","editedFolderId","onSaveFilter","signOut","deleteChatFolder","isSignOutDialogOpen","setIsSignOutDialogOpen","isDeleteFolderDialogOpen","setIsDeleteFolderDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","closeDeleteFolderConfirmation","handleSignOutMessage","handleDeleteFolderMessage","SettingsMenuButton","SettingsScreens","EditProfile","General","Notifications","Privacy","Language","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyForwarding","PrivacyGroupChats","PrivacyPhoneNumberAllowedContacts","PrivacyLastSeenAllowedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyForwardingAllowedContacts","PrivacyGroupChatsAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyForwardingDeniedContacts","PrivacyGroupChatsDeniedContacts","PrivacyActiveSessions","PrivacyBlockedUsers","TwoFaDisabled","TwoFaEnabled","TwoFaNewPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaChangePasswordHint","TwoFaNewPasswordEmail","TwoFaRecoveryEmail","TwoFaNewPasswordEmailCode","TwoFaRecoveryEmailCode","TwoFaCongratulations","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","Folders","FoldersCreateFolder","FoldersEditFolder","FoldersIncludedChats","FoldersExcludedChats","renderHeaderContent","confirmIsDestructive","currentUser","onScreenSelect","formatPhoneNumberWithCode","phoneNumber","FloatingActionButton","buttonClassName","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","debounce","currentUsername","asLink","isUsernameAvailable","checkUsername","setUsername","langPrefix","label","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","trim","isValid","isUsernameValid","success","readOnly","profileEdit","firstName","currentFirstName","lastName","currentLastName","fullInfo","bio","currentBio","currentAvatarHash","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setFirstName","setLastName","setBio","currentAvatarBlobUrl","ProfileEditProgress","InProgress","isUsernameError","isSaveButtonShown","Complete","handlePhotoChange","newPhoto","handleFirstNameChange","handleLastNameChange","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","UsernameInput","runThrottledForLoadRecommended","orderedIds","orderedFolderIds","foldersById","recommended","recommendedChatFolders","chatFolders","notifySettings","notifyExceptions","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","showDialog","animationData","setAnimationData","isAnimationLoaded","setIsAnimationLoaded","handleAnimationLoad","getAnimationData","then","handleCreateFolder","data","userFolders","subtitle","getFolderDescriptionText","handleCreateFolderFromRecommended","AnimatedSticker","STICKER_SIZE_FOLDER_SETTINGS","noLoop","onLoad","pill","fluid","narrow","multiline","ShowMoreButton","count","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","loadedActiveChatIds","loadedArchivedChatIds","dispatch","onAddIncludedChats","onAddExcludedChats","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","includedChatTypes","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","Set","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","listType","renderChats","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","find","typeKey","inactive","renderChatType","event","folderUpdate","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","onFilterChange","chatTypes","shouldMinimize","hasMaxChats","handleItemClick","newSelectedIds","splice","handleChatTypeClick","newSelectedChatTypes","selectedType","isMinimized","canClose","Checkbox","checked","isSelected","withChatType","archivedPinnedIds","activeChatArrays","prepareChatList","archivedChatArrays","pinnedChats","otherChats","displayedIds","newFilter","handleSelectedIdsChange","ids","handleSelectedChatTypesChange","newFilters","forEach","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","options","range","handleChange","trackWidth","possibleValuesLength","option","STICKER_SIZE_PICKER_HEADER","stickerSet","observeIntersection","isIntersecting","useIsIntersecting","mediaHash","lottieData","Lottie","shouldRenderFullMedia","useTransitionForMedia","getFirstLetters","hasThumbnail","sticker","noAnimate","onUnfaveClick","localMediaHash","stickerSelector","thumbnail","dataUri","previewBlobUrl","shouldPlay","isAnimated","markLoaded","unmarkLoaded","canAnimatedPlay","shouldRenderThumb","shouldRenderPreview","previewTransitionClassNames","fullClassName","emoji","data-sticker-id","isLowPriority","stickers","firstSticker","STICKER_SIZE_GENERAL_SETTINGS","ANIMATION_LEVEL_OPTIONS","stickerSetIds","added","setIds","stickerSetsById","setsById","messageTextSize","messageSendKeyCombo","shouldAutoDownloadMediaFromContacts","shouldAutoDownloadMediaInPrivateChats","shouldAutoDownloadMediaInGroups","shouldAutoDownloadMediaInChannels","shouldAutoPlayGifs","shouldAutoPlayVideos","shouldSuggestStickers","shouldLoopStickers","setSettingOption","loadStickerSets","loadAddedStickers","stickerSettingsRef","observe","observeIntersectionForCovers","useIntersectionObserver","rootRef","isModalOpen","openModal","closeModal","setSticker","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleAnimationLevelChange","newLevel","_","handleMessageTextSizeChange","newSize","documentElement","setProperty","handleStickerSetClick","stickerSets","installedDate","RadioGroup","selected","onCheck","isChecked","fromSticker","fileSelector","openSystemFilesDialog","accept","callback","noMultiple","setAttribute","removeAttribute","onchange","click","hex2rgb","param","parseInt","substring","rgb2hex","p0","p1","p2","rgb2hsb","r","g","h","s","v","hsb2rgb","f","p","q","t","getPatternColor","rgbColor","hue","saturation","wallpaper","slug","thumbRef","useCanvasBlur","isDownloadAllowed","setIsDownloadAllowed","fullMedia","wasDownloadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","handleSelect","blob","fetchBlob","cacheApi","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","files","handleUploadWallpaper","handleSetColor","handleResetToDefault","backgroundColor","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","async","defaultRGB","rgb","canvas","context","getContext","preloadImage","naturalHeight","naturalWidth","offsetWidth","drawImage","getImageData","blockSize","getAverageColor","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","onCapture","onDrag","onRelease","withCursor","hex","hueHex","w","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","data-color","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleContactNotificationChange","hasPassword","isSensitiveEnabled","canChangeSensitive","privacy","blocked","activeSessions","blockedCount","totalCount","sessionsCount","visibilityPrivacyPhoneNumber","visibility","visibilityPrivacyLastSeen","lastSeen","visibilityPrivacyProfilePhoto","profilePhoto","visibilityPrivacyForwarding","forwards","visibilityPrivacyGroupChats","chatInvite","loadPrivacySettings","loadBlockedContacts","loadAuthorizations","loadContentSettings","updateContentSettings","getVisibilityValue","languages","language","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","langCode","setLanguage","currentLangCode","navigator","toLowerCase","shortLangCode","substr","nativeName","buildOptions","loadingOption","getPrivacyKey","screen","privacySettings","allowUserIds","allowChatIds","blockUserIds","blockChatIds","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","reduce","result","membersCount","blockCount","handleVisibilityChange","getLocation","session","region","country","getDeviceEnvironment","deviceModel","platform","systemVersion","terminateAuthorization","terminateAllAuthorizations","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","handleTerminateSessionClick","handleTerminateAllSessions","currentSession","isCurrent","otherSessions","renderSession","handler","dateActive","appName","ip","sessions","chatsByIds","usersByIds","blockedIds","unblockContact","handleUnblockClick","contactId","viewportOffset","isPrivate","CHAT_HEIGHT_PX","renderContact","animatedEmoji","selectAnimatedEmoji","AnimatedEmoji","expectedPassword","submitLabel","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","handleSubmit","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","onChangePasswordVisibility","onStart","FOCUS_DELAY_TIMEOUT_MS","shouldConfirm","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","codeLength","twoFaSettings","waitingEmailCodeLength","newValue","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","code","itemIds","filterPlaceholder","notFoundText","searchInputId","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","handleSelectedContactIdsChange","contactsIds","foldersState","foldersDispatch","twoFaState","twoFaDispatch","handleSaveFilter","renderCurrentSection","Main","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","contactIds","serverTimeOffset","resultIds","sortUserIds","forceShowSelf","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","handleNextStep","creationProgress","creationError","chatCreation","memberIds","createGroupChat","createChannel","setTitle","about","setAbout","ChatCreationProgress","handleTitleChange","handleDescriptionChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","NewChannelStep2","NewGroupStep2","NewChannelStep1","NewGroupStep1","folderType","noChatsText","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","ArrowLeft","ArrowRight","PageUp","PageDown","End","Home","Tab","preventDefaultForScrollKeys","disableScrolling","passive","ontouchmove","onkeydown","enableScrolling","getCopyLabel","hasSelection","canImageBeCopied","MessageContextMenu","anchor","canSendNow","canReschedule","canReply","canEdit","canPin","canUnpin","canForward","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","onReply","onEdit","onPin","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCloseAnimationEnd","onCopyLink","copyOptions","afterEffect","getMessageText","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","mediaLoader","copyImageToClipboard","anchorNode","parentNode","clipboardText","copyTextToClipboard","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","positionY","useContextMenuPosition","Menu","noOptions","isScheduled","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadMessageLink","isMenuOpen","setIsMenuOpen","setIsDeleteModalOpen","isPinModalOpen","setIsPinModalOpen","isCalendarOpen","openCalendar","closeCalendar","closeMenu","closePinModal","handleCloseCalendar","handleReply","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleOpenCalendar","handleRescheduleMessage","scheduledAt","handleCopyLink","scheduledMaxDate","getDayStartAt","selectStickerSet","stickerSetId","loadStickers","toggleStickerSet","sendMessage","throttleMs","isDisabled","stickerSetAccessHash","isPreloadedGlobally","handleButtonClick","hasCloseButton","STICKER_SIZE_MODAL","isRestricted","canDeleteChat","getCanDeleteChat","canSubscribe","canSearch","canMute","canLeave","onSubscribeChannel","onSearchClick","updateChatMutedState","enterMessageSelectMode","handleToggleMuteClick","handleSubscribe","handleSearch","handleSelectMessages","Portal","runDebouncedForSearch","results","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","Array","from","input","div","contentEditable","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","SearchInput","findInViewport","selectorOrElements","margin","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y1","y2","isFullyVisible","onInsertUserName","filteredChatMembers","getSelectedIndex","newIndex","cycleRestrict","selectedMentionIndex","setSelectedMentionIndex","handleArrowKey","handleUserSelect","forceFocus","handleSelectMention","member","onUp","onDown","onTab","first","position","fastSmoothScroll","setItemVisible","prevChatMembers","renderedChatMembers","attachments","caption","canSuggestMembers","groupChatMembers","recentEmojis","emojiKeywords","onCaptionUpdate","addRecentEmoji","loadEmojiKeywords","onFileAppend","onClear","hideTimeoutRef","prevAttachments","renderingAttachments","isHovered","markHovered","unmarkHovered","isQuick","every","quick","isMentionTooltipOpen","mentionFilter","closeMentionTooltip","insertMention","mentionFilteredMembers","useMentionTooltip","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","sendAttachments","handleFilesDrop","dataTransfer","newFiles","file","CONTENT_TYPES_FOR_QUICK_UPLOAD","areAllPhotos","mimeType","areAllVideos","renderHeader","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","data-attach-description","attachment","File","filename","extension","getFileExtension","previewData","emojis","onEmojiSelect","MessageInput","html","editableInputId","onUpdate","shouldSetFocus","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","innerHTML","addNewOption","newOptions","list","scrollHeight","scrollTo","behavior","handleCreate","questionTrimmed","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","hidden","closeTimeout","useMouseInside","menuCloseTimeout","isMouseInside","native","names","IS_EMOJI_SUPPORTED","loading","category","allEmojis","useOnIntersect","emojisPerRow","ceil","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","headerRef","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","entries","entry","intersectingWithIndexes","newLeft","HEADER_BUTTON_WIDTH","fastSmoothScrollHorizontal","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","handleEmojiSelect","MENU_TRANSITION_DURATION","containerClassName","faded","STICKER_MARGIN","loadAndPlay","onStickerSelect","onStickerUnfave","stickersPerRow","STICKER_SIZE_PICKER","stickerSetIntersections","favorite","recentStickers","favoriteStickers","addedSetIds","canSendStickers","loadRecentStickers","loadFavoriteStickers","addRecentSticker","activeSetIndex","setActiveSetIndex","areAddedLoaded","allSets","noPopulatedSets","set","stickerSetEl","handleStickerSelect","handleStickerUnfave","gif","videoData","shouldRenderVideo","preload","savedGifs","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","SYMBOL_MENU_TAB_ICONS","Emoji","Stickers","GIFs","onRemoveSymbol","onSearchOpen","renderTabButton","handleSearchOpen","isActivated","allowedAttachmentOptions","setRecentEmojis","handleMouseEnter","handleMouseLeave","fastRaf","recentEmojisRef","renderContent","isFrom","onMouseEnter","onMouseLeave","noCloseOnBackdrop","onFileSelect","onPollCreate","handleQuickSelect","handleDocumentSelect","canAttachMedia","canAttachPolls","autoClose","forEmoji","clearStickersForEmoji","prevStickers","displayedStickers","clickInlineButton","keyboardButtons","row","button","onSilentSend","onScheduleSend","listEmojis","usePrevDuringAnimation","selectedIndex","setSelectedIndex","emojisCount","handleSelectEmoji","onLeft","onRight","messagesById","foundResults","senderUser","getGlobal","senderChat","forwardInfo","isChannelPost","orderBy","preloadBackwards","LastMessageMeta","selectShouldLoopStickers","isSomeModalOpen","onModalToggle","isAdded","areStickersLoaded","useOnChange","coverStickerIds","covers","otherStickers","handleAddClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","featured","featuredIds","loadFeaturedStickers","setIsModalOpen","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","searchMoreGifs","setGifSearchQuery","getAllowedAttachmentOptions","handleGifClick","hasResults","answer","voters","offsets","pollResults","offset","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","limit","shouldResetVoters","handleViewMoreClick","handleMemberClick","noStatusOrTyping","leftVotersCount","renderViewMoreButton","total","getMessagePoll","resultsByOption","buildCollectionByKey","management","updateContact","deleteUser","deleteHistory","closeManagement","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","withFullInfo","hasLinkedChannel","linkedChatId","isBasicGroup","canChangeInfo","getHasAdminRight","canBanUsers","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","currentTitle","currentAbout","imageHash","handleClickEditType","ManagementScreens","ChatPrivacyType","handleClickDiscussion","Discussion","handleClickPermissions","GroupPermissions","handleClickAdministrators","ChatAdministrators","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","GroupMembers","handleTogglePreHistory","isPreHistoryHidden","isEnabled","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembers","handleDeleteGroup","isCreator","formatInteger","onChatMemberSelect","updateChatDefaultBannedRights","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handleRemovedUsersClick","GroupRemovedUsers","handleAddExceptionClick","GroupUserPermissionsCreate","handleExceptionMemberClick","promotedByUserId","GroupUserPermissions","handlePermissionChange","getUpdatedPermissionValue","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","members","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","sendMessages","blocking","sendMedia","sendPolls","embedLinks","inviteUsers","pinMessages","changeInfo","updateChatMemberBannedRights","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","isSignaturesShown","toggleSignatures","hasLinkedChat","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","ChannelSubscribers","handleDeleteChannel","selectManagement","checkPublicLink","updatePublicLink","updatePrivateLink","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","canUpdate","handleOptionChange","handleSave","handleRevokePrivateLink","langPrefix1","langPrefix2","SafeLink","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","handleUnlinkGroupSessions","channelId","Initial","handleLinkGroupSessions","renderLinkGroupHeader","linkedGroup","renderLinkGroupConfirmText","hasPrivateLink","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","teactOrderKey","isButtonsInOneRow","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","selectedChatMember","handleBanFromGroup","viewMessages","getControlIsDisabled","isOwner","handleAdminMemberClick","ChatAdminRights","getMemberStatus","promotedByUser","GroupRecentActions","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","adminRights","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","addAdmins","anonymous","maxLength","openUserInfo","memberId","managementType","selectCurrentManagementType","CURRENCIES","USD","EUR","GBP","JPY","RUB","UAH","INR","AED","getCurrencySign","currency","VISA","MASTERCARD1","MASTERCARD2","CardType","cards","Default","Visa","Mastercard","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","phone","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","getBillingCountry","countryCode","countryList","useFocusAfterAnimation","animationDuration","hasArrow","labelText","htmlFor","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handlePhoneChange","handleSaveInfoChange","shippingOptions","handleShippingSelect","amount","renderPaymentItem","main","renderCheckoutItem","invoiceContent","prices","shippingPrices","checkoutInfo","totalPrice","photoUrl","paymentMethod","paymentProvider","shippingAddress","shippingMethod","item","expiryInputRef","charAt","parts","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","savedInfo","invoice","nativeProvider","nativeParams","passwordMissing","payment","isProviderError","nameRequested","phoneRequested","emailRequested","shippingAddressRequested","flexible","phoneToProvider","emailToProvider","globalDialogs","validateRequestedInfo","sendPaymentForm","setPaymentStep","sendCredentialsInfo","clearPaymentError","paymentState","paymentDispatch","currencySign","field","fieldError","errors","getShippingErrors","handleErrorModalClose","PaymentStep","Checkout","shippingOption","getShippingPrices","totalPrices","concat","acc","cur","getTotalPrice","detectCardTypeText","findShippingOption","getCheckoutInfo","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","setStep","nextStep","ShippingInfo","Shipping","PaymentInfo","buttonText","cuurentStep","renderModalContent","renderError","optionId","receipt","mapedPrices","info","totalAmount","credentialsTitle","fullAddress","ANIMATED_STICKERS_PATHS","MonkeyIdle","MonkeyTracking","MonkeyClose","MonkeyPeek","FoldersAll","FoldersNew","DiscussionGroups","path","location","cropperResultOptions","quality","format","circle","Croppie","croppiePromise","cropper","isCroppieReady","setIsCroppieReady","imgFile","cropContainer","enableZoom","boundary","viewport","blobToDataUri","bind","err","DEBUG","console","initCropper","ensureCroppie","croppedImg","blobToFile","selectedFile","setSelectedFile","croppedBlobUrl","setCroppedBlobUrl","labelClassName","URL","revokeObjectURL","createObjectURL","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","STICKER_SIZE","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","closeMonkeyData","setCloseMonkeyData","peekMonkeyData","setPeekMonkeyData","isFirstMonkeyLoaded","setIsFirstMonkeyLoaded","isPeekShown","setIsPeekShown","handleFirstMonkeyLoad","STICKER_SIZE_TWO_FA","playSegment","onInputChange","setPassword","canSubmit","setCanSubmit","select","autoComplete","MIN_PASSWORD_LENGTH"],"mappings":"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","file":"3.b6671ce7a09e7e06aa40.js","sourcesContent":["import { ApiMessage, ApiDimensions } from '../../../api/types';\n\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.active .media-viewer-content img, .active .media-viewer-content video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin === MediaViewerOrigin.ProfileAvatar);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, shouldAppendProfileInfo = false) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (shouldAppendProfileInfo) {\n    ghost.classList.add('ProfileInfo');\n    const profileInfo = document.querySelector('#RightColumn .ProfileInfo .info');\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isElementInViewport(el: HTMLElement) {\n  if (el.style.display === 'none') {\n    return false;\n  }\n\n  const rect = el.getBoundingClientRect();\n  const { height: windowHeight } = windowSize.get();\n\n  return (rect.top <= windowHeight) && ((rect.top + rect.height) >= 0);\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter) {\n    topOffsetRem += mql.matches ? 0.875 : 3.375;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.active > .MessageList #album-media-${message!.id}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${message!.id}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${message!.id}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .ChatInfo .Avatar';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .active .ProfilePhoto';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.active > .MessageList #message${message!.id}`;\n      mediaSelector = '.message-content .full-media, .message-content .thumbnail';\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls && mediaEls[mediaEls.length - 1],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, ApiMessage, ApiUser } from '../../api/types';\n\nimport { getSenderTitle, isChatPrivate } from '../../modules/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: number;\n  messageId?: number;\n  isAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'closeMediaViewer' | 'focusMessage'>;\n\nconst SenderInfo: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId, messageId, sender, isAvatar, message, closeMediaViewer, focusMessage,\n}) => {\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n    focusMessage({ chatId, messageId });\n  }, [chatId, focusMessage, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const isFromChat = sender.id < 0;\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isFromChat ? (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar ? lang('lng_mediaview_profile_photo') : formatMediaDateTime(lang, message!.date * 1000)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    if (isAvatar && chatId) {\n      return {\n        sender: isChatPrivate(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return {};\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['closeMediaViewer', 'focusMessage']),\n)(SenderInfo);\n","import React, { FC, useMemo } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getMessageMediaHash } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport useMediaDownload from '../../hooks/useMediaDownload';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  isZoomed: boolean;\n  message?: ApiMessage;\n  fileName?: string;\n  isAvatar?: boolean;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  onZoomToggle: NoneToVoidFunction;\n};\n\nconst MediaViewerActions: FC<OwnProps> = ({\n  mediaData,\n  isVideo,\n  isZoomed,\n  message,\n  fileName,\n  isAvatar,\n  onCloseMediaViewer,\n  onForward,\n  onZoomToggle,\n}) => {\n  const {\n    isDownloadStarted,\n    downloadProgress,\n    handleDownloadClick,\n  } = useMediaDownload(\n    message && isVideo ? getMessageMediaHash(message, 'download') : undefined,\n    fileName,\n  );\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {!isAvatar && (\n            <MenuItem\n              icon=\"forward\"\n              onClick={onForward}\n            >\n              {lang('Forward')}\n            </MenuItem>\n          )}\n          {isVideo ? (\n            <MenuItem\n              icon={isDownloadStarted ? 'close' : 'download'}\n              onClick={handleDownloadClick}\n            >\n              {isDownloadStarted ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download'}\n            </MenuItem>\n          ) : (\n            <MenuItem\n              icon=\"download\"\n              href={mediaData}\n              download={fileName}\n            >\n              {lang('AccActionDownload')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        {isDownloadStarted && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {!isAvatar && (\n        <>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Forward')}\n            onClick={onForward}\n          >\n            <i className=\"icon-forward\" />\n          </Button>\n        </>\n      )}\n      {isVideo ? (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('AccActionDownload')}\n          onClick={handleDownloadClick}\n        >\n          {isDownloadStarted ? (\n            <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n          ) : (\n            <i className=\"icon-download\" />\n          )}\n        </Button>\n      ) : (\n        <Button\n          href={mediaData}\n          download={fileName}\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('AccActionDownload')}\n        >\n          <i className=\"icon-download\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={isZoomed ? 'Zoom Out' : 'Zoom In'}\n        onClick={onZoomToggle}\n      >\n        <i className={isZoomed ? 'icon-zoom-out' : 'icon-zoom-in'} />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default MediaViewerActions;\n","import React, { FC, useEffect, useState } from '../../lib/teact/teact';\n\nimport { throttle } from '../../util/schedulers';\nimport { TextPart } from '../common/helpers/renderMessageText';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHidden?: boolean;\n  isForVideo: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isHidden, isForVideo, onClick,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {text && (\n        <div className=\"media-viewer-footer-content\" onClick={!IS_SINGLE_COLUMN_LAYOUT ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\nimport { PLATFORM_ENV } from '../util/environment';\n\ntype RefType = {\n  current: HTMLElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreenStatus(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || PLATFORM_ENV === 'iOS')) {\n      return;\n    }\n\n    if (elRef.current.requestFullscreen) {\n      elRef.current.requestFullscreen();\n    } else if (elRef.current.webkitRequestFullscreen) {\n      elRef.current.webkitRequestFullscreen();\n    } else if (elRef.current.webkitEnterFullscreen) {\n      elRef.current.webkitEnterFullscreen();\n    } else if (elRef.current.mozRequestFullScreen) {\n      elRef.current.mozRequestFullScreen();\n    }\n\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.mozCancelFullScreen) {\n      document.mozCancelFullScreen();\n    } else if (document.webkitCancelFullScreen) {\n      document.webkitCancelFullScreen();\n    } else if (document.webkitExitFullscreen) {\n      document.webkitExitFullscreen();\n    }\n\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const listener = () => { setIsFullscreen(Boolean(prop && document[prop])); };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n    const video = elRef.current;\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && PLATFORM_ENV !== 'iOS') {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n\n  return '';\n}\n","const units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'];\n\nexport default (bytes: number) => {\n  const number = bytes === 0 ? 0 : Math.floor(Math.log(bytes) / Math.log(1024));\n\n  return `${(bytes / 1024 ** Math.floor(number)).toFixed(1)} ${units[number]}`;\n};\n","import React, { FC, useState, useEffect } from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport formatFileSize from './helpers/formatFileSize';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './VideoPlayerControls.scss';\n\ntype IProps = {\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceVisible: boolean;\n  isForceMobileVersion?: boolean;\n  isPlayed: boolean;\n  isFullscreenSupported: boolean;\n  isFullscreen: boolean;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: OnChangeHandler;\n};\n\ntype OnChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => void;\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 800;\n\nconst VideoPlayerControls: FC<IProps> = ({\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceVisible,\n  isForceMobileVersion,\n  isPlayed,\n  isFullscreenSupported,\n  isFullscreen,\n  onChangeFullscreen,\n  onPlayPause,\n  onSeek,\n}) => {\n  const [isVisible, setVisibility] = useState(true);\n\n  useEffect(() => {\n    if (isForceVisible) {\n      setVisibility(isForceVisible);\n    }\n  }, [isForceVisible]);\n\n  useEffect(() => {\n    let timeout: number | undefined;\n\n    if (!isForceVisible) {\n      if (IS_SINGLE_COLUMN_LAYOUT) {\n        setVisibility(false);\n      } else {\n        timeout = window.setTimeout(() => {\n          setVisibility(false);\n        }, HIDE_CONTROLS_TIMEOUT_MS);\n      }\n    }\n\n    return () => {\n      if (timeout) {\n        window.clearTimeout(timeout);\n      }\n    };\n  }, [isForceVisible]);\n\n  useEffect(() => {\n    if (isVisible || isForceVisible) {\n      document.body.classList.add('video-controls-visible');\n    }\n\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isForceVisible, isVisible]);\n\n  const lang = useLang();\n\n  if (!isVisible && !isForceVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className={`VideoPlayerControls ${isForceMobileVersion ? 'mobile' : ''}`} onClick={stopEvent}>\n      {renderSeekLine(currentTime, duration, bufferedProgress, onSeek)}\n      <Button\n        ariaLabel={lang('AccActionPlay')}\n        size=\"tiny\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent-white\"\n        className=\"play\"\n        onClick={onPlayPause}\n      >\n        <i className={isPlayed ? 'icon-pause' : 'icon-play'} />\n      </Button>\n      {renderTime(currentTime, duration)}\n      {bufferedProgress < 1 && renderFileSize(bufferedProgress, fileSize)}\n      {isFullscreenSupported && (\n        <Button\n          ariaLabel=\"Fullscreen\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"fullscreen\"\n          onClick={onChangeFullscreen}\n        >\n          <i className={`${isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'}`} />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderFileSize(downloadedPercent: number, totalSize: number) {\n  return (\n    <div className=\"player-file-size\">\n      {`${formatFileSize(totalSize * downloadedPercent)} / ${formatFileSize(totalSize)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(currentTime: number, duration: number, bufferedProgress: number, onSeek: OnChangeHandler) {\n  const percentagePlayed = (currentTime / duration) * 100;\n  const percentageBuffered = bufferedProgress * 100;\n\n  return (\n    <div className=\"player-seekline\">\n      <div className=\"player-seekline-track\">\n        <div\n          className=\"player-seekline-buffered\"\n          // @ts-ignore teact feature\n          style={`width: ${percentageBuffered || 0}%`}\n        />\n        <div\n          className=\"player-seekline-played\"\n          // @ts-ignore teact feature\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n        <input\n          min=\"0\"\n          max=\"100\"\n          step={0.01}\n          type=\"range\"\n          onInput={onSeek}\n          className=\"player-seekline-input\"\n          value={percentagePlayed || 0}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreenStatus from '../../hooks/useFullscreen';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport safePlay from '../../util/safePlay';\n\nimport VideoPlayerControls from './VideoPlayerControls';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './VideoPlayer.scss';\nimport { ApiDimensions } from '../../api/types';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  downloadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  downloadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  onClose,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlayed, setIsPlayed] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [isControlsVisible, setIsControlsVisible] = useState(true);\n\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreenStatus(videoRef, setIsPlayed);\n\n  const { isBuffered, bufferedProgress, bufferingHandlers } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlayed(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlayed) {\n      videoRef.current!.pause();\n      setIsPlayed(false);\n    } else {\n      videoRef.current!.play();\n      setIsPlayed(true);\n    }\n  }, [isPlayed]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleMouseOver = useCallback(() => {\n    setIsControlsVisible(true);\n  }, []);\n\n  const handleMouseOut = useCallback(() => {\n    setIsControlsVisible(false);\n  }, []);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlayed(false);\n  }, []);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    e.stopPropagation();\n\n    videoRef.current!.currentTime = (Number(e.target.value) * videoRef.current!.duration) / 100;\n  }, []);\n\n  const toggleControls = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    setIsControlsVisible(!isControlsVisible);\n  }, [isControlsVisible]);\n\n  useEffect(() => {\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onClick={!isGif && IS_SINGLE_COLUMN_LAYOUT ? toggleControls : undefined}\n      onMouseOver={!isGif ? handleMouseOver : undefined}\n      onMouseOut={!isGif ? handleMouseOut : undefined}\n    >\n      <div\n        // @ts-ignore\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          playsInline\n          loop={isGif}\n          // This is to force auto playing on mobiles\n          muted={isGif}\n          id=\"media-viewer-video\"\n          // @ts-ignore\n          style={videoStyle}\n          onEnded={handleEnded}\n          onClick={!IS_SINGLE_COLUMN_LAYOUT ? togglePlayState : undefined}\n          onDoubleClick={handleFullscreenChange}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : downloadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlayed={isPlayed}\n          bufferedProgress={bufferedProgress}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={videoRef.current ? videoRef.current.duration : 0}\n          isForceVisible={!isPlayed || isControlsVisible}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPlayPause={togglePlayState}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ZoomControls.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onChangeZoom: (level: number, canCloseZoom?: boolean) => void;\n};\n\nexport const MAX_ZOOM_LEVEL = 3;\nexport const MIN_ZOOM_LEVEL = 1;\nconst ONE_STEP_PERCENT = 100 / (MAX_ZOOM_LEVEL - MIN_ZOOM_LEVEL);\nconst RESET_ZOOM_LEVEL = 1.5;\n\nconst ZoomControls: FC<OwnProps> = ({ isShown, onChangeZoom }) => {\n  const { transitionClassNames } = useShowTransition(isShown);\n  const prevIsShown = usePrevious<boolean>(isShown);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [zoomLevel, setZoomLevel] = useState(1);\n  const isSeeking = useRef<boolean>(false);\n\n  useEffect(() => {\n    if (isShown && !prevIsShown) {\n      setZoomLevel(RESET_ZOOM_LEVEL);\n    }\n  }, [isShown, prevIsShown]);\n\n  const handleZoomOut = () => {\n    if (inputRef.current) {\n      setZoomLevel(Math.max(MIN_ZOOM_LEVEL, zoomLevel - 0.5));\n    }\n  };\n\n  const handleZoomIn = () => {\n    if (inputRef.current) {\n      setZoomLevel(Math.min(MAX_ZOOM_LEVEL, zoomLevel + 0.5));\n    }\n  };\n\n  const handleStartSeek = useCallback(() => {\n    isSeeking.current = true;\n  }, []);\n\n  const handleStopSeek = useCallback(() => {\n    isSeeking.current = false;\n    if (zoomLevel === 1) {\n      onChangeZoom(zoomLevel, !isSeeking.current);\n    }\n  }, [onChangeZoom, zoomLevel]);\n\n  const handleSeeklineChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n    setZoomLevel(Math.min(MAX_ZOOM_LEVEL, Math.max(Number(e.target.value), MIN_ZOOM_LEVEL)));\n  };\n\n  useEffect(() => {\n    onChangeZoom(zoomLevel, !isSeeking.current);\n  }, [zoomLevel, onChangeZoom]);\n\n  const lang = useLang();\n\n  const className = buildClassName(\n    'ZoomControls',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className}>\n      <Button\n        disabled={zoomLevel === MIN_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel={lang('ZoomOut')}\n        className=\"zoom-out\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        disabled={zoomLevel === MAX_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel=\"Zoom In\"\n        className=\"zoom-in\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      <div className=\"seekline\">\n        <div className=\"seekline-track\">\n          <div\n            className=\"seekline-played\"\n            // @ts-ignore teact feature\n            style={`width: ${(zoomLevel - 1) * ONE_STEP_PERCENT}%`}\n          />\n          <input\n            ref={inputRef}\n            min={MIN_ZOOM_LEVEL}\n            max={MAX_ZOOM_LEVEL}\n            step=\"0.5\"\n            value={zoomLevel}\n            type=\"range\"\n            className=\"seekline-input\"\n            onChange={handleSeeklineChange}\n            onMouseDown={handleStartSeek}\n            onMouseUp={handleStopSeek}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ZoomControls);\n","/*\n  @source https://github.com/ajainarayanan/react-pan-zoom\n\n  Heavily inspired/lifted from this idea: https://stackoverflow.com/a/39311435/661768\n  without jqueryUI or jquery dependency.\n*/\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { areSortedArraysEqual } from '../../util/iteratees';\n\nimport './PanZoom.scss';\n\nexport interface IDragData {\n  x: number;\n  y: number;\n  dx: number;\n  dy: number;\n}\n\nexport interface OwnProps {\n  children: any;\n  className?: string;\n  noWrap: boolean;\n  canPan: boolean;\n  zoomLevel: number;\n  panDeltaX: number;\n  panDeltaY: number;\n  onPan?: (x: number, y: number) => void;\n}\n\nconst INITIAL_MATRIX = [\n  1, 0, 0, 1, 0, 0,\n];\n\nconst SCALE_VALUES = {\n  1: 1,\n  1.5: 1.5,\n  2: 2.2,\n  2.5: 3.3,\n  3: 5.5,\n};\n\nconst ZOOM_SAFE_AREA = 150;\n\nfunction calculateSafeZoneOnZoom(oldScale: number, matrixData: number[], wrapper: HTMLDivElement | null) {\n  const image = wrapper && wrapper.querySelector('.active img');\n  if (!wrapper || !image) {\n    return matrixData;\n  }\n  const wrapperRect = wrapper.getBoundingClientRect();\n  const imageRect = image.getBoundingClientRect();\n\n  const newImgWidth = (imageRect.width / oldScale) * matrixData[0];\n  const newImgHeight = (imageRect.height / oldScale) * matrixData[3];\n  const newImgX = (wrapperRect.width - newImgWidth) / 2 + matrixData[4];\n  const newImgY = (wrapperRect.height - newImgHeight) / 2 + matrixData[5];\n  if (wrapperRect.width && wrapperRect.width - ZOOM_SAFE_AREA < newImgX) {\n    matrixData[4] -= newImgX + wrapperRect.width - ZOOM_SAFE_AREA;\n  } else if (newImgWidth && newImgWidth + newImgX < ZOOM_SAFE_AREA) {\n    matrixData[4] -= newImgWidth + newImgX - ZOOM_SAFE_AREA;\n  }\n  if (wrapperRect.height && wrapperRect.height - ZOOM_SAFE_AREA < newImgY) {\n    matrixData[5] -= newImgY + wrapperRect.height - ZOOM_SAFE_AREA;\n  } else if (newImgHeight && newImgHeight + newImgY < ZOOM_SAFE_AREA) {\n    matrixData[5] -= newImgHeight + newImgY - ZOOM_SAFE_AREA;\n  }\n\n  return matrixData;\n}\n\nconst PanZoom: FC<OwnProps> = ({\n  children,\n  className,\n  noWrap,\n  canPan,\n  zoomLevel,\n  panDeltaX,\n  panDeltaY,\n  onPan,\n}) => {\n  const tunedZoomLevel = SCALE_VALUES[zoomLevel as keyof typeof SCALE_VALUES] || zoomLevel;\n  const [isDragging, setIsDragging] = useState<boolean>(false);\n  const [dragData, setDragData] = useState<IDragData>({\n    dx: panDeltaX, dy: panDeltaY, x: 0, y: 0,\n  });\n  // [zoom, skew, skew, zoom, dx, dy] - see https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix()\n  const [matrixData, setMatrixData] = useState<number[]>(INITIAL_MATRIX);\n  // Used to set cursor while moving.\n  // eslint-disable-next-line no-null/no-null\n  const panWrapperRef = useRef<HTMLDivElement>(null);\n  // Used to set transform for pan.\n  // eslint-disable-next-line no-null/no-null\n  const panContainerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const newZoomLevel = tunedZoomLevel || matrixData[0];\n    const newPandx = panDeltaX || matrixData[4];\n    const newPandy = panDeltaY || matrixData[5];\n\n    const newMatrixData = [...matrixData];\n    if (matrixData[0] !== newZoomLevel) {\n      newMatrixData[0] = newZoomLevel || newMatrixData[0];\n      newMatrixData[3] = newZoomLevel || newMatrixData[3];\n    }\n    if (matrixData[4] !== newPandx) {\n      newMatrixData[4] = newPandx;\n    }\n    if (matrixData[5] !== newPandy) {\n      newMatrixData[5] = newPandy;\n    }\n\n    if (!areSortedArraysEqual(matrixData, newMatrixData)) {\n      setMatrixData(calculateSafeZoneOnZoom(matrixData[0], newMatrixData, panWrapperRef.current));\n    }\n    // eslint-disable-next-line\n  }, [panDeltaX, panDeltaY, tunedZoomLevel]);\n\n  useEffect(() => {\n    if (!canPan) {\n      setMatrixData(INITIAL_MATRIX);\n    }\n  }, [canPan]);\n\n  useEffect(() => {\n    if (panContainerRef.current) {\n      panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n    }\n  }, [noWrap, matrixData]);\n\n  const handleMouseDown = (e: React.MouseEvent<EventTarget>) => {\n    if (!canPan) {\n      return;\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n\n    const offsetX = matrixData[4];\n    const offsetY = matrixData[5];\n    const newDragData: IDragData = {\n      dx: offsetX,\n      dy: offsetY,\n      x: e.pageX,\n      y: e.pageY,\n    };\n    setDragData(newDragData);\n    setIsDragging(true);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.add('move');\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.remove('move');\n    }\n\n    if (onPan) {\n      onPan(matrixData[4], matrixData[5]);\n    }\n  };\n\n  function getNewMatrixData(x: number, y: number): number[] {\n    const newMatrixData = [...matrixData];\n    const deltaX = dragData.x - x;\n    const deltaY = dragData.y - y;\n    newMatrixData[4] = dragData.dx - deltaX;\n    newMatrixData[5] = dragData.dy - deltaY;\n\n    return newMatrixData;\n  }\n\n  const handleMouseMove = (e: React.MouseEvent<EventTarget>) => {\n    if (isDragging) {\n      const newMatrixData = getNewMatrixData(e.pageX, e.pageY);\n      setMatrixData(newMatrixData);\n\n      if (panContainerRef.current) {\n        panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n      }\n    }\n  };\n\n  if (noWrap) {\n    return children;\n  }\n\n  return (\n    <div\n      ref={panWrapperRef}\n      className={`pan-wrapper ${className || ''}`}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onMouseMove={handleMouseMove}\n    >\n      <div\n        ref={panContainerRef}\n        className=\"pan-container\"\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PanZoom);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiChat, ApiMediaFormat, ApiMessage, ApiUser, ApiDimensions,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  AVATAR_FULL_DIMENSIONS,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  calculateMediaViewerDimensions,\n} from '../common/helpers/mediaDimensions';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  getChatAvatarHash,\n  getChatMediaMessageIds,\n  getMessageFileName,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageDocument,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  getPhotoFullDimensions,\n  getVideoDimensions, getMessageFileSize,\n\n} from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaWithDownloadProgress from '../../hooks/useMediaWithDownloadProgress';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport usePrevious from '../../hooks/usePrevious';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport SenderInfo from './SenderInfo';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\nimport ZoomControls from './ZoomControls';\nimport PanZoom from './PanZoom';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: number;\n  threadId?: number;\n  messageId?: number;\n  senderId?: number;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  profilePhotoIndex?: number;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  animationLevel: 0 | 1 | 2;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openMediaViewer' | 'closeMediaViewer' | 'openForwardMenu' | 'focusMessage'>;\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageId,\n  senderId,\n  origin,\n  avatarOwner,\n  profilePhotoIndex,\n  message,\n  chatMessages,\n  collectionIds,\n  openMediaViewer,\n  closeMediaViewer,\n  openForwardMenu,\n  focusMessage,\n  animationLevel,\n}) => {\n  const isOpen = Boolean(avatarOwner || messageId);\n\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  /* Content */\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isAvatar = Boolean(avatarOwner);\n\n  /* Navigation */\n  const isSingleSlide = Boolean(webPagePhoto || webPageVideo);\n  const messageIds = useMemo(() => {\n    return isSingleSlide && messageId\n      ? [messageId]\n      : getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n  }, [isSingleSlide, messageId, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaMessageIndex = messageId ? messageIds.indexOf(messageId) : -1;\n  const isFirst = selectedMediaMessageIndex === 0 || selectedMediaMessageIndex === -1;\n  const isLast = selectedMediaMessageIndex === messageIds.length - 1 || selectedMediaMessageIndex === -1;\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<number | undefined>(senderId);\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaMessageIndex;\n  }\n  const slideAnimation = animationLevel >= 1 ? 'mv-slide' : 'none';\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2;\n\n  /* Controls */\n  const [isFooterHidden, setIsFooterHidden] = useState<boolean>(false);\n  const [canPanZoomWrap, setCanPanZoomWrap] = useState(false);\n  const [isZoomed, setIsZoomed] = useState<boolean>(false);\n  const [zoomLevel, setZoomLevel] = useState<number>(1);\n  const [panDelta, setPanDelta] = useState({ x: 0, y: 0 });\n\n  /* Media data */\n  function getMediaHash(isFull?: boolean) {\n    if (isAvatar && profilePhotoIndex !== undefined) {\n      const { photos } = avatarOwner!;\n      return photos && photos[profilePhotoIndex]\n        ? `photo${photos[profilePhotoIndex].id}?size=c`\n        : getChatAvatarHash(avatarOwner!, isFull ? 'big' : 'normal');\n    }\n\n    return message && getMessageMediaHash(message, isFull ? 'viewerFull' : 'viewerPreview');\n  }\n\n  const blobUrlPictogram = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const previewMediaHash = getMediaHash();\n  const blobUrlPreview = useMedia(\n    previewMediaHash,\n    undefined,\n    isAvatar && previewMediaHash && previewMediaHash.startsWith('profilePhoto')\n      ? ApiMediaFormat.DataUri\n      : ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const { mediaData: fullMediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaData)) || blobUrlPreview || blobUrlPictogram;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const fileName = message\n    ? getMessageFileName(message)\n    : isAvatar\n      ? `avatar${avatarOwner!.id}-${profilePhotoIndex}.jpg`\n      : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = AVATAR_FULL_DIMENSIONS;\n  }\n\n  useEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return;\n    }\n\n    document.body.classList.toggle('is-media-viewer-open', isOpen);\n  }, [isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevOrigin = usePrevious(origin);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && !prevMessage && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      const textParts = message ? renderMessageText(message) : undefined;\n      const hasFooter = Boolean(textParts);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo,\n  ]);\n\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (isZoomed) {\n      setCanPanZoomWrap(true);\n    } else {\n      timer = window.setTimeout(() => {\n        setCanPanZoomWrap(false);\n      }, ANIMATION_DURATION);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [isZoomed]);\n\n  const closeZoom = () => {\n    setIsZoomed(false);\n    setZoomLevel(1);\n    setPanDelta({ x: 0, y: 0 });\n  };\n\n  const handleZoomToggle = useCallback(() => {\n    setIsZoomed(!isZoomed);\n    setZoomLevel(!isZoomed ? 1.5 : 1);\n    if (isZoomed) {\n      setPanDelta({ x: 0, y: 0 });\n    }\n  }, [isZoomed]);\n\n  const handleZoomValue = useCallback((level: number, canCloseZoom = false) => {\n    setZoomLevel(level);\n    if (level === 1 && canCloseZoom) {\n      closeZoom();\n    }\n  }, []);\n\n  const close = useCallback(() => {\n    closeMediaViewer();\n    closeZoom();\n  }, [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    close();\n    focusMessage({ chatId, threadId, messageId });\n  }, [close, chatId, threadId, focusMessage, messageId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    closeZoom();\n  }, [openForwardMenu, chatId, messageId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    if (isZoomed) {\n      closeZoom();\n    } else {\n      close();\n    }\n  }) : undefined), [close, isOpen, isZoomed]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const getMessageId = useCallback((fromId: number, direction: number): number => {\n    let index = messageIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < messageIds.length - 1)) {\n      index += direction;\n    }\n\n    return messageIds[index];\n  }, [messageIds]);\n\n  const selectPreviousMedia = useCallback(() => {\n    if (isFirst) {\n      return;\n    }\n\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: messageId ? getMessageId(messageId, -1) : undefined,\n      origin,\n    });\n  }, [chatId, threadId, getMessageId, isFirst, messageId, openMediaViewer, origin]);\n\n  const selectNextMedia = useCallback(() => {\n    if (isLast) {\n      return;\n    }\n\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: messageId ? getMessageId(messageId, 1) : undefined,\n      origin,\n    });\n  }, [chatId, threadId, getMessageId, isLast, messageId, openMediaViewer, origin]);\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          selectPreviousMedia();\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          selectNextMedia();\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  });\n\n  // Support for swipe gestures and closing on click\n  useEffect(() => {\n    const element = document.querySelector<HTMLDivElement>('.slide-container > .active, .slide-container > .to');\n    if (!element) {\n      return undefined;\n    }\n\n    const shouldCloseOnVideo = isGif && !IS_IOS;\n\n    return captureEvents(element, {\n      // eslint-disable-next-line max-len\n      excludedClosestSelector: `.backdrop, .navigation, .media-viewer-head, .media-viewer-footer${!shouldCloseOnVideo ? ', .VideoPlayer' : ''}`,\n      onClick: () => {\n        if (!isZoomed && !IS_TOUCH_ENV) {\n          close();\n        }\n      },\n      onSwipe: IS_TOUCH_ENV ? (e, direction) => {\n        if (direction === SwipeDirection.Right) {\n          selectPreviousMedia();\n        } else if (direction === SwipeDirection.Left) {\n          selectNextMedia();\n        } else if (!(e.target && (e.target as HTMLElement).closest('.MediaViewerFooter'))) {\n          close();\n        }\n      } : undefined,\n    });\n  }, [close, isFooterHidden, isGif, isPhoto, isZoomed, selectNextMedia, selectPreviousMedia]);\n\n  const handlePan = useCallback((x: number, y: number) => {\n    setPanDelta({ x, y });\n  }, []);\n\n  const handleToggleFooterVisibility = useCallback(() => {\n    if (IS_TOUCH_ENV && (isPhoto || isGif)) {\n      setIsFooterHidden(!isFooterHidden);\n    }\n  }, [isFooterHidden, isGif, isPhoto]);\n\n  const lang = useLang();\n\n  function renderSlide(isActive: boolean) {\n    if (isAvatar) {\n      return (\n        <div key={chatId} className=\"media-viewer-content\">\n          {renderPhoto(\n            fullMediaData || blobUrlPreview,\n            calculateMediaViewerDimensions(AVATAR_FULL_DIMENSIONS, false),\n            !IS_SINGLE_COLUMN_LAYOUT && !isZoomed,\n          )}\n        </div>\n      );\n    } else if (message) {\n      const textParts = renderMessageText(message);\n      const hasFooter = Boolean(textParts);\n\n      return (\n        <div\n          key={messageId}\n          className={`media-viewer-content ${hasFooter ? 'has-footer' : ''}`}\n          onClick={handleToggleFooterVisibility}\n        >\n          {isPhoto && renderPhoto(\n            localBlobUrl || fullMediaData || blobUrlPreview || blobUrlPictogram,\n            message && calculateMediaViewerDimensions(dimensions!, hasFooter),\n            !IS_SINGLE_COLUMN_LAYOUT && !isZoomed,\n          )}\n          {isVideo && (\n            <VideoPlayer\n              key={messageId}\n              url={localBlobUrl || fullMediaData}\n              isGif={isGif}\n              posterData={bestImageData}\n              posterSize={message && calculateMediaViewerDimensions(dimensions!, hasFooter, true)}\n              downloadProgress={downloadProgress}\n              fileSize={videoSize!}\n              isMediaViewerOpen={isOpen}\n              noPlay={!isActive}\n              onClose={close}\n            />\n          )}\n          {textParts && (\n            <MediaViewerFooter\n              text={textParts}\n              onClick={handleFooterClick}\n              isHidden={isFooterHidden && (!isVideo || isGif)}\n              isForVideo={isVideo && !isGif}\n            />\n          )}\n        </div>\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderSenderInfo() {\n    return isAvatar ? (\n      <SenderInfo\n        key={avatarOwner!.id}\n        chatId={avatarOwner!.id}\n        isAvatar\n      />\n    ) : (\n      <SenderInfo\n        key={messageId}\n        chatId={chatId}\n        messageId={messageId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      className={isZoomed ? 'zoomed' : ''}\n      isOpen={isOpen}\n    >\n      {() => (\n        <>\n          <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {IS_SINGLE_COLUMN_LAYOUT && (\n              <Button\n                className=\"media-viewer-close\"\n                round\n                size=\"smaller\"\n                color=\"translucent-white\"\n                ariaLabel={lang('Close')}\n                onClick={close}\n              >\n                <i className=\"icon-close\" />\n              </Button>\n            )}\n            <Transition activeKey={animationKey.current!} name={headerAnimation}>\n              {renderSenderInfo}\n            </Transition>\n            <MediaViewerActions\n              mediaData={fullMediaData || blobUrlPreview}\n              isVideo={isVideo}\n              isZoomed={isZoomed}\n              message={message}\n              fileName={fileName}\n              onCloseMediaViewer={close}\n              onForward={handleForward}\n              onZoomToggle={handleZoomToggle}\n              isAvatar={isAvatar}\n            />\n          </div>\n          <PanZoom\n            noWrap={!canPanZoomWrap}\n            canPan={isZoomed}\n            panDeltaX={panDelta.x}\n            panDeltaY={panDelta.y}\n            zoomLevel={zoomLevel}\n            onPan={handlePan}\n          >\n            <Transition\n              className=\"slide-container\"\n              activeKey={selectedMediaMessageIndex}\n              name={slideAnimation}\n            >\n              {renderSlide}\n            </Transition>\n          </PanZoom>\n          {!isFirst && (\n            <button\n              type=\"button\"\n              className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n              aria-label={lang('AccDescrPrevious')}\n              dir={lang.isRtl ? 'rtl' : undefined}\n              onClick={selectPreviousMedia}\n            />\n          )}\n          {!isLast && (\n            <button\n              type=\"button\"\n              className={`navigation next ${isVideo && !isGif && 'inline'}`}\n              aria-label={lang('Next')}\n              dir={lang.isRtl ? 'rtl' : undefined}\n              onClick={selectNextMedia}\n            />\n          )}\n          <ZoomControls\n            isShown={isZoomed}\n            onChangeZoom={handleZoomValue}\n          />\n        </>\n      )}\n    </ShowTransition>\n  );\n};\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean) {\n  return blobUrl\n    ? (\n      <img\n        src={blobUrl}\n        alt=\"\"\n        // @ts-ignore teact feature\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n        draggable={Boolean(canDrag)}\n      />\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        // @ts-ignore teact feature\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n    } = global.mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && messageId)) {\n        return { animationLevel };\n      }\n\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message) {\n        return { animationLevel };\n      }\n\n      return {\n        chatId,\n        messageId,\n        senderId: message.senderId,\n        origin,\n        message,\n        animationLevel,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        messageId: -1,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        profilePhotoIndex: profilePhotoIndex || 0,\n        animationLevel,\n        origin,\n      };\n    }\n\n    if (!(chatId && threadId && messageId)) {\n      return { animationLevel };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, messageId);\n    } else {\n      message = selectChatMessage(global, chatId, messageId);\n    }\n\n    if (!message) {\n      return { animationLevel };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      senderId: message.senderId,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openMediaViewer', 'closeMediaViewer', 'openForwardMenu', 'focusMessage',\n  ]),\n)(MediaViewer));\n","import React, {\n  FC, useMemo, useState, memo, useRef, useEffect, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  getCanPostInChat, getChatTitle, isChatPrivate, sortChatIds,\n} from '../../modules/helpers';\nimport searchWords from '../../util/searchWords';\nimport { pick, unique } from '../../util/iteratees';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './ForwardPicker.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  pinnedIds?: number[];\n  activeListIds?: number[];\n  archivedListIds?: number[];\n  orderedPinnedIds?: number[];\n  currentUserId?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setForwardChatId' | 'exitForwardMode' | 'loadMoreChats'>;\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\nconst MODAL_HIDE_DELAY_MS = 300;\n\nconst ForwardPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatsById,\n  pinnedIds,\n  activeListIds,\n  archivedListIds,\n  currentUserId,\n  isOpen,\n  setForwardChatId,\n  exitForwardMode,\n  loadMoreChats,\n}) => {\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (isOpen) {\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        setTimeout(() => {\n          requestAnimationFrame(() => {\n            if (inputRef.current) {\n              inputRef.current.focus();\n            }\n          });\n        }, FOCUS_DELAY_MS);\n      }\n    } else {\n      if (inputRef.current) {\n        inputRef.current.blur();\n      }\n\n      setTimeout(() => {\n        setFilter('');\n      }, MODAL_HIDE_DELAY_MS);\n    }\n  }, [isOpen]);\n\n  const chatIds = useMemo(() => {\n    const listIds = [\n      ...activeListIds || [],\n      ...archivedListIds || [],\n    ];\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    return sortChatIds([\n      ...listIds.filter((id) => {\n        const chat = chatsById[id];\n        if (!chat) {\n          return true;\n        }\n\n        if (!getCanPostInChat(chat, MAIN_THREAD_ID)) {\n          return false;\n        }\n\n        if (!filter) {\n          return true;\n        }\n\n        return searchWords(getChatTitle(lang, chatsById[id], undefined, id === currentUserId), filter);\n      }),\n    ], chatsById, undefined, priorityIds);\n  }, [activeListIds, archivedListIds, chatsById, currentUserId, filter, lang, pinnedIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(loadMoreChats, chatIds, Boolean(filter));\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFilter(e.currentTarget.value);\n  }, []);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds) {\n      setForwardChatId({ id: viewportIds[index] });\n    }\n  }, '.ListItem-button', true);\n\n  const modalHeader = (\n    <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel={lang('Close')}\n        onClick={exitForwardMode}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <InputText\n        ref={inputRef}\n        value={filter}\n        onChange={handleFilterChange}\n        onKeyDown={handleKeyDown}\n        placeholder={lang('ForwardTo')}\n      />\n    </div>\n  );\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={exitForwardMode}\n      className=\"ForwardPicker\"\n      header={modalHeader}\n    >\n      {viewportIds && viewportIds.length ? (\n        <InfiniteScroll\n          className=\"picker-list custom-scroll\"\n          items={viewportIds}\n          onLoadMore={getMore}\n          noScrollRestore={Boolean(filter)}\n          ref={containerRef}\n          onKeyDown={handleKeyDown}\n        >\n          {viewportIds.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable force-rounded-corners\"\n              onClick={() => setForwardChatId({ id })}\n            >\n              {isChatPrivate(id) ? (\n                <PrivateChatInfo status={id === currentUserId ? lang('SavedMessagesInfo') : undefined} userId={id} />\n              ) : (\n                <GroupChatInfo chatId={id} />\n              )}\n            </ListItem>\n          ))}\n        </InfiniteScroll>\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\">Sorry, nothing found.</p>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      pinnedIds: orderedPinnedIds.active,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      currentUserId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setForwardChatId', 'exitForwardMode', 'loadMoreChats']),\n)(ForwardPicker));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiError, ApiInviteInfo } from '../../api/types';\n\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport renderText from '../common/helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './Dialogs.scss';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo)[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'dismissDialog' | 'acceptInviteConfirmation'>;\n\nconst Dialogs: FC<StateProps & DispatchProps> = ({ dialogs, dismissDialog, acceptInviteConfirmation }) => {\n  const lang = useLang();\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, participantsCount, isChannel,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      dismissDialog();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n\n    return (\n      <Modal\n        isOpen\n        onClose={dismissDialog}\n        className=\"error\"\n        title={title}\n      >\n        {participantsCount !== undefined && <p>{participantsText}</p>}\n        <Button isText className=\"confirm-dialog-button\" onClick={handleJoinClick}>{joinText}</Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={dismissDialog}>{lang('Cancel')}</Button>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen\n        onClose={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error) : renderText(error.message!, ['emoji', 'br'])}\n        <div>\n          <Button isText onClick={dismissDialog}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return (\n    <div id=\"Dialogs\">\n      {dialogs.map(renderDialog)}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['dialogs']),\n  (setGlobal, actions): DispatchProps => pick(actions, ['dismissDialog', 'acceptInviteConfirmation']),\n)(Dialogs));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiNotification } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\n\nimport Notification from '../ui/Notification';\nimport renderText from '../common/helpers/renderText';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'dismissNotification'>;\n\nconst Notifications: FC<StateProps & DispatchProps> = ({ notifications, dismissNotification }) => {\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({ message }) => (\n        <Notification\n          message={renderText(message, ['emoji', 'br', 'links', 'simple_markdown'])}\n          onDismiss={dismissNotification}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['notifications']),\n  (setGlobal, actions): DispatchProps => pick(actions, ['dismissNotification']),\n)(Notifications));\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'toggleSafeLinkModal'>;\n\nconst SafeLinkModal: FC<OwnProps & DispatchProps> = ({ url, toggleSafeLinkModal }) => {\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(url);\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, ['toggleSafeLinkModal']),\n)(SafeLinkModal));\n","import React, {\n  FC, memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport {\n  formatMonthAndYear, formatHumanDate, formatTime,\n} from '../../util/dateFormat';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport useLang, { LangFn } from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nexport type OwnProps = {\n  selectedAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = ['M', 'T', 'W', 'T', 'F', 'S', 'S'];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n  const defaultSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const maxDate = maxAt ? new Date(maxAt) : undefined;\n\n  const [selectedDate, setSelectedDate] = useState<Date>(defaultSelectedDate);\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(defaultSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(defaultSelectedDate.getMinutes()),\n  );\n\n  const currentYear = selectedDate.getFullYear();\n  const currentMonth = selectedDate.getMonth();\n  const currentDate = selectedDate.getDate();\n\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedDate(defaultSelectedDate);\n    }\n  }, [isOpen, defaultSelectedDate]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const calendarGrid = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  function handlePrevMonth() {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n\n      return dateCopy;\n    });\n  }\n\n  function handleSubmit() {\n    onSubmit(selectedDate);\n  }\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {formatMonthAndYear(lang, selectedDate, IS_SINGLE_COLUMN_LAYOUT)}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((letter) => (\n            <div className=\"day-button faded weekday\">\n              <span>{letter}</span>\n            </div>\n          ))}\n          {calendarGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, isFutureMode ? now : undefined, isPastMode ? now : maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                gridDate === currentDate && 'selected',\n              )}\n            >\n              {!!gridDate && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {withTimePicker ? formatSubmitLabel(lang, selectedDate) : submitButtonLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const grid: number[] = [];\n\n  const date = new Date();\n  date.setFullYear(year);\n  date.setMonth(month);\n  date.setDate(1);\n\n  const monthStartDay = date.getDay();\n  // Fill empty cells\n  for (let i = 1; i < monthStartDay; i++) {\n    grid.push(0);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    grid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  return grid;\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day, 0, 0, 0, 0);\n  const fixedMinDate = minDate && new Date(minDate.getFullYear(), minDate.getMonth(), minDate.getDate(), 0, 0, 0, 0);\n  const fixedMaxDate = maxDate && new Date(maxDate.getFullYear(), maxDate.getMonth(), maxDate.getDate(), 0, 0, 0, 0);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatHumanDate(lang, date, true);\n\n  if (day === 'Today') {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', day).replace('%@', formatTime(date));\n}\n\nexport default memo(CalendarModal);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchMessagesByDate' | 'closeHistoryCalendar'>;\n\nconst HistoryCalendar: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen, selectedAt, searchMessagesByDate, closeHistoryCalendar,\n}) => {\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      selectedAt: global.historyCalendarSelectedAt,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesByDate', 'closeHistoryCalendar',\n  ]),\n)(HistoryCalendar));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../api/types';\nimport { IAlbum } from '../../types';\n\nimport { GlobalActions } from '../../global/types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  isChatPrivate,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteMessages' | 'deleteScheduledMessages'>;\n\nconst DeleteMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n  deleteMessages,\n  deleteScheduledMessages,\n}) => {\n  const handleDeleteMessageForAll = useCallback(() => {\n    const messageIds = album && album.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [deleteMessages, message.id, onClose, album]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    const messageIds = album && album.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName && lang('Conversation.DeleteMessagesFor', renderText(contactName))}\n          {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isChatPrivate(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'deleteMessages', 'deleteScheduledMessages',\n  ]),\n)(DeleteMessageModal));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../modules/selectors';\nimport {\n  isChatPrivate,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: number;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'pinMessage'>;\n\nconst PinMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  messageId,\n  chatId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n  pinMessage,\n}) => {\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, chatId, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [chatId, messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n        {lang('DialogPin')}\n      </Button>\n      {canPinForAll && (\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n          {contactName\n            ? lang('Conversation.PinMessagesFor', contactName)\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n        </Button>\n      )}\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isChatPrivate(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = !!chat && isChatChannel(chat);\n    const isGroup = !!chat && isChatBasicGroup(chat);\n    const isSuperGroup = !!chat && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isChatPrivate(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['pinMessage']),\n)(PinMessageModal));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: number;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n        {lang('DialogUnpin')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { selectCanDeleteSelectedMessages, selectCurrentChat, selectUser } from '../../modules/selectors';\nimport {\n  isChatPrivate,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteMessages' | 'exitMessageSelectMode' | 'deleteScheduledMessages'>;\n\nconst DeleteSelectedMessagesModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n  deleteMessages,\n  deleteScheduledMessages,\n  exitMessageSelectMode,\n}) => {\n  const handleDeleteMessageForAll = useCallback(() => {\n    deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: true });\n    exitMessageSelectMode();\n    onClose();\n  }, [deleteMessages, exitMessageSelectMode, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: false });\n    }\n\n    exitMessageSelectMode();\n    onClose();\n  }, [\n    isSchedule, exitMessageSelectMode, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages,\n  ]);\n\n  const lang = useLang();\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName\n            ? lang('ChatList.DeleteForEveryone', renderText(contactName))\n            : lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isChatPrivate(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'deleteMessages',\n    'deleteScheduledMessages',\n    'exitMessageSelectMode',\n  ]),\n)(DeleteSelectedMessagesModal));\n","import React, { FC, memo, useEffect } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCurrentMessageList,\n  selectSelectedMessagesCount,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport useFlag from '../../hooks/useFlag';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport DeleteSelectedMessagesModal from './DeleteSelectedMessagesModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'exitMessageSelectMode' | 'openForwardMenuForSelectedMessages'>;\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps & DispatchProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  exitMessageSelectMode,\n  openForwardMenuForSelectedMessages,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: openDeleteModal,\n        onDelete: openDeleteModal,\n        onEsc: exitMessageSelectMode,\n      })\n      : undefined;\n  }, [isActive, isDeleteModalOpen, openDeleteModal, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const lang = useLang();\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount);\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={exitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {!!selectedMessagesCount && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && (\n              <MenuItem\n                icon=\"forward\"\n                ariaLabel=\"Forward Messages\"\n                onClick={openForwardMenuForSelectedMessages}\n              >\n                <span className=\"item-text\">\n                  {lang('Forward')}\n                </span>\n              </MenuItem>\n            )}\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={openDeleteModal}\n              disabled={!canDeleteMessages}\n              ariaLabel={lang('EditAdminGroupDeleteMessages')}\n            >\n              <span className=\"item-text\">\n                {lang('Delete')}\n              </span>\n            </MenuItem>\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessagesModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { type: messageListType } = selectCurrentMessageList(global) || {};\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n\n    return {\n      isSchedule: messageListType === 'scheduled',\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['exitMessageSelectMode', 'openForwardMenuForSelectedMessages']),\n)(MessageSelectToolbar));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nexport default (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isChatPrivate, getPrivateChatUserId, selectIsChatMuted } from '../../../modules/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../modules/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: number;\n  withUsername?: boolean;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  privateChatUser,\n  isPinned,\n  isMuted,\n  withUsername,\n  onClick,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    privateChatUser,\n    isPinned,\n    isMuted,\n    handleDelete: openDeleteModal,\n  });\n\n  const handleClick = () => {\n    onClick(chatId);\n  };\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isChatPrivate(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      privateChatUser,\n      isPinned,\n      isMuted,\n    };\n  },\n)(LeftSearchResultChat));\n","import React, {\n  FC, useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: number[];\n  usersById: Record<number, ApiUser>;\n  recentlyFoundChatIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadTopUsers' | 'loadContactList' | 'openChat' | 'addRecentlyFoundChatId' | 'clearRecentlyFoundChats'\n)>;\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps & DispatchProps> = ({\n  topUserIds, usersById, recentlyFoundChatIds,\n  onReset, loadTopUsers, loadContactList, openChat,\n  addRecentlyFoundChatId, clearRecentlyFoundChats,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n      // Loading full contact list for quick local search before user enters the query\n      loadContactList();\n    });\n  }, [loadTopUsers, loadContactList]);\n\n  useHorizontalScroll(topUsersRef.current, !topUserIds);\n\n  const handleClick = useCallback(\n    (id: number) => {\n      openChat({ id });\n      onReset();\n      setTimeout(() => {\n        addRecentlyFoundChatId({ id });\n      }, SEARCH_CLOSE_TIMEOUT_MS);\n    },\n    [openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={clearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global.globalSearch;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadTopUsers',\n    'loadContactList',\n    'openChat',\n    'addRecentlyFoundChatId',\n    'clearRecentlyFoundChats',\n  ]),\n)(RecentContacts));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport {\n  getChatTitle,\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageSummaryText,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../modules/helpers';\nimport { selectChat, selectUser } from '../../../modules/selectors';\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\nimport useMedia from '../../../hooks/useMedia';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport VerifiedIcon from '../../common/VerifiedIcon';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: number;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusMessage'>;\n\nconst ChatMessage: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  focusMessage,\n  lastSyncTime,\n}) => {\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!IS_SINGLE_COLUMN_LAYOUT}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        withOnlineStatus\n        isSavedMessages={privateChatUser && privateChatUser.isSelf}\n        lastSyncTime={lastSyncTime}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{renderText(getChatTitle(lang, chat, privateChatUser))}</h3>\n            {chat.isVerified && <VerifiedIcon />}\n          </div>\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderMessageSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderMessageSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderText(getMessageSummaryText(lang, message));\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={isRoundVideo ? 'round' : undefined} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderText(getMessageSummaryText(lang, message, true), ['emoji', 'highlight'], { highlight: searchQuery })}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n      lastSyncTime: global.lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'focusMessage',\n  ]),\n)(ChatMessage));\n","import React, { FC, memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser, ApiChat, ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport searchWords from '../../../util/searchWords';\nimport { unique, pick } from '../../../util/iteratees';\nimport { getUserFullName, getMessageSummaryText, sortChatIds } from '../../../modules/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  localContactIds?: number[];\n  localChatIds?: number[];\n  localUserIds?: number[];\n  globalChatIds?: number[];\n  globalUserIds?: number[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<number, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'addRecentlyFoundChatId' | 'searchMessagesGlobal' | 'setGlobalSearchChatId'\n)>;\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 3;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, usersById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect, openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n}) => {\n  const lang = useLang();\n\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: number) => {\n      openChat({ id });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        onReset();\n      }\n    },\n    [currentUserId, openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: number) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const foundContactIds = localContactIds\n      ? localContactIds.filter((id) => {\n        const user = usersById[id];\n        if (!user) {\n          return false;\n        }\n\n        const fullName = getUserFullName(user);\n        return (fullName && searchWords(fullName, searchQuery)) || searchWords(user.username, searchQuery);\n      })\n      : [];\n\n    return [\n      ...(currentUserId && searchWords(lang('SavedMessages'), searchQuery) ? [currentUserId] : []),\n      ...sortChatIds(unique([\n        ...foundContactIds,\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById),\n    ];\n  }, [\n    searchQuery, localContactIds, currentUserId, lang, localChatIds, localUserIds, chatsById, usersById,\n  ]);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(unique([...globalChatIds, ...globalUserIds]),\n      chatsById, true);\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_').map(Number);\n\n        return (\n          globalMessagesByChatId && globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId]\n        );\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = getMessageSummaryText(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {!!localResults.length && (\n        <div className=\"chat-selection no-selection no-scrollbar\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {!!localResults.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {!!globalResults.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {!!foundMessages.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n        usersById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = global.globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const { foundIds } = (resultsByType && resultsByType.text) || {};\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      usersById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n    'addRecentlyFoundChatId',\n    'searchMessagesGlobal',\n    'setGlobalSearchChatId',\n  ]),\n)(ChatResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { getMessageSummaryText } from '../../../modules/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport DateSuggest from './DateSuggest';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<number, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<number, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal')>;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  currentUserId,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  searchMessagesGlobal,\n  onSearchDateSelect,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n          chatId: currentUserId,\n        });\n      });\n    }\n  }, [currentUserId, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_').map(Number);\n\n        return (\n          globalMessagesByChatId && globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId]\n        );\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = getMessageSummaryText(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {!!foundMessages.length && foundMessages.map(renderFoundMessage)}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const { fetchingStatus, resultsByType } = global.globalSearch;\n\n    const { foundIds } = (resultsByType && resultsByType.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['searchMessagesGlobal']),\n)(ChatMessageResults));\n","import { GlobalState } from '../../../../global/types';\nimport {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { ISettings } from '../../../../types';\n\nimport { selectTheme } from '../../../../modules/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  globalMessagesByChatId?: Record<number, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: number;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = global.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props && props.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const { foundIds } = (resultsByType && resultsByType[currentType]) || {};\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'openMediaViewer')>;\n\nconst CURRENT_TYPE = 'media';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  openMediaViewer,\n}) => {\n  const lang = useLang();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n\n      return globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((messageId: number, chatId: number) => {\n    openMediaViewer({\n      chatId,\n      messageId,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={message.id}\n            idPrefix=\"search-media\"\n            message={message}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'openMediaViewer',\n  ]),\n)(MediaResults));\n","import { ApiChat, ApiMessage, ApiUser } from '../../../../api/types';\nimport {\n  getChatTitle,\n  getSenderTitle,\n  isChatPrivate,\n  isChatGroup,\n} from '../../../../modules/helpers';\nimport { LangFn } from '../../../../hooks/useLang';\n\nexport function getSenderName(\n  lang: LangFn, message: ApiMessage, chatsById: Record<number, ApiChat>, usersById: Record<number, ApiUser>,\n) {\n  const { senderId } = message;\n  if (!senderId) {\n    return undefined;\n  }\n\n  const sender = isChatPrivate(senderId) ? usersById[senderId] : chatsById[senderId];\n\n  let senderName = getSenderTitle(lang, sender);\n\n  const chat = chatsById[message.chatId];\n  if (chat) {\n    if (isChatPrivate(senderId) && (sender as ApiUser).isSelf) {\n      senderName = `${lang('FromYou')} → ${getChatTitle(lang, chat)}`;\n    } else if (isChatGroup(chat)) {\n      senderName += ` → ${getChatTitle(lang, chat)}`;\n    }\n  }\n\n  return senderName;\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage')>;\n\nconst CURRENT_TYPE = 'links';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n\n      return globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: number) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n  ]),\n)(LinkResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../modules/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage')>;\n\nconst CURRENT_TYPE = 'documents';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n      const message = globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: number) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n  ]),\n)(FileResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage' | 'openAudioPlayer')>;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n  openAudioPlayer,\n}) => {\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n\n      return globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: number) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: number) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            target=\"searchResult\"\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n    'openAudioPlayer',\n  ]),\n)(AudioResults));\n","import React, {\n  FC, memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport UserChatResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('setGlobalSearchContent' | 'setGlobalSearchDate')>;\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  setGlobalSearchContent,\n  setGlobalSearchDate,\n  onReset,\n}) => {\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slide-reversed' : 'slide'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <UserChatResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = global.globalSearch;\n\n    return { currentContent, chatId };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setGlobalSearchContent', 'setGlobalSearchDate']),\n)(LeftSearch));\n","import { useState, useCallback, useRef } from '../lib/teact/teact';\n\nexport type ReducerAction<Actions> = { type: Actions; payload?: any };\nexport type StateReducer<State, Actions> = (state: State, action: ReducerAction<Actions>) => State;\nexport type Dispatch<Actions> = (action: ReducerAction<Actions>) => void;\n\nexport default function useReducer<State, Actions>(\n  reducer: StateReducer<State, Actions>,\n  initialState: State,\n) {\n  const reducerRef = useRef(reducer);\n  const [state, setState] = useState<State>(initialState);\n\n  const dispatch = useCallback((action: ReducerAction<Actions>) => {\n    setState((currentState) => reducerRef.current(currentState, action));\n  }, []);\n\n  return [\n    state,\n    dispatch,\n  ] as [State, Dispatch<Actions>];\n}\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\nimport { ApiChatFolder } from '../../api/types';\nimport { pick, omit } from '../../util/iteratees';\n\nexport type FolderChatType = {\n  icon: string;\n  title: string;\n  key: keyof Pick<ApiChatFolder, (\n    'contacts' | 'nonContacts' | 'groups' | 'channels' | 'bots' |\n    'excludeMuted' | 'excludeArchived' | 'excludeRead'\n  )>;\n};\n\nexport const INCLUDED_CHAT_TYPES: FolderChatType[] = [\n  { icon: 'user', title: 'FilterContacts', key: 'contacts' },\n  { icon: 'non-contacts', title: 'FilterNonContacts', key: 'nonContacts' },\n  { icon: 'group', title: 'FilterGroups', key: 'groups' },\n  { icon: 'channel', title: 'FilterChannels', key: 'channels' },\n  { icon: 'bots', title: 'FilterBots', key: 'bots' },\n];\n\nexport const EXCLUDED_CHAT_TYPES: FolderChatType[] = [\n  { icon: 'mute', title: 'FilterMuted', key: 'excludeMuted' },\n  { icon: 'archive', title: 'FilterArchived', key: 'excludeArchived' },\n  { icon: 'readchats', title: 'FilterRead', key: 'excludeRead' },\n];\n\nconst INCLUDE_FILTER_FIELDS: Array<keyof FolderIncludeFilters> = [\n  'includedChatIds', 'bots', 'channels', 'groups', 'contacts', 'nonContacts',\n];\nconst EXCLUDE_FILTER_FIELDS: Array<keyof FolderExcludeFilters> = [\n  'excludedChatIds', 'excludeArchived', 'excludeMuted', 'excludeRead',\n];\n\nexport function selectChatFilters(state: FoldersState, mode: 'included' | 'excluded', selectTemp?: boolean) {\n  let selectedChatIds: number[] = [];\n  let selectedChatTypes: FolderChatType['key'][] = [];\n\n  if (mode === 'included') {\n    const {\n      includedChatIds,\n      ...includeFilters\n    } = selectTemp\n      ? state.includeFilters || {}\n      : pick(\n        state.folder,\n        INCLUDE_FILTER_FIELDS,\n      );\n\n    selectedChatIds = includedChatIds || [];\n    selectedChatTypes = (Object.keys(includeFilters) as Array<keyof typeof includeFilters>)\n      .filter((key) => Boolean(includeFilters[key]));\n  } else {\n    const {\n      excludedChatIds,\n      ...excludeFilters\n    } = selectTemp\n      ? state.excludeFilters || {}\n      : pick(\n        state.folder,\n        EXCLUDE_FILTER_FIELDS,\n      );\n\n    selectedChatIds = excludedChatIds || [];\n    selectedChatTypes = (Object.keys(excludeFilters) as Array<keyof typeof excludeFilters>)\n      .filter((key) => Boolean(excludeFilters[key]));\n  }\n\n  return {\n    selectedChatIds,\n    selectedChatTypes,\n  };\n}\n\nfunction getSuggestedFolderName(includeFilters?: FolderIncludeFilters) {\n  if (includeFilters) {\n    const {\n      includedChatIds,\n      ...filters\n    } = includeFilters;\n\n    if (\n      Object.values(filters).filter(Boolean).length > 1\n      || (includedChatIds && includedChatIds.length)\n    ) {\n      return '';\n    }\n\n    if (filters.bots) {\n      return 'Bots';\n    } else if (filters.groups) {\n      return 'Groups';\n    } else if (filters.channels) {\n      return 'Channels';\n    } else if (filters.contacts) {\n      return 'Contacts';\n    } else if (filters.nonContacts) {\n      return 'Non-Contacts';\n    }\n  }\n\n  return '';\n}\n\ntype FolderIncludeFilters = Pick<ApiChatFolder, (\n  'includedChatIds' | 'bots' | 'channels' | 'groups' | 'contacts' | 'nonContacts'\n)>;\ntype FolderExcludeFilters = Pick<ApiChatFolder, 'excludedChatIds' | 'excludeArchived' | 'excludeMuted' | 'excludeRead'>;\n\nexport type FoldersState = {\n  mode: 'create' | 'edit';\n  isLoading?: boolean;\n  isTouched?: boolean;\n  error?: string;\n  folderId?: number;\n  chatFilter: string;\n  folder: Omit<ApiChatFolder, 'id' | 'description' | 'emoticon'>;\n  includeFilters?: FolderIncludeFilters;\n  excludeFilters?: FolderExcludeFilters;\n};\nexport type FoldersActions = (\n  'setTitle' | 'saveFilters' | 'editFolder' | 'reset' | 'setChatFilter' | 'setIsLoading' | 'setError' |\n  'editIncludeFilters' | 'editExcludeFilters' | 'setIncludeFilters' | 'setExcludeFilters'\n);\nexport type FolderEditDispatch = Dispatch<FoldersActions>;\n\nconst INITIAL_STATE: FoldersState = {\n  mode: 'create',\n  chatFilter: '',\n  folder: {\n    title: '',\n    includedChatIds: [],\n    excludedChatIds: [],\n  },\n};\n\nconst foldersReducer: StateReducer<FoldersState, FoldersActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setTitle':\n      return {\n        ...state,\n        folder: {\n          ...state.folder,\n          title: action.payload,\n        },\n        isTouched: true,\n      };\n    case 'editIncludeFilters':\n      return {\n        ...state,\n        includeFilters: pick(\n          state.folder,\n          INCLUDE_FILTER_FIELDS,\n        ),\n      };\n    case 'editExcludeFilters':\n      return {\n        ...state,\n        excludeFilters: pick(\n          state.folder,\n          EXCLUDE_FILTER_FIELDS,\n        ),\n      };\n    case 'setIncludeFilters':\n      return {\n        ...state,\n        includeFilters: action.payload,\n        chatFilter: '',\n      };\n    case 'setExcludeFilters':\n      return {\n        ...state,\n        excludeFilters: action.payload,\n        chatFilter: '',\n      };\n    case 'saveFilters':\n      if (state.includeFilters) {\n        return {\n          ...state,\n          folder: {\n            ...omit(state.folder, INCLUDE_FILTER_FIELDS),\n            title: state.folder.title ? state.folder.title : getSuggestedFolderName(state.includeFilters),\n            ...state.includeFilters,\n          },\n          includeFilters: undefined,\n          chatFilter: '',\n          isTouched: true,\n        };\n      } else if (state.excludeFilters) {\n        return {\n          ...state,\n          folder: {\n            ...omit(state.folder, EXCLUDE_FILTER_FIELDS),\n            ...state.excludeFilters,\n          },\n          excludeFilters: undefined,\n          chatFilter: '',\n          isTouched: true,\n        };\n      } else {\n        return state;\n      }\n    case 'editFolder': {\n      const { id: folderId, description, ...folder } = action.payload;\n\n      return {\n        mode: 'edit',\n        folderId,\n        folder,\n        chatFilter: '',\n      };\n    }\n    case 'setChatFilter': {\n      return {\n        ...state,\n        chatFilter: action.payload,\n      };\n    }\n    case 'setIsLoading': {\n      return {\n        ...state,\n        isLoading: action.payload,\n      };\n    }\n    case 'setError': {\n      return {\n        ...state,\n        error: action.payload,\n      };\n    }\n    case 'reset':\n      return INITIAL_STATE;\n    default:\n      return state;\n  }\n};\n\nexport default () => {\n  return useReducer(foldersReducer, INITIAL_STATE);\n};\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nexport default () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n","import React, {\n  FC, useCallback, useMemo, memo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'signOut' | 'deleteChatFolder'>;\n\nconst SettingsHeader: FC<OwnProps & DispatchProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  signOut,\n  deleteChatFolder,\n}) => {\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n  const [isDeleteFolderDialogOpen, setIsDeleteFolderDialogOpen] = useState(false);\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(true);\n  }, []);\n\n  const closeDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(false);\n  }, []);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteFolderConfirmation();\n    deleteChatFolder({ id: editedFolderId });\n    onReset();\n  }, [editedFolderId, closeDeleteFolderConfirmation, deleteChatFolder, onReset]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n\n            {editedFolderId && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  Delete Folder\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersExcludedChats:\n        return (\n          <div className=\"settings-main-header\">\n            {currentScreen === SettingsScreens.FoldersIncludedChats ? (\n              <h3>{lang('FilterInclude')}</h3>\n            ) : (\n              <h3>{lang('FilterExclude')}</h3>\n            )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('SETTINGS')}</h3>\n\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text=\"Are you sure you want to log out?\"\n        confirmLabel=\"Log Out\"\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isDeleteFolderDialogOpen}\n        onClose={closeDeleteFolderConfirmation}\n        text=\"Are you sure you want to delete this folder?\"\n        confirmLabel=\"Delete\"\n        confirmHandler={handleDeleteFolderMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, ['signOut', 'deleteChatFolder']),\n)(SettingsHeader));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { SettingsScreens } from '../../../types';\nimport { ApiUser } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { getUserFullName } from '../../../modules/helpers';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  currentUser?: ApiUser;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  currentUser,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <div className=\"settings-current-user\">\n            <Avatar user={currentUser} size=\"jumbo\" />\n            <p className=\"name\">{getUserFullName(currentUser)}</p>\n            <p className=\"phone\">{formatPhoneNumberWithCode(currentUser.phoneNumber)}</p>\n          </div>\n        )}\n        <ListItem\n          icon=\"edit\"\n          onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n        >\n          {lang('lng_settings_information')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"settings\"\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n\n    return {\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n    };\n  },\n)(SettingsMain));\n","import React, { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport Button, { OwnProps as ButtonProps } from './Button';\n\nimport './FloatingActionButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  className?: string;\n  color?: ButtonProps['color'];\n  ariaLabel?: ButtonProps['ariaLabel'];\n  disabled?: boolean;\n  onClick: () => void;\n  children: any;\n};\n\nconst FloatingActionButton: FC<OwnProps> = ({\n  isShown,\n  className,\n  color = 'primary',\n  ariaLabel,\n  disabled,\n  onClick,\n  children,\n}) => {\n  const buttonClassName = buildClassName(\n    'FloatingActionButton',\n    isShown && 'revealed',\n    className,\n  );\n\n  return (\n    <Button\n      className={buttonClassName}\n      color={color}\n      round\n      disabled={disabled}\n      onClick={isShown && !disabled ? onClick : undefined}\n      ariaLabel={ariaLabel}\n      tabIndex={-1}\n    >\n      {children}\n    </Button>\n  );\n};\n\nexport default FloatingActionButton;\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\n\nimport { debounce } from '../../util/schedulers';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkUsername: AnyToVoidFunction;\n  onChange: (value: string | false) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX = 'https://t.me/';\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username);\n}\n\nconst SettingsEditProfile: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkUsername,\n  onChange,\n}) => {\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, `${label} is too short`];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, `${label} is too long`];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, `${label} contains invalid characters`];\n    }\n\n    if (isUsernameAvailable === undefined) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      isUsernameAvailable ? lang(`${langPrefix}Available`, 'Username') : undefined,\n      isUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, isUsernameAvailable, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n    e.target.value = `${asLink ? LINK_PREFIX : ''}${newUsername}`;\n\n    const isValid = isUsernameValid(newUsername);\n\n    if (isValid) {\n      runDebouncedForCheckUsername(() => {\n        checkUsername({ username: newUsername });\n      });\n    }\n\n    if (onChange) {\n      onChange(isValid ? newUsername : false);\n    }\n  }, [asLink, checkUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n    />\n  );\n};\n\nexport default memo(SettingsEditProfile);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport { selectUser } from '../../../modules/selectors';\nimport { getChatAvatarHash } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport renderText from '../../common/helpers/renderText';\nimport UsernameInput from '../../common/UsernameInput';\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  currentUsername?: string;\n  progress?: ProfileEditProgress;\n  isUsernameAvailable?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadCurrentUser' | 'updateProfile' | 'checkUsername'\n)>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst MAX_BIO_LENGTH = 70;\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\nconst ERROR_BIO_TOO_LONG = 'Bio can\\' be longer than 70 characters';\n\nconst SettingsEditProfile: FC<StateProps & DispatchProps> = ({\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  currentUsername,\n  progress,\n  isUsernameAvailable,\n  loadCurrentUser,\n  updateProfile,\n  checkUsername,\n}) => {\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [username, setUsername] = useState<string | false>(currentUsername || '');\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = username === false;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || isUsernameAvailable === true;\n  }, [photo, isProfileFieldsTouched, isUsernameError, isUsernameAvailable]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setUsername(value);\n    setIsUsernameTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    if (trimmedBio.length > MAX_BIO_LENGTH) {\n      setError(ERROR_BIO_TOO_LONG);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    username, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-edit-profile\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <InputText\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            error={error === ERROR_BIO_TOO_LONG ? error : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={username || ''}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkUsername={checkUsername}\n            onChange={handleUsernameChange}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {username && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">https://t.me/{username}</span>\n            </p>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const { progress, isUsernameAvailable } = global.profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    if (!currentUser) {\n      return {\n        progress,\n        isUsernameAvailable,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      username: currentUsername,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      currentUsername,\n      progress,\n      isUsernameAvailable,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadCurrentUser',\n    'updateProfile',\n    'checkUsername',\n  ]),\n)(SettingsEditProfile));\n","import React, {\n  FC, memo, useMemo, useCallback, useState, useEffect,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\nimport { ApiChatFolder, ApiChat, ApiUser } from '../../../../api/types';\nimport { NotifyException, NotifySettings } from '../../../../types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { pick } from '../../../../util/iteratees';\nimport { selectNotifyExceptions, selectNotifySettings } from '../../../../modules/selectors';\nimport { throttle } from '../../../../util/schedulers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport { getFolderDescriptionText } from '../../../../modules/helpers';\nimport useLang from '../../../../hooks/useLang';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\ntype OwnProps = {\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  orderedFolderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadRecommendedChatFolders' | 'addChatFolder' | 'showDialog'>;\n\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst MAX_ALLOWED_FOLDERS = 10;\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps & DispatchProps> = ({\n  onCreateFolder,\n  onEditFolder,\n  chatsById,\n  usersById,\n  orderedFolderIds,\n  foldersById,\n  recommendedChatFolders,\n  notifySettings,\n  notifyExceptions,\n  loadRecommendedChatFolders,\n  addChatFolder,\n  showDialog,\n}) => {\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersAll').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, showDialog, onCreateFolder]);\n\n  const lang = useLang();\n\n  const userFolders = useMemo(() => {\n    if (!orderedFolderIds) {\n      return undefined;\n    }\n\n    const chatIds = Object.keys(chatsById).map(Number);\n\n    return orderedFolderIds.map((id) => {\n      const folder = foldersById[id];\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(\n          lang, chatsById, usersById, folder, chatIds, notifySettings, notifyExceptions,\n        ),\n      };\n    });\n  }, [orderedFolderIds, chatsById, foldersById, usersById, notifySettings, notifyExceptions, lang]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, addChatFolder, showDialog]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header\">\n        <div className=\"settings-content-icon\">\n          {animationData && (\n            <AnimatedSticker\n              id=\"settingsFoldersMain\"\n              size={STICKER_SIZE_FOLDER_SETTINGS}\n              animationData={animationData}\n              play={isAnimationLoaded}\n              noLoop\n              onLoad={handleAnimationLoad}\n            />\n          )}\n        </div>\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n          className=\"with-icon mb-2\"\n          color=\"primary\"\n          size=\"smaller\"\n          pill\n          fluid\n          onClick={handleCreateFolder}\n          isRtl={lang.isRtl}\n        >\n          <i className=\"icon-add\" />\n          {lang('CreateNewFilter')}\n        </Button>\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        {userFolders && userFolders.length ? userFolders.map((folder) => (\n          <ListItem\n            className=\"mb-2\"\n            narrow\n            multiline\n            onClick={() => onEditFolder(foldersById[folder.id])}\n          >\n            <span className=\"title\">{folder.title}</span>\n            <span className=\"subtitle\">{folder.subtitle}</span>\n          </ListItem>\n        )) : userFolders && !userFolders.length ? (\n          <p className=\"settings-item-description my-4\" dir=\"auto\">\n            You have no folders yet.\n          </p>\n        ) : <Loading />}\n      </div>\n\n      {(recommendedChatFolders && !!recommendedChatFolders.length) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{folder.title}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: { byId: chatsById },\n      users: { byId: usersById },\n    } = global;\n\n    const {\n      orderedIds: orderedFolderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      chatsById,\n      usersById,\n      orderedFolderIds,\n      foldersById,\n      recommendedChatFolders,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadRecommendedChatFolders', 'addChatFolder', 'showDialog']),\n)(SettingsFoldersMain));\n","import React, { FC } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import React, {\n  FC, memo, useCallback, useState, useEffect, useMemo,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { pick, findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isChatPrivate } from '../../../../modules/helpers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport {\n  FoldersState,\n  FolderEditDispatch,\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: number[];\n  loadedArchivedChatIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'editChatFolder' | 'addChatFolder' | 'loadMoreChats'>;\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'Please select at least one chat for this folder.';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps & DispatchProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  onReset,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n  editChatFolder,\n  addChatFolder,\n  loadMoreChats,\n}) => {\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersNew').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...loadedActiveChatIds || [],\n      ...loadedArchivedChatIds || [],\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  useEffect(() => {\n    if (\n      visibleIncludedChatIds.length < includedChatIds.length\n      || visibleExcludedChatIds.length < excludedChatIds.length\n    ) {\n      loadMoreChats({ listType: 'active' });\n    }\n  }, [\n    loadMoreChats,\n    excludedChatIds.length,\n    includedChatIds.length,\n    visibleExcludedChatIds.length,\n    visibleIncludedChatIds.length,\n  ]);\n\n  const lang = useLang();\n\n  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }\n\n  function handleSubmit() {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isChatPrivate(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-content-header\">\n          <div className=\"settings-content-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"settingsFoldersEdit\"\n                size={STICKER_SIZE_FOLDER_SETTINGS}\n                animationData={animationData}\n                play={isAnimationLoaded && String(state.folderId)}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {state.error}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={!!state.isTouched}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { listIds } = global.chats;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['editChatFolder', 'addChatFolder', 'loadMoreChats']),\n)(SettingsFoldersEdit));\n","import React, {\n  FC, useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\n\nimport { isChatPrivate } from '../../../../modules/helpers';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n  FolderChatType,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: number[];\n  selectedIds: number[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: number[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n  onLoadMore: () => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_CHATS = 100;\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\nconst SettingsFoldersChatsPicker: FC<OwnProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  onLoadMore,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n  const hasMaxChats = selectedIds.length >= MAX_CHATS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: number) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: number) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        onClick={() => handleItemClick(id)}\n        ripple\n        disabled={!isSelected && hasMaxChats}\n      >\n        {isChatPrivate(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(onLoadMore, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        {!hasMaxChats ? (\n          <InputText\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={lang('Search')}\n          />\n        ) : (\n          <p className=\"max-items-reached\" dir=\"auto\">\n            {`Sorry, you can't add more than ${MAX_CHATS} chats.`}\n          </p>\n        )}\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <>\n            <h4 key=\"header1\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChatTypes')}\n            </h4>\n            {chatTypes.map(renderChatType)}\n            <div key=\"divider\" className=\"picker-list-divider\" />\n            <h4 key=\"header2\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </>\n        )}\n\n        {viewportIds && viewportIds.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(SettingsFoldersChatsPicker);\n","import React, {\n  FC, memo, useMemo, useCallback,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\nimport { ApiChat } from '../../../../api/types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { pick } from '../../../../util/iteratees';\nimport searchWords from '../../../../util/searchWords';\nimport { prepareChatList, getChatTitle } from '../../../../modules/helpers';\nimport {\n  FoldersState,\n  FolderEditDispatch,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\n\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  listIds?: number[];\n  orderedPinnedIds?: number[];\n  archivedListIds?: number[];\n  archivedPinnedIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadMoreChats'>;\n\nconst SettingsFoldersChatFilters: FC<OwnProps & StateProps & DispatchProps> = ({\n  mode,\n  state,\n  dispatch,\n  chatsById,\n  listIds,\n  orderedPinnedIds,\n  archivedListIds,\n  archivedPinnedIds,\n  loadMoreChats,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n  const chats = useMemo(() => {\n    const activeChatArrays = listIds\n      ? prepareChatList(chatsById, listIds, orderedPinnedIds, 'all')\n      : undefined;\n    const archivedChatArrays = archivedListIds\n      ? prepareChatList(chatsById, archivedListIds, archivedPinnedIds, 'archived')\n      : undefined;\n\n    if (!activeChatArrays && !archivedChatArrays) {\n      return undefined;\n    }\n\n    return [\n      ...(activeChatArrays\n        ? [...activeChatArrays.pinnedChats, ...activeChatArrays.otherChats]\n        : []\n      ),\n      ...(archivedChatArrays ? archivedChatArrays.otherChats : []),\n    ];\n  }, [chatsById, listIds, orderedPinnedIds, archivedListIds, archivedPinnedIds]);\n\n  const displayedIds = useMemo(() => {\n    if (!chats) {\n      return undefined;\n    }\n\n    return chats\n      .filter((chat) => (\n        !chatFilter\n        || searchWords(getChatTitle(lang, chat), chatFilter)\n        || selectedChatIds.includes(chat.id)\n      ))\n      .map(({ id }) => id);\n  }, [chats, chatFilter, lang, selectedChatIds]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: number[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n      onLoadMore={loadMoreChats}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n    } = global;\n\n    return {\n      chatsById,\n      listIds: listIds.active,\n      orderedPinnedIds: orderedPinnedIds.active,\n      archivedPinnedIds: orderedPinnedIds.archived,\n      archivedListIds: listIds.archived,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadMoreChats']),\n)(SettingsFoldersChatFilters));\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { FoldersState, FolderEditDispatch } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  state,\n  dispatch,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(SettingsScreens.FoldersIncludedChats);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(SettingsScreens.FoldersExcludedChats);\n  }, [dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useCallback, useMemo, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport './RangeSlider.scss';\n\ntype OwnProps = {\n  options?: string[];\n  range?: { min: number; max: number; step?: number };\n  label?: string;\n  value: number;\n  disabled?: boolean;\n  onChange: (value: number) => void;\n};\n\nconst RangeSlider: FC<OwnProps> = ({\n  options,\n  range,\n  label,\n  value,\n  disabled,\n  onChange,\n}) => {\n  const lang = useLang();\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    onChange(Number(event.currentTarget.value));\n  }, [onChange]);\n\n  const className = buildClassName(\n    'RangeSlider',\n    disabled && 'disabled',\n  );\n\n  const trackWidth = useMemo(() => {\n    if (options) {\n      return (value / (options.length - 1)) * 100;\n    } else if (range) {\n      const possibleValuesLength = (range.max - range.min) / (range.step || 1);\n      return ((value - range.min) / possibleValuesLength) * 100;\n    }\n    return 0;\n  }, [value, options, range]);\n\n  const [min, max, step] = useMemo(() => {\n    if (options) {\n      return [0, options.length - 1, 1];\n    } else if (range) {\n      return [range.min, range.max, range.step || 1];\n    }\n\n    return [0, 0, 0];\n  }, [range, options]);\n\n  return (\n    <div className={className}>\n      {label && (\n        <div className=\"slider-top-row\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <span className=\"label\" dir=\"auto\">{label}</span>\n          {range && (\n            <span className=\"value\" dir=\"auto\">{value}</span>\n          )}\n        </div>\n      )}\n      <div className=\"slider-main\">\n        <div\n          className=\"slider-fill-track\"\n          // @ts-ignore\n          style={`width: ${trackWidth}%`}\n        />\n        <input\n          min={min}\n          max={max}\n          value={value}\n          step={step}\n          type=\"range\"\n          onChange={handleChange}\n        />\n        {options && (\n          <div className=\"slider-options\">\n            {options.map((option, index) => (\n              <div\n                className={buildClassName('slider-option no-selection', index === value && 'active')}\n                onClick={() => onChange(index)}\n              >\n                {option}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(RangeSlider);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\ntype OwnProps = {\n  size?: number;\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCoverAnimated: FC<OwnProps> = ({\n  size = STICKER_SIZE_PICKER_HEADER,\n  stickerSet,\n  observeIntersection,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHash = `stickerSet${stickerSet.id}`;\n  const lottieData = useMedia(mediaHash, !isIntersecting, ApiMediaFormat.Lottie);\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(lottieData, 'slow');\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {!shouldRenderFullMedia && getFirstLetters(stickerSet.title, 2)}\n      {shouldRenderFullMedia && lottieData && (\n        <AnimatedSticker\n          id={mediaHash}\n          size={size}\n          animationData={lottieData}\n          className={transitionClassNames}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCoverAnimated);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiStickerSet } from '../../../api/types';\n\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport { getFirstLetters } from '../../../util/textFormat';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({ stickerSet, observeIntersection }) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaData = useMedia(stickerSet.hasThumbnail && `stickerSet${stickerSet.id}`, !isIntersecting);\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(mediaData, 'slow');\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {!shouldRenderFullMedia && getFirstLetters(stickerSet.title, 2)}\n      {shouldRenderFullMedia && (\n        <img src={mediaData} className={transitionClassNames} alt=\"\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiSticker } from '../../api/types';\n\nimport { useIsIntersecting, ObserveFn } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useTransitionForMedia from '../../hooks/useTransitionForMedia';\nimport useFlag from '../../hooks/useFlag';\nimport buildClassName from '../../util/buildClassName';\n\nimport AnimatedSticker from './AnimatedSticker';\nimport Button from '../ui/Button';\n\nimport './StickerButton.scss';\n\ntype OwnProps = {\n  sticker: ApiSticker;\n  size: number;\n  observeIntersection: ObserveFn;\n  noAnimate?: boolean;\n  title?: string;\n  className?: string;\n  onClick?: (arg: any) => void;\n  clickArg?: any;\n  onUnfaveClick?: (sticker: ApiSticker) => void;\n};\n\nconst StickerButton: FC<OwnProps> = ({\n  sticker, size, observeIntersection, noAnimate, title, className, onClick, clickArg, onUnfaveClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const localMediaHash = `sticker${sticker.id}`;\n  const stickerSelector = `sticker-button-${sticker.id}`;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const thumbDataUri = sticker.thumbnail ? sticker.thumbnail.dataUri : undefined;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !isIntersecting, ApiMediaFormat.BlobUrl);\n\n  const shouldPlay = isIntersecting && !noAnimate;\n  const lottieData = useMedia(sticker.isAnimated && localMediaHash, !shouldPlay, ApiMediaFormat.Lottie);\n  const [isAnimationLoaded, markLoaded, unmarkLoaded] = useFlag(Boolean(lottieData));\n  const canAnimatedPlay = isAnimationLoaded && shouldPlay;\n\n  const {\n    shouldRenderThumb,\n    shouldRenderFullMedia: shouldRenderPreview,\n    transitionClassNames: previewTransitionClassNames,\n  } = useTransitionForMedia(previewBlobUrl || canAnimatedPlay, 'slow');\n\n  // To avoid flickering\n  useEffect(() => {\n    if (!shouldPlay) {\n      unmarkLoaded();\n    }\n  }, [unmarkLoaded, shouldPlay]);\n\n  function handleClick() {\n    if (onClick) {\n      onClick(clickArg);\n    }\n  }\n\n  function handleUnfaveClick(e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) {\n    e.stopPropagation();\n    e.preventDefault();\n\n    onUnfaveClick!(sticker);\n  }\n\n  const fullClassName = buildClassName(\n    'StickerButton',\n    sticker.isAnimated && 'animated',\n    stickerSelector,\n    className,\n  );\n\n  const style = shouldRenderThumb && thumbDataUri ? `background-image: url('${thumbDataUri}');` : '';\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      title={title || (sticker && sticker.emoji)}\n      // @ts-ignore\n      style={style}\n      data-sticker-id={sticker.id}\n      onClick={handleClick}\n    >\n      {shouldRenderPreview && !canAnimatedPlay && (\n        // eslint-disable-next-line jsx-a11y/alt-text\n        <img src={previewBlobUrl} className={previewTransitionClassNames} />\n      )}\n      {shouldPlay && lottieData && (\n        <AnimatedSticker\n          id={localMediaHash}\n          animationData={lottieData}\n          play\n          size={size}\n          isLowPriority\n          onLoad={markLoaded}\n        />\n      )}\n      {onUnfaveClick && (\n        <Button\n          className=\"sticker-unfave-button\"\n          color=\"dark\"\n          round\n          onClick={handleUnfaveClick}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerButton);\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../../config';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport StickerSetCoverAnimated from '../../middle/composer/StickerSetCoverAnimated';\nimport StickerSetCover from '../../middle/composer/StickerSetCover';\nimport StickerButton from '../../common/StickerButton';\n\nimport './SettingsStickerSet.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst SettingsStickerSet: FC<OwnProps> = ({\n  stickerSet,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  const firstSticker = stickerSet.stickers && stickerSet.stickers[0];\n\n  if (stickerSet.hasThumbnail || !firstSticker) {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        inactive={!firstSticker}\n        onClick={() => firstSticker && onClick(firstSticker)}\n      >\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          {stickerSet.isAnimated ? (\n            <StickerSetCoverAnimated\n              size={STICKER_SIZE_GENERAL_SETTINGS}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          )}\n        </Button>\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  } else {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        onClick={() => onClick(firstSticker)}\n      >\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          observeIntersection={observeIntersection}\n        />\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  }\n};\n\nexport default memo(SettingsStickerSet);\n","import React, {\n  FC, useCallback, memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ISettings } from '../../../types';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { IS_MAC_OS, IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsStickerSet from './SettingsStickerSet';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'messageTextSize' |\n  'animationLevel' |\n  'messageSendKeyCombo' |\n  'shouldAutoDownloadMediaFromContacts' |\n  'shouldAutoDownloadMediaInPrivateChats' |\n  'shouldAutoDownloadMediaInGroups' |\n  'shouldAutoDownloadMediaInChannels' |\n  'shouldAutoPlayGifs' |\n  'shouldAutoPlayVideos' |\n  'shouldSuggestStickers' |\n  'shouldLoopStickers'\n)> & {\n  stickerSetIds?: string[];\n  stickerSetsById?: Record<string, ApiStickerSet>;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setSettingOption' | 'loadStickerSets' | 'loadAddedStickers'\n)>;\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst SettingsGeneral: FC<OwnProps & StateProps & DispatchProps> = ({\n  onScreenSelect,\n  stickerSetIds,\n  stickerSetsById,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  shouldAutoDownloadMediaFromContacts,\n  shouldAutoDownloadMediaInPrivateChats,\n  shouldAutoDownloadMediaInGroups,\n  shouldAutoDownloadMediaInChannels,\n  shouldAutoPlayGifs,\n  shouldAutoPlayVideos,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  setSettingOption,\n  loadStickerSets,\n  loadAddedStickers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [sticker, setSticker] = useState<ApiSticker>();\n\n  const lang = useLang();\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  useEffect(() => {\n    loadStickerSets();\n  }, [loadStickerSets]);\n\n  useEffect(() => {\n    if (stickerSetIds && stickerSetIds.length) {\n      loadAddedStickers();\n    }\n  }, [stickerSetIds, loadAddedStickers]);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleStickerSetClick = useCallback((value: ApiSticker) => {\n    setSticker(value);\n    openModal();\n  }, [openModal]);\n\n  const stickerSets = stickerSetIds && stickerSetIds.map((id: string) => {\n    return stickerSetsById && stickerSetsById[id] && stickerSetsById[id].installedDate ? stickerSetsById[id] : false;\n  }).filter<ApiStickerSet>(Boolean as any);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          // TODO Remove memo-killer\n          range={{ min: 12, max: 20 }}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={(value) => setSettingOption({ messageSendKeyCombo: value })}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoDownloadMedia')}</h4>\n\n        <Checkbox\n          label={lang('Contacts')}\n          checked={shouldAutoDownloadMediaFromContacts}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaFromContacts: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutodownloadPrivateChats')}\n          checked={shouldAutoDownloadMediaInPrivateChats}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaInPrivateChats: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutodownloadGroupChats')}\n          checked={shouldAutoDownloadMediaInGroups}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaInGroups: isChecked })}\n        />\n        <Checkbox\n          label={lang('FilterChannels')}\n          checked={shouldAutoDownloadMediaInChannels}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaInChannels: isChecked })}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={shouldAutoPlayGifs}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoPlayGifs: isChecked })}\n        />\n        <Checkbox\n          label={lang('DataAndStorage.Autoplay.Videos')}\n          checked={shouldAutoPlayVideos}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoPlayVideos: isChecked })}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AccDescrStickers')}</h4>\n\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={(isChecked) => setSettingOption({ shouldSuggestStickers: isChecked })}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={(isChecked) => setSettingOption({ shouldLoopStickers: isChecked })}\n        />\n\n        <div className=\"mt-4\" ref={stickerSettingsRef}>\n          {stickerSets && stickerSets.map((stickerSet: ApiStickerSet) => (\n            <SettingsStickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersectionForCovers}\n              onClick={handleStickerSetClick}\n            />\n          ))}\n        </div>\n        {sticker && (\n          <StickerSetModal\n            isOpen={isModalOpen}\n            fromSticker={sticker}\n            onClose={closeModal}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'shouldAutoDownloadMediaFromContacts',\n        'shouldAutoDownloadMediaInPrivateChats',\n        'shouldAutoDownloadMediaInGroups',\n        'shouldAutoDownloadMediaInChannels',\n        'shouldAutoPlayGifs',\n        'shouldAutoPlayVideos',\n        'shouldSuggestStickers',\n        'shouldLoopStickers',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n      ]),\n      stickerSetIds: global.stickers.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setSettingOption', 'loadStickerSets', 'loadAddedStickers',\n  ]),\n)(SettingsGeneral));\n","let fileSelector: HTMLInputElement;\n\nexport function openSystemFilesDialog(accept = '*', callback: (e: Event) => void, noMultiple = false) {\n  if (!fileSelector) {\n    fileSelector = document.createElement('input');\n    fileSelector.setAttribute('type', 'file');\n  }\n\n  fileSelector.setAttribute('accept', accept);\n\n  if (noMultiple) {\n    fileSelector.removeAttribute('multiple');\n  } else {\n    fileSelector.setAttribute('multiple', 'multiple');\n  }\n\n  // eslint-disable-next-line no-null/no-null\n  fileSelector.onchange = null;\n  fileSelector.value = '';\n  fileSelector.onchange = callback;\n\n  fileSelector.click();\n}\n","/* eslint-disable eqeqeq */\n/* eslint-disable prefer-template */\n/* eslint-disable prefer-const */\n/* eslint-disable prefer-destructuring */\n/* eslint-disable one-var */\n/* eslint-disable one-var-declaration-per-line */\n\nimport { preloadImage } from './files';\n\n/**\n * HEX > RGB\n * input: 'xxxxxx' (ex. 'ed15fa') case-insensitive\n * output: [r, g, b] ([0-255, 0-255, 0-255])\n */\nexport function hex2rgb(param: string): [number, number, number] {\n  return [\n    parseInt(param.substring(0, 2), 16),\n    parseInt(param.substring(2, 4), 16),\n    parseInt(param.substring(4, 6), 16),\n  ];\n}\n\n/**\n * RGB > HEX\n * input: [r, g, b] ([0-255, 0-255, 0-255])\n * output: 'xxxxxx' (ex. 'ff0000')\n */\nexport function rgb2hex(param: [number, number, number]) {\n  const p0 = param[0].toString(16);\n  const p1 = param[1].toString(16);\n  const p2 = param[2].toString(16);\n  return (p0.length == 1 ? '0' + p0 : p0) + (p1.length == 1 ? '0' + p1 : p1) + (p2.length == 1 ? '0' + p2 : p2);\n}\n\n/**\n * Converts an RGB color value to HSV. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and v in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSV representation\n */\nexport function rgb2hsb([r, g, b]: [number, number, number]): [number, number, number] {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  let max = Math.max(r, g, b), min = Math.min(r, g, b);\n  let h!: number, s: number, v: number = max;\n\n  let d = max - min;\n  s = max == 0 ? 0 : d / max;\n\n  if (max == min) {\n    h = 0; // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return [h, s, v];\n}\n\n/**\n * Converts an HSV color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes h, s, and v are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param   Number  h       The hue\n * @param   Number  s       The saturation\n * @param   Number  v       The value\n * @return  Array           The RGB representation\n */\nexport function hsb2rgb([h, s, v]: [number, number, number]): [number, number, number] {\n  let r!: number, g!: number, b!: number;\n\n  let i = Math.floor(h * 6);\n  let f = h * 6 - i;\n  let p = v * (1 - s);\n  let q = v * (1 - f * s);\n  let t = v * (1 - (1 - f) * s);\n\n  switch (i % 6) {\n    case 0:\n      r = v;\n      g = t;\n      b = p;\n      break;\n    case 1:\n      r = q;\n      g = v;\n      b = p;\n      break;\n    case 2:\n      r = p;\n      g = v;\n      b = t;\n      break;\n    case 3:\n      r = p;\n      g = q;\n      b = v;\n      break;\n    case 4:\n      r = t;\n      g = p;\n      b = v;\n      break;\n    case 5:\n      r = v;\n      g = p;\n      b = q;\n      break;\n  }\n\n  return [\n    Math.round(r * 255),\n    Math.round(g * 255),\n    Math.round(b * 255),\n  ];\n}\n\nexport async function getAverageColor(url: string): Promise<[number, number, number]> {\n  // Only visit every 5 pixels\n  const blockSize = 5;\n  const defaultRGB: [number, number, number] = [0, 0, 0];\n  let data;\n  let width;\n  let height;\n  let i = -4;\n  let length;\n  let rgb: [number, number, number] = [0, 0, 0];\n  let count = 0;\n\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext && canvas.getContext('2d');\n  if (!context) {\n    return defaultRGB;\n  }\n\n  const image = await preloadImage(url);\n  height = image.naturalHeight || image.offsetHeight || image.height;\n  width = image.naturalWidth || image.offsetWidth || image.width;\n  canvas.height = height;\n  canvas.width = width;\n\n  context.drawImage(image, 0, 0);\n\n  try {\n    data = context.getImageData(0, 0, width, height);\n  } catch (e) {\n    return defaultRGB;\n  }\n\n  length = data.data.length;\n\n  // eslint-disable-next-line no-cond-assign\n  while ((i += blockSize * 4) < length) {\n    ++count;\n    rgb[0] += data.data[i];\n    rgb[1] += data.data[i + 1];\n    rgb[2] += data.data[i + 2];\n  }\n\n  rgb[0] = Math.floor(rgb[0] / count);\n  rgb[1] = Math.floor(rgb[1] / count);\n  rgb[2] = Math.floor(rgb[2] / count);\n\n  return rgb;\n}\n\n// eslint-disable-next-line max-len\n// Function was adapted from https://github.com/telegramdesktop/tdesktop/blob/35ff621b5b52f7e3553fb0f990ea13ade7101b8e/Telegram/SourceFiles/data/data_wall_paper.cpp#L518\nexport function getPatternColor(rgbColor: [number, number, number]) {\n  let [hue, saturation, value] = rgb2hsb(rgbColor);\n\n  saturation = Math.min(1, saturation + 0.05 + 0.1 * (1 - saturation));\n  value = value > 0.5\n    ? Math.max(0, value * 0.65)\n    : Math.max(0, Math.min(1, 1 - value * 0.65));\n\n  return `hsla(${hue * 360}, ${saturation * 100}%, ${value * 100}%, .4)`;\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport { ApiWallpaper } from '../../../api/types';\nimport { ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(\n    document.thumbnail && document.thumbnail.dataUri,\n    Boolean(previewBlobUrl),\n    true,\n  );\n  const {\n    shouldRenderThumb, shouldRenderFullMedia, transitionClassNames,\n  } = useTransitionForMedia(previewBlobUrl || localBlobUrl, 'slow');\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, downloadProgress,\n  } = useMediaWithDownloadProgress(localMediaHash, !isDownloadAllowed);\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isDownloadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasDownloadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        {shouldRenderThumb && (\n          <canvas\n            ref={thumbRef}\n            className=\"thumbnail\"\n          />\n        )}\n        {shouldRenderFullMedia && (\n          <img\n            src={previewBlobUrl || localBlobUrl}\n            className={`full-media ${transitionClassNames}`}\n            alt=\"\"\n          />\n        )}\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={downloadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import React, {\n  FC, memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadWallpapers' | 'uploadWallpaper' | 'setThemeSettings'\n)>;\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps & DispatchProps> = ({\n  onScreenSelect,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n  loadWallpapers,\n  uploadWallpaper,\n  setThemeSettings,\n}) => {\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      uploadWallpaper(files[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper && currentWallpaper.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  const isUploading = loadedWallpapers && loadedWallpapers[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadWallpapers', 'uploadWallpaper', 'setThemeSettings',\n  ]),\n)(SettingsGeneralBackground));\n","import { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport { captureEvents, RealTouchEvent } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../modules/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setThemeSettings'>;\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps & DispatchProps> = ({\n  theme,\n  backgroundColor,\n  setThemeSettings,\n}) => {\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            // @ts-ignore\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            // @ts-ignore\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            // @ts-ignore\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setThemeSettings']),\n)(SettingsGeneralBackground));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadNotificationSettings' | 'updateContactSignUpNotification' | 'updateNotificationSettings'\n)>;\n\nconst SettingsNotifications: FC<StateProps & DispatchProps> = ({\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  loadNotificationSettings,\n  updateContactSignUpNotification,\n  updateNotificationSettings,\n}) => {\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'contact', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'contact', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'group', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'group', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'broadcast', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'broadcast', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  return {\n    hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n    hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n    hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n    hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n    hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n    hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n    hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n  };\n},\n(setGlobal, actions): DispatchProps => pick(actions, [\n  'loadNotificationSettings',\n  'updateContactSignUpNotification',\n  'updateNotificationSettings',\n]))(SettingsNotifications));\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { PrivacyVisibility, SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  hasPassword?: boolean;\n  blockedCount: number;\n  sessionsCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  visibilityPrivacyPhoneNumber?: PrivacyVisibility;\n  visibilityPrivacyLastSeen?: PrivacyVisibility;\n  visibilityPrivacyProfilePhoto?: PrivacyVisibility;\n  visibilityPrivacyForwarding?: PrivacyVisibility;\n  visibilityPrivacyGroupChats?: PrivacyVisibility;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadBlockedContacts' | 'loadAuthorizations' | 'loadPrivacySettings' | 'loadContentSettings' | 'updateContentSettings'\n)>;\n\nconst SettingsPrivacy: FC<OwnProps & StateProps & DispatchProps> = ({\n  onScreenSelect,\n  hasPassword,\n  blockedCount,\n  sessionsCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  visibilityPrivacyPhoneNumber,\n  visibilityPrivacyLastSeen,\n  visibilityPrivacyProfilePhoto,\n  visibilityPrivacyForwarding,\n  visibilityPrivacyGroupChats,\n  loadPrivacySettings,\n  loadBlockedContacts,\n  loadAuthorizations,\n  loadContentSettings,\n  updateContentSettings,\n}) => {\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings]);\n\n  const lang = useLang();\n\n  function getVisibilityValue(visibility?: PrivacyVisibility) {\n    switch (visibility) {\n      case 'everybody':\n        return lang('P2PEverybody');\n\n      case 'contacts':\n        return lang('P2PContacts');\n\n      case 'nobody':\n        return lang('P2PNobody');\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('BlockedUsers')}</span>\n            {blockedCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang('Users', blockedCount)}\n              </span>\n            )}\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyActiveSessions)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('SessionsTitle')}</span>\n            {sessionsCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {sessionsCount === 1 ? '1 session' : `${sessionsCount} sessions`}\n              </span>\n            )}\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={updateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: { hasPassword, isSensitiveEnabled, canChangeSensitive },\n        privacy,\n      },\n      blocked,\n      activeSessions,\n    } = global;\n\n    return {\n      hasPassword,\n      blockedCount: blocked.totalCount,\n      sessionsCount: activeSessions.length,\n      isSensitiveEnabled,\n      canChangeSensitive,\n      visibilityPrivacyPhoneNumber: privacy.phoneNumber && privacy.phoneNumber.visibility,\n      visibilityPrivacyLastSeen: privacy.lastSeen && privacy.lastSeen.visibility,\n      visibilityPrivacyProfilePhoto: privacy.profilePhoto && privacy.profilePhoto.visibility,\n      visibilityPrivacyForwarding: privacy.forwards && privacy.forwards.visibility,\n      visibilityPrivacyGroupChats: privacy.chatInvite && privacy.chatInvite.visibility,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadBlockedContacts', 'loadAuthorizations', 'loadPrivacySettings', 'loadContentSettings', 'updateContentSettings',\n  ]),\n)(SettingsPrivacy));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ISettings } from '../../../types';\nimport { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\nimport { pick } from '../../../util/iteratees';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport useFlag from '../../../hooks/useFlag';\n\ntype StateProps = Pick<ISettings, 'languages' | 'language'>;\n\ntype DispatchProps = Pick<GlobalActions, 'loadLanguages' | 'setSettingOption'>;\n\nconst SettingsLanguage: FC<StateProps & DispatchProps> = ({\n  languages,\n  language,\n  loadLanguages,\n  setSettingOption,\n}) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  // TODO Throttle\n  useEffect(() => {\n    loadLanguages();\n  }, [loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    setLanguage(langCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode });\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  return (\n    <div className=\"settings-content settings-item settings-language custom-scroll\">\n      {options ? (\n        <RadioGroup\n          name=\"keyboard-send-settings\"\n          options={options}\n          selected={selectedLanguage}\n          loadingOption={isLoading ? selectedLanguage : undefined}\n          onChange={handleChange}\n        />\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      languages: global.settings.byKey.languages,\n      language: global.settings.byKey.language,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadLanguages', 'setSettingOption',\n  ]),\n)(SettingsLanguage));\n","import { ApiPrivacyKey, SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n  }\n\n  return undefined;\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport { pick } from '../../../util/iteratees';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport { getPrivacyKey } from './helper/privacy';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = Partial<ApiPrivacySettings> & {\n  chatsById?: Record<number, ApiChat>;\n  usersById?: Record<number, ApiUser>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setPrivacyVisibility'>;\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps & DispatchProps> = ({\n  screen,\n  onScreenSelect,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n  setPrivacyVisibility,\n}) => {\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            onClick={() => { onScreenSelect(allowedContactsScreen); }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            onClick={() => { onScreenSelect(deniedContactsScreen); }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {};\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setPrivacyVisibility']),\n)(SettingsPrivacyVisibility));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiSession } from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype StateProps = {\n  activeSessions: ApiSession[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadAuthorizations' | 'terminateAuthorization' | 'terminateAllAuthorizations'\n)>;\n\nconst SettingsPrivacyActiveSessions: FC<StateProps & DispatchProps> = ({\n  activeSessions,\n  loadAuthorizations,\n  terminateAuthorization,\n  terminateAllAuthorizations,\n}) => {\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  useEffect(() => {\n    loadAuthorizations();\n  }, [loadAuthorizations]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const currentSession = useMemo(() => {\n    return activeSessions.find((session) => session.isCurrent);\n  }, [activeSessions]);\n\n  const otherSessions = useMemo(() => {\n    return activeSessions.filter((session) => !session.isCurrent);\n  }, [activeSessions]);\n\n  const lang = useLang();\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive>\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.appName}</span>\n            <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        <ListItem\n          className=\"destructive mb-0\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('TerminateAllSessions')}\n        </ListItem>\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessions: ApiSession[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>Other Sessions</h4>\n\n        {sessions.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(session: ApiSession) {\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.appName}</span>\n          <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n          <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {otherSessions && renderOtherSessions(otherSessions)}\n      {otherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text=\"Are you sure you want to terminate all other sessions?\"\n          confirmLabel=\"Terminate All Other Sessions\"\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nfunction getDeviceEnvironment(session: ApiSession) {\n  return `${session.deviceModel}${session.deviceModel ? ', ' : ''} ${session.platform} ${session.systemVersion}`;\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      activeSessions: global.activeSessions,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadAuthorizations', 'terminateAuthorization', 'terminateAllAuthorizations',\n  ]),\n)(SettingsPrivacyActiveSessions));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { pick } from '../../../util/iteratees';\nimport {\n  getChatTitle, getUserFullName, isChatPrivate,\n} from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\n\ntype StateProps = {\n  chatsByIds: Record<number, ApiChat>;\n  usersByIds: Record<number, ApiUser>;\n  blockedIds: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'unblockContact'>;\n\nconst SettingsPrivacyBlockedUsers: FC<StateProps & DispatchProps> = ({\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  unblockContact,\n}) => {\n  const handleUnblockClick = useCallback((contactId: number) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  const lang = useLang();\n\n  function renderContact(contactId: number, i: number, viewportOffset: number) {\n    const isPrivate = isChatPrivate(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item',\n      isPrivate ? 'private' : 'group',\n    );\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\" dir=\"auto\">\n          <h3 dir=\"auto\">{renderText((isPrivate ? getUserFullName(user) : getChatTitle(lang, chat!)) || '')}</h3>\n          {user && user.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(user.phoneNumber)}</div>\n          )}\n          {user && !user.phoneNumber && user.username && (\n            <div className=\"contact-username\" dir=\"auto\">@{user.username}</div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds && blockedIds.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">\n              List is empty\n            </div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={() => {\n        }}\n        className=\"not-implemented\"\n        ariaLabel=\"Add a blocked user\"\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['unblockContact']),\n)(SettingsPrivacyBlockedUsers));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps & StateProps> = ({ animatedEmoji, onScreenSelect }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <ListItem\n          icon=\"edit\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaEnabled));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../../lib/teact/teact';\n\nimport useLang from '../../../../hooks/useLang';\n\nimport PasswordMonkey from '../../../common/PasswordMonkey';\nimport PasswordForm from '../../../common/PasswordForm';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsTwoFaPassword: FC<OwnProps> = ({\n  error,\n  isLoading,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaPassword);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps & StateProps> = ({ animatedEmoji, onStart }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaStart));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = () => {\n    onSubmit();\n  };\n\n  const handleSkipConfirm = () => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  };\n\n  const lang = useLang();\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps & StateProps> = ({ animatedEmoji, onScreenSelect }) => {\n  const lang = useLang();\n\n  const handleClick = () => {\n    onScreenSelect(SettingsScreens.Privacy);\n  };\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🥳'),\n  };\n})(SettingsTwoFaCongratulations));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const lang = useLang();\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  };\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { pick } from '../../../../util/iteratees';\nimport { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from './SettingsTwoFaPassword';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\ntype DispatchProps = Pick<GlobalActions, (\n  'updatePassword' | 'updateRecoveryEmail' | 'clearPassword' | 'provideTwoFaEmailCode' |\n  'checkPassword' | 'clearTwoFaError'\n)>;\n\nconst SettingsTwoFa: FC<OwnProps & StateProps & DispatchProps> = ({\n  currentScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  onScreenSelect,\n  updatePassword,\n  checkPassword,\n  clearTwoFaError,\n  updateRecoveryEmail,\n  provideTwoFaEmailCode,\n  clearPassword,\n}) => {\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('EnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'updatePassword', 'updateRecoveryEmail', 'clearPassword', 'provideTwoFaEmailCode',\n    'checkPassword', 'clearTwoFaError',\n  ]),\n)(SettingsTwoFa));\n","import React, {\n  FC, useCallback, useRef, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport { isChatPrivate } from '../../modules/helpers';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport GroupChatInfo from './GroupChatInfo';\nimport PickerSelectedItem from './PickerSelectedItem';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Loading from '../ui/Loading';\n\nimport './Picker.scss';\n\ntype OwnProps = {\n  itemIds: number[];\n  selectedIds: number[];\n  filterValue?: string;\n  filterPlaceholder?: string;\n  notFoundText?: string;\n  searchInputId?: string;\n  isLoading?: boolean;\n  onSelectedIdsChange: (ids: number[]) => void;\n  onFilterChange: (value: string) => void;\n  onLoadMore?: () => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\nconst Picker: FC<OwnProps> = ({\n  itemIds,\n  selectedIds,\n  filterValue,\n  filterPlaceholder,\n  notFoundText,\n  searchInputId,\n  isLoading,\n  onSelectedIdsChange,\n  onFilterChange,\n  onLoadMore,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const shouldMinimize = selectedIds.length > MAX_FULL_ITEMS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: number) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n    onFilterChange('');\n  }, [selectedIds, onSelectedIdsChange, onFilterChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(onLoadMore, itemIds, Boolean(filterValue));\n\n  const lang = useLang();\n\n  return (\n    <div className=\"Picker\">\n      <div className=\"picker-header custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        <InputText\n          id={searchInputId}\n          ref={inputRef}\n          value={filterValue}\n          onChange={handleFilterChange}\n          placeholder={filterPlaceholder || lang('SelectChat')}\n        />\n      </div>\n\n      {viewportIds && viewportIds.length ? (\n        <InfiniteScroll\n          className=\"picker-list custom-scroll\"\n          items={viewportIds}\n          onLoadMore={getMore}\n        >\n          {viewportIds.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={() => handleItemClick(id)}\n              ripple\n            >\n              <Checkbox label=\"\" checked={selectedIds.includes(id)} />\n              {isChatPrivate(id) ? (\n                <PrivateChatInfo userId={id} />\n              ) : (\n                <GroupChatInfo chatId={id} />\n              )}\n            </ListItem>\n          ))}\n        </InfiniteScroll>\n      ) : !isLoading && viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\">{notFoundText || 'Sorry, nothing found.'}</p>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(Picker);\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport { pick } from '../../../util/iteratees';\nimport searchWords from '../../../util/searchWords';\nimport { getPrivacyKey } from './helper/privacy';\nimport {\n  getChatTitle, isChatGroup, isChatPrivate, prepareChatList,\n} from '../../../modules/helpers';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  chatsById: Record<number, ApiChat>;\n  listIds?: number[];\n  orderedPinnedIds?: number[];\n  archivedListIds?: number[];\n  archivedPinnedIds?: number[];\n  settings?: ApiPrivacySettings;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setPrivacySettings'>;\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps & DispatchProps> = ({\n  currentUserId,\n  isAllowList,\n  screen,\n  settings,\n  chatsById,\n  listIds,\n  orderedPinnedIds,\n  archivedListIds,\n  archivedPinnedIds,\n  setPrivacySettings,\n  onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<number[]>(selectedContactIds);\n\n  const chats = useMemo(() => {\n    const activeChatArrays = listIds\n      ? prepareChatList(chatsById, listIds, orderedPinnedIds, 'all')\n      : undefined;\n    const archivedChatArrays = archivedListIds\n      ? prepareChatList(chatsById, archivedListIds, archivedPinnedIds, 'archived')\n      : undefined;\n\n    if (!activeChatArrays && !archivedChatArrays) {\n      return undefined;\n    }\n\n    return [\n      ...(activeChatArrays\n        ? [\n          ...activeChatArrays.pinnedChats,\n          ...activeChatArrays.otherChats,\n        ]\n        : []\n      ),\n      ...(archivedChatArrays ? archivedChatArrays.otherChats : []),\n    ];\n  }, [chatsById, listIds, orderedPinnedIds, archivedListIds, archivedPinnedIds]);\n\n  const displayedIds = useMemo(() => {\n    if (!chats) {\n      return undefined;\n    }\n\n    return chats\n      .filter((chat) => (\n        ((isChatPrivate(chat.id) && chat.id !== currentUserId) || isChatGroup(chat))\n        && (\n          !searchQuery\n        || searchWords(getChatTitle(lang, chat), searchQuery)\n        || selectedContactIds.includes(chat.id)\n        )\n      ))\n      .map(({ id }) => id);\n  }, [chats, currentUserId, lang, searchQuery, selectedContactIds]);\n\n  const handleSelectedContactIdsChange = useCallback((value: number[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen),\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysShareWithPlaceholder') : lang('NeverShareWithPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysShareWithTitle') : lang('NeverShareWithTitle')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      currentUserId,\n      chatsById,\n      listIds: listIds.active,\n      orderedPinnedIds: orderedPinnedIds.active,\n      archivedPinnedIds: orderedPinnedIds.archived,\n      archivedListIds: listIds.archived,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setPrivacySettings']),\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\nimport useFoldersReducer from '../../../hooks/reducers/useFoldersReducer';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsPrivacyActiveSessions from './SettingsPrivacyActiveSessions';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  currentScreen,\n  onScreenSelect,\n  onReset,\n}) => {\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent() {\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.PrivacyActiveSessions:\n        return (\n          <SettingsPrivacyActiveSessions />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility screen={currentScreen} onScreenSelect={onScreenSelect} />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersExcludedChats:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            onScreenSelect={onScreenSelect}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection() {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent()}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import React, {\n  FC, useEffect, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { pick } from '../../../util/iteratees';\nimport { getUserFullName, sortUserIds } from '../../../modules/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  filter: string;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  contactIds?: number[];\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'openChat'>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ContactList: FC<OwnProps & StateProps & DispatchProps> = ({\n  filter, usersById, contactIds, loadContactList, openChat, serverTimeOffset,\n}) => {\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  const handleClick = useCallback(\n    (id: number) => {\n      openChat({ id });\n    },\n    [openChat],\n  );\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const resultIds = filter ? contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, filter);\n    }) : contactIds;\n\n    return sortUserIds(resultIds, usersById, undefined, serverTimeOffset);\n  }, [contactIds, filter, usersById, serverTimeOffset]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds && viewportIds.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            onClick={() => handleClick(id)}\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n\n    return {\n      usersById,\n      contactIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'openChat']),\n)(ContactList));\n","import React, {\n  FC, useCallback, useEffect, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport { pick, unique } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { getUserFullName, sortChatIds } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  selectedMemberIds: number[];\n  onSelectedMemberIdsChange: (ids: number[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  usersById: Record<number, ApiUser>;\n  chatsById: Record<number, ApiChat>;\n  localContactIds?: number[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: number[];\n  globalUserIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'setGlobalSearchQuery'>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst NewChatStep1: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  currentUserId,\n  usersById,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  loadContactList,\n  setGlobalSearchQuery,\n}) => {\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = localContactIds\n      ? sortChatIds(localContactIds.filter((id) => id !== currentUserId), chatsById)\n      : [];\n\n    if (!searchQuery) {\n      return contactIds;\n    }\n\n    const foundContactIds = contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, searchQuery);\n    });\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds,\n    currentUserId, usersById,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n    const { currentUserId } = global;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = global.globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      currentUserId,\n      usersById,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus && fetchingStatus.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'setGlobalSearchQuery']),\n)(NewChatStep1));\n","import React, {\n  FC, useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ChatCreationProgress } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  memberIds: number[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'createGroupChat' | 'createChannel'>;\n\n// TODO @implement\nconst MAX_USERS_FOR_LEGACY_CHAT = 199; // Accounting for current user\n\nconst NewChatStep2: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  memberIds,\n  onReset,\n  creationProgress,\n  creationError,\n  createGroupChat,\n  createChannel,\n}) => {\n  const lang = useLang();\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (memberIds.length > MAX_USERS_FOR_LEGACY_CHAT) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, createGroupChat, photo, chatTitleEmptyError, chatTooManyUsersError]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = creationError || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = global.chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'createGroupChat', 'createChannel',\n  ]),\n)(NewChatStep2));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<number[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {() => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({ isActive, onReset }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('ArchivedChats')}</h3>\n      </div>\n      <ChatList folderType=\"archived\" noChatsText=\"Archive is empty.\" isActive={isActive} />\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","const IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nconst preventDefault = (e: Event) => {\n  e.preventDefault();\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key]) {\n    preventDefault(e);\n  }\n}\n\nexport function disableScrolling() {\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  window.ontouchmove = preventDefault; // mobile\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  // eslint-disable-next-line no-null/no-null\n  window.ontouchmove = null;\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import { ApiMediaFormat, ApiMessage } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport { getMessageMediaHash, getMessagePhoto, getMessageText } from '../../../../modules/helpers';\nimport { CLIPBOARD_ITEM_SUPPORTED, copyImageToClipboard, copyTextToClipboard } from '../../../../util/clipboard';\n\ntype ICopyOptions = {\n  label: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage, afterEffect?: () => void, onCopyLink?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message);\n  const mediaHash = getMessageMediaHash(message, 'inline')!;\n  const canImageBeCopied = photo && mediaHash && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      handler: () => {\n        mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl).then(copyImageToClipboard);\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection\n      && selection.anchorNode\n      && selection.anchorNode.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection, canImageBeCopied),\n      handler: () => {\n        const clipboardText = hasSelection && selection ? selection.toString() : text;\n        copyTextToClipboard(clipboardText);\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      handler: () => {\n        onCopyLink();\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean, canImageBeCopied: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n\n  if (canImageBeCopied) {\n    return 'lng_context_copy_text';\n  }\n\n  return 'Copy';\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  onReply: () => void;\n  onEdit: () => void;\n  onPin: () => void;\n  onUnpin: () => void;\n  onForward: () => void;\n  onDelete: () => void;\n  onFaveSticker: () => void;\n  onUnfaveSticker: () => void;\n  onSelect: () => void;\n  onSend: () => void;\n  onReschedule: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  isOpen,\n  message,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canEdit,\n  canPin,\n  canUnpin,\n  canDelete,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  onReply,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n}) => {\n  const copyOptions = getMessageCopyOptions(message, onClose, canCopyLink ? onCopyLink : undefined);\n\n  const getTriggerElement = useCallback(() => {\n    return document.querySelector(`.active > .MessageList div[data-message-id=\"${message.id}\"]`);\n  }, [message.id]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const { positionX, positionY, style } = useContextMenuPosition(\n    anchor,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    SCROLLBAR_WIDTH,\n    (document.querySelector('.MiddleHeader') as HTMLElement).offsetHeight,\n  );\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      className=\"MessageContextMenu fluid\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n      {canReschedule && (\n        <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n      )}\n      {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n      {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n      {canFaveSticker && (\n        <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n      )}\n      {canUnfaveSticker && (\n        <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n      )}\n      {canCopy && copyOptions.map((options) => (\n        <MenuItem key={options.label} icon=\"copy\" onClick={options.handler}>{lang(options.label)}</MenuItem>\n      ))}\n      {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n      {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n      {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n      {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n      {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n    </Menu>\n  );\n};\n\nexport default MessageContextMenu;\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum, IAnchorPosition } from '../../../types';\nimport { selectAllowedMessageActions, selectCurrentMessageList } from '../../../modules/selectors';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { pick } from '../../../util/iteratees';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport CalendarModal from '../../common/CalendarModal';\nimport { getDayStartAt } from '../../../util/dateFormat';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setReplyingToId' | 'setEditingId' | 'pinMessage' | 'openForwardMenu' |\n  'faveSticker' | 'unfaveSticker' | 'toggleMessageSelection' | 'sendScheduledMessages' | 'rescheduleMessage' |\n  'loadMessageLink'\n)>;\n\nconst ContextMenuContainer: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  messageListType,\n  message,\n  album,\n  anchor,\n  onClose,\n  onCloseAnimationEnd,\n  noOptions,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canPin,\n  canUnpin,\n  canDelete,\n  canEdit,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  setReplyingToId,\n  setEditingId,\n  pinMessage,\n  openForwardMenu,\n  faveSticker,\n  unfaveSticker,\n  toggleMessageSelection,\n  sendScheduledMessages,\n  rescheduleMessage,\n  loadMessageLink,\n}) => {\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    onClose();\n  }, [closeCalendar, onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album && album.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    openCalendar();\n  }, [openCalendar]);\n\n  const handleRescheduleMessage = useCallback((date: Date) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt: Math.round(date.getTime() / 1000),\n    });\n  }, [message.chatId, message.id, rescheduleMessage]);\n\n  const handleCopyLink = useCallback(() => {\n    loadMessageLink({\n      messageId: message.id,\n      chatId: message.chatId,\n    });\n    closeMenu();\n  }, [closeMenu, loadMessageLink, message.chatId, message.id]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={['ContextMenuContainer', transitionClassNames].join(' ')}>\n      <MessageContextMenu\n        message={message}\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canPin={canPin}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={message.date * 1000}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        onClose={handleCloseCalendar}\n        onSubmit={handleRescheduleMessage}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n\n    return {\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canEdit: !isPinned && canEdit,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy,\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setReplyingToId',\n    'setEditingId',\n    'pinMessage',\n    'openForwardMenu',\n    'faveSticker',\n    'unfaveSticker',\n    'toggleMessageSelection',\n    'sendScheduledMessages',\n    'rescheduleMessage',\n    'loadMessageLink',\n  ]),\n)(ContextMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiSticker, ApiStickerSet } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport { STICKER_SIZE_MODAL } from '../../config';\nimport { pick } from '../../util/iteratees';\nimport { selectStickerSet } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker: ApiSticker;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  stickerSet?: ApiStickerSet;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadStickers' | 'toggleStickerSet' | 'sendMessage'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSet,\n  onClose,\n  loadStickers,\n  toggleStickerSet,\n  sendMessage,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen) {\n      const { stickerSetId, stickerSetAccessHash } = fromSticker;\n      loadStickers({ stickerSetId, stickerSetAccessHash });\n    }\n  }, [isOpen, fromSticker, loadStickers]);\n\n  const handleSelect = useCallback((sticker: ApiSticker) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    sendMessage({ sticker });\n    onClose();\n  }, [onClose, sendMessage]);\n\n  const handleButtonClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId: fromSticker.stickerSetId });\n    onClose();\n  }, [fromSticker.stickerSetId, onClose, toggleStickerSet]);\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={stickerSet ? stickerSet.title : lang('AccDescrStickerSet')}\n    >\n      {stickerSet && stickerSet.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            {stickerSet.stickers.map((sticker) => (\n              <StickerButton\n                sticker={sticker}\n                size={STICKER_SIZE_MODAL}\n                observeIntersection={observeIntersection}\n                onClick={handleSelect}\n                clickArg={sticker}\n              />\n            ))}\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={stickerSet.installedDate ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {lang(\n                stickerSet.installedDate ? 'StickerPack.RemoveStickerCount' : 'StickerPack.AddStickerCount',\n                stickerSet.count,\n                'i',\n              )}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal(\n  (global, { fromSticker }: OwnProps) => {\n    return { stickerSet: selectStickerSet(global, fromSticker.stickerSetId) };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadStickers',\n    'toggleStickerSet',\n    'sendMessage',\n  ]),\n)(StickerSetModal));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport { selectChat, selectNotifySettings, selectNotifyExceptions } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { isChatPrivate, getCanDeleteChat, selectIsChatMuted } from '../../modules/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport DeleteChatModal from '../common/DeleteChatModal';\n\nimport './HeaderMenuContainer.scss';\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatMutedState' | 'enterMessageSelectMode'>;\n\nexport type OwnProps = {\n  chatId: number;\n  threadId: number;\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canMute?: boolean;\n  canSelect?: boolean;\n  canLeave?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  canDeleteChat?: boolean;\n};\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  isOpen,\n  anchor,\n  isChannel,\n  canSubscribe,\n  canSearch,\n  canMute,\n  canSelect,\n  canLeave,\n  chat,\n  isPrivate,\n  isMuted,\n  canDeleteChat,\n  onSubscribeChannel,\n  onSearchClick,\n  onClose,\n  onCloseAnimationEnd,\n  updateChatMutedState,\n  enterMessageSelectMode,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {IS_SINGLE_COLUMN_LAYOUT && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'Subscribe' : 'Join Group')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {canSelect && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {lang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={handleDelete}\n            >\n              {lang(isPrivate\n                ? 'Delete'\n                : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n            </MenuItem>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate: isChatPrivate(chat.id),\n      canDeleteChat: getCanDeleteChat(chat),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'updateChatMutedState',\n    'enterMessageSelectMode',\n  ]),\n)(HeaderMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChat } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport { debounce } from '../../util/schedulers';\nimport { selectCurrentTextSearch, selectCurrentChat } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalTextSearchQuery' | 'searchTextMessagesLocal' | 'closeLocalTextSearch' | 'openHistoryCalendar' |\n  'focusMessage'\n)>;\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps & DispatchProps> = ({\n  isActive,\n  chat,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n  setLocalTextSearchQuery,\n  searchTextMessagesLocal,\n  focusMessage,\n  closeLocalTextSearch,\n  openHistoryCalendar,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat && foundIds && foundIds.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1] });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat, focusMessage, foundIds]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1 - newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1 - newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={closeLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds && foundIds.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalTextSearchQuery',\n    'searchTextMessagesLocal',\n    'focusMessage',\n    'closeLocalTextSearch',\n    'openHistoryCalendar',\n  ]),\n)(MobileSearchFooter));\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement>,\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import React, {\n  FC, useCallback, useEffect, useState, useRef, memo,\n} from '../../../lib/teact/teact';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport { ApiChatMember, ApiUser } from '../../../api/types';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport captureKeyboardListeners from '../../../util/captureKeyboardListeners';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport cycleRestrict from '../../../util/cycleRestrict';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.chat-item-clickable',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  filter: string;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredChatMembers?: ApiChatMember[];\n  usersById?: Record<number, ApiUser>;\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  filter,\n  onClose,\n  onInsertUserName,\n  usersById,\n  filteredChatMembers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!filteredChatMembers) {\n      return -1;\n    }\n    const membersCount = filteredChatMembers!.length;\n    return cycleRestrict(membersCount, newIndex);\n  }, [filteredChatMembers]);\n\n  const [selectedMentionIndex, setSelectedMentionIndex] = useState(-1);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedMentionIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedMentionIndex, getSelectedIndex]);\n\n  const handleUserSelect = useCallback((userId: number, forceFocus = false) => {\n    const user = usersById && usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [usersById, onInsertUserName]);\n\n  const handleSelectMention = useCallback((e: KeyboardEvent) => {\n    if (filteredChatMembers && filteredChatMembers.length && selectedMentionIndex > -1) {\n      const member = filteredChatMembers[selectedMentionIndex];\n      if (member) {\n        e.preventDefault();\n        handleUserSelect(member.userId, true);\n      }\n    }\n  }, [filteredChatMembers, selectedMentionIndex, handleUserSelect]);\n\n  useEffect(() => (isOpen ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: (e: KeyboardEvent) => handleArrowKey(1, e),\n    onEnter: handleSelectMention,\n    onTab: handleSelectMention,\n  }) : undefined), [isOpen, onClose, handleArrowKey, handleSelectMention]);\n\n  useEffect(() => {\n    if (filteredChatMembers && !filteredChatMembers.length) {\n      onClose();\n    }\n  }, [filteredChatMembers, onClose]);\n\n  useEffect(() => {\n    setSelectedMentionIndex(0);\n  }, [filter]);\n\n  useEffect(() => {\n    setItemVisible(selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  const prevChatMembers = usePrevious(\n    filteredChatMembers && filteredChatMembers.length\n      ? filteredChatMembers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredChatMembers && !filteredChatMembers.length\n    ? prevChatMembers\n    : filteredChatMembers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers && renderedChatMembers.map(({ userId }, index) => (\n        <ListItem\n          key={userId}\n          className=\"chat-item-clickable scroll-item\"\n          onClick={() => handleUserSelect(userId)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={userId}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAttachment, ApiChatMember, ApiUser } from '../../../api/types';\nimport { LangCode } from '../../../types';\n\nimport { CONTENT_TYPES_FOR_QUICK_UPLOAD, EDITABLE_INPUT_MODAL_ID } from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport File from '../../common/File';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\n\nimport './AttachmentModal.scss';\n\nexport type OwnProps = {\n  attachments: ApiAttachment[];\n  caption: string;\n  canSuggestMembers?: boolean;\n  canSuggestEmoji?: boolean;\n  currentUserId?: number;\n  groupChatMembers?: ApiChatMember[];\n  usersById?: Record<number, ApiUser>;\n  recentEmojis: string[];\n  language: LangCode;\n  emojiKeywords?: Record<string, string[]>;\n  addRecentEmoji: AnyToVoidFunction;\n  loadEmojiKeywords: AnyToVoidFunction;\n  onCaptionUpdate: (html: string) => void;\n  onSend: () => void;\n  onFileAppend: (files: File[], isQuick: boolean) => void;\n  onClear: () => void;\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\n\nconst AttachmentModal: FC<OwnProps> = ({\n  attachments,\n  caption,\n  canSuggestMembers,\n  groupChatMembers,\n  currentUserId,\n  usersById,\n  recentEmojis,\n  language,\n  emojiKeywords,\n  onCaptionUpdate,\n  addRecentEmoji,\n  loadEmojiKeywords,\n  onSend,\n  onFileAppend,\n  onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const hideTimeoutRef = useRef<number>(null);\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const isOpen = Boolean(attachments.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n  const isQuick = renderingAttachments && renderingAttachments.every((a) => a.quick);\n  const lang = useLang();\n\n  const {\n    isMentionTooltipOpen, mentionFilter,\n    closeMentionTooltip, insertMention,\n    mentionFilteredMembers,\n  } = useMentionTooltip(\n    canSuggestMembers && isOpen,\n    caption,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    groupChatMembers,\n    currentUserId,\n    usersById,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    isOpen,\n    caption,\n    recentEmojis,\n    EDITABLE_INPUT_MODAL_ID,\n    onCaptionUpdate,\n    emojiKeywords,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  const sendAttachments = useCallback(() => {\n    if (isOpen) {\n      onSend();\n    }\n  }, [isOpen, onSend]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches('.drop-target') && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest('.AttachmentModal.hovered')) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer: { files } } = e;\n\n    if (files && files.length) {\n      const newFiles = isQuick\n        ? Array.from(files).filter((file) => {\n          return file.type && CONTENT_TYPES_FOR_QUICK_UPLOAD.includes(file.type);\n        })\n        : Array.from(files);\n\n      onFileAppend(newFiles, false);\n    }\n  }, [isQuick, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n    }\n  }\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const areAllPhotos = renderingAttachments.every((a) => a.mimeType.startsWith('image/'));\n  const areAllVideos = renderingAttachments.every((a) => a.mimeType.startsWith('video/'));\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={sendAttachments}\n        >\n          {lang('Send')}\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={`AttachmentModal ${isHovered ? 'hovered' : ''}`}\n    >\n      <div\n        className=\"drop-target\"\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n      >\n        {isQuick ? (\n          <div className=\"media-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              attachment.mimeType.startsWith('image/')\n                ? <img src={attachment.blobUrl} alt=\"\" />\n                : <video src={attachment.blobUrl} autoPlay muted loop />\n            ))}\n          </div>\n        ) : (\n          <div className=\"document-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              <File\n                name={attachment.filename}\n                extension={getFileExtension(attachment.filename, attachment.mimeType)}\n                previewData={attachment.previewBlobUrl}\n                size={attachment.size}\n                smaller\n              />\n            ))}\n          </div>\n        )}\n\n        <div className=\"attachment-caption-wrapper\">\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            onClose={closeMentionTooltip}\n            filter={mentionFilter}\n            onInsertUserName={insertMention}\n            filteredChatMembers={mentionFilteredMembers}\n            usersById={usersById}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            language={language}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n            loadEmojiKeywords={loadEmojiKeywords}\n          />\n          <MessageInput\n            id=\"caption-input-text\"\n            html={caption}\n            editableInputId={EDITABLE_INPUT_MODAL_ID}\n            placeholder={lang('Caption')}\n            onUpdate={onCaptionUpdate}\n            onSend={onSend}\n            shouldSetFocus={isOpen}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AttachmentModal);\n","import { ChangeEvent, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({ isOpen, onSend, onClear }) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(false);\n  const [solution, setSolution] = useState<string>();\n  const [correctOption, setCorrectOption] = useState<string>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(false);\n      setSolution('');\n      setCorrectOption('');\n      setHasErrors(false);\n    }\n  }, [isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(String(index) === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [correctOption],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(newValue);\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)]) && (\n      <p className=\"error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={(e) => setQuestion(e.currentTarget.value)}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        <Checkbox\n          label={lang('PollAnonymous')}\n          checked={isAnonymous}\n          onChange={handleIsAnonymousChange}\n        />\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\n\nconst MENU_CLOSE_TIMEOUT = 250;\nlet closeTimeout: number | undefined;\n\nexport default function useMouseInside(\n  isOpen: boolean, onClose: NoneToVoidFunction, menuCloseTimeout = MENU_CLOSE_TIMEOUT, isDisabled = false,\n) {\n  const isMouseInside = useRef(false);\n\n  useEffect(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    if (isOpen && !IS_TOUCH_ENV && !isDisabled) {\n      closeTimeout = window.setTimeout(() => {\n        if (!isMouseInside.current) {\n          onClose();\n        }\n      }, menuCloseTimeout * 2);\n    }\n  }, [isDisabled, isOpen, menuCloseTimeout, onClose]);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n  }, []);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        onClose();\n      }\n    }, menuCloseTimeout);\n  }, [menuCloseTimeout, onClose]);\n\n  return [handleMouseEnter, handleMouseLeave];\n}\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({ emoji, focus, onClick }) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  return (\n    <div\n      className={`EmojiButton ${focus ? 'focus' : ''}`}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : <img src={`./img-apple-64/${emoji.image}.png`} alt=\"\" loading=\"lazy\" />}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 9;\nconst EMOJI_MARGIN = 4;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const { transitionClassNames } = useShowTransition(shouldRender, undefined, undefined, 'slow');\n\n  const lang = useLang();\n\n  const emojisPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\" dir=\"auto\">\n        {lang(category.id === 'recent' ? 'RecentStickers' : `Emoji${index}`)}\n      </p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        // @ts-ignore\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { MENU_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n  uncompressEmoji,\n} from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className, onEmojiSelect, recentEmojis,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  useHorizontalScroll(headerRef.current, !IS_SINGLE_COLUMN_LAYOUT);\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis && recentEmojis.length) {\n      themeCategories.unshift({\n        id: 'recent',\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = document.getElementById(`emoji-category-${index}`)!;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!emojis || !canRenderContents) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div ref={containerRef} className=\"EmojiPicker-main no-selection no-scrollbar\">\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json') as unknown as Promise<EmojiModule>;\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport windowSize from '../../../util/windowSize';\nimport StickerButton from '../../common/StickerButton';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n  onStickerUnfave: (sticker: ApiSticker) => void;\n};\n\nconst STICKERS_PER_ROW_ON_DESKTOP = 5;\nconst STICKER_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 16;\nconst MOBILE_CONTAINER_PADDING = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  observeIntersection,\n  shouldRender,\n  onStickerSelect,\n  onStickerUnfave,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const { transitionClassNames } = useShowTransition(shouldRender, undefined, undefined, 'slow');\n\n  const stickersPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (STICKER_SIZE_PICKER + STICKER_MARGIN))\n    : STICKERS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(stickerSet.count / stickersPerRow) * (STICKER_SIZE_PICKER + STICKER_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`sticker-set-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\">{stickerSet.title}</p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        // @ts-ignore\n        style={`height: ${height}px;`}\n      >\n        {shouldRender && stickerSet.stickers && stickerSet.stickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            noAnimate={!loadAndPlay}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n            onUnfaveClick={stickerSet.id === 'favorite' ? onStickerUnfave : undefined}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiStickerSet, ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION, STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport StickerSetCoverAnimated from './StickerSetCoverAnimated';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  shouldPlay?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadStickerSets' | 'loadRecentStickers' | 'loadFavoriteStickers' |\n  'addRecentSticker' | 'loadAddedStickers' | 'unfaveSticker'\n)>;\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  addedSetIds,\n  stickerSetsById,\n  shouldPlay,\n  onStickerSelect,\n  loadStickerSets,\n  loadRecentStickers,\n  loadFavoriteStickers,\n  loadAddedStickers,\n  addRecentSticker,\n  unfaveSticker,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return [\n      {\n        id: 'recent',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      },\n      {\n        id: 'favorite',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      },\n      ...addedSetIds.map((id) => stickerSetsById[id]).filter(Boolean),\n    ];\n  }, [addedSetIds, lang, recentStickers, favoriteStickers, stickerSetsById]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers && set.stickers.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadStickerSets();\n      loadRecentStickers();\n      loadFavoriteStickers();\n    }\n  }, [loadAndPlay, loadFavoriteStickers, loadRecentStickers, loadStickerSets]);\n\n  useEffect(() => {\n    if (addedSetIds && addedSetIds.length) {\n      loadAddedStickers();\n    }\n  }, [addedSetIds, loadAddedStickers]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    onStickerSelect(sticker);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers && stickerSet.stickers[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    if (stickerSet.id === 'recent' || stickerSet.id === 'favorite' || stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === 'recent' || stickerSet.id === 'favorite'}\n          color=\"translucent\"\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === 'recent' ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === 'favorite' ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.isAnimated ? (\n            <StickerSetCoverAnimated\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          observeIntersection={observeIntersectionForCovers}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets || !canSendStickers) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">Sending stickers is not allowed in this chat.</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">You have no saved Stickers.</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        {allSets.map(renderCover)}\n      </div>\n      <div ref={containerRef} className=\"StickerPicker-main no-scrollbar\">\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(shouldPlay && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n    } = global.stickers;\n\n    return {\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      shouldPlay: global.settings.byKey.shouldLoopStickers,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadStickerSets',\n    'loadRecentStickers',\n    'loadFavoriteStickers',\n    'loadAddedStickers',\n    'addRecentSticker',\n    'unfaveSticker',\n  ]),\n)(StickerPicker));\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiVideo } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useTransitionForMedia from '../../hooks/useTransitionForMedia';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\n\nimport Spinner from '../ui/Spinner';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  onClick: (gif: ApiVideo) => void;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif, observeIntersection, isDisabled, onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const hasThumbnail = gif.thumbnail && !!gif.thumbnail.dataUri;\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail && gif.thumbnail.dataUri, Boolean(previewBlobUrl));\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { transitionClassNames } = useTransitionForMedia(hasThumbnail || previewBlobUrl || videoData, 'slow');\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n\n  useVideoCleanup(videoRef, [shouldRenderVideo]);\n\n  const handleClick = useCallback(\n    () => onClick({\n      ...gif,\n      blobUrl: videoData,\n    }),\n    [onClick, gif, videoData],\n  );\n\n  const className = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    transitionClassNames,\n    localMediaHash,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      onClick={handleClick}\n    >\n      {hasThumbnail && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n      )}\n      {!hasThumbnail && previewBlobUrl && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"thumbnail\"\n        />\n      )}\n      {(shouldRenderVideo || previewBlobUrl) && (\n        <video\n          ref={videoRef}\n          autoPlay\n          loop\n          muted\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        >\n          <source src={videoData} />\n        </video>\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || hasThumbnail ? 'white' : 'black'} />\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import React, {\n  FC, useEffect, memo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs: boolean;\n  onGifSelect: (gif: ApiVideo) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadSavedGifs'>;\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  onGifSelect,\n  loadSavedGifs,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div ref={containerRef} className={buildClassName('GifPicker no-scrollbar', className)}>\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={onGifSelect}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      savedGifs: global.gifs.saved.gifs,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadSavedGifs']),\n)(GifPicker));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'Stickers',\n  'GIFs',\n}\n\n// Getting enum string values for display in Tabs.\n// See: https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings\nexport const SYMBOL_MENU_TAB_TITLES = Object.values(SymbolMenuTabs)\n  .filter((value): value is string => typeof value === 'string');\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={SYMBOL_MENU_TAB_TITLES[tab]}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {renderTabButton(SymbolMenuTabs.Emoji)}\n      {renderTabButton(SymbolMenuTabs.Stickers)}\n      {renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {activeTab === SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiSticker, ApiVideo } from '../../../api/types';\n\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onStickerSelect: (sticker: ApiSticker) => void;\n  onGifSelect: (gif: ApiVideo) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: AnyToVoidFunction;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps> = ({\n  isOpen, allowedAttachmentOptions,\n  onLoad, onClose,\n  onEmojiSelect, onStickerSelect, onGifSelect,\n  onRemoveSymbol, onSearchOpen, addRecentEmoji,\n}) => {\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  useLayoutEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, activeTab, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => {\n      return [...emojis, name];\n    });\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const lang = useLang();\n\n  const { canSendStickers, canSendGifs } = allowedAttachmentOptions;\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={onStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={SYMBOL_MENU_TAB_TITLES.length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {IS_SINGLE_COLUMN_LAYOUT && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n      />\n    </>\n  );\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const className = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n    );\n\n    return (\n      <Portal>\n        <div className={className}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SymbolMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(SymbolMenu);\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { CONTENT_TYPES_FOR_QUICK_UPLOAD } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  onFileSelect: (files: File[], isQuick: boolean) => void;\n  onPollCreate: () => void;\n  onClose: () => void;\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  isOpen, allowedAttachmentOptions, onFileSelect, onPollCreate, onClose,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const handleFileSelect = useCallback((e: Event, isQuick: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      onFileSelect(Array.from(files), isQuick);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      CONTENT_TYPES_FOR_QUICK_UPLOAD,\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const lang = useLang();\n\n  const { canAttachMedia, canAttachPolls } = allowedAttachmentOptions;\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"AttachMenu fluid\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n      {!canAttachMedia && (\n        <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n      )}\n      {canAttachMedia && (\n        <>\n          <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n            {lang('AttachmentMenu.PhotoOrVideo')}\n          </MenuItem>\n          <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n        </>\n      )}\n      {canAttachPolls && (\n        <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(AttachMenu);\n","import React, {\n  FC, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'clearStickersForEmoji'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  onStickerSelect,\n  stickers,\n  clearStickersForEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(clearStickersForEmoji) : undefined), [isOpen, clearStickersForEmoji]);\n\n  const handleMouseEnter = () => {\n    document.body.classList.add('no-select');\n  };\n\n  const handleMouseLeave = () => {\n    document.body.classList.remove('no-select');\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers && displayedStickers.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n\n    return { stickers };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['clearStickersForEmoji']),\n)(StickerTooltip));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../modules/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('clickInlineButton')>;\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen, message, onClose, clickInlineButton,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"KeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'NOT_SUPPORTED'}\n                onClick={() => clickInlineButton({ button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'clickInlineButton',\n  ]),\n)(BotKeyboardMenu));\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onSilentSend?: NoneToVoidFunction;\n  onScheduleSend?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen, onSilentSend, onScheduleSend, onClose, onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      className=\"CustomSendMenu\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSilentSend && <MenuItem icon=\"mute\" onClick={onSilentSend}>{lang('SendWithoutSound')}</MenuItem>}\n      {onScheduleSend && <MenuItem icon=\"schedule\" onClick={onScheduleSend}>{lang('ScheduleMessage')}</MenuItem>}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { LangCode } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport captureKeyboardListeners from '../../../util/captureKeyboardListeners';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\nconst NO_EMOJI_SELECTED_INDEX = -1;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  language: LangCode;\n  onEmojiSelect: (text: string) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: AnyToVoidFunction;\n  loadEmojiKeywords: AnyToVoidFunction;\n  emojis: Emoji[];\n};\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  language,\n  emojis,\n  onClose,\n  onEmojiSelect,\n  addRecentEmoji,\n  loadEmojiKeywords,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: Emoji[] = usePrevDuringAnimation(emojis.length ? emojis : undefined, CLOSE_DURATION) || [];\n\n  const [selectedIndex, setSelectedIndex] = useState(NO_EMOJI_SELECTED_INDEX);\n\n  useEffect(() => {\n    loadEmojiKeywords({ language: 'en' });\n    if (language !== 'en') {\n      loadEmojiKeywords({ language });\n    }\n  }, [loadEmojiKeywords, language]);\n\n  useEffect(() => {\n    setSelectedIndex(0);\n  }, [emojis]);\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!emojis.length) {\n      return NO_EMOJI_SELECTED_INDEX;\n    }\n\n    const emojisCount = emojis.length;\n    return cycleRestrict(emojisCount, newIndex);\n  }, [emojis]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedIndex, getSelectedIndex]);\n\n  const handleSelectEmoji = useCallback((e: KeyboardEvent) => {\n    if (emojis.length && selectedIndex > NO_EMOJI_SELECTED_INDEX) {\n      const emoji = emojis[selectedIndex];\n      if (emoji) {\n        e.preventDefault();\n        onEmojiSelect(emoji.native);\n        addRecentEmoji({ emoji: emoji.id });\n      }\n    }\n  }, [addRecentEmoji, emojis, onEmojiSelect, selectedIndex]);\n\n  useEffect(() => (isOpen ? captureKeyboardListeners({\n    onEsc: onClose,\n    onLeft: (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: (e: KeyboardEvent) => handleArrowKey(1, e),\n    onEnter: handleSelectEmoji,\n  }) : undefined), [handleArrowKey, handleSelectEmoji, isOpen, onClose]);\n\n  const handleMouseEnter = () => {\n    document.body.classList.add('no-select');\n  };\n\n  const handleMouseLeave = () => {\n    document.body.classList.remove('no-select');\n  };\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          <EmojiButton\n            key={emoji.id}\n            emoji={emoji}\n            focus={selectedIndex === index}\n            onClick={onEmojiSelect}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import React, {\n  FC, useMemo, memo, useRef,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiUser, ApiChat } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../modules/selectors';\nimport {\n  getMessageSummaryText,\n  getChatTitle,\n  getUserFullName,\n  isChatChannel,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport { orderBy, pick } from '../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: number;\n  threadId: number;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchTextMessagesLocal' | 'focusMessage'>;\n\ninterface Result {\n  message: ApiMessage;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  onClick: NoneToVoidFunction;\n}\n\nconst RightSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  searchTextMessagesLocal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n\n  const foundResults = useMemo(() => {\n    if (!query || !foundIds || !foundIds.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const results = foundIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean) as Result[];\n\n    return orderBy(results, ({ message }) => message.date, 'desc');\n  }, [chatId, threadId, focusMessage, foundIds, chat, messagesById, query]);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: Result) => {\n    const title = senderChat ? getChatTitle(lang, senderChat) : getUserFullName(senderUser);\n    const text = getMessageSummaryText(lang, message);\n\n    return (\n      <ListItem\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} />\n        <div className=\"info\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{title && renderText(title)}</h3>\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {renderText(text, ['emoji', 'highlight'], { highlight: query })}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    if (foundResults && foundResults[index]) {\n      foundResults[index].onClick();\n    }\n  }, '.ListItem-button', true);\n\n  return (\n    <InfiniteScroll\n      className=\"RightSearch custom-scroll\"\n      items={foundResults}\n      preloadBackwards={0}\n      onLoadMore={searchTextMessagesLocal}\n      noFastList\n      onKeyDown={handleKeyDown}\n      ref={containerRef}\n    >\n      <p className=\"helper-text\" dir=\"auto\">\n        {!query ? (\n          lang('lng_dlg_search_for_messages')\n        ) : (totalCount === 0 || !foundResults.length) ? (\n          lang('lng_search_no_results')\n        ) : totalCount === 1 ? (\n          '1 message found'\n        ) : (\n          `${(foundResults.length && (totalCount || foundResults.length))} messages found`\n        )}\n      </p>\n      {foundResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, ['searchTextMessagesLocal', 'focusMessage']),\n)(RightSearch));\n","import React, {\n  FC, useEffect, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiStickerSet } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { pick } from '../../util/iteratees';\nimport { selectShouldLoopStickers, selectStickerSet } from '../../modules/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport useOnChange from '../../hooks/useOnChange';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isSomeModalOpen: boolean;\n  onModalToggle: (isOpen: boolean) => void;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadStickers' | 'toggleStickerSet'>;\n\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps & DispatchProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  loadStickers, toggleStickerSet, isSomeModalOpen, onModalToggle,\n}) => {\n  const lang = useLang();\n  const isAdded = set && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set && set.stickers);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useOnChange(() => {\n    onModalToggle(isModalOpen);\n  }, [isModalOpen, onModalToggle]);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...set.covers || [], ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY) {\n      loadStickers({ stickerSetId });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main\">\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen || isSomeModalOpen}\n            onClick={openModal}\n          />\n        ))}\n      </div>\n      {canRenderStickers && (\n        <StickerSetModal\n          isOpen={isModalOpen}\n          fromSticker={displayedStickers[0]}\n          onClose={closeModal}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadStickers', 'toggleStickerSet']),\n)(StickerSetResult));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadFeaturedStickers'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<StateProps & DispatchProps> = ({\n  query,\n  featuredIds,\n  resultIds,\n  loadFeaturedStickers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadFeaturedStickers']),\n)(StickerSearch));\n","import React, {\n  FC, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n} from '../../modules/selectors';\nimport { getAllowedAttachmentOptions } from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchMoreGifs' | 'sendMessage' | 'setGifSearchQuery'>;\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<StateProps & DispatchProps> = ({\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  searchMoreGifs,\n  sendMessage,\n  setGifSearchQuery,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const { canSendGifs } = getAllowedAttachmentOptions(chat, isChatWithBot);\n\n  const handleGifClick = useCallback((gif: ApiVideo) => {\n    if (canSendGifs) {\n      sendMessage({ gif });\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, sendMessage, setGifSearchQuery]);\n\n  const lang = useLang();\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={handleGifClick}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={searchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['searchMoreGifs', 'sendMessage', 'setGifSearchQuery']),\n)(GifSearch));\n","import React, {\n  FC, useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport { pick } from '../../util/iteratees';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: number[];\n  offset: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadPollOptionResults' | 'openChat' | 'closePollResults'>;\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n  loadPollOptionResults,\n  openChat,\n  closePollResults,\n}) => {\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = global.pollResults;\n\n    return {\n      voters: voters && voters[answer.option],\n      offset: (offsets && offsets[answer.option]) || '',\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, ['loadPollOptionResults', 'openChat', 'closePollResults']),\n)(PollAnswerResults));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage } from '../../modules/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<StateProps> = ({\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{summary.question}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {lastSyncTime && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n      lastSyncTime,\n    } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  selectChat, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../../modules/selectors';\nimport { selectIsChatMuted } from '../../../modules/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: number;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'updateContact' | 'deleteUser' | 'deleteHistory' | 'closeManagement' | 'openChat'\n)>;\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps & DispatchProps> = ({\n  userId,\n  user,\n  chat,\n  progress,\n  isMuted,\n  updateContact,\n  deleteUser,\n  deleteHistory,\n  closeManagement,\n  openChat,\n}) => {\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteHistory({\n      chatId: chat.id,\n      shouldDeleteForAll: false,\n    });\n    deleteUser({ userId });\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.id, closeDeleteDialog, closeManagement, deleteHistory, deleteUser, openChat, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId)!;\n    const { progress } = global.management;\n    const isMuted = selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    return {\n      user, chat, progress, isMuted,\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, [\n    'updateContact', 'deleteUser', 'closeManagement', 'openChat', 'deleteHistory',\n  ]),\n)(ManageUser));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport { ApiChat, ApiChatBannedRights, ApiMediaFormat } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatBasicGroup } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat } from '../../../modules/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'togglePreHistoryHidden' | 'updateChat' | 'closeManagement' |\n  'leaveChannel' | 'deleteChannel' | 'deleteChat' | 'openChat'\n)>;\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\n\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = 8;\n\nconst ManageGroup: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  onScreenSelect,\n  togglePreHistoryHidden,\n  updateChat,\n  deleteChat,\n  leaveChannel,\n  deleteChannel,\n  closeManagement,\n  openChat,\n}) => {\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = [\n      'sendMessages',\n      'sendMedia',\n      'embedLinks',\n      'sendPolls',\n      'changeInfo',\n      'inviteUsers',\n      'pinMessages',\n    ].filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = (chat.fullInfo && chat.fullInfo.adminMembers && chat.fullInfo.adminMembers.length) || 0;\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline ripple onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem icon=\"message\" multiline ripple onClick={handleClickDiscussion}>\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            ripple\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT}\n            </span>\n          </ListItem>\n          <ListItem icon=\"admin\" multiline ripple onClick={handleClickAdministrators}>\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline ripple onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount!)}</span>\n          </ListItem>\n\n          {chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\">\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const hasLinkedChannel = Boolean(chat.fullInfo && chat.fullInfo.linkedChatId);\n\n    return {\n      chat,\n      progress,\n      isBasicGroup: isChatBasicGroup(chat),\n      hasLinkedChannel,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: getHasAdminRight(chat, 'banUsers'),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'togglePreHistoryHidden', 'updateChat', 'closeManagement',\n    'leaveChannel', 'deleteChannel', 'deleteChat', 'openChat',\n  ]),\n)(ManageGroup));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatDefaultBannedRights'>;\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\n\nfunction getLangKeyForBannedRightKey(key: string) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps & DispatchProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  updateChatDefaultBannedRights,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  useEffect(() => {\n    setPermissions((chat && chat.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [chat]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatBannedRights]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => !!bannedRights);\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, key) => {\n      if (\n        !bannedRights[key as keyof ApiChatBannedRights]\n        || (defaultBannedRights && defaultBannedRights[key as keyof ApiChatBannedRights])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        <div className=\"section\">\n          <ListItem icon=\"delete-user\" multiline ripple narrow onClick={handleRemovedUsersClick}>\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            ripple\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              ripple\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat, currentUserId: global.currentUserId };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatDefaultBannedRights']),\n)(ManageGroupPermissions));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { getUserFullName } from '../../../modules/helpers';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: number;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<number, ApiUser>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatMemberBannedRights'>;\n\nconst ManageGroupRemovedUsers: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  usersById,\n  updateChatMemberBannedRights,\n}) => {\n  const lang = useLang();\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang('NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n\n    return { chat, usersById };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatMemberBannedRights']),\n)(ManageGroupRemovedUsers));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport { ApiChat, ApiMediaFormat } from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { getChatAvatarHash, getHasAdminRight } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'toggleSignatures' | 'updateChat' | 'closeManagement' | 'leaveChannel' | 'deleteChannel' | 'openChat'\n)>;\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\n\nconst ManageChannel: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  onScreenSelect,\n  updateChat,\n  toggleSignatures,\n  closeManagement,\n  leaveChannel,\n  deleteChannel,\n  openChat,\n}) => {\n  const currentTitle = chat ? (chat.title || '') : '';\n  const currentAbout = chat && chat.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat && chat.fullInfo && chat.fullInfo.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = (chat && chat.fullInfo && chat.fullInfo.adminMembers && chat.fullInfo.adminMembers.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" ripple multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem icon=\"message\" multiline ripple onClick={handleClickDiscussion} disabled={!canChangeInfo}>\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          <ListItem icon=\"admin\" multiline ripple onClick={handleClickAdministrators}>\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline ripple onClick={handleClickSubscribers}>\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount!, 'i')}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const isSignaturesShown = Boolean(chat && chat.isSignaturesShown);\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'toggleSignatures', 'updateChat', 'closeManagement', 'leaveChannel', 'deleteChannel', 'openChat',\n  ]),\n)(ManageChannel));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { selectChat, selectManagement } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport { isChatChannel } from '../../../modules/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: number;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'checkPublicLink' | 'updatePublicLink' | 'updatePrivateLink'\n)>;\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkPublicLink,\n  updatePublicLink,\n  updatePrivateLink,\n}) => {\n  const isPublic = Boolean(chat.username);\n  const privateLink = chat.fullInfo && chat.fullInfo.inviteLink;\n\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [username, setUsername] = useState();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n\n  const canUpdate = (\n    (privacyType === 'public' && username && isUsernameAvailable)\n    || (privacyType === 'private' && isPublic)\n  );\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleOptionChange = useCallback((value: string) => {\n    setPrivacyType(value as PrivacyType);\n  }, []);\n\n  const handleSave = useCallback(() => {\n    updatePublicLink({ username: privacyType === 'public' ? username : '' });\n  }, [privacyType, updatePublicLink, username]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={chat.username}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkUsername={checkPublicLink}\n              onChange={setUsername}\n            />\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: global.management.progress,\n      isUsernameAvailable,\n    };\n  },\n  (setGlobal, actions) => pick(actions, [\n    'checkPublicLink', 'updatePublicLink', 'updatePrivateLink',\n  ]),\n)(ManageChatPrivacyType));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { selectChat } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport getAnimationData from '../../common/helpers/animatedAssets';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../modules/helpers';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<number, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: number[];\n  isChannel?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadGroupsForDiscussion' | 'linkDiscussionGroup' | 'unlinkDiscussionGroup'>;\n\nconst ManageDiscussion: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n  loadGroupsForDiscussion,\n  linkDiscussionGroup,\n  unlinkDiscussionGroup,\n}) => {\n  const [linkedGroupId, setLinkedGroupId] = useState<number>();\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const lang = useLang();\n  const linkedChatId = linkedChat && linkedChat.id;\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('DiscussionGroups').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const onDiscussionClick = (groupId: number) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n      // return renderText(\n      //   lang('DiscussionLinkGroupPublicAlert', linkedChat.title, chat!.title),\n      //   ['br', 'simple_markdown'],\n      // );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n    // return renderText(\n    //   lang('DiscussionLinkGroupPrivateAlert', linkedChat.title, chat!.title),\n    //   ['br', 'simple_markdown'],\n    // );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => { onDiscussionClick(id); }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n          isButtonsInOneRow\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"section-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"discussionGroupsDucks\"\n                size={STICKER_SIZE_DISCUSSION_GROUPS}\n                animationData={animationData}\n                play={isAnimationLoaded}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat && chat.fullInfo && chat.fullInfo.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadGroupsForDiscussion', 'linkDiscussionGroup', 'unlinkDiscussionGroup',\n  ]),\n)(ManageDiscussion));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: number;\n  selectedChatMemberId?: number;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatMemberBannedRights'>;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  updateChatMemberBannedRights,\n  isFormFullyDisabled,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat && chat.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember && selectedChatMember.bannedRights) || (chat && chat.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setIsLoading(false);\n  }, [chat, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatBannedRights]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, permissions, updateChatMemberBannedRights]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatBannedRights) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              disabled={getControlIsDisabled('sendStickers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              disabled={getControlIsDisabled('sendPolls')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              disabled={getControlIsDisabled('embedLinks')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              disabled={getControlIsDisabled('pinMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div className=\"section\">\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatMemberBannedRights']),\n)(ManageGroupUserPermissions));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\nimport { getUserFullName, isChatChannel } from '../../../modules/helpers';\n\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: number;\n  isChannel: boolean;\n  usersById: Record<number, ApiUser>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  usersById,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const lang = useLang();\n\n  function handleRecentActionsClick() {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang, usersById]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem icon=\"recent\" multiline ripple onClick={handleRecentActionsClick}>\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n      usersById,\n    };\n  },\n  // (setGlobal, actions): DispatchProps => pick(actions, ['togglePreHistoryHidden', 'updateChat']),\n)(ManageChatAdministrators));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: number;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat }) => {\n  const lang = useLang();\n\n  const adminMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { selectChat } from '../../../modules/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: number;\n  selectedChatMemberId?: number;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<number, ApiUser>;\n  currentUserId?: number;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatAdmin'>;\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps & DispatchProps> = ({\n  selectedChatMemberId,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isFormFullyDisabled,\n  updateChatAdmin,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return undefined;\n    }\n\n    return chat.fullInfo.adminMembers.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat && chat.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember && selectedChatMember.adminRights) || {});\n    setCustomTitle(((selectedChatMember && selectedChatMember.customTitle) || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(false);\n    setIsLoading(false);\n  }, [selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [chat, selectedChatMemberId, permissions, customTitle, updateChatAdmin]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedChatMemberId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedChatMemberId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (!selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!!permissions.changeInfo}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={!!permissions.postMessages}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={!!permissions.editMessages}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={!!permissions.deleteMessages}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={!!permissions.banUsers}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!!permissions.inviteUsers}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!!permissions.pinMessages}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={!!permissions.addAdmins}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={!!permissions.anonymous}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedChatMemberId && !isFormFullyDisabled && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isDismissConfirmationDialogOpen}\n        onClose={closeDismissConfirmationDialog}\n        text=\"Are you sure you want to dismiss this admin?\"\n        confirmLabel=\"Dismiss\"\n        confirmHandler={handleDismissAdmin}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isFormFullyDisabled,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatAdmin']),\n)(ManageGroupAdminRights));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatMember, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { selectChat } from '../../../modules/selectors';\nimport { sortUserIds, isChatChannel } from '../../../modules/helpers';\nimport { pick } from '../../../util/iteratees';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: number;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openUserInfo'>;\n\nconst ManageGroupMembers: FC<OwnProps & StateProps & DispatchProps> = ({\n  members,\n  usersById,\n  isChannel,\n  openUserInfo,\n  serverTimeOffset,\n}) => {\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(members.map(({ userId }) => userId), usersById, undefined, serverTimeOffset);\n  }, [members, serverTimeOffset, usersById]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => handleMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const members = chat && chat.fullInfo && chat.fullInfo.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n  ]),\n)(ManageGroupMembers));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatMember, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { sortUserIds, isChatChannel } from '../../../modules/helpers';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number) => void;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  serverTimeOffset,\n}) => {\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById, undefined, serverTimeOffset,\n    );\n  }, [members, serverTimeOffset, usersById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: number) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const members = chat && chat.fullInfo && chat.fullInfo.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens, ManagementType } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../modules/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageGroupRemovedUsers from './ManageGroupRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\n\nexport type OwnProps = {\n  chatId: number;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: number;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return <ManageUser key={chatId} userId={chatId} />;\n        case 'group':\n          return <ManageGroup key={chatId} chatId={chatId} onScreenSelect={onScreenSelect} />;\n        case 'channel':\n          return <ManageChannel key={chatId} chatId={chatId} onScreenSelect={onScreenSelect} />;\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType chatId={chatId} />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageGroupRemovedUsers chatId={chatId} />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n        />\n      );\n\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers chatId={chatId} />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const CURRENCIES: Record<string, string> = {\n  USD: '$',\n  EUR: '€',\n  GBP: '£',\n  JPY: '¥',\n  RUB: '₽',\n  UAH: '₴',\n  INR: '₹',\n  AED: 'د.إ',\n};\n\nexport function getCurrencySign(currency: string | undefined): string {\n  if (!currency) {\n    return '';\n  }\n  return CURRENCIES[currency] || '';\n}\n","const VISA = /^4[0-9]{12}(?:[0-9]{1,3})?$/;\nconst MASTERCARD1 = /^5[1-5][0-9]{11,14}$/;\nconst MASTERCARD2 = /^2[2-7][0-9]{11,14}$/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\nimport { countryList } from '../../util/phoneNumber';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload,\n        billingCountry: getBillingCountry(action.payload),\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.countryIso2) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: getBillingCountry(action.payload.countryIso2),\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nfunction getBillingCountry(countryCode: string) {\n  const country = countryList.find(({ id }) => id === countryCode);\n  return country ? country.name : '';\n}\n\nexport default () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n","import { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import { ChangeEvent, RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: any;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import React, {\n  FC, useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\nimport { countryList } from '../../util/phoneNumber';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label=\"Address1 (Street)\"\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label=\"Address2 (Street)\"\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label=\"City\"\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              error={formErrors.city}\n            />\n            <InputText\n              label=\"State\"\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label=\"Country\"\n              placeholder=\"Country\"\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n            >\n              {countryList.map(({ name, id }) => (\n                <option\n                  value={id}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label=\"Post Code\"\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label=\"Full name\"\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label=\"Email\"\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label=\"Phone number\"\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import React, {\n  FC, useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport { ShippingOption } from '../../types/index';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  useEffect(() => {\n    if (!shippingOptions || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: `${currency} ${String(amount / 100)}`,\n    value,\n  }))), [shippingOptions, currency]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>Select shipping method</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import React, {\n  FC, memo,\n} from '../../lib/teact/teact';\n\nimport { Price } from '../../types';\n\nimport './Checkout.scss';\n\nexport type OwnProps = {\n  invoiceContent?: {\n    title?: string;\n    description?: string;\n    text?: string;\n    photoUrl?: string;\n  };\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  shippingPrices?: Price[];\n  currency?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  invoiceContent,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const { photoUrl, title, text } = (invoiceContent || {});\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n  return (\n    <div className=\"Checkout\">\n      <div className=\"description has-image\">\n        { photoUrl && (\n          <img src={photoUrl} alt=\"\" />\n        )}\n        <div className=\"text\">\n          <h5>{ title }</h5>\n          <p>{ text }</p>\n        </div>\n      </div>\n      <div className=\"price-info\">\n        { prices && prices.map((item) => (\n          renderPaymentItem(item.label, item.amount, currency, false)\n        )) }\n        { shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(item.label, item.amount, currency, false)\n        )) }\n        { totalPrice !== undefined && (\n          renderPaymentItem('Total', totalPrice, currency, true)\n        ) }\n      </div>\n      <div className=\"invoice-info\">\n        {paymentMethod && renderCheckoutItem('icon-card', paymentMethod, 'Payment method')}\n        {paymentProvider && renderCheckoutItem('stripe-provider', paymentProvider, 'Payment provider')}\n        {shippingAddress && renderCheckoutItem('icon-location', shippingAddress, 'Shipping address')}\n        {name && renderCheckoutItem('icon-user', name, 'Name')}\n        {phone && renderCheckoutItem('icon-phone', phone, 'Phone number')}\n        {shippingMethod && renderCheckoutItem('icon-truck', shippingMethod, 'Shipping method')}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPaymentItem(title: string, value: number, currency?: string, main = false) {\n  return (\n    <div className={`price-info-item ${main ? 'price-info-item-main' : ''}`}>\n      <div className=\"title\">\n        { title }\n      </div>\n      <div className=\"value\">\n        { `${currency || ''} ${(value / 100).toFixed(2)}` }\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem(icon: string, title: string, data: string) {\n  return (\n    <div className=\"checkout-info-item\">\n      <i className={icon}> </i>\n      <div className=\"info\">\n        <div className=\"title\">\n          { title }\n        </div>\n        <p className=\"data\">\n          { data }\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Checkout);\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  // eslint-disable-next-line no-null/no-null\n  const expiryInputRef = useRef<HTMLInputElement>(null);\n\n  const handleKeyDown = useCallback((e) => {\n    if (e.key === 'Backspace' && value.charAt(value.length - 1) === '/') {\n      const newValue = value.slice(0, value.length - 1);\n      if (expiryInputRef.current) {\n        expiryInputRef.current.value = newValue;\n      }\n    }\n  }, [value]);\n\n  const handleChange = useCallback((e) => {\n    onChange(formatCardExpiry(e.target.value));\n  }, [onChange]);\n\n  return (\n    <InputText\n      label=\"Expiry date\"\n      ref={expiryInputRef}\n      onChange={handleChange}\n      onKeyDown={handleKeyDown}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      maxLength={MAX_FIELD_LENGTH}\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts && parts[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts && parts[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","export default __webpack_public_path__ + \"mastercard.4216118edafe23cc2dec7b8807ba4622.svg\";","export default __webpack_public_path__ + \"visa.e5a7c336e1deb4b92a636e2e053878c4.svg\";","import React, {\n  FC, memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\n// @ts-ignore\nimport mastercardIconPath from '../../assets/mastercard.svg';\n// @ts-ignore\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n    if (cardNumberRef.current) {\n      cardNumberRef.current.value = newValue;\n    }\n  }, [onChange, cardNumberRef]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <span className=\"left-addon\">{cardIcon}</span>\n      <InputText\n        ref={cardNumberRef}\n        label=\"Card number\"\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-left-addon' : ''}\n        error={error}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n      />\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import React, {\n  FC, useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\nimport { countryList } from '../../util/phoneNumber';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    dispatch({ type: 'changeCvvCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label=\"Name on card\"\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label=\"CVV code\"\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            error={formErrors.cvv}\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label=\"Country\"\n            placeholder=\"Country\"\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ name }) => (\n                <option\n                  value={name}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label=\"Post Code\"\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            error={formErrors.billingZip}\n          />\n        )}\n        { canSaveCredentials && (\n          <Checkbox\n            label={lang('PaymentCardSavePaymentInformation')}\n            checked={state.saveCredentials}\n            onChange={handleChangeSaveCredentials}\n          />\n        ) }\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../global/types';\nimport { PaymentStep, ShippingOption, Price } from '../../types';\nimport { ApiError, ApiInviteInfo } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport { getCurrencySign } from '../middle/helpers/getCurrencySign';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport { getShippingErrors } from '../../modules/helpers/payments';\nimport usePaymentReducer, { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  nameRequested?: boolean;\n  shippingAddressRequested?: boolean;\n  phoneRequested?: boolean;\n  emailRequested?: boolean;\n  flexible?: boolean;\n  phoneToProvider?: boolean;\n  emailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  globalDialogs?: (ApiError | ApiInviteInfo)[];\n};\n\ntype GlobalStateProps = Pick<GlobalState['payment'], 'step' | 'shippingOptions' |\n'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoiceContent' |\n'error'>;\n\ntype DispatchProps = Pick<GlobalActions, 'validateRequestedInfo' | 'sendPaymentForm' | 'setPaymentStep'\n| 'sendCredentialsInfo' | 'clearPaymentError' >;\n\nconst Invoice: FC<OwnProps & StateProps & GlobalStateProps & DispatchProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  nameRequested,\n  shippingAddressRequested,\n  phoneRequested,\n  emailRequested,\n  phoneToProvider,\n  emailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoiceContent,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  error,\n  globalDialogs,\n  validateRequestedInfo,\n  sendPaymentForm,\n  setPaymentStep,\n  sendCredentialsInfo,\n  clearPaymentError,\n}) => {\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const currencySign = getCurrencySign(currency);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useEffect(() => {\n    if (step || error || globalDialogs) {\n      setIsLoading(false);\n    }\n  }, [step, error, globalDialogs]);\n\n  useEffect(() => {\n    if (error && error.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.fieldError,\n        },\n      });\n      return;\n    }\n    if (globalDialogs && globalDialogs.length) {\n      const errors = getShippingErrors(globalDialogs);\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          ...errors,\n        },\n      });\n    }\n  }, [error, globalDialogs, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingAddress || {}),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping);\n  }, [step, paymentState.shipping, prices, shippingOptions]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <Button\n          isText\n          onClick={clearPaymentError}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(cuurentStep: PaymentStep) {\n    switch (cuurentStep) {\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(shippingAddressRequested)}\n            needEmail={Boolean(emailRequested || emailToProvider)}\n            needPhone={Boolean(phoneRequested || phoneToProvider)}\n            needName={Boolean(nameRequested)}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currencySign}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n          />\n        );\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            prices={prices}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoiceContent={invoiceContent}\n            checkoutInfo={checkoutInfo}\n            currency={currencySign}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  const handleButtonClick = useCallback(() => {\n    setIsLoading(true);\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return validateRequest();\n      case PaymentStep.Shipping:\n        return setStep(PaymentStep.PaymentInfo);\n      case PaymentStep.PaymentInfo:\n        return sendCredentials();\n      case PaymentStep.Checkout:\n        return sendForm();\n      default:\n        return () => {};\n    }\n  }, [step, validateRequest, setStep, sendCredentials, sendForm]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('Checkout.PayPrice', `${currencySign}${(totalPrice / 100).toFixed(2)}`);\n      default:\n        return lang('Next');\n    }\n  }, [step, lang, currencySign, totalPrice]);\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <p>\n          Sorry, Telegram WebZ doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <Button\n          isText\n          onClick={onClose}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"PaymentModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={onClose}\n          ariaLabel=\"Close\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          {() => (\n            <div className=\"content custom-scroll\">\n              {renderModalContent(step)}\n            </div>\n          )}\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      <div className=\"footer\">\n        <Button\n          type=\"submit\"\n          onClick={handleButtonClick}\n          disabled={isLoading}\n          isLoading={isLoading}\n        >\n          {buttonText}\n        </Button>\n      </div>\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContent,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n    } = global.payment;\n\n    const isProviderError = Boolean(invoice && (!nativeProvider || nativeProvider !== DEFAULT_PROVIDER));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      nameRequested,\n      phoneRequested,\n      emailRequested,\n      shippingAddressRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n    } = (invoice || {});\n\n    return {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      nameRequested,\n      shippingAddressRequested,\n      phoneRequested,\n      emailRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoiceContent,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      globalDialogs: global.dialogs,\n    };\n  },\n  (setGlobal, actions): DispatchProps => {\n    return pick(actions, [\n      'validateRequestedInfo',\n      'sendPaymentForm',\n      'setPaymentStep',\n      'sendCredentialsInfo',\n      'clearPaymentError',\n    ]);\n  },\n)(Invoice));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option ? option.prices : undefined;\n}\n\nfunction getTotalPrice(prices: Price[] = [], shippingOptions: ShippingOption[] | undefined, shippingOption: string) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = 0;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = `${cardTypeText} *${state.cardNumber.slice(-4)}`;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption ? shippingOption.title : undefined;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nfunction getCredentials(paymentState: FormState) {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, {\n  FC, memo, useMemo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { Price } from '../../types';\nimport { ApiShippingAddress } from '../../api/types/payments';\n\nimport useLang from '../../hooks/useLang';\nimport { getCurrencySign } from '../middle/helpers/getCurrencySign';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photoUrl?: string;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  totalAmount,\n  currency,\n  info,\n  photoUrl,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n  const currencySign = getCurrencySign(currency);\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={onClose}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            invoiceContent={{\n              photoUrl,\n              text,\n              title,\n            }}\n            checkoutInfo={checkoutInfo}\n            currency={currencySign}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = global.payment;\n    const {\n      currency,\n      prices: mapedPrices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices: mapedPrices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress && shippingAddress.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    paymentProvider: 'Stripe',\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import { ApiMediaFormat } from '../../../api/types';\n\nimport * as mediaLoader from '../../../util/mediaLoader';\n\n// @ts-ignore\nimport MonkeyIdle from '../../../assets/TwoFactorSetupMonkeyIdle.tgs';\n// @ts-ignore\nimport MonkeyTracking from '../../../assets/TwoFactorSetupMonkeyTracking.tgs';\n// @ts-ignore\nimport MonkeyClose from '../../../assets/TwoFactorSetupMonkeyClose.tgs';\n// @ts-ignore\nimport MonkeyPeek from '../../../assets/TwoFactorSetupMonkeyPeek.tgs';\n// @ts-ignore\nimport FoldersAll from '../../../assets/FoldersAll.tgs';\n// @ts-ignore\nimport FoldersNew from '../../../assets/FoldersNew.tgs';\n// @ts-ignore\nimport DiscussionGroups from '../../../assets/DiscussionGroupsDucks.tgs';\n\nexport const ANIMATED_STICKERS_PATHS = {\n  MonkeyIdle,\n  MonkeyTracking,\n  MonkeyClose,\n  MonkeyPeek,\n  FoldersAll,\n  FoldersNew,\n  DiscussionGroups,\n};\n\nexport default function getAnimationData(name: keyof typeof ANIMATED_STICKERS_PATHS) {\n  const path = ANIMATED_STICKERS_PATHS[name].replace(window.location.origin, '');\n\n  return mediaLoader.fetch(`file${path}`, ApiMediaFormat.Lottie);\n}\n","export default __webpack_public_path__ + \"TwoFactorSetupMonkeyIdle.dea4a492c144df84ddab778dc8a3f0cd.tgs\";","export default __webpack_public_path__ + \"TwoFactorSetupMonkeyTracking.eb5a7a6f166fb7589c12e6248561fb58.tgs\";","export default __webpack_public_path__ + \"TwoFactorSetupMonkeyClose.604c4c833d322b7e6c3ea19bef058241.tgs\";","export default __webpack_public_path__ + \"TwoFactorSetupMonkeyPeek.1905436b042520363d7e59f5d7f903ab.tgs\";","export default __webpack_public_path__ + \"FoldersAll.3f9f9e243d19f0fbf9aaaff11cbd4572.tgs\";","export default __webpack_public_path__ + \"FoldersNew.9a40d71c0c8be70f5bd14ff2d7bc1593.tgs\";","export default __webpack_public_path__ + \"DiscussionGroupsDucks.9ea453d1be9d1b0ee77a992f8e587485.tgs\";","import React, {\n  FC, useEffect, useState, memo,\n} from '../../lib/teact/teact';\n\nimport { DEBUG } from '../../config';\nimport { blobToFile, blobToDataUri } from '../../util/files';\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\nimport Modal from './Modal';\nimport Loading from './Loading';\n\nimport './CropModal.scss';\n\n// Change to 'base64' to get base64-encoded string\nconst cropperResultOptions: Croppie.ResultOptions & { type: 'blob' } = {\n  type: 'blob',\n  quality: 0.8,\n  format: 'jpeg',\n  circle: false,\n};\n\ntype ICroppie = typeof import('croppie');\nlet Croppie: ICroppie;\nlet croppiePromise: Promise<{ default: ICroppie }>;\n\nasync function ensureCroppie() {\n  if (!croppiePromise) {\n    croppiePromise = import('../../lib/croppie') as unknown as Promise<{ default: ICroppie }>;\n    Croppie = (await croppiePromise).default;\n  }\n\n  return croppiePromise;\n}\n\nlet cropper: Croppie;\n\nasync function initCropper(imgFile: File) {\n  try {\n    const cropContainer = document.getElementById('avatar-crop');\n    if (!cropContainer) {\n      return;\n    }\n\n    const { offsetWidth, offsetHeight } = cropContainer;\n\n    cropper = new Croppie(cropContainer, {\n      enableZoom: true,\n      boundary: {\n        width: offsetWidth,\n        height: offsetHeight,\n      },\n      viewport: {\n        width: offsetWidth - 16,\n        height: offsetHeight - 16,\n        type: 'circle',\n      },\n    });\n\n    const dataUri = await blobToDataUri(imgFile);\n    await cropper.bind({ url: dataUri });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n}\n\ntype OwnProps = {\n  file?: File;\n  onChange: (file: File) => void;\n  onClose: () => void;\n};\n\nconst CropModal: FC<OwnProps> = ({ file, onChange, onClose }: OwnProps) => {\n  const [isCroppieReady, setIsCroppieReady] = useState(false);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    if (!isCroppieReady) {\n      ensureCroppie().then(() => setIsCroppieReady(true));\n\n      return;\n    }\n\n    initCropper(file);\n  }, [file, isCroppieReady]);\n\n  const lang = useLang();\n\n  async function handleCropClick() {\n    if (!cropper) {\n      return;\n    }\n\n    const result: Blob | string = await cropper.result(cropperResultOptions);\n    const croppedImg = typeof result === 'string' ? result : blobToFile(result, 'avatar.jpg');\n\n    onChange(croppedImg);\n  }\n\n  return (\n    <Modal\n      isOpen={Boolean(file)}\n      onClose={onClose}\n      title=\"Drag to reposition\"\n      className=\"CropModal\"\n      hasCloseButton\n    >\n      {isCroppieReady ? (\n        <div id=\"avatar-crop\" />\n      ) : (\n        <Loading />\n      )}\n      <Button\n        className=\"confirm-button\"\n        round\n        color=\"primary\"\n        onClick={handleCropClick}\n        ariaLabel={lang('CropImage')}\n      >\n        <i className=\"icon-check\" />\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(CropModal);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target || !target.files || !target.files[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  function handleAvatarCrop(croppedImg: File) {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }\n\n  function handleModalClose() {\n    setSelectedFile(undefined);\n  }\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n","import React, {\n  FC, useState, useEffect, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport getAnimationData from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\nconst STICKER_SIZE = IS_SINGLE_COLUMN_LAYOUT ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [closeMonkeyData, setCloseMonkeyData] = useState<Record<string, any>>();\n  const [peekMonkeyData, setPeekMonkeyData] = useState<Record<string, any>>();\n  const [isFirstMonkeyLoaded, setIsFirstMonkeyLoaded] = useState(false);\n  const [isPeekShown, setIsPeekShown] = useState(false);\n\n  useEffect(() => {\n    if (!closeMonkeyData) {\n      getAnimationData('MonkeyClose').then(setCloseMonkeyData);\n    } else {\n      setTimeout(() => setIsPeekShown(true), PEEK_MONKEY_SHOW_DELAY);\n    }\n  }, [closeMonkeyData]);\n\n  useEffect(() => {\n    if (!peekMonkeyData) {\n      getAnimationData('MonkeyPeek').then(setPeekMonkeyData);\n    }\n  }, [peekMonkeyData]);\n\n  const handleFirstMonkeyLoad = useCallback(() => setIsFirstMonkeyLoaded(true), []);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      {closeMonkeyData && (\n        <AnimatedSticker\n          id=\"closeMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'hidden' : 'shown'}\n          animationData={closeMonkeyData}\n          playSegment={SEGMENT_COVER_EYES}\n          noLoop\n          onLoad={handleFirstMonkeyLoad}\n        />\n      )}\n      {peekMonkeyData && (\n        <AnimatedSticker\n          id=\"peekMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'shown' : 'hidden'}\n          animationData={peekMonkeyData}\n          playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n          noLoop\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { MIN_PASSWORD_LENGTH } from '../../config';\nimport { IS_TOUCH_ENV, IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  submitLabel?: string;\n  error?: string;\n  hint?: string;\n  placeholder?: string;\n  isLoading?: boolean;\n  isPasswordVisible?: boolean;\n  clearError: NoneToVoidFunction;\n  onChangePasswordVisibility: (state: boolean) => void;\n  onInputChange?: (password: string) => void;\n  onSubmit: (password: string) => void;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst PasswordForm: FC<OwnProps> = ({\n  isLoading = false,\n  isPasswordVisible,\n  error,\n  hint,\n  placeholder = 'Password',\n  submitLabel = 'Next',\n  clearError,\n  onChangePasswordVisibility,\n  onInputChange,\n  onSubmit,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const lang = useLang();\n\n  const [password, setPassword] = useState('');\n  const [canSubmit, setCanSubmit] = useState(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (error) {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n        inputRef.current!.select();\n      });\n    }\n  }, [error]);\n\n  function onPasswordChange(e: ChangeEvent<HTMLInputElement>) {\n    if (error) {\n      clearError();\n    }\n\n    const { target } = e;\n    setPassword(target.value);\n    setCanSubmit(target.value.length >= MIN_PASSWORD_LENGTH);\n    if (onInputChange) {\n      onInputChange(target.value);\n    }\n  }\n\n  function togglePasswordVisibility() {\n    onChangePasswordVisibility(!isPasswordVisible);\n  }\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    if (isLoading) {\n      return;\n    }\n\n    if (canSubmit) {\n      onSubmit(password);\n    }\n  }\n\n  return (\n    <form action=\"\" onSubmit={handleSubmit} autoComplete=\"off\">\n      <div\n        className={buildClassName('input-group password-input', password && 'touched', error && 'error')}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <input\n          ref={inputRef}\n          className=\"form-control\"\n          type={isPasswordVisible ? 'text' : 'password'}\n          id=\"sign-in-password\"\n          value={password || ''}\n          autoComplete=\"current-password\"\n          onChange={onPasswordChange}\n          dir=\"auto\"\n        />\n        <label>{error || hint || placeholder}</label>\n        <div\n          className=\"toggle-password\"\n          onClick={togglePasswordVisibility}\n          role=\"button\"\n          tabIndex={0}\n          title=\"Toggle password visibility\"\n        >\n          <i className={isPasswordVisible ? 'icon-eye' : 'icon-eye-closed'} />\n        </div>\n      </div>\n      {canSubmit && (\n        <Button type=\"submit\" ripple isLoading={isLoading}>\n          {submitLabel}\n        </Button>\n      )}\n    </form>\n  );\n};\n\nexport default memo(PasswordForm);\n"],"sourceRoot":""}