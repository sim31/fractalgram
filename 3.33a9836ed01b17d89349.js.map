{"version":3,"sources":["webpack:///./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack:///./src/components/mediaViewer/SenderInfo.tsx","webpack:///./src/components/mediaViewer/MediaViewerActions.tsx","webpack:///./src/components/mediaViewer/MediaViewerFooter.tsx","webpack:///./src/hooks/useFullscreen.ts","webpack:///./src/components/mediaViewer/helpers/formatFileSize.ts","webpack:///./src/components/mediaViewer/VideoPlayerControls.tsx","webpack:///./src/components/mediaViewer/VideoPlayer.tsx","webpack:///./src/components/mediaViewer/ZoomControls.tsx","webpack:///./src/components/mediaViewer/PanZoom.tsx","webpack:///./src/components/mediaViewer/MediaViewer.tsx","webpack:///./src/components/main/ForwardPicker.tsx","webpack:///./src/components/main/Dialogs.tsx","webpack:///./src/components/main/Notifications.tsx","webpack:///./src/components/main/SafeLinkModal.tsx","webpack:///./src/components/common/CalendarModal.tsx","webpack:///./src/components/main/HistoryCalendar.tsx","webpack:///./src/components/common/DeleteMessageModal.tsx","webpack:///./src/components/common/PinMessageModal.tsx","webpack:///./src/components/common/UnpinAllMessagesModal.tsx","webpack:///./src/components/middle/DeleteSelectedMessageModal.tsx","webpack:///./src/components/common/ReportMessageModal.tsx","webpack:///./src/components/middle/MessageSelectToolbar.tsx","webpack:///./src/hooks/useSelectWithEnter.ts","webpack:///./src/components/left/search/LeftSearchResultChat.tsx","webpack:///./src/components/left/search/RecentContacts.tsx","webpack:///./src/components/left/search/ChatMessage.tsx","webpack:///./src/components/left/search/DateSuggest.tsx","webpack:///./src/components/left/search/ChatResults.tsx","webpack:///./src/components/left/search/ChatMessageResults.tsx","webpack:///./src/components/left/search/helpers/createMapStateToProps.ts","webpack:///./src/components/left/search/MediaResults.tsx","webpack:///./src/components/left/search/helpers/getSenderName.ts","webpack:///./src/components/left/search/LinkResults.tsx","webpack:///./src/components/left/search/FileResults.tsx","webpack:///./src/components/left/search/AudioResults.tsx","webpack:///./src/components/left/search/LeftSearch.tsx","webpack:///./src/hooks/reducers/useTwoFaReducer.ts","webpack:///./src/components/left/settings/SettingsHeader.tsx","webpack:///./src/components/left/settings/SettingsMain.tsx","webpack:///./src/components/common/UsernameInput.tsx","webpack:///./src/components/left/settings/SettingsEditProfile.tsx","webpack:///./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack:///./src/components/ui/ShowMoreButton.tsx","webpack:///./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack:///./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack:///./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack:///./src/components/left/settings/folders/SettingsFolders.tsx","webpack:///./src/components/ui/RangeSlider.tsx","webpack:///./src/components/middle/composer/StickerSetCoverAnimated.tsx","webpack:///./src/components/middle/composer/StickerSetCover.tsx","webpack:///./src/components/left/settings/SettingsStickerSet.tsx","webpack:///./src/components/left/settings/SettingsGeneral.tsx","webpack:///./src/util/systemFilesDialog.ts","webpack:///./src/util/colors.ts","webpack:///./src/components/left/settings/WallpaperTile.tsx","webpack:///./src/components/left/settings/SettingsGeneralBackground.tsx","webpack:///./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack:///./src/components/left/settings/SettingsNotifications.tsx","webpack:///./src/components/left/settings/SettingsPrivacy.tsx","webpack:///./src/components/left/settings/SettingsLanguage.tsx","webpack:///./src/components/left/settings/helper/privacy.ts","webpack:///./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack:///./src/components/left/settings/SettingsPrivacyActiveSessions.tsx","webpack:///./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaPassword.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack:///./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack:///./src/components/left/settings/Settings.tsx","webpack:///./src/components/left/main/ContactList.tsx","webpack:///./src/components/left/newChat/NewChatStep1.tsx","webpack:///./src/components/left/newChat/NewChatStep2.tsx","webpack:///./src/components/left/newChat/NewChat.tsx","webpack:///./src/components/left/ArchivedChats.tsx","webpack:///./src/util/scrollLock.ts","webpack:///./src/components/middle/message/helpers/copyOptions.ts","webpack:///./src/components/middle/message/MessageContextMenu.tsx","webpack:///./src/components/middle/message/ContextMenuContainer.tsx","webpack:///./src/components/common/StickerSetModal.tsx","webpack:///./src/components/middle/HeaderMenuContainer.tsx","webpack:///./src/components/middle/MobileSearch.tsx","webpack:///./src/util/findInViewport.ts","webpack:///./src/util/isFullyVisible.ts","webpack:///./src/util/setTooltipItemVisible.ts","webpack:///./src/components/middle/composer/MentionTooltip.tsx","webpack:///./src/components/middle/composer/AttachmentModal.tsx","webpack:///./src/components/middle/composer/PollModal.tsx","webpack:///./src/components/middle/composer/EmojiButton.tsx","webpack:///./src/components/middle/composer/EmojiCategory.tsx","webpack:///./src/components/middle/composer/EmojiPicker.tsx","webpack:///./src/components/middle/composer/StickerSet.tsx","webpack:///./src/components/middle/composer/StickerPicker.tsx","webpack:///./src/components/common/GifButton.tsx","webpack:///./src/components/middle/composer/GifPicker.tsx","webpack:///./src/components/middle/composer/SymbolMenuFooter.tsx","webpack:///./src/components/middle/composer/SymbolMenu.tsx","webpack:///./src/components/middle/composer/AttachMenu.tsx","webpack:///./src/components/middle/composer/StickerTooltip.tsx","webpack:///./src/components/middle/composer/CustomSendMenu.tsx","webpack:///./src/components/middle/composer/EmojiTooltip.tsx","webpack:///./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack:///./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack:///./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack:///./src/components/middle/composer/inlineResults/GifResult.tsx","webpack:///./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack:///./src/components/middle/composer/InlineBotTooltip.tsx","webpack:///./src/components/right/RightSearch.tsx","webpack:///./src/components/right/StickerSetResult.tsx","webpack:///./src/components/right/StickerSearch.tsx","webpack:///./src/components/right/GifSearch.tsx","webpack:///./src/components/right/PollAnswerResults.tsx","webpack:///./src/components/right/PollResults.tsx","webpack:///./src/components/right/management/ManageUser.tsx","webpack:///./src/components/right/management/ManageGroup.tsx","webpack:///./src/components/right/management/ManageGroupPermissions.tsx","webpack:///./src/components/right/management/ManageGroupRemovedUsers.tsx","webpack:///./src/components/right/management/ManageChannel.tsx","webpack:///./src/components/right/management/ManageChatPrivacyType.tsx","webpack:///./src/components/right/management/ManageDiscussion.tsx","webpack:///./src/components/right/management/ManageGroupUserPermissions.tsx","webpack:///./src/components/right/management/ManageChatAdministrators.tsx","webpack:///./src/components/right/management/ManageGroupRecentActions.tsx","webpack:///./src/components/right/management/ManageGroupAdminRights.tsx","webpack:///./src/components/right/management/ManageGroupMembers.tsx","webpack:///./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack:///./src/components/right/management/Management.tsx","webpack:///./src/components/middle/helpers/getCurrencySign.ts","webpack:///./src/components/common/helpers/detectCardType.ts","webpack:///./src/hooks/reducers/usePaymentReducer.ts","webpack:///./src/hooks/useFocusAfterAnimation.tsx","webpack:///./src/components/ui/Select.tsx","webpack:///./src/components/payment/ShippingInfo.tsx","webpack:///./src/components/payment/Shipping.tsx","webpack:///./src/components/payment/Checkout.tsx","webpack:///./src/components/payment/ExpiryInput.tsx","webpack:///./src/components/middle/helpers/inputFormatters.ts","webpack:///./src/assets/mastercard.svg","webpack:///./src/assets/visa.svg","webpack:///./src/components/payment/CardInput.tsx","webpack:///./src/components/payment/PaymentInfo.tsx","webpack:///./src/components/payment/PaymentModal.tsx","webpack:///./src/components/payment/ReceiptModal.tsx","webpack:///./src/components/common/helpers/animatedAssets.ts","webpack:///./src/assets/TwoFactorSetupMonkeyIdle.tgs","webpack:///./src/assets/TwoFactorSetupMonkeyTracking.tgs","webpack:///./src/assets/TwoFactorSetupMonkeyClose.tgs","webpack:///./src/assets/TwoFactorSetupMonkeyPeek.tgs","webpack:///./src/assets/FoldersAll.tgs","webpack:///./src/assets/FoldersNew.tgs","webpack:///./src/assets/DiscussionGroupsDucks.tgs","webpack:///./src/components/ui/CropModal.tsx","webpack:///./src/components/ui/AvatarEditable.tsx","webpack:///./src/components/common/PasswordMonkey.tsx","webpack:///./src/components/common/PasswordForm.tsx"],"names":["animateOpening","hasFooter","origin","bestImageData","dimensions","isVideo","message","mediaEl","fromImage","getNodes","width","windowWidth","windowSize","get","availableWidth","height","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","mql","window","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","topOffsetRem","matches","REM","getTopOffset","top","fromTop","left","fromLeft","fromWidth","fromHeight","getBoundingClientRect","MediaViewerOrigin","SharedMedia","Album","ScheduledAlbum","SearchResult","includes","uncovered","realWidth","realHeight","size","Math","max","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","ghost","createGhost","applyStyles","transform","applyShape","document","body","classList","add","requestAnimationFrame","appendChild","style","firstChild","objectFit","remove","clearShape","setTimeout","contains","removeChild","ANIMATION_END_DELAY","animateClosing","container","toImage","getElementById","querySelector","targetTop","el","display","rect","windowHeight","isElementInViewport","shouldFadeOut","Inline","ScheduledInline","isMessageImageFullyVisible","existingGhost","getElementsByClassName","ProfileAvatar","transition","transformOrigin","opacity","source","shouldAppendProfileInfo","createElement","img","Image","src","HTMLVideoElement","poster","profileInfo","cloneNode","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","parentElement","scrollTop","offsetHeight","element","styles","Object","assign","containerSelector","mediaSelector","MiddleHeaderAvatar","mediaEls","querySelectorAll","length","withGlobal","global","chatId","messageId","isAvatar","sender","isChatPrivate","selectUser","selectChat","selectChatMessage","selectSender","setGlobal","actions","pick","closeMediaViewer","focusMessage","handleFocusMessage","useCallback","lang","useLang","isFromChat","senderTitle","getSenderTitle","className","onClick","Avatar","key","chat","user","dir","renderText","formatMediaDateTime","date","MediaViewerActions","mediaData","isZoomed","fileName","onCloseMediaViewer","onForward","onZoomToggle","isDownloadStarted","downloadProgress","handleDownloadClick","useMediaDownload","getMessageMediaHash","undefined","MenuButton","useMemo","onTrigger","isOpen","Button","round","color","ariaLabel","IS_SINGLE_COLUMN_LAYOUT","DropdownMenu","trigger","positionX","MenuItem","icon","href","download","ProgressSpinner","progress","noCross","MediaViewerFooter","text","isHidden","isForVideo","isMultiline","setIsMultiline","useState","useEffect","footerContent","checkIsMultiline","clientHeight","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","prop","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","getBrowserFullscreenElementProp","units","bytes","number","floor","log","toFixed","stopEvent","VideoPlayerControls","bufferedProgress","currentTime","duration","fileSize","isForceVisible","isForceMobileVersion","isPlayed","isFullscreenSupported","isFullscreen","onChangeFullscreen","onPlayPause","onSeek","isVisible","setVisibility","timeout","clearTimeout","downloadedPercent","totalSize","percentagePlayed","percentageBuffered","min","step","type","onInput","value","renderSeekLine","ripple","formatMediaDuration","renderTime","formatFileSize","memo","url","isGif","posterData","posterSize","isMediaViewerOpen","noPlay","onClose","videoRef","useRef","setIsPlayed","IS_TOUCH_ENV","IS_IOS","setCurrentTime","isControlsVisible","setIsControlsVisible","setFullscreen","exitFullscreen","elRef","setIsFullscreen","Boolean","useLayoutEffect","listener","listenerEnter","listenerExit","video","current","PLATFORM_ENV","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreenStatus","isBuffered","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","safePlay","togglePlayState","play","useVideoCleanup","handleMouseOver","handleMouseOut","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","handleSeek","Number","target","toggleControls","togglePayingStateBySpace","preventDefault","wrapperStyle","videoStyle","onMouseOver","onMouseOut","ref","autoPlay","playsInline","loop","muted","onEnded","onDoubleClick","onTimeUpdate","join","square","isShown","onChangeZoom","prevIsShown","usePrevious","inputRef","zoomLevel","setZoomLevel","isSeeking","handleStartSeek","handleStopSeek","disabled","onChange","onMouseDown","onMouseUp","INITIAL_MATRIX","SCALE_VALUES","1","1.5","2","2.5","3","children","noWrap","canPan","panDeltaX","panDeltaY","onPan","tunedZoomLevel","isDragging","setIsDragging","dragData","setDragData","dx","dy","x","y","matrixData","setMatrixData","panWrapperRef","panContainerRef","newZoomLevel","newPandx","newPandy","newMatrixData","areSortedArraysEqual","oldScale","wrapper","image","wrapperRect","imageRect","newImgWidth","newImgHeight","newImgX","newImgY","calculateSafeZoneOnZoom","toString","newDragData","pageX","pageY","onMouseMove","deltaX","deltaY","getNewMatrixData","renderPhoto","blobUrl","imageSize","canDrag","alt","draggable","Spinner","threadId","avatarOwnerId","profilePhotoIndex","mediaViewer","animationLevel","settings","byKey","senderId","avatarOwner","chatMessages","collectionIds","selectScheduledMessage","selectScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","isFromSharedMedia","isFromSearch","photo","getMessagePhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","isPhoto","isSingleSlide","messageIds","getChatMediaMessageIds","selectedMediaMessageIndex","indexOf","isFirst","isLast","animationKey","prevSenderId","slideAnimation","headerAnimation","isGhostAnimation","isFooterHidden","setIsFooterHidden","canPanZoomWrap","setCanPanZoomWrap","setIsZoomed","panDelta","setPanDelta","getMediaHash","isFull","photos","getChatAvatarHash","blobUrlPictogram","useMedia","ApiMediaFormat","BlobUrl","previewMediaHash","blobUrlPreview","startsWith","DataUri","fullMediaData","useMediaWithDownloadProgress","getMessageMediaFormat","localBlobUrl","thumbDataUri","useBlurSync","getMessageMediaThumbDataUri","videoSize","getMessageFileSize","getMessageFileName","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","AVATAR_FULL_DIMENSIONS","toggle","forceUpdate","useForceUpdate","addListener","removeListener","prevMessage","prevOrigin","prevAvatarOwner","prevBestImageData","dispatchHeavyAnimationEvent","textParts","renderMessageText","timer","closeZoom","handleZoomToggle","handleZoomValue","level","canCloseZoom","close","handleFooterClick","handleForward","fromChatId","captureEscKeyListener","stopCurrentAudio","disableRefresh","enableRefresh","getMessageId","fromId","direction","index","selectPreviousMedia","selectNextMedia","handleKeyDown","shouldCloseOnVideo","captureEvents","excludedClosestSelector","onSwipe","SwipeDirection","Right","Left","handlePan","handleToggleFooterVisibility","renderSlide","isActive","calculateMediaViewerDimensions","renderSenderInfo","useHistoryBack","ShowTransition","isRtl","Transition","activeKey","name","aria-label","chats","byId","chatsById","listIds","orderedPinnedIds","currentUserId","pinnedIds","active","activeListIds","archivedListIds","archived","setForwardChatId","exitForwardMode","loadMoreChats","filter","setFilter","focus","blur","chatIds","priorityIds","unique","sortChatIds","getCanPostInChat","MAIN_THREAD_ID","searchWords","getChatTitle","viewportIds","getMore","useInfiniteScroll","handleFilterChange","containerRef","useKeyboardListNavigation","modalHeader","InputText","onKeyDown","placeholder","Modal","header","InfiniteScroll","items","onLoadMore","noScrollRestore","map","ListItem","PrivateChatInfo","status","userId","GroupChatInfo","Loading","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","dismissDialog","acceptInviteConfirmation","dialog","invite","hash","title","participantsCount","isChannel","participantsText","joinText","isText","renderInvite","getReadableErrorText","notifications","dismissNotification","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","handleDismiss","renderingUrl","useCurrentOrPrev","ConfirmDialog","confirmLabel","confirmHandler","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","Date","fixedMinDate","getFullYear","getMonth","getDate","fixedMaxDate","formatInputTime","String","padStart","selectedAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","now","defaultSelectedDate","prevIsOpen","selectedDate","setSelectedDate","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","currentYear","currentMonth","currentDate","shouldDisableNextMonth","shouldDisablePrevMonth","calendarGrid","grid","setFullYear","setMonth","setDate","monthStartDay","getDay","i","push","gridDate","buildCalendarGrid","handleChangeHours","replace","hours","getTime","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","formatDateToString","code","today","formatTime","formatSubmitLabel","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","isSchedule","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","contactName","getUserFirstOrLastName","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","album","deleteMessages","deleteScheduledMessages","handleDeleteMessageForAll","messages","shouldDeleteForAll","handleDeleteMessageForSelf","onEnter","isPrivateChat","isChatWithSelf","selectIsChatWithSelf","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","selectCurrentChat","exitMessageSelectMode","reportMessages","selectedReason","setSelectedReason","description","setDescription","handleReport","reason","handleSelectReason","handleDescriptionChange","REPORT_OPTIONS","label","RadioGroup","options","selected","messageListType","canDelete","canReport","selectCanReportSelectedMessages","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canPost","openForwardMenuForSelectedMessages","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useFlag","isReportModalOpen","openReportModal","closeReportModal","captureKeyboardListeners","onBackspace","onDelete","onEsc","prevSelectedMessagesCount","renderingSelectedMessagesCount","formattedMessagesCount","destructive","onSelect","buttonRef","activeElement","privateChatUserId","privateChatUser","isPinned","selectIsChatPinned","isMuted","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","withUsername","contextActions","useChatContextActions","handleDelete","handleClick","useSelectWithEnter","avatarSize","DeleteChatModal","runThrottled","cb","userIds","topUserIds","topPeers","usersById","users","recentlyFoundChatIds","globalSearch","onReset","loadTopUsers","loadContactList","openChat","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","useHorizontalScroll","shouldReplaceHistory","lastSyncTime","searchQuery","mediaThumbnail","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","withOnlineStatus","isSavedMessages","isSelf","isVerified","VerifiedIcon","Link","formatPastTimeShort","getMessageSummaryText","highlight","renderMessageSummary","searchDate","suggestions","match","suggestion","latestYear","getSuggestionsFromDate","localContactIds","contactList","fetchingStatus","globalResults","localResults","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleLoadMore","LoadMoreDirection","Backwards","query","handleChatClick","handlePickerItemClick","MEMO_EMPTY_ARRAY","foundContactIds","fullName","getUserFullName","username","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","NothingFound","PickerSelectedItem","chatOrUserId","clickArg","createMapStateToProps","props","currentType","isVoice","theme","selectTheme","isLoading","searchChatId","handleSelectMedia","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","isMediaGrid","isMessageList","itemSelector","Media","idPrefix","getSenderName","senderName","isChatGroup","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","onPlay","TABS","GlobalSearchContent","ChatList","Links","Files","Music","Voice","CHAT_TABS","slice","TRANSITION_RENDER_COUNT","keys","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","content","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","action","payload","currentScreen","editedFolderId","onSaveFilter","signOut","deleteChatFolder","isSignOutDialogOpen","setIsSignOutDialogOpen","isDeleteFolderDialogOpen","setIsDeleteFolderDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","closeDeleteFolderConfirmation","handleSignOutMessage","handleDeleteFolderMessage","SettingsMenuButton","SettingsScreens","EditProfile","General","Notifications","Privacy","Language","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyForwarding","PrivacyGroupChats","PrivacyPhoneNumberAllowedContacts","PrivacyLastSeenAllowedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyForwardingAllowedContacts","PrivacyGroupChatsAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyForwardingDeniedContacts","PrivacyGroupChatsDeniedContacts","PrivacyActiveSessions","PrivacyBlockedUsers","TwoFaDisabled","TwoFaEnabled","TwoFaNewPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaChangePasswordHint","TwoFaNewPasswordEmail","TwoFaRecoveryEmail","TwoFaNewPasswordEmailCode","TwoFaRecoveryEmailCode","TwoFaCongratulations","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","Folders","FoldersCreateFolder","FoldersEditFolder","FoldersEditFolderFromChatList","FoldersIncludedChats","FoldersIncludedChatsFromChatList","FoldersExcludedChats","FoldersExcludedChatsFromChatList","renderHeaderContent","confirmIsDestructive","currentUser","onScreenSelect","Main","formatPhoneNumberWithCode","phoneNumber","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","debounce","currentUsername","asLink","isUsernameAvailable","checkUsername","setUsername","langPrefix","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","trim","isValid","isUsernameValid","success","readOnly","profileEdit","firstName","currentFirstName","lastName","currentLastName","fullInfo","bio","currentBio","currentAvatarHash","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setFirstName","setLastName","setBio","currentAvatarBlobUrl","ProfileEditProgress","InProgress","isUsernameError","isSaveButtonShown","Complete","handlePhotoChange","newPhoto","handleFirstNameChange","handleLastNameChange","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","UsernameInput","FloatingActionButton","runThrottledForLoadRecommended","orderedIds","orderedFolderIds","foldersById","recommended","recommendedChatFolders","chatFolders","notifySettings","notifyExceptions","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","showDialog","animationData","setAnimationData","isAnimationLoaded","setIsAnimationLoaded","handleAnimationLoad","getAnimationData","then","handleCreateFolder","data","userFolders","folder","subtitle","getFolderDescriptionText","handleCreateFolderFromRecommended","AnimatedSticker","STICKER_SIZE_FOLDER_SETTINGS","noLoop","onLoad","pill","fluid","narrow","multiline","ShowMoreButton","count","itemName","itemPluralName","ERROR_NO_TITLE","loadedActiveChatIds","loadedArchivedChatIds","dispatch","onAddIncludedChats","onAddExcludedChats","onBack","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","folderId","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","Set","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","listType","renderChats","mode","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","find","typeKey","EXCLUDED_CHAT_TYPES","inactive","renderChatType","event","isTouched","folderUpdate","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","onFilterChange","chatTypes","shouldMinimize","hasMaxChats","handleItemClick","newSelectedIds","splice","handleChatTypeClick","newSelectedChatTypes","selectedType","isMinimized","canClose","Checkbox","checked","isSelected","withChatType","archivedPinnedIds","chatFilter","activeChatArrays","prepareChatList","archivedChatArrays","pinnedChats","otherChats","displayedIds","newFilter","handleSelectedIdsChange","ids","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","forEach","shownScreen","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","range","handleChange","trackWidth","possibleValuesLength","option","STICKER_SIZE_PICKER_HEADER","stickerSet","observeIntersection","isIntersecting","useIsIntersecting","mediaHash","lottieData","Lottie","shouldRenderFullMedia","useTransitionForMedia","getFirstLetters","hasThumbnail","stickers","firstSticker","isAnimated","STICKER_SIZE_GENERAL_SETTINGS","StickerButton","sticker","ANIMATION_LEVEL_OPTIONS","stickerSetIds","added","setIds","stickerSetsById","setsById","messageTextSize","messageSendKeyCombo","shouldAutoDownloadMediaFromContacts","shouldAutoDownloadMediaInPrivateChats","shouldAutoDownloadMediaInGroups","shouldAutoDownloadMediaInChannels","shouldAutoPlayGifs","shouldAutoPlayVideos","shouldSuggestStickers","shouldLoopStickers","setSettingOption","loadStickerSets","loadAddedStickers","stickerSettingsRef","observe","observeIntersectionForCovers","useIntersectionObserver","rootRef","isModalOpen","openModal","closeModal","setSticker","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleAnimationLevelChange","newLevel","_","handleMessageTextSizeChange","newSize","documentElement","setProperty","setAttribute","handleStickerSetClick","stickerSets","installedDate","onCheck","isChecked","fromSticker","fileSelector","openSystemFilesDialog","accept","callback","noMultiple","removeAttribute","onchange","click","hex2rgb","param","parseInt","substring","rgb2hex","p0","p1","p2","rgb2hsb","r","g","h","s","v","hsb2rgb","f","p","q","t","getPatternColor","rgbColor","hue","saturation","wallpaper","slug","localMediaHash","previewBlobUrl","thumbRef","useCanvasBlur","thumbnail","dataUri","shouldRenderThumb","isDownloadAllowed","setIsDownloadAllowed","fullMedia","wasDownloadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","handleSelect","blob","fetchBlob","cacheApi","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","files","handleUploadWallpaper","handleSetColor","handleResetToDefault","backgroundColor","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","async","defaultRGB","rgb","canvas","context","getContext","preloadImage","naturalHeight","naturalWidth","offsetWidth","drawImage","getImageData","blockSize","getAverageColor","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","onCapture","onDrag","onRelease","withCursor","hex","hueHex","w","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","data-color","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleContactNotificationChange","volume","hasPassword","isSensitiveEnabled","canChangeSensitive","privacy","blocked","activeSessions","blockedCount","totalCount","sessionsCount","visibilityPrivacyPhoneNumber","visibility","visibilityPrivacyLastSeen","lastSeen","visibilityPrivacyProfilePhoto","profilePhoto","visibilityPrivacyForwarding","forwards","visibilityPrivacyGroupChats","chatInvite","loadPrivacySettings","loadBlockedContacts","loadAuthorizations","loadContentSettings","updateContentSettings","getVisibilityValue","languages","language","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","langCode","setLanguage","currentLangCode","navigator","toLowerCase","shortLangCode","substr","nativeName","buildOptions","loadingOption","getPrivacyKey","screen","privacySettings","allowUserIds","allowChatIds","blockUserIds","blockChatIds","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","reduce","result","membersCount","blockCount","handleVisibilityChange","getLocation","session","region","country","getDeviceEnvironment","deviceModel","platform","systemVersion","terminateAuthorization","terminateAllAuthorizations","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","handleTerminateSessionClick","handleTerminateAllSessions","currentSession","isCurrent","otherSessions","renderSession","handler","dateActive","appName","ip","sessions","chatsByIds","usersByIds","blockedIds","unblockContact","handleUnblockClick","contactId","viewportOffset","isPrivate","CHAT_HEIGHT_PX","renderContact","animatedEmoji","selectAnimatedEmoji","AnimatedEmoji","expectedPassword","submitLabel","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","handleSubmit","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","onChangePasswordVisibility","onStart","FOCUS_DELAY_TIMEOUT_MS","shouldConfirm","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","codeLength","twoFaSettings","waitingEmailCodeLength","newValue","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","handleSelectedContactIdsChange","contactsIds","itemIds","filterPlaceholder","searchInputId","TWO_FA_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","twoFaState","twoFaDispatch","useReducer","handleSaveFilter","renderCurrentSection","isScreenActive","isFrom","currentKey","privacyAllowScreens","isTwoFaScreen","isFoldersScreen","isPrivacyScreen","values","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","contactIds","serverTimeOffset","resultIds","sortUserIds","forceShowSelf","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","isUserBot","canBeInvitedToGroup","handleNextStep","creationProgress","creationError","chatCreation","memberIds","createGroupChat","createChannel","setTitle","about","setAbout","ChatCreationProgress","handleTitleChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","NewChannelStep2","NewGroupStep2","isStepActive","NewChannelStep1","NewGroupStep1","Archived","folderType","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","ArrowLeft","ArrowRight","PageUp","PageDown","End","Home","Tab","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","passive","ontouchmove","onkeydown","enableScrolling","getCopyLabel","hasSelection","MessageContextMenu","anchor","canSendNow","canReschedule","canReply","canEdit","canPin","canUnpin","canForward","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","onReply","onEdit","onPin","onReport","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCloseAnimationEnd","onCopyLink","copyOptions","afterEffect","getMessageText","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","clipboardText","copyTextToClipboard","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","positionY","useContextMenuPosition","Menu","noOptions","isScheduled","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","isMenuOpen","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isCalendarOpen","openCalendar","closeCalendar","closeMenu","closePinModal","handleCloseCalendar","handleReply","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleOpenCalendar","handleRescheduleMessage","scheduledAt","handleCopyLink","abs","reportMessageIds","scheduledMaxDate","getDayStartAt","selectStickerSet","stickerSetId","loadStickers","toggleStickerSet","sendMessage","throttleMs","isDisabled","stickerSetAccessHash","isPreloadedGlobally","handleButtonClick","hasCloseButton","STICKER_SIZE_MODAL","isRestricted","canDeleteChat","getCanDeleteChat","canStartBot","canRestartBot","canSubscribe","canSearch","canMute","canLeave","onSubscribeChannel","onSearchClick","updateChatMutedState","enterMessageSelectMode","sendBotCommand","restartBot","handleStartBot","command","handleRestartBot","handleToggleMuteClick","handleSubscribe","handleSearch","handleSelectMessages","Portal","runDebouncedForSearch","results","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","Array","from","input","div","contentEditable","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","SearchInput","findInViewport","selectorOrElements","margin","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y1","y2","isFullyVisible","setTooltipItemVisible","selector","first","position","fastSmoothScroll","onInsertUserName","filteredUsers","getSelectedIndex","newIndex","cycleRestrict","selectedMentionIndex","setSelectedMentionIndex","handleArrowKey","handleUserSelect","forceFocus","handleSelectMention","member","onUp","onDown","onTab","prevChatMembers","renderedChatMembers","attachments","caption","isReady","groupChatMembers","recentEmojis","baseEmojiKeywords","emojiKeywords","addRecentEmoji","onCaptionUpdate","onFileAppend","onClear","hideTimeoutRef","prevAttachments","renderingAttachments","isHovered","markHovered","unmarkHovered","isQuick","every","quick","isMentionTooltipOpen","mentionFilter","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","sendAttachments","handleFilesDrop","dataTransfer","newFiles","file","CONTENT_TYPES_FOR_QUICK_UPLOAD","has","areAllPhotos","mimeType","areAllVideos","renderHeader","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","data-attach-description","attachment","File","filename","extension","getFileExtension","previewData","emojis","onEmojiSelect","MessageInput","isAttachmentModalInput","html","editableInputId","onUpdate","shouldSetFocus","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","innerHTML","addNewOption","newOptions","list","scrollHeight","scrollTo","behavior","handleCreate","questionTrimmed","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","hidden","emoji","native","names","IS_EMOJI_SUPPORTED","loading","category","allEmojis","useOnIntersect","emojisPerRow","ceil","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","headerRef","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","entries","entry","intersectingWithIndexes","newLeft","HEADER_BUTTON_WIDTH","fastSmoothScrollHorizontal","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","handleEmojiSelect","MENU_TRANSITION_DURATION","containerClassName","faded","STICKER_MARGIN","loadAndPlay","onStickerSelect","onStickerUnfave","stickersPerRow","STICKER_SIZE_PICKER","noAnimate","onUnfaveClick","stickerSetIntersections","favorite","recentStickers","favoriteStickers","addedSetIds","shouldPlay","canSendStickers","loadRecentStickers","loadFavoriteStickers","addRecentSticker","activeSetIndex","setActiveSetIndex","areAddedLoaded","allSets","noPopulatedSets","set","stickerSetEl","handleStickerSelect","handleStickerUnfave","fullClassName","buttonClassName","gif","videoData","shouldRenderVideo","preload","savedGifs","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","SYMBOL_MENU_TAB_ICONS","Emoji","Stickers","GIFs","onRemoveSymbol","onSearchOpen","renderTabButton","handleSearchOpen","isActivated","isLeftColumnShown","allowedAttachmentOptions","setRecentEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","fastRaf","recentEmojisRef","renderContent","onMouseEnter","onMouseLeave","noCloseOnBackdrop","onFileSelect","onPollCreate","handleQuickSelect","handleDocumentSelect","canAttachMedia","canAttachPolls","autoClose","forEmoji","clearStickersForEmoji","prevStickers","displayedStickers","onSilentSend","onScheduleSend","listEmojis","usePrevDuringAnimation","selectedIndex","setSelectedIndex","setItemVisible","emojisCount","handleSelectEmoji","onLeft","onRight","thumbUrl","thumbnailDataUrl","decoding","isForGallery","inlineResult","webThumbnail","STICKER_SIZE_INLINE_BOT_RESULT","botId","isGallery","inlineBotResults","switchPm","loadMore","onSelectResult","handleSelectInlineBotResult","handleSendPm","startParam","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","messagesById","foundResults","senderUser","getGlobal","senderChat","forwardInfo","isChannelPost","orderBy","foundResult","preloadBackwards","LastMessageMeta","selectShouldLoopStickers","isSomeModalOpen","onModalToggle","isAdded","areStickersLoaded","useOnChange","coverStickerIds","covers","otherStickers","handleAddClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","featured","featuredIds","loadFeaturedStickers","setIsModalOpen","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","searchMoreGifs","setGifSearchQuery","getAllowedAttachmentOptions","handleGifClick","hasResults","answer","voters","offsets","pollResults","offset","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","limit","shouldResetVoters","handleViewMoreClick","handleMemberClick","noStatusOrTyping","leftVotersCount","renderViewMoreButton","total","getMessagePoll","resultsByOption","buildCollectionByKey","management","updateContact","deleteUser","deleteHistory","closeManagement","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","withFullInfo","hasLinkedChannel","linkedChatId","isBasicGroup","canChangeInfo","isCreator","getHasAdminRight","canBanUsers","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","currentTitle","currentAbout","imageHash","handleClickEditType","ManagementScreens","ChatPrivacyType","handleClickDiscussion","Discussion","handleClickPermissions","GroupPermissions","handleClickAdministrators","ChatAdministrators","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","GroupMembers","handleTogglePreHistory","isPreHistoryHidden","isEnabled","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembers","handleDeleteGroup","formatInteger","onChatMemberSelect","updateChatDefaultBannedRights","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handleRemovedUsersClick","GroupRemovedUsers","handleAddExceptionClick","GroupUserPermissionsCreate","handleExceptionMemberClick","promotedByUserId","GroupUserPermissions","handlePermissionChange","getUpdatedPermissionValue","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","members","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","sendMessages","blocking","sendMedia","sendPolls","embedLinks","inviteUsers","pinMessages","changeInfo","updateChatMemberBannedRights","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","isSignaturesShown","toggleSignatures","hasLinkedChat","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","ChannelSubscribers","handleDeleteChannel","selectManagement","checkPublicLink","updatePublicLink","updatePrivateLink","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","canUpdate","handleOptionChange","handleSave","handleRevokePrivateLink","langPrefix1","langPrefix2","SafeLink","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","handleUnlinkGroupSessions","channelId","Initial","handleLinkGroupSessions","renderLinkGroupHeader","linkedGroup","renderLinkGroupConfirmText","hasPrivateLink","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","teactOrderKey","isButtonsInOneRow","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","selectedChatMember","handleBanFromGroup","viewMessages","getControlIsDisabled","isOwner","handleAdminMemberClick","ChatAdminRights","getMemberStatus","promotedByUser","GroupRecentActions","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","adminRights","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","addAdmins","anonymous","maxLength","openUserInfo","memberId","managementType","selectCurrentManagementType","CURRENCIES","USD","EUR","GBP","JPY","RUB","UAH","INR","AED","getCurrencySign","currency","VISA","MASTERCARD1","MASTERCARD2","CardType","cards","Default","Visa","Mastercard","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","phone","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","reducer","getBillingCountry","countryCode","countryList","useFocusAfterAnimation","animationDuration","hasArrow","labelText","htmlFor","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handlePhoneChange","handleSaveInfoChange","shippingOptions","handleShippingSelect","amount","renderPaymentItem","main","renderCheckoutItem","invoiceContent","prices","shippingPrices","checkoutInfo","totalPrice","photoUrl","paymentMethod","paymentProvider","shippingAddress","shippingMethod","item","expiryInputRef","charAt","parts","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","savedInfo","invoice","nativeProvider","nativeParams","passwordMissing","payment","isProviderError","nameRequested","phoneRequested","emailRequested","shippingAddressRequested","flexible","phoneToProvider","emailToProvider","globalDialogs","validateRequestedInfo","sendPaymentForm","setPaymentStep","sendCredentialsInfo","clearPaymentError","paymentState","paymentDispatch","currencySign","field","fieldError","errors","getShippingErrors","handleErrorModalClose","PaymentStep","Checkout","shippingOption","getShippingPrices","totalPrices","concat","acc","cur","getTotalPrice","detectCardTypeText","findShippingOption","getCheckoutInfo","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","setStep","nextStep","ShippingInfo","Shipping","PaymentInfo","buttonText","cuurentStep","renderModalContent","renderError","optionId","receipt","mapedPrices","info","totalAmount","credentialsTitle","fullAddress","ANIMATED_STICKERS_PATHS","MonkeyIdle","MonkeyTracking","MonkeyClose","MonkeyPeek","FoldersAll","FoldersNew","DiscussionGroups","path","location","cropperResultOptions","quality","format","circle","Croppie","croppiePromise","cropper","isCroppieReady","setIsCroppieReady","imgFile","cropContainer","enableZoom","boundary","viewport","blobToDataUri","bind","err","DEBUG","console","initCropper","ensureCroppie","croppedImg","blobToFile","selectedFile","setSelectedFile","croppedBlobUrl","setCroppedBlobUrl","labelClassName","URL","revokeObjectURL","createObjectURL","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","STICKER_SIZE","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","closeMonkeyData","setCloseMonkeyData","peekMonkeyData","setPeekMonkeyData","isFirstMonkeyLoaded","setIsFirstMonkeyLoaded","isPeekShown","setIsPeekShown","handleFirstMonkeyLoad","STICKER_SIZE_TWO_FA","playSegment","onInputChange","setPassword","canSubmit","setCanSubmit","select","autoComplete","MIN_PASSWORD_LENGTH"],"mappings":"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","file":"3.33a9836ed01b17d89349.js","sourcesContent":["import { ApiMessage, ApiDimensions } from '../../../api/types';\n\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.active .media-viewer-content img, .active .media-viewer-content video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin === MediaViewerOrigin.ProfileAvatar);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, shouldAppendProfileInfo = false) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (shouldAppendProfileInfo) {\n    ghost.classList.add('ProfileInfo');\n    const profileInfo = document.querySelector('#RightColumn .ProfileInfo .info');\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isElementInViewport(el: HTMLElement) {\n  if (el.style.display === 'none') {\n    return false;\n  }\n\n  const rect = el.getBoundingClientRect();\n  const { height: windowHeight } = windowSize.get();\n\n  return (rect.top <= windowHeight) && ((rect.top + rect.height) >= 0);\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter) {\n    topOffsetRem += mql.matches ? 0.875 : 3.375;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.active > .MessageList #album-media-${message!.id}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${message!.id}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${message!.id}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .ChatInfo .Avatar';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .active .ProfilePhoto';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.active > .MessageList #message${message!.id}`;\n      mediaSelector = '.message-content .full-media, .message-content .thumbnail';\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls && mediaEls[mediaEls.length - 1],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, ApiMessage, ApiUser } from '../../api/types';\n\nimport { getSenderTitle, isChatPrivate } from '../../modules/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: number;\n  messageId?: number;\n  isAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'closeMediaViewer' | 'focusMessage'>;\n\nconst SenderInfo: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId, messageId, sender, isAvatar, message, closeMediaViewer, focusMessage,\n}) => {\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n    focusMessage({ chatId, messageId });\n  }, [chatId, focusMessage, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const isFromChat = sender.id < 0;\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isFromChat ? (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar ? lang('lng_mediaview_profile_photo') : formatMediaDateTime(lang, message!.date * 1000)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    if (isAvatar && chatId) {\n      return {\n        sender: isChatPrivate(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return {};\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['closeMediaViewer', 'focusMessage']),\n)(SenderInfo);\n","import React, { FC, useMemo } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getMessageMediaHash } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport useMediaDownload from '../../hooks/useMediaDownload';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  isZoomed: boolean;\n  message?: ApiMessage;\n  fileName?: string;\n  isAvatar?: boolean;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  onZoomToggle: NoneToVoidFunction;\n};\n\nconst MediaViewerActions: FC<OwnProps> = ({\n  mediaData,\n  isVideo,\n  isZoomed,\n  message,\n  fileName,\n  isAvatar,\n  onCloseMediaViewer,\n  onForward,\n  onZoomToggle,\n}) => {\n  const {\n    isDownloadStarted,\n    downloadProgress,\n    handleDownloadClick,\n  } = useMediaDownload(\n    message && isVideo ? getMessageMediaHash(message, 'download') : undefined,\n    fileName,\n  );\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {!isAvatar && (\n            <MenuItem\n              icon=\"forward\"\n              onClick={onForward}\n            >\n              {lang('Forward')}\n            </MenuItem>\n          )}\n          {isVideo ? (\n            <MenuItem\n              icon={isDownloadStarted ? 'close' : 'download'}\n              onClick={handleDownloadClick}\n            >\n              {isDownloadStarted ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download'}\n            </MenuItem>\n          ) : (\n            <MenuItem\n              icon=\"download\"\n              href={mediaData}\n              download={fileName}\n            >\n              {lang('AccActionDownload')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        {isDownloadStarted && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {!isAvatar && (\n        <>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Forward')}\n            onClick={onForward}\n          >\n            <i className=\"icon-forward\" />\n          </Button>\n        </>\n      )}\n      {isVideo ? (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('AccActionDownload')}\n          onClick={handleDownloadClick}\n        >\n          {isDownloadStarted ? (\n            <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n          ) : (\n            <i className=\"icon-download\" />\n          )}\n        </Button>\n      ) : (\n        <Button\n          href={mediaData}\n          download={fileName}\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('AccActionDownload')}\n        >\n          <i className=\"icon-download\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={isZoomed ? 'Zoom Out' : 'Zoom In'}\n        onClick={onZoomToggle}\n      >\n        <i className={isZoomed ? 'icon-zoom-out' : 'icon-zoom-in'} />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default MediaViewerActions;\n","import React, { FC, useEffect, useState } from '../../lib/teact/teact';\n\nimport { throttle } from '../../util/schedulers';\nimport { TextPart } from '../common/helpers/renderMessageText';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHidden?: boolean;\n  isForVideo: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isHidden, isForVideo, onClick,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {text && (\n        <div className=\"media-viewer-footer-content\" onClick={!IS_SINGLE_COLUMN_LAYOUT ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\nimport { PLATFORM_ENV } from '../util/environment';\n\ntype RefType = {\n  current: HTMLElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreenStatus(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || PLATFORM_ENV === 'iOS')) {\n      return;\n    }\n\n    if (elRef.current.requestFullscreen) {\n      elRef.current.requestFullscreen();\n    } else if (elRef.current.webkitRequestFullscreen) {\n      elRef.current.webkitRequestFullscreen();\n    } else if (elRef.current.webkitEnterFullscreen) {\n      elRef.current.webkitEnterFullscreen();\n    } else if (elRef.current.mozRequestFullScreen) {\n      elRef.current.mozRequestFullScreen();\n    }\n\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.mozCancelFullScreen) {\n      document.mozCancelFullScreen();\n    } else if (document.webkitCancelFullScreen) {\n      document.webkitCancelFullScreen();\n    } else if (document.webkitExitFullscreen) {\n      document.webkitExitFullscreen();\n    }\n\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const listener = () => { setIsFullscreen(Boolean(prop && document[prop])); };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n    const video = elRef.current;\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && PLATFORM_ENV !== 'iOS') {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n\n  return '';\n}\n","const units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'];\n\nexport default (bytes: number) => {\n  const number = bytes === 0 ? 0 : Math.floor(Math.log(bytes) / Math.log(1024));\n\n  return `${(bytes / 1024 ** Math.floor(number)).toFixed(1)} ${units[number]}`;\n};\n","import React, { FC, useState, useEffect } from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport formatFileSize from './helpers/formatFileSize';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './VideoPlayerControls.scss';\n\ntype IProps = {\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceVisible: boolean;\n  isForceMobileVersion?: boolean;\n  isPlayed: boolean;\n  isFullscreenSupported: boolean;\n  isFullscreen: boolean;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: OnChangeHandler;\n};\n\ntype OnChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => void;\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 800;\n\nconst VideoPlayerControls: FC<IProps> = ({\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceVisible,\n  isForceMobileVersion,\n  isPlayed,\n  isFullscreenSupported,\n  isFullscreen,\n  onChangeFullscreen,\n  onPlayPause,\n  onSeek,\n}) => {\n  const [isVisible, setVisibility] = useState(true);\n\n  useEffect(() => {\n    if (isForceVisible) {\n      setVisibility(isForceVisible);\n    }\n  }, [isForceVisible]);\n\n  useEffect(() => {\n    let timeout: number | undefined;\n\n    if (!isForceVisible) {\n      if (IS_SINGLE_COLUMN_LAYOUT) {\n        setVisibility(false);\n      } else {\n        timeout = window.setTimeout(() => {\n          setVisibility(false);\n        }, HIDE_CONTROLS_TIMEOUT_MS);\n      }\n    }\n\n    return () => {\n      if (timeout) {\n        window.clearTimeout(timeout);\n      }\n    };\n  }, [isForceVisible]);\n\n  useEffect(() => {\n    if (isVisible || isForceVisible) {\n      document.body.classList.add('video-controls-visible');\n    }\n\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isForceVisible, isVisible]);\n\n  const lang = useLang();\n\n  if (!isVisible && !isForceVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className={`VideoPlayerControls ${isForceMobileVersion ? 'mobile' : ''}`} onClick={stopEvent}>\n      {renderSeekLine(currentTime, duration, bufferedProgress, onSeek)}\n      <Button\n        ariaLabel={lang('AccActionPlay')}\n        size=\"tiny\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent-white\"\n        className=\"play\"\n        onClick={onPlayPause}\n      >\n        <i className={isPlayed ? 'icon-pause' : 'icon-play'} />\n      </Button>\n      {renderTime(currentTime, duration)}\n      {bufferedProgress < 1 && renderFileSize(bufferedProgress, fileSize)}\n      {isFullscreenSupported && (\n        <Button\n          ariaLabel=\"Fullscreen\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"fullscreen\"\n          onClick={onChangeFullscreen}\n        >\n          <i className={`${isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'}`} />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderFileSize(downloadedPercent: number, totalSize: number) {\n  return (\n    <div className=\"player-file-size\">\n      {`${formatFileSize(totalSize * downloadedPercent)} / ${formatFileSize(totalSize)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(currentTime: number, duration: number, bufferedProgress: number, onSeek: OnChangeHandler) {\n  const percentagePlayed = (currentTime / duration) * 100;\n  const percentageBuffered = bufferedProgress * 100;\n\n  return (\n    <div className=\"player-seekline\">\n      <div className=\"player-seekline-track\">\n        <div\n          className=\"player-seekline-buffered\"\n          // @ts-ignore teact feature\n          style={`width: ${percentageBuffered || 0}%`}\n        />\n        <div\n          className=\"player-seekline-played\"\n          // @ts-ignore teact feature\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n        <input\n          min=\"0\"\n          max=\"100\"\n          step={0.01}\n          type=\"range\"\n          onInput={onSeek}\n          className=\"player-seekline-input\"\n          value={percentagePlayed || 0}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreenStatus from '../../hooks/useFullscreen';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport safePlay from '../../util/safePlay';\n\nimport VideoPlayerControls from './VideoPlayerControls';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport Button from '../ui/Button';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  downloadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  downloadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  onClose,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlayed, setIsPlayed] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [isControlsVisible, setIsControlsVisible] = useState(true);\n\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreenStatus(videoRef, setIsPlayed);\n\n  const { isBuffered, bufferedProgress, bufferingHandlers } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlayed && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlayed(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlayed) {\n      videoRef.current!.pause();\n      setIsPlayed(false);\n    } else {\n      videoRef.current!.play();\n      setIsPlayed(true);\n    }\n  }, [isPlayed]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleMouseOver = useCallback(() => {\n    setIsControlsVisible(true);\n  }, []);\n\n  const handleMouseOut = useCallback(() => {\n    setIsControlsVisible(false);\n  }, []);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlayed(false);\n  }, []);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    e.stopPropagation();\n\n    videoRef.current!.currentTime = (Number(e.target.value) * videoRef.current!.duration) / 100;\n  }, []);\n\n  const toggleControls = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    setIsControlsVisible(!isControlsVisible);\n  }, [isControlsVisible]);\n\n  useEffect(() => {\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onClick={!isGif && IS_SINGLE_COLUMN_LAYOUT ? toggleControls : undefined}\n      onMouseOver={!isGif ? handleMouseOver : undefined}\n      onMouseOut={!isGif ? handleMouseOut : undefined}\n    >\n      <div\n        // @ts-ignore\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          playsInline\n          loop={isGif}\n          // This is to force auto playing on mobiles\n          muted={isGif}\n          id=\"media-viewer-video\"\n          // @ts-ignore\n          style={videoStyle}\n          onEnded={handleEnded}\n          onClick={!IS_SINGLE_COLUMN_LAYOUT ? togglePlayState : undefined}\n          onDoubleClick={handleFullscreenChange}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : downloadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlayed={isPlayed}\n          bufferedProgress={bufferedProgress}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={videoRef.current ? videoRef.current.duration : 0}\n          isForceVisible={!isPlayed || isControlsVisible}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPlayPause={togglePlayState}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ZoomControls.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onChangeZoom: (level: number, canCloseZoom?: boolean) => void;\n};\n\nexport const MAX_ZOOM_LEVEL = 3;\nexport const MIN_ZOOM_LEVEL = 1;\nconst ONE_STEP_PERCENT = 100 / (MAX_ZOOM_LEVEL - MIN_ZOOM_LEVEL);\nconst RESET_ZOOM_LEVEL = 1.5;\n\nconst ZoomControls: FC<OwnProps> = ({ isShown, onChangeZoom }) => {\n  const { transitionClassNames } = useShowTransition(isShown);\n  const prevIsShown = usePrevious<boolean>(isShown);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [zoomLevel, setZoomLevel] = useState(1);\n  const isSeeking = useRef<boolean>(false);\n\n  useEffect(() => {\n    if (isShown && !prevIsShown) {\n      setZoomLevel(RESET_ZOOM_LEVEL);\n    }\n  }, [isShown, prevIsShown]);\n\n  const handleZoomOut = () => {\n    if (inputRef.current) {\n      setZoomLevel(Math.max(MIN_ZOOM_LEVEL, zoomLevel - 0.5));\n    }\n  };\n\n  const handleZoomIn = () => {\n    if (inputRef.current) {\n      setZoomLevel(Math.min(MAX_ZOOM_LEVEL, zoomLevel + 0.5));\n    }\n  };\n\n  const handleStartSeek = useCallback(() => {\n    isSeeking.current = true;\n  }, []);\n\n  const handleStopSeek = useCallback(() => {\n    isSeeking.current = false;\n    if (zoomLevel === 1) {\n      onChangeZoom(zoomLevel, !isSeeking.current);\n    }\n  }, [onChangeZoom, zoomLevel]);\n\n  const handleSeeklineChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n    setZoomLevel(Math.min(MAX_ZOOM_LEVEL, Math.max(Number(e.target.value), MIN_ZOOM_LEVEL)));\n  };\n\n  useEffect(() => {\n    onChangeZoom(zoomLevel, !isSeeking.current);\n  }, [zoomLevel, onChangeZoom]);\n\n  const lang = useLang();\n\n  const className = buildClassName(\n    'ZoomControls',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className}>\n      <Button\n        disabled={zoomLevel === MIN_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel={lang('ZoomOut')}\n        className=\"zoom-out\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        disabled={zoomLevel === MAX_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel=\"Zoom In\"\n        className=\"zoom-in\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      <div className=\"seekline\">\n        <div className=\"seekline-track\">\n          <div\n            className=\"seekline-played\"\n            // @ts-ignore teact feature\n            style={`width: ${(zoomLevel - 1) * ONE_STEP_PERCENT}%`}\n          />\n          <input\n            ref={inputRef}\n            min={MIN_ZOOM_LEVEL}\n            max={MAX_ZOOM_LEVEL}\n            step=\"0.5\"\n            value={zoomLevel}\n            type=\"range\"\n            className=\"seekline-input\"\n            onChange={handleSeeklineChange}\n            onMouseDown={handleStartSeek}\n            onMouseUp={handleStopSeek}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ZoomControls);\n","/*\n  @source https://github.com/ajainarayanan/react-pan-zoom\n\n  Heavily inspired/lifted from this idea: https://stackoverflow.com/a/39311435/661768\n  without jqueryUI or jquery dependency.\n*/\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { areSortedArraysEqual } from '../../util/iteratees';\n\nimport './PanZoom.scss';\n\nexport interface IDragData {\n  x: number;\n  y: number;\n  dx: number;\n  dy: number;\n}\n\nexport interface OwnProps {\n  children: any;\n  className?: string;\n  noWrap: boolean;\n  canPan: boolean;\n  zoomLevel: number;\n  panDeltaX: number;\n  panDeltaY: number;\n  onPan?: (x: number, y: number) => void;\n}\n\nconst INITIAL_MATRIX = [\n  1, 0, 0, 1, 0, 0,\n];\n\nconst SCALE_VALUES = {\n  1: 1,\n  1.5: 1.5,\n  2: 2.2,\n  2.5: 3.3,\n  3: 5.5,\n};\n\nconst ZOOM_SAFE_AREA = 150;\n\nfunction calculateSafeZoneOnZoom(oldScale: number, matrixData: number[], wrapper: HTMLDivElement | null) {\n  const image = wrapper && wrapper.querySelector('.active img');\n  if (!wrapper || !image) {\n    return matrixData;\n  }\n  const wrapperRect = wrapper.getBoundingClientRect();\n  const imageRect = image.getBoundingClientRect();\n\n  const newImgWidth = (imageRect.width / oldScale) * matrixData[0];\n  const newImgHeight = (imageRect.height / oldScale) * matrixData[3];\n  const newImgX = (wrapperRect.width - newImgWidth) / 2 + matrixData[4];\n  const newImgY = (wrapperRect.height - newImgHeight) / 2 + matrixData[5];\n  if (wrapperRect.width && wrapperRect.width - ZOOM_SAFE_AREA < newImgX) {\n    matrixData[4] -= newImgX + wrapperRect.width - ZOOM_SAFE_AREA;\n  } else if (newImgWidth && newImgWidth + newImgX < ZOOM_SAFE_AREA) {\n    matrixData[4] -= newImgWidth + newImgX - ZOOM_SAFE_AREA;\n  }\n  if (wrapperRect.height && wrapperRect.height - ZOOM_SAFE_AREA < newImgY) {\n    matrixData[5] -= newImgY + wrapperRect.height - ZOOM_SAFE_AREA;\n  } else if (newImgHeight && newImgHeight + newImgY < ZOOM_SAFE_AREA) {\n    matrixData[5] -= newImgHeight + newImgY - ZOOM_SAFE_AREA;\n  }\n\n  return matrixData;\n}\n\nconst PanZoom: FC<OwnProps> = ({\n  children,\n  className,\n  noWrap,\n  canPan,\n  zoomLevel,\n  panDeltaX,\n  panDeltaY,\n  onPan,\n}) => {\n  const tunedZoomLevel = SCALE_VALUES[zoomLevel as keyof typeof SCALE_VALUES] || zoomLevel;\n  const [isDragging, setIsDragging] = useState<boolean>(false);\n  const [dragData, setDragData] = useState<IDragData>({\n    dx: panDeltaX, dy: panDeltaY, x: 0, y: 0,\n  });\n  // [zoom, skew, skew, zoom, dx, dy] - see https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix()\n  const [matrixData, setMatrixData] = useState<number[]>(INITIAL_MATRIX);\n  // Used to set cursor while moving.\n  // eslint-disable-next-line no-null/no-null\n  const panWrapperRef = useRef<HTMLDivElement>(null);\n  // Used to set transform for pan.\n  // eslint-disable-next-line no-null/no-null\n  const panContainerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const newZoomLevel = tunedZoomLevel || matrixData[0];\n    const newPandx = panDeltaX || matrixData[4];\n    const newPandy = panDeltaY || matrixData[5];\n\n    const newMatrixData = [...matrixData];\n    if (matrixData[0] !== newZoomLevel) {\n      newMatrixData[0] = newZoomLevel || newMatrixData[0];\n      newMatrixData[3] = newZoomLevel || newMatrixData[3];\n    }\n    if (matrixData[4] !== newPandx) {\n      newMatrixData[4] = newPandx;\n    }\n    if (matrixData[5] !== newPandy) {\n      newMatrixData[5] = newPandy;\n    }\n\n    if (!areSortedArraysEqual(matrixData, newMatrixData)) {\n      setMatrixData(calculateSafeZoneOnZoom(matrixData[0], newMatrixData, panWrapperRef.current));\n    }\n    // eslint-disable-next-line\n  }, [panDeltaX, panDeltaY, tunedZoomLevel]);\n\n  useEffect(() => {\n    if (!canPan) {\n      setMatrixData(INITIAL_MATRIX);\n    }\n  }, [canPan]);\n\n  useEffect(() => {\n    if (panContainerRef.current) {\n      panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n    }\n  }, [noWrap, matrixData]);\n\n  const handleMouseDown = (e: React.MouseEvent<EventTarget>) => {\n    if (!canPan) {\n      return;\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n\n    const offsetX = matrixData[4];\n    const offsetY = matrixData[5];\n    const newDragData: IDragData = {\n      dx: offsetX,\n      dy: offsetY,\n      x: e.pageX,\n      y: e.pageY,\n    };\n    setDragData(newDragData);\n    setIsDragging(true);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.add('move');\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.remove('move');\n    }\n\n    if (onPan) {\n      onPan(matrixData[4], matrixData[5]);\n    }\n  };\n\n  function getNewMatrixData(x: number, y: number): number[] {\n    const newMatrixData = [...matrixData];\n    const deltaX = dragData.x - x;\n    const deltaY = dragData.y - y;\n    newMatrixData[4] = dragData.dx - deltaX;\n    newMatrixData[5] = dragData.dy - deltaY;\n\n    return newMatrixData;\n  }\n\n  const handleMouseMove = (e: React.MouseEvent<EventTarget>) => {\n    if (isDragging) {\n      const newMatrixData = getNewMatrixData(e.pageX, e.pageY);\n      setMatrixData(newMatrixData);\n\n      if (panContainerRef.current) {\n        panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n      }\n    }\n  };\n\n  if (noWrap) {\n    return children;\n  }\n\n  return (\n    <div\n      ref={panWrapperRef}\n      className={`pan-wrapper ${className || ''}`}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onMouseMove={handleMouseMove}\n    >\n      <div\n        ref={panContainerRef}\n        className=\"pan-container\"\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PanZoom);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiChat, ApiMediaFormat, ApiMessage, ApiUser, ApiDimensions,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport windowSize from '../../util/windowSize';\nimport {\n  AVATAR_FULL_DIMENSIONS,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  calculateMediaViewerDimensions,\n} from '../common/helpers/mediaDimensions';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  getChatAvatarHash,\n  getChatMediaMessageIds,\n  getMessageFileName,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageDocument,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  getPhotoFullDimensions,\n  getVideoDimensions, getMessageFileSize,\n} from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaWithDownloadProgress from '../../hooks/useMediaWithDownloadProgress';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport usePrevious from '../../hooks/usePrevious';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Spinner from '../ui/Spinner';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport SenderInfo from './SenderInfo';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\nimport ZoomControls from './ZoomControls';\nimport PanZoom from './PanZoom';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: number;\n  threadId?: number;\n  messageId?: number;\n  senderId?: number;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  profilePhotoIndex?: number;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  animationLevel: 0 | 1 | 2;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openMediaViewer' | 'closeMediaViewer' | 'openForwardMenu' | 'focusMessage'>;\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageId,\n  senderId,\n  origin,\n  avatarOwner,\n  profilePhotoIndex,\n  message,\n  chatMessages,\n  collectionIds,\n  openMediaViewer,\n  closeMediaViewer,\n  openForwardMenu,\n  focusMessage,\n  animationLevel,\n}) => {\n  const isOpen = Boolean(avatarOwner || messageId);\n\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  /* Content */\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isAvatar = Boolean(avatarOwner);\n\n  /* Navigation */\n  const isSingleSlide = Boolean(webPagePhoto || webPageVideo);\n  const messageIds = useMemo(() => {\n    return isSingleSlide && messageId\n      ? [messageId]\n      : getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n  }, [isSingleSlide, messageId, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaMessageIndex = messageId ? messageIds.indexOf(messageId) : -1;\n  const isFirst = selectedMediaMessageIndex === 0 || selectedMediaMessageIndex === -1;\n  const isLast = selectedMediaMessageIndex === messageIds.length - 1 || selectedMediaMessageIndex === -1;\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<number | undefined>(senderId);\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaMessageIndex;\n  }\n  const slideAnimation = animationLevel >= 1 ? 'mv-slide' : 'none';\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2;\n\n  /* Controls */\n  const [isFooterHidden, setIsFooterHidden] = useState<boolean>(false);\n  const [canPanZoomWrap, setCanPanZoomWrap] = useState(false);\n  const [isZoomed, setIsZoomed] = useState<boolean>(false);\n  const [zoomLevel, setZoomLevel] = useState<number>(1);\n  const [panDelta, setPanDelta] = useState({ x: 0, y: 0 });\n\n  /* Media data */\n  function getMediaHash(isFull?: boolean) {\n    if (isAvatar && profilePhotoIndex !== undefined) {\n      const { photos } = avatarOwner!;\n      return photos && photos[profilePhotoIndex]\n        ? `photo${photos[profilePhotoIndex].id}?size=c`\n        : getChatAvatarHash(avatarOwner!, isFull ? 'big' : 'normal');\n    }\n\n    return message && getMessageMediaHash(message, isFull ? 'viewerFull' : 'viewerPreview');\n  }\n\n  const blobUrlPictogram = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const previewMediaHash = getMediaHash();\n  const blobUrlPreview = useMedia(\n    previewMediaHash,\n    undefined,\n    isAvatar && previewMediaHash && previewMediaHash.startsWith('profilePhoto')\n      ? ApiMediaFormat.DataUri\n      : ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const { mediaData: fullMediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaData)) || blobUrlPreview || blobUrlPictogram;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const fileName = message\n    ? getMessageFileName(message)\n    : isAvatar\n      ? `avatar${avatarOwner!.id}-${profilePhotoIndex}.jpg`\n      : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = AVATAR_FULL_DIMENSIONS;\n  }\n\n  useEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return;\n    }\n\n    document.body.classList.toggle('is-media-viewer-open', isOpen);\n  }, [isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevOrigin = usePrevious(origin);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && !prevMessage && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      const textParts = message ? renderMessageText(message) : undefined;\n      const hasFooter = Boolean(textParts);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo,\n  ]);\n\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (isZoomed) {\n      setCanPanZoomWrap(true);\n    } else {\n      timer = window.setTimeout(() => {\n        setCanPanZoomWrap(false);\n      }, ANIMATION_DURATION);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [isZoomed]);\n\n  const closeZoom = () => {\n    setIsZoomed(false);\n    setZoomLevel(1);\n    setPanDelta({ x: 0, y: 0 });\n  };\n\n  const handleZoomToggle = useCallback(() => {\n    setIsZoomed(!isZoomed);\n    setZoomLevel(!isZoomed ? 1.5 : 1);\n    if (isZoomed) {\n      setPanDelta({ x: 0, y: 0 });\n    }\n  }, [isZoomed]);\n\n  const handleZoomValue = useCallback((level: number, canCloseZoom = false) => {\n    setZoomLevel(level);\n    if (level === 1 && canCloseZoom) {\n      closeZoom();\n    }\n  }, []);\n\n  const close = useCallback(() => {\n    closeMediaViewer();\n    closeZoom();\n  }, [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    close();\n    focusMessage({ chatId, threadId, messageId });\n  }, [close, chatId, threadId, focusMessage, messageId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    closeZoom();\n  }, [openForwardMenu, chatId, messageId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    if (isZoomed) {\n      closeZoom();\n    } else {\n      close();\n    }\n  }) : undefined), [close, isOpen, isZoomed]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  // Prevent refresh when rotating device to watch a video\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  const getMessageId = useCallback((fromId: number, direction: number): number => {\n    let index = messageIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < messageIds.length - 1)) {\n      index += direction;\n    }\n\n    return messageIds[index];\n  }, [messageIds]);\n\n  const selectPreviousMedia = useCallback(() => {\n    if (isFirst) {\n      return;\n    }\n\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: messageId ? getMessageId(messageId, -1) : undefined,\n      origin,\n    });\n  }, [chatId, threadId, getMessageId, isFirst, messageId, openMediaViewer, origin]);\n\n  const selectNextMedia = useCallback(() => {\n    if (isLast) {\n      return;\n    }\n\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: messageId ? getMessageId(messageId, 1) : undefined,\n      origin,\n    });\n  }, [chatId, threadId, getMessageId, isLast, messageId, openMediaViewer, origin]);\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          selectPreviousMedia();\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          selectNextMedia();\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  });\n\n  // Support for swipe gestures and closing on click\n  useEffect(() => {\n    const element = document.querySelector<HTMLDivElement>('.slide-container > .active, .slide-container > .to');\n    if (!element) {\n      return undefined;\n    }\n\n    const shouldCloseOnVideo = isGif && !IS_IOS;\n\n    return captureEvents(element, {\n      // eslint-disable-next-line max-len\n      excludedClosestSelector: `.backdrop, .navigation, .media-viewer-head, .media-viewer-footer${!shouldCloseOnVideo ? ', .VideoPlayer' : ''}`,\n      onClick: () => {\n        if (!isZoomed && !IS_TOUCH_ENV) {\n          close();\n        }\n      },\n      onSwipe: IS_TOUCH_ENV ? (e, direction) => {\n        if (direction === SwipeDirection.Right) {\n          selectPreviousMedia();\n        } else if (direction === SwipeDirection.Left) {\n          selectNextMedia();\n        } else if (!(e.target && (e.target as HTMLElement).closest('.MediaViewerFooter'))) {\n          close();\n        }\n      } : undefined,\n    });\n  }, [close, isFooterHidden, isGif, isPhoto, isZoomed, selectNextMedia, selectPreviousMedia]);\n\n  const handlePan = useCallback((x: number, y: number) => {\n    setPanDelta({ x, y });\n  }, []);\n\n  const handleToggleFooterVisibility = useCallback(() => {\n    if (IS_TOUCH_ENV && (isPhoto || isGif)) {\n      setIsFooterHidden(!isFooterHidden);\n    }\n  }, [isFooterHidden, isGif, isPhoto]);\n\n  const lang = useLang();\n\n  useHistoryBack(isOpen, closeMediaViewer, openMediaViewer, {\n    chatId,\n    threadId,\n    messageId,\n    origin,\n    avatarOwnerId: avatarOwner && avatarOwner.id,\n  });\n\n  function renderSlide(isActive: boolean) {\n    if (isAvatar) {\n      return (\n        <div key={chatId} className=\"media-viewer-content\">\n          {renderPhoto(\n            fullMediaData || blobUrlPreview,\n            calculateMediaViewerDimensions(AVATAR_FULL_DIMENSIONS, false),\n            !IS_SINGLE_COLUMN_LAYOUT && !isZoomed,\n          )}\n        </div>\n      );\n    } else if (message) {\n      const textParts = renderMessageText(message);\n      const hasFooter = Boolean(textParts);\n\n      return (\n        <div\n          key={messageId}\n          className={`media-viewer-content ${hasFooter ? 'has-footer' : ''}`}\n          onClick={handleToggleFooterVisibility}\n        >\n          {isPhoto && renderPhoto(\n            localBlobUrl || fullMediaData || blobUrlPreview || blobUrlPictogram,\n            message && calculateMediaViewerDimensions(dimensions!, hasFooter),\n            !IS_SINGLE_COLUMN_LAYOUT && !isZoomed,\n          )}\n          {isVideo && (\n            <VideoPlayer\n              key={messageId}\n              url={localBlobUrl || fullMediaData}\n              isGif={isGif}\n              posterData={bestImageData}\n              posterSize={message && calculateMediaViewerDimensions(dimensions!, hasFooter, true)}\n              downloadProgress={downloadProgress}\n              fileSize={videoSize!}\n              isMediaViewerOpen={isOpen}\n              noPlay={!isActive}\n              onClose={close}\n            />\n          )}\n          {textParts && (\n            <MediaViewerFooter\n              text={textParts}\n              onClick={handleFooterClick}\n              isHidden={isFooterHidden && (!isVideo || isGif)}\n              isForVideo={isVideo && !isGif}\n            />\n          )}\n        </div>\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderSenderInfo() {\n    return isAvatar ? (\n      <SenderInfo\n        key={avatarOwner!.id}\n        chatId={avatarOwner!.id}\n        isAvatar\n      />\n    ) : (\n      <SenderInfo\n        key={messageId}\n        chatId={chatId}\n        messageId={messageId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      className={isZoomed ? 'zoomed' : ''}\n      isOpen={isOpen}\n    >\n      {() => (\n        <>\n          <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {IS_SINGLE_COLUMN_LAYOUT && (\n              <Button\n                className=\"media-viewer-close\"\n                round\n                size=\"smaller\"\n                color=\"translucent-white\"\n                ariaLabel={lang('Close')}\n                onClick={close}\n              >\n                <i className=\"icon-close\" />\n              </Button>\n            )}\n            <Transition activeKey={animationKey.current!} name={headerAnimation}>\n              {renderSenderInfo}\n            </Transition>\n            <MediaViewerActions\n              mediaData={fullMediaData || blobUrlPreview}\n              isVideo={isVideo}\n              isZoomed={isZoomed}\n              message={message}\n              fileName={fileName}\n              onCloseMediaViewer={close}\n              onForward={handleForward}\n              onZoomToggle={handleZoomToggle}\n              isAvatar={isAvatar}\n            />\n          </div>\n          <PanZoom\n            noWrap={!canPanZoomWrap}\n            canPan={isZoomed}\n            panDeltaX={panDelta.x}\n            panDeltaY={panDelta.y}\n            zoomLevel={zoomLevel}\n            onPan={handlePan}\n          >\n            <Transition\n              className=\"slide-container\"\n              activeKey={selectedMediaMessageIndex}\n              name={slideAnimation}\n            >\n              {renderSlide}\n            </Transition>\n          </PanZoom>\n          {!isFirst && (\n            <button\n              type=\"button\"\n              className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n              aria-label={lang('AccDescrPrevious')}\n              dir={lang.isRtl ? 'rtl' : undefined}\n              onClick={selectPreviousMedia}\n            />\n          )}\n          {!isLast && (\n            <button\n              type=\"button\"\n              className={`navigation next ${isVideo && !isGif && 'inline'}`}\n              aria-label={lang('Next')}\n              dir={lang.isRtl ? 'rtl' : undefined}\n              onClick={selectNextMedia}\n            />\n          )}\n          <ZoomControls\n            isShown={isZoomed}\n            onChangeZoom={handleZoomValue}\n          />\n        </>\n      )}\n    </ShowTransition>\n  );\n};\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean) {\n  return blobUrl\n    ? (\n      <img\n        src={blobUrl}\n        alt=\"\"\n        // @ts-ignore teact feature\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n        draggable={Boolean(canDrag)}\n      />\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        // @ts-ignore teact feature\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n    } = global.mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && messageId)) {\n        return { animationLevel };\n      }\n\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message) {\n        return { animationLevel };\n      }\n\n      return {\n        chatId,\n        messageId,\n        senderId: message.senderId,\n        origin,\n        message,\n        animationLevel,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        messageId: -1,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        profilePhotoIndex: profilePhotoIndex || 0,\n        animationLevel,\n        origin,\n      };\n    }\n\n    if (!(chatId && threadId && messageId)) {\n      return { animationLevel };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, messageId);\n    } else {\n      message = selectChatMessage(global, chatId, messageId);\n    }\n\n    if (!message) {\n      return { animationLevel };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      senderId: message.senderId,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openMediaViewer', 'closeMediaViewer', 'openForwardMenu', 'focusMessage',\n  ]),\n)(MediaViewer));\n","import React, {\n  FC, useMemo, useState, memo, useRef, useEffect, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  getCanPostInChat, getChatTitle, isChatPrivate, sortChatIds,\n} from '../../modules/helpers';\nimport searchWords from '../../util/searchWords';\nimport { pick, unique } from '../../util/iteratees';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './ForwardPicker.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  pinnedIds?: number[];\n  activeListIds?: number[];\n  archivedListIds?: number[];\n  orderedPinnedIds?: number[];\n  currentUserId?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setForwardChatId' | 'exitForwardMode' | 'loadMoreChats'>;\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\nconst MODAL_HIDE_DELAY_MS = 300;\n\nconst ForwardPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatsById,\n  pinnedIds,\n  activeListIds,\n  archivedListIds,\n  currentUserId,\n  isOpen,\n  setForwardChatId,\n  exitForwardMode,\n  loadMoreChats,\n}) => {\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (isOpen) {\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        setTimeout(() => {\n          requestAnimationFrame(() => {\n            if (inputRef.current) {\n              inputRef.current.focus();\n            }\n          });\n        }, FOCUS_DELAY_MS);\n      }\n    } else {\n      if (inputRef.current) {\n        inputRef.current.blur();\n      }\n\n      setTimeout(() => {\n        setFilter('');\n      }, MODAL_HIDE_DELAY_MS);\n    }\n  }, [isOpen]);\n\n  const chatIds = useMemo(() => {\n    const listIds = [\n      ...activeListIds || [],\n      ...archivedListIds || [],\n    ];\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    return sortChatIds([\n      ...listIds.filter((id) => {\n        const chat = chatsById[id];\n        if (!chat) {\n          return true;\n        }\n\n        if (!getCanPostInChat(chat, MAIN_THREAD_ID)) {\n          return false;\n        }\n\n        if (!filter) {\n          return true;\n        }\n\n        return searchWords(getChatTitle(lang, chatsById[id], undefined, id === currentUserId), filter);\n      }),\n    ], chatsById, undefined, priorityIds);\n  }, [activeListIds, archivedListIds, chatsById, currentUserId, filter, lang, pinnedIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(loadMoreChats, chatIds, Boolean(filter));\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFilter(e.currentTarget.value);\n  }, []);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      setForwardChatId({ id: viewportIds[index === -1 ? 0 : index] });\n    }\n  }, '.ListItem-button', true);\n\n  const modalHeader = (\n    <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel={lang('Close')}\n        onClick={exitForwardMode}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <InputText\n        ref={inputRef}\n        value={filter}\n        onChange={handleFilterChange}\n        onKeyDown={handleKeyDown}\n        placeholder={lang('ForwardTo')}\n      />\n    </div>\n  );\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={exitForwardMode}\n      className=\"ForwardPicker\"\n      header={modalHeader}\n    >\n      {viewportIds && viewportIds.length ? (\n        <InfiniteScroll\n          className=\"picker-list custom-scroll\"\n          items={viewportIds}\n          onLoadMore={getMore}\n          noScrollRestore={Boolean(filter)}\n          ref={containerRef}\n          onKeyDown={handleKeyDown}\n        >\n          {viewportIds.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable force-rounded-corners\"\n              onClick={() => setForwardChatId({ id })}\n            >\n              {isChatPrivate(id) ? (\n                <PrivateChatInfo status={id === currentUserId ? lang('SavedMessagesInfo') : undefined} userId={id} />\n              ) : (\n                <GroupChatInfo chatId={id} />\n              )}\n            </ListItem>\n          ))}\n        </InfiniteScroll>\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\">Sorry, nothing found.</p>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      pinnedIds: orderedPinnedIds.active,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      currentUserId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setForwardChatId', 'exitForwardMode', 'loadMoreChats']),\n)(ForwardPicker));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiError, ApiInviteInfo } from '../../api/types';\n\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport renderText from '../common/helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './Dialogs.scss';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo)[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'dismissDialog' | 'acceptInviteConfirmation'>;\n\nconst Dialogs: FC<StateProps & DispatchProps> = ({ dialogs, dismissDialog, acceptInviteConfirmation }) => {\n  const lang = useLang();\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, participantsCount, isChannel,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      dismissDialog();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n\n    return (\n      <Modal\n        isOpen\n        onClose={dismissDialog}\n        className=\"error\"\n        title={title}\n      >\n        {participantsCount !== undefined && <p>{participantsText}</p>}\n        <Button isText className=\"confirm-dialog-button\" onClick={handleJoinClick}>{joinText}</Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={dismissDialog}>{lang('Cancel')}</Button>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen\n        onClose={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error) : renderText(error.message!, ['emoji', 'br'])}\n        <div>\n          <Button isText onClick={dismissDialog}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return (\n    <div id=\"Dialogs\">\n      {dialogs.map(renderDialog)}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['dialogs']),\n  (setGlobal, actions): DispatchProps => pick(actions, ['dismissDialog', 'acceptInviteConfirmation']),\n)(Dialogs));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiNotification } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\n\nimport Notification from '../ui/Notification';\nimport renderText from '../common/helpers/renderText';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'dismissNotification'>;\n\nconst Notifications: FC<StateProps & DispatchProps> = ({ notifications, dismissNotification }) => {\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({ message }) => (\n        <Notification\n          message={renderText(message, ['emoji', 'br', 'links', 'simple_markdown'])}\n          onDismiss={dismissNotification}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['notifications']),\n  (setGlobal, actions): DispatchProps => pick(actions, ['dismissNotification']),\n)(Notifications));\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'toggleSafeLinkModal'>;\n\nconst SafeLinkModal: FC<OwnProps & DispatchProps> = ({ url, toggleSafeLinkModal }) => {\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(url);\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, ['toggleSafeLinkModal']),\n)(SafeLinkModal));\n","import React, {\n  FC, memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString } from '../../util/dateFormat';\nimport useLang, { LangFn } from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nexport type OwnProps = {\n  selectedAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n  const defaultSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const maxDate = maxAt ? new Date(maxAt) : undefined;\n  const prevIsOpen = usePrevious(isOpen);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(defaultSelectedDate);\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(defaultSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(defaultSelectedDate.getMinutes()),\n  );\n\n  const currentYear = selectedDate.getFullYear();\n  const currentMonth = selectedDate.getMonth();\n  const currentDate = selectedDate.getDate();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(defaultSelectedDate);\n    }\n  }, [isOpen, defaultSelectedDate, prevIsOpen]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const calendarGrid = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  function handlePrevMonth() {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n\n      return dateCopy;\n    });\n  }\n\n  function handleSubmit() {\n    onSubmit(selectedDate);\n  }\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${selectedDate.getMonth() + 1}`)}\n            {' '}\n            {selectedDate.getFullYear()}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {calendarGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, isFutureMode ? now : undefined, isPastMode ? now : maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                gridDate === currentDate && 'selected',\n              )}\n            >\n              {!!gridDate && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {withTimePicker ? formatSubmitLabel(lang, selectedDate) : submitButtonLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const grid: number[] = [];\n\n  const date = new Date();\n  date.setFullYear(year);\n  date.setMonth(month);\n  date.setDate(1);\n\n  const monthStartDay = date.getDay() || 7;\n  // Fill empty cells\n  for (let i = 1; i < monthStartDay; i++) {\n    grid.push(0);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    grid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  return grid;\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day, 0, 0, 0, 0);\n  const fixedMinDate = minDate && new Date(minDate.getFullYear(), minDate.getMonth(), minDate.getDate(), 0, 0, 0, 0);\n  const fixedMaxDate = maxDate && new Date(maxDate.getFullYear(), maxDate.getMonth(), maxDate.getDate(), 0, 0, 0, 0);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(date)]);\n}\n\nexport default memo(CalendarModal);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchMessagesByDate' | 'closeHistoryCalendar'>;\n\nconst HistoryCalendar: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen, selectedAt, searchMessagesByDate, closeHistoryCalendar,\n}) => {\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      selectedAt: global.historyCalendarSelectedAt,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesByDate', 'closeHistoryCalendar',\n  ]),\n)(HistoryCalendar));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../api/types';\nimport { IAlbum } from '../../types';\n\nimport { GlobalActions } from '../../global/types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  isChatPrivate,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteMessages' | 'deleteScheduledMessages'>;\n\nconst DeleteMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n  deleteMessages,\n  deleteScheduledMessages,\n}) => {\n  const handleDeleteMessageForAll = useCallback(() => {\n    const messageIds = album && album.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [deleteMessages, message.id, onClose, album]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    const messageIds = album && album.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n          {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isChatPrivate(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'deleteMessages', 'deleteScheduledMessages',\n  ]),\n)(DeleteMessageModal));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../modules/selectors';\nimport {\n  isChatPrivate,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: number;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'pinMessage'>;\n\nconst PinMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  messageId,\n  chatId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n  pinMessage,\n}) => {\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, chatId, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [chatId, messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n        {lang('DialogPin')}\n      </Button>\n      {canPinForAll && (\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n          {contactName\n            ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n        </Button>\n      )}\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isChatPrivate(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = !!chat && isChatChannel(chat);\n    const isGroup = !!chat && isChatBasicGroup(chat);\n    const isSuperGroup = !!chat && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isChatPrivate(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['pinMessage']),\n)(PinMessageModal));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: number;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n        {lang('DialogUnpin')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import React, {\n  FC, useCallback, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { selectCanDeleteSelectedMessages, selectCurrentChat, selectUser } from '../../modules/selectors';\nimport {\n  isChatPrivate,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteMessages' | 'exitMessageSelectMode' | 'deleteScheduledMessages'>;\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n  deleteMessages,\n  deleteScheduledMessages,\n  exitMessageSelectMode,\n}) => {\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: true });\n  }, [deleteMessages, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  }, [isSchedule, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages]);\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName\n            ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n            : lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isChatPrivate(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'deleteMessages',\n    'deleteScheduledMessages',\n    'exitMessageSelectMode',\n  ]),\n)(DeleteSelectedMessageModal));\n","import { ChangeEvent } from 'react';\n\nimport React, {\n  FC, memo, useCallback, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiReportReason } from '../../api/types';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\nimport InputText from '../ui/InputText';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageIds?: number[];\n  onClose: () => void;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'reportMessages' | 'exitMessageSelectMode'>;\n\nconst ReportMessageModal: FC<OwnProps & DispatchProps> = ({\n  isOpen,\n  messageIds,\n  reportMessages,\n  exitMessageSelectMode,\n  onClose,\n}) => {\n  const [selectedReason, setSelectedReason] = useState<ApiReportReason>('spam');\n  const [description, setDescription] = useState('');\n\n  const handleReport = () => {\n    reportMessages({ messageIds, reason: selectedReason, description });\n    exitMessageSelectMode();\n    onClose();\n  };\n\n  const handleSelectReason = useCallback((value: string) => {\n    setSelectedReason(value as ApiReportReason);\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setDescription(e.target.value);\n  }, []);\n\n  const lang = useLang();\n\n  const REPORT_OPTIONS: {value: ApiReportReason; label: string}[] = [\n    { value: 'spam', label: lang('lng_report_reason_spam') },\n    { value: 'violence', label: lang('lng_report_reason_violence') },\n    { value: 'pornography', label: lang('lng_report_reason_pornography') },\n    { value: 'childAbuse', label: lang('lng_report_reason_child_abuse') },\n    { value: 'copyright', label: lang('ReportPeer.ReasonCopyright') },\n    { value: 'other', label: lang('lng_report_reason_other') },\n  ];\n\n  if (!messageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen ? handleReport : undefined}\n      className=\"report\"\n      title={lang('lng_report_message_title')}\n    >\n      <RadioGroup\n        name=\"report-message\"\n        options={REPORT_OPTIONS}\n        onChange={handleSelectReason}\n        selected={selectedReason}\n      />\n      <InputText\n        label={lang('lng_report_reason_description')}\n        value={description}\n        onChange={handleDescriptionChange}\n      />\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleReport}>\n        {lang('lng_report_button')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined, (setGlobal, actions): DispatchProps => pick(actions, [\n    'reportMessages', 'exitMessageSelectMode',\n  ]),\n)(ReportMessageModal));\n","import React, { FC, memo, useEffect } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList,\n  selectSelectedMessagesCount,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport useFlag from '../../hooks/useFlag';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportMessageModal from '../common/ReportMessageModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  selectedMessageIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'exitMessageSelectMode' | 'openForwardMenuForSelectedMessages'>;\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps & DispatchProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  selectedMessageIds,\n  exitMessageSelectMode,\n  openForwardMenuForSelectedMessages,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: openDeleteModal,\n        onDelete: openDeleteModal,\n        onEsc: exitMessageSelectMode,\n      })\n      : undefined;\n  }, [isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const lang = useLang();\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount);\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={exitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {!!selectedMessagesCount && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && (\n              <MenuItem\n                icon=\"forward\"\n                ariaLabel=\"Forward Messages\"\n                onClick={openForwardMenuForSelectedMessages}\n              >\n                <span className=\"item-text\">\n                  {lang('Forward')}\n                </span>\n              </MenuItem>\n            )}\n            {canReportMessages && (\n              <MenuItem\n                icon=\"flag\"\n                onClick={openReportModal}\n                disabled={!canReportMessages}\n                ariaLabel={lang('Conversation.ReportMessages')}\n              >\n                <span className=\"item-text\">\n                  {lang('Report')}\n                </span>\n              </MenuItem>\n            )}\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={openDeleteModal}\n              disabled={!canDeleteMessages}\n              ariaLabel={lang('EditAdminGroupDeleteMessages')}\n            >\n              <span className=\"item-text\">\n                {lang('Delete')}\n              </span>\n            </MenuItem>\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportMessageModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { type: messageListType } = selectCurrentMessageList(global) || {};\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = selectCanReportSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n\n    return {\n      isSchedule: messageListType === 'scheduled',\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      selectedMessageIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['exitMessageSelectMode', 'openForwardMenuForSelectedMessages']),\n)(MessageSelectToolbar));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nexport default (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isChatPrivate, getPrivateChatUserId, selectIsChatMuted } from '../../../modules/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../modules/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: number;\n  withUsername?: boolean;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  privateChatUser,\n  isPinned,\n  isMuted,\n  withUsername,\n  onClick,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    privateChatUser,\n    isPinned,\n    isMuted,\n    handleDelete: openDeleteModal,\n  });\n\n  const handleClick = () => {\n    onClick(chatId);\n  };\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isChatPrivate(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      privateChatUser,\n      isPinned,\n      isMuted,\n    };\n  },\n)(LeftSearchResultChat));\n","import React, {\n  FC, useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: number[];\n  usersById: Record<number, ApiUser>;\n  recentlyFoundChatIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadTopUsers' | 'loadContactList' | 'openChat' | 'addRecentlyFoundChatId' | 'clearRecentlyFoundChats'\n)>;\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps & DispatchProps> = ({\n  topUserIds, usersById, recentlyFoundChatIds,\n  onReset, loadTopUsers, loadContactList, openChat,\n  addRecentlyFoundChatId, clearRecentlyFoundChats,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n      // Loading full contact list for quick local search before user enters the query\n      loadContactList();\n    });\n  }, [loadTopUsers, loadContactList]);\n\n  useHorizontalScroll(topUsersRef.current, !topUserIds);\n\n  const handleClick = useCallback(\n    (id: number) => {\n      openChat({ id, shouldReplaceHistory: true });\n      onReset();\n      setTimeout(() => {\n        addRecentlyFoundChatId({ id });\n      }, SEARCH_CLOSE_TIMEOUT_MS);\n    },\n    [openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={clearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global.globalSearch;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadTopUsers',\n    'loadContactList',\n    'openChat',\n    'addRecentlyFoundChatId',\n    'clearRecentlyFoundChats',\n  ]),\n)(RecentContacts));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport {\n  getChatTitle,\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageSummaryText,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../modules/helpers';\nimport { selectChat, selectUser } from '../../../modules/selectors';\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\nimport useMedia from '../../../hooks/useMedia';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport VerifiedIcon from '../../common/VerifiedIcon';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: number;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusMessage'>;\n\nconst ChatMessage: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  focusMessage,\n  lastSyncTime,\n}) => {\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!IS_SINGLE_COLUMN_LAYOUT}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        withOnlineStatus\n        isSavedMessages={privateChatUser && privateChatUser.isSelf}\n        lastSyncTime={lastSyncTime}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{renderText(getChatTitle(lang, chat, privateChatUser))}</h3>\n            {chat.isVerified && <VerifiedIcon />}\n          </div>\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderMessageSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderMessageSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderText(getMessageSummaryText(lang, message));\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={isRoundVideo ? 'round' : undefined} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderText(getMessageSummaryText(lang, message, true), ['emoji', 'highlight'], { highlight: searchQuery })}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'focusMessage',\n  ]),\n)(ChatMessage));\n","import React, { FC, memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser, ApiChat, ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport searchWords from '../../../util/searchWords';\nimport { unique, pick } from '../../../util/iteratees';\nimport { getUserFullName, getMessageSummaryText, sortChatIds } from '../../../modules/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  localContactIds?: number[];\n  localChatIds?: number[];\n  localUserIds?: number[];\n  globalChatIds?: number[];\n  globalUserIds?: number[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<number, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'addRecentlyFoundChatId' | 'searchMessagesGlobal' | 'setGlobalSearchChatId'\n)>;\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 3;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, usersById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect, openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n}) => {\n  const lang = useLang();\n\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: number) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        onReset();\n      }\n    },\n    [currentUserId, openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: number) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const foundContactIds = localContactIds\n      ? localContactIds.filter((id) => {\n        const user = usersById[id];\n        if (!user) {\n          return false;\n        }\n\n        const fullName = getUserFullName(user);\n        return (fullName && searchWords(fullName, searchQuery)) || searchWords(user.username, searchQuery);\n      })\n      : [];\n\n    return [\n      ...(currentUserId && searchWords(lang('SavedMessages'), searchQuery) ? [currentUserId] : []),\n      ...sortChatIds(unique([\n        ...foundContactIds,\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById),\n    ];\n  }, [\n    searchQuery, localContactIds, currentUserId, lang, localChatIds, localUserIds, chatsById, usersById,\n  ]);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(unique([...globalChatIds, ...globalUserIds]),\n      chatsById, true);\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_').map(Number);\n\n        return (\n          globalMessagesByChatId && globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId]\n        );\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = getMessageSummaryText(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {!!localResults.length && (\n        <div className=\"chat-selection no-selection no-scrollbar\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {!!localResults.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {!!globalResults.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {!!foundMessages.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n        usersById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = global.globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const { foundIds } = (resultsByType && resultsByType.text) || {};\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      usersById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n    'addRecentlyFoundChatId',\n    'searchMessagesGlobal',\n    'setGlobalSearchChatId',\n  ]),\n)(ChatResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { getMessageSummaryText } from '../../../modules/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport DateSuggest from './DateSuggest';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<number, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<number, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal')>;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  currentUserId,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  searchMessagesGlobal,\n  onSearchDateSelect,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n          chatId: currentUserId,\n        });\n      });\n    }\n  }, [currentUserId, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_').map(Number);\n\n        return (\n          globalMessagesByChatId && globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId]\n        );\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = getMessageSummaryText(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {!!foundMessages.length && foundMessages.map(renderFoundMessage)}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const { fetchingStatus, resultsByType } = global.globalSearch;\n\n    const { foundIds } = (resultsByType && resultsByType.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['searchMessagesGlobal']),\n)(ChatMessageResults));\n","import { GlobalState } from '../../../../global/types';\nimport {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { ISettings } from '../../../../types';\n\nimport { selectTheme } from '../../../../modules/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  globalMessagesByChatId?: Record<number, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: number;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = global.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props && props.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const { foundIds } = (resultsByType && resultsByType[currentType]) || {};\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'openMediaViewer')>;\n\nconst CURRENT_TYPE = 'media';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  openMediaViewer,\n}) => {\n  const lang = useLang();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n\n      return globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((messageId: number, chatId: number) => {\n    openMediaViewer({\n      chatId,\n      messageId,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={message.id}\n            idPrefix=\"search-media\"\n            message={message}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'openMediaViewer',\n  ]),\n)(MediaResults));\n","import { ApiChat, ApiMessage, ApiUser } from '../../../../api/types';\nimport {\n  getChatTitle,\n  getSenderTitle,\n  isChatPrivate,\n  isChatGroup,\n} from '../../../../modules/helpers';\nimport { LangFn } from '../../../../hooks/useLang';\n\nexport function getSenderName(\n  lang: LangFn, message: ApiMessage, chatsById: Record<number, ApiChat>, usersById: Record<number, ApiUser>,\n) {\n  const { senderId } = message;\n  if (!senderId) {\n    return undefined;\n  }\n\n  const sender = isChatPrivate(senderId) ? usersById[senderId] : chatsById[senderId];\n\n  let senderName = getSenderTitle(lang, sender);\n\n  const chat = chatsById[message.chatId];\n  if (chat) {\n    if (isChatPrivate(senderId) && (sender as ApiUser).isSelf) {\n      senderName = `${lang('FromYou')} → ${getChatTitle(lang, chat)}`;\n    } else if (isChatGroup(chat)) {\n      senderName += ` → ${getChatTitle(lang, chat)}`;\n    }\n  }\n\n  return senderName;\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage')>;\n\nconst CURRENT_TYPE = 'links';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n\n      return globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: number) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n  ]),\n)(LinkResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../modules/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage')>;\n\nconst CURRENT_TYPE = 'documents';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n      const message = globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: number) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n  ]),\n)(FileResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage' | 'openAudioPlayer')>;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n  openAudioPlayer,\n}) => {\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n\n      return globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: number) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: number) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            target=\"searchResult\"\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n    'openAudioPlayer',\n  ]),\n)(AudioResults));\n","import React, {\n  FC, memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport UserChatResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('setGlobalSearchContent' | 'setGlobalSearchDate')>;\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  setGlobalSearchContent,\n  setGlobalSearchDate,\n  onReset,\n}) => {\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack(isActive, onReset, undefined, undefined, true);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slide-reversed' : 'slide'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <UserChatResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = global.globalSearch;\n\n    return { currentContent, chatId };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setGlobalSearchContent', 'setGlobalSearchDate']),\n)(LeftSearch));\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nexport default () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'signOut' | 'deleteChatFolder'>;\n\nconst SettingsHeader: FC<OwnProps & DispatchProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  signOut,\n  deleteChatFolder,\n}) => {\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n  const [isDeleteFolderDialogOpen, setIsDeleteFolderDialogOpen] = useState(false);\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(true);\n  }, []);\n\n  const closeDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(false);\n  }, []);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteFolderConfirmation();\n    deleteChatFolder({ id: editedFolderId });\n    onReset();\n  }, [editedFolderId, closeDeleteFolderConfirmation, deleteChatFolder, onReset]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n\n            {editedFolderId && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            {(currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList) ? (\n                <h3>{lang('FilterInclude')}</h3>\n              ) : (\n                <h3>{lang('FilterExclude')}</h3>\n              )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('SETTINGS')}</h3>\n\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isDeleteFolderDialogOpen}\n        onClose={closeDeleteFolderConfirmation}\n        text={lang('FilterDeleteAlert')}\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDeleteFolderMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, ['signOut', 'deleteChatFolder']),\n)(SettingsHeader));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { SettingsScreens } from '../../../types';\nimport { ApiUser } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { getUserFullName } from '../../../modules/helpers';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUser?: ApiUser;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUser,\n}) => {\n  const lang = useLang();\n  const fullName = getUserFullName(currentUser);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Main);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <div className=\"settings-current-user\">\n            <Avatar user={currentUser} size=\"jumbo\" />\n            <p className=\"name\">{fullName && renderText(fullName)}</p>\n            <p className=\"phone\">{formatPhoneNumberWithCode(currentUser.phoneNumber)}</p>\n          </div>\n        )}\n        <ListItem\n          icon=\"edit\"\n          onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n        >\n          {lang('lng_settings_information')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"settings\"\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n\n    return {\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n    };\n  },\n)(SettingsMain));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\n\nimport { debounce } from '../../util/schedulers';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkUsername: AnyToVoidFunction;\n  onChange: (value: string | false) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX = 'https://t.me/';\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username);\n}\n\nconst SettingsEditProfile: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkUsername,\n  onChange,\n}) => {\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, `${label} is too short`];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, `${label} is too long`];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, `${label} contains invalid characters`];\n    }\n\n    if (isUsernameAvailable === undefined) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      isUsernameAvailable ? lang(`${langPrefix}Available`, 'Username') : undefined,\n      isUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, isUsernameAvailable, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n    e.target.value = `${asLink ? LINK_PREFIX : ''}${newUsername}`;\n\n    const isValid = isUsernameValid(newUsername);\n\n    if (isValid) {\n      runDebouncedForCheckUsername(() => {\n        checkUsername({ username: newUsername });\n      });\n    }\n\n    if (onChange) {\n      onChange(isValid ? newUsername : false);\n    }\n  }, [asLink, checkUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n    />\n  );\n};\n\nexport default memo(SettingsEditProfile);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { ProfileEditProgress, SettingsScreens } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport { selectUser } from '../../../modules/selectors';\nimport { getChatAvatarHash } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport renderText from '../../common/helpers/renderText';\nimport UsernameInput from '../../common/UsernameInput';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  currentUsername?: string;\n  progress?: ProfileEditProgress;\n  isUsernameAvailable?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadCurrentUser' | 'updateProfile' | 'checkUsername'\n)>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst MAX_BIO_LENGTH = 70;\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\nconst ERROR_BIO_TOO_LONG = 'Bio can\\' be longer than 70 characters';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  currentUsername,\n  progress,\n  isUsernameAvailable,\n  loadCurrentUser,\n  updateProfile,\n  checkUsername,\n}) => {\n  const lang = useLang();\n\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [username, setUsername] = useState<string | false>(currentUsername || '');\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = username === false;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || isUsernameAvailable === true;\n  }, [photo, isProfileFieldsTouched, isUsernameError, isUsernameAvailable]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.EditProfile);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setUsername(value);\n    setIsUsernameTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    if (trimmedBio.length > MAX_BIO_LENGTH) {\n      setError(ERROR_BIO_TOO_LONG);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    username, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-edit-profile\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <InputText\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            error={error === ERROR_BIO_TOO_LONG ? error : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={username || ''}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkUsername={checkUsername}\n            onChange={handleUsernameChange}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {username && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">https://t.me/{username}</span>\n            </p>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const { progress, isUsernameAvailable } = global.profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    if (!currentUser) {\n      return {\n        progress,\n        isUsernameAvailable,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      username: currentUsername,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      currentUsername,\n      progress,\n      isUsernameAvailable,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadCurrentUser',\n    'updateProfile',\n    'checkUsername',\n  ]),\n)(SettingsEditProfile));\n","import React, {\n  FC, memo, useMemo, useCallback, useState, useEffect,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\nimport { ApiChatFolder, ApiChat, ApiUser } from '../../../../api/types';\nimport { NotifyException, NotifySettings, SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { pick } from '../../../../util/iteratees';\nimport { selectNotifyExceptions, selectNotifySettings } from '../../../../modules/selectors';\nimport { throttle } from '../../../../util/schedulers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport { getFolderDescriptionText } from '../../../../modules/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\ntype OwnProps = {\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  orderedFolderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadRecommendedChatFolders' | 'addChatFolder' | 'showDialog'>;\n\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst MAX_ALLOWED_FOLDERS = 10;\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps & DispatchProps> = ({\n  onCreateFolder,\n  onEditFolder,\n  isActive,\n  onScreenSelect,\n  onReset,\n  chatsById,\n  usersById,\n  orderedFolderIds,\n  foldersById,\n  recommendedChatFolders,\n  notifySettings,\n  notifyExceptions,\n  loadRecommendedChatFolders,\n  addChatFolder,\n  showDialog,\n}) => {\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersAll').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, showDialog, onCreateFolder]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Folders);\n\n  const userFolders = useMemo(() => {\n    if (!orderedFolderIds) {\n      return undefined;\n    }\n\n    const chatIds = Object.keys(chatsById).map(Number);\n\n    return orderedFolderIds.map((id) => {\n      const folder = foldersById[id];\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(\n          lang, chatsById, usersById, folder, chatIds, notifySettings, notifyExceptions,\n        ),\n      };\n    });\n  }, [orderedFolderIds, chatsById, foldersById, usersById, notifySettings, notifyExceptions, lang]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, addChatFolder, showDialog]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header\">\n        <div className=\"settings-content-icon\">\n          {animationData && (\n            <AnimatedSticker\n              id=\"settingsFoldersMain\"\n              size={STICKER_SIZE_FOLDER_SETTINGS}\n              animationData={animationData}\n              play={isAnimationLoaded}\n              noLoop\n              onLoad={handleAnimationLoad}\n            />\n          )}\n        </div>\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n          className=\"with-icon mb-2\"\n          color=\"primary\"\n          size=\"smaller\"\n          pill\n          fluid\n          onClick={handleCreateFolder}\n          isRtl={lang.isRtl}\n        >\n          <i className=\"icon-add\" />\n          {lang('CreateNewFilter')}\n        </Button>\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        {userFolders && userFolders.length ? userFolders.map((folder) => (\n          <ListItem\n            className=\"mb-2\"\n            narrow\n            multiline\n            onClick={() => onEditFolder(foldersById[folder.id])}\n          >\n            <span className=\"title\">{folder.title}</span>\n            <span className=\"subtitle\">{folder.subtitle}</span>\n          </ListItem>\n        )) : userFolders && !userFolders.length ? (\n          <p className=\"settings-item-description my-4\" dir=\"auto\">\n            You have no folders yet.\n          </p>\n        ) : <Loading />}\n      </div>\n\n      {(recommendedChatFolders && !!recommendedChatFolders.length) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{folder.title}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: { byId: chatsById },\n      users: { byId: usersById },\n    } = global;\n\n    const {\n      orderedIds: orderedFolderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      chatsById,\n      usersById,\n      orderedFolderIds,\n      foldersById,\n      recommendedChatFolders,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadRecommendedChatFolders', 'addChatFolder', 'showDialog']),\n)(SettingsFoldersMain));\n","import React, { FC } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { findIntersectionWithSet, pick } from '../../../../util/iteratees';\nimport { isChatPrivate } from '../../../../modules/helpers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  FolderEditDispatch,\n  FoldersState,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  onBack: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: number[];\n  loadedArchivedChatIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'editChatFolder' | 'addChatFolder' | 'loadMoreChats'>;\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps & DispatchProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  isActive,\n  onScreenSelect,\n  onReset,\n  onBack,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n  editChatFolder,\n  addChatFolder,\n  loadMoreChats,\n}) => {\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersNew').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...loadedActiveChatIds || [],\n      ...loadedArchivedChatIds || [],\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  useEffect(() => {\n    if (\n      visibleIncludedChatIds.length < includedChatIds.length\n      || visibleExcludedChatIds.length < excludedChatIds.length\n    ) {\n      loadMoreChats({ listType: 'active' });\n    }\n  }, [\n    loadMoreChats,\n    excludedChatIds.length,\n    includedChatIds.length,\n    visibleExcludedChatIds.length,\n    visibleIncludedChatIds.length,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onBack, onScreenSelect, state.mode === 'edit'\n    ? SettingsScreens.FoldersEditFolder\n    : SettingsScreens.FoldersCreateFolder);\n\n  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }\n\n  function handleSubmit() {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isChatPrivate(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-content-header\">\n          <div className=\"settings-content-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"settingsFoldersEdit\"\n                size={STICKER_SIZE_FOLDER_SETTINGS}\n                animationData={animationData}\n                play={isAnimationLoaded && String(state.folderId)}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang(state.error)}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={!!state.isTouched}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { listIds } = global.chats;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['editChatFolder', 'addChatFolder', 'loadMoreChats']),\n)(SettingsFoldersEdit));\n","import React, {\n  FC, useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\n\nimport { isChatPrivate } from '../../../../modules/helpers';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n  FolderChatType,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: number[];\n  selectedIds: number[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: number[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n  onLoadMore: () => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_CHATS = 100;\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\nconst SettingsFoldersChatsPicker: FC<OwnProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  onLoadMore,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n  const hasMaxChats = selectedIds.length >= MAX_CHATS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: number) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: number) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        onClick={() => handleItemClick(id)}\n        ripple\n        disabled={!isSelected && hasMaxChats}\n      >\n        {isChatPrivate(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(onLoadMore, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        {!hasMaxChats ? (\n          <InputText\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={lang('Search')}\n          />\n        ) : (\n          <p className=\"max-items-reached\" dir=\"auto\">\n            {`Sorry, you can't add more than ${MAX_CHATS} chats.`}\n          </p>\n        )}\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <>\n            <h4 key=\"header1\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChatTypes')}\n            </h4>\n            {chatTypes.map(renderChatType)}\n            <div key=\"divider\" className=\"picker-list-divider\" />\n            <h4 key=\"header2\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </>\n        )}\n\n        {viewportIds && viewportIds.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(SettingsFoldersChatsPicker);\n","import React, {\n  FC, memo, useMemo, useCallback,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\nimport { ApiChat } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { pick } from '../../../../util/iteratees';\nimport searchWords from '../../../../util/searchWords';\nimport { prepareChatList, getChatTitle } from '../../../../modules/helpers';\nimport {\n  FoldersState,\n  FolderEditDispatch,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\n\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  listIds?: number[];\n  orderedPinnedIds?: number[];\n  archivedListIds?: number[];\n  archivedPinnedIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadMoreChats'>;\n\nconst SettingsFoldersChatFilters: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  mode,\n  state,\n  dispatch,\n  chatsById,\n  listIds,\n  orderedPinnedIds,\n  archivedListIds,\n  archivedPinnedIds,\n  loadMoreChats,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n  const chats = useMemo(() => {\n    const activeChatArrays = listIds\n      ? prepareChatList(chatsById, listIds, orderedPinnedIds, 'all')\n      : undefined;\n    const archivedChatArrays = archivedListIds\n      ? prepareChatList(chatsById, archivedListIds, archivedPinnedIds, 'archived')\n      : undefined;\n\n    if (!activeChatArrays && !archivedChatArrays) {\n      return undefined;\n    }\n\n    return [\n      ...(activeChatArrays\n        ? [...activeChatArrays.pinnedChats, ...activeChatArrays.otherChats]\n        : []\n      ),\n      ...(archivedChatArrays ? archivedChatArrays.otherChats : []),\n    ];\n  }, [chatsById, listIds, orderedPinnedIds, archivedListIds, archivedPinnedIds]);\n\n  const displayedIds = useMemo(() => {\n    if (!chats) {\n      return undefined;\n    }\n\n    return chats\n      .filter((chat) => (\n        !chatFilter\n        || searchWords(getChatTitle(lang, chat), chatFilter)\n        || selectedChatIds.includes(chat.id)\n      ))\n      .map(({ id }) => id);\n  }, [chats, chatFilter, lang, selectedChatIds]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: number[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect,\n    mode === 'included' ? SettingsScreens.FoldersIncludedChats : SettingsScreens.FoldersExcludedChats);\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n      onLoadMore={loadMoreChats}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n    } = global;\n\n    return {\n      chatsById,\n      listIds: listIds.active,\n      orderedPinnedIds: orderedPinnedIds.active,\n      archivedPinnedIds: orderedPinnedIds.archived,\n      archivedListIds: listIds.archived,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadMoreChats']),\n)(SettingsFoldersChatFilters));\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onBack={onReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useCallback, useMemo, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport './RangeSlider.scss';\n\ntype OwnProps = {\n  options?: string[];\n  range?: { min: number; max: number; step?: number };\n  label?: string;\n  value: number;\n  disabled?: boolean;\n  onChange: (value: number) => void;\n};\n\nconst RangeSlider: FC<OwnProps> = ({\n  options,\n  range,\n  label,\n  value,\n  disabled,\n  onChange,\n}) => {\n  const lang = useLang();\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    onChange(Number(event.currentTarget.value));\n  }, [onChange]);\n\n  const className = buildClassName(\n    'RangeSlider',\n    disabled && 'disabled',\n  );\n\n  const trackWidth = useMemo(() => {\n    if (options) {\n      return (value / (options.length - 1)) * 100;\n    } else if (range) {\n      const possibleValuesLength = (range.max - range.min) / (range.step || 1);\n      return ((value - range.min) / possibleValuesLength) * 100;\n    }\n    return 0;\n  }, [value, options, range]);\n\n  const [min, max, step] = useMemo(() => {\n    if (options) {\n      return [0, options.length - 1, 1];\n    } else if (range) {\n      return [range.min, range.max, range.step || 1];\n    }\n\n    return [0, 0, 0];\n  }, [range, options]);\n\n  return (\n    <div className={className}>\n      {label && (\n        <div className=\"slider-top-row\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <span className=\"label\" dir=\"auto\">{label}</span>\n          {range && (\n            <span className=\"value\" dir=\"auto\">{value}</span>\n          )}\n        </div>\n      )}\n      <div className=\"slider-main\">\n        <div\n          className=\"slider-fill-track\"\n          // @ts-ignore\n          style={`width: ${trackWidth}%`}\n        />\n        <input\n          min={min}\n          max={max}\n          value={value}\n          step={step}\n          type=\"range\"\n          onChange={handleChange}\n        />\n        {options && (\n          <div className=\"slider-options\">\n            {options.map((option, index) => (\n              <div\n                className={buildClassName('slider-option no-selection', index === value && 'active')}\n                onClick={() => onChange(index)}\n              >\n                {option}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(RangeSlider);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\ntype OwnProps = {\n  size?: number;\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCoverAnimated: FC<OwnProps> = ({\n  size = STICKER_SIZE_PICKER_HEADER,\n  stickerSet,\n  observeIntersection,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHash = `stickerSet${stickerSet.id}`;\n  const lottieData = useMedia(mediaHash, !isIntersecting, ApiMediaFormat.Lottie);\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(lottieData, 'slow');\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {!shouldRenderFullMedia && getFirstLetters(stickerSet.title, 2)}\n      {shouldRenderFullMedia && lottieData && (\n        <AnimatedSticker\n          id={mediaHash}\n          size={size}\n          animationData={lottieData}\n          className={transitionClassNames}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCoverAnimated);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiStickerSet } from '../../../api/types';\n\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport { getFirstLetters } from '../../../util/textFormat';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({ stickerSet, observeIntersection }) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaData = useMedia(stickerSet.hasThumbnail && `stickerSet${stickerSet.id}`, !isIntersecting);\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(mediaData, 'slow');\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {!shouldRenderFullMedia && getFirstLetters(stickerSet.title, 2)}\n      {shouldRenderFullMedia && (\n        <img src={mediaData} className={transitionClassNames} alt=\"\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../../config';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport StickerSetCoverAnimated from '../../middle/composer/StickerSetCoverAnimated';\nimport StickerSetCover from '../../middle/composer/StickerSetCover';\nimport StickerButton from '../../common/StickerButton';\n\nimport './SettingsStickerSet.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst SettingsStickerSet: FC<OwnProps> = ({\n  stickerSet,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  const firstSticker = stickerSet.stickers && stickerSet.stickers[0];\n\n  if (stickerSet.hasThumbnail || !firstSticker) {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        inactive={!firstSticker}\n        onClick={() => firstSticker && onClick(firstSticker)}\n      >\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          {stickerSet.isAnimated ? (\n            <StickerSetCoverAnimated\n              size={STICKER_SIZE_GENERAL_SETTINGS}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          )}\n        </Button>\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  } else {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        onClick={() => onClick(firstSticker)}\n      >\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          observeIntersection={observeIntersection}\n        />\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  }\n};\n\nexport default memo(SettingsStickerSet);\n","import React, {\n  FC, useCallback, memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ISettings } from '../../../types';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { IS_IOS, IS_MAC_OS, IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsStickerSet from './SettingsStickerSet';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'messageTextSize' |\n  'animationLevel' |\n  'messageSendKeyCombo' |\n  'shouldAutoDownloadMediaFromContacts' |\n  'shouldAutoDownloadMediaInPrivateChats' |\n  'shouldAutoDownloadMediaInGroups' |\n  'shouldAutoDownloadMediaInChannels' |\n  'shouldAutoPlayGifs' |\n  'shouldAutoPlayVideos' |\n  'shouldSuggestStickers' |\n  'shouldLoopStickers'\n)> & {\n  stickerSetIds?: string[];\n  stickerSetsById?: Record<string, ApiStickerSet>;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setSettingOption' | 'loadStickerSets' | 'loadAddedStickers'\n)>;\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst SettingsGeneral: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  stickerSetIds,\n  stickerSetsById,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  shouldAutoDownloadMediaFromContacts,\n  shouldAutoDownloadMediaInPrivateChats,\n  shouldAutoDownloadMediaInGroups,\n  shouldAutoDownloadMediaInChannels,\n  shouldAutoPlayGifs,\n  shouldAutoPlayVideos,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  setSettingOption,\n  loadStickerSets,\n  loadAddedStickers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [sticker, setSticker] = useState<ApiSticker>();\n\n  const lang = useLang();\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  useEffect(() => {\n    loadStickerSets();\n  }, [loadStickerSets]);\n\n  useEffect(() => {\n    if (stickerSetIds && stickerSetIds.length) {\n      loadAddedStickers();\n    }\n  }, [stickerSetIds, loadAddedStickers]);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleStickerSetClick = useCallback((value: ApiSticker) => {\n    setSticker(value);\n    openModal();\n  }, [openModal]);\n\n  const stickerSets = stickerSetIds && stickerSetIds.map((id: string) => {\n    return stickerSetsById && stickerSetsById[id] && stickerSetsById[id].installedDate ? stickerSetsById[id] : false;\n  }).filter<ApiStickerSet>(Boolean as any);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.General);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          // TODO Remove memo-killer\n          range={{ min: 12, max: 20 }}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={(value) => setSettingOption({ messageSendKeyCombo: value })}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoDownloadMedia')}</h4>\n\n        <Checkbox\n          label={lang('Contacts')}\n          checked={shouldAutoDownloadMediaFromContacts}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaFromContacts: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutodownloadPrivateChats')}\n          checked={shouldAutoDownloadMediaInPrivateChats}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaInPrivateChats: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutodownloadGroupChats')}\n          checked={shouldAutoDownloadMediaInGroups}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaInGroups: isChecked })}\n        />\n        <Checkbox\n          label={lang('FilterChannels')}\n          checked={shouldAutoDownloadMediaInChannels}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaInChannels: isChecked })}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={shouldAutoPlayGifs}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoPlayGifs: isChecked })}\n        />\n        <Checkbox\n          label={lang('DataAndStorage.Autoplay.Videos')}\n          checked={shouldAutoPlayVideos}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoPlayVideos: isChecked })}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AccDescrStickers')}</h4>\n\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={(isChecked) => setSettingOption({ shouldSuggestStickers: isChecked })}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={(isChecked) => setSettingOption({ shouldLoopStickers: isChecked })}\n        />\n\n        <div className=\"mt-4\" ref={stickerSettingsRef}>\n          {stickerSets && stickerSets.map((stickerSet: ApiStickerSet) => (\n            <SettingsStickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersectionForCovers}\n              onClick={handleStickerSetClick}\n            />\n          ))}\n        </div>\n        {sticker && (\n          <StickerSetModal\n            isOpen={isModalOpen}\n            fromSticker={sticker}\n            onClose={closeModal}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'shouldAutoDownloadMediaFromContacts',\n        'shouldAutoDownloadMediaInPrivateChats',\n        'shouldAutoDownloadMediaInGroups',\n        'shouldAutoDownloadMediaInChannels',\n        'shouldAutoPlayGifs',\n        'shouldAutoPlayVideos',\n        'shouldSuggestStickers',\n        'shouldLoopStickers',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n      ]),\n      stickerSetIds: global.stickers.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setSettingOption', 'loadStickerSets', 'loadAddedStickers',\n  ]),\n)(SettingsGeneral));\n","let fileSelector: HTMLInputElement;\n\nexport function openSystemFilesDialog(accept = '*', callback: (e: Event) => void, noMultiple = false) {\n  if (!fileSelector) {\n    fileSelector = document.createElement('input');\n    fileSelector.setAttribute('type', 'file');\n  }\n\n  fileSelector.setAttribute('accept', accept);\n\n  if (noMultiple) {\n    fileSelector.removeAttribute('multiple');\n  } else {\n    fileSelector.setAttribute('multiple', 'multiple');\n  }\n\n  // eslint-disable-next-line no-null/no-null\n  fileSelector.onchange = null;\n  fileSelector.value = '';\n  fileSelector.onchange = callback;\n\n  fileSelector.click();\n}\n","/* eslint-disable eqeqeq */\n/* eslint-disable prefer-template */\n/* eslint-disable prefer-const */\n/* eslint-disable prefer-destructuring */\n/* eslint-disable one-var */\n/* eslint-disable one-var-declaration-per-line */\n\nimport { preloadImage } from './files';\n\n/**\n * HEX > RGB\n * input: 'xxxxxx' (ex. 'ed15fa') case-insensitive\n * output: [r, g, b] ([0-255, 0-255, 0-255])\n */\nexport function hex2rgb(param: string): [number, number, number] {\n  return [\n    parseInt(param.substring(0, 2), 16),\n    parseInt(param.substring(2, 4), 16),\n    parseInt(param.substring(4, 6), 16),\n  ];\n}\n\n/**\n * RGB > HEX\n * input: [r, g, b] ([0-255, 0-255, 0-255])\n * output: 'xxxxxx' (ex. 'ff0000')\n */\nexport function rgb2hex(param: [number, number, number]) {\n  const p0 = param[0].toString(16);\n  const p1 = param[1].toString(16);\n  const p2 = param[2].toString(16);\n  return (p0.length == 1 ? '0' + p0 : p0) + (p1.length == 1 ? '0' + p1 : p1) + (p2.length == 1 ? '0' + p2 : p2);\n}\n\n/**\n * Converts an RGB color value to HSV. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and v in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSV representation\n */\nexport function rgb2hsb([r, g, b]: [number, number, number]): [number, number, number] {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  let max = Math.max(r, g, b), min = Math.min(r, g, b);\n  let h!: number, s: number, v: number = max;\n\n  let d = max - min;\n  s = max == 0 ? 0 : d / max;\n\n  if (max == min) {\n    h = 0; // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return [h, s, v];\n}\n\n/**\n * Converts an HSV color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes h, s, and v are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param   Number  h       The hue\n * @param   Number  s       The saturation\n * @param   Number  v       The value\n * @return  Array           The RGB representation\n */\nexport function hsb2rgb([h, s, v]: [number, number, number]): [number, number, number] {\n  let r!: number, g!: number, b!: number;\n\n  let i = Math.floor(h * 6);\n  let f = h * 6 - i;\n  let p = v * (1 - s);\n  let q = v * (1 - f * s);\n  let t = v * (1 - (1 - f) * s);\n\n  switch (i % 6) {\n    case 0:\n      r = v;\n      g = t;\n      b = p;\n      break;\n    case 1:\n      r = q;\n      g = v;\n      b = p;\n      break;\n    case 2:\n      r = p;\n      g = v;\n      b = t;\n      break;\n    case 3:\n      r = p;\n      g = q;\n      b = v;\n      break;\n    case 4:\n      r = t;\n      g = p;\n      b = v;\n      break;\n    case 5:\n      r = v;\n      g = p;\n      b = q;\n      break;\n  }\n\n  return [\n    Math.round(r * 255),\n    Math.round(g * 255),\n    Math.round(b * 255),\n  ];\n}\n\nexport async function getAverageColor(url: string): Promise<[number, number, number]> {\n  // Only visit every 5 pixels\n  const blockSize = 5;\n  const defaultRGB: [number, number, number] = [0, 0, 0];\n  let data;\n  let width;\n  let height;\n  let i = -4;\n  let length;\n  let rgb: [number, number, number] = [0, 0, 0];\n  let count = 0;\n\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext && canvas.getContext('2d');\n  if (!context) {\n    return defaultRGB;\n  }\n\n  const image = await preloadImage(url);\n  height = image.naturalHeight || image.offsetHeight || image.height;\n  width = image.naturalWidth || image.offsetWidth || image.width;\n  canvas.height = height;\n  canvas.width = width;\n\n  context.drawImage(image, 0, 0);\n\n  try {\n    data = context.getImageData(0, 0, width, height);\n  } catch (e) {\n    return defaultRGB;\n  }\n\n  length = data.data.length;\n\n  // eslint-disable-next-line no-cond-assign\n  while ((i += blockSize * 4) < length) {\n    ++count;\n    rgb[0] += data.data[i];\n    rgb[1] += data.data[i + 1];\n    rgb[2] += data.data[i + 2];\n  }\n\n  rgb[0] = Math.floor(rgb[0] / count);\n  rgb[1] = Math.floor(rgb[1] / count);\n  rgb[2] = Math.floor(rgb[2] / count);\n\n  return rgb;\n}\n\n// eslint-disable-next-line max-len\n// Function was adapted from https://github.com/telegramdesktop/tdesktop/blob/35ff621b5b52f7e3553fb0f990ea13ade7101b8e/Telegram/SourceFiles/data/data_wall_paper.cpp#L518\nexport function getPatternColor(rgbColor: [number, number, number]) {\n  let [hue, saturation, value] = rgb2hsb(rgbColor);\n\n  saturation = Math.min(1, saturation + 0.05 + 0.1 * (1 - saturation));\n  value = value > 0.5\n    ? Math.max(0, value * 0.65)\n    : Math.max(0, Math.min(1, 1 - value * 0.65));\n\n  return `hsla(${hue * 360}, ${saturation * 100}%, ${value * 100}%, .4)`;\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport { ApiWallpaper } from '../../../api/types';\nimport { ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(\n    document.thumbnail && document.thumbnail.dataUri,\n    Boolean(previewBlobUrl),\n    true,\n  );\n  const {\n    shouldRenderThumb, shouldRenderFullMedia, transitionClassNames,\n  } = useTransitionForMedia(previewBlobUrl || localBlobUrl, 'slow');\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, downloadProgress,\n  } = useMediaWithDownloadProgress(localMediaHash, !isDownloadAllowed);\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isDownloadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasDownloadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        {shouldRenderThumb && (\n          <canvas\n            ref={thumbRef}\n            className=\"thumbnail\"\n          />\n        )}\n        {shouldRenderFullMedia && (\n          <img\n            src={previewBlobUrl || localBlobUrl}\n            className={`full-media ${transitionClassNames}`}\n            alt=\"\"\n          />\n        )}\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={downloadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import React, {\n  FC, memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadWallpapers' | 'uploadWallpaper' | 'setThemeSettings'\n)>;\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n  loadWallpapers,\n  uploadWallpaper,\n  setThemeSettings,\n}) => {\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      uploadWallpaper(files[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper && currentWallpaper.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.GeneralChatBackground);\n\n  const isUploading = loadedWallpapers && loadedWallpapers[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadWallpapers', 'uploadWallpaper', 'setThemeSettings',\n  ]),\n)(SettingsGeneralBackground));\n","import { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport { captureEvents, RealTouchEvent } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../modules/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setThemeSettings'>;\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  theme,\n  backgroundColor,\n  setThemeSettings,\n}) => {\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.GeneralChatBackgroundColor);\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            // @ts-ignore\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            // @ts-ignore\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            // @ts-ignore\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setThemeSettings']),\n)(SettingsGeneralBackground));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadNotificationSettings' | 'updateContactSignUpNotification' |\n  'updateNotificationSettings' | 'updateWebNotificationSettings'\n)>;\n\nconst SettingsNotifications: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n  loadNotificationSettings,\n  updateContactSignUpNotification,\n  updateNotificationSettings,\n  updateWebNotificationSettings,\n}) => {\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Notifications);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          onChange={(e) => {\n            updateWebNotificationSettings({ hasWebNotifications: e.target.checked });\n          }}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPushNotifications}\n          onChange={(e) => {\n            updateWebNotificationSettings({ hasPushNotifications: e.target.checked });\n          }}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            disabled={!hasWebNotifications}\n            range={{\n              min: 0,\n              max: 10,\n            }}\n            value={notificationSoundVolume}\n            onChange={(volume) => {\n              updateWebNotificationSettings({ notificationSoundVolume: volume });\n            }}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'contact', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'contact', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'group', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'group', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'broadcast', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'broadcast', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n    hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n    hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n    hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n    hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n    hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n    hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n    hasWebNotifications: global.settings.byKey.hasWebNotifications,\n    hasPushNotifications: global.settings.byKey.hasPushNotifications,\n    notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n  };\n},\n(setGlobal, actions): DispatchProps => pick(actions, [\n  'loadNotificationSettings',\n  'updateContactSignUpNotification',\n  'updateNotificationSettings',\n  'updateWebNotificationSettings',\n]))(SettingsNotifications));\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { PrivacyVisibility, SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPassword?: boolean;\n  blockedCount: number;\n  sessionsCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  visibilityPrivacyPhoneNumber?: PrivacyVisibility;\n  visibilityPrivacyLastSeen?: PrivacyVisibility;\n  visibilityPrivacyProfilePhoto?: PrivacyVisibility;\n  visibilityPrivacyForwarding?: PrivacyVisibility;\n  visibilityPrivacyGroupChats?: PrivacyVisibility;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadBlockedContacts' | 'loadAuthorizations' | 'loadPrivacySettings' | 'loadContentSettings' | 'updateContentSettings'\n)>;\n\nconst SettingsPrivacy: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  hasPassword,\n  blockedCount,\n  sessionsCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  visibilityPrivacyPhoneNumber,\n  visibilityPrivacyLastSeen,\n  visibilityPrivacyProfilePhoto,\n  visibilityPrivacyForwarding,\n  visibilityPrivacyGroupChats,\n  loadPrivacySettings,\n  loadBlockedContacts,\n  loadAuthorizations,\n  loadContentSettings,\n  updateContentSettings,\n}) => {\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Privacy);\n\n  function getVisibilityValue(visibility?: PrivacyVisibility) {\n    switch (visibility) {\n      case 'everybody':\n        return lang('P2PEverybody');\n\n      case 'contacts':\n        return lang('P2PContacts');\n\n      case 'nobody':\n        return lang('P2PNobody');\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('BlockedUsers')}</span>\n            {blockedCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang('Users', blockedCount)}\n              </span>\n            )}\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyActiveSessions)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('SessionsTitle')}</span>\n            {sessionsCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {sessionsCount === 1 ? '1 session' : `${sessionsCount} sessions`}\n              </span>\n            )}\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={updateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: { hasPassword, isSensitiveEnabled, canChangeSensitive },\n        privacy,\n      },\n      blocked,\n      activeSessions,\n    } = global;\n\n    return {\n      hasPassword,\n      blockedCount: blocked.totalCount,\n      sessionsCount: activeSessions.length,\n      isSensitiveEnabled,\n      canChangeSensitive,\n      visibilityPrivacyPhoneNumber: privacy.phoneNumber && privacy.phoneNumber.visibility,\n      visibilityPrivacyLastSeen: privacy.lastSeen && privacy.lastSeen.visibility,\n      visibilityPrivacyProfilePhoto: privacy.profilePhoto && privacy.profilePhoto.visibility,\n      visibilityPrivacyForwarding: privacy.forwards && privacy.forwards.visibility,\n      visibilityPrivacyGroupChats: privacy.chatInvite && privacy.chatInvite.visibility,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadBlockedContacts', 'loadAuthorizations', 'loadPrivacySettings', 'loadContentSettings', 'updateContentSettings',\n  ]),\n)(SettingsPrivacy));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ISettings, SettingsScreens } from '../../../types';\nimport { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\nimport { pick } from '../../../util/iteratees';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'languages' | 'language'>;\n\ntype DispatchProps = Pick<GlobalActions, 'loadLanguages' | 'setSettingOption'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  languages,\n  language,\n  loadLanguages,\n  setSettingOption,\n}) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  // TODO Throttle\n  useEffect(() => {\n    loadLanguages();\n  }, [loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    setLanguage(langCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode });\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Language);\n\n  return (\n    <div className=\"settings-content settings-item settings-language custom-scroll\">\n      {options ? (\n        <RadioGroup\n          name=\"keyboard-send-settings\"\n          options={options}\n          selected={selectedLanguage}\n          loadingOption={isLoading ? selectedLanguage : undefined}\n          onChange={handleChange}\n        />\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      languages: global.settings.byKey.languages,\n      language: global.settings.byKey.language,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadLanguages', 'setSettingOption',\n  ]),\n)(SettingsLanguage));\n","import { ApiPrivacyKey, SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n  }\n\n  return undefined;\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport { pick } from '../../../util/iteratees';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport { getPrivacyKey } from './helper/privacy';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Partial<ApiPrivacySettings> & {\n  chatsById?: Record<number, ApiChat>;\n  usersById?: Record<number, ApiUser>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setPrivacyVisibility'>;\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps & DispatchProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n  setPrivacyVisibility,\n}) => {\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            onClick={() => { onScreenSelect(allowedContactsScreen); }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            onClick={() => { onScreenSelect(deniedContactsScreen); }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {};\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setPrivacyVisibility']),\n)(SettingsPrivacyVisibility));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiSession } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  activeSessions: ApiSession[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadAuthorizations' | 'terminateAuthorization' | 'terminateAllAuthorizations'\n)>;\n\nconst SettingsPrivacyActiveSessions: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  activeSessions,\n  loadAuthorizations,\n  terminateAuthorization,\n  terminateAllAuthorizations,\n}) => {\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  useEffect(() => {\n    loadAuthorizations();\n  }, [loadAuthorizations]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const currentSession = useMemo(() => {\n    return activeSessions.find((session) => session.isCurrent);\n  }, [activeSessions]);\n\n  const otherSessions = useMemo(() => {\n    return activeSessions.filter((session) => !session.isCurrent);\n  }, [activeSessions]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.PrivacyActiveSessions);\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive>\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.appName}</span>\n            <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        <ListItem\n          className=\"destructive mb-0\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('TerminateAllSessions')}\n        </ListItem>\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessions: ApiSession[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessions.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(session: ApiSession) {\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.appName}</span>\n          <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n          <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {otherSessions && renderOtherSessions(otherSessions)}\n      {otherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text=\"Are you sure you want to terminate all other sessions?\"\n          confirmLabel=\"Terminate All Other Sessions\"\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nfunction getDeviceEnvironment(session: ApiSession) {\n  return `${session.deviceModel}${session.deviceModel ? ', ' : ''} ${session.platform} ${session.systemVersion}`;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      activeSessions: global.activeSessions,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadAuthorizations', 'terminateAuthorization', 'terminateAllAuthorizations',\n  ]),\n)(SettingsPrivacyActiveSessions));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { pick } from '../../../util/iteratees';\nimport {\n  getChatTitle, getUserFullName, isChatPrivate,\n} from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<number, ApiChat>;\n  usersByIds: Record<number, ApiUser>;\n  blockedIds: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'unblockContact'>;\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  unblockContact,\n}) => {\n  const handleUnblockClick = useCallback((contactId: number) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.PrivacyBlockedUsers);\n\n  function renderContact(contactId: number, i: number, viewportOffset: number) {\n    const isPrivate = isChatPrivate(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item',\n      isPrivate ? 'private' : 'group',\n    );\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\" dir=\"auto\">\n          <h3 dir=\"auto\">{renderText((isPrivate ? getUserFullName(user) : getChatTitle(lang, chat!)) || '')}</h3>\n          {user && user.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(user.phoneNumber)}</div>\n          )}\n          {user && !user.phoneNumber && user.username && (\n            <div className=\"contact-username\" dir=\"auto\">@{user.username}</div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds && blockedIds.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">\n              List is empty\n            </div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={() => {\n        }}\n        className=\"not-implemented\"\n        ariaLabel=\"Add a blocked user\"\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['unblockContact']),\n)(SettingsPrivacyBlockedUsers));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps & StateProps> = ({\n  isActive, onReset, animatedEmoji, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaEnabled);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <ListItem\n          icon=\"edit\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaEnabled));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../../common/PasswordMonkey';\nimport PasswordForm from '../../../common/PasswordForm';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  error?: string;\n  isLoading?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsTwoFaPassword: FC<OwnProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  error,\n  isLoading,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaPassword);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps & StateProps> = ({\n  isActive, onScreenSelect, onReset, animatedEmoji, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaDisabled);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaStart));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  screen: SettingsScreens;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onScreenSelect,\n  onReset,\n  screen,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = () => {\n    onSubmit();\n  };\n\n  const handleSkipConfirm = () => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  };\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps & StateProps> = ({\n  isActive, onReset, animatedEmoji, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = () => {\n    onScreenSelect(SettingsScreens.Privacy);\n  };\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaCongratulations);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🥳'),\n  };\n})(SettingsTwoFaCongratulations));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  screen: SettingsScreens;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onScreenSelect,\n  onReset,\n  screen,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  };\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { pick } from '../../../../util/iteratees';\nimport { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from './SettingsTwoFaPassword';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\ntype DispatchProps = Pick<GlobalActions, (\n  'updatePassword' | 'updateRecoveryEmail' | 'clearPassword' | 'provideTwoFaEmailCode' |\n  'checkPassword' | 'clearTwoFaError'\n)>;\n\nconst SettingsTwoFa: FC<OwnProps & StateProps & DispatchProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n  updatePassword,\n  checkPassword,\n  clearTwoFaError,\n  updateRecoveryEmail,\n  provideTwoFaEmailCode,\n  clearPassword,\n}) => {\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n          screen={currentScreen}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n          screen={currentScreen}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          screen={currentScreen}\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'updatePassword', 'updateRecoveryEmail', 'clearPassword', 'provideTwoFaEmailCode',\n    'checkPassword', 'clearTwoFaError',\n  ]),\n)(SettingsTwoFa));\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport { pick } from '../../../util/iteratees';\nimport searchWords from '../../../util/searchWords';\nimport { getPrivacyKey } from './helper/privacy';\nimport {\n  getChatTitle, isChatGroup, isChatPrivate, prepareChatList,\n} from '../../../modules/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  chatsById: Record<number, ApiChat>;\n  listIds?: number[];\n  orderedPinnedIds?: number[];\n  archivedListIds?: number[];\n  archivedPinnedIds?: number[];\n  settings?: ApiPrivacySettings;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setPrivacySettings'>;\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps & DispatchProps> = ({\n  currentUserId,\n  isAllowList,\n  screen,\n  settings,\n  chatsById,\n  listIds,\n  orderedPinnedIds,\n  archivedListIds,\n  archivedPinnedIds,\n  setPrivacySettings,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<number[]>(selectedContactIds);\n\n  const chats = useMemo(() => {\n    const activeChatArrays = listIds\n      ? prepareChatList(chatsById, listIds, orderedPinnedIds, 'all')\n      : undefined;\n    const archivedChatArrays = archivedListIds\n      ? prepareChatList(chatsById, archivedListIds, archivedPinnedIds, 'archived')\n      : undefined;\n\n    if (!activeChatArrays && !archivedChatArrays) {\n      return undefined;\n    }\n\n    return [\n      ...(activeChatArrays\n        ? [\n          ...activeChatArrays.pinnedChats,\n          ...activeChatArrays.otherChats,\n        ]\n        : []\n      ),\n      ...(archivedChatArrays ? archivedChatArrays.otherChats : []),\n    ];\n  }, [chatsById, listIds, orderedPinnedIds, archivedListIds, archivedPinnedIds]);\n\n  const displayedIds = useMemo(() => {\n    if (!chats) {\n      return undefined;\n    }\n\n    return chats\n      .filter((chat) => (\n        ((isChatPrivate(chat.id) && chat.id !== currentUserId) || isChatGroup(chat))\n        && (\n          !searchQuery\n        || searchWords(getChatTitle(lang, chat), searchQuery)\n        || selectedContactIds.includes(chat.id)\n        )\n      ))\n      .map(({ id }) => id);\n  }, [chats, currentUserId, lang, searchQuery, selectedContactIds]);\n\n  const handleSelectedContactIdsChange = useCallback((value: number[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen),\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysShareWithPlaceholder') : lang('NeverShareWithPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysShareWithTitle') : lang('NeverShareWithTitle')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      currentUserId,\n      chatsById,\n      listIds: listIds.active,\n      orderedPinnedIds: orderedPinnedIds.active,\n      archivedPinnedIds: orderedPinnedIds.archived,\n      archivedListIds: listIds.archived,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setPrivacySettings']),\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\nimport { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsPrivacyActiveSessions from './SettingsPrivacyActiveSessions';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.PrivacyActiveSessions,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: () => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            onScreenSelect={onScreenSelect}\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n            || screen === SettingsScreens.GeneralChatBackgroundColor\n            || screen === SettingsScreens.GeneralChatBackground\n            || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen || isTwoFaScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyActiveSessions:\n        return (\n          <SettingsPrivacyActiveSessions\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import React, {\n  FC, useEffect, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { pick } from '../../../util/iteratees';\nimport { getUserFullName, sortUserIds } from '../../../modules/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  contactIds?: number[];\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'openChat'>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ContactList: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive, onReset,\n  filter, usersById, contactIds, loadContactList, openChat, serverTimeOffset,\n}) => {\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  useHistoryBack(isActive, onReset);\n\n  const handleClick = useCallback(\n    (id: number) => {\n      openChat({ id, shouldReplaceHistory: true });\n    },\n    [openChat],\n  );\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const resultIds = filter ? contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, filter);\n    }) : contactIds;\n\n    return sortUserIds(resultIds, usersById, undefined, serverTimeOffset);\n  }, [contactIds, filter, usersById, serverTimeOffset]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds && viewportIds.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            onClick={() => handleClick(id)}\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n\n    return {\n      usersById,\n      contactIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'openChat']),\n)(ContactList));\n","import React, {\n  FC, useCallback, useEffect, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport { pick, unique } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { getUserFullName, isUserBot, sortChatIds } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: number[];\n  onSelectedMemberIdsChange: (ids: number[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  usersById: Record<number, ApiUser>;\n  chatsById: Record<number, ApiChat>;\n  localContactIds?: number[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: number[];\n  globalUserIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'setGlobalSearchQuery'>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst NewChatStep1: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  currentUserId,\n  usersById,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  loadContactList,\n  setGlobalSearchQuery,\n}) => {\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = localContactIds\n      ? sortChatIds(localContactIds.filter((id) => id !== currentUserId), chatsById)\n      : [];\n\n    if (!searchQuery) {\n      return contactIds;\n    }\n\n    const foundContactIds = contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, searchQuery);\n    });\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n\n        return !user || !isUserBot(user) || user.canBeInvitedToGroup;\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds,\n    currentUserId, usersById,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n    const { currentUserId } = global;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = global.globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      currentUserId,\n      usersById,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus && fetchingStatus.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'setGlobalSearchQuery']),\n)(NewChatStep1));\n","import React, {\n  FC, useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ChatCreationProgress } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: number[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'createGroupChat' | 'createChannel'>;\n\n// TODO @implement\nconst MAX_USERS_FOR_LEGACY_CHAT = 199; // Accounting for current user\n\nconst NewChatStep2: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  isActive,\n  memberIds,\n  onReset,\n  creationProgress,\n  creationError,\n  createGroupChat,\n  createChannel,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset);\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (memberIds.length > MAX_USERS_FOR_LEGACY_CHAT) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, createGroupChat, photo, chatTitleEmptyError, chatTooManyUsersError]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = creationError || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = global.chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'createGroupChat', 'createChannel',\n  ]),\n)(NewChatStep2));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<number[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport { LeftColumnContent } from '../../types';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n  onContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({ isActive, onReset, onContentChange }) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onContentChange, LeftColumnContent.Archived);\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('ArchivedChats')}</h3>\n      </div>\n      <ChatList folderType=\"archived\" isActive={isActive} />\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","const IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nconst preventDefault = (e: Event) => {\n  e.preventDefault();\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    preventDefault(e);\n  }\n}\n\nexport function disableScrolling() {\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  window.ontouchmove = preventDefault; // mobile\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  // eslint-disable-next-line no-null/no-null\n  window.ontouchmove = null;\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import { ApiMediaFormat, ApiMessage } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../modules/helpers';\nimport { CLIPBOARD_ITEM_SUPPORTED, copyImageToClipboard, copyTextToClipboard } from '../../../../util/clipboard';\n\ntype ICopyOptions = {\n  label: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage, afterEffect?: () => void, onCopyLink?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection\n      && selection.anchorNode\n      && selection.anchorNode.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      handler: () => {\n        const clipboardText = hasSelection && selection ? selection.toString() : text;\n        copyTextToClipboard(clipboardText);\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      handler: () => {\n        onCopyLink();\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  onReply: () => void;\n  onEdit: () => void;\n  onPin: () => void;\n  onUnpin: () => void;\n  onForward: () => void;\n  onDelete: () => void;\n  onReport: () => void;\n  onFaveSticker: () => void;\n  onUnfaveSticker: () => void;\n  onSelect: () => void;\n  onSend: () => void;\n  onReschedule: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  isOpen,\n  message,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canEdit,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  onReply,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n}) => {\n  const copyOptions = getMessageCopyOptions(message, onClose, canCopyLink ? onCopyLink : undefined);\n\n  const getTriggerElement = useCallback(() => {\n    return document.querySelector(`.active > .MessageList div[data-message-id=\"${message.id}\"]`);\n  }, [message.id]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const { positionX, positionY, style } = useContextMenuPosition(\n    anchor,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    SCROLLBAR_WIDTH,\n    (document.querySelector('.MiddleHeader') as HTMLElement).offsetHeight,\n  );\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      className=\"MessageContextMenu fluid\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n      {canReschedule && (\n        <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n      )}\n      {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n      {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n      {canFaveSticker && (\n        <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n      )}\n      {canUnfaveSticker && (\n        <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n      )}\n      {canCopy && copyOptions.map((options) => (\n        <MenuItem key={options.label} icon=\"copy\" onClick={options.handler}>{lang(options.label)}</MenuItem>\n      ))}\n      {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n      {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n      {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n      {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n      {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n      {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n    </Menu>\n  );\n};\n\nexport default MessageContextMenu;\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum, IAnchorPosition } from '../../../types';\nimport { selectAllowedMessageActions, selectCurrentMessageList } from '../../../modules/selectors';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { pick } from '../../../util/iteratees';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportMessageModal from '../../common/ReportMessageModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport CalendarModal from '../../common/CalendarModal';\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setReplyingToId' | 'setEditingId' | 'pinMessage' | 'openForwardMenu' |\n  'faveSticker' | 'unfaveSticker' | 'toggleMessageSelection' | 'sendScheduledMessages' | 'rescheduleMessage'\n)>;\n\nconst ContextMenuContainer: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  album,\n  anchor,\n  onClose,\n  onCloseAnimationEnd,\n  noOptions,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canEdit,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  setReplyingToId,\n  setEditingId,\n  pinMessage,\n  openForwardMenu,\n  faveSticker,\n  unfaveSticker,\n  toggleMessageSelection,\n  sendScheduledMessages,\n  rescheduleMessage,\n}) => {\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    onClose();\n  }, [closeCalendar, onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album && album.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    openCalendar();\n  }, [openCalendar]);\n\n  const handleRescheduleMessage = useCallback((date: Date) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt: Math.round(date.getTime() / 1000),\n    });\n  }, [message.chatId, message.id, rescheduleMessage]);\n\n  const handleCopyLink = useCallback(() => {\n    copyTextToClipboard(`https://t.me/${chatUsername || `c/${Math.abs(message.chatId)}`}/${message.id}`);\n    closeMenu();\n  }, [chatUsername, closeMenu, message.chatId, message.id]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={['ContextMenuContainer', transitionClassNames].join(' ')}>\n      <MessageContextMenu\n        message={message}\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportMessageModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={message.date * 1000}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        onClose={handleCloseCalendar}\n        onSubmit={handleRescheduleMessage}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n\n    return {\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy,\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setReplyingToId',\n    'setEditingId',\n    'pinMessage',\n    'openForwardMenu',\n    'faveSticker',\n    'unfaveSticker',\n    'toggleMessageSelection',\n    'sendScheduledMessages',\n    'rescheduleMessage',\n  ]),\n)(ContextMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiSticker, ApiStickerSet } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport { STICKER_SIZE_MODAL } from '../../config';\nimport { pick } from '../../util/iteratees';\nimport { selectStickerSet } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker: ApiSticker;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  stickerSet?: ApiStickerSet;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadStickers' | 'toggleStickerSet' | 'sendMessage'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSet,\n  onClose,\n  loadStickers,\n  toggleStickerSet,\n  sendMessage,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen) {\n      const { stickerSetId, stickerSetAccessHash } = fromSticker;\n      loadStickers({ stickerSetId, stickerSetAccessHash });\n    }\n  }, [isOpen, fromSticker, loadStickers]);\n\n  const handleSelect = useCallback((sticker: ApiSticker) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    sendMessage({ sticker });\n    onClose();\n  }, [onClose, sendMessage]);\n\n  const handleButtonClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId: fromSticker.stickerSetId });\n    onClose();\n  }, [fromSticker.stickerSetId, onClose, toggleStickerSet]);\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={stickerSet ? renderText(stickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n    >\n      {stickerSet && stickerSet.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            {stickerSet.stickers.map((sticker) => (\n              <StickerButton\n                sticker={sticker}\n                size={STICKER_SIZE_MODAL}\n                observeIntersection={observeIntersection}\n                onClick={handleSelect}\n                clickArg={sticker}\n              />\n            ))}\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={stickerSet.installedDate ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {lang(\n                stickerSet.installedDate ? 'StickerPack.RemoveStickerCount' : 'StickerPack.AddStickerCount',\n                stickerSet.count,\n                'i',\n              )}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal(\n  (global, { fromSticker }: OwnProps) => {\n    return { stickerSet: selectStickerSet(global, fromSticker.stickerSetId) };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadStickers',\n    'toggleStickerSet',\n    'sendMessage',\n  ]),\n)(StickerSetModal));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport { selectChat, selectNotifySettings, selectNotifyExceptions } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { isChatPrivate, getCanDeleteChat, selectIsChatMuted } from '../../modules/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport DeleteChatModal from '../common/DeleteChatModal';\n\nimport './HeaderMenuContainer.scss';\n\ntype DispatchProps = Pick<GlobalActions, (\n  'updateChatMutedState' | 'enterMessageSelectMode' | 'sendBotCommand' | 'restartBot'\n)>;\n\nexport type OwnProps = {\n  chatId: number;\n  threadId: number;\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canMute?: boolean;\n  canSelect?: boolean;\n  canLeave?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  canDeleteChat?: boolean;\n};\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  isOpen,\n  anchor,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canMute,\n  canSelect,\n  canLeave,\n  chat,\n  isPrivate,\n  isMuted,\n  canDeleteChat,\n  onSubscribeChannel,\n  onSearchClick,\n  onClose,\n  onCloseAnimationEnd,\n  updateChatMutedState,\n  enterMessageSelectMode,\n  sendBotCommand,\n  restartBot,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {IS_SINGLE_COLUMN_LAYOUT && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'Subscribe' : 'Join Group')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {canSelect && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {lang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={handleDelete}\n            >\n              {lang(isPrivate\n                ? 'Delete'\n                : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n            </MenuItem>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate: isChatPrivate(chat.id),\n      canDeleteChat: getCanDeleteChat(chat),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'updateChatMutedState',\n    'enterMessageSelectMode',\n    'sendBotCommand',\n    'restartBot',\n  ]),\n)(HeaderMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChat } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport { debounce } from '../../util/schedulers';\nimport { selectCurrentTextSearch, selectCurrentChat } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalTextSearchQuery' | 'searchTextMessagesLocal' | 'closeLocalTextSearch' | 'openHistoryCalendar' |\n  'focusMessage'\n)>;\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps & DispatchProps> = ({\n  isActive,\n  chat,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n  setLocalTextSearchQuery,\n  searchTextMessagesLocal,\n  focusMessage,\n  closeLocalTextSearch,\n  openHistoryCalendar,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat && foundIds && foundIds.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1] });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat, focusMessage, foundIds]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1 - newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1 - newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={closeLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds && foundIds.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalTextSearchQuery',\n    'searchTextMessagesLocal',\n    'focusMessage',\n    'closeLocalTextSearch',\n    'openHistoryCalendar',\n  ]),\n)(MobileSearchFooter));\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement>,\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport fastSmoothScroll from './fastSmoothScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import React, {\n  FC, useCallback, useEffect, useState, useRef, memo,\n} from '../../../lib/teact/teact';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport { ApiUser } from '../../../api/types';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport captureKeyboardListeners from '../../../util/captureKeyboardListeners';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport cycleRestrict from '../../../util/cycleRestrict';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  filter: string;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n  usersById?: Record<number, ApiUser>;\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  filter,\n  onClose,\n  onInsertUserName,\n  usersById,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!filteredUsers) {\n      return -1;\n    }\n    const membersCount = filteredUsers!.length;\n    return cycleRestrict(membersCount, newIndex);\n  }, [filteredUsers]);\n\n  const [selectedMentionIndex, setSelectedMentionIndex] = useState(-1);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedMentionIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedMentionIndex, getSelectedIndex]);\n\n  const handleUserSelect = useCallback((userId: number, forceFocus = false) => {\n    const user = usersById && usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [usersById, onInsertUserName]);\n\n  const handleSelectMention = useCallback((e: KeyboardEvent) => {\n    if (filteredUsers && filteredUsers.length && selectedMentionIndex > -1) {\n      const member = filteredUsers[selectedMentionIndex];\n      if (member) {\n        e.preventDefault();\n        handleUserSelect(member.id, true);\n      }\n    }\n  }, [filteredUsers, selectedMentionIndex, handleUserSelect]);\n\n  useEffect(() => (isOpen ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: (e: KeyboardEvent) => handleArrowKey(1, e),\n    onEnter: handleSelectMention,\n    onTab: handleSelectMention,\n  }) : undefined), [isOpen, onClose, handleArrowKey, handleSelectMention]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  useEffect(() => {\n    setSelectedMentionIndex(0);\n  }, [filter]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers && filteredUsers.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers && renderedChatMembers.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          onClick={() => handleUserSelect(id)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAttachment, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { CONTENT_TYPES_FOR_QUICK_UPLOAD, EDITABLE_INPUT_MODAL_ID } from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport File from '../../common/File';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\n\nimport './AttachmentModal.scss';\n\nexport type OwnProps = {\n  attachments: ApiAttachment[];\n  caption: string;\n  isReady?: boolean;\n  currentUserId?: number;\n  groupChatMembers?: ApiChatMember[];\n  usersById?: Record<number, ApiUser>;\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  addRecentEmoji: AnyToVoidFunction;\n  onCaptionUpdate: (html: string) => void;\n  onSend: () => void;\n  onFileAppend: (files: File[], isQuick: boolean) => void;\n  onClear: () => void;\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\n\nconst AttachmentModal: FC<OwnProps> = ({\n  attachments,\n  caption,\n  isReady,\n  currentUserId,\n  groupChatMembers,\n  usersById,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  addRecentEmoji,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const hideTimeoutRef = useRef<number>(null);\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const isOpen = Boolean(attachments.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n  const isQuick = Boolean(renderingAttachments && renderingAttachments.every((a) => a.quick));\n  const lang = useLang();\n\n  const {\n    isMentionTooltipOpen, mentionFilter,\n    closeMentionTooltip, insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    isOpen,\n    caption,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n    usersById,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    isOpen,\n    caption,\n    recentEmojis,\n    EDITABLE_INPUT_MODAL_ID,\n    onCaptionUpdate,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  const sendAttachments = useCallback(() => {\n    if (isOpen) {\n      onSend();\n    }\n  }, [isOpen, onSend]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches('.drop-target') && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest('.AttachmentModal.hovered')) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer: { files } } = e;\n\n    if (files && files.length) {\n      const newFiles = isQuick\n        ? Array.from(files).filter((file) => {\n          return file.type && CONTENT_TYPES_FOR_QUICK_UPLOAD.has(file.type);\n        })\n        : Array.from(files);\n\n      onFileAppend(newFiles, isQuick);\n    }\n  }, [isQuick, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n    }\n  }\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const areAllPhotos = renderingAttachments.every((a) => a.mimeType.startsWith('image/'));\n  const areAllVideos = renderingAttachments.every((a) => a.mimeType.startsWith('video/'));\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={sendAttachments}\n        >\n          {lang('Send')}\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={`AttachmentModal ${isHovered ? 'hovered' : ''}`}\n    >\n      <div\n        className=\"drop-target\"\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n      >\n        {isQuick ? (\n          <div className=\"media-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              attachment.mimeType.startsWith('image/')\n                ? <img src={attachment.blobUrl} alt=\"\" />\n                : <video src={attachment.blobUrl} autoPlay muted loop />\n            ))}\n          </div>\n        ) : (\n          <div className=\"document-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              <File\n                name={attachment.filename}\n                extension={getFileExtension(attachment.filename, attachment.mimeType)}\n                previewData={attachment.previewBlobUrl}\n                size={attachment.size}\n                smaller\n              />\n            ))}\n          </div>\n        )}\n\n        <div className=\"attachment-caption-wrapper\">\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            onClose={closeMentionTooltip}\n            filter={mentionFilter}\n            onInsertUserName={insertMention}\n            filteredUsers={mentionFilteredUsers}\n            usersById={usersById}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <MessageInput\n            id=\"caption-input-text\"\n            isAttachmentModalInput\n            html={caption}\n            editableInputId={EDITABLE_INPUT_MODAL_ID}\n            placeholder={lang('Caption')}\n            onUpdate={onCaptionUpdate}\n            onSend={onSend}\n            shouldSetFocus={isOpen}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AttachmentModal);\n","import { ChangeEvent, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({ isOpen, onSend, onClear }) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(false);\n  const [solution, setSolution] = useState<string>();\n  const [correctOption, setCorrectOption] = useState<string>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(false);\n      setSolution('');\n      setCorrectOption('');\n      setHasErrors(false);\n    }\n  }, [isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(String(index) === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [correctOption],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(newValue);\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)]) && (\n      <p className=\"error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={(e) => setQuestion(e.currentTarget.value)}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        <Checkbox\n          label={lang('PollAnonymous')}\n          checked={isAnonymous}\n          onChange={handleIsAnonymousChange}\n        />\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({ emoji, focus, onClick }) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  return (\n    <div\n      className={`EmojiButton ${focus ? 'focus' : ''}`}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : <img src={`./img-apple-64/${emoji.image}.png`} alt=\"\" loading=\"lazy\" />}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 9;\nconst EMOJI_MARGIN = 4;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const { transitionClassNames } = useShowTransition(shouldRender, undefined, undefined, 'slow');\n\n  const lang = useLang();\n\n  const emojisPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\" dir=\"auto\">\n        {lang(category.id === 'recent' ? 'RecentStickers' : `Emoji${index}`)}\n      </p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        // @ts-ignore\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { MENU_TRANSITION_DURATION } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n  uncompressEmoji,\n} from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className, onEmojiSelect, recentEmojis,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  useHorizontalScroll(headerRef.current, !IS_SINGLE_COLUMN_LAYOUT);\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis && recentEmojis.length) {\n      themeCategories.unshift({\n        id: 'recent',\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = document.getElementById(`emoji-category-${index}`)!;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!emojis || !canRenderContents) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json') as unknown as Promise<EmojiModule>;\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport windowSize from '../../../util/windowSize';\nimport StickerButton from '../../common/StickerButton';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n  onStickerUnfave: (sticker: ApiSticker) => void;\n};\n\nconst STICKERS_PER_ROW_ON_DESKTOP = 5;\nconst STICKER_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 16;\nconst MOBILE_CONTAINER_PADDING = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  observeIntersection,\n  shouldRender,\n  onStickerSelect,\n  onStickerUnfave,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const { transitionClassNames } = useShowTransition(shouldRender, undefined, undefined, 'slow');\n\n  const stickersPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (STICKER_SIZE_PICKER + STICKER_MARGIN))\n    : STICKERS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(stickerSet.count / stickersPerRow) * (STICKER_SIZE_PICKER + STICKER_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`sticker-set-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\">{stickerSet.title}</p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        // @ts-ignore\n        style={`height: ${height}px;`}\n      >\n        {shouldRender && stickerSet.stickers && stickerSet.stickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            noAnimate={!loadAndPlay}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n            onUnfaveClick={stickerSet.id === 'favorite' ? onStickerUnfave : undefined}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiStickerSet, ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION, STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport StickerSetCoverAnimated from './StickerSetCoverAnimated';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  shouldPlay?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadStickerSets' | 'loadRecentStickers' | 'loadFavoriteStickers' |\n  'addRecentSticker' | 'loadAddedStickers' | 'unfaveSticker'\n)>;\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  addedSetIds,\n  stickerSetsById,\n  shouldPlay,\n  onStickerSelect,\n  loadStickerSets,\n  loadRecentStickers,\n  loadFavoriteStickers,\n  loadAddedStickers,\n  addRecentSticker,\n  unfaveSticker,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return [\n      {\n        id: 'recent',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      },\n      {\n        id: 'favorite',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      },\n      ...addedSetIds.map((id) => stickerSetsById[id]).filter(Boolean),\n    ];\n  }, [addedSetIds, lang, recentStickers, favoriteStickers, stickerSetsById]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers && set.stickers.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadStickerSets();\n      loadRecentStickers();\n      loadFavoriteStickers();\n    }\n  }, [loadAndPlay, loadFavoriteStickers, loadRecentStickers, loadStickerSets]);\n\n  useEffect(() => {\n    if (addedSetIds && addedSetIds.length) {\n      loadAddedStickers();\n    }\n  }, [addedSetIds, loadAddedStickers]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    onStickerSelect(sticker);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers && stickerSet.stickers[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    if (stickerSet.id === 'recent' || stickerSet.id === 'favorite' || stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === 'recent' || stickerSet.id === 'favorite'}\n          color=\"translucent\"\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === 'recent' ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === 'favorite' ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.isAnimated ? (\n            <StickerSetCoverAnimated\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          observeIntersection={observeIntersectionForCovers}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets || !canSendStickers) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">Sending stickers is not allowed in this chat.</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">You have no saved Stickers.</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        {allSets.map(renderCover)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(shouldPlay && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n    } = global.stickers;\n\n    return {\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      shouldPlay: global.settings.byKey.shouldLoopStickers,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadStickerSets',\n    'loadRecentStickers',\n    'loadFavoriteStickers',\n    'loadAddedStickers',\n    'addRecentSticker',\n    'unfaveSticker',\n  ]),\n)(StickerPicker));\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiVideo } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useTransitionForMedia from '../../hooks/useTransitionForMedia';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\n\nimport Spinner from '../ui/Spinner';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick: (gif: ApiVideo) => void;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif, observeIntersection, isDisabled, className, onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const hasThumbnail = gif.thumbnail && !!gif.thumbnail.dataUri;\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail && gif.thumbnail.dataUri, Boolean(previewBlobUrl));\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { transitionClassNames } = useTransitionForMedia(hasThumbnail || previewBlobUrl || videoData, 'slow');\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n\n  useVideoCleanup(videoRef, [shouldRenderVideo]);\n\n  const handleClick = useCallback(\n    () => onClick({\n      ...gif,\n      blobUrl: videoData,\n    }),\n    [onClick, gif, videoData],\n  );\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    transitionClassNames,\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onClick={handleClick}\n    >\n      {hasThumbnail && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n      )}\n      {!hasThumbnail && previewBlobUrl && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"thumbnail\"\n        />\n      )}\n      {(shouldRenderVideo || previewBlobUrl) && (\n        <video\n          ref={videoRef}\n          autoPlay\n          loop\n          muted\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        >\n          <source src={videoData} />\n        </video>\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || hasThumbnail ? 'white' : 'black'} />\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import React, {\n  FC, useEffect, memo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs: boolean;\n  onGifSelect: (gif: ApiVideo) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadSavedGifs'>;\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  onGifSelect,\n  loadSavedGifs,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={onGifSelect}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      savedGifs: global.gifs.saved.gifs,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadSavedGifs']),\n)(GifPicker));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'Stickers',\n  'GIFs',\n}\n\n// Getting enum string values for display in Tabs.\n// See: https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings\nexport const SYMBOL_MENU_TAB_TITLES = Object.values(SymbolMenuTabs)\n  .filter((value): value is string => typeof value === 'string');\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={SYMBOL_MENU_TAB_TITLES[tab]}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {renderTabButton(SymbolMenuTabs.Emoji)}\n      {renderTabButton(SymbolMenuTabs.Stickers)}\n      {renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {activeTab === SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker, ApiVideo } from '../../../api/types';\n\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onStickerSelect: (sticker: ApiSticker, shouldPreserveInput?: boolean) => void;\n  onGifSelect: (gif: ApiVideo) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: AnyToVoidFunction;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  isOpen, allowedAttachmentOptions, isLeftColumnShown,\n  onLoad, onClose,\n  onEmojiSelect, onStickerSelect, onGifSelect,\n  onRemoveSymbol, onSearchOpen, addRecentEmoji,\n}) => {\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  useLayoutEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, activeTab, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => {\n      return [...emojis, name];\n    });\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    onStickerSelect(sticker, true);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  const { canSendStickers, canSendGifs } = allowedAttachmentOptions;\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={handleStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={SYMBOL_MENU_TAB_TITLES.length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {IS_SINGLE_COLUMN_LAYOUT && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n      />\n    </>\n  );\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const className = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      !isLeftColumnShown && 'middle-column-open',\n    );\n\n    return (\n      <Portal>\n        <div className={className}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SymbolMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: global.isLeftColumnShown,\n    };\n  },\n)(SymbolMenu));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { CONTENT_TYPES_FOR_QUICK_UPLOAD } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  onFileSelect: (files: File[], isQuick: boolean) => void;\n  onPollCreate: () => void;\n  onClose: () => void;\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  isOpen, allowedAttachmentOptions, onFileSelect, onPollCreate, onClose,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const handleFileSelect = useCallback((e: Event, isQuick: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      onFileSelect(Array.from(files), isQuick);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(CONTENT_TYPES_FOR_QUICK_UPLOAD).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const lang = useLang();\n\n  const { canAttachMedia, canAttachPolls } = allowedAttachmentOptions;\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"AttachMenu fluid\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n      {!canAttachMedia && (\n        <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n      )}\n      {canAttachMedia && (\n        <>\n          <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n            {lang('AttachmentMenu.PhotoOrVideo')}\n          </MenuItem>\n          <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n        </>\n      )}\n      {canAttachPolls && (\n        <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(AttachMenu);\n","import React, {\n  FC, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'clearStickersForEmoji'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  onStickerSelect,\n  stickers,\n  clearStickersForEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(clearStickersForEmoji) : undefined), [isOpen, clearStickersForEmoji]);\n\n  const handleMouseEnter = () => {\n    document.body.classList.add('no-select');\n  };\n\n  const handleMouseLeave = () => {\n    document.body.classList.remove('no-select');\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers && displayedStickers.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n\n    return { stickers };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['clearStickersForEmoji']),\n)(StickerTooltip));\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onSilentSend?: NoneToVoidFunction;\n  onScheduleSend?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen, onSilentSend, onScheduleSend, onClose, onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      className=\"CustomSendMenu\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSilentSend && <MenuItem icon=\"mute\" onClick={onSilentSend}>{lang('SendWithoutSound')}</MenuItem>}\n      {onScheduleSend && <MenuItem icon=\"schedule\" onClick={onScheduleSend}>{lang('ScheduleMessage')}</MenuItem>}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport captureKeyboardListeners from '../../../util/captureKeyboardListeners';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\nconst NO_EMOJI_SELECTED_INDEX = -1;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onEmojiSelect: (text: string) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: AnyToVoidFunction;\n  emojis: Emoji[];\n};\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  onClose,\n  onEmojiSelect,\n  addRecentEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: Emoji[] = usePrevDuringAnimation(emojis.length ? emojis : undefined, CLOSE_DURATION) || [];\n\n  const [selectedIndex, setSelectedIndex] = useState(NO_EMOJI_SELECTED_INDEX);\n\n  useEffect(() => {\n    setSelectedIndex(0);\n  }, [emojis]);\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!emojis.length) {\n      return NO_EMOJI_SELECTED_INDEX;\n    }\n\n    const emojisCount = emojis.length;\n    return cycleRestrict(emojisCount, newIndex);\n  }, [emojis]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedIndex, getSelectedIndex]);\n\n  const handleSelectEmoji = useCallback((e: KeyboardEvent) => {\n    if (emojis.length && selectedIndex > NO_EMOJI_SELECTED_INDEX) {\n      const emoji = emojis[selectedIndex];\n      if (emoji) {\n        e.preventDefault();\n        onEmojiSelect(emoji.native);\n        addRecentEmoji({ emoji: emoji.id });\n      }\n    }\n  }, [addRecentEmoji, emojis, onEmojiSelect, selectedIndex]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  useEffect(() => (isOpen ? captureKeyboardListeners({\n    onEsc: onClose,\n    onLeft: (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: (e: KeyboardEvent) => handleArrowKey(1, e),\n    onEnter: handleSelectEmoji,\n  }) : undefined), [handleArrowKey, handleSelectEmoji, isOpen, onClose]);\n\n  const handleMouseEnter = () => {\n    document.body.classList.add('no-select');\n  };\n\n  const handleMouseLeave = () => {\n    document.body.classList.remove('no-select');\n  };\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          <EmojiButton\n            key={emoji.id}\n            emoji={emoji}\n            focus={selectedIndex === index}\n            onClick={handleClick}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\n\nimport { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: string | undefined = '';\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable=\"false\" />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport useMedia from '../../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../../hooks/useTransitionForMedia';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const {\n    shouldRenderThumb, shouldRenderFullMedia, transitionClassNames,\n  } = useTransitionForMedia(mediaBlobUrl, 'slow');\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        {shouldRenderThumb && (\n          <img src={(photo && photo.thumbnail && photo.thumbnail.dataUri) || thumbnailDataUrl} alt=\"\" />\n        )}\n        {shouldRenderFullMedia && (\n          <img src={mediaBlobUrl} className={`${transitionClassNames} full-media`} alt=\"\" />\n        )}\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={shouldRenderFullMedia ? mediaBlobUrl : (thumbnail && thumbnail.dataUri) || thumbnailDataUrl}\n      transitionClassNames={shouldRenderFullMedia ? transitionClassNames : undefined}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import React, {\n  FC, memo, useCallback,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst StickerResult: FC<OwnProps> = ({ inlineResult, observeIntersection, onClick }) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm } from '../../../api/types';\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport captureKeyboardListeners from '../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: number;\n  isGallery?: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  onSelectResult: (inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('sendBotCommand' | 'openChat' | 'sendInlineBotResult')>;\n\nconst InlineBotTooltip: FC<OwnProps & DispatchProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  loadMore,\n  onClose,\n  openChat,\n  sendBotCommand,\n  onSelectResult,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const [selectedIndex, setSelectedIndex] = useState(-1);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  useEffect(() => {\n    setSelectedIndex(isGallery ? -1 : 0);\n  }, [inlineBotResults, isGallery]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!inlineBotResults || !inlineBotResults.length) {\n      return -1;\n    }\n\n    return cycleRestrict(inlineBotResults.length, newIndex);\n  }, [inlineBotResults]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    if (isGallery) {\n      return;\n    }\n\n    e.preventDefault();\n    setSelectedIndex((index) => (getSelectedIndex(index + value)));\n  }, [isGallery, getSelectedIndex]);\n\n  const handleSelectInlineBotResult = useCallback((e: KeyboardEvent) => {\n    if (inlineBotResults && inlineBotResults.length && selectedIndex > -1) {\n      const inlineResult = inlineBotResults[selectedIndex];\n      if (inlineResult) {\n        e.preventDefault();\n        onSelectResult(inlineResult);\n      }\n    }\n  }, [inlineBotResults, onSelectResult, selectedIndex]);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n\n  useEffect(() => (isOpen ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: (e: KeyboardEvent) => handleArrowKey(1, e),\n    onEnter: handleSelectInlineBotResult,\n  }) : undefined), [handleArrowKey, handleSelectInlineBotResult, isGallery, isOpen, onClose]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    sendBotCommand({ chatId: botId, command: `/start ${switchPm!.startParam}` });\n  }, [botId, openChat, sendBotCommand, switchPm]);\n\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults && inlineBotResults.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults && !inlineBotResults.length\n    ? prevInlineBotResults\n    : inlineBotResults;\n\n  if (!shouldRender || !renderedInlineBotResults || (!renderedInlineBotResults.length && !switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    isGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={isGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'video':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'sendBotCommand', 'openChat', 'sendInlineBotResult',\n  ]),\n)(InlineBotTooltip));\n","import React, {\n  FC, useMemo, memo, useRef,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiUser, ApiChat } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../modules/selectors';\nimport {\n  getMessageSummaryText,\n  getChatTitle,\n  getUserFullName,\n  isChatChannel,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport { orderBy, pick } from '../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: number;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchTextMessagesLocal' | 'focusMessage'>;\n\ninterface Result {\n  message: ApiMessage;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  onClick: NoneToVoidFunction;\n}\n\nconst RightSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  onClose,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  searchTextMessagesLocal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n\n  const foundResults = useMemo(() => {\n    if (!query || !foundIds || !foundIds.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const results = foundIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean) as Result[];\n\n    return orderBy(results, ({ message }) => message.date, 'desc');\n  }, [chatId, threadId, focusMessage, foundIds, chat, messagesById, query]);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: Result) => {\n    const title = senderChat ? getChatTitle(lang, senderChat) : getUserFullName(senderUser);\n    const text = getMessageSummaryText(lang, message);\n\n    return (\n      <ListItem\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} />\n        <div className=\"info\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{title && renderText(title)}</h3>\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {renderText(text, ['emoji', 'highlight'], { highlight: query })}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  useHistoryBack(isActive, onClose);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = foundResults && foundResults[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  return (\n    <InfiniteScroll\n      className=\"RightSearch custom-scroll\"\n      items={foundResults}\n      preloadBackwards={0}\n      onLoadMore={searchTextMessagesLocal}\n      noFastList\n      onKeyDown={handleKeyDown}\n      ref={containerRef}\n    >\n      <p className=\"helper-text\" dir=\"auto\">\n        {!query ? (\n          lang('lng_dlg_search_for_messages')\n        ) : (totalCount === 0 || !foundResults.length) ? (\n          lang('lng_search_no_results')\n        ) : totalCount === 1 ? (\n          '1 message found'\n        ) : (\n          `${(foundResults.length && (totalCount || foundResults.length))} messages found`\n        )}\n      </p>\n      {foundResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, ['searchTextMessagesLocal', 'focusMessage']),\n)(RightSearch));\n","import React, {\n  FC, useEffect, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiStickerSet } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { pick } from '../../util/iteratees';\nimport { selectShouldLoopStickers, selectStickerSet } from '../../modules/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport useOnChange from '../../hooks/useOnChange';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isSomeModalOpen: boolean;\n  onModalToggle: (isOpen: boolean) => void;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadStickers' | 'toggleStickerSet'>;\n\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps & DispatchProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  loadStickers, toggleStickerSet, isSomeModalOpen, onModalToggle,\n}) => {\n  const lang = useLang();\n  const isAdded = set && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set && set.stickers);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useOnChange(() => {\n    onModalToggle(isModalOpen);\n  }, [isModalOpen, onModalToggle]);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...set.covers || [], ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY) {\n      loadStickers({ stickerSetId });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main\">\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen || isSomeModalOpen}\n            onClick={openModal}\n          />\n        ))}\n      </div>\n      {canRenderStickers && (\n        <StickerSetModal\n          isOpen={isModalOpen}\n          fromSticker={displayedStickers[0]}\n          onClose={closeModal}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadStickers', 'toggleStickerSet']),\n)(StickerSetResult));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadFeaturedStickers'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  onClose,\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  loadFeaturedStickers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack(isActive, onClose);\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadFeaturedStickers']),\n)(StickerSearch));\n","import React, {\n  FC, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n} from '../../modules/selectors';\nimport { getAllowedAttachmentOptions } from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchMoreGifs' | 'sendMessage' | 'setGifSearchQuery'>;\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  onClose,\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  searchMoreGifs,\n  sendMessage,\n  setGifSearchQuery,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const { canSendGifs } = getAllowedAttachmentOptions(chat, isChatWithBot);\n\n  const handleGifClick = useCallback((gif: ApiVideo) => {\n    if (canSendGifs) {\n      sendMessage({ gif });\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, sendMessage, setGifSearchQuery]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={handleGifClick}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={searchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['searchMoreGifs', 'sendMessage', 'setGifSearchQuery']),\n)(GifSearch));\n","import React, {\n  FC, useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport { pick } from '../../util/iteratees';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: number[];\n  offset: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadPollOptionResults' | 'openChat' | 'closePollResults'>;\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n  loadPollOptionResults,\n  openChat,\n  closePollResults,\n}) => {\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = global.pollResults;\n\n    return {\n      voters: voters && voters[answer.option],\n      offset: (offsets && offsets[answer.option]) || '',\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, ['loadPollOptionResults', 'openChat', 'closePollResults']),\n)(PollAnswerResults));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage } from '../../modules/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack(isActive, onClose);\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{summary.question}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {lastSyncTime && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n      lastSyncTime,\n    } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  selectChat, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../../modules/selectors';\nimport { selectIsChatMuted } from '../../../modules/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'updateContact' | 'deleteUser' | 'deleteHistory' | 'closeManagement' | 'openChat'\n)>;\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps & DispatchProps> = ({\n  userId,\n  user,\n  chat,\n  progress,\n  isMuted,\n  updateContact,\n  deleteUser,\n  deleteHistory,\n  closeManagement,\n  openChat,\n  onClose,\n  isActive,\n}) => {\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteHistory({\n      chatId: chat.id,\n      shouldDeleteForAll: false,\n    });\n    deleteUser({ userId });\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.id, closeDeleteDialog, closeManagement, deleteHistory, deleteUser, openChat, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId)!;\n    const { progress } = global.management;\n    const isMuted = selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    return {\n      user, chat, progress, isMuted,\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, [\n    'updateContact', 'deleteUser', 'closeManagement', 'openChat', 'deleteHistory',\n  ]),\n)(ManageUser));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport { ApiChat, ApiChatBannedRights, ApiMediaFormat } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatBasicGroup } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat } from '../../../modules/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'togglePreHistoryHidden' | 'updateChat' | 'closeManagement' |\n  'leaveChannel' | 'deleteChannel' | 'deleteChat' | 'openChat'\n)>;\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\n\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = 8;\n\nconst ManageGroup: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  onScreenSelect,\n  togglePreHistoryHidden,\n  updateChat,\n  deleteChat,\n  leaveChannel,\n  deleteChannel,\n  closeManagement,\n  openChat,\n  onClose,\n  isActive,\n}) => {\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = [\n      'sendMessages',\n      'sendMedia',\n      'embedLinks',\n      'sendPolls',\n      'changeInfo',\n      'inviteUsers',\n      'pinMessages',\n    ].filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = (chat.fullInfo && chat.fullInfo.adminMembers && chat.fullInfo.adminMembers.length) || 0;\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount!)}</span>\n          </ListItem>\n\n          {chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\">\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const hasLinkedChannel = Boolean(chat.fullInfo && chat.fullInfo.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n\n    return {\n      chat,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'togglePreHistoryHidden', 'updateChat', 'closeManagement',\n    'leaveChannel', 'deleteChannel', 'deleteChat', 'openChat',\n  ]),\n)(ManageGroup));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatDefaultBannedRights'>;\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\n\nfunction getLangKeyForBannedRightKey(key: string) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps & DispatchProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  updateChatDefaultBannedRights,\n  onClose,\n  isActive,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  useEffect(() => {\n    setPermissions((chat && chat.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [chat]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => !!bannedRights);\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, key) => {\n      if (\n        !bannedRights[key as keyof ApiChatBannedRights]\n        || (defaultBannedRights && defaultBannedRights[key as keyof ApiChatBannedRights])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        <div className=\"section\">\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat, currentUserId: global.currentUserId };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatDefaultBannedRights']),\n)(ManageGroupPermissions));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { getUserFullName } from '../../../modules/helpers';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<number, ApiUser>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatMemberBannedRights'>;\n\nconst ManageGroupRemovedUsers: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  usersById,\n  updateChatMemberBannedRights,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang('NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n\n    return { chat, usersById };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatMemberBannedRights']),\n)(ManageGroupRemovedUsers));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport { ApiChat, ApiMediaFormat } from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { getChatAvatarHash, getHasAdminRight } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'toggleSignatures' | 'updateChat' | 'closeManagement' | 'leaveChannel' | 'deleteChannel' | 'openChat'\n)>;\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\n\nconst ManageChannel: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  onScreenSelect,\n  updateChat,\n  toggleSignatures,\n  closeManagement,\n  leaveChannel,\n  deleteChannel,\n  openChat,\n  onClose,\n  isActive,\n}) => {\n  const currentTitle = chat ? (chat.title || '') : '';\n  const currentAbout = chat && chat.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat && chat.fullInfo && chat.fullInfo.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = (chat && chat.fullInfo && chat.fullInfo.adminMembers && chat.fullInfo.adminMembers.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount!, 'i')}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const isSignaturesShown = Boolean(chat && chat.isSignaturesShown);\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'toggleSignatures', 'updateChat', 'closeManagement', 'leaveChannel', 'deleteChannel', 'openChat',\n  ]),\n)(ManageChannel));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { selectChat, selectManagement } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport { isChatChannel } from '../../../modules/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'checkPublicLink' | 'updatePublicLink' | 'updatePrivateLink'\n)>;\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  onClose,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkPublicLink,\n  updatePublicLink,\n  updatePrivateLink,\n}) => {\n  const isPublic = Boolean(chat.username);\n  const privateLink = chat.fullInfo && chat.fullInfo.inviteLink;\n\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [username, setUsername] = useState();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n\n  const canUpdate = (\n    (privacyType === 'public' && username && isUsernameAvailable)\n    || (privacyType === 'private' && isPublic)\n  );\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleOptionChange = useCallback((value: string) => {\n    setPrivacyType(value as PrivacyType);\n  }, []);\n\n  const handleSave = useCallback(() => {\n    updatePublicLink({ username: privacyType === 'public' ? username : '' });\n  }, [privacyType, updatePublicLink, username]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={chat.username}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkUsername={checkPublicLink}\n              onChange={setUsername}\n            />\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: global.management.progress,\n      isUsernameAvailable,\n    };\n  },\n  (setGlobal, actions) => pick(actions, [\n    'checkPublicLink', 'updatePublicLink', 'updatePrivateLink',\n  ]),\n)(ManageChatPrivacyType));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { selectChat } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport getAnimationData from '../../common/helpers/animatedAssets';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../modules/helpers';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<number, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: number[];\n  isChannel?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadGroupsForDiscussion' | 'linkDiscussionGroup' | 'unlinkDiscussionGroup'>;\n\nconst ManageDiscussion: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n  loadGroupsForDiscussion,\n  linkDiscussionGroup,\n  unlinkDiscussionGroup,\n}) => {\n  const [linkedGroupId, setLinkedGroupId] = useState<number>();\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const lang = useLang();\n  const linkedChatId = linkedChat && linkedChat.id;\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('DiscussionGroups').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const onDiscussionClick = (groupId: number) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n      // return renderText(\n      //   lang('DiscussionLinkGroupPublicAlert', linkedChat.title, chat!.title),\n      //   ['br', 'simple_markdown'],\n      // );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n    // return renderText(\n    //   lang('DiscussionLinkGroupPrivateAlert', linkedChat.title, chat!.title),\n    //   ['br', 'simple_markdown'],\n    // );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => { onDiscussionClick(id); }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n          isButtonsInOneRow\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"section-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"discussionGroupsDucks\"\n                size={STICKER_SIZE_DISCUSSION_GROUPS}\n                animationData={animationData}\n                play={isAnimationLoaded}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat && chat.fullInfo && chat.fullInfo.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadGroupsForDiscussion', 'linkDiscussionGroup', 'unlinkDiscussionGroup',\n  ]),\n)(ManageDiscussion));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: number;\n  selectedChatMemberId?: number;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatMemberBannedRights'>;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  updateChatMemberBannedRights,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat && chat.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember && selectedChatMember.bannedRights) || (chat && chat.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setIsLoading(false);\n  }, [chat, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, permissions, updateChatMemberBannedRights]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              disabled={getControlIsDisabled('sendStickers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              disabled={getControlIsDisabled('sendPolls')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              disabled={getControlIsDisabled('embedLinks')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              disabled={getControlIsDisabled('pinMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div className=\"section\">\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatMemberBannedRights']),\n)(ManageGroupUserPermissions));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../modules/helpers';\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: number;\n  isChannel: boolean;\n  usersById: Record<number, ApiUser>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  usersById,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  function handleRecentActionsClick() {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang, usersById]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            onClick={handleRecentActionsClick}\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n      usersById,\n    };\n  },\n  // (setGlobal, actions): DispatchProps => pick(actions, ['togglePreHistoryHidden', 'updateChat']),\n)(ManageChatAdministrators));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat, onClose, isActive }) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const adminMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { selectChat } from '../../../modules/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: number;\n  selectedChatMemberId?: number;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<number, ApiUser>;\n  currentUserId?: number;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatAdmin'>;\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps & DispatchProps> = ({\n  selectedChatMemberId,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isFormFullyDisabled,\n  updateChatAdmin,\n  onClose,\n  isActive,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return undefined;\n    }\n\n    return chat.fullInfo.adminMembers.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat && chat.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember && selectedChatMember.adminRights) || {});\n    setCustomTitle(((selectedChatMember && selectedChatMember.customTitle) || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(false);\n    setIsLoading(false);\n  }, [selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [chat, selectedChatMemberId, permissions, customTitle, updateChatAdmin]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedChatMemberId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedChatMemberId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (!selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!!permissions.changeInfo}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={!!permissions.postMessages}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={!!permissions.editMessages}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={!!permissions.deleteMessages}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={!!permissions.banUsers}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!!permissions.inviteUsers}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!!permissions.pinMessages}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={!!permissions.addAdmins}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={!!permissions.anonymous}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedChatMemberId && !isFormFullyDisabled && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isDismissConfirmationDialogOpen}\n        onClose={closeDismissConfirmationDialog}\n        text=\"Are you sure you want to dismiss this admin?\"\n        confirmLabel=\"Dismiss\"\n        confirmHandler={handleDismissAdmin}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isFormFullyDisabled,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatAdmin']),\n)(ManageGroupAdminRights));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatMember, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { selectChat } from '../../../modules/selectors';\nimport { sortUserIds, isChatChannel } from '../../../modules/helpers';\nimport { pick } from '../../../util/iteratees';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openUserInfo'>;\n\nconst ManageGroupMembers: FC<OwnProps & StateProps & DispatchProps> = ({\n  members,\n  usersById,\n  isChannel,\n  openUserInfo,\n  onClose,\n  isActive,\n  serverTimeOffset,\n}) => {\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(members.map(({ userId }) => userId), usersById, undefined, serverTimeOffset);\n  }, [members, serverTimeOffset, usersById]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  useHistoryBack(isActive, onClose);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => handleMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const members = chat && chat.fullInfo && chat.fullInfo.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n  ]),\n)(ManageGroupMembers));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatMember, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { sortUserIds, isChatChannel } from '../../../modules/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  serverTimeOffset,\n}) => {\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById, undefined, serverTimeOffset,\n    );\n  }, [members, serverTimeOffset, usersById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: number) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const members = chat && chat.fullInfo && chat.fullInfo.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens, ManagementType } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../modules/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageGroupRemovedUsers from './ManageGroupRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\n\nexport type OwnProps = {\n  chatId: number;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: number;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageGroupRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const CURRENCIES: Record<string, string> = {\n  USD: '$',\n  EUR: '€',\n  GBP: '£',\n  JPY: '¥',\n  RUB: '₽',\n  UAH: '₴',\n  INR: '₹',\n  AED: 'د.إ',\n};\n\nexport function getCurrencySign(currency: string | undefined): string {\n  if (!currency) {\n    return '';\n  }\n  return CURRENCIES[currency] || '';\n}\n","const VISA = /^4[0-9]{12}(?:[0-9]{1,3})?$/;\nconst MASTERCARD1 = /^5[1-5][0-9]{11,14}$/;\nconst MASTERCARD2 = /^2[2-7][0-9]{11,14}$/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\nimport { countryList } from '../../util/phoneNumber';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload,\n        billingCountry: getBillingCountry(action.payload),\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.countryIso2) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: getBillingCountry(action.payload.countryIso2),\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nfunction getBillingCountry(countryCode: string) {\n  const country = countryList.find(({ id }) => id === countryCode);\n  return country ? country.name : '';\n}\n\nexport default () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n","import { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import { ChangeEvent, RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: any;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import React, {\n  FC, useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\nimport { countryList } from '../../util/phoneNumber';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label=\"Address1 (Street)\"\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label=\"Address2 (Street)\"\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label=\"City\"\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              error={formErrors.city}\n            />\n            <InputText\n              label=\"State\"\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label=\"Country\"\n              placeholder=\"Country\"\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n            >\n              {countryList.map(({ name, id }) => (\n                <option\n                  value={id}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label=\"Post Code\"\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label=\"Full name\"\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label=\"Email\"\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label=\"Phone number\"\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import React, {\n  FC, useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport { ShippingOption } from '../../types/index';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  useEffect(() => {\n    if (!shippingOptions || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: `${currency} ${String(amount / 100)}`,\n    value,\n  }))), [shippingOptions, currency]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>Select shipping method</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import React, {\n  FC, memo,\n} from '../../lib/teact/teact';\n\nimport { Price } from '../../types';\n\nimport './Checkout.scss';\n\nexport type OwnProps = {\n  invoiceContent?: {\n    title?: string;\n    description?: string;\n    text?: string;\n    photoUrl?: string;\n  };\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  shippingPrices?: Price[];\n  currency?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  invoiceContent,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const { photoUrl, title, text } = (invoiceContent || {});\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n  return (\n    <div className=\"Checkout\">\n      <div className=\"description has-image\">\n        { photoUrl && (\n          <img src={photoUrl} alt=\"\" />\n        )}\n        <div className=\"text\">\n          <h5>{ title }</h5>\n          <p>{ text }</p>\n        </div>\n      </div>\n      <div className=\"price-info\">\n        { prices && prices.map((item) => (\n          renderPaymentItem(item.label, item.amount, currency, false)\n        )) }\n        { shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(item.label, item.amount, currency, false)\n        )) }\n        { totalPrice !== undefined && (\n          renderPaymentItem('Total', totalPrice, currency, true)\n        ) }\n      </div>\n      <div className=\"invoice-info\">\n        {paymentMethod && renderCheckoutItem('icon-card', paymentMethod, 'Payment method')}\n        {paymentProvider && renderCheckoutItem('stripe-provider', paymentProvider, 'Payment provider')}\n        {shippingAddress && renderCheckoutItem('icon-location', shippingAddress, 'Shipping address')}\n        {name && renderCheckoutItem('icon-user', name, 'Name')}\n        {phone && renderCheckoutItem('icon-phone', phone, 'Phone number')}\n        {shippingMethod && renderCheckoutItem('icon-truck', shippingMethod, 'Shipping method')}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPaymentItem(title: string, value: number, currency?: string, main = false) {\n  return (\n    <div className={`price-info-item ${main ? 'price-info-item-main' : ''}`}>\n      <div className=\"title\">\n        { title }\n      </div>\n      <div className=\"value\">\n        { `${currency || ''} ${(value / 100).toFixed(2)}` }\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem(icon: string, title: string, data: string) {\n  return (\n    <div className=\"checkout-info-item\">\n      <i className={icon}> </i>\n      <div className=\"info\">\n        <div className=\"title\">\n          { title }\n        </div>\n        <p className=\"data\">\n          { data }\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Checkout);\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  // eslint-disable-next-line no-null/no-null\n  const expiryInputRef = useRef<HTMLInputElement>(null);\n\n  const handleKeyDown = useCallback((e) => {\n    if (e.key === 'Backspace' && value.charAt(value.length - 1) === '/') {\n      const newValue = value.slice(0, value.length - 1);\n      if (expiryInputRef.current) {\n        expiryInputRef.current.value = newValue;\n      }\n    }\n  }, [value]);\n\n  const handleChange = useCallback((e) => {\n    onChange(formatCardExpiry(e.target.value));\n  }, [onChange]);\n\n  return (\n    <InputText\n      label=\"Expiry date\"\n      ref={expiryInputRef}\n      onChange={handleChange}\n      onKeyDown={handleKeyDown}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      maxLength={MAX_FIELD_LENGTH}\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts && parts[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts && parts[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","export default __webpack_public_path__ + \"mastercard.4216118edafe23cc2dec7b8807ba4622.svg\";","export default __webpack_public_path__ + \"visa.e5a7c336e1deb4b92a636e2e053878c4.svg\";","import React, {\n  FC, memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\n// @ts-ignore\nimport mastercardIconPath from '../../assets/mastercard.svg';\n// @ts-ignore\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n    if (cardNumberRef.current) {\n      cardNumberRef.current.value = newValue;\n    }\n  }, [onChange, cardNumberRef]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <span className=\"left-addon\">{cardIcon}</span>\n      <InputText\n        ref={cardNumberRef}\n        label=\"Card number\"\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-left-addon' : ''}\n        error={error}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n      />\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import React, {\n  FC, useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\nimport { countryList } from '../../util/phoneNumber';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    dispatch({ type: 'changeCvvCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label=\"Name on card\"\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label=\"CVV code\"\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            error={formErrors.cvv}\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label=\"Country\"\n            placeholder=\"Country\"\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ name }) => (\n                <option\n                  value={name}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label=\"Post Code\"\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            error={formErrors.billingZip}\n          />\n        )}\n        { canSaveCredentials && (\n          <Checkbox\n            label={lang('PaymentCardSavePaymentInformation')}\n            checked={state.saveCredentials}\n            onChange={handleChangeSaveCredentials}\n          />\n        ) }\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../global/types';\nimport { PaymentStep, ShippingOption, Price } from '../../types';\nimport { ApiError, ApiInviteInfo } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport { getCurrencySign } from '../middle/helpers/getCurrencySign';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport { getShippingErrors } from '../../modules/helpers/payments';\nimport usePaymentReducer, { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  nameRequested?: boolean;\n  shippingAddressRequested?: boolean;\n  phoneRequested?: boolean;\n  emailRequested?: boolean;\n  flexible?: boolean;\n  phoneToProvider?: boolean;\n  emailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  globalDialogs?: (ApiError | ApiInviteInfo)[];\n};\n\ntype GlobalStateProps = Pick<GlobalState['payment'], 'step' | 'shippingOptions' |\n'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoiceContent' |\n'error'>;\n\ntype DispatchProps = Pick<GlobalActions, 'validateRequestedInfo' | 'sendPaymentForm' | 'setPaymentStep'\n| 'sendCredentialsInfo' | 'clearPaymentError' >;\n\nconst Invoice: FC<OwnProps & StateProps & GlobalStateProps & DispatchProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  nameRequested,\n  shippingAddressRequested,\n  phoneRequested,\n  emailRequested,\n  phoneToProvider,\n  emailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoiceContent,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  error,\n  globalDialogs,\n  validateRequestedInfo,\n  sendPaymentForm,\n  setPaymentStep,\n  sendCredentialsInfo,\n  clearPaymentError,\n}) => {\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const currencySign = getCurrencySign(currency);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useEffect(() => {\n    if (step || error || globalDialogs) {\n      setIsLoading(false);\n    }\n  }, [step, error, globalDialogs]);\n\n  useEffect(() => {\n    if (error && error.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.fieldError,\n        },\n      });\n      return;\n    }\n    if (globalDialogs && globalDialogs.length) {\n      const errors = getShippingErrors(globalDialogs);\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          ...errors,\n        },\n      });\n    }\n  }, [error, globalDialogs, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingAddress || {}),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping);\n  }, [step, paymentState.shipping, prices, shippingOptions]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <Button\n          isText\n          onClick={clearPaymentError}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(cuurentStep: PaymentStep) {\n    switch (cuurentStep) {\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(shippingAddressRequested)}\n            needEmail={Boolean(emailRequested || emailToProvider)}\n            needPhone={Boolean(phoneRequested || phoneToProvider)}\n            needName={Boolean(nameRequested)}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currencySign}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n          />\n        );\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            prices={prices}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoiceContent={invoiceContent}\n            checkoutInfo={checkoutInfo}\n            currency={currencySign}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  const handleButtonClick = useCallback(() => {\n    setIsLoading(true);\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return validateRequest();\n      case PaymentStep.Shipping:\n        return setStep(PaymentStep.PaymentInfo);\n      case PaymentStep.PaymentInfo:\n        return sendCredentials();\n      case PaymentStep.Checkout:\n        return sendForm();\n      default:\n        return () => {};\n    }\n  }, [step, validateRequest, setStep, sendCredentials, sendForm]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('Checkout.PayPrice', `${currencySign}${(totalPrice / 100).toFixed(2)}`);\n      default:\n        return lang('Next');\n    }\n  }, [step, lang, currencySign, totalPrice]);\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <p>\n          Sorry, Telegram WebZ doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <Button\n          isText\n          onClick={onClose}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"PaymentModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={onClose}\n          ariaLabel=\"Close\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          {() => (\n            <div className=\"content custom-scroll\">\n              {renderModalContent(step)}\n            </div>\n          )}\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      <div className=\"footer\">\n        <Button\n          type=\"submit\"\n          onClick={handleButtonClick}\n          disabled={isLoading}\n          isLoading={isLoading}\n        >\n          {buttonText}\n        </Button>\n      </div>\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContent,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n    } = global.payment;\n\n    const isProviderError = Boolean(invoice && (!nativeProvider || nativeProvider !== DEFAULT_PROVIDER));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      nameRequested,\n      phoneRequested,\n      emailRequested,\n      shippingAddressRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n    } = (invoice || {});\n\n    return {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      nameRequested,\n      shippingAddressRequested,\n      phoneRequested,\n      emailRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoiceContent,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      globalDialogs: global.dialogs,\n    };\n  },\n  (setGlobal, actions): DispatchProps => {\n    return pick(actions, [\n      'validateRequestedInfo',\n      'sendPaymentForm',\n      'setPaymentStep',\n      'sendCredentialsInfo',\n      'clearPaymentError',\n    ]);\n  },\n)(Invoice));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option ? option.prices : undefined;\n}\n\nfunction getTotalPrice(prices: Price[] = [], shippingOptions: ShippingOption[] | undefined, shippingOption: string) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = 0;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = `${cardTypeText} *${state.cardNumber.slice(-4)}`;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption ? shippingOption.title : undefined;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nfunction getCredentials(paymentState: FormState) {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, {\n  FC, memo, useMemo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { Price } from '../../types';\nimport { ApiShippingAddress } from '../../api/types/payments';\n\nimport useLang from '../../hooks/useLang';\nimport { getCurrencySign } from '../middle/helpers/getCurrencySign';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photoUrl?: string;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  totalAmount,\n  currency,\n  info,\n  photoUrl,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n  const currencySign = getCurrencySign(currency);\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={onClose}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            invoiceContent={{\n              photoUrl,\n              text,\n              title,\n            }}\n            checkoutInfo={checkoutInfo}\n            currency={currencySign}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = global.payment;\n    const {\n      currency,\n      prices: mapedPrices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices: mapedPrices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress && shippingAddress.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    paymentProvider: 'Stripe',\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import { ApiMediaFormat } from '../../../api/types';\n\nimport * as mediaLoader from '../../../util/mediaLoader';\n\n// @ts-ignore\nimport MonkeyIdle from '../../../assets/TwoFactorSetupMonkeyIdle.tgs';\n// @ts-ignore\nimport MonkeyTracking from '../../../assets/TwoFactorSetupMonkeyTracking.tgs';\n// @ts-ignore\nimport MonkeyClose from '../../../assets/TwoFactorSetupMonkeyClose.tgs';\n// @ts-ignore\nimport MonkeyPeek from '../../../assets/TwoFactorSetupMonkeyPeek.tgs';\n// @ts-ignore\nimport FoldersAll from '../../../assets/FoldersAll.tgs';\n// @ts-ignore\nimport FoldersNew from '../../../assets/FoldersNew.tgs';\n// @ts-ignore\nimport DiscussionGroups from '../../../assets/DiscussionGroupsDucks.tgs';\n\nexport const ANIMATED_STICKERS_PATHS = {\n  MonkeyIdle,\n  MonkeyTracking,\n  MonkeyClose,\n  MonkeyPeek,\n  FoldersAll,\n  FoldersNew,\n  DiscussionGroups,\n};\n\nexport default function getAnimationData(name: keyof typeof ANIMATED_STICKERS_PATHS) {\n  const path = ANIMATED_STICKERS_PATHS[name].replace(window.location.origin, '');\n\n  return mediaLoader.fetch(`file${path}`, ApiMediaFormat.Lottie);\n}\n","export default __webpack_public_path__ + \"TwoFactorSetupMonkeyIdle.dea4a492c144df84ddab778dc8a3f0cd.tgs\";","export default __webpack_public_path__ + \"TwoFactorSetupMonkeyTracking.eb5a7a6f166fb7589c12e6248561fb58.tgs\";","export default __webpack_public_path__ + \"TwoFactorSetupMonkeyClose.604c4c833d322b7e6c3ea19bef058241.tgs\";","export default __webpack_public_path__ + \"TwoFactorSetupMonkeyPeek.1905436b042520363d7e59f5d7f903ab.tgs\";","export default __webpack_public_path__ + \"FoldersAll.3f9f9e243d19f0fbf9aaaff11cbd4572.tgs\";","export default __webpack_public_path__ + \"FoldersNew.9a40d71c0c8be70f5bd14ff2d7bc1593.tgs\";","export default __webpack_public_path__ + \"DiscussionGroupsDucks.9ea453d1be9d1b0ee77a992f8e587485.tgs\";","import React, {\n  FC, useEffect, useState, memo,\n} from '../../lib/teact/teact';\n\nimport { DEBUG } from '../../config';\nimport { blobToFile, blobToDataUri } from '../../util/files';\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\nimport Modal from './Modal';\nimport Loading from './Loading';\n\nimport './CropModal.scss';\n\n// Change to 'base64' to get base64-encoded string\nconst cropperResultOptions: Croppie.ResultOptions & { type: 'blob' } = {\n  type: 'blob',\n  quality: 0.8,\n  format: 'jpeg',\n  circle: false,\n};\n\ntype ICroppie = typeof import('croppie');\nlet Croppie: ICroppie;\nlet croppiePromise: Promise<{ default: ICroppie }>;\n\nasync function ensureCroppie() {\n  if (!croppiePromise) {\n    croppiePromise = import('../../lib/croppie') as unknown as Promise<{ default: ICroppie }>;\n    Croppie = (await croppiePromise).default;\n  }\n\n  return croppiePromise;\n}\n\nlet cropper: Croppie;\n\nasync function initCropper(imgFile: File) {\n  try {\n    const cropContainer = document.getElementById('avatar-crop');\n    if (!cropContainer) {\n      return;\n    }\n\n    const { offsetWidth, offsetHeight } = cropContainer;\n\n    cropper = new Croppie(cropContainer, {\n      enableZoom: true,\n      boundary: {\n        width: offsetWidth,\n        height: offsetHeight,\n      },\n      viewport: {\n        width: offsetWidth - 16,\n        height: offsetHeight - 16,\n        type: 'circle',\n      },\n    });\n\n    const dataUri = await blobToDataUri(imgFile);\n    await cropper.bind({ url: dataUri });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n}\n\ntype OwnProps = {\n  file?: File;\n  onChange: (file: File) => void;\n  onClose: () => void;\n};\n\nconst CropModal: FC<OwnProps> = ({ file, onChange, onClose }: OwnProps) => {\n  const [isCroppieReady, setIsCroppieReady] = useState(false);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    if (!isCroppieReady) {\n      ensureCroppie().then(() => setIsCroppieReady(true));\n\n      return;\n    }\n\n    initCropper(file);\n  }, [file, isCroppieReady]);\n\n  const lang = useLang();\n\n  async function handleCropClick() {\n    if (!cropper) {\n      return;\n    }\n\n    const result: Blob | string = await cropper.result(cropperResultOptions);\n    const croppedImg = typeof result === 'string' ? result : blobToFile(result, 'avatar.jpg');\n\n    onChange(croppedImg);\n  }\n\n  return (\n    <Modal\n      isOpen={Boolean(file)}\n      onClose={onClose}\n      title=\"Drag to reposition\"\n      className=\"CropModal\"\n      hasCloseButton\n    >\n      {isCroppieReady ? (\n        <div id=\"avatar-crop\" />\n      ) : (\n        <Loading />\n      )}\n      <Button\n        className=\"confirm-button\"\n        round\n        color=\"primary\"\n        onClick={handleCropClick}\n        ariaLabel={lang('CropImage')}\n      >\n        <i className=\"icon-check\" />\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(CropModal);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target || !target.files || !target.files[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  function handleAvatarCrop(croppedImg: File) {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }\n\n  function handleModalClose() {\n    setSelectedFile(undefined);\n  }\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n","import React, {\n  FC, useState, useEffect, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport getAnimationData from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\nconst STICKER_SIZE = IS_SINGLE_COLUMN_LAYOUT ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [closeMonkeyData, setCloseMonkeyData] = useState<Record<string, any>>();\n  const [peekMonkeyData, setPeekMonkeyData] = useState<Record<string, any>>();\n  const [isFirstMonkeyLoaded, setIsFirstMonkeyLoaded] = useState(false);\n  const [isPeekShown, setIsPeekShown] = useState(false);\n\n  useEffect(() => {\n    if (!closeMonkeyData) {\n      getAnimationData('MonkeyClose').then(setCloseMonkeyData);\n    } else {\n      setTimeout(() => setIsPeekShown(true), PEEK_MONKEY_SHOW_DELAY);\n    }\n  }, [closeMonkeyData]);\n\n  useEffect(() => {\n    if (!peekMonkeyData) {\n      getAnimationData('MonkeyPeek').then(setPeekMonkeyData);\n    }\n  }, [peekMonkeyData]);\n\n  const handleFirstMonkeyLoad = useCallback(() => setIsFirstMonkeyLoaded(true), []);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      {closeMonkeyData && (\n        <AnimatedSticker\n          id=\"closeMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'hidden' : 'shown'}\n          animationData={closeMonkeyData}\n          playSegment={SEGMENT_COVER_EYES}\n          noLoop\n          onLoad={handleFirstMonkeyLoad}\n        />\n      )}\n      {peekMonkeyData && (\n        <AnimatedSticker\n          id=\"peekMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'shown' : 'hidden'}\n          animationData={peekMonkeyData}\n          playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n          noLoop\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { MIN_PASSWORD_LENGTH } from '../../config';\nimport { IS_TOUCH_ENV, IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  submitLabel?: string;\n  error?: string;\n  hint?: string;\n  placeholder?: string;\n  isLoading?: boolean;\n  isPasswordVisible?: boolean;\n  clearError: NoneToVoidFunction;\n  onChangePasswordVisibility: (state: boolean) => void;\n  onInputChange?: (password: string) => void;\n  onSubmit: (password: string) => void;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst PasswordForm: FC<OwnProps> = ({\n  isLoading = false,\n  isPasswordVisible,\n  error,\n  hint,\n  placeholder = 'Password',\n  submitLabel = 'Next',\n  clearError,\n  onChangePasswordVisibility,\n  onInputChange,\n  onSubmit,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const lang = useLang();\n\n  const [password, setPassword] = useState('');\n  const [canSubmit, setCanSubmit] = useState(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (error) {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n        inputRef.current!.select();\n      });\n    }\n  }, [error]);\n\n  function onPasswordChange(e: ChangeEvent<HTMLInputElement>) {\n    if (error) {\n      clearError();\n    }\n\n    const { target } = e;\n    setPassword(target.value);\n    setCanSubmit(target.value.length >= MIN_PASSWORD_LENGTH);\n    if (onInputChange) {\n      onInputChange(target.value);\n    }\n  }\n\n  function togglePasswordVisibility() {\n    onChangePasswordVisibility(!isPasswordVisible);\n  }\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    if (isLoading) {\n      return;\n    }\n\n    if (canSubmit) {\n      onSubmit(password);\n    }\n  }\n\n  return (\n    <form action=\"\" onSubmit={handleSubmit} autoComplete=\"off\">\n      <div\n        className={buildClassName('input-group password-input', password && 'touched', error && 'error')}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <input\n          ref={inputRef}\n          className=\"form-control\"\n          type={isPasswordVisible ? 'text' : 'password'}\n          id=\"sign-in-password\"\n          value={password || ''}\n          autoComplete=\"current-password\"\n          onChange={onPasswordChange}\n          dir=\"auto\"\n        />\n        <label>{error || hint || placeholder}</label>\n        <div\n          className=\"toggle-password\"\n          onClick={togglePasswordVisibility}\n          role=\"button\"\n          tabIndex={0}\n          title=\"Toggle password visibility\"\n        >\n          <i className={isPasswordVisible ? 'icon-eye' : 'icon-eye-closed'} />\n        </div>\n      </div>\n      {canSubmit && (\n        <Button type=\"submit\" ripple isLoading={isLoading}>\n          {submitLabel}\n        </Button>\n      )}\n    </form>\n  );\n};\n\nexport default memo(PasswordForm);\n"],"sourceRoot":""}