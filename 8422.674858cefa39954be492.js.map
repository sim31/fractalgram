{"version":3,"file":"8422.674858cefa39954be492.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/api/chats.ts","webpack://telegram-t/./src/global/actions/ui/calls.ts","webpack://telegram-t/./src/global/reducers/calls.ts","webpack://telegram-t/./src/global/selectors/calls.ts","webpack://telegram-t/./src/util/deeplink.ts"],"sourcesContent":["import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type {\n  ApiChat, ApiUser, ApiChatFolder, ApiError,\n} from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { NewChatMembersProgress, ChatCreationProgress, ManagementProgress } from '../../../types';\nimport type { GlobalActions, GlobalState } from '../../types';\n\nimport {\n  ARCHIVED_FOLDER_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  CHAT_LIST_LOAD_SLICE,\n  RE_TG_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TMP_CHAT_ID,\n  ALL_FOLDER_ID,\n  DEBUG,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addChats, addUsers, addUserStatuses, replaceThreadParam,\n  updateChatListIds, updateChats, updateChat, updateChatListSecondaryInfo,\n  updateManagementProgress, leaveChat, replaceUsers, replaceUserStatuses,\n  replaceChats, replaceChatListIds, addChatMembers, updateUser,\n} from '../../reducers';\nimport {\n  selectChat, selectUser, selectChatListType, selectIsChatPinned,\n  selectChatFolder, selectSupportChat, selectChatByUsername, selectThreadTopMessageId,\n  selectCurrentMessageList, selectThreadInfo, selectCurrentChat, selectLastServiceNotification,\n  selectVisibleUsers, selectUserByPhoneNumber,\n} from '../../selectors';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport {\n  isChatSummaryOnly,\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserBot,\n} from '../../helpers';\nimport { formatShareText, parseChooseParameter, processDeepLink } from '../../../util/deeplink';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { selectGroupCall } from '../../selectors/calls';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport * as langProvider from '../../../util/langProvider';\nimport { selectCurrentLimit } from '../../selectors/limits';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst SERVICE_NOTIFICATIONS_USER_MOCK: ApiUser = {\n  id: SERVICE_NOTIFICATIONS_USER_ID,\n  accessHash: '0',\n  type: 'userTypeRegular',\n  isMin: true,\n  username: '',\n  phoneNumber: '',\n};\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions) => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => id !== currentChatId && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID });\n  }\n});\n\naddActionHandler('openChat', (global, actions, payload) => {\n  const { id, threadId = MAIN_THREAD_ID } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  // Please telegram send us some updates about linked chat 🙏\n  if (chat?.lastMessage?.threadInfo) {\n    actions.requestThreadInfoUpdate({\n      chatId: chat.lastMessage.threadInfo.chatId,\n      threadId: chat.lastMessage.threadInfo.threadId,\n    });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      actions.requestThreadInfoUpdate({ chatId: id, threadId });\n    }\n  }\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId });\n  }\n});\n\naddActionHandler('focusMessageInComments', async (global, actions, payload) => {\n  const { chatId, threadId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  actions.focusMessage({ chatId, threadId, messageId });\n});\n\naddActionHandler('openSupportChat', async (global, actions) => {\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload) => {\n  const listType = payload.listType as 'active' | 'archived';\n  const { onReplace } = payload;\n  let { shouldReplace } = payload;\n  let i = 0;\n\n  const getOrderDate = (chat: ApiChat) => {\n    return chat.lastMessage?.date || chat.joinDate;\n  };\n\n  while (shouldReplace || !getGlobal().chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n\n    if (global.connectionState !== 'connectionStateReady' || global.authState !== 'authorizationStateReady') {\n      return;\n    }\n\n    const listIds = !shouldReplace && global.chats.listIds[listType];\n    const oldestChat = listIds\n      ? listIds\n        /* eslint-disable @typescript-eslint/no-loop-func */\n        .map((id) => global.chats.byId[id])\n        .filter((chat) => (\n          Boolean(chat && getOrderDate(chat))\n          && chat.id !== SERVICE_NOTIFICATIONS_USER_ID\n          && !selectIsChatPinned(global, chat.id)\n        ))\n        /* eslint-enable @typescript-eslint/no-loop-func */\n        .sort((chat1, chat2) => getOrderDate(chat1)! - getOrderDate(chat2)!)[0]\n      : undefined;\n\n    await loadChats(listType, oldestChat?.id, oldestChat ? getOrderDate(oldestChat) : undefined, shouldReplace);\n\n    if (shouldReplace) {\n      onReplace?.();\n      shouldReplace = false;\n    }\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload) => {\n  const { chatId, force } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(chat);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(chat));\n  }\n});\n\naddActionHandler('loadTopChats', () => {\n  runThrottledForLoadTopChats(() => loadChats('active'));\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    serverTimeOffset,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId, isMuted } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  setGlobal(updateChat(global, chatId, { isMuted }));\n  void callApi('updateChatMutedState', { chat, isMuted, serverTimeOffset });\n});\n\naddActionHandler('createChannel', (global, actions, payload) => {\n  const {\n    title, about, photo, memberIds,\n  } = payload!;\n\n  const members = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  void createChannel(title, members, about, photo);\n});\n\naddActionHandler('joinChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  void joinChannel(channelId, accessHash);\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload) => {\n  const { chatId, userId }: { chatId: string; userId: string } = payload!;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddActionHandler('deleteChat', (global, actions, payload) => {\n  const { chatId }: { chatId: string } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('leaveChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createGroupChat', (global, actions, payload) => {\n  const { title, memberIds, photo } = payload!;\n  const members = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  void createGroupChat(title, members, photo);\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload) => {\n  const { id, folderId } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('loadChatFolders', () => {\n  void loadChatFolders();\n});\n\naddActionHandler('loadRecommendedChatFolders', () => {\n  void loadRecommendedChatFolders();\n});\n\naddActionHandler('editChatFolders', (global, actions, payload) => {\n  const { chatId, idsToRemove, idsToAdd } = payload!;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n\n  const isLimitReached = (idsToAdd as number[])\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats' });\n    return;\n  }\n\n  (idsToRemove as number[]).forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  (idsToAdd as number[]).forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload) => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', (global, actions, payload) => {\n  const { folder } = payload!;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  void createChatFolder(folder, maxId);\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload) => {\n  const { folderIds } = payload!;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    });\n  }\n});\n\naddActionHandler('deleteChatFolder', (global, actions, payload) => {\n  const { id } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void deleteChatFolder(id);\n  }\n});\n\naddActionHandler('toggleChatUnread', (global, actions, payload) => {\n  const { id } = payload!;\n  const { serverTimeOffset } = global;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { serverTimeOffset, chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddActionHandler('openChatByInvite', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('openChatByInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.chatId });\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload) => {\n  const { phoneNumber, startAttach, attach } = payload!;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await fetchChatByPhoneNumber(phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat();\n    actions.showNotification({\n      message: langProvider.getTranslation('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n    });\n    return;\n  }\n\n  actions.openChat({ id: chat.id });\n\n  if (attach) {\n    openAttachMenuFromLink(actions, chat.id, attach, startAttach);\n  }\n});\n\naddActionHandler('openTelegramLink', (global, actions, payload) => {\n  const { url } = payload!;\n  const {\n    openChatByPhoneNumber,\n    openChatByInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    showNotification,\n    focusMessage,\n    openInvoice,\n    processAttachBotParameters,\n    openChatByUsername: openChatByUsernameAction,\n  } = actions;\n\n  if (url.match(RE_TG_LINK)) {\n    processDeepLink(url);\n    return;\n  }\n\n  const uri = new URL(url.startsWith('http') ? url : `https://${url}`);\n  if (uri.hostname === 't.me' && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostParts = uri.hostname.split('.');\n  if (hostParts.length > 3) return;\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${uri.pathname}` : uri.pathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((l) => decodeURI(l));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const startAttach = params.hasOwnProperty('startattach') && !params.startattach ? true : params.startattach;\n  const choose = parseChooseParameter(params.choose);\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach,\n      attach: params.attach,\n    });\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    openChatByInvite({ hash });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n    });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text });\n  } else if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    const chatId = `-${chatOrChannelPostId}`;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      showNotification({ message: 'Chat does not exist' });\n      return;\n    }\n\n    focusMessage({\n      chatId,\n      messageId,\n    });\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      slug: part1.substring(1),\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      slug: part2,\n    });\n  } else if (startAttach && choose) {\n    processAttachBotParameters({\n      username: part1,\n      filter: choose,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    });\n  } else {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      commentId,\n      startParam: params.start,\n      startAttach,\n      attach: params.attach,\n    });\n  }\n});\n\naddActionHandler('acceptInviteConfirmation', async (global, actions, payload) => {\n  const { hash } = payload!;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload) => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach,\n  } = payload!;\n\n  const chat = selectCurrentChat(global);\n\n  if (!commentId) {\n    if (chat && chat.username === username && !startAttach && !startParam) {\n      actions.focusMessage({ chatId: chat.id, messageId });\n      return;\n    }\n    await openChatByUsername(actions, username, messageId, startParam, startAttach, attach);\n    return;\n  }\n\n  const { chatId, type } = selectCurrentMessageList(global) || {};\n  const usernameChat = selectChatByUsername(global, username);\n  if (chatId && usernameChat && type === 'thread') {\n    const threadInfo = selectThreadInfo(global, chatId, messageId);\n\n    if (threadInfo && threadInfo.chatId === chatId) {\n      actions.focusMessage({\n        chatId: threadInfo.chatId,\n        threadId: threadInfo.threadId,\n        messageId: commentId,\n      });\n      return;\n    }\n  }\n\n  if (!messageId) return;\n\n  void openCommentsByUsername(actions, username, messageId, commentId);\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n\n  let chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload) => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload) => {\n  const { chatId, userId, bannedRights } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const chatAfterUpdate = selectChat(global, chatId);\n\n  if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  setGlobal(updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(members && isBanned && {\n        members: members.filter((m) => m.userId !== userId),\n      }),\n      ...(members && !isBanned && {\n        members: members.map((m) => (\n          m.userId === userId\n            ? { ...m, bannedRights }\n            : m\n        )),\n      }),\n      ...(isUnblocked && kickedMembers && {\n        kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n      }),\n    },\n  }));\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload) => {\n  const {\n    chatId, userId, adminRights, customTitle,\n  } = payload!;\n\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembers } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n\n  global = getGlobal();\n\n  setGlobal(updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(adminMembers && isDismissed && {\n        adminMembers: adminMembers.filter((m) => m.userId !== userId),\n      }),\n      ...(adminMembers && !isDismissed && {\n        adminMembers: adminMembers.map((m) => (\n          m.userId === userId\n            ? { ...m, adminRights, customTitle }\n            : m\n        )),\n      }),\n    },\n  }));\n});\n\naddActionHandler('updateChat', async (global, actions, payload) => {\n  const {\n    chatId, title, about, photo,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    chat.fullInfo && chat.fullInfo.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global) => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = addChats(global, addedById);\n  setGlobal({\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  });\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload) => {\n  const { channelId, chatId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  let chat = selectChat(global, chatId);\n  if (!channel || !chat) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  let { fullInfo } = chat;\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload) => {\n  const { channelId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo?.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    loadFullChat(chat);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload) => {\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = payload + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n    });\n    return undefined;\n  }\n\n  return {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      activeChatFolder: payload,\n    },\n  };\n});\n\naddActionHandler('resetOpenChatWithDraft', (global) => {\n  return {\n    ...global,\n    requestedDraft: undefined,\n  };\n});\n\naddActionHandler('loadMoreMembers', async (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = (chat.fullInfo?.members?.length) || undefined;\n  const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n  if (!result) {\n    return;\n  }\n\n  const { members, users, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload) => {\n  const { chatId, memberIds } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as string[]).map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState(NewChatMembersProgress.Loading);\n  await callApi('addChatMembers', chat, users);\n  actions.setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n  loadFullChat(chat);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload) => {\n  const { chatId, userId } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  loadFullChat(chat);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload) => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload) => {\n  const { chatId, enabledReactions } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n  });\n\n  void loadFullChat(chat);\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const settings = await callApi('fetchChatSettings', chat);\n  if (!settings) return;\n\n  setGlobal(updateChat(getGlobal(), chat.id, { settings }));\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload) => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload) => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload) => {\n  const { username, filter, startParam } = payload;\n  const bot = await getAttachBotOrNotify(global, username);\n  if (!bot) return;\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    setGlobal({\n      ...global,\n      requestedAttachBotInstall: {\n        botId: bot.id,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            botId: bot.id,\n            filter,\n            startParam,\n          },\n        },\n      },\n    });\n    return;\n  }\n\n  getActions().requestAttachBotInChat({\n    botId: bot.id,\n    filter,\n    startParam,\n  });\n});\n\nasync function loadChats(\n  listType: 'active' | 'archived', offsetId?: string, offsetDate?: number, shouldReplace = false,\n) {\n  let global = getGlobal();\n  const lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: shouldReplace,\n    serverTimeOffset: global.serverTimeOffset,\n    lastLocalServiceMessage,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  global = getGlobal();\n\n  if (shouldReplace && listType === 'active') {\n    // Always include service notifications chat\n    if (!chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n      const result2 = await callApi('fetchChat', {\n        type: 'user',\n        user: SERVICE_NOTIFICATIONS_USER_MOCK,\n      });\n\n      global = getGlobal();\n\n      const notificationsChat = result2 && selectChat(global, result2.chatId);\n      if (notificationsChat) {\n        chatIds.unshift(notificationsChat.id);\n        result.chats.unshift(notificationsChat);\n        if (lastLocalServiceMessage) {\n          notificationsChat.lastMessage = lastLocalServiceMessage;\n        }\n      }\n    }\n\n    const currentChat = selectCurrentChat(global);\n    const visibleChats = currentChat ? [currentChat] : [];\n\n    const visibleUsers = selectVisibleUsers(global) || [];\n    if (global.currentUserId && global.users.byId[global.currentUserId]) {\n      visibleUsers.push(global.users.byId[global.currentUserId]);\n    }\n\n    global = replaceUsers(global, buildCollectionByKey(visibleUsers.concat(result.users), 'id'));\n    global = replaceUserStatuses(global, result.userStatusesById);\n    global = replaceChats(global, buildCollectionByKey(visibleChats.concat(result.chats), 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else if (shouldReplace && listType === 'archived') {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = updateChatListIds(global, listType, chatIds);\n  }\n\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  result.chatIds.forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId],\n    );\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat(chat: ApiChat) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    users, userStatusesById, fullInfo, groupCall, membersCount,\n  } = result;\n\n  let global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  global = updateChat(global, chat.id, {\n    fullInfo,\n    ...(membersCount && { membersCount }),\n  });\n\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  if (stickerSet) {\n    getActions().loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n    });\n  }\n\n  return result;\n}\n\nasync function createChannel(title: string, users: ApiUser[], about?: string, photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  let createdChannel: ApiChat | undefined;\n\n  try {\n    createdChannel = await callApi('createChannel', { title, about, users });\n  } catch (error) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    });\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      getActions().openLimitReachedModal({ limit: 'channels' });\n    } else {\n      getActions().showDialog({ data: { ...(error as ApiError), hasErrorKey: true } });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  let global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getActions().openChat({ id: channelId, shouldReplaceHistory: true });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n}\n\nasync function joinChannel(channelId: string, accessHash: string) {\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      getActions().openLimitReachedModal({ limit: 'channels' });\n    } else {\n      getActions().showDialog({ data: { ...(error as ApiError), hasErrorKey: true } });\n    }\n  }\n}\n\nasync function createGroupChat(title: string, users: ApiUser[], photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  try {\n    const createdChat = await callApi('createGroupChat', {\n      title,\n      users,\n    });\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    let global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = {\n      ...global,\n      chatCreation: {\n        ...global.chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    };\n    setGlobal(global);\n    getActions()\n      .openChat({\n        id: chatId,\n        shouldReplaceHistory: true,\n      });\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (e: any) {\n    if (e.message === 'USERS_TOO_FEW') {\n      const global = getGlobal();\n      setGlobal({\n        ...global,\n        chatCreation: {\n          ...global.chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      });\n    }\n  }\n}\n\nexport async function migrateChat(chat: ApiChat): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      getActions().openLimitReachedModal({ limit: 'channels' });\n    } else {\n      getActions().showDialog({ data: { ...(error as ApiError), hasErrorKey: true } });\n    }\n\n    return undefined;\n  }\n}\n\nasync function loadChatFolders() {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    });\n  }\n}\n\nasync function loadRecommendedChatFolders() {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    });\n  }\n}\n\nasync function createChatFolder(folder: ApiChatFolder, maxId: number) {\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    });\n  }\n}\n\nasync function deleteChatFolder(id: number) {\n  await callApi('deleteChatFolder', id);\n}\n\nexport async function fetchChatByUsername(\n  username: string,\n) {\n  const global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  if (user) {\n    setGlobal(updateUser(getGlobal(), user.id, user));\n  }\n\n  return chat;\n}\n\nexport async function fetchChatByPhoneNumber(phoneNumber: string) {\n  const global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  if (user) {\n    setGlobal(updateUser(getGlobal(), user.id, user));\n  }\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify(global: GlobalState, username: string) {\n  const chat = await fetchChatByUsername(username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot || !user.isAttachBot) {\n    getActions().showNotification({ message: langProvider.getTranslation('WebApp.AddToAttachmentUnavailableError') });\n\n    return undefined;\n  }\n  return user;\n}\n\nasync function openChatByUsername(\n  actions: GlobalActions,\n  username: string,\n  channelPostId?: number,\n  startParam?: string,\n  startAttach?: string | boolean,\n  attach?: string,\n) {\n  const global = getGlobal();\n  const currentChat = selectCurrentChat(global);\n\n  // Attach in the current chat\n  if (startAttach && !attach) {\n    const bot = await getAttachBotOrNotify(global, username);\n\n    if (!currentChat || !bot) return;\n\n    actions.callAttachBot({\n      botId: bot.id,\n      chatId: currentChat.id,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.username === username;\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID });\n  }\n\n  const chat = await fetchChatByUsername(username);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat();\n      actions.showNotification({ message: 'User does not exist' });\n    }\n\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({ chatId: chat.id, messageId: channelPostId });\n  } else if (!isCurrentChat) {\n    actions.openChat({ id: chat.id });\n  }\n\n  if (startParam) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    openAttachMenuFromLink(actions, chat.id, attach, startAttach);\n  }\n}\n\nasync function openAttachMenuFromLink(\n  actions: GlobalActions,\n  chatId: string, attach: string, startAttach?: string | boolean,\n) {\n  const botChat = await fetchChatByUsername(attach);\n  if (!botChat) return;\n  const botUser = selectUser(getGlobal(), botChat.id);\n  if (!botUser || !botUser.isAttachBot) {\n    actions.showNotification({ message: langProvider.getTranslation('WebApp.AddToAttachmentUnavailableError') });\n    return;\n  }\n\n  actions.callAttachBot({\n    botId: botUser.id,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n  });\n}\n\nasync function openCommentsByUsername(\n  actions: GlobalActions,\n  username: string,\n  messageId: number,\n  commentId: number,\n) {\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await fetchChatByUsername(username);\n\n  if (!chat) return;\n\n  const global = getGlobal();\n\n  const threadInfo = selectThreadInfo(global, chat.id, messageId);\n  let discussionChatId: string | undefined;\n\n  if (!threadInfo) {\n    const result = await callApi('requestThreadInfoUpdate', { chat, threadId: messageId });\n    if (!result) return;\n\n    discussionChatId = result.discussionChatId;\n  } else {\n    discussionChatId = threadInfo.chatId;\n  }\n\n  if (!discussionChatId) return;\n\n  actions.focusMessage({\n    chatId: discussionChatId,\n    threadId: messageId,\n    messageId: Number(commentId),\n  });\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectUser } from '../../selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport type { ApiGroupCall } from '../../../api/types';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { addChats, addUsers } from '../../reducers';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport * as langProvider from '../../../util/langProvider';\nimport type { CallSound } from '../../types';\n\n// Workaround for Safari not playing audio without user interaction\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\n\nlet sounds: Record<CallSound, HTMLAudioElement>;\nlet initializationPromise: Promise<void> | undefined = Promise.resolve();\n\nexport const initializeSoundsForSafari = () => {\n  if (!initializationPromise) return Promise.resolve();\n\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n\n  initializationPromise = Promise.all(Object.values(sounds).map((l) => {\n    l.muted = true;\n    l.volume = 0.0001;\n    return l.play().then(() => {\n      l.pause();\n      l.volume = 1;\n      l.currentTime = 0;\n      l.muted = false;\n    });\n  })).then(() => {\n    initializationPromise = undefined;\n  });\n\n  return initializationPromise;\n};\n\nasync function fetchGroupCall(groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  let global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants(groupCall: Partial<ApiGroupCall>, nextOffset?: string) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleGroupCallPanel', (global) => {\n  return {\n    ...global,\n    isCallPanelVisible: !global.isCallPanelVisible,\n  };\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload) => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(groupCall);\n    await fetchGroupCallParticipants(groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload) => {\n  const { chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  setGlobal(updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  }));\n\n  actions.joinGroupCall({ id: result.id, accessHash: result.accessHash });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions) => {\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const canInvite = Boolean(chat.username);\n\n  let { inviteLink } = chat.fullInfo!;\n  if (canInvite) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: 'Link copied to clipboard',\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload) => {\n  const { username, inviteHash } = payload!;\n\n  const chat = await fetchChatByUsername(username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.getTranslation('NoUsernameFound') });\n    return;\n  }\n\n  const full = await loadFullChat(chat);\n\n  if (full?.groupCall) {\n    actions.joinGroupCall({ id: full.groupCall.id, accessHash: full.groupCall.accessHash, inviteHash });\n  }\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload) => {\n  if (!ARE_CALLS_SUPPORTED) return;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel();\n    return;\n  }\n\n  const {\n    chatId, id, accessHash, inviteHash,\n  } = payload;\n\n  createAudioElement();\n\n  await initializeSoundsForSafari();\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId);\n\n  if (groupCall?.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel();\n    return;\n  }\n\n  if (activeGroupCallId) {\n    actions.leaveGroupCall({\n      rejoin: payload,\n    });\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel();\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash)) {\n    groupCall = await fetchGroupCall({\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n    isCallPanelVisible: false,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload) => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  if (initializationPromise) {\n    initializationPromise.then(doPlay);\n  } else {\n    doPlay();\n  }\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global) => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestCall', async (global, actions, payload) => {\n  const { userId, isVideo } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel();\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  await initializeSoundsForSafari();\n\n  setGlobal({\n    ...getGlobal(),\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n    isCallPanelVisible: false,\n  });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n","import type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\nimport type { ApiGroupCall } from '../../api/types';\nimport { selectGroupCall } from '../selectors/calls';\nimport { omit } from '../../util/iteratees';\nimport { updateChat } from './chats';\nimport { selectChat } from '../selectors';\n\nexport function updateGroupCall(\n  global: GlobalState,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): GlobalState {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter((l) => !l.isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall(\n  global: GlobalState,\n  groupCallId: string,\n): GlobalState {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChat(global, groupCall.chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          groupCallId: undefined,\n        },\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall(\n  global: GlobalState,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): GlobalState {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant(\n  global: GlobalState,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n) {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n","import type { GlobalState } from '../types';\nimport { selectChat } from './chats';\nimport { isChatBasicGroup } from '../helpers';\nimport { selectUser } from './users';\n\nexport function selectChatGroupCall(global: GlobalState, chatId: string) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !chat.fullInfo || !chat.fullInfo.groupCallId) return undefined;\n\n  return selectGroupCall(global, chat.fullInfo.groupCallId);\n}\n\nexport function selectGroupCall(global: GlobalState, groupCallId: string) {\n  return global.groupCalls.byId[groupCallId];\n}\n\nexport function selectGroupCallParticipant(global: GlobalState, groupCallId: string, participantId: string) {\n  return selectGroupCall(global, groupCallId)?.participants[participantId];\n}\n\nexport function selectIsAdminInActiveGroupCall(global: GlobalState): boolean {\n  const chatId = selectActiveGroupCall(global)?.chatId;\n\n  if (!chatId) return false;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return false;\n\n  return (isChatBasicGroup(chat) && chat.isCreator) || Boolean(chat.adminRights?.manageCall);\n}\n\nexport function selectActiveGroupCall(global: GlobalState) {\n  const { groupCalls: { activeGroupCallId } } = global;\n  if (!activeGroupCallId) {\n    return undefined;\n  }\n\n  return selectGroupCall(global, activeGroupCallId);\n}\n\nexport function selectPhoneCallUser(global: GlobalState) {\n  const { phoneCall, currentUserId } = global;\n  if (!phoneCall || !phoneCall.participantId || !phoneCall.adminId) {\n    return undefined;\n  }\n\n  const id = phoneCall.adminId === currentUserId ? phoneCall.participantId : phoneCall.adminId;\n  return selectUser(global, id);\n}\n","import { getActions } from '../global';\n\nimport type { ApiChatType } from '../api/types';\n\nimport { API_CHAT_TYPES } from '../config';\nimport { IS_SAFARI } from './environment';\n\ntype DeepLinkMethod = 'resolve' | 'login' | 'passport' | 'settings' | 'join' | 'addstickers' | 'addemoji' |\n'setlanguage' | 'addtheme' | 'confirmphone' | 'socks' | 'proxy' | 'privatepost' | 'bg' | 'share' | 'msg' | 'msg_url' |\n'invoice';\n\nexport const processDeepLink = (url: string) => {\n  const {\n    protocol, searchParams, pathname, hostname,\n  } = new URL(url);\n\n  if (protocol !== 'tg:') return;\n\n  const {\n    openChatByInvite,\n    openChatByUsername,\n    openChatByPhoneNumber,\n    openStickerSet,\n    focusMessage,\n    joinVoiceChatByLink,\n    openInvoice,\n    processAttachBotParameters,\n    openChatWithDraft,\n  } = getActions();\n\n  // Safari thinks the path in tg://path links is hostname for some reason\n  const method = (IS_SAFARI ? hostname : pathname).replace(/^\\/\\//, '') as DeepLinkMethod;\n  const params = Object.fromEntries(searchParams);\n\n  switch (method) {\n    case 'resolve': {\n      const {\n        domain, phone, post, comment, voicechat, livestream, start, startattach, attach,\n      } = params;\n\n      const startAttach = params.hasOwnProperty('startattach') && !startattach ? true : startattach;\n      const choose = parseChooseParameter(params.choose);\n\n      if (domain !== 'telegrampassport') {\n        if (startAttach && choose) {\n          processAttachBotParameters({\n            username: domain,\n            filter: choose,\n            ...(typeof startAttach === 'string' && { startParam: startAttach }),\n          });\n        } else if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n          joinVoiceChatByLink({\n            username: domain,\n            inviteHash: voicechat || livestream,\n          });\n        } else if (phone) {\n          openChatByPhoneNumber({ phone, startAttach, attach });\n        } else {\n          openChatByUsername({\n            username: domain,\n            messageId: Number(post),\n            commentId: Number(comment),\n            startParam: start,\n            startAttach,\n            attach,\n          });\n        }\n      }\n      break;\n    }\n    case 'privatepost': {\n      const {\n        post, channel,\n      } = params;\n\n      focusMessage({\n        chatId: `-${channel}`,\n        id: post,\n      });\n      break;\n    }\n    case 'bg': {\n      // const {\n      //   slug, color, rotation, mode, intensity, bg_color: bgColor, gradient,\n      // } = params;\n      break;\n    }\n    case 'join': {\n      const { invite } = params;\n\n      openChatByInvite({ hash: invite });\n      break;\n    }\n    case 'addemoji':\n    case 'addstickers': {\n      const { set } = params;\n\n      openStickerSet({\n        stickerSetInfo: {\n          shortName: set,\n        },\n      });\n      break;\n    }\n    case 'share':\n    case 'msg':\n    case 'msg_url': {\n      const { url: urlParam, text } = params;\n      openChatWithDraft({ text: formatShareText(urlParam, text) });\n      break;\n    }\n    case 'login': {\n      // const { code, token } = params;\n      break;\n    }\n\n    case 'invoice': {\n      const { slug } = params;\n      openInvoice({ slug });\n      break;\n    }\n    default:\n      // Unsupported deeplink\n\n      break;\n  }\n};\n\nexport function parseChooseParameter(choose?: string) {\n  if (!choose) return undefined;\n  const types = choose.toLowerCase().split(' ');\n  return types.filter((type): type is ApiChatType => API_CHAT_TYPES.includes(type as ApiChatType));\n}\n\nexport function formatShareText(url?: string, text?: string) {\n  return [url, text].filter(Boolean).join('\\n');\n}\n"],"names":["SERVICE_NOTIFICATIONS_USER_MOCK","id","SERVICE_NOTIFICATIONS_USER_ID","accessHash","type","isMin","username","phoneNumber","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","async","loadChats","listType","offsetId","offsetDate","shouldReplace","global","getGlobal","lastLocalServiceMessage","selectLastServiceNotification","message","result","callApi","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","serverTimeOffset","chatIds","length","shift","includes","result2","user","notificationsChat","selectChat","chatId","unshift","chats","lastMessage","currentChat","selectCurrentChat","visibleChats","visibleUsers","selectVisibleUsers","currentUserId","users","byId","push","replaceUsers","buildCollectionByKey","concat","replaceUserStatuses","userStatusesById","replaceChats","replaceChatListIds","addUsers","addUserStatuses","updateChats","updateChatListIds","updateChatListSecondaryInfo","forEach","replaceThreadParam","MAIN_THREAD_ID","draftsById","replyingToById","isFullyLoaded","setGlobal","loadFullChat","chat","fullInfo","groupCall","membersCount","existingGroupCall","selectGroupCall","updateGroupCall","omit","undefined","participantsCount","updateChat","stickerSet","getActions","loadStickers","stickerSetInfo","migrateChat","error","openLimitReachedModal","showDialog","data","hasErrorKey","fetchChatByUsername","localChat","selectChatByUsername","updateUser","getAttachBotOrNotify","selectUser","isUserBot","isAttachBot","showNotification","langProvider","openAttachMenuFromLink","actions","attach","startAttach","botChat","botUser","callAttachBot","botId","startParam","addActionHandler","preloadedChatIds","Set","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatId","selectCurrentMessageList","folderAllOrderedIds","getOrderedIds","ALL_FOLDER_ID","nextChatId","find","has","add","loadViewportMessages","threadId","payload","hasUnreadMark","toggleChatUnread","threadInfo","requestThreadInfoUpdate","isChatSummaryOnly","requestChatUpdate","selectThreadTopMessageId","chatFullInfo","linkedChatId","openChat","messageId","focusMessage","selectSupportChat","shouldReplaceHistory","TMP_CHAT_ID","onReplace","getOrderDate","date","joinDate","DEBUG","console","connectionState","authState","listIds","oldestChat","map","filter","Boolean","selectIsChatPinned","sort","chat1","chat2","force","lastLocalMessage","isMuted","title","about","photo","memberIds","createdChannel","chatCreation","progress","ChatCreationProgress","channelId","createChannel","joinChannel","userId","leaveChat","createdChat","e","createGroupChat","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","ids","orderedPinnedIds","isChatArchived","chatFolders","loadChatFolders","recommendedChatFolders","recommended","loadRecommendedChatFolders","idsToRemove","idsToAdd","some","includedId","emoticon","orderedIds","Object","keys","maxId","recommendedId","description","newFolder","createChatFolder","Math","max","folderIds","deleteChatFolder","unreadCount","hash","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","openPreviousChat","replace","url","openChatByPhoneNumber","openChatByInvite","openStickerSet","openChatWithDraft","joinVoiceChatByLink","openInvoice","processAttachBotParameters","openChatByUsername","openChatByUsernameAction","match","RE_TG_LINK","processDeepLink","uri","URL","startsWith","hostname","pathname","window","open","toString","hostParts","split","part1","part2","part3","l","decodeURI","params","fromEntries","searchParams","hasOwnProperty","startattach","choose","parseChooseParameter","substr","shortName","chatOrChannelPostId","Number","commentId","comment","text","formatShareText","inviteHash","voicechat","livestream","slug","substring","start","channelPostId","bot","isCurrentChat","startBot","param","usernameChat","selectThreadInfo","discussionChatId","openCommentsByUsername","isEnabled","isChatBasicGroup","bannedRights","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembers","isDismissed","updateManagementProgress","ManagementProgress","Promise","all","groups","addedById","reduce","group","addChats","forDiscussionIds","channel","fullChat","isPreHistoryHidden","activeChatFolder","requestedDraft","offset","addChatMembers","setNewChatMembersDialogState","NewChatMembersProgress","isProtected","enabledReactions","settings","isChatSuperGroup","isChatChannel","attachMenu","bots","requestAttachBotInChat","requestedAttachBotInstall","onConfirm","action","audioElement","audioContext","sounds","initializationPromise","resolve","initializeSoundsForSafari","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","values","muted","volume","play","then","currentTime","fetchGroupCall","call","isLoaded","fetchGroupCallParticipants","nextOffset","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","isCallPanelVisible","subscribed","peer","joinGroupCall","selectActiveGroupCall","canInvite","inviteLink","canSelfUnmute","copyTextToClipboard","full","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","AudioContext","webkitAudioContext","srcObject","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","stream","getAudioTracks","enabled","silence","safePlay","createAudioElement","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","sound","doPlay","isVideo","state","participantId","adminId","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","acc","el","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount","selectGroupCallParticipant","selectIsAdminInActiveGroupCall","isCreator","manageCall","selectPhoneCallUser","protocol","method","IS_SAFARI","domain","phone","post","invite","set","urlParam","toLowerCase","API_CHAT_TYPES"],"sourceRoot":""}